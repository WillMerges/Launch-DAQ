   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "udp.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .data.udp_port,"aw",%progbits
  20              	 .align 1
  23              	udp_port:
  24 0000 00C0     	 .short -16384
  25              	 .comm udp_pcbs,4,4
  26              	 .section .text.udp_init,"ax",%progbits
  27              	 .align 2
  28              	 .global udp_init
  29              	 .thumb
  30              	 .thumb_func
  32              	udp_init:
  33              	.LFB128:
  34              	 .file 1 "../Dave/Generated/ETH_LWIP/lwip/core/udp.c"
   1:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** /**
   2:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @file
   3:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * User Datagram Protocol module
   4:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
   5:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  */
   6:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
   7:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** /*
   8:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
   9:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * All rights reserved.
  10:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
  11:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * Redistribution and use in source and binary forms, with or without modification,
  12:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * are permitted provided that the following conditions are met:
  13:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
  14:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  15:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *    this list of conditions and the following disclaimer.
  16:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  17:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *    this list of conditions and the following disclaimer in the documentation
  18:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *    and/or other materials provided with the distribution.
  19:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * 3. The name of the author may not be used to endorse or promote products
  20:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *    derived from this software without specific prior written permission.
  21:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
  22:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
  23:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  24:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
  25:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  26:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
  27:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
  30:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
  31:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * OF SUCH DAMAGE.
  32:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
  33:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * This file is part of the lwIP TCP/IP stack.
  34:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
  35:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * Author: Adam Dunkels <adam@sics.se>
  36:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
  37:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  */
  38:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
  39:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
  40:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** /* udp.c
  41:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
  42:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * The code for the User Datagram Protocol UDP & UDPLite (RFC 3828).
  43:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
  44:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  */
  45:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
  46:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** /* @todo Check the use of '(struct udp_pcb).chksum_len_rx'!
  47:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  */
  48:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
  49:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #include "../include/lwip/opt.h"
  50:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
  51:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #if LWIP_UDP /* don't build if not configured for use in lwipopts.h */
  52:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
  53:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #include "../include/lwip/udp.h"
  54:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #include "../include/lwip/def.h"
  55:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #include "../include/lwip/memp.h"
  56:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #include "../include/ipv4/lwip/inet_chksum.h"
  57:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #include "../include/ipv4/lwip/ip_addr.h"
  58:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #include "../include/lwip/netif.h"
  59:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #include "../include/ipv4/lwip/icmp.h"
  60:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #include "../include/lwip/stats.h"
  61:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #include "../include/lwip/snmp.h"
  62:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #include "../port/include/arch/perf.h"
  63:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #include "../include/lwip/dhcp.h"
  64:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
  65:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #include <string.h>
  66:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
  67:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #ifndef UDP_LOCAL_PORT_RANGE_START
  68:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** /* From http://www.iana.org/assignments/port-numbers:
  69:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****    "The Dynamic and/or Private Ports are those from 49152 through 65535" */
  70:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #define UDP_LOCAL_PORT_RANGE_START  0xc000
  71:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #define UDP_LOCAL_PORT_RANGE_END    0xffff
  72:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #define UDP_ENSURE_LOCAL_PORT_RANGE(port) (((port) & ~UDP_LOCAL_PORT_RANGE_START) + UDP_LOCAL_PORT_
  73:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif
  74:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
  75:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** /* last local UDP port */
  76:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** static u16_t udp_port = UDP_LOCAL_PORT_RANGE_START;
  77:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
  78:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** /* The list of UDP PCBs */
  79:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** /* exported in udp.h (was static) */
  80:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** struct udp_pcb *udp_pcbs;
  81:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
  82:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** /**
  83:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * Initialize this module.
  84:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  */
  85:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** void
  86:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** udp_init(void)
  87:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** {
  35              	 .loc 1 87 0
  36              	 .cfi_startproc
  37              	 
  38              	 
  39              	 
  40 0000 80B4     	 push {r7}
  41              	.LCFI0:
  42              	 .cfi_def_cfa_offset 4
  43              	 .cfi_offset 7,-4
  44 0002 00AF     	 add r7,sp,#0
  45              	.LCFI1:
  46              	 .cfi_def_cfa_register 7
  88:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  89:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
  90:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
  91:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** }
  47              	 .loc 1 91 0
  48 0004 BD46     	 mov sp,r7
  49              	.LCFI2:
  50              	 .cfi_def_cfa_register 13
  51              	 
  52 0006 5DF8047B 	 ldr r7,[sp],#4
  53              	.LCFI3:
  54              	 .cfi_restore 7
  55              	 .cfi_def_cfa_offset 0
  56 000a 7047     	 bx lr
  57              	 .cfi_endproc
  58              	.LFE128:
  60              	 .section .text.udp_new_port,"ax",%progbits
  61              	 .align 2
  62              	 .thumb
  63              	 .thumb_func
  65              	udp_new_port:
  66              	.LFB129:
  92:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
  93:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** /**
  94:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * Allocate a new local UDP port.
  95:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
  96:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @return a new (free) local UDP port number
  97:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  */
  98:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** static u16_t
  99:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** udp_new_port(void)
 100:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** {
  67              	 .loc 1 100 0
  68              	 .cfi_startproc
  69              	 
  70              	 
  71              	 
  72 0000 80B4     	 push {r7}
  73              	.LCFI4:
  74              	 .cfi_def_cfa_offset 4
  75              	 .cfi_offset 7,-4
  76 0002 83B0     	 sub sp,sp,#12
  77              	.LCFI5:
  78              	 .cfi_def_cfa_offset 16
  79 0004 00AF     	 add r7,sp,#0
  80              	.LCFI6:
  81              	 .cfi_def_cfa_register 7
 101:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   u16_t n = 0;
  82              	 .loc 1 101 0
  83 0006 0023     	 movs r3,#0
  84 0008 FB80     	 strh r3,[r7,#6]
  85              	.L3:
 102:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   struct udp_pcb *pcb;
 103:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   
 104:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** again:
 105:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
  86              	 .loc 1 105 0
  87 000a 184B     	 ldr r3,.L10
  88 000c 1B88     	 ldrh r3,[r3]
  89 000e 5A1C     	 adds r2,r3,#1
  90 0010 91B2     	 uxth r1,r2
  91 0012 164A     	 ldr r2,.L10
  92 0014 1180     	 strh r1,[r2]
  93 0016 4FF6FF72 	 movw r2,#65535
  94 001a 9342     	 cmp r3,r2
  95 001c 03D1     	 bne .L4
 106:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     udp_port = UDP_LOCAL_PORT_RANGE_START;
  96              	 .loc 1 106 0
  97 001e 134B     	 ldr r3,.L10
  98 0020 4FF44042 	 mov r2,#49152
  99 0024 1A80     	 strh r2,[r3]
 100              	.L4:
 107:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   }
 108:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* Check all PCBs. */
 109:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 101              	 .loc 1 109 0
 102 0026 124B     	 ldr r3,.L10+4
 103 0028 1B68     	 ldr r3,[r3]
 104 002a 3B60     	 str r3,[r7]
 105 002c 12E0     	 b .L5
 106              	.L9:
 110:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     if (pcb->local_port == udp_port) {
 107              	 .loc 1 110 0
 108 002e 3B68     	 ldr r3,[r7]
 109 0030 5A8A     	 ldrh r2,[r3,#18]
 110 0032 0E4B     	 ldr r3,.L10
 111 0034 1B88     	 ldrh r3,[r3]
 112 0036 9A42     	 cmp r2,r3
 113 0038 09D1     	 bne .L6
 111:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 114              	 .loc 1 111 0
 115 003a FB88     	 ldrh r3,[r7,#6]
 116 003c 0133     	 adds r3,r3,#1
 117 003e FB80     	 strh r3,[r7,#6]
 118 0040 FB88     	 ldrh r3,[r7,#6]
 119 0042 B3F5804F 	 cmp r3,#16384
 120 0046 01D3     	 bcc .L7
 112:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         return 0;
 121              	 .loc 1 112 0
 122 0048 0023     	 movs r3,#0
 123 004a 08E0     	 b .L8
 124              	.L7:
 113:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       }
 114:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       goto again;
 125              	 .loc 1 114 0
 126 004c DDE7     	 b .L3
 127              	.L6:
 109:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     if (pcb->local_port == udp_port) {
 128              	 .loc 1 109 0 discriminator 2
 129 004e 3B68     	 ldr r3,[r7]
 130 0050 DB68     	 ldr r3,[r3,#12]
 131 0052 3B60     	 str r3,[r7]
 132              	.L5:
 109:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     if (pcb->local_port == udp_port) {
 133              	 .loc 1 109 0 is_stmt 0 discriminator 1
 134 0054 3B68     	 ldr r3,[r7]
 135 0056 002B     	 cmp r3,#0
 136 0058 E9D1     	 bne .L9
 115:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     }
 116:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   }
 117:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   return udp_port;
 137              	 .loc 1 117 0 is_stmt 1
 138 005a 044B     	 ldr r3,.L10
 139 005c 1B88     	 ldrh r3,[r3]
 140              	.L8:
 118:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #if 0
 119:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   struct udp_pcb *ipcb = udp_pcbs;
 120:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   while ((ipcb != NULL) && (udp_port != UDP_LOCAL_PORT_RANGE_END)) {
 121:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     if (ipcb->local_port == udp_port) {
 122:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       /* port is already used by another udp_pcb */
 123:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       udp_port++;
 124:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       /* restart scanning all udp pcbs */
 125:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       ipcb = udp_pcbs;
 126:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     } else {
 127:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       /* go on with next udp pcb */
 128:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       ipcb = ipcb->next;
 129:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     }
 130:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   }
 131:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   if (ipcb != NULL) {
 132:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     return 0;
 133:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   }
 134:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   return udp_port;
 135:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif
 136:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** }
 141              	 .loc 1 136 0
 142 005e 1846     	 mov r0,r3
 143 0060 0C37     	 adds r7,r7,#12
 144              	.LCFI7:
 145              	 .cfi_def_cfa_offset 4
 146 0062 BD46     	 mov sp,r7
 147              	.LCFI8:
 148              	 .cfi_def_cfa_register 13
 149              	 
 150 0064 5DF8047B 	 ldr r7,[sp],#4
 151              	.LCFI9:
 152              	 .cfi_restore 7
 153              	 .cfi_def_cfa_offset 0
 154 0068 7047     	 bx lr
 155              	.L11:
 156 006a 00BF     	 .align 2
 157              	.L10:
 158 006c 00000000 	 .word udp_port
 159 0070 00000000 	 .word udp_pcbs
 160              	 .cfi_endproc
 161              	.LFE129:
 163              	 .section .text.udp_input,"ax",%progbits
 164              	 .align 2
 165              	 .global udp_input
 166              	 .thumb
 167              	 .thumb_func
 169              	udp_input:
 170              	.LFB130:
 137:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 138:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** /**
 139:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * Process an incoming UDP datagram.
 140:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 141:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * Given an incoming UDP datagram (as a chain of pbufs) this function
 142:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * finds a corresponding UDP PCB and hands over the pbuf to the pcbs
 143:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * recv function. If no pcb is found or the datagram is incorrect, the
 144:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * pbuf is freed.
 145:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 146:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @param p pbuf to be demultiplexed to a UDP PCB.
 147:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @param inp network interface on which the datagram was received.
 148:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 149:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  */
 150:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** void
 151:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** udp_input(struct pbuf *p, struct netif *inp)
 152:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** {
 171              	 .loc 1 152 0
 172              	 .cfi_startproc
 173              	 
 174              	 
 175 0000 90B5     	 push {r4,r7,lr}
 176              	.LCFI10:
 177              	 .cfi_def_cfa_offset 12
 178              	 .cfi_offset 4,-12
 179              	 .cfi_offset 7,-8
 180              	 .cfi_offset 14,-4
 181 0002 8DB0     	 sub sp,sp,#52
 182              	.LCFI11:
 183              	 .cfi_def_cfa_offset 64
 184 0004 02AF     	 add r7,sp,#8
 185              	.LCFI12:
 186              	 .cfi_def_cfa 7,56
 187 0006 7860     	 str r0,[r7,#4]
 188 0008 3960     	 str r1,[r7]
 153:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   struct udp_hdr *udphdr;
 154:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   struct udp_pcb *pcb, *prev;
 155:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   struct udp_pcb *uncon_pcb;
 156:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   struct ip_hdr *iphdr;
 157:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   u16_t src, dest;
 158:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   u8_t local_match;
 159:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   u8_t broadcast;
 160:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 161:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   PERF_START;
 162:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 163:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   UDP_STATS_INC(udp.recv);
 164:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 165:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   iphdr = (struct ip_hdr *)p->payload;
 189              	 .loc 1 165 0
 190 000a 7B68     	 ldr r3,[r7,#4]
 191 000c 5B68     	 ldr r3,[r3,#4]
 192 000e 7B61     	 str r3,[r7,#20]
 166:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 167:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* Check minimum length (IP header + UDP header)
 168:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****    * and move payload pointer to UDP header */
 169:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
 193              	 .loc 1 169 0
 194 0010 7B68     	 ldr r3,[r7,#4]
 195 0012 1B89     	 ldrh r3,[r3,#8]
 196 0014 1A46     	 mov r2,r3
 197 0016 7B69     	 ldr r3,[r7,#20]
 198 0018 1B78     	 ldrb r3,[r3]
 199 001a 03F00F03 	 and r3,r3,#15
 200 001e 0233     	 adds r3,r3,#2
 201 0020 9B00     	 lsls r3,r3,#2
 202 0022 9A42     	 cmp r2,r3
 203 0024 12DB     	 blt .L13
 204              	 .loc 1 169 0 is_stmt 0 discriminator 1
 205 0026 7B69     	 ldr r3,[r7,#20]
 206 0028 1B78     	 ldrb r3,[r3]
 207 002a 9BB2     	 uxth r3,r3
 208 002c 03F00F03 	 and r3,r3,#15
 209 0030 9BB2     	 uxth r3,r3
 210 0032 9B00     	 lsls r3,r3,#2
 211 0034 9BB2     	 uxth r3,r3
 212 0036 5B42     	 negs r3,r3
 213 0038 9BB2     	 uxth r3,r3
 214 003a 9BB2     	 uxth r3,r3
 215 003c 1BB2     	 sxth r3,r3
 216 003e 7868     	 ldr r0,[r7,#4]
 217 0040 1946     	 mov r1,r3
 218 0042 FFF7FEFF 	 bl pbuf_header
 219 0046 0346     	 mov r3,r0
 220 0048 002B     	 cmp r3,#0
 221 004a 03D0     	 beq .L14
 222              	.L13:
 170:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* drop short packets */
 171:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     LWIP_DEBUGF(UDP_DEBUG,
 172:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                 ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
 173:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     UDP_STATS_INC(udp.lenerr);
 174:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     UDP_STATS_INC(udp.drop);
 175:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     snmp_inc_udpinerrors();
 176:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     pbuf_free(p);
 223              	 .loc 1 176 0 is_stmt 1
 224 004c 7868     	 ldr r0,[r7,#4]
 225 004e FFF7FEFF 	 bl pbuf_free
 177:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     goto end;
 226              	 .loc 1 177 0
 227 0052 E2E0     	 b .L12
 228              	.L14:
 178:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   }
 179:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 180:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   udphdr = (struct udp_hdr *)p->payload;
 229              	 .loc 1 180 0
 230 0054 7B68     	 ldr r3,[r7,#4]
 231 0056 5B68     	 ldr r3,[r3,#4]
 232 0058 3B61     	 str r3,[r7,#16]
 181:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 182:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* is broadcast packet ? */
 183:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
 233              	 .loc 1 183 0
 234 005a 714B     	 ldr r3,.L33
 235 005c 1B68     	 ldr r3,[r3]
 236 005e 1846     	 mov r0,r3
 237 0060 3968     	 ldr r1,[r7]
 238 0062 FFF7FEFF 	 bl ip4_addr_isbroadcast
 239 0066 0346     	 mov r3,r0
 240 0068 FB73     	 strb r3,[r7,#15]
 184:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 185:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 186:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 187:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* convert src and dest ports to host byte order */
 188:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   src = ntohs(udphdr->src);
 241              	 .loc 1 188 0
 242 006a 3B69     	 ldr r3,[r7,#16]
 243 006c 1B88     	 ldrh r3,[r3]
 244 006e 9BB2     	 uxth r3,r3
 245 0070 1846     	 mov r0,r3
 246 0072 FFF7FEFF 	 bl lwip_ntohs
 247 0076 0346     	 mov r3,r0
 248 0078 BB81     	 strh r3,[r7,#12]
 189:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   dest = ntohs(udphdr->dest);
 249              	 .loc 1 189 0
 250 007a 3B69     	 ldr r3,[r7,#16]
 251 007c 5B88     	 ldrh r3,[r3,#2]
 252 007e 9BB2     	 uxth r3,r3
 253 0080 1846     	 mov r0,r3
 254 0082 FFF7FEFF 	 bl lwip_ntohs
 255 0086 0346     	 mov r3,r0
 256 0088 7B81     	 strh r3,[r7,#10]
 190:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 191:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   udp_debug_print(udphdr);
 192:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 193:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* print the UDP source and destination */
 194:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   LWIP_DEBUGF(UDP_DEBUG,
 195:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****               ("udp (%"U16_F".%"U16_F".%"U16_F".%"U16_F", %"U16_F") <-- "
 196:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                "(%"U16_F".%"U16_F".%"U16_F".%"U16_F", %"U16_F")\n",
 197:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                ip4_addr1_16(&iphdr->dest), ip4_addr2_16(&iphdr->dest),
 198:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                ip4_addr3_16(&iphdr->dest), ip4_addr4_16(&iphdr->dest), ntohs(udphdr->dest),
 199:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                ip4_addr1_16(&iphdr->src), ip4_addr2_16(&iphdr->src),
 200:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                ip4_addr3_16(&iphdr->src), ip4_addr4_16(&iphdr->src), ntohs(udphdr->src)));
 201:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 202:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #if LWIP_DHCP
 203:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   pcb = NULL;
 204:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* when LWIP_DHCP is active, packets to DHCP_CLIENT_PORT may only be processed by
 205:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****      the dhcp module, no other UDP pcb may use the local UDP port DHCP_CLIENT_PORT */
 206:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   if (dest == DHCP_CLIENT_PORT) {
 207:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* all packets for DHCP_CLIENT_PORT not coming from DHCP_SERVER_PORT are dropped! */
 208:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     if (src == DHCP_SERVER_PORT) {
 209:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       if ((inp->dhcp != NULL) && (inp->dhcp->pcb != NULL)) {
 210:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         /* accept the packe if 
 211:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****            (- broadcast or directed to us) -> DHCP is link-layer-addressed, local ip is always ANY!
 212:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****            - inp->dhcp->pcb->remote == ANY or iphdr->src */
 213:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         if ((ip_addr_isany(&inp->dhcp->pcb->remote_ip) ||
 214:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****            ip_addr_cmp(&(inp->dhcp->pcb->remote_ip), &current_iphdr_src))) {
 215:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           pcb = inp->dhcp->pcb;
 216:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         }
 217:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       }
 218:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     }
 219:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   } else
 220:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif /* LWIP_DHCP */
 221:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   {
 222:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     prev = NULL;
 257              	 .loc 1 222 0
 258 008a 0023     	 movs r3,#0
 259 008c 3B62     	 str r3,[r7,#32]
 223:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     local_match = 0;
 260              	 .loc 1 223 0
 261 008e 0023     	 movs r3,#0
 262 0090 FB76     	 strb r3,[r7,#27]
 224:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     uncon_pcb = NULL;
 263              	 .loc 1 224 0
 264 0092 0023     	 movs r3,#0
 265 0094 FB61     	 str r3,[r7,#28]
 225:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* Iterate through the UDP pcb list for a matching pcb.
 226:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****      * 'Perfect match' pcbs (connected to the remote port & ip address) are
 227:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****      * preferred. If no perfect match is found, the first unconnected pcb that
 228:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****      * matches the local port and ip address gets the datagram. */
 229:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 266              	 .loc 1 229 0
 267 0096 634B     	 ldr r3,.L33+4
 268 0098 1B68     	 ldr r3,[r3]
 269 009a 7B62     	 str r3,[r7,#36]
 270 009c 67E0     	 b .L16
 271              	.L24:
 230:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       local_match = 0;
 272              	 .loc 1 230 0
 273 009e 0023     	 movs r3,#0
 274 00a0 FB76     	 strb r3,[r7,#27]
 231:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       /* print the PCB local and remote address */
 232:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       LWIP_DEBUGF(UDP_DEBUG,
 233:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                   ("pcb (%"U16_F".%"U16_F".%"U16_F".%"U16_F", %"U16_F") --- "
 234:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                    "(%"U16_F".%"U16_F".%"U16_F".%"U16_F", %"U16_F")\n",
 235:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                    ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
 236:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                    ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip), pcb->local_port,
 237:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                    ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
 238:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                    ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port))
 239:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 240:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       /* compare PCB local addr+port to UDP destination addr+port */
 241:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       if (pcb->local_port == dest) {
 275              	 .loc 1 241 0
 276 00a2 7B6A     	 ldr r3,[r7,#36]
 277 00a4 5B8A     	 ldrh r3,[r3,#18]
 278 00a6 7A89     	 ldrh r2,[r7,#10]
 279 00a8 9A42     	 cmp r2,r3
 280 00aa 36D1     	 bne .L17
 242:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         if (
 281              	 .loc 1 242 0
 282 00ac FB7B     	 ldrb r3,[r7,#15]
 283 00ae 002B     	 cmp r3,#0
 284 00b0 06D1     	 bne .L18
 243:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****            (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
 285              	 .loc 1 243 0
 286 00b2 7B6A     	 ldr r3,[r7,#36]
 287 00b4 002B     	 cmp r3,#0
 288 00b6 23D0     	 beq .L19
 289              	 .loc 1 243 0 is_stmt 0 discriminator 1
 290 00b8 7B6A     	 ldr r3,[r7,#36]
 291 00ba 1B68     	 ldr r3,[r3]
 292 00bc 002B     	 cmp r3,#0
 293 00be 1FD0     	 beq .L19
 294              	.L18:
 244:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****            ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
 295              	 .loc 1 244 0 is_stmt 1 discriminator 2
 296 00c0 7B6A     	 ldr r3,[r7,#36]
 297 00c2 1A68     	 ldr r2,[r3]
 298 00c4 564B     	 ldr r3,.L33
 299 00c6 1B68     	 ldr r3,[r3]
 243:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****            (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
 300              	 .loc 1 243 0 discriminator 2
 301 00c8 9A42     	 cmp r2,r3
 302 00ca 19D0     	 beq .L19
 245:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #if LWIP_IGMP
 246:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****            ip_addr_ismulticast(&current_iphdr_dest) ||
 303              	 .loc 1 246 0
 304 00cc 544B     	 ldr r3,.L33
 305 00ce 1B68     	 ldr r3,[r3]
 306 00d0 03F0F003 	 and r3,r3,#240
 244:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****            ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
 307              	 .loc 1 244 0
 308 00d4 E02B     	 cmp r3,#224
 309 00d6 13D0     	 beq .L19
 310              	 .loc 1 246 0
 311 00d8 FB7B     	 ldrb r3,[r7,#15]
 312 00da 002B     	 cmp r3,#0
 313 00dc 1DD0     	 beq .L17
 247:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif /* LWIP_IGMP */
 248:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #if IP_SOF_BROADCAST_RECV
 249:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****             (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
 250:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****              (ip_addr_isany(&pcb->local_ip) ||
 251:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****               ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
 252:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #else /* IP_SOF_BROADCAST_RECV */
 253:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****             (broadcast &&
 254:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****              (ip_addr_isany(&pcb->local_ip) ||
 314              	 .loc 1 254 0
 315 00de 7B6A     	 ldr r3,[r7,#36]
 253:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****              (ip_addr_isany(&pcb->local_ip) ||
 316              	 .loc 1 253 0
 317 00e0 002B     	 cmp r3,#0
 318 00e2 0DD0     	 beq .L19
 319              	 .loc 1 254 0
 320 00e4 7B6A     	 ldr r3,[r7,#36]
 321 00e6 1B68     	 ldr r3,[r3]
 322 00e8 002B     	 cmp r3,#0
 323 00ea 09D0     	 beq .L19
 255:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****               ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
 324              	 .loc 1 255 0 discriminator 1
 325 00ec 7B6A     	 ldr r3,[r7,#36]
 326 00ee 1A68     	 ldr r2,[r3]
 327 00f0 4B4B     	 ldr r3,.L33
 328 00f2 1B68     	 ldr r3,[r3]
 329 00f4 5A40     	 eors r2,r2,r3
 330 00f6 3B68     	 ldr r3,[r7]
 331 00f8 9B68     	 ldr r3,[r3,#8]
 332 00fa 1340     	 ands r3,r3,r2
 254:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****               ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
 333              	 .loc 1 254 0 discriminator 1
 334 00fc 002B     	 cmp r3,#0
 335 00fe 0CD1     	 bne .L17
 336              	.L19:
 256:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif /* IP_SOF_BROADCAST_RECV */ 
 257:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           local_match = 1;
 337              	 .loc 1 257 0
 338 0100 0123     	 movs r3,#1
 339 0102 FB76     	 strb r3,[r7,#27]
 258:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           if ((uncon_pcb == NULL) && 
 340              	 .loc 1 258 0
 341 0104 FB69     	 ldr r3,[r7,#28]
 342 0106 002B     	 cmp r3,#0
 343 0108 07D1     	 bne .L17
 259:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****               ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
 344              	 .loc 1 259 0 discriminator 1
 345 010a 7B6A     	 ldr r3,[r7,#36]
 346 010c 1B7C     	 ldrb r3,[r3,#16]
 347 010e 03F00403 	 and r3,r3,#4
 258:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           if ((uncon_pcb == NULL) && 
 348              	 .loc 1 258 0 discriminator 1
 349 0112 002B     	 cmp r3,#0
 350 0114 01D1     	 bne .L17
 260:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****             /* the first unconnected matching PCB */
 261:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****             uncon_pcb = pcb;
 351              	 .loc 1 261 0
 352 0116 7B6A     	 ldr r3,[r7,#36]
 353 0118 FB61     	 str r3,[r7,#28]
 354              	.L17:
 262:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           }
 263:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         }
 264:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       }
 265:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       /* compare PCB remote addr+port to UDP source addr+port */
 266:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       if ((local_match != 0) &&
 355              	 .loc 1 266 0
 356 011a FB7E     	 ldrb r3,[r7,#27]
 357 011c 002B     	 cmp r3,#0
 358 011e 21D0     	 beq .L20
 267:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           (pcb->remote_port == src) &&
 359              	 .loc 1 267 0 discriminator 1
 360 0120 7B6A     	 ldr r3,[r7,#36]
 361 0122 9B8A     	 ldrh r3,[r3,#20]
 266:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           (pcb->remote_port == src) &&
 362              	 .loc 1 266 0 discriminator 1
 363 0124 BA89     	 ldrh r2,[r7,#12]
 364 0126 9A42     	 cmp r2,r3
 365 0128 1CD1     	 bne .L20
 268:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           (ip_addr_isany(&pcb->remote_ip) ||
 366              	 .loc 1 268 0
 367 012a 7B6A     	 ldr r3,[r7,#36]
 368 012c 0433     	 adds r3,r3,#4
 267:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           (pcb->remote_port == src) &&
 369              	 .loc 1 267 0
 370 012e 002B     	 cmp r3,#0
 371 0130 09D0     	 beq .L21
 372              	 .loc 1 268 0
 373 0132 7B6A     	 ldr r3,[r7,#36]
 374 0134 5B68     	 ldr r3,[r3,#4]
 375 0136 002B     	 cmp r3,#0
 376 0138 05D0     	 beq .L21
 269:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****            ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
 377              	 .loc 1 269 0 discriminator 1
 378 013a 7B6A     	 ldr r3,[r7,#36]
 379 013c 5A68     	 ldr r2,[r3,#4]
 380 013e 3A4B     	 ldr r3,.L33+8
 381 0140 1B68     	 ldr r3,[r3]
 268:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           (ip_addr_isany(&pcb->remote_ip) ||
 382              	 .loc 1 268 0 discriminator 1
 383 0142 9A42     	 cmp r2,r3
 384 0144 0ED1     	 bne .L20
 385              	.L21:
 270:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         /* the first fully matching PCB */
 271:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         if (prev != NULL) {
 386              	 .loc 1 271 0
 387 0146 3B6A     	 ldr r3,[r7,#32]
 388 0148 002B     	 cmp r3,#0
 389 014a 0AD0     	 beq .L22
 272:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           /* move the pcb to the front of udp_pcbs so that is
 273:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****              found faster next time */
 274:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           prev->next = pcb->next;
 390              	 .loc 1 274 0
 391 014c 7B6A     	 ldr r3,[r7,#36]
 392 014e DA68     	 ldr r2,[r3,#12]
 393 0150 3B6A     	 ldr r3,[r7,#32]
 394 0152 DA60     	 str r2,[r3,#12]
 275:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           pcb->next = udp_pcbs;
 395              	 .loc 1 275 0
 396 0154 334B     	 ldr r3,.L33+4
 397 0156 1A68     	 ldr r2,[r3]
 398 0158 7B6A     	 ldr r3,[r7,#36]
 399 015a DA60     	 str r2,[r3,#12]
 276:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           udp_pcbs = pcb;
 400              	 .loc 1 276 0
 401 015c 314A     	 ldr r2,.L33+4
 402 015e 7B6A     	 ldr r3,[r7,#36]
 403 0160 1360     	 str r3,[r2]
 404              	.L22:
 277:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         } else {
 278:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           UDP_STATS_INC(udp.cachehit);
 279:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         }
 280:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         break;
 405              	 .loc 1 280 0
 406 0162 07E0     	 b .L23
 407              	.L20:
 281:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       }
 282:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       prev = pcb;
 408              	 .loc 1 282 0 discriminator 2
 409 0164 7B6A     	 ldr r3,[r7,#36]
 410 0166 3B62     	 str r3,[r7,#32]
 229:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       local_match = 0;
 411              	 .loc 1 229 0 discriminator 2
 412 0168 7B6A     	 ldr r3,[r7,#36]
 413 016a DB68     	 ldr r3,[r3,#12]
 414 016c 7B62     	 str r3,[r7,#36]
 415              	.L16:
 229:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       local_match = 0;
 416              	 .loc 1 229 0 is_stmt 0 discriminator 1
 417 016e 7B6A     	 ldr r3,[r7,#36]
 418 0170 002B     	 cmp r3,#0
 419 0172 94D1     	 bne .L24
 420              	.L23:
 283:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     }
 284:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* no fully matching pcb found? then look for an unconnected pcb */
 285:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     if (pcb == NULL) {
 421              	 .loc 1 285 0 is_stmt 1
 422 0174 7B6A     	 ldr r3,[r7,#36]
 423 0176 002B     	 cmp r3,#0
 424 0178 01D1     	 bne .L25
 286:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       pcb = uncon_pcb;
 425              	 .loc 1 286 0
 426 017a FB69     	 ldr r3,[r7,#28]
 427 017c 7B62     	 str r3,[r7,#36]
 428              	.L25:
 287:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     }
 288:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   }
 289:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 290:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* Check checksum if this is a match or if it was directed at us. */
 291:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
 429              	 .loc 1 291 0
 430 017e 7B6A     	 ldr r3,[r7,#36]
 431 0180 002B     	 cmp r3,#0
 432 0182 05D1     	 bne .L26
 433              	 .loc 1 291 0 is_stmt 0 discriminator 1
 434 0184 3B68     	 ldr r3,[r7]
 435 0186 5A68     	 ldr r2,[r3,#4]
 436 0188 254B     	 ldr r3,.L33
 437 018a 1B68     	 ldr r3,[r3]
 438 018c 9A42     	 cmp r2,r3
 439 018e 41D1     	 bne .L27
 440              	.L26:
 292:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 293:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #if LWIP_UDPLITE
 294:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     if (IPH_PROTO(iphdr) == IP_PROTO_UDPLITE) {
 295:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       /* Do the UDP Lite checksum */
 296:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #if CHECKSUM_CHECK_UDP
 297:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       u16_t chklen = ntohs(udphdr->len);
 298:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       if (chklen < sizeof(struct udp_hdr)) {
 299:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         if (chklen == 0) {
 300:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           /* For UDP-Lite, checksum length of 0 means checksum
 301:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****              over the complete packet (See RFC 3828 chap. 3.1) */
 302:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           chklen = p->tot_len;
 303:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         } else {
 304:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           /* At least the UDP-Lite header must be covered by the
 305:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****              checksum! (Again, see RFC 3828 chap. 3.1) */
 306:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           UDP_STATS_INC(udp.chkerr);
 307:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           UDP_STATS_INC(udp.drop);
 308:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           snmp_inc_udpinerrors();
 309:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           pbuf_free(p);
 310:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           goto end;
 311:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         }
 312:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       }
 313:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       if (inet_chksum_pseudo_partial(p, &current_iphdr_src, &current_iphdr_dest,
 314:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                              IP_PROTO_UDPLITE, p->tot_len, chklen) != 0) {
 315:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****        LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 316:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                    ("udp_input: UDP Lite datagram discarded due to failing checksum\n"));
 317:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         UDP_STATS_INC(udp.chkerr);
 318:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         UDP_STATS_INC(udp.drop);
 319:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         snmp_inc_udpinerrors();
 320:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         pbuf_free(p);
 321:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         goto end;
 322:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       }
 323:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif /* CHECKSUM_CHECK_UDP */
 324:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     } else
 325:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif /* LWIP_UDPLITE */
 326:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     {
 327:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #if CHECKSUM_CHECK_UDP
 328:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       if (udphdr->chksum != 0) {
 329:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
 330:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                                IP_PROTO_UDP, p->tot_len) != 0) {
 331:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 332:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                       ("udp_input: UDP datagram discarded due to failing checksum\n"));
 333:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           UDP_STATS_INC(udp.chkerr);
 334:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           UDP_STATS_INC(udp.drop);
 335:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           snmp_inc_udpinerrors();
 336:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           pbuf_free(p);
 337:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           goto end;
 338:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         }
 339:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       }
 340:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif /* CHECKSUM_CHECK_UDP */
 341:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     }
 342:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     if(pbuf_header(p, -UDP_HLEN)) {
 441              	 .loc 1 342 0 is_stmt 1
 442 0190 7868     	 ldr r0,[r7,#4]
 443 0192 6FF00701 	 mvn r1,#7
 444 0196 FFF7FEFF 	 bl pbuf_header
 445 019a 0346     	 mov r3,r0
 446 019c 002B     	 cmp r3,#0
 447 019e 03D0     	 beq .L28
 343:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       /* Can we cope with this failing? Just assert for now */
 344:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       LWIP_ASSERT("pbuf_header failed\n", 0);
 345:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       UDP_STATS_INC(udp.drop);
 346:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       snmp_inc_udpinerrors();
 347:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       pbuf_free(p);
 448              	 .loc 1 347 0
 449 01a0 7868     	 ldr r0,[r7,#4]
 450 01a2 FFF7FEFF 	 bl pbuf_free
 348:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       goto end;
 451              	 .loc 1 348 0
 452 01a6 38E0     	 b .L12
 453              	.L28:
 349:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     }
 350:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     if (pcb != NULL) {
 454              	 .loc 1 350 0
 455 01a8 7B6A     	 ldr r3,[r7,#36]
 456 01aa 002B     	 cmp r3,#0
 457 01ac 13D0     	 beq .L29
 351:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       snmp_inc_udpindatagrams();
 352:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #if SO_REUSE && SO_REUSE_RXTOALL
 353:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       if ((broadcast || ip_addr_ismulticast(&current_iphdr_dest)) &&
 354:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           ip_get_option(pcb, SOF_REUSEADDR)) {
 355:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         /* pass broadcast- or multicast packets to all multicast pcbs
 356:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****            if SOF_REUSEADDR is set on the first match */
 357:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         struct udp_pcb *mpcb;
 358:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         u8_t p_header_changed = 0;
 359:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         for (mpcb = udp_pcbs; mpcb != NULL; mpcb = mpcb->next) {
 360:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           if (mpcb != pcb) {
 361:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****             /* compare PCB local addr+port to UDP destination addr+port */
 362:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****             if ((mpcb->local_port == dest) &&
 363:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                 ((!broadcast && ip_addr_isany(&mpcb->local_ip)) ||
 364:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                  ip_addr_cmp(&(mpcb->local_ip), &current_iphdr_dest) ||
 365:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #if LWIP_IGMP
 366:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                  ip_addr_ismulticast(&current_iphdr_dest) ||
 367:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif /* LWIP_IGMP */
 368:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #if IP_SOF_BROADCAST_RECV
 369:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                  (broadcast && ip_get_option(mpcb, SOF_BROADCAST)))) {
 370:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #else  /* IP_SOF_BROADCAST_RECV */
 371:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                  (broadcast))) {
 372:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif /* IP_SOF_BROADCAST_RECV */
 373:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****               /* pass a copy of the packet to all local matches */
 374:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****               if (mpcb->recv != NULL) {
 375:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                 struct pbuf *q;
 376:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                 /* for that, move payload to IP header again */
 377:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                 if (p_header_changed == 0) {
 378:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                   pbuf_header(p, (s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
 379:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                   p_header_changed = 1;
 380:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                 }
 381:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                 q = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
 382:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                 if (q != NULL) {
 383:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                   err_t err = pbuf_copy(q, p);
 384:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                   if (err == ERR_OK) {
 385:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                     /* move payload to UDP data */
 386:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                     pbuf_header(q, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
 387:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                     mpcb->recv(mpcb->recv_arg, mpcb, q, ip_current_src_addr(), src);
 388:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                   }
 389:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                 }
 390:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****               }
 391:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****             }
 392:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           }
 393:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         }
 394:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         if (p_header_changed) {
 395:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           /* and move payload to UDP data again */
 396:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           pbuf_header(p, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
 397:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         }
 398:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       }
 399:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif /* SO_REUSE && SO_REUSE_RXTOALL */
 400:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       /* callback */
 401:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       if (pcb->recv != NULL) {
 458              	 .loc 1 401 0
 459 01ae 7B6A     	 ldr r3,[r7,#36]
 460 01b0 DB69     	 ldr r3,[r3,#28]
 461 01b2 002B     	 cmp r3,#0
 462 01b4 0BD0     	 beq .L30
 402:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         /* now the recv function is responsible for freeing p */
 403:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 463              	 .loc 1 403 0
 464 01b6 7B6A     	 ldr r3,[r7,#36]
 465 01b8 DC69     	 ldr r4,[r3,#28]
 466 01ba 7B6A     	 ldr r3,[r7,#36]
 467 01bc 1A6A     	 ldr r2,[r3,#32]
 468 01be BB89     	 ldrh r3,[r7,#12]
 469 01c0 0093     	 str r3,[sp]
 470 01c2 1046     	 mov r0,r2
 471 01c4 796A     	 ldr r1,[r7,#36]
 472 01c6 7A68     	 ldr r2,[r7,#4]
 473 01c8 174B     	 ldr r3,.L33+8
 474 01ca A047     	 blx r4
 350:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       snmp_inc_udpindatagrams();
 475              	 .loc 1 350 0
 476 01cc 25E0     	 b .L12
 477              	.L30:
 404:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       } else {
 405:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         /* no recv function registered? then we have to free the pbuf! */
 406:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         pbuf_free(p);
 478              	 .loc 1 406 0
 479 01ce 7868     	 ldr r0,[r7,#4]
 480 01d0 FFF7FEFF 	 bl pbuf_free
 407:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         goto end;
 481              	 .loc 1 407 0
 482 01d4 21E0     	 b .L12
 483              	.L29:
 408:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       }
 409:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     } else {
 410:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 411:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 412:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #if LWIP_ICMP
 413:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       /* No match was found, send ICMP destination port unreachable unless
 414:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****          destination address was broadcast/multicast. */
 415:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       if (!broadcast &&
 484              	 .loc 1 415 0
 485 01d6 FB7B     	 ldrb r3,[r7,#15]
 486 01d8 002B     	 cmp r3,#0
 487 01da 17D1     	 bne .L32
 416:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           !ip_addr_ismulticast(&current_iphdr_dest)) {
 488              	 .loc 1 416 0 discriminator 1
 489 01dc 104B     	 ldr r3,.L33
 490 01de 1B68     	 ldr r3,[r3]
 491 01e0 03F0F003 	 and r3,r3,#240
 415:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           !ip_addr_ismulticast(&current_iphdr_dest)) {
 492              	 .loc 1 415 0 discriminator 1
 493 01e4 E02B     	 cmp r3,#224
 494 01e6 11D0     	 beq .L32
 417:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         /* move payload pointer back to ip header */
 418:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
 495              	 .loc 1 418 0
 496 01e8 7B69     	 ldr r3,[r7,#20]
 497 01ea 1B78     	 ldrb r3,[r3]
 498 01ec 03F00F03 	 and r3,r3,#15
 499 01f0 0233     	 adds r3,r3,#2
 500 01f2 9BB2     	 uxth r3,r3
 501 01f4 9B00     	 lsls r3,r3,#2
 502 01f6 9BB2     	 uxth r3,r3
 503 01f8 9BB2     	 uxth r3,r3
 504 01fa 1BB2     	 sxth r3,r3
 505 01fc 7868     	 ldr r0,[r7,#4]
 506 01fe 1946     	 mov r1,r3
 507 0200 FFF7FEFF 	 bl pbuf_header
 419:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         LWIP_ASSERT("p->payload == iphdr", (p->payload == iphdr));
 420:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         icmp_dest_unreach(p, ICMP_DUR_PORT);
 508              	 .loc 1 420 0
 509 0204 7868     	 ldr r0,[r7,#4]
 510 0206 0321     	 movs r1,#3
 511 0208 FFF7FEFF 	 bl icmp_dest_unreach
 512              	.L32:
 421:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       }
 422:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif /* LWIP_ICMP */
 423:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       UDP_STATS_INC(udp.proterr);
 424:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       UDP_STATS_INC(udp.drop);
 425:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       snmp_inc_udpnoports();
 426:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       pbuf_free(p);
 513              	 .loc 1 426 0
 514 020c 7868     	 ldr r0,[r7,#4]
 515 020e FFF7FEFF 	 bl pbuf_free
 350:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       snmp_inc_udpindatagrams();
 516              	 .loc 1 350 0
 517 0212 02E0     	 b .L12
 518              	.L27:
 427:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     }
 428:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   } else {
 429:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     pbuf_free(p);
 519              	 .loc 1 429 0
 520 0214 7868     	 ldr r0,[r7,#4]
 521 0216 FFF7FEFF 	 bl pbuf_free
 522              	.L15:
 523              	.L12:
 430:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   }
 431:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** end:
 432:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   PERF_STOP("udp_input");
 433:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** }
 524              	 .loc 1 433 0
 525 021a 2C37     	 adds r7,r7,#44
 526              	.LCFI13:
 527              	 .cfi_def_cfa_offset 12
 528 021c BD46     	 mov sp,r7
 529              	.LCFI14:
 530              	 .cfi_def_cfa_register 13
 531              	 
 532 021e 90BD     	 pop {r4,r7,pc}
 533              	.L34:
 534              	 .align 2
 535              	.L33:
 536 0220 00000000 	 .word current_iphdr_dest
 537 0224 00000000 	 .word udp_pcbs
 538 0228 00000000 	 .word current_iphdr_src
 539              	 .cfi_endproc
 540              	.LFE130:
 542              	 .section .text.udp_send,"ax",%progbits
 543              	 .align 2
 544              	 .global udp_send
 545              	 .thumb
 546              	 .thumb_func
 548              	udp_send:
 549              	.LFB131:
 434:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 435:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** /**
 436:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * Send data using UDP.
 437:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 438:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @param pcb UDP PCB used to send the data.
 439:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @param p chain of pbuf's to be sent.
 440:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 441:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * The datagram will be sent to the current remote_ip & remote_port
 442:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * stored in pcb. If the pcb is not bound to a port, it will
 443:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * automatically be bound to a random port.
 444:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 445:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @return lwIP error code.
 446:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * - ERR_OK. Successful. No error occured.
 447:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * - ERR_MEM. Out of memory.
 448:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * - ERR_RTE. Could not find route to destination address.
 449:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * - More errors could be returned by lower protocol layers.
 450:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 451:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @see udp_disconnect() udp_sendto()
 452:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  */
 453:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** err_t
 454:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** udp_send(struct udp_pcb *pcb, struct pbuf *p)
 455:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** {
 550              	 .loc 1 455 0
 551              	 .cfi_startproc
 552              	 
 553              	 
 554 0000 80B5     	 push {r7,lr}
 555              	.LCFI15:
 556              	 .cfi_def_cfa_offset 8
 557              	 .cfi_offset 7,-8
 558              	 .cfi_offset 14,-4
 559 0002 82B0     	 sub sp,sp,#8
 560              	.LCFI16:
 561              	 .cfi_def_cfa_offset 16
 562 0004 00AF     	 add r7,sp,#0
 563              	.LCFI17:
 564              	 .cfi_def_cfa_register 7
 565 0006 7860     	 str r0,[r7,#4]
 566 0008 3960     	 str r1,[r7]
 456:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* send to the packet using remote ip and port stored in the pcb */
 457:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 567              	 .loc 1 457 0
 568 000a 7B68     	 ldr r3,[r7,#4]
 569 000c 1A1D     	 adds r2,r3,#4
 570 000e 7B68     	 ldr r3,[r7,#4]
 571 0010 9B8A     	 ldrh r3,[r3,#20]
 572 0012 7868     	 ldr r0,[r7,#4]
 573 0014 3968     	 ldr r1,[r7]
 574 0016 FFF7FEFF 	 bl udp_sendto
 575 001a 0346     	 mov r3,r0
 458:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** }
 576              	 .loc 1 458 0
 577 001c 1846     	 mov r0,r3
 578 001e 0837     	 adds r7,r7,#8
 579              	.LCFI18:
 580              	 .cfi_def_cfa_offset 8
 581 0020 BD46     	 mov sp,r7
 582              	.LCFI19:
 583              	 .cfi_def_cfa_register 13
 584              	 
 585 0022 80BD     	 pop {r7,pc}
 586              	 .cfi_endproc
 587              	.LFE131:
 589              	 .section .text.udp_sendto,"ax",%progbits
 590              	 .align 2
 591              	 .global udp_sendto
 592              	 .thumb
 593              	 .thumb_func
 595              	udp_sendto:
 596              	.LFB132:
 459:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 460:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #if LWIP_CHECKSUM_ON_COPY
 461:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** /** Same as udp_send() but with checksum
 462:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  */
 463:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** err_t
 464:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** udp_send_chksum(struct udp_pcb *pcb, struct pbuf *p,
 465:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                 u8_t have_chksum, u16_t chksum)
 466:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** {
 467:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* send to the packet using remote ip and port stored in the pcb */
 468:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   return udp_sendto_chksum(pcb, p, &pcb->remote_ip, pcb->remote_port,
 469:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     have_chksum, chksum);
 470:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** }
 471:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif /* LWIP_CHECKSUM_ON_COPY */
 472:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 473:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** /**
 474:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * Send data to a specified address using UDP.
 475:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 476:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @param pcb UDP PCB used to send the data.
 477:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @param p chain of pbuf's to be sent.
 478:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @param dst_ip Destination IP address.
 479:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @param dst_port Destination UDP port.
 480:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 481:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * dst_ip & dst_port are expected to be in the same byte order as in the pcb.
 482:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 483:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * If the PCB already has a remote address association, it will
 484:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * be restored after the data is sent.
 485:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * 
 486:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @return lwIP error code (@see udp_send for possible error codes)
 487:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 488:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @see udp_disconnect() udp_send()
 489:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  */
 490:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** err_t
 491:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
 492:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   ip_addr_t *dst_ip, u16_t dst_port)
 493:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** {
 597              	 .loc 1 493 0
 598              	 .cfi_startproc
 599              	 
 600              	 
 601 0000 90B5     	 push {r4,r7,lr}
 602              	.LCFI20:
 603              	 .cfi_def_cfa_offset 12
 604              	 .cfi_offset 4,-12
 605              	 .cfi_offset 7,-8
 606              	 .cfi_offset 14,-4
 607 0002 89B0     	 sub sp,sp,#36
 608              	.LCFI21:
 609              	 .cfi_def_cfa_offset 48
 610 0004 02AF     	 add r7,sp,#8
 611              	.LCFI22:
 612              	 .cfi_def_cfa 7,40
 613 0006 F860     	 str r0,[r7,#12]
 614 0008 B960     	 str r1,[r7,#8]
 615 000a 7A60     	 str r2,[r7,#4]
 616 000c 7B80     	 strh r3,[r7,#2]
 494:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #if LWIP_CHECKSUM_ON_COPY
 495:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   return udp_sendto_chksum(pcb, p, dst_ip, dst_port, 0, 0);
 496:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** }
 497:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 498:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** /** Same as udp_sendto(), but with checksum */
 499:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** err_t
 500:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *dst_ip,
 501:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                   u16_t dst_port, u8_t have_chksum, u16_t chksum)
 502:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** {
 503:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif /* LWIP_CHECKSUM_ON_COPY */
 504:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   struct netif *netif;
 505:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 506:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));
 507:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 508:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* find the outgoing network interface for this packet */
 509:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #if LWIP_IGMP
 510:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   netif = ip_route((ip_addr_ismulticast(dst_ip))?(&(pcb->multicast_ip)):(dst_ip));
 617              	 .loc 1 510 0
 618 000e 7B68     	 ldr r3,[r7,#4]
 619 0010 1B68     	 ldr r3,[r3]
 620 0012 03F0F003 	 and r3,r3,#240
 621 0016 E02B     	 cmp r3,#224
 622 0018 02D1     	 bne .L38
 623              	 .loc 1 510 0 is_stmt 0 discriminator 1
 624 001a FB68     	 ldr r3,[r7,#12]
 625 001c 1833     	 adds r3,r3,#24
 626 001e 00E0     	 b .L39
 627              	.L38:
 628              	 .loc 1 510 0 discriminator 2
 629 0020 7B68     	 ldr r3,[r7,#4]
 630              	.L39:
 631              	 .loc 1 510 0 discriminator 4
 632 0022 1846     	 mov r0,r3
 633 0024 FFF7FEFF 	 bl ip_route
 634 0028 7861     	 str r0,[r7,#20]
 511:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #else
 512:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   netif = ip_route(dst_ip);
 513:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif /* LWIP_IGMP */
 514:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 515:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* no outgoing network interface could be found? */
 516:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   if (netif == NULL) {
 635              	 .loc 1 516 0 is_stmt 1 discriminator 4
 636 002a 7B69     	 ldr r3,[r7,#20]
 637 002c 002B     	 cmp r3,#0
 638 002e 01D1     	 bne .L40
 517:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to %"U16_F".%"U16_F".%"U16
 518:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       ip4_addr1_16(dst_ip), ip4_addr2_16(dst_ip), ip4_addr3_16(dst_ip), ip4_addr4_16(dst_ip)));
 519:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     UDP_STATS_INC(udp.rterr);
 520:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     return ERR_RTE;
 639              	 .loc 1 520 0
 640 0030 FC23     	 movs r3,#252
 641 0032 09E0     	 b .L41
 642              	.L40:
 521:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   }
 522:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #if LWIP_CHECKSUM_ON_COPY
 523:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
 524:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #else /* LWIP_CHECKSUM_ON_COPY */
 525:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 643              	 .loc 1 525 0
 644 0034 7C88     	 ldrh r4,[r7,#2]
 645 0036 7B69     	 ldr r3,[r7,#20]
 646 0038 0093     	 str r3,[sp]
 647 003a F868     	 ldr r0,[r7,#12]
 648 003c B968     	 ldr r1,[r7,#8]
 649 003e 7A68     	 ldr r2,[r7,#4]
 650 0040 2346     	 mov r3,r4
 651 0042 FFF7FEFF 	 bl udp_sendto_if
 652 0046 0346     	 mov r3,r0
 653              	.L41:
 654 0048 5BB2     	 sxtb r3,r3
 526:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif /* LWIP_CHECKSUM_ON_COPY */
 527:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** }
 655              	 .loc 1 527 0
 656 004a 1846     	 mov r0,r3
 657 004c 1C37     	 adds r7,r7,#28
 658              	.LCFI23:
 659              	 .cfi_def_cfa_offset 12
 660 004e BD46     	 mov sp,r7
 661              	.LCFI24:
 662              	 .cfi_def_cfa_register 13
 663              	 
 664 0050 90BD     	 pop {r4,r7,pc}
 665              	 .cfi_endproc
 666              	.LFE132:
 668 0052 00BF     	 .section .text.udp_sendto_if,"ax",%progbits
 669              	 .align 2
 670              	 .global udp_sendto_if
 671              	 .thumb
 672              	 .thumb_func
 674              	udp_sendto_if:
 675              	.LFB133:
 528:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 529:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** /**
 530:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * Send data to a specified address using UDP.
 531:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * The netif used for sending can be specified.
 532:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 533:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * This function exists mainly for DHCP, to be able to send UDP packets
 534:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * on a netif that is still down.
 535:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 536:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @param pcb UDP PCB used to send the data.
 537:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @param p chain of pbuf's to be sent.
 538:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @param dst_ip Destination IP address.
 539:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @param dst_port Destination UDP port.
 540:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @param netif the netif used for sending.
 541:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 542:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * dst_ip & dst_port are expected to be in the same byte order as in the pcb.
 543:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 544:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @return lwIP error code (@see udp_send for possible error codes)
 545:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 546:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @see udp_disconnect() udp_send()
 547:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  */
 548:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** err_t
 549:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
 550:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
 551:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** {
 676              	 .loc 1 551 0
 677              	 .cfi_startproc
 678              	 
 679              	 
 680 0000 90B5     	 push {r4,r7,lr}
 681              	.LCFI25:
 682              	 .cfi_def_cfa_offset 12
 683              	 .cfi_offset 4,-12
 684              	 .cfi_offset 7,-8
 685              	 .cfi_offset 14,-4
 686 0002 8DB0     	 sub sp,sp,#52
 687              	.LCFI26:
 688              	 .cfi_def_cfa_offset 64
 689 0004 04AF     	 add r7,sp,#16
 690              	.LCFI27:
 691              	 .cfi_def_cfa 7,48
 692 0006 F860     	 str r0,[r7,#12]
 693 0008 B960     	 str r1,[r7,#8]
 694 000a 7A60     	 str r2,[r7,#4]
 695 000c 7B80     	 strh r3,[r7,#2]
 552:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #if LWIP_CHECKSUM_ON_COPY
 553:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, 0, 0);
 554:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** }
 555:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 556:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** /** Same as udp_sendto_if(), but with checksum */
 557:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** err_t
 558:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** udp_sendto_if_chksum(struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *dst_ip,
 559:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                      u16_t dst_port, struct netif *netif, u8_t have_chksum,
 560:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                      u16_t chksum)
 561:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** {
 562:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif /* LWIP_CHECKSUM_ON_COPY */
 563:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   struct udp_hdr *udphdr;
 564:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   ip_addr_t *src_ip;
 565:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   err_t err;
 566:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   struct pbuf *q; /* q will be sent down the stack */
 567:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 568:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #if IP_SOF_BROADCAST
 569:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* broadcast filter? */
 570:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   if (!ip_get_option(pcb, SOF_BROADCAST) && ip_addr_isbroadcast(dst_ip, netif)) {
 571:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 572:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       ("udp_sendto_if: SOF_BROADCAST not enabled on pcb %p\n", (void *)pcb));
 573:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     return ERR_VAL;
 574:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   }
 575:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif /* IP_SOF_BROADCAST */
 576:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 577:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* if the PCB is not yet bound to a port, bind it here */
 578:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   if (pcb->local_port == 0) {
 696              	 .loc 1 578 0
 697 000e FB68     	 ldr r3,[r7,#12]
 698 0010 5B8A     	 ldrh r3,[r3,#18]
 699 0012 002B     	 cmp r3,#0
 700 0014 0FD1     	 bne .L43
 579:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
 580:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 701              	 .loc 1 580 0
 702 0016 FA68     	 ldr r2,[r7,#12]
 703 0018 FB68     	 ldr r3,[r7,#12]
 704 001a 5B8A     	 ldrh r3,[r3,#18]
 705 001c F868     	 ldr r0,[r7,#12]
 706 001e 1146     	 mov r1,r2
 707 0020 1A46     	 mov r2,r3
 708 0022 FFF7FEFF 	 bl udp_bind
 709 0026 0346     	 mov r3,r0
 710 0028 FB75     	 strb r3,[r7,#23]
 581:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     if (err != ERR_OK) {
 711              	 .loc 1 581 0
 712 002a 97F91730 	 ldrsb r3,[r7,#23]
 713 002e 002B     	 cmp r3,#0
 714 0030 01D0     	 beq .L43
 582:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind
 583:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       return err;
 715              	 .loc 1 583 0
 716 0032 FB7D     	 ldrb r3,[r7,#23]
 717 0034 8AE0     	 b .L44
 718              	.L43:
 584:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     }
 585:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   }
 586:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 587:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* not enough space to add an UDP header to first pbuf in given p chain? */
 588:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   if (pbuf_header(p, UDP_HLEN)) {
 719              	 .loc 1 588 0
 720 0036 B868     	 ldr r0,[r7,#8]
 721 0038 0821     	 movs r1,#8
 722 003a FFF7FEFF 	 bl pbuf_header
 723 003e 0346     	 mov r3,r0
 724 0040 002B     	 cmp r3,#0
 725 0042 13D0     	 beq .L45
 589:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* allocate header in a separate new pbuf */
 590:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 726              	 .loc 1 590 0
 727 0044 0120     	 movs r0,#1
 728 0046 0821     	 movs r1,#8
 729 0048 0022     	 movs r2,#0
 730 004a FFF7FEFF 	 bl pbuf_alloc
 731 004e B861     	 str r0,[r7,#24]
 591:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* new header pbuf could not be allocated? */
 592:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     if (q == NULL) {
 732              	 .loc 1 592 0
 733 0050 BB69     	 ldr r3,[r7,#24]
 734 0052 002B     	 cmp r3,#0
 735 0054 01D1     	 bne .L46
 593:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not alloca
 594:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       return ERR_MEM;
 736              	 .loc 1 594 0
 737 0056 FF23     	 movs r3,#255
 738 0058 78E0     	 b .L44
 739              	.L46:
 595:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     }
 596:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     if (p->tot_len != 0) {
 740              	 .loc 1 596 0
 741 005a BB68     	 ldr r3,[r7,#8]
 742 005c 1B89     	 ldrh r3,[r3,#8]
 743 005e 002B     	 cmp r3,#0
 744 0060 06D0     	 beq .L48
 597:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       /* chain header q in front of given pbuf p (only if p contains data) */
 598:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       pbuf_chain(q, p);
 745              	 .loc 1 598 0
 746 0062 B869     	 ldr r0,[r7,#24]
 747 0064 B968     	 ldr r1,[r7,#8]
 748 0066 FFF7FEFF 	 bl pbuf_chain
 749 006a 01E0     	 b .L48
 750              	.L45:
 599:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     }
 600:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* first pbuf q points to header pbuf */
 601:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     LWIP_DEBUGF(UDP_DEBUG,
 602:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                 ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
 603:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   } else {
 604:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* adding space for header within p succeeded */
 605:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* first pbuf q equals given pbuf */
 606:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     q = p;
 751              	 .loc 1 606 0
 752 006c BB68     	 ldr r3,[r7,#8]
 753 006e BB61     	 str r3,[r7,#24]
 754              	.L48:
 607:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
 608:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   }
 609:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 610:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****               (q->len >= sizeof(struct udp_hdr)));
 611:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* q now represents the packet to be sent */
 612:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   udphdr = (struct udp_hdr *)q->payload;
 755              	 .loc 1 612 0
 756 0070 BB69     	 ldr r3,[r7,#24]
 757 0072 5B68     	 ldr r3,[r3,#4]
 758 0074 3B61     	 str r3,[r7,#16]
 613:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   udphdr->src = htons(pcb->local_port);
 759              	 .loc 1 613 0
 760 0076 FB68     	 ldr r3,[r7,#12]
 761 0078 5B8A     	 ldrh r3,[r3,#18]
 762 007a 1846     	 mov r0,r3
 763 007c FFF7FEFF 	 bl lwip_htons
 764 0080 0346     	 mov r3,r0
 765 0082 1A46     	 mov r2,r3
 766 0084 3B69     	 ldr r3,[r7,#16]
 767 0086 1A80     	 strh r2,[r3]
 614:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   udphdr->dest = htons(dst_port);
 768              	 .loc 1 614 0
 769 0088 7B88     	 ldrh r3,[r7,#2]
 770 008a 1846     	 mov r0,r3
 771 008c FFF7FEFF 	 bl lwip_htons
 772 0090 0346     	 mov r3,r0
 773 0092 1A46     	 mov r2,r3
 774 0094 3B69     	 ldr r3,[r7,#16]
 775 0096 5A80     	 strh r2,[r3,#2]
 615:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* in UDP, 0 checksum means 'no checksum' */
 616:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   udphdr->chksum = 0x0000; 
 776              	 .loc 1 616 0
 777 0098 3B69     	 ldr r3,[r7,#16]
 778 009a 0022     	 movs r2,#0
 779 009c 9A71     	 strb r2,[r3,#6]
 780 009e 0022     	 movs r2,#0
 781 00a0 DA71     	 strb r2,[r3,#7]
 617:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 618:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* Multicast Loop? */
 619:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #if LWIP_IGMP
 620:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   if (ip_addr_ismulticast(dst_ip) && ((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0)) {
 782              	 .loc 1 620 0
 783 00a2 7B68     	 ldr r3,[r7,#4]
 784 00a4 1B68     	 ldr r3,[r3]
 785 00a6 03F0F003 	 and r3,r3,#240
 786 00aa E02B     	 cmp r3,#224
 787 00ac 0CD1     	 bne .L49
 788              	 .loc 1 620 0 is_stmt 0 discriminator 1
 789 00ae FB68     	 ldr r3,[r7,#12]
 790 00b0 1B7C     	 ldrb r3,[r3,#16]
 791 00b2 03F00803 	 and r3,r3,#8
 792 00b6 002B     	 cmp r3,#0
 793 00b8 06D0     	 beq .L49
 621:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     q->flags |= PBUF_FLAG_MCASTLOOP;
 794              	 .loc 1 621 0 is_stmt 1
 795 00ba BB69     	 ldr r3,[r7,#24]
 796 00bc 5B7B     	 ldrb r3,[r3,#13]
 797 00be 43F00403 	 orr r3,r3,#4
 798 00c2 DAB2     	 uxtb r2,r3
 799 00c4 BB69     	 ldr r3,[r7,#24]
 800 00c6 5A73     	 strb r2,[r3,#13]
 801              	.L49:
 622:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   }
 623:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif /* LWIP_IGMP */
 624:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 625:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 626:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* PCB local address is IP_ANY_ADDR? */
 627:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   if (ip_addr_isany(&pcb->local_ip)) {
 802              	 .loc 1 627 0
 803 00c8 FB68     	 ldr r3,[r7,#12]
 804 00ca 002B     	 cmp r3,#0
 805 00cc 03D0     	 beq .L50
 806              	 .loc 1 627 0 is_stmt 0 discriminator 1
 807 00ce FB68     	 ldr r3,[r7,#12]
 808 00d0 1B68     	 ldr r3,[r3]
 809 00d2 002B     	 cmp r3,#0
 810 00d4 03D1     	 bne .L51
 811              	.L50:
 628:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* use outgoing network interface IP address as source address */
 629:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     src_ip = &(netif->ip_addr);
 812              	 .loc 1 629 0 is_stmt 1
 813 00d6 3B6B     	 ldr r3,[r7,#48]
 814 00d8 0433     	 adds r3,r3,#4
 815 00da FB61     	 str r3,[r7,#28]
 816 00dc 12E0     	 b .L52
 817              	.L51:
 630:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   } else {
 631:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* check if UDP PCB local IP address is correct
 632:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****      * this could be an old address if netif->ip_addr has changed */
 633:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     if (!ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
 818              	 .loc 1 633 0
 819 00de FB68     	 ldr r3,[r7,#12]
 820 00e0 1A68     	 ldr r2,[r3]
 821 00e2 3B6B     	 ldr r3,[r7,#48]
 822 00e4 5B68     	 ldr r3,[r3,#4]
 823 00e6 9A42     	 cmp r2,r3
 824 00e8 0AD0     	 beq .L53
 634:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       /* local_ip doesn't match, drop the packet */
 635:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       if (q != p) {
 825              	 .loc 1 635 0
 826 00ea BA69     	 ldr r2,[r7,#24]
 827 00ec BB68     	 ldr r3,[r7,#8]
 828 00ee 9A42     	 cmp r2,r3
 829 00f0 04D0     	 beq .L54
 636:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         /* free the header pbuf */
 637:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         pbuf_free(q);
 830              	 .loc 1 637 0
 831 00f2 B869     	 ldr r0,[r7,#24]
 832 00f4 FFF7FEFF 	 bl pbuf_free
 638:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         q = NULL;
 833              	 .loc 1 638 0
 834 00f8 0023     	 movs r3,#0
 835 00fa BB61     	 str r3,[r7,#24]
 836              	.L54:
 639:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         /* p is still referenced by the caller, and will live on */
 640:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       }
 641:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       return ERR_VAL;
 837              	 .loc 1 641 0
 838 00fc FA23     	 movs r3,#250
 839 00fe 25E0     	 b .L44
 840              	.L53:
 642:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     }
 643:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* use UDP PCB local IP address as source address */
 644:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     src_ip = &(pcb->local_ip);
 841              	 .loc 1 644 0
 842 0100 FB68     	 ldr r3,[r7,#12]
 843 0102 FB61     	 str r3,[r7,#28]
 844              	.L52:
 645:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   }
 646:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 647:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
 648:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 649:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #if LWIP_UDPLITE
 650:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* UDP Lite protocol? */
 651:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   if (pcb->flags & UDP_FLAGS_UDPLITE) {
 652:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     u16_t chklen, chklen_hdr;
 653:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP LITE packet length %"U16_F"\n", q->tot_len));
 654:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* set UDP message length in UDP header */
 655:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     chklen_hdr = chklen = pcb->chksum_len_tx;
 656:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     if ((chklen < sizeof(struct udp_hdr)) || (chklen > q->tot_len)) {
 657:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       if (chklen != 0) {
 658:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP LITE pcb->chksum_len is illegal: %"U16_F"\n", chklen
 659:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       }
 660:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       /* For UDP-Lite, checksum length of 0 means checksum
 661:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****          over the complete packet. (See RFC 3828 chap. 3.1)
 662:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****          At least the UDP-Lite header must be covered by the
 663:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****          checksum, therefore, if chksum_len has an illegal
 664:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****          value, we generate the checksum over the complete
 665:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****          packet to be safe. */
 666:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       chklen_hdr = 0;
 667:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       chklen = q->tot_len;
 668:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     }
 669:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     udphdr->len = htons(chklen_hdr);
 670:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* calculate checksum */
 671:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #if CHECKSUM_GEN_UDP
 672:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     udphdr->chksum = inet_chksum_pseudo_partial(q, src_ip, dst_ip,
 673:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       IP_PROTO_UDPLITE, q->tot_len,
 674:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #if !LWIP_CHECKSUM_ON_COPY
 675:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       chklen);
 676:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #else /* !LWIP_CHECKSUM_ON_COPY */
 677:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       (have_chksum ? UDP_HLEN : chklen));
 678:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     if (have_chksum) {
 679:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       u32_t acc;
 680:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       acc = udphdr->chksum + (u16_t)~(chksum);
 681:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       udphdr->chksum = FOLD_U32T(acc);
 682:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     }
 683:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif /* !LWIP_CHECKSUM_ON_COPY */
 684:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 685:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* chksum zero must become 0xffff, as zero means 'no checksum' */
 686:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     if (udphdr->chksum == 0x0000) {
 687:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       udphdr->chksum = 0xffff;
 688:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     }
 689:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif /* CHECKSUM_GEN_UDP */
 690:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* output to IP */
 691:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDPLITE,)\n"));
 692:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
 693:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDPLITE, netif);
 694:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     NETIF_SET_HWADDRHINT(netif, NULL);
 695:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   } else
 696:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif /* LWIP_UDPLITE */
 697:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   {      /* UDP */
 698:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
 699:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     udphdr->len = htons(q->tot_len);
 845              	 .loc 1 699 0
 846 0104 BB69     	 ldr r3,[r7,#24]
 847 0106 1B89     	 ldrh r3,[r3,#8]
 848 0108 1846     	 mov r0,r3
 849 010a FFF7FEFF 	 bl lwip_htons
 850 010e 0346     	 mov r3,r0
 851 0110 1A46     	 mov r2,r3
 852 0112 3B69     	 ldr r3,[r7,#16]
 853 0114 9A80     	 strh r2,[r3,#4]
 700:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* calculate checksum */
 701:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #if CHECKSUM_GEN_UDP
 702:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     if ((pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 703:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       u16_t udpchksum;
 704:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #if LWIP_CHECKSUM_ON_COPY
 705:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       if (have_chksum) {
 706:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         u32_t acc;
 707:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         udpchksum = inet_chksum_pseudo_partial(q, src_ip, dst_ip, IP_PROTO_UDP,
 708:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           q->tot_len, UDP_HLEN);
 709:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         acc = udpchksum + (u16_t)~(chksum);
 710:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         udpchksum = FOLD_U32T(acc);
 711:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       } else
 712:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif /* LWIP_CHECKSUM_ON_COPY */
 713:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       {
 714:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         udpchksum = inet_chksum_pseudo(q, src_ip, dst_ip, IP_PROTO_UDP, q->tot_len);
 715:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       }
 716:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 717:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       /* chksum zero must become 0xffff, as zero means 'no checksum' */
 718:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       if (udpchksum == 0x0000) {
 719:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         udpchksum = 0xffff;
 720:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       }
 721:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       udphdr->chksum = udpchksum;
 722:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     }
 723:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif /* CHECKSUM_GEN_UDP */
 724:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
 725:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));
 726:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* output to IP */
 727:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
 728:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
 854              	 .loc 1 728 0
 855 0116 FB68     	 ldr r3,[r7,#12]
 856 0118 9C7A     	 ldrb r4,[r3,#10]
 857 011a FB68     	 ldr r3,[r7,#12]
 858 011c 5B7A     	 ldrb r3,[r3,#9]
 859 011e 0093     	 str r3,[sp]
 860 0120 1123     	 movs r3,#17
 861 0122 0193     	 str r3,[sp,#4]
 862 0124 3B6B     	 ldr r3,[r7,#48]
 863 0126 0293     	 str r3,[sp,#8]
 864 0128 B869     	 ldr r0,[r7,#24]
 865 012a F969     	 ldr r1,[r7,#28]
 866 012c 7A68     	 ldr r2,[r7,#4]
 867 012e 2346     	 mov r3,r4
 868 0130 FFF7FEFF 	 bl ip_output_if
 869 0134 0346     	 mov r3,r0
 870 0136 FB75     	 strb r3,[r7,#23]
 729:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     NETIF_SET_HWADDRHINT(netif, NULL);
 730:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   }
 731:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* TODO: must this be increased even if error occured? */
 732:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   snmp_inc_udpoutdatagrams();
 733:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 734:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* did we chain a separate header pbuf earlier? */
 735:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   if (q != p) {
 871              	 .loc 1 735 0
 872 0138 BA69     	 ldr r2,[r7,#24]
 873 013a BB68     	 ldr r3,[r7,#8]
 874 013c 9A42     	 cmp r2,r3
 875 013e 04D0     	 beq .L55
 736:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* free the header pbuf */
 737:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     pbuf_free(q);
 876              	 .loc 1 737 0
 877 0140 B869     	 ldr r0,[r7,#24]
 878 0142 FFF7FEFF 	 bl pbuf_free
 738:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     q = NULL;
 879              	 .loc 1 738 0
 880 0146 0023     	 movs r3,#0
 881 0148 BB61     	 str r3,[r7,#24]
 882              	.L55:
 739:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* p is still referenced by the caller, and will live on */
 740:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   }
 741:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 742:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   UDP_STATS_INC(udp.xmit);
 743:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   return err;
 883              	 .loc 1 743 0
 884 014a FB7D     	 ldrb r3,[r7,#23]
 885              	.L44:
 886 014c 5BB2     	 sxtb r3,r3
 744:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** }
 887              	 .loc 1 744 0
 888 014e 1846     	 mov r0,r3
 889 0150 2437     	 adds r7,r7,#36
 890              	.LCFI28:
 891              	 .cfi_def_cfa_offset 12
 892 0152 BD46     	 mov sp,r7
 893              	.LCFI29:
 894              	 .cfi_def_cfa_register 13
 895              	 
 896 0154 90BD     	 pop {r4,r7,pc}
 897              	 .cfi_endproc
 898              	.LFE133:
 900 0156 00BF     	 .section .text.udp_bind,"ax",%progbits
 901              	 .align 2
 902              	 .global udp_bind
 903              	 .thumb
 904              	 .thumb_func
 906              	udp_bind:
 907              	.LFB134:
 745:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 746:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** /**
 747:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * Bind an UDP PCB.
 748:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 749:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @param pcb UDP PCB to be bound with a local address ipaddr and port.
 750:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @param ipaddr local IP address to bind with. Use IP_ADDR_ANY to
 751:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * bind to all local interfaces.
 752:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @param port local UDP port to bind with. Use 0 to automatically bind
 753:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * to a random port between UDP_LOCAL_PORT_RANGE_START and
 754:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * UDP_LOCAL_PORT_RANGE_END.
 755:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 756:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * ipaddr & port are expected to be in the same byte order as in the pcb.
 757:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 758:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @return lwIP error code.
 759:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * - ERR_OK. Successful. No error occured.
 760:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * - ERR_USE. The specified ipaddr and port are already bound to by
 761:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * another UDP PCB.
 762:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 763:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @see udp_disconnect()
 764:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  */
 765:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** err_t
 766:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
 767:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** {
 908              	 .loc 1 767 0
 909              	 .cfi_startproc
 910              	 
 911              	 
 912 0000 80B5     	 push {r7,lr}
 913              	.LCFI30:
 914              	 .cfi_def_cfa_offset 8
 915              	 .cfi_offset 7,-8
 916              	 .cfi_offset 14,-4
 917 0002 86B0     	 sub sp,sp,#24
 918              	.LCFI31:
 919              	 .cfi_def_cfa_offset 32
 920 0004 00AF     	 add r7,sp,#0
 921              	.LCFI32:
 922              	 .cfi_def_cfa_register 7
 923 0006 F860     	 str r0,[r7,#12]
 924 0008 B960     	 str r1,[r7,#8]
 925 000a 1346     	 mov r3,r2
 926 000c FB80     	 strh r3,[r7,#6]
 768:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   struct udp_pcb *ipcb;
 769:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   u8_t rebind;
 770:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 771:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
 772:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   ip_addr_debug_print(UDP_DEBUG, ipaddr);
 773:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
 774:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 775:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   rebind = 0;
 927              	 .loc 1 775 0
 928 000e 0023     	 movs r3,#0
 929 0010 FB74     	 strb r3,[r7,#19]
 776:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* Check for double bind and rebind of the same pcb */
 777:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 930              	 .loc 1 777 0
 931 0012 2A4B     	 ldr r3,.L67
 932 0014 1B68     	 ldr r3,[r3]
 933 0016 7B61     	 str r3,[r7,#20]
 934 0018 24E0     	 b .L57
 935              	.L62:
 778:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* is this UDP PCB already on active list? */
 779:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     if (pcb == ipcb) {
 936              	 .loc 1 779 0
 937 001a FA68     	 ldr r2,[r7,#12]
 938 001c 7B69     	 ldr r3,[r7,#20]
 939 001e 9A42     	 cmp r2,r3
 940 0020 02D1     	 bne .L58
 780:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       /* pcb may occur at most once in active list */
 781:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       LWIP_ASSERT("rebind == 0", rebind == 0);
 782:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       /* pcb already in list, just rebind */
 783:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       rebind = 1;
 941              	 .loc 1 783 0
 942 0022 0123     	 movs r3,#1
 943 0024 FB74     	 strb r3,[r7,#19]
 944 0026 1AE0     	 b .L59
 945              	.L58:
 784:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     }
 785:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 786:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* By default, we don't allow to bind to a port that any other udp
 787:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****        PCB is alread bound to, unless *all* PCBs with that port have tha
 788:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****        REUSEADDR flag set. */
 789:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #if SO_REUSE
 790:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     else if (!ip_get_option(pcb, SOF_REUSEADDR) &&
 791:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****              !ip_get_option(ipcb, SOF_REUSEADDR)) {
 792:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #else /* SO_REUSE */
 793:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* port matches that of PCB in list and REUSEADDR not set -> reject */
 794:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     else {
 795:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif /* SO_REUSE */
 796:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       if ((ipcb->local_port == port) &&
 946              	 .loc 1 796 0
 947 0028 7B69     	 ldr r3,[r7,#20]
 948 002a 5B8A     	 ldrh r3,[r3,#18]
 949 002c FA88     	 ldrh r2,[r7,#6]
 950 002e 9A42     	 cmp r2,r3
 951 0030 15D1     	 bne .L59
 797:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           /* IP address matches, or one is IP_ADDR_ANY? */
 798:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           (ip_addr_isany(&(ipcb->local_ip)) ||
 952              	 .loc 1 798 0 discriminator 1
 953 0032 7B69     	 ldr r3,[r7,#20]
 796:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****           /* IP address matches, or one is IP_ADDR_ANY? */
 954              	 .loc 1 796 0 discriminator 1
 955 0034 002B     	 cmp r3,#0
 956 0036 10D0     	 beq .L60
 957              	 .loc 1 798 0
 958 0038 7B69     	 ldr r3,[r7,#20]
 959 003a 1B68     	 ldr r3,[r3]
 960 003c 002B     	 cmp r3,#0
 961 003e 0CD0     	 beq .L60
 962              	 .loc 1 798 0 is_stmt 0 discriminator 1
 963 0040 BB68     	 ldr r3,[r7,#8]
 964 0042 002B     	 cmp r3,#0
 965 0044 09D0     	 beq .L60
 799:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****            ip_addr_isany(ipaddr) ||
 966              	 .loc 1 799 0 is_stmt 1
 967 0046 BB68     	 ldr r3,[r7,#8]
 968 0048 1B68     	 ldr r3,[r3]
 969 004a 002B     	 cmp r3,#0
 970 004c 05D0     	 beq .L60
 800:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****            ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
 971              	 .loc 1 800 0 discriminator 1
 972 004e 7B69     	 ldr r3,[r7,#20]
 973 0050 1A68     	 ldr r2,[r3]
 974 0052 BB68     	 ldr r3,[r7,#8]
 975 0054 1B68     	 ldr r3,[r3]
 799:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****            ip_addr_isany(ipaddr) ||
 976              	 .loc 1 799 0 discriminator 1
 977 0056 9A42     	 cmp r2,r3
 978 0058 01D1     	 bne .L59
 979              	.L60:
 801:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         /* other PCB already binds to this local IP and port */
 802:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         LWIP_DEBUGF(UDP_DEBUG,
 803:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                     ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
 804:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         return ERR_USE;
 980              	 .loc 1 804 0
 981 005a F823     	 movs r3,#248
 982 005c 28E0     	 b .L61
 983              	.L59:
 777:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* is this UDP PCB already on active list? */
 984              	 .loc 1 777 0 discriminator 2
 985 005e 7B69     	 ldr r3,[r7,#20]
 986 0060 DB68     	 ldr r3,[r3,#12]
 987 0062 7B61     	 str r3,[r7,#20]
 988              	.L57:
 777:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* is this UDP PCB already on active list? */
 989              	 .loc 1 777 0 is_stmt 0 discriminator 1
 990 0064 7B69     	 ldr r3,[r7,#20]
 991 0066 002B     	 cmp r3,#0
 992 0068 D7D1     	 bne .L62
 805:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       }
 806:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     }
 807:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   }
 808:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 809:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   ip_addr_set(&pcb->local_ip, ipaddr);
 993              	 .loc 1 809 0 is_stmt 1
 994 006a BB68     	 ldr r3,[r7,#8]
 995 006c 002B     	 cmp r3,#0
 996 006e 02D0     	 beq .L63
 997              	 .loc 1 809 0 is_stmt 0 discriminator 1
 998 0070 BB68     	 ldr r3,[r7,#8]
 999 0072 1B68     	 ldr r3,[r3]
 1000 0074 00E0     	 b .L64
 1001              	.L63:
 1002              	 .loc 1 809 0 discriminator 2
 1003 0076 0023     	 movs r3,#0
 1004              	.L64:
 1005              	 .loc 1 809 0 discriminator 4
 1006 0078 FA68     	 ldr r2,[r7,#12]
 1007 007a 1360     	 str r3,[r2]
 810:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 811:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* no port specified? */
 812:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   if (port == 0) {
 1008              	 .loc 1 812 0 is_stmt 1 discriminator 4
 1009 007c FB88     	 ldrh r3,[r7,#6]
 1010 007e 002B     	 cmp r3,#0
 1011 0080 08D1     	 bne .L65
 813:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     port = udp_new_port();
 1012              	 .loc 1 813 0
 1013 0082 FFF7FEFF 	 bl udp_new_port
 1014 0086 0346     	 mov r3,r0
 1015 0088 FB80     	 strh r3,[r7,#6]
 814:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     if (port == 0) {
 1016              	 .loc 1 814 0
 1017 008a FB88     	 ldrh r3,[r7,#6]
 1018 008c 002B     	 cmp r3,#0
 1019 008e 01D1     	 bne .L65
 815:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       /* no more ports available in local range */
 816:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
 817:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       return ERR_USE;
 1020              	 .loc 1 817 0
 1021 0090 F823     	 movs r3,#248
 1022 0092 0DE0     	 b .L61
 1023              	.L65:
 818:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     }
 819:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   }
 820:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   pcb->local_port = port;
 1024              	 .loc 1 820 0
 1025 0094 FB68     	 ldr r3,[r7,#12]
 1026 0096 FA88     	 ldrh r2,[r7,#6]
 1027 0098 5A82     	 strh r2,[r3,#18]
 821:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   snmp_insert_udpidx_tree(pcb);
 822:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* pcb not active yet? */
 823:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   if (rebind == 0) {
 1028              	 .loc 1 823 0
 1029 009a FB7C     	 ldrb r3,[r7,#19]
 1030 009c 002B     	 cmp r3,#0
 1031 009e 06D1     	 bne .L66
 824:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* place the PCB on the active list if not already there */
 825:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     pcb->next = udp_pcbs;
 1032              	 .loc 1 825 0
 1033 00a0 064B     	 ldr r3,.L67
 1034 00a2 1A68     	 ldr r2,[r3]
 1035 00a4 FB68     	 ldr r3,[r7,#12]
 1036 00a6 DA60     	 str r2,[r3,#12]
 826:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     udp_pcbs = pcb;
 1037              	 .loc 1 826 0
 1038 00a8 044A     	 ldr r2,.L67
 1039 00aa FB68     	 ldr r3,[r7,#12]
 1040 00ac 1360     	 str r3,[r2]
 1041              	.L66:
 827:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   }
 828:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
 829:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****               ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
 830:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
 831:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
 832:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                pcb->local_port));
 833:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   return ERR_OK;
 1042              	 .loc 1 833 0
 1043 00ae 0023     	 movs r3,#0
 1044              	.L61:
 1045 00b0 5BB2     	 sxtb r3,r3
 834:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** }
 1046              	 .loc 1 834 0
 1047 00b2 1846     	 mov r0,r3
 1048 00b4 1837     	 adds r7,r7,#24
 1049              	.LCFI33:
 1050              	 .cfi_def_cfa_offset 8
 1051 00b6 BD46     	 mov sp,r7
 1052              	.LCFI34:
 1053              	 .cfi_def_cfa_register 13
 1054              	 
 1055 00b8 80BD     	 pop {r7,pc}
 1056              	.L68:
 1057 00ba 00BF     	 .align 2
 1058              	.L67:
 1059 00bc 00000000 	 .word udp_pcbs
 1060              	 .cfi_endproc
 1061              	.LFE134:
 1063              	 .section .text.udp_connect,"ax",%progbits
 1064              	 .align 2
 1065              	 .global udp_connect
 1066              	 .thumb
 1067              	 .thumb_func
 1069              	udp_connect:
 1070              	.LFB135:
 835:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** /**
 836:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * Connect an UDP PCB.
 837:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 838:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * This will associate the UDP PCB with the remote address.
 839:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 840:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @param pcb UDP PCB to be connected with remote address ipaddr and port.
 841:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @param ipaddr remote IP address to connect with.
 842:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @param port remote UDP port to connect with.
 843:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 844:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @return lwIP error code
 845:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 846:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * ipaddr & port are expected to be in the same byte order as in the pcb.
 847:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 848:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * The udp pcb is bound to a random local port if not already bound.
 849:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 850:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @see udp_disconnect()
 851:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  */
 852:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** err_t
 853:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** udp_connect(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
 854:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** {
 1071              	 .loc 1 854 0
 1072              	 .cfi_startproc
 1073              	 
 1074              	 
 1075 0000 80B5     	 push {r7,lr}
 1076              	.LCFI35:
 1077              	 .cfi_def_cfa_offset 8
 1078              	 .cfi_offset 7,-8
 1079              	 .cfi_offset 14,-4
 1080 0002 86B0     	 sub sp,sp,#24
 1081              	.LCFI36:
 1082              	 .cfi_def_cfa_offset 32
 1083 0004 00AF     	 add r7,sp,#0
 1084              	.LCFI37:
 1085              	 .cfi_def_cfa_register 7
 1086 0006 F860     	 str r0,[r7,#12]
 1087 0008 B960     	 str r1,[r7,#8]
 1088 000a 1346     	 mov r3,r2
 1089 000c FB80     	 strh r3,[r7,#6]
 855:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   struct udp_pcb *ipcb;
 856:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 857:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   if (pcb->local_port == 0) {
 1090              	 .loc 1 857 0
 1091 000e FB68     	 ldr r3,[r7,#12]
 1092 0010 5B8A     	 ldrh r3,[r3,#18]
 1093 0012 002B     	 cmp r3,#0
 1094 0014 0FD1     	 bne .L70
 1095              	.LBB2:
 858:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 1096              	 .loc 1 858 0
 1097 0016 FA68     	 ldr r2,[r7,#12]
 1098 0018 FB68     	 ldr r3,[r7,#12]
 1099 001a 5B8A     	 ldrh r3,[r3,#18]
 1100 001c F868     	 ldr r0,[r7,#12]
 1101 001e 1146     	 mov r1,r2
 1102 0020 1A46     	 mov r2,r3
 1103 0022 FFF7FEFF 	 bl udp_bind
 1104 0026 0346     	 mov r3,r0
 1105 0028 FB74     	 strb r3,[r7,#19]
 859:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     if (err != ERR_OK) {
 1106              	 .loc 1 859 0
 1107 002a 97F91330 	 ldrsb r3,[r7,#19]
 1108 002e 002B     	 cmp r3,#0
 1109 0030 01D0     	 beq .L70
 860:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       return err;
 1110              	 .loc 1 860 0
 1111 0032 FB7C     	 ldrb r3,[r7,#19]
 1112 0034 2AE0     	 b .L71
 1113              	.L70:
 1114              	.LBE2:
 861:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     }
 862:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   }
 863:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 864:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   ip_addr_set(&pcb->remote_ip, ipaddr);
 1115              	 .loc 1 864 0
 1116 0036 BB68     	 ldr r3,[r7,#8]
 1117 0038 002B     	 cmp r3,#0
 1118 003a 02D0     	 beq .L72
 1119              	 .loc 1 864 0 is_stmt 0 discriminator 1
 1120 003c BB68     	 ldr r3,[r7,#8]
 1121 003e 1B68     	 ldr r3,[r3]
 1122 0040 00E0     	 b .L73
 1123              	.L72:
 1124              	 .loc 1 864 0 discriminator 2
 1125 0042 0023     	 movs r3,#0
 1126              	.L73:
 1127              	 .loc 1 864 0 discriminator 4
 1128 0044 FA68     	 ldr r2,[r7,#12]
 1129 0046 5360     	 str r3,[r2,#4]
 865:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   pcb->remote_port = port;
 1130              	 .loc 1 865 0 is_stmt 1 discriminator 4
 1131 0048 FB68     	 ldr r3,[r7,#12]
 1132 004a FA88     	 ldrh r2,[r7,#6]
 1133 004c 9A82     	 strh r2,[r3,#20]
 866:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   pcb->flags |= UDP_FLAGS_CONNECTED;
 1134              	 .loc 1 866 0 discriminator 4
 1135 004e FB68     	 ldr r3,[r7,#12]
 1136 0050 1B7C     	 ldrb r3,[r3,#16]
 1137 0052 43F00403 	 orr r3,r3,#4
 1138 0056 DAB2     	 uxtb r2,r3
 1139 0058 FB68     	 ldr r3,[r7,#12]
 1140 005a 1A74     	 strb r2,[r3,#16]
 867:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** /** TODO: this functionality belongs in upper layers */
 868:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #ifdef LWIP_UDP_TODO
 869:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* Nail down local IP for netconn_addr()/getsockname() */
 870:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   if (ip_addr_isany(&pcb->local_ip) && !ip_addr_isany(&pcb->remote_ip)) {
 871:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     struct netif *netif;
 872:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 873:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     if ((netif = ip_route(&(pcb->remote_ip))) == NULL) {
 874:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       LWIP_DEBUGF(UDP_DEBUG, ("udp_connect: No route to 0x%lx\n", pcb->remote_ip.addr));
 875:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       UDP_STATS_INC(udp.rterr);
 876:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       return ERR_RTE;
 877:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     }
 878:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /** TODO: this will bind the udp pcb locally, to the interface which
 879:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         is used to route output packets to the remote address. However, we
 880:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         might want to accept incoming packets on any interface! */
 881:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     pcb->local_ip = netif->ip_addr;
 882:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   } else if (ip_addr_isany(&pcb->remote_ip)) {
 883:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     pcb->local_ip.addr = 0;
 884:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   }
 885:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** #endif
 886:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
 887:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****               ("udp_connect: connected to %"U16_F".%"U16_F".%"U16_F".%"U16_F",port %"U16_F"\n",
 888:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
 889:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
 890:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****                pcb->local_port));
 891:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 892:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* Insert UDP PCB into the list of active UDP PCBs. */
 893:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 1141              	 .loc 1 893 0 discriminator 4
 1142 005c 0E4B     	 ldr r3,.L77
 1143 005e 1B68     	 ldr r3,[r3]
 1144 0060 7B61     	 str r3,[r7,#20]
 1145 0062 08E0     	 b .L74
 1146              	.L76:
 894:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     if (pcb == ipcb) {
 1147              	 .loc 1 894 0
 1148 0064 FA68     	 ldr r2,[r7,#12]
 1149 0066 7B69     	 ldr r3,[r7,#20]
 1150 0068 9A42     	 cmp r2,r3
 1151 006a 01D1     	 bne .L75
 895:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       /* already on the list, just return */
 896:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       return ERR_OK;
 1152              	 .loc 1 896 0
 1153 006c 0023     	 movs r3,#0
 1154 006e 0DE0     	 b .L71
 1155              	.L75:
 893:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     if (pcb == ipcb) {
 1156              	 .loc 1 893 0 discriminator 2
 1157 0070 7B69     	 ldr r3,[r7,#20]
 1158 0072 DB68     	 ldr r3,[r3,#12]
 1159 0074 7B61     	 str r3,[r7,#20]
 1160              	.L74:
 893:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     if (pcb == ipcb) {
 1161              	 .loc 1 893 0 is_stmt 0 discriminator 1
 1162 0076 7B69     	 ldr r3,[r7,#20]
 1163 0078 002B     	 cmp r3,#0
 1164 007a F3D1     	 bne .L76
 897:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     }
 898:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   }
 899:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* PCB not yet on the list, add PCB now */
 900:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   pcb->next = udp_pcbs;
 1165              	 .loc 1 900 0 is_stmt 1
 1166 007c 064B     	 ldr r3,.L77
 1167 007e 1A68     	 ldr r2,[r3]
 1168 0080 FB68     	 ldr r3,[r7,#12]
 1169 0082 DA60     	 str r2,[r3,#12]
 901:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   udp_pcbs = pcb;
 1170              	 .loc 1 901 0
 1171 0084 044A     	 ldr r2,.L77
 1172 0086 FB68     	 ldr r3,[r7,#12]
 1173 0088 1360     	 str r3,[r2]
 902:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   return ERR_OK;
 1174              	 .loc 1 902 0
 1175 008a 0023     	 movs r3,#0
 1176              	.L71:
 1177 008c 5BB2     	 sxtb r3,r3
 903:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** }
 1178              	 .loc 1 903 0
 1179 008e 1846     	 mov r0,r3
 1180 0090 1837     	 adds r7,r7,#24
 1181              	.LCFI38:
 1182              	 .cfi_def_cfa_offset 8
 1183 0092 BD46     	 mov sp,r7
 1184              	.LCFI39:
 1185              	 .cfi_def_cfa_register 13
 1186              	 
 1187 0094 80BD     	 pop {r7,pc}
 1188              	.L78:
 1189 0096 00BF     	 .align 2
 1190              	.L77:
 1191 0098 00000000 	 .word udp_pcbs
 1192              	 .cfi_endproc
 1193              	.LFE135:
 1195              	 .section .text.udp_disconnect,"ax",%progbits
 1196              	 .align 2
 1197              	 .global udp_disconnect
 1198              	 .thumb
 1199              	 .thumb_func
 1201              	udp_disconnect:
 1202              	.LFB136:
 904:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 905:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** /**
 906:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * Disconnect a UDP PCB
 907:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 908:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @param pcb the udp pcb to disconnect.
 909:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  */
 910:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** void
 911:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** udp_disconnect(struct udp_pcb *pcb)
 912:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** {
 1203              	 .loc 1 912 0
 1204              	 .cfi_startproc
 1205              	 
 1206              	 
 1207              	 
 1208 0000 80B4     	 push {r7}
 1209              	.LCFI40:
 1210              	 .cfi_def_cfa_offset 4
 1211              	 .cfi_offset 7,-4
 1212 0002 83B0     	 sub sp,sp,#12
 1213              	.LCFI41:
 1214              	 .cfi_def_cfa_offset 16
 1215 0004 00AF     	 add r7,sp,#0
 1216              	.LCFI42:
 1217              	 .cfi_def_cfa_register 7
 1218 0006 7860     	 str r0,[r7,#4]
 913:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* reset remote address association */
 914:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   ip_addr_set_any(&pcb->remote_ip);
 1219              	 .loc 1 914 0
 1220 0008 7B68     	 ldr r3,[r7,#4]
 1221 000a 0022     	 movs r2,#0
 1222 000c 5A60     	 str r2,[r3,#4]
 915:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   pcb->remote_port = 0;
 1223              	 .loc 1 915 0
 1224 000e 7B68     	 ldr r3,[r7,#4]
 1225 0010 0022     	 movs r2,#0
 1226 0012 9A82     	 strh r2,[r3,#20]
 916:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* mark PCB as unconnected */
 917:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   pcb->flags &= ~UDP_FLAGS_CONNECTED;
 1227              	 .loc 1 917 0
 1228 0014 7B68     	 ldr r3,[r7,#4]
 1229 0016 1B7C     	 ldrb r3,[r3,#16]
 1230 0018 23F00403 	 bic r3,r3,#4
 1231 001c DAB2     	 uxtb r2,r3
 1232 001e 7B68     	 ldr r3,[r7,#4]
 1233 0020 1A74     	 strb r2,[r3,#16]
 918:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** }
 1234              	 .loc 1 918 0
 1235 0022 0C37     	 adds r7,r7,#12
 1236              	.LCFI43:
 1237              	 .cfi_def_cfa_offset 4
 1238 0024 BD46     	 mov sp,r7
 1239              	.LCFI44:
 1240              	 .cfi_def_cfa_register 13
 1241              	 
 1242 0026 5DF8047B 	 ldr r7,[sp],#4
 1243              	.LCFI45:
 1244              	 .cfi_restore 7
 1245              	 .cfi_def_cfa_offset 0
 1246 002a 7047     	 bx lr
 1247              	 .cfi_endproc
 1248              	.LFE136:
 1250              	 .section .text.udp_recv,"ax",%progbits
 1251              	 .align 2
 1252              	 .global udp_recv
 1253              	 .thumb
 1254              	 .thumb_func
 1256              	udp_recv:
 1257              	.LFB137:
 919:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 920:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** /**
 921:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * Set a receive callback for a UDP PCB
 922:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 923:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * This callback will be called when receiving a datagram for the pcb.
 924:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 925:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @param pcb the pcb for wich to set the recv callback
 926:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @param recv function pointer of the callback function
 927:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @param recv_arg additional argument to pass to the callback function
 928:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  */
 929:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** void
 930:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
 931:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** {
 1258              	 .loc 1 931 0
 1259              	 .cfi_startproc
 1260              	 
 1261              	 
 1262              	 
 1263 0000 80B4     	 push {r7}
 1264              	.LCFI46:
 1265              	 .cfi_def_cfa_offset 4
 1266              	 .cfi_offset 7,-4
 1267 0002 85B0     	 sub sp,sp,#20
 1268              	.LCFI47:
 1269              	 .cfi_def_cfa_offset 24
 1270 0004 00AF     	 add r7,sp,#0
 1271              	.LCFI48:
 1272              	 .cfi_def_cfa_register 7
 1273 0006 F860     	 str r0,[r7,#12]
 1274 0008 B960     	 str r1,[r7,#8]
 1275 000a 7A60     	 str r2,[r7,#4]
 932:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* remember recv() callback and user data */
 933:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   pcb->recv = recv;
 1276              	 .loc 1 933 0
 1277 000c FB68     	 ldr r3,[r7,#12]
 1278 000e BA68     	 ldr r2,[r7,#8]
 1279 0010 DA61     	 str r2,[r3,#28]
 934:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   pcb->recv_arg = recv_arg;
 1280              	 .loc 1 934 0
 1281 0012 FB68     	 ldr r3,[r7,#12]
 1282 0014 7A68     	 ldr r2,[r7,#4]
 1283 0016 1A62     	 str r2,[r3,#32]
 935:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** }
 1284              	 .loc 1 935 0
 1285 0018 1437     	 adds r7,r7,#20
 1286              	.LCFI49:
 1287              	 .cfi_def_cfa_offset 4
 1288 001a BD46     	 mov sp,r7
 1289              	.LCFI50:
 1290              	 .cfi_def_cfa_register 13
 1291              	 
 1292 001c 5DF8047B 	 ldr r7,[sp],#4
 1293              	.LCFI51:
 1294              	 .cfi_restore 7
 1295              	 .cfi_def_cfa_offset 0
 1296 0020 7047     	 bx lr
 1297              	 .cfi_endproc
 1298              	.LFE137:
 1300 0022 00BF     	 .section .text.udp_remove,"ax",%progbits
 1301              	 .align 2
 1302              	 .global udp_remove
 1303              	 .thumb
 1304              	 .thumb_func
 1306              	udp_remove:
 1307              	.LFB138:
 936:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 937:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** /**
 938:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * Remove an UDP PCB.
 939:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 940:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @param pcb UDP PCB to be removed. The PCB is removed from the list of
 941:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * UDP PCB's and the data structure is freed from memory.
 942:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 943:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @see udp_new()
 944:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  */
 945:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** void
 946:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** udp_remove(struct udp_pcb *pcb)
 947:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** {
 1308              	 .loc 1 947 0
 1309              	 .cfi_startproc
 1310              	 
 1311              	 
 1312 0000 80B5     	 push {r7,lr}
 1313              	.LCFI52:
 1314              	 .cfi_def_cfa_offset 8
 1315              	 .cfi_offset 7,-8
 1316              	 .cfi_offset 14,-4
 1317 0002 84B0     	 sub sp,sp,#16
 1318              	.LCFI53:
 1319              	 .cfi_def_cfa_offset 24
 1320 0004 00AF     	 add r7,sp,#0
 1321              	.LCFI54:
 1322              	 .cfi_def_cfa_register 7
 1323 0006 7860     	 str r0,[r7,#4]
 948:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   struct udp_pcb *pcb2;
 949:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 950:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   snmp_delete_udpidx_tree(pcb);
 951:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* pcb to be removed is first in list? */
 952:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   if (udp_pcbs == pcb) {
 1324              	 .loc 1 952 0
 1325 0008 144B     	 ldr r3,.L87
 1326 000a 1A68     	 ldr r2,[r3]
 1327 000c 7B68     	 ldr r3,[r7,#4]
 1328 000e 9A42     	 cmp r2,r3
 1329 0010 05D1     	 bne .L82
 953:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* make list start at 2nd pcb */
 954:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     udp_pcbs = udp_pcbs->next;
 1330              	 .loc 1 954 0
 1331 0012 124B     	 ldr r3,.L87
 1332 0014 1B68     	 ldr r3,[r3]
 1333 0016 DB68     	 ldr r3,[r3,#12]
 1334 0018 104A     	 ldr r2,.L87
 1335 001a 1360     	 str r3,[r2]
 1336 001c 16E0     	 b .L83
 1337              	.L82:
 955:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* pcb not 1st in list */
 956:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   } else {
 957:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 1338              	 .loc 1 957 0
 1339 001e 0F4B     	 ldr r3,.L87
 1340 0020 1B68     	 ldr r3,[r3]
 1341 0022 FB60     	 str r3,[r7,#12]
 1342 0024 0FE0     	 b .L84
 1343              	.L86:
 958:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       /* find pcb in udp_pcbs list */
 959:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       if (pcb2->next != NULL && pcb2->next == pcb) {
 1344              	 .loc 1 959 0
 1345 0026 FB68     	 ldr r3,[r7,#12]
 1346 0028 DB68     	 ldr r3,[r3,#12]
 1347 002a 002B     	 cmp r3,#0
 1348 002c 08D0     	 beq .L85
 1349              	 .loc 1 959 0 is_stmt 0 discriminator 1
 1350 002e FB68     	 ldr r3,[r7,#12]
 1351 0030 DA68     	 ldr r2,[r3,#12]
 1352 0032 7B68     	 ldr r3,[r7,#4]
 1353 0034 9A42     	 cmp r2,r3
 1354 0036 03D1     	 bne .L85
 960:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         /* remove pcb from list */
 961:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****         pcb2->next = pcb->next;
 1355              	 .loc 1 961 0 is_stmt 1
 1356 0038 7B68     	 ldr r3,[r7,#4]
 1357 003a DA68     	 ldr r2,[r3,#12]
 1358 003c FB68     	 ldr r3,[r7,#12]
 1359 003e DA60     	 str r2,[r3,#12]
 1360              	.L85:
 957:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       /* find pcb in udp_pcbs list */
 1361              	 .loc 1 957 0 discriminator 2
 1362 0040 FB68     	 ldr r3,[r7,#12]
 1363 0042 DB68     	 ldr r3,[r3,#12]
 1364 0044 FB60     	 str r3,[r7,#12]
 1365              	.L84:
 957:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       /* find pcb in udp_pcbs list */
 1366              	 .loc 1 957 0 is_stmt 0 discriminator 1
 1367 0046 FB68     	 ldr r3,[r7,#12]
 1368 0048 002B     	 cmp r3,#0
 1369 004a ECD1     	 bne .L86
 1370              	.L83:
 962:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****       }
 963:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     }
 964:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   }
 965:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   memp_free(MEMP_UDP_PCB, pcb);
 1371              	 .loc 1 965 0 is_stmt 1
 1372 004c 0120     	 movs r0,#1
 1373 004e 7968     	 ldr r1,[r7,#4]
 1374 0050 FFF7FEFF 	 bl memp_free
 966:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** }
 1375              	 .loc 1 966 0
 1376 0054 1037     	 adds r7,r7,#16
 1377              	.LCFI55:
 1378              	 .cfi_def_cfa_offset 8
 1379 0056 BD46     	 mov sp,r7
 1380              	.LCFI56:
 1381              	 .cfi_def_cfa_register 13
 1382              	 
 1383 0058 80BD     	 pop {r7,pc}
 1384              	.L88:
 1385 005a 00BF     	 .align 2
 1386              	.L87:
 1387 005c 00000000 	 .word udp_pcbs
 1388              	 .cfi_endproc
 1389              	.LFE138:
 1391              	 .section .text.udp_new,"ax",%progbits
 1392              	 .align 2
 1393              	 .global udp_new
 1394              	 .thumb
 1395              	 .thumb_func
 1397              	udp_new:
 1398              	.LFB139:
 967:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** 
 968:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** /**
 969:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * Create a UDP PCB.
 970:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 971:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @return The UDP PCB which was created. NULL if the PCB data structure
 972:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * could not be allocated.
 973:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  *
 974:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  * @see udp_remove()
 975:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****  */
 976:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** struct udp_pcb *
 977:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** udp_new(void)
 978:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** {
 1399              	 .loc 1 978 0
 1400              	 .cfi_startproc
 1401              	 
 1402              	 
 1403 0000 80B5     	 push {r7,lr}
 1404              	.LCFI57:
 1405              	 .cfi_def_cfa_offset 8
 1406              	 .cfi_offset 7,-8
 1407              	 .cfi_offset 14,-4
 1408 0002 82B0     	 sub sp,sp,#8
 1409              	.LCFI58:
 1410              	 .cfi_def_cfa_offset 16
 1411 0004 00AF     	 add r7,sp,#0
 1412              	.LCFI59:
 1413              	 .cfi_def_cfa_register 7
 979:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   struct udp_pcb *pcb;
 980:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 1414              	 .loc 1 980 0
 1415 0006 0120     	 movs r0,#1
 1416 0008 FFF7FEFF 	 bl memp_malloc
 1417 000c 7860     	 str r0,[r7,#4]
 981:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   /* could allocate UDP PCB? */
 982:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   if (pcb != NULL) {
 1418              	 .loc 1 982 0
 1419 000e 7B68     	 ldr r3,[r7,#4]
 1420 0010 002B     	 cmp r3,#0
 1421 0012 07D0     	 beq .L90
 983:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
 984:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****      * which means checksum is generated over the whole datagram per default
 985:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****      * (recommended as default by RFC 3828). */
 986:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     /* initialize PCB to all zeroes */
 987:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     memset(pcb, 0, sizeof(struct udp_pcb));
 1422              	 .loc 1 987 0
 1423 0014 7868     	 ldr r0,[r7,#4]
 1424 0016 0021     	 movs r1,#0
 1425 0018 2422     	 movs r2,#36
 1426 001a FFF7FEFF 	 bl memset
 988:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****     pcb->ttl = UDP_TTL;
 1427              	 .loc 1 988 0
 1428 001e 7B68     	 ldr r3,[r7,#4]
 1429 0020 FF22     	 movs r2,#255
 1430 0022 9A72     	 strb r2,[r3,#10]
 1431              	.L90:
 989:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   }
 990:../Dave/Generated/ETH_LWIP/lwip/core/udp.c ****   return pcb;
 1432              	 .loc 1 990 0
 1433 0024 7B68     	 ldr r3,[r7,#4]
 991:../Dave/Generated/ETH_LWIP/lwip/core/udp.c **** }
 1434              	 .loc 1 991 0
 1435 0026 1846     	 mov r0,r3
 1436 0028 0837     	 adds r7,r7,#8
 1437              	.LCFI60:
 1438              	 .cfi_def_cfa_offset 8
 1439 002a BD46     	 mov sp,r7
 1440              	.LCFI61:
 1441              	 .cfi_def_cfa_register 13
 1442              	 
 1443 002c 80BD     	 pop {r7,pc}
 1444              	 .cfi_endproc
 1445              	.LFE139:
 1447 002e 00BF     	 .text
 1448              	.Letext0:
 1449              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1450              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1451              	 .file 4 "../Dave/Generated/ETH_LWIP/lwip/core/../include/lwip/../../port/include/arch/cc.h"
 1452              	 .file 5 "../Dave/Generated/ETH_LWIP/lwip/core/../include/lwip/err.h"
 1453              	 .file 6 "../Dave/Generated/ETH_LWIP/lwip/core/../include/lwip/pbuf.h"
 1454              	 .file 7 "../Dave/Generated/ETH_LWIP/lwip/core/../include/lwip/../ipv4/lwip/ip_addr.h"
 1455              	 .file 8 "../Dave/Generated/ETH_LWIP/lwip/core/../include/lwip/netif.h"
 1456              	 .file 9 "../Dave/Generated/ETH_LWIP/lwip/core/../include/lwip/../ipv4/lwip/ip.h"
 1457              	 .file 10 "../Dave/Generated/ETH_LWIP/lwip/core/../include/lwip/udp.h"
 1458              	 .file 11 "../Dave/Generated/ETH_LWIP/lwip/core/../include/lwip/memp.h"
 1459              	 .file 12 "C:/Users/wdmer/Downloads/jme_DAQ_Final/jme_DAQ_Integrated_XMC4700-F144x2048_0/Libraries/CMSIS/Include/core_cm4.h"
 1460              	 .file 13 "../Dave/Generated/ETH_LWIP/lwip/core/../include/ipv4/lwip/icmp.h"
DEFINED SYMBOLS
                            *ABS*:00000000 udp.c
    {standard input}:20     .data.udp_port:00000000 $d
    {standard input}:23     .data.udp_port:00000000 udp_port
                            *COM*:00000004 udp_pcbs
    {standard input}:27     .text.udp_init:00000000 $t
    {standard input}:32     .text.udp_init:00000000 udp_init
    {standard input}:61     .text.udp_new_port:00000000 $t
    {standard input}:65     .text.udp_new_port:00000000 udp_new_port
    {standard input}:158    .text.udp_new_port:0000006c $d
    {standard input}:164    .text.udp_input:00000000 $t
    {standard input}:169    .text.udp_input:00000000 udp_input
    {standard input}:536    .text.udp_input:00000220 $d
    {standard input}:543    .text.udp_send:00000000 $t
    {standard input}:548    .text.udp_send:00000000 udp_send
    {standard input}:595    .text.udp_sendto:00000000 udp_sendto
    {standard input}:590    .text.udp_sendto:00000000 $t
    {standard input}:674    .text.udp_sendto_if:00000000 udp_sendto_if
    {standard input}:669    .text.udp_sendto_if:00000000 $t
    {standard input}:906    .text.udp_bind:00000000 udp_bind
    {standard input}:901    .text.udp_bind:00000000 $t
    {standard input}:1059   .text.udp_bind:000000bc $d
    {standard input}:1064   .text.udp_connect:00000000 $t
    {standard input}:1069   .text.udp_connect:00000000 udp_connect
    {standard input}:1191   .text.udp_connect:00000098 $d
    {standard input}:1196   .text.udp_disconnect:00000000 $t
    {standard input}:1201   .text.udp_disconnect:00000000 udp_disconnect
    {standard input}:1251   .text.udp_recv:00000000 $t
    {standard input}:1256   .text.udp_recv:00000000 udp_recv
    {standard input}:1301   .text.udp_remove:00000000 $t
    {standard input}:1306   .text.udp_remove:00000000 udp_remove
    {standard input}:1387   .text.udp_remove:0000005c $d
    {standard input}:1392   .text.udp_new:00000000 $t
    {standard input}:1397   .text.udp_new:00000000 udp_new
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pbuf_header
pbuf_free
ip4_addr_isbroadcast
lwip_ntohs
icmp_dest_unreach
current_iphdr_dest
current_iphdr_src
ip_route
pbuf_alloc
pbuf_chain
lwip_htons
ip_output_if
memp_free
memp_malloc
memset
