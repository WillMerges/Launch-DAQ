   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "pbuf.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.pbuf_alloc,"ax",%progbits
  20              	 .align 2
  21              	 .global pbuf_alloc
  22              	 .thumb
  23              	 .thumb_func
  25              	pbuf_alloc:
  26              	.LFB133:
  27              	 .file 1 "../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c"
   1:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
   2:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @file
   3:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Packet buffer management
   4:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
   5:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Packets are built from the pbuf data structure. It supports dynamic
   6:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * memory allocation for packet contents or can reference externally
   7:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * managed packet contents both in RAM and ROM. Quick allocation for
   8:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * incoming packets is provided through pools with fixed sized pbufs.
   9:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
  10:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * A packet may span over multiple pbufs, chained as a singly linked
  11:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * list. This is called a "pbuf chain".
  12:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
  13:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Multiple packets may be queued, also using this singly linked list.
  14:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * This is called a "packet queue".
  15:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * 
  16:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * So, a packet queue consists of one or more pbuf chains, each of
  17:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * which consist of one or more pbufs. CURRENTLY, PACKET QUEUES ARE
  18:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * NOT SUPPORTED!!! Use helper structs to queue multiple packets.
  19:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * 
  20:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * The differences between a pbuf chain and a packet queue are very
  21:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * precise but subtle. 
  22:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
  23:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * The last pbuf of a packet has a ->tot_len field that equals the
  24:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * ->len field. It can be found by traversing the list. If the last
  25:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * pbuf of a packet has a ->next field other than NULL, more packets
  26:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * are on the queue.
  27:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
  28:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Therefore, looping through a pbuf of a single packet, has an
  29:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * loop end condition (tot_len == p->len), NOT (next == NULL).
  30:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
  31:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
  32:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /*
  33:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
  34:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * All rights reserved.
  35:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
  36:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Redistribution and use in source and binary forms, with or without modification,
  37:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * are permitted provided that the following conditions are met:
  38:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
  39:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  40:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *    this list of conditions and the following disclaimer.
  41:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  42:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *    this list of conditions and the following disclaimer in the documentation
  43:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *    and/or other materials provided with the distribution.
  44:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * 3. The name of the author may not be used to endorse or promote products
  45:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *    derived from this software without specific prior written permission.
  46:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
  47:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
  48:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  49:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
  50:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  51:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
  52:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  53:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  54:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
  55:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
  56:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * OF SUCH DAMAGE.
  57:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
  58:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * This file is part of the lwIP TCP/IP stack.
  59:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
  60:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Author: Adam Dunkels <adam@sics.se>
  61:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
  62:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
  63:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
  64:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #include "../include/lwip/opt.h"
  65:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
  66:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #include "../include/lwip/stats.h"
  67:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #include "../include/lwip/def.h"
  68:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #include "../include/lwip/mem.h"
  69:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #include "../include/lwip/memp.h"
  70:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #include "../include/lwip/pbuf.h"
  71:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #include "../include/lwip/sys.h"
  72:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #include "../port/include/arch/perf.h"
  73:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #if LWIP_TCP && TCP_QUEUE_OOSEQ
  74:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #include "../include/lwip/tcp_impl.h"
  75:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #endif
  76:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #if LWIP_CHECKSUM_ON_COPY
  77:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #include "lwip/inet_chksum.h"
  78:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #endif
  79:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
  80:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #include <string.h>
  81:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
  82:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #define SIZEOF_STRUCT_PBUF        LWIP_MEM_ALIGN_SIZE(sizeof(struct pbuf))
  83:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /* Since the pool is created in memp, PBUF_POOL_BUFSIZE will be automatically
  84:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****    aligned there. Therefore, PBUF_POOL_BUFSIZE_ALIGNED can be used here. */
  85:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #define PBUF_POOL_BUFSIZE_ALIGNED LWIP_MEM_ALIGN_SIZE(PBUF_POOL_BUFSIZE)
  86:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
  87:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #if !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ
  88:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #define PBUF_POOL_IS_EMPTY()
  89:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #else /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */
  90:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
  91:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #if !NO_SYS
  92:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  93:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #include "../include/lwip/tcpip.h"
  94:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #define PBUF_POOL_FREE_OOSEQ_QUEUE_CALL()  do { \
  95:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if(tcpip_callback_with_block(pbuf_free_ooseq_callback, NULL, 0) != ERR_OK) { \
  96:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       SYS_ARCH_PROTECT(old_level); \
  97:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       pbuf_free_ooseq_pending = 0; \
  98:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       SYS_ARCH_UNPROTECT(old_level); \
  99:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   } } while(0)
 100:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
 101:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #endif /* !NO_SYS */
 102:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 103:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** volatile u8_t pbuf_free_ooseq_pending;
 104:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #define PBUF_POOL_IS_EMPTY() pbuf_pool_is_empty()
 105:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 106:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 107:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Attempt to reclaim some memory from queued out-of-sequence TCP segments
 108:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * if we run out of pool pbufs. It's better to give priority to new packets
 109:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * if we're running out.
 110:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 111:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * This must be done in the correct thread context therefore this function
 112:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * can only be used with NO_SYS=0 and through tcpip_callback.
 113:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 114:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #if !NO_SYS
 115:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** static
 116:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #endif /* !NO_SYS */
 117:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** void
 118:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_free_ooseq(void)
 119:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 120:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   struct tcp_pcb* pcb;
 121:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   SYS_ARCH_DECL_PROTECT(old_level);
 122:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 123:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   SYS_ARCH_PROTECT(old_level);
 124:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   pbuf_free_ooseq_pending = 0;
 125:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   SYS_ARCH_UNPROTECT(old_level);
 126:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 127:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 128:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if (NULL != pcb->ooseq) {
 129:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /** Free the ooseq pbufs of one PCB only */
 130:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n")
 131:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       tcp_segs_free(pcb->ooseq);
 132:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       pcb->ooseq = NULL;
 133:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       return;
 134:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 135:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 136:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 137:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 138:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #if !NO_SYS
 139:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 140:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Just a callback function for tcpip_timeout() that calls pbuf_free_ooseq().
 141:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 142:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** static void
 143:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_free_ooseq_callback(void *arg)
 144:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 145:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_UNUSED_ARG(arg);
 146:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   pbuf_free_ooseq();
 147:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 148:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #endif /* !NO_SYS */
 149:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 150:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /** Queue a call to pbuf_free_ooseq if not already queued. */
 151:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** static void
 152:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_pool_is_empty(void)
 153:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 154:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
 155:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   SYS_ARCH_DECL_PROTECT(old_level);
 156:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   SYS_ARCH_PROTECT(old_level);
 157:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   pbuf_free_ooseq_pending = 1;
 158:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   SYS_ARCH_UNPROTECT(old_level);
 159:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
 160:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u8_t queued;
 161:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   SYS_ARCH_DECL_PROTECT(old_level);
 162:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   SYS_ARCH_PROTECT(old_level);
 163:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   queued = pbuf_free_ooseq_pending;
 164:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   pbuf_free_ooseq_pending = 1;
 165:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   SYS_ARCH_UNPROTECT(old_level);
 166:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 167:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if(!queued) {
 168:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* queue a call to pbuf_free_ooseq if not already queued */
 169:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 170:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 171:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
 172:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 173:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */
 174:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 175:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 176:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Allocates a pbuf of the given type (possibly a chain for PBUF_POOL type).
 177:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 178:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * The actual memory allocated for the pbuf is determined by the
 179:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * layer at which the pbuf is allocated and the requested size
 180:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * (from the size parameter).
 181:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 182:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param layer flag to define header size
 183:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param length size of the pbuf's payload
 184:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param type this parameter decides how and where the pbuf
 185:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * should be allocated as follows:
 186:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 187:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * - PBUF_RAM: buffer memory for pbuf is allocated as one large
 188:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             chunk. This includes protocol headers as well.
 189:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * - PBUF_ROM: no buffer memory is allocated for the pbuf, even for
 190:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             protocol headers. Additional headers must be prepended
 191:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             by allocating another pbuf and chain in to the front of
 192:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             the ROM pbuf. It is assumed that the memory used is really
 193:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             similar to ROM in that it is immutable and will not be
 194:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             changed. Memory which is dynamic should generally not
 195:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             be attached to PBUF_ROM pbufs. Use PBUF_REF instead.
 196:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * - PBUF_REF: no buffer memory is allocated for the pbuf, even for
 197:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             protocol headers. It is assumed that the pbuf is only
 198:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             being used in a single thread. If the pbuf gets queued,
 199:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *             then pbuf_take should be called to copy the buffer.
 200:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * - PBUF_POOL: the pbuf is allocated as a pbuf chain, with pbufs from
 201:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *              the pbuf pool that is allocated during pbuf_init().
 202:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 203:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return the allocated pbuf. If multiple pbufs where allocated, this
 204:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * is the first pbuf of a pbuf chain.
 205:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 206:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** struct pbuf *
 207:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
 208:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
  28              	 .loc 1 208 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32 0000 80B5     	 push {r7,lr}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 8
  35              	 .cfi_offset 7,-8
  36              	 .cfi_offset 14,-4
  37 0002 88B0     	 sub sp,sp,#32
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 40
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 0346     	 mov r3,r0
  44 0008 FB71     	 strb r3,[r7,#7]
  45 000a 0B46     	 mov r3,r1
  46 000c BB80     	 strh r3,[r7,#4]
  47 000e 1346     	 mov r3,r2
  48 0010 BB71     	 strb r3,[r7,#6]
 209:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   struct pbuf *p, *q, *r;
 210:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t offset;
 211:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   s32_t rem_len; /* remaining length */
 212:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));
 213:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 214:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* determine header offset */
 215:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   switch (layer) {
  49              	 .loc 1 215 0
  50 0012 FB79     	 ldrb r3,[r7,#7]
  51 0014 032B     	 cmp r3,#3
  52 0016 17D8     	 bhi .L2
  53 0018 01A2     	 adr r2,.L4
  54 001a 52F823F0 	 ldr pc,[r2,r3,lsl#2]
  55 001e 00BF     	 .p2align 2
  56              	.L4:
  57 0020 31000000 	 .word .L3+1
  58 0024 37000000 	 .word .L5+1
  59 0028 3D000000 	 .word .L6+1
  60 002c 43000000 	 .word .L7+1
  61              	 .p2align 1
  62              	.L3:
 216:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   case PBUF_TRANSPORT:
 217:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* add room for transport (often TCP) layer header */
 218:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  63              	 .loc 1 218 0
  64 0030 3823     	 movs r3,#56
  65 0032 FB82     	 strh r3,[r7,#22]
 219:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     break;
  66              	 .loc 1 219 0
  67 0034 0AE0     	 b .L8
  68              	.L5:
 220:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   case PBUF_IP:
 221:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* add room for IP layer header */
 222:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
  69              	 .loc 1 222 0
  70 0036 2423     	 movs r3,#36
  71 0038 FB82     	 strh r3,[r7,#22]
 223:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     break;
  72              	 .loc 1 223 0
  73 003a 07E0     	 b .L8
  74              	.L6:
 224:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   case PBUF_LINK:
 225:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* add room for link layer header */
 226:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     offset = PBUF_LINK_HLEN;
  75              	 .loc 1 226 0
  76 003c 1023     	 movs r3,#16
  77 003e FB82     	 strh r3,[r7,#22]
 227:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     break;
  78              	 .loc 1 227 0
  79 0040 04E0     	 b .L8
  80              	.L7:
 228:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   case PBUF_RAW:
 229:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     offset = 0;
  81              	 .loc 1 229 0
  82 0042 0023     	 movs r3,#0
  83 0044 FB82     	 strh r3,[r7,#22]
 230:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     break;
  84              	 .loc 1 230 0
  85 0046 01E0     	 b .L8
  86              	.L2:
 231:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   default:
 232:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 233:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return NULL;
  87              	 .loc 1 233 0
  88 0048 0023     	 movs r3,#0
  89 004a CFE0     	 b .L9
  90              	.L8:
 234:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 235:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 236:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   switch (type) {
  91              	 .loc 1 236 0
  92 004c BB79     	 ldrb r3,[r7,#6]
  93 004e 032B     	 cmp r3,#3
  94 0050 00F2C380 	 bhi .L10
  95 0054 01A2     	 adr r2,.L12
  96 0056 52F823F0 	 ldr pc,[r2,r3,lsl#2]
  97 005a 00BF     	 .p2align 2
  98              	.L12:
  99 005c 49010000 	 .word .L11+1
 100 0060 A7010000 	 .word .L13+1
 101 0064 A7010000 	 .word .L13+1
 102 0068 6D000000 	 .word .L14+1
 103              	 .p2align 1
 104              	.L14:
 237:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   case PBUF_POOL:
 238:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* allocate head of pbuf chain into p */
 239:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 105              	 .loc 1 239 0
 106 006c 0520     	 movs r0,#5
 107 006e FFF7FEFF 	 bl memp_malloc
 108 0072 F861     	 str r0,[r7,#28]
 240:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
 241:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if (p == NULL) {
 109              	 .loc 1 241 0
 110 0074 FB69     	 ldr r3,[r7,#28]
 111 0076 002B     	 cmp r3,#0
 112 0078 01D1     	 bne .L15
 242:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       PBUF_POOL_IS_EMPTY();
 243:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       return NULL;
 113              	 .loc 1 243 0
 114 007a 0023     	 movs r3,#0
 115 007c B6E0     	 b .L9
 116              	.L15:
 244:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 245:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p->type = type;
 117              	 .loc 1 245 0
 118 007e FB69     	 ldr r3,[r7,#28]
 119 0080 BA79     	 ldrb r2,[r7,#6]
 120 0082 1A73     	 strb r2,[r3,#12]
 246:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p->next = NULL;
 121              	 .loc 1 246 0
 122 0084 FB69     	 ldr r3,[r7,#28]
 123 0086 0022     	 movs r2,#0
 124 0088 1A60     	 str r2,[r3]
 247:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 248:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* make the payload pointer point 'offset' bytes into pbuf data memory */
 249:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 125              	 .loc 1 249 0
 126 008a FB8A     	 ldrh r3,[r7,#22]
 127 008c 1033     	 adds r3,r3,#16
 128 008e FA69     	 ldr r2,[r7,#28]
 129 0090 1344     	 add r3,r3,r2
 130 0092 0333     	 adds r3,r3,#3
 131 0094 23F00303 	 bic r3,r3,#3
 132 0098 1A46     	 mov r2,r3
 133 009a FB69     	 ldr r3,[r7,#28]
 134 009c 5A60     	 str r2,[r3,#4]
 250:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 251:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****             ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
 252:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* the total length of the pbuf chain is the requested size */
 253:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p->tot_len = length;
 135              	 .loc 1 253 0
 136 009e FB69     	 ldr r3,[r7,#28]
 137 00a0 BA88     	 ldrh r2,[r7,#4]
 138 00a2 1A81     	 strh r2,[r3,#8]
 254:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* set the length of the first pbuf in the chain */
 255:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 139              	 .loc 1 255 0
 140 00a4 FB8A     	 ldrh r3,[r7,#22]
 141 00a6 0333     	 adds r3,r3,#3
 142 00a8 23F00303 	 bic r3,r3,#3
 143 00ac C3F5C062 	 rsb r2,r3,#1536
 144 00b0 BB88     	 ldrh r3,[r7,#4]
 145 00b2 9342     	 cmp r3,r2
 146 00b4 A8BF     	 it ge
 147 00b6 1346     	 movge r3,r2
 148 00b8 9AB2     	 uxth r2,r3
 149 00ba FB69     	 ldr r3,[r7,#28]
 150 00bc 5A81     	 strh r2,[r3,#10]
 256:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 257:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                 ((u8_t*)p->payload + p->len <=
 258:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                  (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
 259:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 260:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
 261:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* set reference count (needed here in case we fail) */
 262:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p->ref = 1;
 151              	 .loc 1 262 0
 152 00be FB69     	 ldr r3,[r7,#28]
 153 00c0 0122     	 movs r2,#1
 154 00c2 DA81     	 strh r2,[r3,#14]
 263:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 264:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* now allocate the tail of the pbuf chain */
 265:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 266:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* remember first pbuf for linkage in next iteration */
 267:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     r = p;
 155              	 .loc 1 267 0
 156 00c4 FB69     	 ldr r3,[r7,#28]
 157 00c6 BB61     	 str r3,[r7,#24]
 268:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* remaining length to be allocated */
 269:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     rem_len = length - p->len;
 158              	 .loc 1 269 0
 159 00c8 BB88     	 ldrh r3,[r7,#4]
 160 00ca FA69     	 ldr r2,[r7,#28]
 161 00cc 5289     	 ldrh r2,[r2,#10]
 162 00ce 9B1A     	 subs r3,r3,r2
 163 00d0 3B61     	 str r3,[r7,#16]
 270:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* any remaining pbufs to be allocated? */
 271:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     while (rem_len > 0) {
 164              	 .loc 1 271 0
 165 00d2 35E0     	 b .L16
 166              	.L18:
 272:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 167              	 .loc 1 272 0
 168 00d4 0520     	 movs r0,#5
 169 00d6 FFF7FEFF 	 bl memp_malloc
 170 00da F860     	 str r0,[r7,#12]
 273:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       if (q == NULL) {
 171              	 .loc 1 273 0
 172 00dc FB68     	 ldr r3,[r7,#12]
 173 00de 002B     	 cmp r3,#0
 174 00e0 04D1     	 bne .L17
 274:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         PBUF_POOL_IS_EMPTY();
 275:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         /* free chain so far allocated */
 276:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         pbuf_free(p);
 175              	 .loc 1 276 0
 176 00e2 F869     	 ldr r0,[r7,#28]
 177 00e4 FFF7FEFF 	 bl pbuf_free
 277:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         /* bail out unsuccesfully */
 278:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         return NULL;
 178              	 .loc 1 278 0
 179 00e8 0023     	 movs r3,#0
 180 00ea 7FE0     	 b .L9
 181              	.L17:
 279:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       }
 280:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       q->type = type;
 182              	 .loc 1 280 0
 183 00ec FB68     	 ldr r3,[r7,#12]
 184 00ee BA79     	 ldrb r2,[r7,#6]
 185 00f0 1A73     	 strb r2,[r3,#12]
 281:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       q->flags = 0;
 186              	 .loc 1 281 0
 187 00f2 FB68     	 ldr r3,[r7,#12]
 188 00f4 0022     	 movs r2,#0
 189 00f6 5A73     	 strb r2,[r3,#13]
 282:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       q->next = NULL;
 190              	 .loc 1 282 0
 191 00f8 FB68     	 ldr r3,[r7,#12]
 192 00fa 0022     	 movs r2,#0
 193 00fc 1A60     	 str r2,[r3]
 283:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* make previous pbuf point to this pbuf */
 284:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       r->next = q;
 194              	 .loc 1 284 0
 195 00fe BB69     	 ldr r3,[r7,#24]
 196 0100 FA68     	 ldr r2,[r7,#12]
 197 0102 1A60     	 str r2,[r3]
 285:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* set total length of this pbuf and next in chain */
 286:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 287:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       q->tot_len = (u16_t)rem_len;
 198              	 .loc 1 287 0
 199 0104 3B69     	 ldr r3,[r7,#16]
 200 0106 9AB2     	 uxth r2,r3
 201 0108 FB68     	 ldr r3,[r7,#12]
 202 010a 1A81     	 strh r2,[r3,#8]
 288:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* this pbuf length is pool size, unless smaller sized tail */
 289:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 203              	 .loc 1 289 0
 204 010c 3B69     	 ldr r3,[r7,#16]
 205 010e 9BB2     	 uxth r3,r3
 206 0110 B3F5C06F 	 cmp r3,#1536
 207 0114 28BF     	 it cs
 208 0116 4FF4C063 	 movcs r3,#1536
 209 011a 9AB2     	 uxth r2,r3
 210 011c FB68     	 ldr r3,[r7,#12]
 211 011e 5A81     	 strh r2,[r3,#10]
 290:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 212              	 .loc 1 290 0
 213 0120 FB68     	 ldr r3,[r7,#12]
 214 0122 03F11002 	 add r2,r3,#16
 215 0126 FB68     	 ldr r3,[r7,#12]
 216 0128 5A60     	 str r2,[r3,#4]
 291:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 292:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****               ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
 293:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 294:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                   ((u8_t*)p->payload + p->len <=
 295:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                    (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
 296:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       q->ref = 1;
 217              	 .loc 1 296 0
 218 012a FB68     	 ldr r3,[r7,#12]
 219 012c 0122     	 movs r2,#1
 220 012e DA81     	 strh r2,[r3,#14]
 297:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* calculate remaining length to be allocated */
 298:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       rem_len -= q->len;
 221              	 .loc 1 298 0
 222 0130 FB68     	 ldr r3,[r7,#12]
 223 0132 5B89     	 ldrh r3,[r3,#10]
 224 0134 1A46     	 mov r2,r3
 225 0136 3B69     	 ldr r3,[r7,#16]
 226 0138 9B1A     	 subs r3,r3,r2
 227 013a 3B61     	 str r3,[r7,#16]
 299:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* remember this pbuf for linkage in next iteration */
 300:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       r = q;
 228              	 .loc 1 300 0
 229 013c FB68     	 ldr r3,[r7,#12]
 230 013e BB61     	 str r3,[r7,#24]
 231              	.L16:
 271:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 232              	 .loc 1 271 0
 233 0140 3B69     	 ldr r3,[r7,#16]
 234 0142 002B     	 cmp r3,#0
 235 0144 C6DC     	 bgt .L18
 301:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 302:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* end of chain */
 303:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /*r->next = NULL;*/
 304:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 305:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     break;
 236              	 .loc 1 305 0
 237 0146 4AE0     	 b .L19
 238              	.L11:
 306:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   case PBUF_RAM:
 307:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* If pbuf is to be allocated in RAM, allocate memory for it. */
 308:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_
 239              	 .loc 1 308 0
 240 0148 FB8A     	 ldrh r3,[r7,#22]
 241 014a 1333     	 adds r3,r3,#19
 242 014c 9BB2     	 uxth r3,r3
 243 014e 23F00303 	 bic r3,r3,#3
 244 0152 9AB2     	 uxth r2,r3
 245 0154 BB88     	 ldrh r3,[r7,#4]
 246 0156 0333     	 adds r3,r3,#3
 247 0158 9BB2     	 uxth r3,r3
 248 015a 23F00303 	 bic r3,r3,#3
 249 015e 9BB2     	 uxth r3,r3
 250 0160 1344     	 add r3,r3,r2
 251 0162 9BB2     	 uxth r3,r3
 252 0164 1846     	 mov r0,r3
 253 0166 FFF7FEFF 	 bl mem_malloc
 254 016a F861     	 str r0,[r7,#28]
 309:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if (p == NULL) {
 255              	 .loc 1 309 0
 256 016c FB69     	 ldr r3,[r7,#28]
 257 016e 002B     	 cmp r3,#0
 258 0170 01D1     	 bne .L20
 310:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       return NULL;
 259              	 .loc 1 310 0
 260 0172 0023     	 movs r3,#0
 261 0174 3AE0     	 b .L9
 262              	.L20:
 311:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 312:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* Set up internal structure of the pbuf. */
 313:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 263              	 .loc 1 313 0
 264 0176 FB8A     	 ldrh r3,[r7,#22]
 265 0178 1033     	 adds r3,r3,#16
 266 017a FA69     	 ldr r2,[r7,#28]
 267 017c 1344     	 add r3,r3,r2
 268 017e 0333     	 adds r3,r3,#3
 269 0180 23F00303 	 bic r3,r3,#3
 270 0184 1A46     	 mov r2,r3
 271 0186 FB69     	 ldr r3,[r7,#28]
 272 0188 5A60     	 str r2,[r3,#4]
 314:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p->len = p->tot_len = length;
 273              	 .loc 1 314 0
 274 018a FB69     	 ldr r3,[r7,#28]
 275 018c BA88     	 ldrh r2,[r7,#4]
 276 018e 1A81     	 strh r2,[r3,#8]
 277 0190 FB69     	 ldr r3,[r7,#28]
 278 0192 1A89     	 ldrh r2,[r3,#8]
 279 0194 FB69     	 ldr r3,[r7,#28]
 280 0196 5A81     	 strh r2,[r3,#10]
 315:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p->next = NULL;
 281              	 .loc 1 315 0
 282 0198 FB69     	 ldr r3,[r7,#28]
 283 019a 0022     	 movs r2,#0
 284 019c 1A60     	 str r2,[r3]
 316:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p->type = type;
 285              	 .loc 1 316 0
 286 019e FB69     	 ldr r3,[r7,#28]
 287 01a0 BA79     	 ldrb r2,[r7,#6]
 288 01a2 1A73     	 strb r2,[r3,#12]
 317:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 318:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 319:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
 320:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     break;
 289              	 .loc 1 320 0
 290 01a4 1BE0     	 b .L19
 291              	.L13:
 321:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* pbuf references existing (non-volatile static constant) ROM payload? */
 322:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   case PBUF_ROM:
 323:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* pbuf references existing (externally allocated) RAM payload? */
 324:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   case PBUF_REF:
 325:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* only allocate memory for the pbuf structure */
 326:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 292              	 .loc 1 326 0
 293 01a6 0420     	 movs r0,#4
 294 01a8 FFF7FEFF 	 bl memp_malloc
 295 01ac F861     	 str r0,[r7,#28]
 327:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if (p == NULL) {
 296              	 .loc 1 327 0
 297 01ae FB69     	 ldr r3,[r7,#28]
 298 01b0 002B     	 cmp r3,#0
 299 01b2 01D1     	 bne .L21
 328:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 329:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                   ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
 330:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                   (type == PBUF_ROM) ? "ROM" : "REF"));
 331:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       return NULL;
 300              	 .loc 1 331 0
 301 01b4 0023     	 movs r3,#0
 302 01b6 19E0     	 b .L9
 303              	.L21:
 332:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 333:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* caller must set this field properly, afterwards */
 334:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p->payload = NULL;
 304              	 .loc 1 334 0
 305 01b8 FB69     	 ldr r3,[r7,#28]
 306 01ba 0022     	 movs r2,#0
 307 01bc 5A60     	 str r2,[r3,#4]
 335:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p->len = p->tot_len = length;
 308              	 .loc 1 335 0
 309 01be FB69     	 ldr r3,[r7,#28]
 310 01c0 BA88     	 ldrh r2,[r7,#4]
 311 01c2 1A81     	 strh r2,[r3,#8]
 312 01c4 FB69     	 ldr r3,[r7,#28]
 313 01c6 1A89     	 ldrh r2,[r3,#8]
 314 01c8 FB69     	 ldr r3,[r7,#28]
 315 01ca 5A81     	 strh r2,[r3,#10]
 336:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p->next = NULL;
 316              	 .loc 1 336 0
 317 01cc FB69     	 ldr r3,[r7,#28]
 318 01ce 0022     	 movs r2,#0
 319 01d0 1A60     	 str r2,[r3]
 337:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p->type = type;
 320              	 .loc 1 337 0
 321 01d2 FB69     	 ldr r3,[r7,#28]
 322 01d4 BA79     	 ldrb r2,[r7,#6]
 323 01d6 1A73     	 strb r2,[r3,#12]
 338:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     break;
 324              	 .loc 1 338 0
 325 01d8 01E0     	 b .L19
 326              	.L10:
 339:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   default:
 340:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 341:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return NULL;
 327              	 .loc 1 341 0
 328 01da 0023     	 movs r3,#0
 329 01dc 06E0     	 b .L9
 330              	.L19:
 342:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 343:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* set reference count */
 344:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->ref = 1;
 331              	 .loc 1 344 0
 332 01de FB69     	 ldr r3,[r7,#28]
 333 01e0 0122     	 movs r2,#1
 334 01e2 DA81     	 strh r2,[r3,#14]
 345:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* set flags */
 346:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->flags = 0;
 335              	 .loc 1 346 0
 336 01e4 FB69     	 ldr r3,[r7,#28]
 337 01e6 0022     	 movs r2,#0
 338 01e8 5A73     	 strb r2,[r3,#13]
 347:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)
 348:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return p;
 339              	 .loc 1 348 0
 340 01ea FB69     	 ldr r3,[r7,#28]
 341              	.L9:
 349:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 342              	 .loc 1 349 0
 343 01ec 1846     	 mov r0,r3
 344 01ee 2037     	 adds r7,r7,#32
 345              	.LCFI3:
 346              	 .cfi_def_cfa_offset 8
 347 01f0 BD46     	 mov sp,r7
 348              	.LCFI4:
 349              	 .cfi_def_cfa_register 13
 350              	 
 351 01f2 80BD     	 pop {r7,pc}
 352              	 .cfi_endproc
 353              	.LFE133:
 355              	 .section .text.pbuf_realloc,"ax",%progbits
 356              	 .align 2
 357              	 .global pbuf_realloc
 358              	 .thumb
 359              	 .thumb_func
 361              	pbuf_realloc:
 362              	.LFB134:
 350:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 351:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #if LWIP_SUPPORT_CUSTOM_PBUF
 352:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /** Initialize a custom pbuf (already allocated).
 353:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 354:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param layer flag to define header size
 355:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param length size of the pbuf's payload
 356:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param type type of the pbuf (only used to treat the pbuf accordingly, as
 357:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *        this function allocates no memory)
 358:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p pointer to the custom pbuf to initialize (already allocated)
 359:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param payload_mem pointer to the buffer that is used for payload and headers,
 360:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *        must be at least big enough to hold 'length' plus the header size,
 361:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *        may be NULL if set later.
 362:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *        ATTENTION: The caller is responsible for correct alignment of this buffer!!
 363:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param payload_mem_len the size of the 'payload_mem' buffer, must be at least
 364:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *        big enough to hold 'length' plus the header size
 365:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 366:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** struct pbuf*
 367:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
 368:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                     void *payload_mem, u16_t payload_mem_len)
 369:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 370:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t offset;
 371:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));
 372:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 373:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* determine header offset */
 374:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   switch (l) {
 375:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   case PBUF_TRANSPORT:
 376:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* add room for transport (often TCP) layer header */
 377:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 378:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     break;
 379:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   case PBUF_IP:
 380:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* add room for IP layer header */
 381:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
 382:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     break;
 383:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   case PBUF_LINK:
 384:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* add room for link layer header */
 385:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     offset = PBUF_LINK_HLEN;
 386:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     break;
 387:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   case PBUF_RAW:
 388:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     offset = 0;
 389:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     break;
 390:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   default:
 391:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 392:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return NULL;
 393:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 394:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 395:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 396:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer 
 397:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return NULL;
 398:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 399:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 400:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->pbuf.next = NULL;
 401:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (payload_mem != NULL) {
 402:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 403:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   } else {
 404:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p->pbuf.payload = NULL;
 405:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 406:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 407:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->pbuf.len = p->pbuf.tot_len = length;
 408:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->pbuf.type = type;
 409:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->pbuf.ref = 1;
 410:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return &p->pbuf;
 411:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 412:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #endif /* LWIP_SUPPORT_CUSTOM_PBUF */
 413:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 414:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 415:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Shrink a pbuf chain to a desired length.
 416:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 417:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p pbuf to shrink.
 418:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param new_len desired new length of pbuf chain
 419:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 420:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Depending on the desired length, the first few pbufs in a chain might
 421:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * be skipped and left unchanged. The new last pbuf in the chain will be
 422:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * resized, and any remaining pbufs will be freed.
 423:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 424:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @note If the pbuf is ROM/REF, only the ->tot_len and ->len fields are adjusted.
 425:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @note May not be called on a packet queue.
 426:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 427:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 428:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 429:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** void
 430:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_realloc(struct pbuf *p, u16_t new_len)
 431:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 363              	 .loc 1 431 0
 364              	 .cfi_startproc
 365              	 
 366              	 
 367 0000 80B5     	 push {r7,lr}
 368              	.LCFI5:
 369              	 .cfi_def_cfa_offset 8
 370              	 .cfi_offset 7,-8
 371              	 .cfi_offset 14,-4
 372 0002 86B0     	 sub sp,sp,#24
 373              	.LCFI6:
 374              	 .cfi_def_cfa_offset 32
 375 0004 00AF     	 add r7,sp,#0
 376              	.LCFI7:
 377              	 .cfi_def_cfa_register 7
 378 0006 7860     	 str r0,[r7,#4]
 379 0008 0B46     	 mov r3,r1
 380 000a 7B80     	 strh r3,[r7,#2]
 432:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   struct pbuf *q;
 433:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t rem_len; /* remaining length */
 434:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   s32_t grow;
 435:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 436:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 437:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 438:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****               p->type == PBUF_ROM ||
 439:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****               p->type == PBUF_RAM ||
 440:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****               p->type == PBUF_REF);
 441:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 442:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* desired length larger than current length? */
 443:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (new_len >= p->tot_len) {
 381              	 .loc 1 443 0
 382 000c 7B68     	 ldr r3,[r7,#4]
 383 000e 1B89     	 ldrh r3,[r3,#8]
 384 0010 7A88     	 ldrh r2,[r7,#2]
 385 0012 9A42     	 cmp r2,r3
 386 0014 00D3     	 bcc .L23
 444:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* enlarging not yet supported */
 445:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return;
 387              	 .loc 1 445 0
 388 0016 48E0     	 b .L22
 389              	.L23:
 446:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 447:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 448:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* the pbuf chain grows by (new_len - p->tot_len) bytes
 449:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****    * (which may be negative in case of shrinking) */
 450:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   grow = new_len - p->tot_len;
 390              	 .loc 1 450 0
 391 0018 7B88     	 ldrh r3,[r7,#2]
 392 001a 7A68     	 ldr r2,[r7,#4]
 393 001c 1289     	 ldrh r2,[r2,#8]
 394 001e 9B1A     	 subs r3,r3,r2
 395 0020 FB60     	 str r3,[r7,#12]
 451:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 452:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* first, step over any pbufs that should remain in the chain */
 453:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   rem_len = new_len;
 396              	 .loc 1 453 0
 397 0022 7B88     	 ldrh r3,[r7,#2]
 398 0024 7B82     	 strh r3,[r7,#18]
 454:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   q = p;
 399              	 .loc 1 454 0
 400 0026 7B68     	 ldr r3,[r7,#4]
 401 0028 7B61     	 str r3,[r7,#20]
 455:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* should this pbuf be kept? */
 456:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   while (rem_len > q->len) {
 402              	 .loc 1 456 0
 403 002a 0FE0     	 b .L25
 404              	.L26:
 457:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* decrease remaining length by pbuf length */
 458:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     rem_len -= q->len;
 405              	 .loc 1 458 0
 406 002c 7B69     	 ldr r3,[r7,#20]
 407 002e 5B89     	 ldrh r3,[r3,#10]
 408 0030 7A8A     	 ldrh r2,[r7,#18]
 409 0032 D31A     	 subs r3,r2,r3
 410 0034 7B82     	 strh r3,[r7,#18]
 459:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* decrease total length indicator */
 460:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 461:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     q->tot_len += (u16_t)grow;
 411              	 .loc 1 461 0
 412 0036 7B69     	 ldr r3,[r7,#20]
 413 0038 1A89     	 ldrh r2,[r3,#8]
 414 003a FB68     	 ldr r3,[r7,#12]
 415 003c 9BB2     	 uxth r3,r3
 416 003e 1344     	 add r3,r3,r2
 417 0040 9AB2     	 uxth r2,r3
 418 0042 7B69     	 ldr r3,[r7,#20]
 419 0044 1A81     	 strh r2,[r3,#8]
 462:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* proceed to next pbuf in chain */
 463:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     q = q->next;
 420              	 .loc 1 463 0
 421 0046 7B69     	 ldr r3,[r7,#20]
 422 0048 1B68     	 ldr r3,[r3]
 423 004a 7B61     	 str r3,[r7,#20]
 424              	.L25:
 456:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* decrease remaining length by pbuf length */
 425              	 .loc 1 456 0
 426 004c 7B69     	 ldr r3,[r7,#20]
 427 004e 5B89     	 ldrh r3,[r3,#10]
 428 0050 7A8A     	 ldrh r2,[r7,#18]
 429 0052 9A42     	 cmp r2,r3
 430 0054 EAD8     	 bhi .L26
 464:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 465:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 466:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* we have now reached the new last pbuf (in q) */
 467:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* rem_len == desired length for pbuf q */
 468:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 469:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* shrink allocated memory for PBUF_RAM */
 470:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* (other types merely adjust their length fields */
 471:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if ((q->type == PBUF_RAM) && (rem_len != q->len)) {
 431              	 .loc 1 471 0
 432 0056 7B69     	 ldr r3,[r7,#20]
 433 0058 1B7B     	 ldrb r3,[r3,#12]
 434 005a 002B     	 cmp r3,#0
 435 005c 12D1     	 bne .L27
 436              	 .loc 1 471 0 is_stmt 0 discriminator 1
 437 005e 7B69     	 ldr r3,[r7,#20]
 438 0060 5B89     	 ldrh r3,[r3,#10]
 439 0062 7A8A     	 ldrh r2,[r7,#18]
 440 0064 9A42     	 cmp r2,r3
 441 0066 0DD0     	 beq .L27
 472:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* reallocate and adjust the length of the pbuf that will be split */
 473:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 442              	 .loc 1 473 0 is_stmt 1
 443 0068 7B69     	 ldr r3,[r7,#20]
 444 006a 5B68     	 ldr r3,[r3,#4]
 445 006c 1A46     	 mov r2,r3
 446 006e 7B69     	 ldr r3,[r7,#20]
 447 0070 D31A     	 subs r3,r2,r3
 448 0072 9AB2     	 uxth r2,r3
 449 0074 7B8A     	 ldrh r3,[r7,#18]
 450 0076 1344     	 add r3,r3,r2
 451 0078 9BB2     	 uxth r3,r3
 452 007a 7869     	 ldr r0,[r7,#20]
 453 007c 1946     	 mov r1,r3
 454 007e FFF7FEFF 	 bl mem_trim
 455 0082 7861     	 str r0,[r7,#20]
 456              	.L27:
 474:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 475:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 476:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* adjust length fields for new last pbuf */
 477:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   q->len = rem_len;
 457              	 .loc 1 477 0
 458 0084 7B69     	 ldr r3,[r7,#20]
 459 0086 7A8A     	 ldrh r2,[r7,#18]
 460 0088 5A81     	 strh r2,[r3,#10]
 478:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   q->tot_len = q->len;
 461              	 .loc 1 478 0
 462 008a 7B69     	 ldr r3,[r7,#20]
 463 008c 5A89     	 ldrh r2,[r3,#10]
 464 008e 7B69     	 ldr r3,[r7,#20]
 465 0090 1A81     	 strh r2,[r3,#8]
 479:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 480:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* any remaining pbufs in chain? */
 481:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (q->next != NULL) {
 466              	 .loc 1 481 0
 467 0092 7B69     	 ldr r3,[r7,#20]
 468 0094 1B68     	 ldr r3,[r3]
 469 0096 002B     	 cmp r3,#0
 470 0098 04D0     	 beq .L28
 482:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* free remaining pbufs in chain */
 483:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     pbuf_free(q->next);
 471              	 .loc 1 483 0
 472 009a 7B69     	 ldr r3,[r7,#20]
 473 009c 1B68     	 ldr r3,[r3]
 474 009e 1846     	 mov r0,r3
 475 00a0 FFF7FEFF 	 bl pbuf_free
 476              	.L28:
 484:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 485:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* q is last packet in chain */
 486:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   q->next = NULL;
 477              	 .loc 1 486 0
 478 00a4 7B69     	 ldr r3,[r7,#20]
 479 00a6 0022     	 movs r2,#0
 480 00a8 1A60     	 str r2,[r3]
 481              	.L22:
 487:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 488:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 482              	 .loc 1 488 0
 483 00aa 1837     	 adds r7,r7,#24
 484              	.LCFI8:
 485              	 .cfi_def_cfa_offset 8
 486 00ac BD46     	 mov sp,r7
 487              	.LCFI9:
 488              	 .cfi_def_cfa_register 13
 489              	 
 490 00ae 80BD     	 pop {r7,pc}
 491              	 .cfi_endproc
 492              	.LFE134:
 494              	 .section .text.pbuf_header,"ax",%progbits
 495              	 .align 2
 496              	 .global pbuf_header
 497              	 .thumb
 498              	 .thumb_func
 500              	pbuf_header:
 501              	.LFB135:
 489:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 490:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 491:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Adjusts the payload pointer to hide or reveal headers in the payload.
 492:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 493:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Adjusts the ->payload pointer so that space for a header
 494:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * (dis)appears in the pbuf payload.
 495:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 496:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * The ->payload, ->tot_len and ->len fields are adjusted.
 497:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 498:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p pbuf to change the header size.
 499:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param header_size_increment Number of bytes to increment header size which
 500:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * increases the size of the pbuf. New space is on the front.
 501:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * (Using a negative value decreases the header size.)
 502:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * If hdr_size_inc is 0, this function does nothing and returns succesful.
 503:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 504:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * PBUF_ROM and PBUF_REF type buffers cannot have their sizes increased, so
 505:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * the call will fail. A check is made that the increase in header size does
 506:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * not move the payload pointer in front of the start of the buffer.
 507:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return non-zero on failure, zero on success.
 508:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 509:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 510:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** u8_t
 511:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_header(struct pbuf *p, s16_t header_size_increment)
 512:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 502              	 .loc 1 512 0
 503              	 .cfi_startproc
 504              	 
 505              	 
 506              	 
 507 0000 80B4     	 push {r7}
 508              	.LCFI10:
 509              	 .cfi_def_cfa_offset 4
 510              	 .cfi_offset 7,-4
 511 0002 85B0     	 sub sp,sp,#20
 512              	.LCFI11:
 513              	 .cfi_def_cfa_offset 24
 514 0004 00AF     	 add r7,sp,#0
 515              	.LCFI12:
 516              	 .cfi_def_cfa_register 7
 517 0006 7860     	 str r0,[r7,#4]
 518 0008 0B46     	 mov r3,r1
 519 000a 7B80     	 strh r3,[r7,#2]
 513:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t type;
 514:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   void *payload;
 515:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t increment_magnitude;
 516:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 517:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ASSERT("p != NULL", p != NULL);
 518:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if ((header_size_increment == 0) || (p == NULL)) {
 520              	 .loc 1 518 0
 521 000c B7F90230 	 ldrsh r3,[r7,#2]
 522 0010 002B     	 cmp r3,#0
 523 0012 02D0     	 beq .L30
 524              	 .loc 1 518 0 is_stmt 0 discriminator 1
 525 0014 7B68     	 ldr r3,[r7,#4]
 526 0016 002B     	 cmp r3,#0
 527 0018 01D1     	 bne .L31
 528              	.L30:
 519:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return 0;
 529              	 .loc 1 519 0 is_stmt 1
 530 001a 0023     	 movs r3,#0
 531 001c 5BE0     	 b .L32
 532              	.L31:
 520:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 521:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  
 522:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (header_size_increment < 0){
 533              	 .loc 1 522 0
 534 001e B7F90230 	 ldrsh r3,[r7,#2]
 535 0022 002B     	 cmp r3,#0
 536 0024 0ADA     	 bge .L33
 523:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     increment_magnitude = -header_size_increment;
 537              	 .loc 1 523 0
 538 0026 7B88     	 ldrh r3,[r7,#2]
 539 0028 5B42     	 negs r3,r3
 540 002a FB81     	 strh r3,[r7,#14]
 524:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* Check that we aren't going to move off the end of the pbuf */
 525:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 541              	 .loc 1 525 0
 542 002c 7B68     	 ldr r3,[r7,#4]
 543 002e 5B89     	 ldrh r3,[r3,#10]
 544 0030 FA89     	 ldrh r2,[r7,#14]
 545 0032 9A42     	 cmp r2,r3
 546 0034 04D9     	 bls .L34
 547              	 .loc 1 525 0 is_stmt 0 discriminator 1
 548              	
 549 0036 00BE     	 bkpt 0
 550              	
 551              	 .thumb
 552 0038 0123     	 movs r3,#1
 553 003a 4CE0     	 b .L32
 554              	.L33:
 526:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   } else {
 527:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     increment_magnitude = header_size_increment;
 555              	 .loc 1 527 0 is_stmt 1
 556 003c 7B88     	 ldrh r3,[r7,#2]
 557 003e FB81     	 strh r3,[r7,#14]
 558              	.L34:
 528:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #if 0
 529:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* Can't assert these as some callers speculatively call
 530:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****          pbuf_header() to see if it's OK.  Will return 1 below instead. */
 531:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* Check that we've got the correct type of pbuf to work with */
 532:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("p->type == PBUF_RAM || p->type == PBUF_POOL", 
 533:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                 p->type == PBUF_RAM || p->type == PBUF_POOL);
 534:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* Check that we aren't going to move off the beginning of the pbuf */
 535:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
 536:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                 (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
 537:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #endif
 538:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 539:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 540:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   type = p->type;
 559              	 .loc 1 540 0
 560 0040 7B68     	 ldr r3,[r7,#4]
 561 0042 1B7B     	 ldrb r3,[r3,#12]
 562 0044 BB81     	 strh r3,[r7,#12]
 541:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* remember current payload pointer */
 542:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   payload = p->payload;
 563              	 .loc 1 542 0
 564 0046 7B68     	 ldr r3,[r7,#4]
 565 0048 5B68     	 ldr r3,[r3,#4]
 566 004a BB60     	 str r3,[r7,#8]
 543:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 544:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* pbuf types containing payloads? */
 545:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (type == PBUF_RAM || type == PBUF_POOL) {
 567              	 .loc 1 545 0
 568 004c BB89     	 ldrh r3,[r7,#12]
 569 004e 002B     	 cmp r3,#0
 570 0050 02D0     	 beq .L35
 571              	 .loc 1 545 0 is_stmt 0 discriminator 1
 572 0052 BB89     	 ldrh r3,[r7,#12]
 573 0054 032B     	 cmp r3,#3
 574 0056 13D1     	 bne .L36
 575              	.L35:
 546:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* set new payload pointer */
 547:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p->payload = (u8_t *)p->payload - header_size_increment;
 576              	 .loc 1 547 0 is_stmt 1
 577 0058 7B68     	 ldr r3,[r7,#4]
 578 005a 5A68     	 ldr r2,[r3,#4]
 579 005c B7F90230 	 ldrsh r3,[r7,#2]
 580 0060 5B42     	 negs r3,r3
 581 0062 1A44     	 add r2,r2,r3
 582 0064 7B68     	 ldr r3,[r7,#4]
 583 0066 5A60     	 str r2,[r3,#4]
 548:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* boundary check fails? */
 549:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 584              	 .loc 1 549 0
 585 0068 7B68     	 ldr r3,[r7,#4]
 586 006a 5A68     	 ldr r2,[r3,#4]
 587 006c 7B68     	 ldr r3,[r7,#4]
 588 006e 1033     	 adds r3,r3,#16
 589 0070 9A42     	 cmp r2,r3
 590 0072 04D2     	 bcs .L37
 550:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 551:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
 552:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         (void *)p->payload, (void *)(p + 1)));
 553:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* restore old payload pointer */
 554:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       p->payload = payload;
 591              	 .loc 1 554 0
 592 0074 7B68     	 ldr r3,[r7,#4]
 593 0076 BA68     	 ldr r2,[r7,#8]
 594 0078 5A60     	 str r2,[r3,#4]
 555:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* bail out unsuccesfully */
 556:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       return 1;
 595              	 .loc 1 556 0
 596 007a 0123     	 movs r3,#1
 597 007c 2BE0     	 b .L32
 598              	.L37:
 549:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 599              	 .loc 1 549 0
 600 007e 1BE0     	 b .L38
 601              	.L36:
 557:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 558:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* pbuf types refering to external payloads? */
 559:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   } else if (type == PBUF_REF || type == PBUF_ROM) {
 602              	 .loc 1 559 0
 603 0080 BB89     	 ldrh r3,[r7,#12]
 604 0082 022B     	 cmp r3,#2
 605 0084 02D0     	 beq .L39
 606              	 .loc 1 559 0 is_stmt 0 discriminator 1
 607 0086 BB89     	 ldrh r3,[r7,#12]
 608 0088 012B     	 cmp r3,#1
 609 008a 13D1     	 bne .L40
 610              	.L39:
 560:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* hide a header in the payload? */
 561:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 611              	 .loc 1 561 0 is_stmt 1
 612 008c B7F90230 	 ldrsh r3,[r7,#2]
 613 0090 002B     	 cmp r3,#0
 614 0092 0DDA     	 bge .L41
 615              	 .loc 1 561 0 is_stmt 0 discriminator 1
 616 0094 7B68     	 ldr r3,[r7,#4]
 617 0096 5B89     	 ldrh r3,[r3,#10]
 618 0098 FA89     	 ldrh r2,[r7,#14]
 619 009a 9A42     	 cmp r2,r3
 620 009c 08D8     	 bhi .L41
 562:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* increase payload pointer */
 563:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       p->payload = (u8_t *)p->payload - header_size_increment;
 621              	 .loc 1 563 0 is_stmt 1
 622 009e 7B68     	 ldr r3,[r7,#4]
 623 00a0 5A68     	 ldr r2,[r3,#4]
 624 00a2 B7F90230 	 ldrsh r3,[r7,#2]
 625 00a6 5B42     	 negs r3,r3
 626 00a8 1A44     	 add r2,r2,r3
 627 00aa 7B68     	 ldr r3,[r7,#4]
 628 00ac 5A60     	 str r2,[r3,#4]
 561:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* increase payload pointer */
 629              	 .loc 1 561 0
 630 00ae 03E0     	 b .L38
 631              	.L41:
 564:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     } else {
 565:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* cannot expand payload to front (yet!)
 566:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****        * bail out unsuccesfully */
 567:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       return 1;
 632              	 .loc 1 567 0
 633 00b0 0123     	 movs r3,#1
 634 00b2 10E0     	 b .L32
 635              	.L40:
 568:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 569:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   } else {
 570:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* Unknown type */
 571:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("bad pbuf type", 0);
 572:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return 1;
 636              	 .loc 1 572 0
 637 00b4 0123     	 movs r3,#1
 638 00b6 0EE0     	 b .L32
 639              	.L38:
 573:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 574:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* modify pbuf length fields */
 575:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->len += header_size_increment;
 640              	 .loc 1 575 0
 641 00b8 7B68     	 ldr r3,[r7,#4]
 642 00ba 5A89     	 ldrh r2,[r3,#10]
 643 00bc 7B88     	 ldrh r3,[r7,#2]
 644 00be 1344     	 add r3,r3,r2
 645 00c0 9AB2     	 uxth r2,r3
 646 00c2 7B68     	 ldr r3,[r7,#4]
 647 00c4 5A81     	 strh r2,[r3,#10]
 576:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->tot_len += header_size_increment;
 648              	 .loc 1 576 0
 649 00c6 7B68     	 ldr r3,[r7,#4]
 650 00c8 1A89     	 ldrh r2,[r3,#8]
 651 00ca 7B88     	 ldrh r3,[r7,#2]
 652 00cc 1344     	 add r3,r3,r2
 653 00ce 9AB2     	 uxth r2,r3
 654 00d0 7B68     	 ldr r3,[r7,#4]
 655 00d2 1A81     	 strh r2,[r3,#8]
 577:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 578:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
 579:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     (void *)payload, (void *)p->payload, header_size_increment));
 580:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 581:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return 0;
 656              	 .loc 1 581 0
 657 00d4 0023     	 movs r3,#0
 658              	.L32:
 582:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 659              	 .loc 1 582 0
 660 00d6 1846     	 mov r0,r3
 661 00d8 1437     	 adds r7,r7,#20
 662              	.LCFI13:
 663              	 .cfi_def_cfa_offset 4
 664 00da BD46     	 mov sp,r7
 665              	.LCFI14:
 666              	 .cfi_def_cfa_register 13
 667              	 
 668 00dc 5DF8047B 	 ldr r7,[sp],#4
 669              	.LCFI15:
 670              	 .cfi_restore 7
 671              	 .cfi_def_cfa_offset 0
 672 00e0 7047     	 bx lr
 673              	 .cfi_endproc
 674              	.LFE135:
 676 00e2 00BF     	 .section .text.pbuf_free,"ax",%progbits
 677              	 .align 2
 678              	 .global pbuf_free
 679              	 .thumb
 680              	 .thumb_func
 682              	pbuf_free:
 683              	.LFB136:
 583:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 584:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 585:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Dereference a pbuf chain or queue and deallocate any no-longer-used
 586:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * pbufs at the head of this chain or queue.
 587:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 588:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Decrements the pbuf reference count. If it reaches zero, the pbuf is
 589:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * deallocated.
 590:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 591:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * For a pbuf chain, this is repeated for each pbuf in the chain,
 592:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * up to the first pbuf which has a non-zero reference count after
 593:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * decrementing. So, when all reference counts are one, the whole
 594:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * chain is free'd.
 595:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 596:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p The pbuf (chain) to be dereferenced.
 597:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 598:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return the number of pbufs that were de-allocated
 599:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * from the head of the chain.
 600:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 601:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @note MUST NOT be called on a packet queue (Not verified to work yet).
 602:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @note the reference counter of a pbuf equals the number of pointers
 603:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * that refer to the pbuf (or into the pbuf).
 604:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 605:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @internal examples:
 606:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 607:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Assuming existing chains a->b->c with the following reference
 608:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * counts, calling pbuf_free(a) results in:
 609:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * 
 610:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * 1->2->3 becomes ...1->3
 611:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * 3->3->3 becomes 2->3->3
 612:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * 1->1->2 becomes ......1
 613:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * 2->1->1 becomes 1->1->1
 614:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * 1->1->1 becomes .......
 615:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 616:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 617:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** u8_t
 618:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_free(struct pbuf *p)
 619:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 684              	 .loc 1 619 0
 685              	 .cfi_startproc
 686              	 
 687              	 
 688 0000 80B5     	 push {r7,lr}
 689              	.LCFI16:
 690              	 .cfi_def_cfa_offset 8
 691              	 .cfi_offset 7,-8
 692              	 .cfi_offset 14,-4
 693 0002 86B0     	 sub sp,sp,#24
 694              	.LCFI17:
 695              	 .cfi_def_cfa_offset 32
 696 0004 00AF     	 add r7,sp,#0
 697              	.LCFI18:
 698              	 .cfi_def_cfa_register 7
 699 0006 7860     	 str r0,[r7,#4]
 620:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t type;
 621:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   struct pbuf *q;
 622:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u8_t count;
 623:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 624:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (p == NULL) {
 700              	 .loc 1 624 0
 701 0008 7B68     	 ldr r3,[r7,#4]
 702 000a 002B     	 cmp r3,#0
 703 000c 01D1     	 bne .L43
 625:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("p != NULL", p != NULL);
 626:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* if assertions are disabled, proceed with debug output */
 627:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 628:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       ("pbuf_free(p == NULL) was called.\n"));
 629:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return 0;
 704              	 .loc 1 629 0
 705 000e 0023     	 movs r3,#0
 706 0010 36E0     	 b .L44
 707              	.L43:
 630:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 631:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));
 632:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 633:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   PERF_START;
 634:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 635:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ASSERT("pbuf_free: sane type",
 636:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p->type == PBUF_RAM || p->type == PBUF_ROM ||
 637:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p->type == PBUF_REF || p->type == PBUF_POOL);
 638:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 639:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   count = 0;
 708              	 .loc 1 639 0
 709 0012 0023     	 movs r3,#0
 710 0014 FB75     	 strb r3,[r7,#23]
 640:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* de-allocate all consecutive pbufs from the head of the chain that
 641:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****    * obtain a zero reference count after decrementing*/
 642:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   while (p != NULL) {
 711              	 .loc 1 642 0
 712 0016 2FE0     	 b .L45
 713              	.L51:
 714              	.LBB2:
 643:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     u16_t ref;
 644:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     SYS_ARCH_DECL_PROTECT(old_level);
 645:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* Since decrementing ref cannot be guaranteed to be a single machine operation
 646:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****      * we must protect it. We put the new ref into a local variable to prevent
 647:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****      * further protection. */
 648:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     SYS_ARCH_PROTECT(old_level);
 649:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* all pbufs in a chain are referenced at least once */
 650:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 651:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* decrease reference count (number of pointers to pbuf) */
 652:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     ref = --(p->ref);
 715              	 .loc 1 652 0
 716 0018 7B68     	 ldr r3,[r7,#4]
 717 001a DB89     	 ldrh r3,[r3,#14]
 718 001c 013B     	 subs r3,r3,#1
 719 001e 9AB2     	 uxth r2,r3
 720 0020 7B68     	 ldr r3,[r7,#4]
 721 0022 DA81     	 strh r2,[r3,#14]
 722 0024 7B68     	 ldr r3,[r7,#4]
 723 0026 DB89     	 ldrh r3,[r3,#14]
 724 0028 BB82     	 strh r3,[r7,#20]
 653:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     SYS_ARCH_UNPROTECT(old_level);
 654:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* this pbuf is no longer referenced to? */
 655:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if (ref == 0) {
 725              	 .loc 1 655 0
 726 002a BB8A     	 ldrh r3,[r7,#20]
 727 002c 002B     	 cmp r3,#0
 728 002e 21D1     	 bne .L46
 656:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* remember next pbuf in chain for next iteration */
 657:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       q = p->next;
 729              	 .loc 1 657 0
 730 0030 7B68     	 ldr r3,[r7,#4]
 731 0032 1B68     	 ldr r3,[r3]
 732 0034 3B61     	 str r3,[r7,#16]
 658:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
 659:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       type = p->type;
 733              	 .loc 1 659 0
 734 0036 7B68     	 ldr r3,[r7,#4]
 735 0038 1B7B     	 ldrb r3,[r3,#12]
 736 003a FB81     	 strh r3,[r7,#14]
 660:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #if LWIP_SUPPORT_CUSTOM_PBUF
 661:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* is this a custom pbuf? */
 662:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 663:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         struct pbuf_custom *pc = (struct pbuf_custom*)p;
 664:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 665:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         pc->custom_free_function(p);
 666:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       } else
 667:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #endif /* LWIP_SUPPORT_CUSTOM_PBUF */
 668:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       {
 669:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         /* is this a pbuf from the pool? */
 670:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         if (type == PBUF_POOL) {
 737              	 .loc 1 670 0
 738 003c FB89     	 ldrh r3,[r7,#14]
 739 003e 032B     	 cmp r3,#3
 740 0040 04D1     	 bne .L47
 671:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****           memp_free(MEMP_PBUF_POOL, p);
 741              	 .loc 1 671 0
 742 0042 0520     	 movs r0,#5
 743 0044 7968     	 ldr r1,[r7,#4]
 744 0046 FFF7FEFF 	 bl memp_free
 745 004a 0DE0     	 b .L48
 746              	.L47:
 672:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         /* is this a ROM or RAM referencing pbuf? */
 673:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         } else if (type == PBUF_ROM || type == PBUF_REF) {
 747              	 .loc 1 673 0
 748 004c FB89     	 ldrh r3,[r7,#14]
 749 004e 012B     	 cmp r3,#1
 750 0050 02D0     	 beq .L49
 751              	 .loc 1 673 0 is_stmt 0 discriminator 1
 752 0052 FB89     	 ldrh r3,[r7,#14]
 753 0054 022B     	 cmp r3,#2
 754 0056 04D1     	 bne .L50
 755              	.L49:
 674:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****           memp_free(MEMP_PBUF, p);
 756              	 .loc 1 674 0 is_stmt 1
 757 0058 0420     	 movs r0,#4
 758 005a 7968     	 ldr r1,[r7,#4]
 759 005c FFF7FEFF 	 bl memp_free
 760 0060 02E0     	 b .L48
 761              	.L50:
 675:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         /* type == PBUF_RAM */
 676:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         } else {
 677:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****           mem_free(p);
 762              	 .loc 1 677 0
 763 0062 7868     	 ldr r0,[r7,#4]
 764 0064 FFF7FEFF 	 bl mem_free
 765              	.L48:
 678:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         }
 679:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       }
 680:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       count++;
 766              	 .loc 1 680 0
 767 0068 FB7D     	 ldrb r3,[r7,#23]
 768 006a 0133     	 adds r3,r3,#1
 769 006c FB75     	 strb r3,[r7,#23]
 681:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* proceed to next pbuf */
 682:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       p = q;
 770              	 .loc 1 682 0
 771 006e 3B69     	 ldr r3,[r7,#16]
 772 0070 7B60     	 str r3,[r7,#4]
 773 0072 01E0     	 b .L45
 774              	.L46:
 683:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* p->ref > 0, this pbuf is still referenced to */
 684:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* (and so the remaining pbufs in chain as well) */
 685:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     } else {
 686:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", 
 687:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* stop walking through the chain */
 688:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       p = NULL;
 775              	 .loc 1 688 0
 776 0074 0023     	 movs r3,#0
 777 0076 7B60     	 str r3,[r7,#4]
 778              	.L45:
 779              	.LBE2:
 642:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     u16_t ref;
 780              	 .loc 1 642 0
 781 0078 7B68     	 ldr r3,[r7,#4]
 782 007a 002B     	 cmp r3,#0
 783 007c CCD1     	 bne .L51
 689:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 690:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 691:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   PERF_STOP("pbuf_free");
 692:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* return number of de-allocated pbufs */
 693:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return count;
 784              	 .loc 1 693 0
 785 007e FB7D     	 ldrb r3,[r7,#23]
 786              	.L44:
 694:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 787              	 .loc 1 694 0
 788 0080 1846     	 mov r0,r3
 789 0082 1837     	 adds r7,r7,#24
 790              	.LCFI19:
 791              	 .cfi_def_cfa_offset 8
 792 0084 BD46     	 mov sp,r7
 793              	.LCFI20:
 794              	 .cfi_def_cfa_register 13
 795              	 
 796 0086 80BD     	 pop {r7,pc}
 797              	 .cfi_endproc
 798              	.LFE136:
 800              	 .section .text.pbuf_clen,"ax",%progbits
 801              	 .align 2
 802              	 .global pbuf_clen
 803              	 .thumb
 804              	 .thumb_func
 806              	pbuf_clen:
 807              	.LFB137:
 695:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 696:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 697:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Count number of pbufs in a chain
 698:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 699:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p first pbuf of chain
 700:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return the number of pbufs in a chain
 701:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 702:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 703:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** u8_t
 704:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_clen(struct pbuf *p)
 705:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 808              	 .loc 1 705 0
 809              	 .cfi_startproc
 810              	 
 811              	 
 812              	 
 813 0000 80B4     	 push {r7}
 814              	.LCFI21:
 815              	 .cfi_def_cfa_offset 4
 816              	 .cfi_offset 7,-4
 817 0002 85B0     	 sub sp,sp,#20
 818              	.LCFI22:
 819              	 .cfi_def_cfa_offset 24
 820 0004 00AF     	 add r7,sp,#0
 821              	.LCFI23:
 822              	 .cfi_def_cfa_register 7
 823 0006 7860     	 str r0,[r7,#4]
 706:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u8_t len;
 707:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 708:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   len = 0;
 824              	 .loc 1 708 0
 825 0008 0023     	 movs r3,#0
 826 000a FB73     	 strb r3,[r7,#15]
 709:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   while (p != NULL) {
 827              	 .loc 1 709 0
 828 000c 05E0     	 b .L53
 829              	.L54:
 710:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     ++len;
 830              	 .loc 1 710 0
 831 000e FB7B     	 ldrb r3,[r7,#15]
 832 0010 0133     	 adds r3,r3,#1
 833 0012 FB73     	 strb r3,[r7,#15]
 711:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p = p->next;
 834              	 .loc 1 711 0
 835 0014 7B68     	 ldr r3,[r7,#4]
 836 0016 1B68     	 ldr r3,[r3]
 837 0018 7B60     	 str r3,[r7,#4]
 838              	.L53:
 709:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   while (p != NULL) {
 839              	 .loc 1 709 0
 840 001a 7B68     	 ldr r3,[r7,#4]
 841 001c 002B     	 cmp r3,#0
 842 001e F6D1     	 bne .L54
 712:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 713:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return len;
 843              	 .loc 1 713 0
 844 0020 FB7B     	 ldrb r3,[r7,#15]
 714:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 845              	 .loc 1 714 0
 846 0022 1846     	 mov r0,r3
 847 0024 1437     	 adds r7,r7,#20
 848              	.LCFI24:
 849              	 .cfi_def_cfa_offset 4
 850 0026 BD46     	 mov sp,r7
 851              	.LCFI25:
 852              	 .cfi_def_cfa_register 13
 853              	 
 854 0028 5DF8047B 	 ldr r7,[sp],#4
 855              	.LCFI26:
 856              	 .cfi_restore 7
 857              	 .cfi_def_cfa_offset 0
 858 002c 7047     	 bx lr
 859              	 .cfi_endproc
 860              	.LFE137:
 862 002e 00BF     	 .section .text.pbuf_ref,"ax",%progbits
 863              	 .align 2
 864              	 .global pbuf_ref
 865              	 .thumb
 866              	 .thumb_func
 868              	pbuf_ref:
 869              	.LFB138:
 715:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 716:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 717:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Increment the reference count of the pbuf.
 718:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 719:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p pbuf to increase reference counter of
 720:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 721:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 722:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** void
 723:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_ref(struct pbuf *p)
 724:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 870              	 .loc 1 724 0
 871              	 .cfi_startproc
 872              	 
 873              	 
 874              	 
 875 0000 80B4     	 push {r7}
 876              	.LCFI27:
 877              	 .cfi_def_cfa_offset 4
 878              	 .cfi_offset 7,-4
 879 0002 83B0     	 sub sp,sp,#12
 880              	.LCFI28:
 881              	 .cfi_def_cfa_offset 16
 882 0004 00AF     	 add r7,sp,#0
 883              	.LCFI29:
 884              	 .cfi_def_cfa_register 7
 885 0006 7860     	 str r0,[r7,#4]
 725:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   SYS_ARCH_DECL_PROTECT(old_level);
 726:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* pbuf given? */
 727:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (p != NULL) {
 886              	 .loc 1 727 0
 887 0008 7B68     	 ldr r3,[r7,#4]
 888 000a 002B     	 cmp r3,#0
 889 000c 05D0     	 beq .L56
 728:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     SYS_ARCH_PROTECT(old_level);
 729:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     ++(p->ref);
 890              	 .loc 1 729 0
 891 000e 7B68     	 ldr r3,[r7,#4]
 892 0010 DB89     	 ldrh r3,[r3,#14]
 893 0012 0133     	 adds r3,r3,#1
 894 0014 9AB2     	 uxth r2,r3
 895 0016 7B68     	 ldr r3,[r7,#4]
 896 0018 DA81     	 strh r2,[r3,#14]
 897              	.L56:
 730:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     SYS_ARCH_UNPROTECT(old_level);
 731:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 732:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 898              	 .loc 1 732 0
 899 001a 0C37     	 adds r7,r7,#12
 900              	.LCFI30:
 901              	 .cfi_def_cfa_offset 4
 902 001c BD46     	 mov sp,r7
 903              	.LCFI31:
 904              	 .cfi_def_cfa_register 13
 905              	 
 906 001e 5DF8047B 	 ldr r7,[sp],#4
 907              	.LCFI32:
 908              	 .cfi_restore 7
 909              	 .cfi_def_cfa_offset 0
 910 0022 7047     	 bx lr
 911              	 .cfi_endproc
 912              	.LFE138:
 914              	 .section .text.pbuf_cat,"ax",%progbits
 915              	 .align 2
 916              	 .global pbuf_cat
 917              	 .thumb
 918              	 .thumb_func
 920              	pbuf_cat:
 921              	.LFB139:
 733:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 734:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 735:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Concatenate two pbufs (each may be a pbuf chain) and take over
 736:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * the caller's reference of the tail pbuf.
 737:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * 
 738:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @note The caller MAY NOT reference the tail pbuf afterwards.
 739:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Use pbuf_chain() for that purpose.
 740:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * 
 741:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @see pbuf_chain()
 742:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 743:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 744:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** void
 745:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_cat(struct pbuf *h, struct pbuf *t)
 746:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 922              	 .loc 1 746 0
 923              	 .cfi_startproc
 924              	 
 925              	 
 926              	 
 927 0000 80B4     	 push {r7}
 928              	.LCFI33:
 929              	 .cfi_def_cfa_offset 4
 930              	 .cfi_offset 7,-4
 931 0002 85B0     	 sub sp,sp,#20
 932              	.LCFI34:
 933              	 .cfi_def_cfa_offset 24
 934 0004 00AF     	 add r7,sp,#0
 935              	.LCFI35:
 936              	 .cfi_def_cfa_register 7
 937 0006 7860     	 str r0,[r7,#4]
 938 0008 3960     	 str r1,[r7]
 747:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   struct pbuf *p;
 748:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 749:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 939              	 .loc 1 749 0
 940 000a 7B68     	 ldr r3,[r7,#4]
 941 000c 002B     	 cmp r3,#0
 942 000e 02D0     	 beq .L59
 943              	 .loc 1 749 0 is_stmt 0 discriminator 2
 944 0010 3B68     	 ldr r3,[r7]
 945 0012 002B     	 cmp r3,#0
 946 0014 01D1     	 bne .L60
 947              	.L59:
 948              	 .loc 1 749 0 discriminator 3
 949              	
 950 0016 00BE     	 bkpt 0
 951              	
 952              	 .thumb
 953 0018 1CE0     	 b .L58
 954              	.L60:
 750:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****              ((h != NULL) && (t != NULL)), return;);
 751:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 752:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* proceed to last pbuf of chain */
 753:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   for (p = h; p->next != NULL; p = p->next) {
 955              	 .loc 1 753 0 is_stmt 1
 956 001a 7B68     	 ldr r3,[r7,#4]
 957 001c FB60     	 str r3,[r7,#12]
 958 001e 0AE0     	 b .L62
 959              	.L63:
 754:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* add total length of second chain to all totals of first chain */
 755:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p->tot_len += t->tot_len;
 960              	 .loc 1 755 0 discriminator 3
 961 0020 FB68     	 ldr r3,[r7,#12]
 962 0022 1A89     	 ldrh r2,[r3,#8]
 963 0024 3B68     	 ldr r3,[r7]
 964 0026 1B89     	 ldrh r3,[r3,#8]
 965 0028 1344     	 add r3,r3,r2
 966 002a 9AB2     	 uxth r2,r3
 967 002c FB68     	 ldr r3,[r7,#12]
 968 002e 1A81     	 strh r2,[r3,#8]
 753:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* add total length of second chain to all totals of first chain */
 969              	 .loc 1 753 0 discriminator 3
 970 0030 FB68     	 ldr r3,[r7,#12]
 971 0032 1B68     	 ldr r3,[r3]
 972 0034 FB60     	 str r3,[r7,#12]
 973              	.L62:
 753:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* add total length of second chain to all totals of first chain */
 974              	 .loc 1 753 0 is_stmt 0 discriminator 1
 975 0036 FB68     	 ldr r3,[r7,#12]
 976 0038 1B68     	 ldr r3,[r3]
 977 003a 002B     	 cmp r3,#0
 978 003c F0D1     	 bne .L63
 756:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 757:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* { p is last pbuf of first h chain, p->next == NULL } */
 758:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 759:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ASSERT("p->next == NULL", p->next == NULL);
 760:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* add total length of second chain to last pbuf total of first chain */
 761:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->tot_len += t->tot_len;
 979              	 .loc 1 761 0 is_stmt 1
 980 003e FB68     	 ldr r3,[r7,#12]
 981 0040 1A89     	 ldrh r2,[r3,#8]
 982 0042 3B68     	 ldr r3,[r7]
 983 0044 1B89     	 ldrh r3,[r3,#8]
 984 0046 1344     	 add r3,r3,r2
 985 0048 9AB2     	 uxth r2,r3
 986 004a FB68     	 ldr r3,[r7,#12]
 987 004c 1A81     	 strh r2,[r3,#8]
 762:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* chain last pbuf of head (p) with first of tail (t) */
 763:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   p->next = t;
 988              	 .loc 1 763 0
 989 004e FB68     	 ldr r3,[r7,#12]
 990 0050 3A68     	 ldr r2,[r7]
 991 0052 1A60     	 str r2,[r3]
 992              	.L58:
 764:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* p->next now references t, but the caller will drop its reference to t,
 765:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****    * so netto there is no change to the reference count of t.
 766:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****    */
 767:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 993              	 .loc 1 767 0
 994 0054 1437     	 adds r7,r7,#20
 995              	.LCFI36:
 996              	 .cfi_def_cfa_offset 4
 997 0056 BD46     	 mov sp,r7
 998              	.LCFI37:
 999              	 .cfi_def_cfa_register 13
 1000              	 
 1001 0058 5DF8047B 	 ldr r7,[sp],#4
 1002              	.LCFI38:
 1003              	 .cfi_restore 7
 1004              	 .cfi_def_cfa_offset 0
 1005 005c 7047     	 bx lr
 1006              	 .cfi_endproc
 1007              	.LFE139:
 1009 005e 00BF     	 .section .text.pbuf_chain,"ax",%progbits
 1010              	 .align 2
 1011              	 .global pbuf_chain
 1012              	 .thumb
 1013              	 .thumb_func
 1015              	pbuf_chain:
 1016              	.LFB140:
 768:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 769:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 770:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Chain two pbufs (or pbuf chains) together.
 771:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * 
 772:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * The caller MUST call pbuf_free(t) once it has stopped
 773:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * using it. Use pbuf_cat() instead if you no longer use t.
 774:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * 
 775:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param h head pbuf (chain)
 776:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param t tail pbuf (chain)
 777:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @note The pbufs MUST belong to the same packet.
 778:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @note MAY NOT be called on a packet queue.
 779:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 780:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * The ->tot_len fields of all pbufs of the head chain are adjusted.
 781:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * The ->next field of the last pbuf of the head chain is adjusted.
 782:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * The ->ref field of the first pbuf of the tail chain is adjusted.
 783:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 784:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 785:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** void
 786:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_chain(struct pbuf *h, struct pbuf *t)
 787:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 1017              	 .loc 1 787 0
 1018              	 .cfi_startproc
 1019              	 
 1020              	 
 1021 0000 80B5     	 push {r7,lr}
 1022              	.LCFI39:
 1023              	 .cfi_def_cfa_offset 8
 1024              	 .cfi_offset 7,-8
 1025              	 .cfi_offset 14,-4
 1026 0002 82B0     	 sub sp,sp,#8
 1027              	.LCFI40:
 1028              	 .cfi_def_cfa_offset 16
 1029 0004 00AF     	 add r7,sp,#0
 1030              	.LCFI41:
 1031              	 .cfi_def_cfa_register 7
 1032 0006 7860     	 str r0,[r7,#4]
 1033 0008 3960     	 str r1,[r7]
 788:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   pbuf_cat(h, t);
 1034              	 .loc 1 788 0
 1035 000a 7868     	 ldr r0,[r7,#4]
 1036 000c 3968     	 ldr r1,[r7]
 1037 000e FFF7FEFF 	 bl pbuf_cat
 789:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* t is now referenced by h */
 790:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   pbuf_ref(t);
 1038              	 .loc 1 790 0
 1039 0012 3868     	 ldr r0,[r7]
 1040 0014 FFF7FEFF 	 bl pbuf_ref
 791:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t)
 792:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 1041              	 .loc 1 792 0
 1042 0018 0837     	 adds r7,r7,#8
 1043              	.LCFI42:
 1044              	 .cfi_def_cfa_offset 8
 1045 001a BD46     	 mov sp,r7
 1046              	.LCFI43:
 1047              	 .cfi_def_cfa_register 13
 1048              	 
 1049 001c 80BD     	 pop {r7,pc}
 1050              	 .cfi_endproc
 1051              	.LFE140:
 1053 001e 00BF     	 .section .text.pbuf_dechain,"ax",%progbits
 1054              	 .align 2
 1055              	 .global pbuf_dechain
 1056              	 .thumb
 1057              	 .thumb_func
 1059              	pbuf_dechain:
 1060              	.LFB141:
 793:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 794:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 795:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Dechains the first pbuf from its succeeding pbufs in the chain.
 796:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 797:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Makes p->tot_len field equal to p->len.
 798:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p pbuf to dechain
 799:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return remainder of the pbuf chain, or NULL if it was de-allocated.
 800:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @note May not be called on a packet queue.
 801:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 802:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** struct pbuf *
 803:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_dechain(struct pbuf *p)
 804:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 1061              	 .loc 1 804 0
 1062              	 .cfi_startproc
 1063              	 
 1064              	 
 1065 0000 80B5     	 push {r7,lr}
 1066              	.LCFI44:
 1067              	 .cfi_def_cfa_offset 8
 1068              	 .cfi_offset 7,-8
 1069              	 .cfi_offset 14,-4
 1070 0002 84B0     	 sub sp,sp,#16
 1071              	.LCFI45:
 1072              	 .cfi_def_cfa_offset 24
 1073 0004 00AF     	 add r7,sp,#0
 1074              	.LCFI46:
 1075              	 .cfi_def_cfa_register 7
 1076 0006 7860     	 str r0,[r7,#4]
 805:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   struct pbuf *q;
 806:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u8_t tail_gone = 1;
 1077              	 .loc 1 806 0
 1078 0008 0123     	 movs r3,#1
 1079 000a FB73     	 strb r3,[r7,#15]
 807:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* tail */
 808:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   q = p->next;
 1080              	 .loc 1 808 0
 1081 000c 7B68     	 ldr r3,[r7,#4]
 1082 000e 1B68     	 ldr r3,[r3]
 1083 0010 BB60     	 str r3,[r7,#8]
 809:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* pbuf has successor in chain? */
 810:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (q != NULL) {
 1084              	 .loc 1 810 0
 1085 0012 BB68     	 ldr r3,[r7,#8]
 1086 0014 002B     	 cmp r3,#0
 1087 0016 13D0     	 beq .L66
 811:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
 812:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("p->tot_len == p->len + q->tot_len", q->tot_len == p->tot_len - p->len);
 813:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* enforce invariant if assertion is disabled */
 814:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     q->tot_len = p->tot_len - p->len;
 1088              	 .loc 1 814 0
 1089 0018 7B68     	 ldr r3,[r7,#4]
 1090 001a 1A89     	 ldrh r2,[r3,#8]
 1091 001c 7B68     	 ldr r3,[r7,#4]
 1092 001e 5B89     	 ldrh r3,[r3,#10]
 1093 0020 D31A     	 subs r3,r2,r3
 1094 0022 9AB2     	 uxth r2,r3
 1095 0024 BB68     	 ldr r3,[r7,#8]
 1096 0026 1A81     	 strh r2,[r3,#8]
 815:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* decouple pbuf from remainder */
 816:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p->next = NULL;
 1097              	 .loc 1 816 0
 1098 0028 7B68     	 ldr r3,[r7,#4]
 1099 002a 0022     	 movs r2,#0
 1100 002c 1A60     	 str r2,[r3]
 817:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* total length of pbuf p is its own length only */
 818:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     p->tot_len = p->len;
 1101              	 .loc 1 818 0
 1102 002e 7B68     	 ldr r3,[r7,#4]
 1103 0030 5A89     	 ldrh r2,[r3,#10]
 1104 0032 7B68     	 ldr r3,[r7,#4]
 1105 0034 1A81     	 strh r2,[r3,#8]
 819:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* q is no longer referenced by p, free it */
 820:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_dechain: unreferencing %p\n", (void *)q));
 821:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     tail_gone = pbuf_free(q);
 1106              	 .loc 1 821 0
 1107 0036 B868     	 ldr r0,[r7,#8]
 1108 0038 FFF7FEFF 	 bl pbuf_free
 1109 003c 0346     	 mov r3,r0
 1110 003e FB73     	 strb r3,[r7,#15]
 1111              	.L66:
 822:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if (tail_gone > 0) {
 823:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE,
 824:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                   ("pbuf_dechain: deallocated %p (as it is no longer referenced)\n", (void *)q));
 825:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 826:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* return remaining tail or NULL if deallocated */
 827:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 828:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
 829:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ASSERT("p->tot_len == p->len", p->tot_len == p->len);
 830:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return ((tail_gone > 0) ? NULL : q);
 1112              	 .loc 1 830 0
 1113 0040 FB7B     	 ldrb r3,[r7,#15]
 1114 0042 002B     	 cmp r3,#0
 1115 0044 01D1     	 bne .L67
 1116              	 .loc 1 830 0 is_stmt 0 discriminator 1
 1117 0046 BB68     	 ldr r3,[r7,#8]
 1118 0048 00E0     	 b .L68
 1119              	.L67:
 1120              	 .loc 1 830 0 discriminator 2
 1121 004a 0023     	 movs r3,#0
 1122              	.L68:
 831:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 1123              	 .loc 1 831 0 is_stmt 1 discriminator 4
 1124 004c 1846     	 mov r0,r3
 1125 004e 1037     	 adds r7,r7,#16
 1126              	.LCFI47:
 1127              	 .cfi_def_cfa_offset 8
 1128 0050 BD46     	 mov sp,r7
 1129              	.LCFI48:
 1130              	 .cfi_def_cfa_register 13
 1131              	 
 1132 0052 80BD     	 pop {r7,pc}
 1133              	 .cfi_endproc
 1134              	.LFE141:
 1136              	 .section .text.pbuf_copy,"ax",%progbits
 1137              	 .align 2
 1138              	 .global pbuf_copy
 1139              	 .thumb
 1140              	 .thumb_func
 1142              	pbuf_copy:
 1143              	.LFB142:
 832:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 833:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 834:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 835:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Create PBUF_RAM copies of pbufs.
 836:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 837:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Used to queue packets on behalf of the lwIP stack, such as
 838:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * ARP based queueing.
 839:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 840:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @note You MUST explicitly use p = pbuf_take(p);
 841:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 842:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @note Only one packet is copied, no packet queue!
 843:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 844:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p_to pbuf destination of the copy
 845:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p_from pbuf source of the copy
 846:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 847:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return ERR_OK if pbuf was copied
 848:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 849:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *                 enough to hold p_from
 850:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 851:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** err_t
 852:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_copy(struct pbuf *p_to, struct pbuf *p_from)
 853:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 1144              	 .loc 1 853 0
 1145              	 .cfi_startproc
 1146              	 
 1147              	 
 1148 0000 80B5     	 push {r7,lr}
 1149              	.LCFI49:
 1150              	 .cfi_def_cfa_offset 8
 1151              	 .cfi_offset 7,-8
 1152              	 .cfi_offset 14,-4
 1153 0002 84B0     	 sub sp,sp,#16
 1154              	.LCFI50:
 1155              	 .cfi_def_cfa_offset 24
 1156 0004 00AF     	 add r7,sp,#0
 1157              	.LCFI51:
 1158              	 .cfi_def_cfa_register 7
 1159 0006 7860     	 str r0,[r7,#4]
 1160 0008 3960     	 str r1,[r7]
 854:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t offset_to=0, offset_from=0, len;
 1161              	 .loc 1 854 0
 1162 000a 0023     	 movs r3,#0
 1163 000c FB81     	 strh r3,[r7,#14]
 1164 000e 0023     	 movs r3,#0
 1165 0010 BB81     	 strh r3,[r7,#12]
 855:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 856:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
 857:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     (void*)p_to, (void*)p_from));
 858:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 859:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* is the target big enough to hold the source? */
 860:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 1166              	 .loc 1 860 0
 1167 0012 7B68     	 ldr r3,[r7,#4]
 1168 0014 002B     	 cmp r3,#0
 1169 0016 08D0     	 beq .L71
 1170              	 .loc 1 860 0 is_stmt 0 discriminator 2
 1171 0018 3B68     	 ldr r3,[r7]
 1172 001a 002B     	 cmp r3,#0
 1173 001c 05D0     	 beq .L71
 1174              	 .loc 1 860 0 discriminator 4
 1175 001e 7B68     	 ldr r3,[r7,#4]
 1176 0020 1A89     	 ldrh r2,[r3,#8]
 1177 0022 3B68     	 ldr r3,[r7]
 1178 0024 1B89     	 ldrh r3,[r3,#8]
 1179 0026 9A42     	 cmp r2,r3
 1180 0028 02D2     	 bcs .L72
 1181              	.L71:
 1182              	 .loc 1 860 0 discriminator 5
 1183              	
 1184 002a 00BE     	 bkpt 0
 1185              	
 1186              	 .thumb
 1187 002c F223     	 movs r3,#242
 1188 002e 6DE0     	 b .L73
 1189              	.L72:
 861:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****              (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);
 862:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 863:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* iterate through pbuf chain */
 864:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   do
 865:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   {
 866:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* copy one part of the original chain */
 867:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 1190              	 .loc 1 867 0 is_stmt 1
 1191 0030 7B68     	 ldr r3,[r7,#4]
 1192 0032 5B89     	 ldrh r3,[r3,#10]
 1193 0034 1A46     	 mov r2,r3
 1194 0036 FB89     	 ldrh r3,[r7,#14]
 1195 0038 D21A     	 subs r2,r2,r3
 1196 003a 3B68     	 ldr r3,[r7]
 1197 003c 5B89     	 ldrh r3,[r3,#10]
 1198 003e 1946     	 mov r1,r3
 1199 0040 BB89     	 ldrh r3,[r7,#12]
 1200 0042 CB1A     	 subs r3,r1,r3
 1201 0044 9A42     	 cmp r2,r3
 1202 0046 05DB     	 blt .L74
 868:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* complete current p_from fits into current p_to */
 869:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       len = p_from->len - offset_from;
 1203              	 .loc 1 869 0
 1204 0048 3B68     	 ldr r3,[r7]
 1205 004a 5A89     	 ldrh r2,[r3,#10]
 1206 004c BB89     	 ldrh r3,[r7,#12]
 1207 004e D31A     	 subs r3,r2,r3
 1208 0050 7B81     	 strh r3,[r7,#10]
 1209 0052 04E0     	 b .L75
 1210              	.L74:
 870:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     } else {
 871:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* current p_from does not fit into current p_to */
 872:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       len = p_to->len - offset_to;
 1211              	 .loc 1 872 0
 1212 0054 7B68     	 ldr r3,[r7,#4]
 1213 0056 5A89     	 ldrh r2,[r3,#10]
 1214 0058 FB89     	 ldrh r3,[r7,#14]
 1215 005a D31A     	 subs r3,r2,r3
 1216 005c 7B81     	 strh r3,[r7,#10]
 1217              	.L75:
 873:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 874:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 1218              	 .loc 1 874 0
 1219 005e 7B68     	 ldr r3,[r7,#4]
 1220 0060 5A68     	 ldr r2,[r3,#4]
 1221 0062 FB89     	 ldrh r3,[r7,#14]
 1222 0064 D118     	 adds r1,r2,r3
 1223 0066 3B68     	 ldr r3,[r7]
 1224 0068 5A68     	 ldr r2,[r3,#4]
 1225 006a BB89     	 ldrh r3,[r7,#12]
 1226 006c 1A44     	 add r2,r2,r3
 1227 006e 7B89     	 ldrh r3,[r7,#10]
 1228 0070 0846     	 mov r0,r1
 1229 0072 1146     	 mov r1,r2
 1230 0074 1A46     	 mov r2,r3
 1231 0076 FFF7FEFF 	 bl thumb2_memcpy
 875:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     offset_to += len;
 1232              	 .loc 1 875 0
 1233 007a FA89     	 ldrh r2,[r7,#14]
 1234 007c 7B89     	 ldrh r3,[r7,#10]
 1235 007e 1344     	 add r3,r3,r2
 1236 0080 FB81     	 strh r3,[r7,#14]
 876:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     offset_from += len;
 1237              	 .loc 1 876 0
 1238 0082 BA89     	 ldrh r2,[r7,#12]
 1239 0084 7B89     	 ldrh r3,[r7,#10]
 1240 0086 1344     	 add r3,r3,r2
 1241 0088 BB81     	 strh r3,[r7,#12]
 877:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 878:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 879:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if (offset_from >= p_from->len) {
 1242              	 .loc 1 879 0
 1243 008a 3B68     	 ldr r3,[r7]
 1244 008c 5B89     	 ldrh r3,[r3,#10]
 1245 008e BA89     	 ldrh r2,[r7,#12]
 1246 0090 9A42     	 cmp r2,r3
 1247 0092 04D3     	 bcc .L76
 880:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* on to next p_from (if any) */
 881:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       offset_from = 0;
 1248              	 .loc 1 881 0
 1249 0094 0023     	 movs r3,#0
 1250 0096 BB81     	 strh r3,[r7,#12]
 882:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       p_from = p_from->next;
 1251              	 .loc 1 882 0
 1252 0098 3B68     	 ldr r3,[r7]
 1253 009a 1B68     	 ldr r3,[r3]
 1254 009c 3B60     	 str r3,[r7]
 1255              	.L76:
 883:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 884:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if (offset_to == p_to->len) {
 1256              	 .loc 1 884 0
 1257 009e 7B68     	 ldr r3,[r7,#4]
 1258 00a0 5B89     	 ldrh r3,[r3,#10]
 1259 00a2 FA89     	 ldrh r2,[r7,#14]
 1260 00a4 9A42     	 cmp r2,r3
 1261 00a6 0DD1     	 bne .L77
 885:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* on to next p_to (if any) */
 886:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       offset_to = 0;
 1262              	 .loc 1 886 0
 1263 00a8 0023     	 movs r3,#0
 1264 00aa FB81     	 strh r3,[r7,#14]
 887:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       p_to = p_to->next;
 1265              	 .loc 1 887 0
 1266 00ac 7B68     	 ldr r3,[r7,#4]
 1267 00ae 1B68     	 ldr r3,[r3]
 1268 00b0 7B60     	 str r3,[r7,#4]
 888:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 1269              	 .loc 1 888 0
 1270 00b2 7B68     	 ldr r3,[r7,#4]
 1271 00b4 002B     	 cmp r3,#0
 1272 00b6 05D1     	 bne .L77
 1273              	 .loc 1 888 0 is_stmt 0 discriminator 1
 1274 00b8 3B68     	 ldr r3,[r7]
 1275 00ba 002B     	 cmp r3,#0
 1276 00bc 02D0     	 beq .L77
 1277              	 .loc 1 888 0 discriminator 2
 1278              	
 1279 00be 00BE     	 bkpt 0
 1280              	
 1281              	 .thumb
 1282 00c0 F223     	 movs r3,#242
 1283 00c2 23E0     	 b .L73
 1284              	.L77:
 889:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 890:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 891:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 1285              	 .loc 1 891 0 is_stmt 1
 1286 00c4 3B68     	 ldr r3,[r7]
 1287 00c6 002B     	 cmp r3,#0
 1288 00c8 0CD0     	 beq .L78
 1289              	 .loc 1 891 0 is_stmt 0 discriminator 1
 1290 00ca 3B68     	 ldr r3,[r7]
 1291 00cc 5A89     	 ldrh r2,[r3,#10]
 1292 00ce 3B68     	 ldr r3,[r7]
 1293 00d0 1B89     	 ldrh r3,[r3,#8]
 1294 00d2 9A42     	 cmp r2,r3
 1295 00d4 06D1     	 bne .L78
 892:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* don't copy more than one packet! */
 893:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
 1296              	 .loc 1 893 0 is_stmt 1
 1297 00d6 3B68     	 ldr r3,[r7]
 1298 00d8 1B68     	 ldr r3,[r3]
 1299 00da 002B     	 cmp r3,#0
 1300 00dc 02D0     	 beq .L78
 1301              	 .loc 1 893 0 is_stmt 0 discriminator 1
 1302              	
 1303 00de 00BE     	 bkpt 0
 1304              	
 1305              	 .thumb
 1306 00e0 FA23     	 movs r3,#250
 1307 00e2 13E0     	 b .L73
 1308              	.L78:
 894:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                  (p_from->next == NULL), return ERR_VAL;);
 895:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 896:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 1309              	 .loc 1 896 0 is_stmt 1
 1310 00e4 7B68     	 ldr r3,[r7,#4]
 1311 00e6 002B     	 cmp r3,#0
 1312 00e8 0CD0     	 beq .L79
 1313              	 .loc 1 896 0 is_stmt 0 discriminator 1
 1314 00ea 7B68     	 ldr r3,[r7,#4]
 1315 00ec 5A89     	 ldrh r2,[r3,#10]
 1316 00ee 7B68     	 ldr r3,[r7,#4]
 1317 00f0 1B89     	 ldrh r3,[r3,#8]
 1318 00f2 9A42     	 cmp r2,r3
 1319 00f4 06D1     	 bne .L79
 897:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* don't copy more than one packet! */
 898:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
 1320              	 .loc 1 898 0 is_stmt 1
 1321 00f6 7B68     	 ldr r3,[r7,#4]
 1322 00f8 1B68     	 ldr r3,[r3]
 1323 00fa 002B     	 cmp r3,#0
 1324 00fc 02D0     	 beq .L79
 1325              	 .loc 1 898 0 is_stmt 0 discriminator 1
 1326              	
 1327 00fe 00BE     	 bkpt 0
 1328              	
 1329              	 .thumb
 1330 0100 FA23     	 movs r3,#250
 1331 0102 03E0     	 b .L73
 1332              	.L79:
 899:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                   (p_to->next == NULL), return ERR_VAL;);
 900:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 901:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   } while (p_from);
 1333              	 .loc 1 901 0 is_stmt 1
 1334 0104 3B68     	 ldr r3,[r7]
 1335 0106 002B     	 cmp r3,#0
 1336 0108 92D1     	 bne .L72
 902:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
 903:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return ERR_OK;
 1337              	 .loc 1 903 0
 1338 010a 0023     	 movs r3,#0
 1339              	.L73:
 1340 010c 5BB2     	 sxtb r3,r3
 904:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 1341              	 .loc 1 904 0
 1342 010e 1846     	 mov r0,r3
 1343 0110 1037     	 adds r7,r7,#16
 1344              	.LCFI52:
 1345              	 .cfi_def_cfa_offset 8
 1346 0112 BD46     	 mov sp,r7
 1347              	.LCFI53:
 1348              	 .cfi_def_cfa_register 13
 1349              	 
 1350 0114 80BD     	 pop {r7,pc}
 1351              	 .cfi_endproc
 1352              	.LFE142:
 1354 0116 00BF     	 .section .text.pbuf_copy_partial,"ax",%progbits
 1355              	 .align 2
 1356              	 .global pbuf_copy_partial
 1357              	 .thumb
 1358              	 .thumb_func
 1360              	pbuf_copy_partial:
 1361              	.LFB143:
 905:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 906:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 907:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Copy (part of) the contents of a packet buffer
 908:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * to an application supplied buffer.
 909:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 910:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param buf the pbuf from which to copy data
 911:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param dataptr the application supplied buffer
 912:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param len length of data to copy (dataptr must be big enough). No more 
 913:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * than buf->tot_len will be copied, irrespective of len
 914:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param offset offset into the packet buffer from where to begin copying len bytes
 915:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return the number of bytes copied, or 0 on failure
 916:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 917:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** u16_t
 918:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_copy_partial(struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
 919:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 1362              	 .loc 1 919 0
 1363              	 .cfi_startproc
 1364              	 
 1365              	 
 1366 0000 80B5     	 push {r7,lr}
 1367              	.LCFI54:
 1368              	 .cfi_def_cfa_offset 8
 1369              	 .cfi_offset 7,-8
 1370              	 .cfi_offset 14,-4
 1371 0002 88B0     	 sub sp,sp,#32
 1372              	.LCFI55:
 1373              	 .cfi_def_cfa_offset 40
 1374 0004 00AF     	 add r7,sp,#0
 1375              	.LCFI56:
 1376              	 .cfi_def_cfa_register 7
 1377 0006 F860     	 str r0,[r7,#12]
 1378 0008 B960     	 str r1,[r7,#8]
 1379 000a 1146     	 mov r1,r2
 1380 000c 1A46     	 mov r2,r3
 1381 000e 0B46     	 mov r3,r1
 1382 0010 FB80     	 strh r3,[r7,#6]
 1383 0012 1346     	 mov r3,r2
 1384 0014 BB80     	 strh r3,[r7,#4]
 920:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   struct pbuf *p;
 921:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t left;
 922:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t buf_copy_len;
 923:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t copied_total = 0;
 1385              	 .loc 1 923 0
 1386 0016 0023     	 movs r3,#0
 1387 0018 FB82     	 strh r3,[r7,#22]
 924:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 925:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 1388              	 .loc 1 925 0
 1389 001a FB68     	 ldr r3,[r7,#12]
 1390 001c 002B     	 cmp r3,#0
 1391 001e 02D1     	 bne .L81
 1392              	 .loc 1 925 0 is_stmt 0 discriminator 1
 1393              	
 1394 0020 00BE     	 bkpt 0
 1395              	
 1396              	 .thumb
 1397 0022 0023     	 movs r3,#0
 1398 0024 50E0     	 b .L82
 1399              	.L81:
 926:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 1400              	 .loc 1 926 0 is_stmt 1
 1401 0026 BB68     	 ldr r3,[r7,#8]
 1402 0028 002B     	 cmp r3,#0
 1403 002a 02D1     	 bne .L83
 1404              	 .loc 1 926 0 is_stmt 0 discriminator 1
 1405              	
 1406 002c 00BE     	 bkpt 0
 1407              	
 1408              	 .thumb
 1409 002e 0023     	 movs r3,#0
 1410 0030 4AE0     	 b .L82
 1411              	.L83:
 927:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 928:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   left = 0;
 1412              	 .loc 1 928 0 is_stmt 1
 1413 0032 0023     	 movs r3,#0
 1414 0034 7B83     	 strh r3,[r7,#26]
 929:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 930:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if((buf == NULL) || (dataptr == NULL)) {
 1415              	 .loc 1 930 0
 1416 0036 FB68     	 ldr r3,[r7,#12]
 1417 0038 002B     	 cmp r3,#0
 1418 003a 02D0     	 beq .L84
 1419              	 .loc 1 930 0 is_stmt 0 discriminator 1
 1420 003c BB68     	 ldr r3,[r7,#8]
 1421 003e 002B     	 cmp r3,#0
 1422 0040 01D1     	 bne .L85
 1423              	.L84:
 931:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return 0;
 1424              	 .loc 1 931 0 is_stmt 1
 1425 0042 0023     	 movs r3,#0
 1426 0044 40E0     	 b .L82
 1427              	.L85:
 932:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 933:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 934:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. 
 935:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   for(p = buf; len != 0 && p != NULL; p = p->next) {
 1428              	 .loc 1 935 0
 1429 0046 FB68     	 ldr r3,[r7,#12]
 1430 0048 FB61     	 str r3,[r7,#28]
 1431 004a 36E0     	 b .L86
 1432              	.L91:
 936:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if ((offset != 0) && (offset >= p->len)) {
 1433              	 .loc 1 936 0
 1434 004c BB88     	 ldrh r3,[r7,#4]
 1435 004e 002B     	 cmp r3,#0
 1436 0050 0AD0     	 beq .L87
 1437              	 .loc 1 936 0 is_stmt 0 discriminator 1
 1438 0052 FB69     	 ldr r3,[r7,#28]
 1439 0054 5B89     	 ldrh r3,[r3,#10]
 1440 0056 BA88     	 ldrh r2,[r7,#4]
 1441 0058 9A42     	 cmp r2,r3
 1442 005a 05D3     	 bcc .L87
 937:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* don't copy from this buffer -> on to the next */
 938:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       offset -= p->len;
 1443              	 .loc 1 938 0 is_stmt 1
 1444 005c FB69     	 ldr r3,[r7,#28]
 1445 005e 5B89     	 ldrh r3,[r3,#10]
 1446 0060 BA88     	 ldrh r2,[r7,#4]
 1447 0062 D31A     	 subs r3,r2,r3
 1448 0064 BB80     	 strh r3,[r7,#4]
 1449 0066 25E0     	 b .L88
 1450              	.L87:
 939:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     } else {
 940:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* copy from this buffer. maybe only partially. */
 941:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       buf_copy_len = p->len - offset;
 1451              	 .loc 1 941 0
 1452 0068 FB69     	 ldr r3,[r7,#28]
 1453 006a 5A89     	 ldrh r2,[r3,#10]
 1454 006c BB88     	 ldrh r3,[r7,#4]
 1455 006e D31A     	 subs r3,r2,r3
 1456 0070 3B83     	 strh r3,[r7,#24]
 942:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       if (buf_copy_len > len)
 1457              	 .loc 1 942 0
 1458 0072 3A8B     	 ldrh r2,[r7,#24]
 1459 0074 FB88     	 ldrh r3,[r7,#6]
 1460 0076 9A42     	 cmp r2,r3
 1461 0078 01D9     	 bls .L89
 943:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****           buf_copy_len = len;
 1462              	 .loc 1 943 0
 1463 007a FB88     	 ldrh r3,[r7,#6]
 1464 007c 3B83     	 strh r3,[r7,#24]
 1465              	.L89:
 944:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* copy the necessary parts of the buffer */
 945:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 1466              	 .loc 1 945 0
 1467 007e 7B8B     	 ldrh r3,[r7,#26]
 1468 0080 BA68     	 ldr r2,[r7,#8]
 1469 0082 D118     	 adds r1,r2,r3
 1470 0084 FB69     	 ldr r3,[r7,#28]
 1471 0086 5A68     	 ldr r2,[r3,#4]
 1472 0088 BB88     	 ldrh r3,[r7,#4]
 1473 008a 1A44     	 add r2,r2,r3
 1474 008c 3B8B     	 ldrh r3,[r7,#24]
 1475 008e 0846     	 mov r0,r1
 1476 0090 1146     	 mov r1,r2
 1477 0092 1A46     	 mov r2,r3
 1478 0094 FFF7FEFF 	 bl thumb2_memcpy
 946:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       copied_total += buf_copy_len;
 1479              	 .loc 1 946 0
 1480 0098 FA8A     	 ldrh r2,[r7,#22]
 1481 009a 3B8B     	 ldrh r3,[r7,#24]
 1482 009c 1344     	 add r3,r3,r2
 1483 009e FB82     	 strh r3,[r7,#22]
 947:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       left += buf_copy_len;
 1484              	 .loc 1 947 0
 1485 00a0 7A8B     	 ldrh r2,[r7,#26]
 1486 00a2 3B8B     	 ldrh r3,[r7,#24]
 1487 00a4 1344     	 add r3,r3,r2
 1488 00a6 7B83     	 strh r3,[r7,#26]
 948:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       len -= buf_copy_len;
 1489              	 .loc 1 948 0
 1490 00a8 FA88     	 ldrh r2,[r7,#6]
 1491 00aa 3B8B     	 ldrh r3,[r7,#24]
 1492 00ac D31A     	 subs r3,r2,r3
 1493 00ae FB80     	 strh r3,[r7,#6]
 949:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       offset = 0;
 1494              	 .loc 1 949 0
 1495 00b0 0023     	 movs r3,#0
 1496 00b2 BB80     	 strh r3,[r7,#4]
 1497              	.L88:
 935:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if ((offset != 0) && (offset >= p->len)) {
 1498              	 .loc 1 935 0 discriminator 2
 1499 00b4 FB69     	 ldr r3,[r7,#28]
 1500 00b6 1B68     	 ldr r3,[r3]
 1501 00b8 FB61     	 str r3,[r7,#28]
 1502              	.L86:
 935:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if ((offset != 0) && (offset >= p->len)) {
 1503              	 .loc 1 935 0 is_stmt 0 discriminator 1
 1504 00ba FB88     	 ldrh r3,[r7,#6]
 1505 00bc 002B     	 cmp r3,#0
 1506 00be 02D0     	 beq .L90
 935:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if ((offset != 0) && (offset >= p->len)) {
 1507              	 .loc 1 935 0 discriminator 3
 1508 00c0 FB69     	 ldr r3,[r7,#28]
 1509 00c2 002B     	 cmp r3,#0
 1510 00c4 C2D1     	 bne .L91
 1511              	.L90:
 950:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 951:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 952:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return copied_total;
 1512              	 .loc 1 952 0 is_stmt 1
 1513 00c6 FB8A     	 ldrh r3,[r7,#22]
 1514              	.L82:
 953:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 1515              	 .loc 1 953 0
 1516 00c8 1846     	 mov r0,r3
 1517 00ca 2037     	 adds r7,r7,#32
 1518              	.LCFI57:
 1519              	 .cfi_def_cfa_offset 8
 1520 00cc BD46     	 mov sp,r7
 1521              	.LCFI58:
 1522              	 .cfi_def_cfa_register 13
 1523              	 
 1524 00ce 80BD     	 pop {r7,pc}
 1525              	 .cfi_endproc
 1526              	.LFE143:
 1528              	 .section .text.pbuf_take,"ax",%progbits
 1529              	 .align 2
 1530              	 .global pbuf_take
 1531              	 .thumb
 1532              	 .thumb_func
 1534              	pbuf_take:
 1535              	.LFB144:
 954:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 955:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 956:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Copy application supplied data into a pbuf.
 957:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * This function can only be used to copy the equivalent of buf->tot_len data.
 958:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 959:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param buf pbuf to fill with data
 960:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param dataptr application supplied data buffer
 961:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param len length of the application supplied data buffer
 962:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
 963:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 964:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
 965:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** err_t
 966:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
 967:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 1536              	 .loc 1 967 0
 1537              	 .cfi_startproc
 1538              	 
 1539              	 
 1540 0000 80B5     	 push {r7,lr}
 1541              	.LCFI59:
 1542              	 .cfi_def_cfa_offset 8
 1543              	 .cfi_offset 7,-8
 1544              	 .cfi_offset 14,-4
 1545 0002 88B0     	 sub sp,sp,#32
 1546              	.LCFI60:
 1547              	 .cfi_def_cfa_offset 40
 1548 0004 00AF     	 add r7,sp,#0
 1549              	.LCFI61:
 1550              	 .cfi_def_cfa_register 7
 1551 0006 F860     	 str r0,[r7,#12]
 1552 0008 B960     	 str r1,[r7,#8]
 1553 000a 1346     	 mov r3,r2
 1554 000c FB80     	 strh r3,[r7,#6]
 968:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   struct pbuf *p;
 969:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t buf_copy_len;
 970:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t total_copy_len = len;
 1555              	 .loc 1 970 0
 1556 000e FB88     	 ldrh r3,[r7,#6]
 1557 0010 3B83     	 strh r3,[r7,#24]
 971:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t copied_total = 0;
 1558              	 .loc 1 971 0
 1559 0012 0023     	 movs r3,#0
 1560 0014 FB82     	 strh r3,[r7,#22]
 972:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 973:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return 0;);
 1561              	 .loc 1 973 0
 1562 0016 FB68     	 ldr r3,[r7,#12]
 1563 0018 002B     	 cmp r3,#0
 1564 001a 02D1     	 bne .L93
 1565              	 .loc 1 973 0 is_stmt 0 discriminator 1
 1566              	
 1567 001c 00BE     	 bkpt 0
 1568              	
 1569              	 .thumb
 1570 001e 0023     	 movs r3,#0
 1571 0020 39E0     	 b .L94
 1572              	.L93:
 974:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return 0;);
 1573              	 .loc 1 974 0 is_stmt 1
 1574 0022 BB68     	 ldr r3,[r7,#8]
 1575 0024 002B     	 cmp r3,#0
 1576 0026 02D1     	 bne .L95
 1577              	 .loc 1 974 0 is_stmt 0 discriminator 1
 1578              	
 1579 0028 00BE     	 bkpt 0
 1580              	
 1581              	 .thumb
 1582 002a 0023     	 movs r3,#0
 1583 002c 33E0     	 b .L94
 1584              	.L95:
 975:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 976:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 1585              	 .loc 1 976 0 is_stmt 1
 1586 002e FB68     	 ldr r3,[r7,#12]
 1587 0030 002B     	 cmp r3,#0
 1588 0032 07D0     	 beq .L96
 1589              	 .loc 1 976 0 is_stmt 0 discriminator 1
 1590 0034 BB68     	 ldr r3,[r7,#8]
 1591 0036 002B     	 cmp r3,#0
 1592 0038 04D0     	 beq .L96
 1593              	 .loc 1 976 0 discriminator 2
 1594 003a FB68     	 ldr r3,[r7,#12]
 1595 003c 1B89     	 ldrh r3,[r3,#8]
 1596 003e FA88     	 ldrh r2,[r7,#6]
 1597 0040 9A42     	 cmp r2,r3
 1598 0042 01D9     	 bls .L97
 1599              	.L96:
 977:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return ERR_ARG;
 1600              	 .loc 1 977 0 is_stmt 1
 1601 0044 F223     	 movs r3,#242
 1602 0046 26E0     	 b .L94
 1603              	.L97:
 978:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 979:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 980:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. 
 981:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   for(p = buf; total_copy_len != 0; p = p->next) {
 1604              	 .loc 1 981 0
 1605 0048 FB68     	 ldr r3,[r7,#12]
 1606 004a FB61     	 str r3,[r7,#28]
 1607 004c 1FE0     	 b .L98
 1608              	.L100:
 982:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 983:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     buf_copy_len = total_copy_len;
 1609              	 .loc 1 983 0
 1610 004e 3B8B     	 ldrh r3,[r7,#24]
 1611 0050 7B83     	 strh r3,[r7,#26]
 984:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     if (buf_copy_len > p->len) {
 1612              	 .loc 1 984 0
 1613 0052 FB69     	 ldr r3,[r7,#28]
 1614 0054 5B89     	 ldrh r3,[r3,#10]
 1615 0056 7A8B     	 ldrh r2,[r7,#26]
 1616 0058 9A42     	 cmp r2,r3
 1617 005a 02D9     	 bls .L99
 985:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       /* this pbuf cannot hold all remaining data */
 986:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       buf_copy_len = p->len;
 1618              	 .loc 1 986 0
 1619 005c FB69     	 ldr r3,[r7,#28]
 1620 005e 5B89     	 ldrh r3,[r3,#10]
 1621 0060 7B83     	 strh r3,[r7,#26]
 1622              	.L99:
 987:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
 988:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* copy the necessary parts of the buffer */
 989:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     MEMCPY(p->payload, &((char*)dataptr)[copied_total], buf_copy_len);
 1623              	 .loc 1 989 0 discriminator 2
 1624 0062 FB69     	 ldr r3,[r7,#28]
 1625 0064 5968     	 ldr r1,[r3,#4]
 1626 0066 FB8A     	 ldrh r3,[r7,#22]
 1627 0068 BA68     	 ldr r2,[r7,#8]
 1628 006a 1A44     	 add r2,r2,r3
 1629 006c 7B8B     	 ldrh r3,[r7,#26]
 1630 006e 0846     	 mov r0,r1
 1631 0070 1146     	 mov r1,r2
 1632 0072 1A46     	 mov r2,r3
 1633 0074 FFF7FEFF 	 bl thumb2_memcpy
 990:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     total_copy_len -= buf_copy_len;
 1634              	 .loc 1 990 0 discriminator 2
 1635 0078 3A8B     	 ldrh r2,[r7,#24]
 1636 007a 7B8B     	 ldrh r3,[r7,#26]
 1637 007c D31A     	 subs r3,r2,r3
 1638 007e 3B83     	 strh r3,[r7,#24]
 991:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     copied_total += buf_copy_len;
 1639              	 .loc 1 991 0 discriminator 2
 1640 0080 FA8A     	 ldrh r2,[r7,#22]
 1641 0082 7B8B     	 ldrh r3,[r7,#26]
 1642 0084 1344     	 add r3,r3,r2
 1643 0086 FB82     	 strh r3,[r7,#22]
 981:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 1644              	 .loc 1 981 0 discriminator 2
 1645 0088 FB69     	 ldr r3,[r7,#28]
 1646 008a 1B68     	 ldr r3,[r3]
 1647 008c FB61     	 str r3,[r7,#28]
 1648              	.L98:
 981:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 1649              	 .loc 1 981 0 is_stmt 0 discriminator 1
 1650 008e 3B8B     	 ldrh r3,[r7,#24]
 1651 0090 002B     	 cmp r3,#0
 1652 0092 DCD1     	 bne .L100
 992:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
 993:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 994:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return ERR_OK;
 1653              	 .loc 1 994 0 is_stmt 1
 1654 0094 0023     	 movs r3,#0
 1655              	.L94:
 1656 0096 5BB2     	 sxtb r3,r3
 995:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 1657              	 .loc 1 995 0
 1658 0098 1846     	 mov r0,r3
 1659 009a 2037     	 adds r7,r7,#32
 1660              	.LCFI62:
 1661              	 .cfi_def_cfa_offset 8
 1662 009c BD46     	 mov sp,r7
 1663              	.LCFI63:
 1664              	 .cfi_def_cfa_register 13
 1665              	 
 1666 009e 80BD     	 pop {r7,pc}
 1667              	 .cfi_endproc
 1668              	.LFE144:
 1670              	 .section .text.pbuf_coalesce,"ax",%progbits
 1671              	 .align 2
 1672              	 .global pbuf_coalesce
 1673              	 .thumb
 1674              	 .thumb_func
 1676              	pbuf_coalesce:
 1677              	.LFB145:
 996:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
 997:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
 998:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Creates a single pbuf out of a queue of pbufs.
 999:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1000:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @remark: Either the source pbuf 'p' is freed by this function or the original
1001:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *          pbuf 'p' is returned, therefore the caller has to check the result!
1002:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1003:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p the source pbuf
1004:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param layer pbuf_layer of the new pbuf
1005:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1006:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return a new, single pbuf (p->next is NULL)
1007:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *         or the old pbuf if allocation fails
1008:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
1009:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** struct pbuf*
1010:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_coalesce(struct pbuf *p, pbuf_layer layer)
1011:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 1678              	 .loc 1 1011 0
 1679              	 .cfi_startproc
 1680              	 
 1681              	 
 1682 0000 80B5     	 push {r7,lr}
 1683              	.LCFI64:
 1684              	 .cfi_def_cfa_offset 8
 1685              	 .cfi_offset 7,-8
 1686              	 .cfi_offset 14,-4
 1687 0002 84B0     	 sub sp,sp,#16
 1688              	.LCFI65:
 1689              	 .cfi_def_cfa_offset 24
 1690 0004 00AF     	 add r7,sp,#0
 1691              	.LCFI66:
 1692              	 .cfi_def_cfa_register 7
 1693 0006 7860     	 str r0,[r7,#4]
 1694 0008 0B46     	 mov r3,r1
 1695 000a FB70     	 strb r3,[r7,#3]
1012:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   struct pbuf *q;
1013:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   err_t err;
1014:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (p->next == NULL) {
 1696              	 .loc 1 1014 0
 1697 000c 7B68     	 ldr r3,[r7,#4]
 1698 000e 1B68     	 ldr r3,[r3]
 1699 0010 002B     	 cmp r3,#0
 1700 0012 01D1     	 bne .L102
1015:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return p;
 1701              	 .loc 1 1015 0
 1702 0014 7B68     	 ldr r3,[r7,#4]
 1703 0016 17E0     	 b .L103
 1704              	.L102:
1016:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1017:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   q = pbuf_alloc(layer, p->tot_len, PBUF_RAM);
 1705              	 .loc 1 1017 0
 1706 0018 7B68     	 ldr r3,[r7,#4]
 1707 001a 1B89     	 ldrh r3,[r3,#8]
 1708 001c FA78     	 ldrb r2,[r7,#3]
 1709 001e 1046     	 mov r0,r2
 1710 0020 1946     	 mov r1,r3
 1711 0022 0022     	 movs r2,#0
 1712 0024 FFF7FEFF 	 bl pbuf_alloc
 1713 0028 F860     	 str r0,[r7,#12]
1018:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (q == NULL) {
 1714              	 .loc 1 1018 0
 1715 002a FB68     	 ldr r3,[r7,#12]
 1716 002c 002B     	 cmp r3,#0
 1717 002e 01D1     	 bne .L104
1019:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     /* @todo: what do we do now? */
1020:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return p;
 1718              	 .loc 1 1020 0
 1719 0030 7B68     	 ldr r3,[r7,#4]
 1720 0032 09E0     	 b .L103
 1721              	.L104:
1021:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1022:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   err = pbuf_copy(q, p);
 1722              	 .loc 1 1022 0
 1723 0034 F868     	 ldr r0,[r7,#12]
 1724 0036 7968     	 ldr r1,[r7,#4]
 1725 0038 FFF7FEFF 	 bl pbuf_copy
 1726 003c 0346     	 mov r3,r0
 1727 003e FB72     	 strb r3,[r7,#11]
1023:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
1024:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   pbuf_free(p);
 1728              	 .loc 1 1024 0
 1729 0040 7868     	 ldr r0,[r7,#4]
 1730 0042 FFF7FEFF 	 bl pbuf_free
1025:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return q;
 1731              	 .loc 1 1025 0
 1732 0046 FB68     	 ldr r3,[r7,#12]
 1733              	.L103:
1026:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 1734              	 .loc 1 1026 0
 1735 0048 1846     	 mov r0,r3
 1736 004a 1037     	 adds r7,r7,#16
 1737              	.LCFI67:
 1738              	 .cfi_def_cfa_offset 8
 1739 004c BD46     	 mov sp,r7
 1740              	.LCFI68:
 1741              	 .cfi_def_cfa_register 13
 1742              	 
 1743 004e 80BD     	 pop {r7,pc}
 1744              	 .cfi_endproc
 1745              	.LFE145:
 1747              	 .section .text.pbuf_get_at,"ax",%progbits
 1748              	 .align 2
 1749              	 .global pbuf_get_at
 1750              	 .thumb
 1751              	 .thumb_func
 1753              	pbuf_get_at:
 1754              	.LFB146:
1027:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1028:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #if LWIP_CHECKSUM_ON_COPY
1029:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /**
1030:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * Copies data into a single pbuf (*not* into a pbuf queue!) and updates
1031:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * the checksum while copying
1032:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1033:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p the pbuf to copy data into
1034:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param start_offset offset of p->payload where to copy the data to
1035:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param dataptr data to copy into the pbuf
1036:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param len length of data to copy into the pbuf
1037:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param chksum pointer to the checksum which is updated
1038:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return ERR_OK if successful, another error if the data does not fit
1039:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *         within the (first) pbuf (no pbuf queues!)
1040:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
1041:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** err_t
1042:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_fill_chksum(struct pbuf *p, u16_t start_offset, const void *dataptr,
1043:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****                  u16_t len, u16_t *chksum)
1044:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
1045:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u32_t acc;
1046:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t copy_chksum;
1047:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   char *dst_ptr;
1048:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ASSERT("p != NULL", p != NULL);
1049:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ASSERT("dataptr != NULL", dataptr != NULL);
1050:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ASSERT("chksum != NULL", chksum != NULL);
1051:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   LWIP_ASSERT("len != 0", len != 0);
1052:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1053:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if ((start_offset >= p->len) || (start_offset + len > p->len)) {
1054:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return ERR_ARG;
1055:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1056:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1057:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   dst_ptr = ((char*)p->payload) + start_offset;
1058:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   copy_chksum = LWIP_CHKSUM_COPY(dst_ptr, dataptr, len);
1059:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if ((start_offset & 1) != 0) {
1060:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     copy_chksum = SWAP_BYTES_IN_WORD(copy_chksum);
1061:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1062:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   acc = *chksum;
1063:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   acc += copy_chksum;
1064:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   *chksum = FOLD_U32T(acc);
1065:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return ERR_OK;
1066:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
1067:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** #endif /* LWIP_CHECKSUM_ON_COPY */
1068:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1069:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  /** Get one byte from the specified position in a pbuf
1070:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * WARNING: returns zero for offset >= p->tot_len
1071:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1072:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p pbuf to parse
1073:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param offset offset into p of the byte to return
1074:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
1075:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
1076:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** u8_t
1077:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_get_at(struct pbuf* p, u16_t offset)
1078:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 1755              	 .loc 1 1078 0
 1756              	 .cfi_startproc
 1757              	 
 1758              	 
 1759              	 
 1760 0000 80B4     	 push {r7}
 1761              	.LCFI69:
 1762              	 .cfi_def_cfa_offset 4
 1763              	 .cfi_offset 7,-4
 1764 0002 85B0     	 sub sp,sp,#20
 1765              	.LCFI70:
 1766              	 .cfi_def_cfa_offset 24
 1767 0004 00AF     	 add r7,sp,#0
 1768              	.LCFI71:
 1769              	 .cfi_def_cfa_register 7
 1770 0006 7860     	 str r0,[r7,#4]
 1771 0008 0B46     	 mov r3,r1
 1772 000a 7B80     	 strh r3,[r7,#2]
1079:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t copy_from = offset;
 1773              	 .loc 1 1079 0
 1774 000c 7B88     	 ldrh r3,[r7,#2]
 1775 000e FB81     	 strh r3,[r7,#14]
1080:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   struct pbuf* q = p;
 1776              	 .loc 1 1080 0
 1777 0010 7B68     	 ldr r3,[r7,#4]
 1778 0012 BB60     	 str r3,[r7,#8]
1081:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1082:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* get the correct pbuf */
1083:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   while ((q != NULL) && (q->len <= copy_from)) {
 1779              	 .loc 1 1083 0
 1780 0014 07E0     	 b .L106
 1781              	.L108:
1084:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     copy_from -= q->len;
 1782              	 .loc 1 1084 0
 1783 0016 BB68     	 ldr r3,[r7,#8]
 1784 0018 5B89     	 ldrh r3,[r3,#10]
 1785 001a FA89     	 ldrh r2,[r7,#14]
 1786 001c D31A     	 subs r3,r2,r3
 1787 001e FB81     	 strh r3,[r7,#14]
1085:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     q = q->next;
 1788              	 .loc 1 1085 0
 1789 0020 BB68     	 ldr r3,[r7,#8]
 1790 0022 1B68     	 ldr r3,[r3]
 1791 0024 BB60     	 str r3,[r7,#8]
 1792              	.L106:
1083:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     copy_from -= q->len;
 1793              	 .loc 1 1083 0
 1794 0026 BB68     	 ldr r3,[r7,#8]
 1795 0028 002B     	 cmp r3,#0
 1796 002a 04D0     	 beq .L107
1083:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     copy_from -= q->len;
 1797              	 .loc 1 1083 0 is_stmt 0 discriminator 1
 1798 002c BB68     	 ldr r3,[r7,#8]
 1799 002e 5B89     	 ldrh r3,[r3,#10]
 1800 0030 FA89     	 ldrh r2,[r7,#14]
 1801 0032 9A42     	 cmp r2,r3
 1802 0034 EFD2     	 bcs .L108
 1803              	.L107:
1086:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1087:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* return requested data if pbuf is OK */
1088:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if ((q != NULL) && (q->len > copy_from)) {
 1804              	 .loc 1 1088 0 is_stmt 1
 1805 0036 BB68     	 ldr r3,[r7,#8]
 1806 0038 002B     	 cmp r3,#0
 1807 003a 0AD0     	 beq .L109
 1808              	 .loc 1 1088 0 is_stmt 0 discriminator 1
 1809 003c BB68     	 ldr r3,[r7,#8]
 1810 003e 5B89     	 ldrh r3,[r3,#10]
 1811 0040 FA89     	 ldrh r2,[r7,#14]
 1812 0042 9A42     	 cmp r2,r3
 1813 0044 05D2     	 bcs .L109
1089:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return ((u8_t*)q->payload)[copy_from];
 1814              	 .loc 1 1089 0 is_stmt 1
 1815 0046 BB68     	 ldr r3,[r7,#8]
 1816 0048 5A68     	 ldr r2,[r3,#4]
 1817 004a FB89     	 ldrh r3,[r7,#14]
 1818 004c 1344     	 add r3,r3,r2
 1819 004e 1B78     	 ldrb r3,[r3]
 1820 0050 00E0     	 b .L110
 1821              	.L109:
1090:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1091:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return 0;
 1822              	 .loc 1 1091 0
 1823 0052 0023     	 movs r3,#0
 1824              	.L110:
1092:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 1825              	 .loc 1 1092 0
 1826 0054 1846     	 mov r0,r3
 1827 0056 1437     	 adds r7,r7,#20
 1828              	.LCFI72:
 1829              	 .cfi_def_cfa_offset 4
 1830 0058 BD46     	 mov sp,r7
 1831              	.LCFI73:
 1832              	 .cfi_def_cfa_register 13
 1833              	 
 1834 005a 5DF8047B 	 ldr r7,[sp],#4
 1835              	.LCFI74:
 1836              	 .cfi_restore 7
 1837              	 .cfi_def_cfa_offset 0
 1838 005e 7047     	 bx lr
 1839              	 .cfi_endproc
 1840              	.LFE146:
 1842              	 .section .text.pbuf_memcmp,"ax",%progbits
 1843              	 .align 2
 1844              	 .global pbuf_memcmp
 1845              	 .thumb
 1846              	 .thumb_func
 1848              	pbuf_memcmp:
 1849              	.LFB147:
1093:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1094:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /** Compare pbuf contents at specified offset with memory s2, both of length n
1095:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1096:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p pbuf to compare
1097:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param offset offset into p at wich to start comparing
1098:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param s2 buffer to compare
1099:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param n length of buffer to compare
1100:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return zero if equal, nonzero otherwise
1101:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *         (0xffff if p is too short, diffoffset+1 otherwise)
1102:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
1103:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** u16_t
1104:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_memcmp(struct pbuf* p, u16_t offset, const void* s2, u16_t n)
1105:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 1850              	 .loc 1 1105 0
 1851              	 .cfi_startproc
 1852              	 
 1853              	 
 1854 0000 80B5     	 push {r7,lr}
 1855              	.LCFI75:
 1856              	 .cfi_def_cfa_offset 8
 1857              	 .cfi_offset 7,-8
 1858              	 .cfi_offset 14,-4
 1859 0002 88B0     	 sub sp,sp,#32
 1860              	.LCFI76:
 1861              	 .cfi_def_cfa_offset 40
 1862 0004 00AF     	 add r7,sp,#0
 1863              	.LCFI77:
 1864              	 .cfi_def_cfa_register 7
 1865 0006 F860     	 str r0,[r7,#12]
 1866 0008 7A60     	 str r2,[r7,#4]
 1867 000a 1A46     	 mov r2,r3
 1868 000c 0B46     	 mov r3,r1
 1869 000e 7B81     	 strh r3,[r7,#10]
 1870 0010 1346     	 mov r3,r2
 1871 0012 3B81     	 strh r3,[r7,#8]
1106:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t start = offset;
 1872              	 .loc 1 1106 0
 1873 0014 7B89     	 ldrh r3,[r7,#10]
 1874 0016 FB83     	 strh r3,[r7,#30]
1107:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   struct pbuf* q = p;
 1875              	 .loc 1 1107 0
 1876 0018 FB68     	 ldr r3,[r7,#12]
 1877 001a BB61     	 str r3,[r7,#24]
1108:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1109:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* get the correct pbuf */
1110:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   while ((q != NULL) && (q->len <= start)) {
 1878              	 .loc 1 1110 0
 1879 001c 07E0     	 b .L112
 1880              	.L114:
1111:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     start -= q->len;
 1881              	 .loc 1 1111 0
 1882 001e BB69     	 ldr r3,[r7,#24]
 1883 0020 5B89     	 ldrh r3,[r3,#10]
 1884 0022 FA8B     	 ldrh r2,[r7,#30]
 1885 0024 D31A     	 subs r3,r2,r3
 1886 0026 FB83     	 strh r3,[r7,#30]
1112:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     q = q->next;
 1887              	 .loc 1 1112 0
 1888 0028 BB69     	 ldr r3,[r7,#24]
 1889 002a 1B68     	 ldr r3,[r3]
 1890 002c BB61     	 str r3,[r7,#24]
 1891              	.L112:
1110:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     start -= q->len;
 1892              	 .loc 1 1110 0
 1893 002e BB69     	 ldr r3,[r7,#24]
 1894 0030 002B     	 cmp r3,#0
 1895 0032 04D0     	 beq .L113
1110:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     start -= q->len;
 1896              	 .loc 1 1110 0 is_stmt 0 discriminator 1
 1897 0034 BB69     	 ldr r3,[r7,#24]
 1898 0036 5B89     	 ldrh r3,[r3,#10]
 1899 0038 FA8B     	 ldrh r2,[r7,#30]
 1900 003a 9A42     	 cmp r2,r3
 1901 003c EFD2     	 bcs .L114
 1902              	.L113:
1113:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1114:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   /* return requested data if pbuf is OK */
1115:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if ((q != NULL) && (q->len > start)) {
 1903              	 .loc 1 1115 0 is_stmt 1
 1904 003e BB69     	 ldr r3,[r7,#24]
 1905 0040 002B     	 cmp r3,#0
 1906 0042 27D0     	 beq .L115
 1907              	 .loc 1 1115 0 is_stmt 0 discriminator 1
 1908 0044 BB69     	 ldr r3,[r7,#24]
 1909 0046 5B89     	 ldrh r3,[r3,#10]
 1910 0048 FA8B     	 ldrh r2,[r7,#30]
 1911 004a 9A42     	 cmp r2,r3
 1912 004c 22D2     	 bcs .L115
 1913              	.LBB3:
1116:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     u16_t i;
1117:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     for(i = 0; i < n; i++) {
 1914              	 .loc 1 1117 0 is_stmt 1
 1915 004e 0023     	 movs r3,#0
 1916 0050 FB82     	 strh r3,[r7,#22]
 1917 0052 19E0     	 b .L116
 1918              	.L119:
 1919              	.LBB4:
1118:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       u8_t a = pbuf_get_at(q, start + i);
 1920              	 .loc 1 1118 0
 1921 0054 FA8B     	 ldrh r2,[r7,#30]
 1922 0056 FB8A     	 ldrh r3,[r7,#22]
 1923 0058 1344     	 add r3,r3,r2
 1924 005a 9BB2     	 uxth r3,r3
 1925 005c B869     	 ldr r0,[r7,#24]
 1926 005e 1946     	 mov r1,r3
 1927 0060 FFF7FEFF 	 bl pbuf_get_at
 1928 0064 0346     	 mov r3,r0
 1929 0066 7B75     	 strb r3,[r7,#21]
1119:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       u8_t b = ((u8_t*)s2)[i];
 1930              	 .loc 1 1119 0
 1931 0068 FB8A     	 ldrh r3,[r7,#22]
 1932 006a 7A68     	 ldr r2,[r7,#4]
 1933 006c 1344     	 add r3,r3,r2
 1934 006e 1B78     	 ldrb r3,[r3]
 1935 0070 3B75     	 strb r3,[r7,#20]
1120:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       if (a != b) {
 1936              	 .loc 1 1120 0
 1937 0072 7A7D     	 ldrb r2,[r7,#21]
 1938 0074 3B7D     	 ldrb r3,[r7,#20]
 1939 0076 9A42     	 cmp r2,r3
 1940 0078 03D0     	 beq .L117
1121:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         return i+1;
 1941              	 .loc 1 1121 0
 1942 007a FB8A     	 ldrh r3,[r7,#22]
 1943 007c 0133     	 adds r3,r3,#1
 1944 007e 9BB2     	 uxth r3,r3
 1945 0080 0AE0     	 b .L118
 1946              	.L117:
 1947              	.LBE4:
1117:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       u8_t a = pbuf_get_at(q, start + i);
 1948              	 .loc 1 1117 0 discriminator 2
 1949 0082 FB8A     	 ldrh r3,[r7,#22]
 1950 0084 0133     	 adds r3,r3,#1
 1951 0086 FB82     	 strh r3,[r7,#22]
 1952              	.L116:
1117:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       u8_t a = pbuf_get_at(q, start + i);
 1953              	 .loc 1 1117 0 is_stmt 0 discriminator 1
 1954 0088 FA8A     	 ldrh r2,[r7,#22]
 1955 008a 3B89     	 ldrh r3,[r7,#8]
 1956 008c 9A42     	 cmp r2,r3
 1957 008e E1D3     	 bcc .L119
1122:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       }
1123:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
1124:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return 0;
 1958              	 .loc 1 1124 0 is_stmt 1
 1959 0090 0023     	 movs r3,#0
 1960 0092 01E0     	 b .L118
 1961              	.L115:
 1962              	.LBE3:
1125:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1126:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return 0xffff;
 1963              	 .loc 1 1126 0
 1964 0094 4FF6FF73 	 movw r3,#65535
 1965              	.L118:
1127:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 1966              	 .loc 1 1127 0
 1967 0098 1846     	 mov r0,r3
 1968 009a 2037     	 adds r7,r7,#32
 1969              	.LCFI78:
 1970              	 .cfi_def_cfa_offset 8
 1971 009c BD46     	 mov sp,r7
 1972              	.LCFI79:
 1973              	 .cfi_def_cfa_register 13
 1974              	 
 1975 009e 80BD     	 pop {r7,pc}
 1976              	 .cfi_endproc
 1977              	.LFE147:
 1979              	 .section .text.pbuf_memfind,"ax",%progbits
 1980              	 .align 2
 1981              	 .global pbuf_memfind
 1982              	 .thumb
 1983              	 .thumb_func
 1985              	pbuf_memfind:
 1986              	.LFB148:
1128:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1129:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /** Find occurrence of mem (with length mem_len) in pbuf p, starting at offset
1130:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * start_offset.
1131:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1132:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p pbuf to search, maximum length is 0xFFFE since 0xFFFF is used as
1133:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *        return value 'not found'
1134:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param mem search for the contents of this buffer
1135:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param mem_len length of 'mem'
1136:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param start_offset offset into p at which to start searching
1137:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return 0xFFFF if substr was not found in p or the index where it was found
1138:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
1139:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** u16_t
1140:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_memfind(struct pbuf* p, const void* mem, u16_t mem_len, u16_t start_offset)
1141:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 1987              	 .loc 1 1141 0
 1988              	 .cfi_startproc
 1989              	 
 1990              	 
 1991 0000 80B5     	 push {r7,lr}
 1992              	.LCFI80:
 1993              	 .cfi_def_cfa_offset 8
 1994              	 .cfi_offset 7,-8
 1995              	 .cfi_offset 14,-4
 1996 0002 86B0     	 sub sp,sp,#24
 1997              	.LCFI81:
 1998              	 .cfi_def_cfa_offset 32
 1999 0004 00AF     	 add r7,sp,#0
 2000              	.LCFI82:
 2001              	 .cfi_def_cfa_register 7
 2002 0006 F860     	 str r0,[r7,#12]
 2003 0008 B960     	 str r1,[r7,#8]
 2004 000a 1146     	 mov r1,r2
 2005 000c 1A46     	 mov r2,r3
 2006 000e 0B46     	 mov r3,r1
 2007 0010 FB80     	 strh r3,[r7,#6]
 2008 0012 1346     	 mov r3,r2
 2009 0014 BB80     	 strh r3,[r7,#4]
1142:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t i;
1143:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   u16_t max = p->tot_len - mem_len;
 2010              	 .loc 1 1143 0
 2011 0016 FB68     	 ldr r3,[r7,#12]
 2012 0018 1A89     	 ldrh r2,[r3,#8]
 2013 001a FB88     	 ldrh r3,[r7,#6]
 2014 001c D31A     	 subs r3,r2,r3
 2015 001e BB82     	 strh r3,[r7,#20]
1144:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (p->tot_len >= mem_len + start_offset) {
 2016              	 .loc 1 1144 0
 2017 0020 FB68     	 ldr r3,[r7,#12]
 2018 0022 1B89     	 ldrh r3,[r3,#8]
 2019 0024 1946     	 mov r1,r3
 2020 0026 FA88     	 ldrh r2,[r7,#6]
 2021 0028 BB88     	 ldrh r3,[r7,#4]
 2022 002a 1344     	 add r3,r3,r2
 2023 002c 9942     	 cmp r1,r3
 2024 002e 18DB     	 blt .L121
1145:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     for(i = start_offset; i <= max; ) {
 2025              	 .loc 1 1145 0
 2026 0030 BB88     	 ldrh r3,[r7,#4]
 2027 0032 FB82     	 strh r3,[r7,#22]
 2028 0034 11E0     	 b .L122
 2029              	.L125:
 2030              	.LBB5:
1146:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 2031              	 .loc 1 1146 0
 2032 0036 FA8A     	 ldrh r2,[r7,#22]
 2033 0038 FB88     	 ldrh r3,[r7,#6]
 2034 003a F868     	 ldr r0,[r7,#12]
 2035 003c 1146     	 mov r1,r2
 2036 003e BA68     	 ldr r2,[r7,#8]
 2037 0040 FFF7FEFF 	 bl pbuf_memcmp
 2038 0044 0346     	 mov r3,r0
 2039 0046 7B82     	 strh r3,[r7,#18]
1147:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       if (plus == 0) {
 2040              	 .loc 1 1147 0
 2041 0048 7B8A     	 ldrh r3,[r7,#18]
 2042 004a 002B     	 cmp r3,#0
 2043 004c 01D1     	 bne .L123
1148:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         return i;
 2044              	 .loc 1 1148 0
 2045 004e FB8A     	 ldrh r3,[r7,#22]
 2046 0050 09E0     	 b .L124
 2047              	.L123:
1149:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       } else {
1150:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****         i += plus;
 2048              	 .loc 1 1150 0
 2049 0052 FA8A     	 ldrh r2,[r7,#22]
 2050 0054 7B8A     	 ldrh r3,[r7,#18]
 2051 0056 1344     	 add r3,r3,r2
 2052 0058 FB82     	 strh r3,[r7,#22]
 2053              	.L122:
 2054              	.LBE5:
1145:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 2055              	 .loc 1 1145 0 discriminator 1
 2056 005a FA8A     	 ldrh r2,[r7,#22]
 2057 005c BB8A     	 ldrh r3,[r7,#20]
 2058 005e 9A42     	 cmp r2,r3
 2059 0060 E9D9     	 bls .L125
 2060              	.L121:
1151:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****       }
1152:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     }
1153:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1154:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return 0xFFFF;
 2061              	 .loc 1 1154 0
 2062 0062 4FF6FF73 	 movw r3,#65535
 2063              	.L124:
1155:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 2064              	 .loc 1 1155 0
 2065 0066 1846     	 mov r0,r3
 2066 0068 1837     	 adds r7,r7,#24
 2067              	.LCFI83:
 2068              	 .cfi_def_cfa_offset 8
 2069 006a BD46     	 mov sp,r7
 2070              	.LCFI84:
 2071              	 .cfi_def_cfa_register 13
 2072              	 
 2073 006c 80BD     	 pop {r7,pc}
 2074              	 .cfi_endproc
 2075              	.LFE148:
 2077 006e 00BF     	 .section .text.pbuf_strstr,"ax",%progbits
 2078              	 .align 2
 2079              	 .global pbuf_strstr
 2080              	 .thumb
 2081              	 .thumb_func
 2083              	pbuf_strstr:
 2084              	.LFB149:
1156:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** 
1157:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** /** Find occurrence of substr with length substr_len in pbuf p, start at offset
1158:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * start_offset
1159:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * WARNING: in contrast to strstr(), this one does not stop at the first \0 in
1160:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * the pbuf/source string!
1161:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *
1162:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param p pbuf to search, maximum length is 0xFFFE since 0xFFFF is used as
1163:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  *        return value 'not found'
1164:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @param substr string to search for in p, maximum length is 0xFFFE
1165:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  * @return 0xFFFF if substr was not found in p or the index where it was found
1166:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****  */
1167:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** u16_t
1168:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** pbuf_strstr(struct pbuf* p, const char* substr)
1169:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** {
 2085              	 .loc 1 1169 0
 2086              	 .cfi_startproc
 2087              	 
 2088              	 
 2089 0000 80B5     	 push {r7,lr}
 2090              	.LCFI85:
 2091              	 .cfi_def_cfa_offset 8
 2092              	 .cfi_offset 7,-8
 2093              	 .cfi_offset 14,-4
 2094 0002 84B0     	 sub sp,sp,#16
 2095              	.LCFI86:
 2096              	 .cfi_def_cfa_offset 24
 2097 0004 00AF     	 add r7,sp,#0
 2098              	.LCFI87:
 2099              	 .cfi_def_cfa_register 7
 2100 0006 7860     	 str r0,[r7,#4]
 2101 0008 3960     	 str r1,[r7]
1170:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   size_t substr_len;
1171:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if ((substr == NULL) || (substr[0] == 0) || (p->tot_len == 0xFFFF)) {
 2102              	 .loc 1 1171 0
 2103 000a 3B68     	 ldr r3,[r7]
 2104 000c 002B     	 cmp r3,#0
 2105 000e 09D0     	 beq .L127
 2106              	 .loc 1 1171 0 is_stmt 0 discriminator 1
 2107 0010 3B68     	 ldr r3,[r7]
 2108 0012 1B78     	 ldrb r3,[r3]
 2109 0014 002B     	 cmp r3,#0
 2110 0016 05D0     	 beq .L127
 2111              	 .loc 1 1171 0 discriminator 2
 2112 0018 7B68     	 ldr r3,[r7,#4]
 2113 001a 1B89     	 ldrh r3,[r3,#8]
 2114 001c 4FF6FF72 	 movw r2,#65535
 2115 0020 9342     	 cmp r3,r2
 2116 0022 02D1     	 bne .L128
 2117              	.L127:
1172:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return 0xFFFF;
 2118              	 .loc 1 1172 0 is_stmt 1
 2119 0024 4FF6FF73 	 movw r3,#65535
 2120 0028 14E0     	 b .L129
 2121              	.L128:
1173:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1174:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   substr_len = strlen(substr);
 2122              	 .loc 1 1174 0
 2123 002a 3868     	 ldr r0,[r7]
 2124 002c FFF7FEFF 	 bl strlen
 2125 0030 F860     	 str r0,[r7,#12]
1175:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   if (substr_len >= 0xFFFF) {
 2126              	 .loc 1 1175 0
 2127 0032 FB68     	 ldr r3,[r7,#12]
 2128 0034 4FF6FE72 	 movw r2,#65534
 2129 0038 9342     	 cmp r3,r2
 2130 003a 02D9     	 bls .L130
1176:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****     return 0xFFFF;
 2131              	 .loc 1 1176 0
 2132 003c 4FF6FF73 	 movw r3,#65535
 2133 0040 08E0     	 b .L129
 2134              	.L130:
1177:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   }
1178:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c ****   return pbuf_memfind(p, substr, (u16_t)substr_len, 0);
 2135              	 .loc 1 1178 0
 2136 0042 FB68     	 ldr r3,[r7,#12]
 2137 0044 9BB2     	 uxth r3,r3
 2138 0046 7868     	 ldr r0,[r7,#4]
 2139 0048 3968     	 ldr r1,[r7]
 2140 004a 1A46     	 mov r2,r3
 2141 004c 0023     	 movs r3,#0
 2142 004e FFF7FEFF 	 bl pbuf_memfind
 2143 0052 0346     	 mov r3,r0
 2144              	.L129:
1179:../Dave/Generated/ETH_LWIP/lwip/core/pbuf.c **** }
 2145              	 .loc 1 1179 0
 2146 0054 1846     	 mov r0,r3
 2147 0056 1037     	 adds r7,r7,#16
 2148              	.LCFI88:
 2149              	 .cfi_def_cfa_offset 8
 2150 0058 BD46     	 mov sp,r7
 2151              	.LCFI89:
 2152              	 .cfi_def_cfa_register 13
 2153              	 
 2154 005a 80BD     	 pop {r7,pc}
 2155              	 .cfi_endproc
 2156              	.LFE149:
 2158              	 .text
 2159              	.Letext0:
 2160              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2161              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 2162              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2163              	 .file 5 "../Dave/Generated/ETH_LWIP/lwip/core/../include/lwip/../../port/include/arch/cc.h"
 2164              	 .file 6 "../Dave/Generated/ETH_LWIP/lwip/core/../include/lwip/err.h"
 2165              	 .file 7 "../Dave/Generated/ETH_LWIP/lwip/core/../include/lwip/memp.h"
 2166              	 .file 8 "../Dave/Generated/ETH_LWIP/lwip/core/../include/lwip/pbuf.h"
 2167              	 .file 9 "C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/CMSIS/Include/cmsis_gcc.h"
 2168              	 .file 10 "C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pbuf.c
    {standard input}:20     .text.pbuf_alloc:00000000 $t
    {standard input}:25     .text.pbuf_alloc:00000000 pbuf_alloc
    {standard input}:57     .text.pbuf_alloc:00000020 $d
    {standard input}:61     .text.pbuf_alloc:00000030 $t
    {standard input}:99     .text.pbuf_alloc:0000005c $d
    {standard input}:103    .text.pbuf_alloc:0000006c $t
    {standard input}:682    .text.pbuf_free:00000000 pbuf_free
    {standard input}:356    .text.pbuf_realloc:00000000 $t
    {standard input}:361    .text.pbuf_realloc:00000000 pbuf_realloc
    {standard input}:495    .text.pbuf_header:00000000 $t
    {standard input}:500    .text.pbuf_header:00000000 pbuf_header
    {standard input}:677    .text.pbuf_free:00000000 $t
    {standard input}:801    .text.pbuf_clen:00000000 $t
    {standard input}:806    .text.pbuf_clen:00000000 pbuf_clen
    {standard input}:863    .text.pbuf_ref:00000000 $t
    {standard input}:868    .text.pbuf_ref:00000000 pbuf_ref
    {standard input}:915    .text.pbuf_cat:00000000 $t
    {standard input}:920    .text.pbuf_cat:00000000 pbuf_cat
    {standard input}:1010   .text.pbuf_chain:00000000 $t
    {standard input}:1015   .text.pbuf_chain:00000000 pbuf_chain
    {standard input}:1054   .text.pbuf_dechain:00000000 $t
    {standard input}:1059   .text.pbuf_dechain:00000000 pbuf_dechain
    {standard input}:1137   .text.pbuf_copy:00000000 $t
    {standard input}:1142   .text.pbuf_copy:00000000 pbuf_copy
    {standard input}:1355   .text.pbuf_copy_partial:00000000 $t
    {standard input}:1360   .text.pbuf_copy_partial:00000000 pbuf_copy_partial
    {standard input}:1529   .text.pbuf_take:00000000 $t
    {standard input}:1534   .text.pbuf_take:00000000 pbuf_take
    {standard input}:1671   .text.pbuf_coalesce:00000000 $t
    {standard input}:1676   .text.pbuf_coalesce:00000000 pbuf_coalesce
    {standard input}:1748   .text.pbuf_get_at:00000000 $t
    {standard input}:1753   .text.pbuf_get_at:00000000 pbuf_get_at
    {standard input}:1843   .text.pbuf_memcmp:00000000 $t
    {standard input}:1848   .text.pbuf_memcmp:00000000 pbuf_memcmp
    {standard input}:1980   .text.pbuf_memfind:00000000 $t
    {standard input}:1985   .text.pbuf_memfind:00000000 pbuf_memfind
    {standard input}:2078   .text.pbuf_strstr:00000000 $t
    {standard input}:2083   .text.pbuf_strstr:00000000 pbuf_strstr
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memp_malloc
mem_malloc
mem_trim
memp_free
mem_free
thumb2_memcpy
strlen
