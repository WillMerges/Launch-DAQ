   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "ip.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .comm current_netif,4,4
  20              	 .comm current_header,4,4
  21              	 .comm current_iphdr_src,4,4
  22              	 .comm current_iphdr_dest,4,4
  23              	 .section .bss.ip_id,"aw",%nobits
  24              	 .align 1
  27              	ip_id:
  28 0000 0000     	 .space 2
  29              	 .section .text.ip_route,"ax",%progbits
  30              	 .align 2
  31              	 .global ip_route
  32              	 .thumb
  33              	 .thumb_func
  35              	ip_route:
  36              	.LFB128:
  37              	 .file 1 "../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c"
   1:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** /**
   2:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @file
   3:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * This is the IPv4 layer implementation for incoming and outgoing IP traffic.
   4:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * 
   5:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @see ip_frag.c
   6:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  *
   7:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  */
   8:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
   9:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** /*
  10:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
  11:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * All rights reserved.
  12:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  *
  13:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * Redistribution and use in source and binary forms, with or without modification,
  14:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * are permitted provided that the following conditions are met:
  15:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  *
  16:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  17:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  *    this list of conditions and the following disclaimer.
  18:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  *    this list of conditions and the following disclaimer in the documentation
  20:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  *    and/or other materials provided with the distribution.
  21:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * 3. The name of the author may not be used to endorse or promote products
  22:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  *    derived from this software without specific prior written permission.
  23:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  *
  24:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
  25:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  26:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
  27:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  28:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
  29:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  30:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  31:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
  32:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
  33:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * OF SUCH DAMAGE.
  34:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  *
  35:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * This file is part of the lwIP TCP/IP stack.
  36:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  *
  37:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * Author: Adam Dunkels <adam@sics.se>
  38:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  *
  39:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  */
  40:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
  41:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #include "../../include/lwip/opt.h"
  42:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #include "../../include/ipv4/lwip/ip.h"
  43:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #include "../../include/lwip/def.h"
  44:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #include "../../include/lwip/mem.h"
  45:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #include "../../include/ipv4/lwip/ip_frag.h"
  46:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #include "../../include/ipv4/lwip/inet_chksum.h"
  47:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #include "../../include/lwip/netif.h"
  48:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #include "../../include/ipv4/lwip/icmp.h"
  49:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #include "../../include/ipv4/lwip/igmp.h"
  50:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #include "../../include/lwip/raw.h"
  51:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #include "../../include/lwip/udp.h"
  52:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #include "../../include/lwip/tcp_impl.h"
  53:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #include "../../include/lwip/snmp.h"
  54:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #include "../../include/lwip/dhcp.h"
  55:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #include "../../include/ipv4/lwip/autoip.h"
  56:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #include "../../include/lwip/stats.h"
  57:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #include "../../port/include/arch/perf.h"
  58:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
  59:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #include <string.h>
  60:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
  61:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** /** Set this to 0 in the rare case of wanting to call an extra function to
  62:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * generate the IP checksum (in contrast to calculating it on-the-fly). */
  63:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #ifndef LWIP_INLINE_IP_CHKSUM
  64:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #define LWIP_INLINE_IP_CHKSUM   1
  65:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif
  66:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if LWIP_INLINE_IP_CHKSUM && CHECKSUM_GEN_IP
  67:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #define CHECKSUM_GEN_IP_INLINE  1
  68:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #else
  69:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #define CHECKSUM_GEN_IP_INLINE  0
  70:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif
  71:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
  72:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if LWIP_DHCP || defined(LWIP_IP_ACCEPT_UDP_PORT)
  73:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #define IP_ACCEPT_LINK_LAYER_ADDRESSING 1
  74:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
  75:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** /** Some defines for DHCP to let link-layer-addressed packets through while the
  76:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * netif is down.
  77:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * To use this in your own application/protocol, define LWIP_IP_ACCEPT_UDP_PORT
  78:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * to return 1 if the port is accepted and 0 if the port is not accepted.
  79:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  */
  80:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if LWIP_DHCP && defined(LWIP_IP_ACCEPT_UDP_PORT)
  81:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** /* accept DHCP client port and custom port */
  82:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #define IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(port) (((port) == PP_NTOHS(DHCP_CLIENT_PORT)) \
  83:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****          || (LWIP_IP_ACCEPT_UDP_PORT(port)))
  84:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #elif defined(LWIP_IP_ACCEPT_UDP_PORT) /* LWIP_DHCP && defined(LWIP_IP_ACCEPT_UDP_PORT) */
  85:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** /* accept custom port only */
  86:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #define IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(port) (LWIP_IP_ACCEPT_UDP_PORT(port))
  87:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #else /* LWIP_DHCP && defined(LWIP_IP_ACCEPT_UDP_PORT) */
  88:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** /* accept DHCP client port only */
  89:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #define IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(port) ((port) == PP_NTOHS(DHCP_CLIENT_PORT))
  90:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* LWIP_DHCP && defined(LWIP_IP_ACCEPT_UDP_PORT) */
  91:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
  92:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #else /* LWIP_DHCP */
  93:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #define IP_ACCEPT_LINK_LAYER_ADDRESSING 0
  94:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* LWIP_DHCP */
  95:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
  96:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** /**
  97:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * The interface that provided the packet for the current callback
  98:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * invocation.
  99:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  */
 100:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** struct netif *current_netif;
 101:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 102:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** /**
 103:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * Header of the input packet currently being processed.
 104:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  */
 105:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** const struct ip_hdr *current_header;
 106:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** /** Source IP address of current_header */
 107:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** ip_addr_t current_iphdr_src;
 108:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** /** Destination IP address of current_header */
 109:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** ip_addr_t current_iphdr_dest;
 110:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 111:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** /** The IP header ID of the next outgoing IP packet */
 112:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** static u16_t ip_id;
 113:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 114:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** /**
 115:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * Finds the appropriate network interface for a given IP address. It
 116:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * searches the list of network interfaces linearly. A match is found
 117:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * if the masked IP address of the network interface equals the masked
 118:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * IP address given to the function.
 119:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  *
 120:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @param dest the destination IP address for which to find the route
 121:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @return the netif on which to send to reach dest
 122:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  */
 123:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** struct netif *
 124:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** ip_route(ip_addr_t *dest)
 125:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** {
  38              	 .loc 1 125 0
  39              	 .cfi_startproc
  40              	 
  41              	 
  42              	 
  43 0000 80B4     	 push {r7}
  44              	.LCFI0:
  45              	 .cfi_def_cfa_offset 4
  46              	 .cfi_offset 7,-4
  47 0002 85B0     	 sub sp,sp,#20
  48              	.LCFI1:
  49              	 .cfi_def_cfa_offset 24
  50 0004 00AF     	 add r7,sp,#0
  51              	.LCFI2:
  52              	 .cfi_def_cfa_register 7
  53 0006 7860     	 str r0,[r7,#4]
 126:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   struct netif *netif;
 127:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 128:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #ifdef LWIP_HOOK_IP4_ROUTE
 129:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   netif = LWIP_HOOK_IP4_ROUTE(dest);
 130:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if (netif != NULL) {
 131:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     return netif;
 132:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 133:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif
 134:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 135:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* iterate through netifs */
 136:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   for (netif = netif_list; netif != NULL; netif = netif->next) {
  54              	 .loc 1 136 0
  55 0008 194B     	 ldr r3,.L8
  56 000a 1B68     	 ldr r3,[r3]
  57 000c FB60     	 str r3,[r7,#12]
  58 000e 15E0     	 b .L2
  59              	.L5:
 137:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     /* network mask matches? */
 138:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     if (netif_is_up(netif)) {
  60              	 .loc 1 138 0
  61 0010 FB68     	 ldr r3,[r7,#12]
  62 0012 93F82D30 	 ldrb r3,[r3,#45]
  63 0016 03F00103 	 and r3,r3,#1
  64 001a 002B     	 cmp r3,#0
  65 001c 0BD0     	 beq .L3
 139:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
  66              	 .loc 1 139 0
  67 001e 7B68     	 ldr r3,[r7,#4]
  68 0020 1A68     	 ldr r2,[r3]
  69 0022 FB68     	 ldr r3,[r7,#12]
  70 0024 5B68     	 ldr r3,[r3,#4]
  71 0026 5A40     	 eors r2,r2,r3
  72 0028 FB68     	 ldr r3,[r7,#12]
  73 002a 9B68     	 ldr r3,[r3,#8]
  74 002c 1340     	 ands r3,r3,r2
  75 002e 002B     	 cmp r3,#0
  76 0030 01D1     	 bne .L3
 140:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         /* return netif on which to forward IP packet */
 141:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         return netif;
  77              	 .loc 1 141 0
  78 0032 FB68     	 ldr r3,[r7,#12]
  79 0034 15E0     	 b .L4
  80              	.L3:
 136:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     /* network mask matches? */
  81              	 .loc 1 136 0 discriminator 2
  82 0036 FB68     	 ldr r3,[r7,#12]
  83 0038 1B68     	 ldr r3,[r3]
  84 003a FB60     	 str r3,[r7,#12]
  85              	.L2:
 136:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     /* network mask matches? */
  86              	 .loc 1 136 0 is_stmt 0 discriminator 1
  87 003c FB68     	 ldr r3,[r7,#12]
  88 003e 002B     	 cmp r3,#0
  89 0040 E6D1     	 bne .L5
 142:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       }
 143:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     }
 144:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 145:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
  90              	 .loc 1 145 0 is_stmt 1
  91 0042 0C4B     	 ldr r3,.L8+4
  92 0044 1B68     	 ldr r3,[r3]
  93 0046 002B     	 cmp r3,#0
  94 0048 07D0     	 beq .L6
  95              	 .loc 1 145 0 is_stmt 0 discriminator 1
  96 004a 0A4B     	 ldr r3,.L8+4
  97 004c 1B68     	 ldr r3,[r3]
  98 004e 93F82D30 	 ldrb r3,[r3,#45]
  99 0052 03F00103 	 and r3,r3,#1
 100 0056 002B     	 cmp r3,#0
 101 0058 01D1     	 bne .L7
 102              	.L6:
 146:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_
 147:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
 148:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     IP_STATS_INC(ip.rterr);
 149:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     snmp_inc_ipoutnoroutes();
 150:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     return NULL;
 103              	 .loc 1 150 0 is_stmt 1
 104 005a 0023     	 movs r3,#0
 105 005c 01E0     	 b .L4
 106              	.L7:
 151:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 152:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* no matching netif found, use default netif */
 153:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   return netif_default;
 107              	 .loc 1 153 0
 108 005e 054B     	 ldr r3,.L8+4
 109 0060 1B68     	 ldr r3,[r3]
 110              	.L4:
 154:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** }
 111              	 .loc 1 154 0
 112 0062 1846     	 mov r0,r3
 113 0064 1437     	 adds r7,r7,#20
 114              	.LCFI3:
 115              	 .cfi_def_cfa_offset 4
 116 0066 BD46     	 mov sp,r7
 117              	.LCFI4:
 118              	 .cfi_def_cfa_register 13
 119              	 
 120 0068 5DF8047B 	 ldr r7,[sp],#4
 121              	.LCFI5:
 122              	 .cfi_restore 7
 123              	 .cfi_def_cfa_offset 0
 124 006c 7047     	 bx lr
 125              	.L9:
 126 006e 00BF     	 .align 2
 127              	.L8:
 128 0070 00000000 	 .word netif_list
 129 0074 00000000 	 .word netif_default
 130              	 .cfi_endproc
 131              	.LFE128:
 133              	 .section .text.ip_input,"ax",%progbits
 134              	 .align 2
 135              	 .global ip_input
 136              	 .thumb
 137              	 .thumb_func
 139              	ip_input:
 140              	.LFB129:
 155:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 156:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if IP_FORWARD
 157:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** /**
 158:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * Determine whether an IP address is in a reserved set of addresses
 159:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * that may not be forwarded, or whether datagrams to that destination
 160:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * may be forwarded.
 161:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @param p the packet to forward
 162:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @param dest the destination IP address
 163:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @return 1: can forward 0: discard
 164:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  */
 165:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** static int
 166:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** ip_canforward(struct pbuf *p)
 167:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** {
 168:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   u32_t addr = ip4_addr_get_u32(ip_current_dest_addr());
 169:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 170:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if (p->flags & PBUF_FLAG_LLBCAST) {
 171:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     /* don't route link-layer broadcasts */
 172:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     return 0;
 173:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 174:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if ((p->flags & PBUF_FLAG_LLMCAST) && !IP_MULTICAST(addr)) {
 175:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     /* don't route link-layer multicasts unless the destination address is an IP
 176:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****        multicast address */
 177:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     return 0;
 178:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 179:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if (IP_EXPERIMENTAL(addr)) {
 180:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     return 0;
 181:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 182:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if (IP_CLASSA(addr)) {
 183:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     u32_t net = addr & IP_CLASSA_NET;
 184:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     if ((net == 0) || (net == (IP_LOOPBACKNET << IP_CLASSA_NSHIFT))) {
 185:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       /* don't route loopback packets */
 186:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       return 0;
 187:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     }
 188:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 189:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   return 1;
 190:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** }
 191:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 192:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** /**
 193:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * Forwards an IP packet. It finds an appropriate route for the
 194:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * packet, decrements the TTL value of the packet, adjusts the
 195:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * checksum and outputs the packet on the appropriate interface.
 196:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  *
 197:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @param p the packet to forward (p->payload points to IP header)
 198:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @param iphdr the IP header of the input packet
 199:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @param inp the netif on which this packet was received
 200:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  */
 201:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** static void
 202:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** ip_forward(struct pbuf *p, struct ip_hdr *iphdr, struct netif *inp)
 203:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** {
 204:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   struct netif *netif;
 205:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 206:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   PERF_START;
 207:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 208:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if (!ip_canforward(p)) {
 209:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     goto return_noroute;
 210:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 211:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 212:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* RFC3927 2.7: do not forward link-local addresses */
 213:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if (ip_addr_islinklocal(&current_iphdr_dest)) {
 214:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     LWIP_DEBUGF(IP_DEBUG, ("ip_forward: not forwarding LLA %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 215:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       ip4_addr1_16(&current_iphdr_dest), ip4_addr2_16(&current_iphdr_dest),
 216:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       ip4_addr3_16(&current_iphdr_dest), ip4_addr4_16(&current_iphdr_dest)));
 217:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     goto return_noroute;
 218:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 219:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 220:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* Find network interface where to forward this IP packet to. */
 221:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   netif = ip_route(&current_iphdr_dest);
 222:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if (netif == NULL) {
 223:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     LWIP_DEBUGF(IP_DEBUG, ("ip_forward: no forwarding route for %"U16_F".%"U16_F".%"U16_F".%"U16_F"
 224:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       ip4_addr1_16(&current_iphdr_dest), ip4_addr2_16(&current_iphdr_dest),
 225:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       ip4_addr3_16(&current_iphdr_dest), ip4_addr4_16(&current_iphdr_dest)));
 226:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     /* @todo: send ICMP_DUR_NET? */
 227:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     goto return_noroute;
 228:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 229:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if !IP_FORWARD_ALLOW_TX_ON_RX_NETIF
 230:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* Do not forward packets onto the same network interface on which
 231:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****    * they arrived. */
 232:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if (netif == inp) {
 233:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     LWIP_DEBUGF(IP_DEBUG, ("ip_forward: not bouncing packets back on incoming interface.\n"));
 234:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     goto return_noroute;
 235:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 236:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* IP_FORWARD_ALLOW_TX_ON_RX_NETIF */
 237:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 238:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* decrement TTL */
 239:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   IPH_TTL_SET(iphdr, IPH_TTL(iphdr) - 1);
 240:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* send ICMP if TTL == 0 */
 241:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if (IPH_TTL(iphdr) == 0) {
 242:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     snmp_inc_ipinhdrerrors();
 243:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if LWIP_ICMP
 244:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     /* Don't send ICMP messages in response to ICMP messages */
 245:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     if (IPH_PROTO(iphdr) != IP_PROTO_ICMP) {
 246:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       icmp_time_exceeded(p, ICMP_TE_TTL);
 247:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     }
 248:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* LWIP_ICMP */
 249:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     return;
 250:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 251:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 252:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* Incrementally update the IP checksum. */
 253:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if (IPH_CHKSUM(iphdr) >= PP_HTONS(0xffffU - 0x100)) {
 254:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     IPH_CHKSUM_SET(iphdr, IPH_CHKSUM(iphdr) + PP_HTONS(0x100) + 1);
 255:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   } else {
 256:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     IPH_CHKSUM_SET(iphdr, IPH_CHKSUM(iphdr) + PP_HTONS(0x100));
 257:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 258:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 259:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   LWIP_DEBUGF(IP_DEBUG, ("ip_forward: forwarding packet to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 260:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     ip4_addr1_16(&current_iphdr_dest), ip4_addr2_16(&current_iphdr_dest),
 261:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     ip4_addr3_16(&current_iphdr_dest), ip4_addr4_16(&current_iphdr_dest)));
 262:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 263:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   IP_STATS_INC(ip.fw);
 264:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   IP_STATS_INC(ip.xmit);
 265:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   snmp_inc_ipforwdatagrams();
 266:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 267:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   PERF_STOP("ip_forward");
 268:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* don't fragment if interface has mtu set to 0 [loopif] */
 269:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if (netif->mtu && (p->tot_len > netif->mtu)) {
 270:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     if ((IPH_OFFSET(iphdr) & PP_NTOHS(IP_DF)) == 0) {
 271:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if IP_FRAG
 272:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       ip_frag(p, netif, ip_current_dest_addr());
 273:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #else /* IP_FRAG */
 274:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       /* @todo: send ICMP Destination Unreacheable code 13 "Communication administratively prohibit
 275:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* IP_FRAG */
 276:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     } else {
 277:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       /* send ICMP Destination Unreacheable code 4: "Fragmentation Needed and DF Set" */
 278:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       icmp_dest_unreach(p, ICMP_DUR_FRAG);
 279:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     }
 280:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     return;
 281:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 282:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* transmit pbuf on chosen interface */
 283:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   netif->output(netif, p, &current_iphdr_dest);
 284:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   return;
 285:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** return_noroute:
 286:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   snmp_inc_ipoutnoroutes();
 287:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** }
 288:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* IP_FORWARD */
 289:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 290:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** /**
 291:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * This function is called by the network interface device driver when
 292:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * an IP packet is received. The function does the basic checks of the
 293:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * IP header such as packet size being at least larger than the header
 294:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * size etc. If the packet was not destined for us, the packet is
 295:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * forwarded (using ip_forward). The IP checksum is always checked.
 296:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  *
 297:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * Finally, the packet is sent to the upper layer protocol input function.
 298:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * 
 299:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @param p the received IP packet (p->payload points to IP header)
 300:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @param inp the netif on which this packet was received
 301:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 302:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  *         processed, but currently always returns ERR_OK)
 303:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  */
 304:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** err_t
 305:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** ip_input(struct pbuf *p, struct netif *inp)
 306:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** {
 141              	 .loc 1 306 0
 142              	 .cfi_startproc
 143              	 
 144              	 
 145 0000 80B5     	 push {r7,lr}
 146              	.LCFI6:
 147              	 .cfi_def_cfa_offset 8
 148              	 .cfi_offset 7,-8
 149              	 .cfi_offset 14,-4
 150 0002 86B0     	 sub sp,sp,#24
 151              	.LCFI7:
 152              	 .cfi_def_cfa_offset 32
 153 0004 00AF     	 add r7,sp,#0
 154              	.LCFI8:
 155              	 .cfi_def_cfa_register 7
 156 0006 7860     	 str r0,[r7,#4]
 157 0008 3960     	 str r1,[r7]
 307:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   struct ip_hdr *iphdr;
 308:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   struct netif *netif;
 309:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   u16_t iphdr_hlen;
 310:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   u16_t iphdr_len;
 311:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if IP_ACCEPT_LINK_LAYER_ADDRESSING
 312:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   int check_ip_src=1;
 313:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
 314:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 315:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   IP_STATS_INC(ip.recv);
 316:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   snmp_inc_ipinreceives();
 317:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 318:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* identify the IP header */
 319:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   iphdr = (struct ip_hdr *)p->payload;
 158              	 .loc 1 319 0
 159 000a 7B68     	 ldr r3,[r7,#4]
 160 000c 5B68     	 ldr r3,[r3,#4]
 161 000e FB60     	 str r3,[r7,#12]
 320:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if (IPH_V(iphdr) != 4) {
 162              	 .loc 1 320 0
 163 0010 FB68     	 ldr r3,[r7,#12]
 164 0012 1B78     	 ldrb r3,[r3]
 165 0014 1B09     	 lsrs r3,r3,#4
 166 0016 DBB2     	 uxtb r3,r3
 167 0018 042B     	 cmp r3,#4
 168 001a 04D0     	 beq .L11
 321:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"
 322:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     ip_debug_print(p);
 323:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     pbuf_free(p);
 169              	 .loc 1 323 0
 170 001c 7868     	 ldr r0,[r7,#4]
 171 001e FFF7FEFF 	 bl pbuf_free
 324:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     IP_STATS_INC(ip.err);
 325:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     IP_STATS_INC(ip.drop);
 326:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     snmp_inc_ipinhdrerrors();
 327:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     return ERR_OK;
 172              	 .loc 1 327 0
 173 0022 0023     	 movs r3,#0
 174 0024 00E1     	 b .L12
 175              	.L11:
 328:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 329:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 330:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #ifdef LWIP_HOOK_IP4_INPUT
 331:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if (LWIP_HOOK_IP4_INPUT(p, inp)) {
 332:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     /* the packet has been eaten */
 333:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     return ERR_OK;
 334:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 335:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif
 336:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 337:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* obtain IP header length in number of 32-bit words */
 338:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   iphdr_hlen = IPH_HL(iphdr);
 176              	 .loc 1 338 0
 177 0026 FB68     	 ldr r3,[r7,#12]
 178 0028 1B78     	 ldrb r3,[r3]
 179 002a 9BB2     	 uxth r3,r3
 180 002c 03F00F03 	 and r3,r3,#15
 181 0030 7B81     	 strh r3,[r7,#10]
 339:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* calculate IP header length in bytes */
 340:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   iphdr_hlen *= 4;
 182              	 .loc 1 340 0
 183 0032 7B89     	 ldrh r3,[r7,#10]
 184 0034 9B00     	 lsls r3,r3,#2
 185 0036 7B81     	 strh r3,[r7,#10]
 341:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* obtain ip length in bytes */
 342:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   iphdr_len = ntohs(IPH_LEN(iphdr));
 186              	 .loc 1 342 0
 187 0038 FB68     	 ldr r3,[r7,#12]
 188 003a 5B88     	 ldrh r3,[r3,#2]
 189 003c 9BB2     	 uxth r3,r3
 190 003e 1846     	 mov r0,r3
 191 0040 FFF7FEFF 	 bl lwip_ntohs
 192 0044 0346     	 mov r3,r0
 193 0046 3B81     	 strh r3,[r7,#8]
 343:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 344:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
 345:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
 194              	 .loc 1 345 0
 195 0048 7B68     	 ldr r3,[r7,#4]
 196 004a 5B89     	 ldrh r3,[r3,#10]
 197 004c 7A89     	 ldrh r2,[r7,#10]
 198 004e 9A42     	 cmp r2,r3
 199 0050 04D8     	 bhi .L13
 200              	 .loc 1 345 0 is_stmt 0 discriminator 1
 201 0052 7B68     	 ldr r3,[r7,#4]
 202 0054 1B89     	 ldrh r3,[r3,#8]
 203 0056 3A89     	 ldrh r2,[r7,#8]
 204 0058 9A42     	 cmp r2,r3
 205 005a 04D9     	 bls .L14
 206              	.L13:
 346:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     if (iphdr_hlen > p->len) {
 347:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 348:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         ("IP header (len %"U16_F") does not fit in first pbuf (len %"U16_F"), IP packet dropped.\n"
 349:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         iphdr_hlen, p->len));
 350:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     }
 351:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     if (iphdr_len > p->tot_len) {
 352:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 353:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
 354:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         iphdr_len, p->tot_len));
 355:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     }
 356:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     /* free (drop) packet pbufs */
 357:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     pbuf_free(p);
 207              	 .loc 1 357 0 is_stmt 1
 208 005c 7868     	 ldr r0,[r7,#4]
 209 005e FFF7FEFF 	 bl pbuf_free
 358:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     IP_STATS_INC(ip.lenerr);
 359:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     IP_STATS_INC(ip.drop);
 360:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     snmp_inc_ipindiscards();
 361:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     return ERR_OK;
 210              	 .loc 1 361 0
 211 0062 0023     	 movs r3,#0
 212 0064 E0E0     	 b .L12
 213              	.L14:
 362:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 363:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 364:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* verify checksum */
 365:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if CHECKSUM_CHECK_IP
 366:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 367:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 368:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 369:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
 370:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     ip_debug_print(p);
 371:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     pbuf_free(p);
 372:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     IP_STATS_INC(ip.chkerr);
 373:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     IP_STATS_INC(ip.drop);
 374:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     snmp_inc_ipinhdrerrors();
 375:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     return ERR_OK;
 376:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 377:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif
 378:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 379:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* Trim pbuf. This should have been done at the netif layer,
 380:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****    * but we'll do it anyway just to be sure that its done. */
 381:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   pbuf_realloc(p, iphdr_len);
 214              	 .loc 1 381 0
 215 0066 3B89     	 ldrh r3,[r7,#8]
 216 0068 7868     	 ldr r0,[r7,#4]
 217 006a 1946     	 mov r1,r3
 218 006c FFF7FEFF 	 bl pbuf_realloc
 382:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 383:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* copy IP addresses to aligned ip_addr_t */
 384:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   ip_addr_copy(current_iphdr_dest, iphdr->dest);
 219              	 .loc 1 384 0
 220 0070 FB68     	 ldr r3,[r7,#12]
 221 0072 1B69     	 ldr r3,[r3,#16]
 222 0074 6F4A     	 ldr r2,.L36
 223 0076 1360     	 str r3,[r2]
 385:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   ip_addr_copy(current_iphdr_src, iphdr->src);
 224              	 .loc 1 385 0
 225 0078 FB68     	 ldr r3,[r7,#12]
 226 007a DB68     	 ldr r3,[r3,#12]
 227 007c 6E4A     	 ldr r2,.L36+4
 228 007e 1360     	 str r3,[r2]
 386:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 387:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* match packet against an interface, i.e. is this packet for us? */
 388:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if LWIP_IGMP
 389:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if (ip_addr_ismulticast(&current_iphdr_dest)) {
 229              	 .loc 1 389 0
 230 0080 6C4B     	 ldr r3,.L36
 231 0082 1B68     	 ldr r3,[r3]
 232 0084 03F0F003 	 and r3,r3,#240
 233 0088 E02B     	 cmp r3,#224
 234 008a 13D1     	 bne .L15
 390:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, &current_iphdr_dest))) {
 235              	 .loc 1 390 0
 236 008c 3B68     	 ldr r3,[r7]
 237 008e 93F82D30 	 ldrb r3,[r3,#45]
 238 0092 DBB2     	 uxtb r3,r3
 239 0094 5BB2     	 sxtb r3,r3
 240 0096 002B     	 cmp r3,#0
 241 0098 09DA     	 bge .L16
 242              	 .loc 1 390 0 is_stmt 0 discriminator 1
 243 009a 3868     	 ldr r0,[r7]
 244 009c 6549     	 ldr r1,.L36
 245 009e FFF7FEFF 	 bl igmp_lookfor_group
 246 00a2 0346     	 mov r3,r0
 247 00a4 002B     	 cmp r3,#0
 248 00a6 02D0     	 beq .L16
 391:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       netif = inp;
 249              	 .loc 1 391 0 is_stmt 1
 250 00a8 3B68     	 ldr r3,[r7]
 251 00aa 7B61     	 str r3,[r7,#20]
 252 00ac 3AE0     	 b .L18
 253              	.L16:
 392:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     } else {
 393:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       netif = NULL;
 254              	 .loc 1 393 0
 255 00ae 0023     	 movs r3,#0
 256 00b0 7B61     	 str r3,[r7,#20]
 257 00b2 37E0     	 b .L18
 258              	.L15:
 259              	.LBB2:
 394:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     }
 395:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   } else
 396:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* LWIP_IGMP */
 397:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   {
 398:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     /* start trying with inp. if that's not acceptable, start walking the
 399:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****        list of configured netifs.
 400:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****        'first' is used as a boolean to mark whether we started walking the list */
 401:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     int first = 1;
 260              	 .loc 1 401 0
 261 00b4 0123     	 movs r3,#1
 262 00b6 3B61     	 str r3,[r7,#16]
 402:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     netif = inp;
 263              	 .loc 1 402 0
 264 00b8 3B68     	 ldr r3,[r7]
 265 00ba 7B61     	 str r3,[r7,#20]
 266              	.L23:
 403:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     do {
 404:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       LWIP_DEBUGF(IP_DEBUG, ("ip_input: iphdr->dest 0x%"X32_F" netif->ip_addr 0x%"X32_F" (0x%"X32_F
 405:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****           ip4_addr_get_u32(&iphdr->dest), ip4_addr_get_u32(&netif->ip_addr),
 406:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****           ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(&netif->netmask),
 407:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****           ip4_addr_get_u32(&netif->ip_addr) & ip4_addr_get_u32(&netif->netmask),
 408:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****           ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));
 409:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 410:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       /* interface is up and configured? */
 411:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
 267              	 .loc 1 411 0
 268 00bc 7B69     	 ldr r3,[r7,#20]
 269 00be 93F82D30 	 ldrb r3,[r3,#45]
 270 00c2 03F00103 	 and r3,r3,#1
 271 00c6 002B     	 cmp r3,#0
 272 00c8 16D0     	 beq .L19
 273              	 .loc 1 411 0 is_stmt 0 discriminator 1
 274 00ca 7B69     	 ldr r3,[r7,#20]
 275 00cc 0433     	 adds r3,r3,#4
 276 00ce 002B     	 cmp r3,#0
 277 00d0 12D0     	 beq .L19
 278              	 .loc 1 411 0 discriminator 2
 279 00d2 7B69     	 ldr r3,[r7,#20]
 280 00d4 5B68     	 ldr r3,[r3,#4]
 281 00d6 002B     	 cmp r3,#0
 282 00d8 0ED0     	 beq .L19
 412:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         /* unicast to this interface address? */
 413:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
 283              	 .loc 1 413 0 is_stmt 1
 284 00da 564B     	 ldr r3,.L36
 285 00dc 1A68     	 ldr r2,[r3]
 286 00de 7B69     	 ldr r3,[r7,#20]
 287 00e0 5B68     	 ldr r3,[r3,#4]
 288 00e2 9A42     	 cmp r2,r3
 289 00e4 1ED0     	 beq .L18
 414:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****             /* or broadcast on this interface network address? */
 415:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****             ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
 290              	 .loc 1 415 0 discriminator 1
 291 00e6 534B     	 ldr r3,.L36
 292 00e8 1B68     	 ldr r3,[r3]
 293 00ea 1846     	 mov r0,r3
 294 00ec 7969     	 ldr r1,[r7,#20]
 295 00ee FFF7FEFF 	 bl ip4_addr_isbroadcast
 296 00f2 0346     	 mov r3,r0
 413:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****             /* or broadcast on this interface network address? */
 297              	 .loc 1 413 0 discriminator 1
 298 00f4 002B     	 cmp r3,#0
 299 00f6 15D1     	 bne .L18
 300              	.L19:
 416:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****           LWIP_DEBUGF(IP_DEBUG, ("ip_input: packet accepted on interface %c%c\n",
 417:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****               netif->name[0], netif->name[1]));
 418:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****           /* break out of for loop */
 419:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****           break;
 420:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         }
 421:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if LWIP_AUTOIP
 422:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         /* connections to link-local addresses must persist after changing
 423:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****            the netif's address (RFC3927 ch. 1.9) */
 424:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         if ((netif->autoip != NULL) &&
 425:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****             ip_addr_cmp(&current_iphdr_dest, &(netif->autoip->llipaddr))) {
 426:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****           LWIP_DEBUGF(IP_DEBUG, ("ip_input: LLA packet accepted on interface %c%c\n",
 427:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****               netif->name[0], netif->name[1]));
 428:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****           /* break out of for loop */
 429:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****           break;
 430:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         }
 431:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* LWIP_AUTOIP */
 432:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       }
 433:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       if (first) {
 301              	 .loc 1 433 0
 302 00f8 3B69     	 ldr r3,[r7,#16]
 303 00fa 002B     	 cmp r3,#0
 304 00fc 05D0     	 beq .L20
 434:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         first = 0;
 305              	 .loc 1 434 0
 306 00fe 0023     	 movs r3,#0
 307 0100 3B61     	 str r3,[r7,#16]
 435:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         netif = netif_list;
 308              	 .loc 1 435 0
 309 0102 4E4B     	 ldr r3,.L36+8
 310 0104 1B68     	 ldr r3,[r3]
 311 0106 7B61     	 str r3,[r7,#20]
 312 0108 02E0     	 b .L21
 313              	.L20:
 436:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       } else {
 437:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         netif = netif->next;
 314              	 .loc 1 437 0
 315 010a 7B69     	 ldr r3,[r7,#20]
 316 010c 1B68     	 ldr r3,[r3]
 317 010e 7B61     	 str r3,[r7,#20]
 318              	.L21:
 438:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       }
 439:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       if (netif == inp) {
 319              	 .loc 1 439 0
 320 0110 7A69     	 ldr r2,[r7,#20]
 321 0112 3B68     	 ldr r3,[r7]
 322 0114 9A42     	 cmp r2,r3
 323 0116 02D1     	 bne .L22
 440:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         netif = netif->next;
 324              	 .loc 1 440 0
 325 0118 7B69     	 ldr r3,[r7,#20]
 326 011a 1B68     	 ldr r3,[r3]
 327 011c 7B61     	 str r3,[r7,#20]
 328              	.L22:
 441:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       }
 442:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     } while(netif != NULL);
 329              	 .loc 1 442 0
 330 011e 7B69     	 ldr r3,[r7,#20]
 331 0120 002B     	 cmp r3,#0
 332 0122 CBD1     	 bne .L23
 333              	.L18:
 334              	.LBE2:
 443:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 444:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 445:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if IP_ACCEPT_LINK_LAYER_ADDRESSING
 446:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* Pass DHCP messages regardless of destination address. DHCP traffic is addressed
 447:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****    * using link layer addressing (such as Ethernet MAC) so we must not filter on IP.
 448:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****    * According to RFC 1542 section 3.1.1, referred by RFC 2131).
 449:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****    *
 450:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****    * If you want to accept private broadcast communication while a netif is down,
 451:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****    * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
 452:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****    *
 453:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****    * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
 454:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****    */
 455:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if (netif == NULL) {
 456:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     /* remote port is DHCP server? */
 457:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 458:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 459:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: UDP packet to DHCP client port %"U16_F"\n"
 460:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         ntohs(udphdr->dest)));
 461:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 462:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: DHCP packet accepted.\n"));
 463:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         netif = inp;
 464:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         check_ip_src = 0;
 465:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       }
 466:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     }
 467:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 468:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
 469:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 470:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
 471:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if IP_ACCEPT_LINK_LAYER_ADDRESSING
 472:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
 473:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
 474:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
 475:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
 335              	 .loc 1 475 0
 336 0124 444B     	 ldr r3,.L36+4
 337 0126 1B68     	 ldr r3,[r3]
 338 0128 1846     	 mov r0,r3
 339 012a 3968     	 ldr r1,[r7]
 340 012c FFF7FEFF 	 bl ip4_addr_isbroadcast
 341 0130 0346     	 mov r3,r0
 342 0132 002B     	 cmp r3,#0
 343 0134 05D1     	 bne .L24
 476:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****          (ip_addr_ismulticast(&current_iphdr_src))) {
 344              	 .loc 1 476 0 discriminator 1
 345 0136 404B     	 ldr r3,.L36+4
 346 0138 1B68     	 ldr r3,[r3]
 347 013a 03F0F003 	 and r3,r3,#240
 475:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****          (ip_addr_ismulticast(&current_iphdr_src))) {
 348              	 .loc 1 475 0 discriminator 1
 349 013e E02B     	 cmp r3,#224
 350 0140 04D1     	 bne .L25
 351              	.L24:
 477:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       /* packet source is not valid */
 478:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip_input: packet source is 
 479:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       /* free (drop) packet pbufs */
 480:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       pbuf_free(p);
 352              	 .loc 1 480 0
 353 0142 7868     	 ldr r0,[r7,#4]
 354 0144 FFF7FEFF 	 bl pbuf_free
 481:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       IP_STATS_INC(ip.drop);
 482:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       snmp_inc_ipinaddrerrors();
 483:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       snmp_inc_ipindiscards();
 484:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       return ERR_OK;
 355              	 .loc 1 484 0
 356 0148 0023     	 movs r3,#0
 357 014a 6DE0     	 b .L12
 358              	.L25:
 485:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     }
 486:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 487:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 488:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* packet not for us? */
 489:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if (netif == NULL) {
 359              	 .loc 1 489 0
 360 014c 7B69     	 ldr r3,[r7,#20]
 361 014e 002B     	 cmp r3,#0
 362 0150 04D1     	 bne .L26
 490:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     /* packet not for us, route or discard */
 491:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: packet not for us.\n"));
 492:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if IP_FORWARD
 493:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     /* non-broadcast packet? */
 494:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     if (!ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
 495:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       /* try to forward IP packet on (other) interfaces */
 496:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       ip_forward(p, iphdr, inp);
 497:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     } else
 498:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* IP_FORWARD */
 499:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     {
 500:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       snmp_inc_ipinaddrerrors();
 501:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       snmp_inc_ipindiscards();
 502:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     }
 503:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     pbuf_free(p);
 363              	 .loc 1 503 0
 364 0152 7868     	 ldr r0,[r7,#4]
 365 0154 FFF7FEFF 	 bl pbuf_free
 504:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     return ERR_OK;
 366              	 .loc 1 504 0
 367 0158 0023     	 movs r3,#0
 368 015a 65E0     	 b .L12
 369              	.L26:
 505:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 506:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* packet consists of multiple fragments? */
 507:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 370              	 .loc 1 507 0
 371 015c FB68     	 ldr r3,[r7,#12]
 372 015e DB88     	 ldrh r3,[r3,#6]
 373 0160 9BB2     	 uxth r3,r3
 374 0162 1A46     	 mov r2,r3
 375 0164 4FF63F73 	 movw r3,#65343
 376 0168 1340     	 ands r3,r3,r2
 377 016a 002B     	 cmp r3,#0
 378 016c 04D0     	 beq .L27
 508:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if IP_REASSEMBLY /* packet fragment reassembly code present? */
 509:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" 
 510:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       ntohs(IPH_ID(iphdr)), p->tot_len, ntohs(IPH_LEN(iphdr)), !!(IPH_OFFSET(iphdr) & PP_HTONS(IP_M
 511:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     /* reassemble the packet*/
 512:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     p = ip_reass(p);
 513:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     /* packet not fully reassembled yet? */
 514:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     if (p == NULL) {
 515:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       return ERR_OK;
 516:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     }
 517:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     iphdr = (struct ip_hdr *)p->payload;
 518:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #else /* IP_REASSEMBLY == 0, no packet fragment reassembly code present */
 519:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     pbuf_free(p);
 379              	 .loc 1 519 0
 380 016e 7868     	 ldr r0,[r7,#4]
 381 0170 FFF7FEFF 	 bl pbuf_free
 520:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since it was fragmented (0x%
 521:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       ntohs(IPH_OFFSET(iphdr))));
 522:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     IP_STATS_INC(ip.opterr);
 523:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     IP_STATS_INC(ip.drop);
 524:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     /* unsupported protocol feature */
 525:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     snmp_inc_ipinunknownprotos();
 526:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     return ERR_OK;
 382              	 .loc 1 526 0
 383 0174 0023     	 movs r3,#0
 384 0176 57E0     	 b .L12
 385              	.L27:
 527:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* IP_REASSEMBLY */
 528:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 529:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 530:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if IP_OPTIONS_ALLOWED == 0 /* no support for IP options in the IP header? */
 531:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 532:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if LWIP_IGMP
 533:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* there is an extra "router alert" option in IGMP messages which we allow for but do not police 
 534:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if((iphdr_hlen > IP_HLEN) &&  (IPH_PROTO(iphdr) != IP_PROTO_IGMP)) {
 386              	 .loc 1 534 0
 387 0178 7B89     	 ldrh r3,[r7,#10]
 388 017a 142B     	 cmp r3,#20
 389 017c 08D9     	 bls .L28
 390              	 .loc 1 534 0 is_stmt 0 discriminator 1
 391 017e FB68     	 ldr r3,[r7,#12]
 392 0180 5B7A     	 ldrb r3,[r3,#9]
 393 0182 022B     	 cmp r3,#2
 394 0184 04D0     	 beq .L28
 535:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #else
 536:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if (iphdr_hlen > IP_HLEN) {
 537:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* LWIP_IGMP */
 538:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since there were IP options 
 539:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     pbuf_free(p);
 395              	 .loc 1 539 0 is_stmt 1
 396 0186 7868     	 ldr r0,[r7,#4]
 397 0188 FFF7FEFF 	 bl pbuf_free
 540:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     IP_STATS_INC(ip.opterr);
 541:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     IP_STATS_INC(ip.drop);
 542:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     /* unsupported protocol feature */
 543:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     snmp_inc_ipinunknownprotos();
 544:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     return ERR_OK;
 398              	 .loc 1 544 0
 399 018c 0023     	 movs r3,#0
 400 018e 4BE0     	 b .L12
 401              	.L28:
 545:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 546:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* IP_OPTIONS_ALLOWED == 0 */
 547:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 548:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* send to upper layers */
 549:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
 550:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   ip_debug_print(p);
 551:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));
 552:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 553:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   current_netif = inp;
 402              	 .loc 1 553 0
 403 0190 2B4A     	 ldr r2,.L36+12
 404 0192 3B68     	 ldr r3,[r7]
 405 0194 1360     	 str r3,[r2]
 554:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   current_header = iphdr;
 406              	 .loc 1 554 0
 407 0196 2B4A     	 ldr r2,.L36+16
 408 0198 FB68     	 ldr r3,[r7,#12]
 409 019a 1360     	 str r3,[r2]
 555:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 556:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if LWIP_RAW
 557:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* raw input did not eat the packet? */
 558:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if (raw_input(p, inp) == 0)
 410              	 .loc 1 558 0
 411 019c 7868     	 ldr r0,[r7,#4]
 412 019e 3968     	 ldr r1,[r7]
 413 01a0 FFF7FEFF 	 bl raw_input
 414 01a4 0346     	 mov r3,r0
 415 01a6 002B     	 cmp r3,#0
 416 01a8 31D1     	 bne .L29
 559:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* LWIP_RAW */
 560:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   {
 561:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     switch (IPH_PROTO(iphdr)) {
 417              	 .loc 1 561 0
 418 01aa FB68     	 ldr r3,[r7,#12]
 419 01ac 5B7A     	 ldrb r3,[r3,#9]
 420 01ae 022B     	 cmp r3,#2
 421 01b0 0ED0     	 beq .L31
 422 01b2 112B     	 cmp r3,#17
 423 01b4 02D0     	 beq .L32
 424 01b6 012B     	 cmp r3,#1
 425 01b8 05D0     	 beq .L33
 426 01ba 0FE0     	 b .L35
 427              	.L32:
 562:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if LWIP_UDP
 563:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     case IP_PROTO_UDP:
 564:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if LWIP_UDPLITE
 565:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     case IP_PROTO_UDPLITE:
 566:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* LWIP_UDPLITE */
 567:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       snmp_inc_ipindelivers();
 568:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       udp_input(p, inp);
 428              	 .loc 1 568 0
 429 01bc 7868     	 ldr r0,[r7,#4]
 430 01be 3968     	 ldr r1,[r7]
 431 01c0 FFF7FEFF 	 bl udp_input
 569:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       break;
 432              	 .loc 1 569 0
 433 01c4 23E0     	 b .L29
 434              	.L33:
 570:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* LWIP_UDP */
 571:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if LWIP_TCP
 572:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     case IP_PROTO_TCP:
 573:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       snmp_inc_ipindelivers();
 574:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       tcp_input(p, inp);
 575:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       break;
 576:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* LWIP_TCP */
 577:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if LWIP_ICMP
 578:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     case IP_PROTO_ICMP:
 579:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       snmp_inc_ipindelivers();
 580:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       icmp_input(p, inp);
 435              	 .loc 1 580 0
 436 01c6 7868     	 ldr r0,[r7,#4]
 437 01c8 3968     	 ldr r1,[r7]
 438 01ca FFF7FEFF 	 bl icmp_input
 581:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       break;
 439              	 .loc 1 581 0
 440 01ce 1EE0     	 b .L29
 441              	.L31:
 582:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* LWIP_ICMP */
 583:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if LWIP_IGMP
 584:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     case IP_PROTO_IGMP:
 585:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       igmp_input(p, inp, &current_iphdr_dest);
 442              	 .loc 1 585 0
 443 01d0 7868     	 ldr r0,[r7,#4]
 444 01d2 3968     	 ldr r1,[r7]
 445 01d4 174A     	 ldr r2,.L36
 446 01d6 FFF7FEFF 	 bl igmp_input
 586:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       break;
 447              	 .loc 1 586 0
 448 01da 18E0     	 b .L29
 449              	.L35:
 587:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* LWIP_IGMP */
 588:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     default:
 589:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if LWIP_ICMP
 590:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       /* send ICMP destination protocol unreachable unless is was a broadcast */
 591:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
 450              	 .loc 1 591 0
 451 01dc 154B     	 ldr r3,.L36
 452 01de 1B68     	 ldr r3,[r3]
 453 01e0 1846     	 mov r0,r3
 454 01e2 3968     	 ldr r1,[r7]
 455 01e4 FFF7FEFF 	 bl ip4_addr_isbroadcast
 456 01e8 0346     	 mov r3,r0
 457 01ea 002B     	 cmp r3,#0
 458 01ec 0CD1     	 bne .L34
 592:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****           !ip_addr_ismulticast(&current_iphdr_dest)) {
 459              	 .loc 1 592 0 discriminator 1
 460 01ee 114B     	 ldr r3,.L36
 461 01f0 1B68     	 ldr r3,[r3]
 462 01f2 03F0F003 	 and r3,r3,#240
 591:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****           !ip_addr_ismulticast(&current_iphdr_dest)) {
 463              	 .loc 1 591 0 discriminator 1
 464 01f6 E02B     	 cmp r3,#224
 465 01f8 06D0     	 beq .L34
 593:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         p->payload = iphdr;
 466              	 .loc 1 593 0
 467 01fa 7B68     	 ldr r3,[r7,#4]
 468 01fc FA68     	 ldr r2,[r7,#12]
 469 01fe 5A60     	 str r2,[r3,#4]
 594:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         icmp_dest_unreach(p, ICMP_DUR_PROTO);
 470              	 .loc 1 594 0
 471 0200 7868     	 ldr r0,[r7,#4]
 472 0202 0221     	 movs r1,#2
 473 0204 FFF7FEFF 	 bl icmp_dest_unreach
 474              	.L34:
 595:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       }
 596:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* LWIP_ICMP */
 597:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       pbuf_free(p);
 475              	 .loc 1 597 0
 476 0208 7868     	 ldr r0,[r7,#4]
 477 020a FFF7FEFF 	 bl pbuf_free
 478              	.L29:
 598:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 599:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", 
 600:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 601:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       IP_STATS_INC(ip.proterr);
 602:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       IP_STATS_INC(ip.drop);
 603:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       snmp_inc_ipinunknownprotos();
 604:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     }
 605:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 606:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 607:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   current_netif = NULL;
 479              	 .loc 1 607 0
 480 020e 0C4B     	 ldr r3,.L36+12
 481 0210 0022     	 movs r2,#0
 482 0212 1A60     	 str r2,[r3]
 608:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   current_header = NULL;
 483              	 .loc 1 608 0
 484 0214 0B4B     	 ldr r3,.L36+16
 485 0216 0022     	 movs r2,#0
 486 0218 1A60     	 str r2,[r3]
 609:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   ip_addr_set_any(&current_iphdr_src);
 487              	 .loc 1 609 0
 488 021a 074B     	 ldr r3,.L36+4
 489 021c 0022     	 movs r2,#0
 490 021e 1A60     	 str r2,[r3]
 610:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   ip_addr_set_any(&current_iphdr_dest);
 491              	 .loc 1 610 0
 492 0220 044B     	 ldr r3,.L36
 493 0222 0022     	 movs r2,#0
 494 0224 1A60     	 str r2,[r3]
 611:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 612:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   return ERR_OK;
 495              	 .loc 1 612 0
 496 0226 0023     	 movs r3,#0
 497              	.L12:
 498 0228 5BB2     	 sxtb r3,r3
 613:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** }
 499              	 .loc 1 613 0
 500 022a 1846     	 mov r0,r3
 501 022c 1837     	 adds r7,r7,#24
 502              	.LCFI9:
 503              	 .cfi_def_cfa_offset 8
 504 022e BD46     	 mov sp,r7
 505              	.LCFI10:
 506              	 .cfi_def_cfa_register 13
 507              	 
 508 0230 80BD     	 pop {r7,pc}
 509              	.L37:
 510 0232 00BF     	 .align 2
 511              	.L36:
 512 0234 00000000 	 .word current_iphdr_dest
 513 0238 00000000 	 .word current_iphdr_src
 514 023c 00000000 	 .word netif_list
 515 0240 00000000 	 .word current_netif
 516 0244 00000000 	 .word current_header
 517              	 .cfi_endproc
 518              	.LFE129:
 520              	 .section .text.ip_output_if,"ax",%progbits
 521              	 .align 2
 522              	 .global ip_output_if
 523              	 .thumb
 524              	 .thumb_func
 526              	ip_output_if:
 527              	.LFB130:
 614:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 615:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** /**
 616:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * Sends an IP packet on a network interface. This function constructs
 617:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * the IP header and calculates the IP header checksum. If the source
 618:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * IP address is NULL, the IP address of the outgoing network
 619:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * interface is filled in as source address.
 620:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * If the destination IP address is IP_HDRINCL, p is assumed to already
 621:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * include an IP header and p->payload points to it instead of the data.
 622:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  *
 623:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @param p the packet to send (p->payload points to the data, e.g. next
 624:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****             protocol header; if dest == IP_HDRINCL, p already includes an IP
 625:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****             header and p->payload points to that IP header)
 626:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @param src the source IP address to send from (if src == IP_ADDR_ANY, the
 627:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  *         IP  address of the netif used to send is used as source address)
 628:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @param dest the destination IP address to send the packet to
 629:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @param ttl the TTL value to be set in the IP header
 630:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @param tos the TOS value to be set in the IP header
 631:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @param proto the PROTOCOL to be set in the IP header
 632:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @param netif the netif on which to send this packet
 633:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @return ERR_OK if the packet was sent OK
 634:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 635:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  *         returns errors returned by netif->output
 636:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  *
 637:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @note ip_id: RFC791 "some host may be able to simply use
 638:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  *  unique identifiers independent of destination"
 639:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  */
 640:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** err_t
 641:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
 642:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****              u8_t ttl, u8_t tos,
 643:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****              u8_t proto, struct netif *netif)
 644:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** {
 528              	 .loc 1 644 0
 529              	 .cfi_startproc
 530              	 
 531              	 
 532 0000 90B5     	 push {r4,r7,lr}
 533              	.LCFI11:
 534              	 .cfi_def_cfa_offset 12
 535              	 .cfi_offset 4,-12
 536              	 .cfi_offset 7,-8
 537              	 .cfi_offset 14,-4
 538 0002 8BB0     	 sub sp,sp,#44
 539              	.LCFI12:
 540              	 .cfi_def_cfa_offset 56
 541 0004 06AF     	 add r7,sp,#24
 542              	.LCFI13:
 543              	 .cfi_def_cfa 7,32
 544 0006 F860     	 str r0,[r7,#12]
 545 0008 B960     	 str r1,[r7,#8]
 546 000a 7A60     	 str r2,[r7,#4]
 547 000c FB70     	 strb r3,[r7,#3]
 645:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if IP_OPTIONS_SEND
 646:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   return ip_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 548              	 .loc 1 646 0
 549 000e FC78     	 ldrb r4,[r7,#3]
 550 0010 97F82030 	 ldrb r3,[r7,#32]
 551 0014 0093     	 str r3,[sp]
 552 0016 97F82430 	 ldrb r3,[r7,#36]
 553 001a 0193     	 str r3,[sp,#4]
 554 001c BB6A     	 ldr r3,[r7,#40]
 555 001e 0293     	 str r3,[sp,#8]
 556 0020 0023     	 movs r3,#0
 557 0022 0393     	 str r3,[sp,#12]
 558 0024 0023     	 movs r3,#0
 559 0026 0493     	 str r3,[sp,#16]
 560 0028 F868     	 ldr r0,[r7,#12]
 561 002a B968     	 ldr r1,[r7,#8]
 562 002c 7A68     	 ldr r2,[r7,#4]
 563 002e 2346     	 mov r3,r4
 564 0030 FFF7FEFF 	 bl ip_output_if_opt
 565 0034 0346     	 mov r3,r0
 647:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** }
 566              	 .loc 1 647 0
 567 0036 1846     	 mov r0,r3
 568 0038 1437     	 adds r7,r7,#20
 569              	.LCFI14:
 570              	 .cfi_def_cfa_offset 12
 571 003a BD46     	 mov sp,r7
 572              	.LCFI15:
 573              	 .cfi_def_cfa_register 13
 574              	 
 575 003c 90BD     	 pop {r4,r7,pc}
 576              	 .cfi_endproc
 577              	.LFE130:
 579 003e 00BF     	 .section .text.ip_output_if_opt,"ax",%progbits
 580              	 .align 2
 581              	 .global ip_output_if_opt
 582              	 .thumb
 583              	 .thumb_func
 585              	ip_output_if_opt:
 586              	.LFB131:
 648:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 649:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** /**
 650:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * Same as ip_output_if() but with the possibility to include IP options:
 651:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  *
 652:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @ param ip_options pointer to the IP options, copied into the IP header
 653:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @ param optlen length of ip_options
 654:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  */
 655:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** err_t ip_output_if_opt(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
 656:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****        u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
 657:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****        u16_t optlen)
 658:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** {
 587              	 .loc 1 658 0
 588              	 .cfi_startproc
 589              	 
 590              	 
 591 0000 80B5     	 push {r7,lr}
 592              	.LCFI16:
 593              	 .cfi_def_cfa_offset 8
 594              	 .cfi_offset 7,-8
 595              	 .cfi_offset 14,-4
 596 0002 88B0     	 sub sp,sp,#32
 597              	.LCFI17:
 598              	 .cfi_def_cfa_offset 40
 599 0004 00AF     	 add r7,sp,#0
 600              	.LCFI18:
 601              	 .cfi_def_cfa_register 7
 602 0006 F860     	 str r0,[r7,#12]
 603 0008 B960     	 str r1,[r7,#8]
 604 000a 7A60     	 str r2,[r7,#4]
 605 000c FB70     	 strb r3,[r7,#3]
 659:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* IP_OPTIONS_SEND */
 660:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   struct ip_hdr *iphdr;
 661:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   ip_addr_t dest_addr;
 662:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if CHECKSUM_GEN_IP_INLINE
 663:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   u32_t chk_sum = 0;
 664:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 665:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 666:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
 667:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****      gets altered as the packet is passed down the stack */
 668:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   LWIP_ASSERT("p->ref == 1", p->ref == 1);
 669:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 670:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   snmp_inc_ipoutrequests();
 671:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 672:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* Should the IP header be generated or is it already included in p? */
 673:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if (dest != IP_HDRINCL) {
 606              	 .loc 1 673 0
 607 000e 7B68     	 ldr r3,[r7,#4]
 608 0010 002B     	 cmp r3,#0
 609 0012 00F08B80 	 beq .L41
 610              	.LBB3:
 674:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     u16_t ip_hlen = IP_HLEN;
 611              	 .loc 1 674 0
 612 0016 1423     	 movs r3,#20
 613 0018 FB83     	 strh r3,[r7,#30]
 675:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if IP_OPTIONS_SEND
 676:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     u16_t optlen_aligned = 0;
 614              	 .loc 1 676 0
 615 001a 0023     	 movs r3,#0
 616 001c BB83     	 strh r3,[r7,#28]
 677:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     if (optlen != 0) {
 617              	 .loc 1 677 0
 618 001e 3B8F     	 ldrh r3,[r7,#56]
 619 0020 002B     	 cmp r3,#0
 620 0022 2CD0     	 beq .L42
 678:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if CHECKSUM_GEN_IP_INLINE
 679:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       int i;
 680:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 681:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       /* round up to a multiple of 4 */
 682:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       optlen_aligned = ((optlen + 3) & ~3);
 621              	 .loc 1 682 0
 622 0024 3B8F     	 ldrh r3,[r7,#56]
 623 0026 0333     	 adds r3,r3,#3
 624 0028 9BB2     	 uxth r3,r3
 625 002a 23F00303 	 bic r3,r3,#3
 626 002e BB83     	 strh r3,[r7,#28]
 683:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       ip_hlen += optlen_aligned;
 627              	 .loc 1 683 0
 628 0030 FA8B     	 ldrh r2,[r7,#30]
 629 0032 BB8B     	 ldrh r3,[r7,#28]
 630 0034 1344     	 add r3,r3,r2
 631 0036 FB83     	 strh r3,[r7,#30]
 684:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       /* First write in the IP options */
 685:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       if (pbuf_header(p, optlen_aligned)) {
 632              	 .loc 1 685 0
 633 0038 BB8B     	 ldrh r3,[r7,#28]
 634 003a 1BB2     	 sxth r3,r3
 635 003c F868     	 ldr r0,[r7,#12]
 636 003e 1946     	 mov r1,r3
 637 0040 FFF7FEFF 	 bl pbuf_header
 638 0044 0346     	 mov r3,r0
 639 0046 002B     	 cmp r3,#0
 640 0048 01D0     	 beq .L43
 686:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output_if_opt: not enough room for IP o
 687:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         IP_STATS_INC(ip.err);
 688:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         snmp_inc_ipoutdiscards();
 689:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         return ERR_BUF;
 641              	 .loc 1 689 0
 642 004a FE23     	 movs r3,#254
 643 004c 7EE0     	 b .L50
 644              	.L43:
 690:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       }
 691:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       MEMCPY(p->payload, ip_options, optlen);
 645              	 .loc 1 691 0
 646 004e FB68     	 ldr r3,[r7,#12]
 647 0050 5A68     	 ldr r2,[r3,#4]
 648 0052 3B8F     	 ldrh r3,[r7,#56]
 649 0054 1046     	 mov r0,r2
 650 0056 796B     	 ldr r1,[r7,#52]
 651 0058 1A46     	 mov r2,r3
 652 005a FFF7FEFF 	 bl thumb2_memcpy
 692:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       if (optlen < optlen_aligned) {
 653              	 .loc 1 692 0
 654 005e 3A8F     	 ldrh r2,[r7,#56]
 655 0060 BB8B     	 ldrh r3,[r7,#28]
 656 0062 9A42     	 cmp r2,r3
 657 0064 0BD2     	 bcs .L42
 693:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         /* zero the remaining bytes */
 694:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         memset(((char*)p->payload) + optlen, 0, optlen_aligned - optlen);
 658              	 .loc 1 694 0
 659 0066 FB68     	 ldr r3,[r7,#12]
 660 0068 5A68     	 ldr r2,[r3,#4]
 661 006a 3B8F     	 ldrh r3,[r7,#56]
 662 006c D118     	 adds r1,r2,r3
 663 006e BA8B     	 ldrh r2,[r7,#28]
 664 0070 3B8F     	 ldrh r3,[r7,#56]
 665 0072 D31A     	 subs r3,r2,r3
 666 0074 0846     	 mov r0,r1
 667 0076 0021     	 movs r1,#0
 668 0078 1A46     	 mov r2,r3
 669 007a FFF7FEFF 	 bl memset
 670              	.L42:
 695:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       }
 696:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if CHECKSUM_GEN_IP_INLINE
 697:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       for (i = 0; i < optlen_aligned/2; i++) {
 698:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****         chk_sum += ((u16_t*)p->payload)[i];
 699:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       }
 700:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 701:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     }
 702:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* IP_OPTIONS_SEND */
 703:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     /* generate IP header */
 704:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     if (pbuf_header(p, IP_HLEN)) {
 671              	 .loc 1 704 0
 672 007e F868     	 ldr r0,[r7,#12]
 673 0080 1421     	 movs r1,#20
 674 0082 FFF7FEFF 	 bl pbuf_header
 675 0086 0346     	 mov r3,r0
 676 0088 002B     	 cmp r3,#0
 677 008a 01D0     	 beq .L45
 705:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output: not enough room for IP header in 
 706:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 707:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       IP_STATS_INC(ip.err);
 708:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       snmp_inc_ipoutdiscards();
 709:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       return ERR_BUF;
 678              	 .loc 1 709 0
 679 008c FE23     	 movs r3,#254
 680 008e 5DE0     	 b .L50
 681              	.L45:
 710:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     }
 711:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 712:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     iphdr = (struct ip_hdr *)p->payload;
 682              	 .loc 1 712 0
 683 0090 FB68     	 ldr r3,[r7,#12]
 684 0092 5B68     	 ldr r3,[r3,#4]
 685 0094 BB61     	 str r3,[r7,#24]
 713:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 714:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****                (p->len >= sizeof(struct ip_hdr)));
 715:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 716:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     IPH_TTL_SET(iphdr, ttl);
 686              	 .loc 1 716 0
 687 0096 BB69     	 ldr r3,[r7,#24]
 688 0098 FA78     	 ldrb r2,[r7,#3]
 689 009a 1A72     	 strb r2,[r3,#8]
 717:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     IPH_PROTO_SET(iphdr, proto);
 690              	 .loc 1 717 0
 691 009c BB69     	 ldr r3,[r7,#24]
 692 009e 97F82C20 	 ldrb r2,[r7,#44]
 693 00a2 5A72     	 strb r2,[r3,#9]
 718:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if CHECKSUM_GEN_IP_INLINE
 719:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     chk_sum += LWIP_MAKE_U16(proto, ttl);
 720:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 721:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 722:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     /* dest cannot be NULL here */
 723:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     ip_addr_copy(iphdr->dest, *dest);
 694              	 .loc 1 723 0
 695 00a4 7B68     	 ldr r3,[r7,#4]
 696 00a6 1A68     	 ldr r2,[r3]
 697 00a8 BB69     	 ldr r3,[r7,#24]
 698 00aa 1A61     	 str r2,[r3,#16]
 724:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if CHECKSUM_GEN_IP_INLINE
 725:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 726:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 727:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 728:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 729:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 699              	 .loc 1 729 0
 700 00ac FB8B     	 ldrh r3,[r7,#30]
 701 00ae 9B08     	 lsrs r3,r3,#2
 702 00b0 9BB2     	 uxth r3,r3
 703 00b2 DBB2     	 uxtb r3,r3
 704 00b4 43F04003 	 orr r3,r3,#64
 705 00b8 DAB2     	 uxtb r2,r3
 706 00ba BB69     	 ldr r3,[r7,#24]
 707 00bc 1A70     	 strb r2,[r3]
 730:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     IPH_TOS_SET(iphdr, tos);
 708              	 .loc 1 730 0
 709 00be BB69     	 ldr r3,[r7,#24]
 710 00c0 97F82820 	 ldrb r2,[r7,#40]
 711 00c4 5A70     	 strb r2,[r3,#1]
 731:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if CHECKSUM_GEN_IP_INLINE
 732:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
 733:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 734:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     IPH_LEN_SET(iphdr, htons(p->tot_len));
 712              	 .loc 1 734 0
 713 00c6 FB68     	 ldr r3,[r7,#12]
 714 00c8 1B89     	 ldrh r3,[r3,#8]
 715 00ca 1846     	 mov r0,r3
 716 00cc FFF7FEFF 	 bl lwip_htons
 717 00d0 0346     	 mov r3,r0
 718 00d2 1A46     	 mov r2,r3
 719 00d4 BB69     	 ldr r3,[r7,#24]
 720 00d6 5A80     	 strh r2,[r3,#2]
 735:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if CHECKSUM_GEN_IP_INLINE
 736:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     chk_sum += iphdr->_len;
 737:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 738:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     IPH_OFFSET_SET(iphdr, 0);
 721              	 .loc 1 738 0
 722 00d8 BB69     	 ldr r3,[r7,#24]
 723 00da 0022     	 movs r2,#0
 724 00dc 9A71     	 strb r2,[r3,#6]
 725 00de 0022     	 movs r2,#0
 726 00e0 DA71     	 strb r2,[r3,#7]
 739:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     IPH_ID_SET(iphdr, htons(ip_id));
 727              	 .loc 1 739 0
 728 00e2 1D4B     	 ldr r3,.L51
 729 00e4 1B88     	 ldrh r3,[r3]
 730 00e6 1846     	 mov r0,r3
 731 00e8 FFF7FEFF 	 bl lwip_htons
 732 00ec 0346     	 mov r3,r0
 733 00ee 1A46     	 mov r2,r3
 734 00f0 BB69     	 ldr r3,[r7,#24]
 735 00f2 9A80     	 strh r2,[r3,#4]
 740:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if CHECKSUM_GEN_IP_INLINE
 741:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     chk_sum += iphdr->_id;
 742:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 743:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     ++ip_id;
 736              	 .loc 1 743 0
 737 00f4 184B     	 ldr r3,.L51
 738 00f6 1B88     	 ldrh r3,[r3]
 739 00f8 0133     	 adds r3,r3,#1
 740 00fa 9AB2     	 uxth r2,r3
 741 00fc 164B     	 ldr r3,.L51
 742 00fe 1A80     	 strh r2,[r3]
 744:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 745:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     if (ip_addr_isany(src)) {
 743              	 .loc 1 745 0
 744 0100 BB68     	 ldr r3,[r7,#8]
 745 0102 002B     	 cmp r3,#0
 746 0104 03D0     	 beq .L46
 747              	 .loc 1 745 0 is_stmt 0 discriminator 1
 748 0106 BB68     	 ldr r3,[r7,#8]
 749 0108 1B68     	 ldr r3,[r3]
 750 010a 002B     	 cmp r3,#0
 751 010c 04D1     	 bne .L47
 752              	.L46:
 746:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       ip_addr_copy(iphdr->src, netif->ip_addr);
 753              	 .loc 1 746 0 is_stmt 1
 754 010e 3B6B     	 ldr r3,[r7,#48]
 755 0110 5A68     	 ldr r2,[r3,#4]
 756 0112 BB69     	 ldr r3,[r7,#24]
 757 0114 DA60     	 str r2,[r3,#12]
 758 0116 03E0     	 b .L48
 759              	.L47:
 747:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     } else {
 748:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       /* src cannot be NULL here */
 749:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       ip_addr_copy(iphdr->src, *src);
 760              	 .loc 1 749 0
 761 0118 BB68     	 ldr r3,[r7,#8]
 762 011a 1A68     	 ldr r2,[r3]
 763 011c BB69     	 ldr r3,[r7,#24]
 764 011e DA60     	 str r2,[r3,#12]
 765              	.L48:
 750:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     }
 751:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 752:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if CHECKSUM_GEN_IP_INLINE
 753:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 754:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 755:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 756:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     chk_sum = (chk_sum >> 16) + chk_sum;
 757:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     chk_sum = ~chk_sum;
 758:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     iphdr->_chksum = chk_sum; /* network order */
 759:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #else /* CHECKSUM_GEN_IP_INLINE */
 760:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     IPH_CHKSUM_SET(iphdr, 0);
 766              	 .loc 1 760 0
 767 0120 BB69     	 ldr r3,[r7,#24]
 768 0122 0022     	 movs r2,#0
 769 0124 9A72     	 strb r2,[r3,#10]
 770 0126 0022     	 movs r2,#0
 771 0128 DA72     	 strb r2,[r3,#11]
 772              	.LBE3:
 773 012a 08E0     	 b .L49
 774              	.L41:
 761:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if CHECKSUM_GEN_IP
 762:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, ip_hlen));
 763:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif
 764:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 765:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   } else {
 766:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     /* IP header already included in p */
 767:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     iphdr = (struct ip_hdr *)p->payload;
 775              	 .loc 1 767 0
 776 012c FB68     	 ldr r3,[r7,#12]
 777 012e 5B68     	 ldr r3,[r3,#4]
 778 0130 BB61     	 str r3,[r7,#24]
 768:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     ip_addr_copy(dest_addr, iphdr->dest);
 779              	 .loc 1 768 0
 780 0132 BB69     	 ldr r3,[r7,#24]
 781 0134 1B69     	 ldr r3,[r3,#16]
 782 0136 7B61     	 str r3,[r7,#20]
 769:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     dest = &dest_addr;
 783              	 .loc 1 769 0
 784 0138 07F11403 	 add r3,r7,#20
 785 013c 7B60     	 str r3,[r7,#4]
 786              	.L49:
 770:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 771:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 772:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   IP_STATS_INC(ip.xmit);
 773:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 774:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   LWIP_DEBUGF(IP_DEBUG, ("ip_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], netif->num
 775:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   ip_debug_print(p);
 776:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 777:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if ENABLE_LOOPBACK
 778:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if (ip_addr_cmp(dest, &netif->ip_addr)) {
 779:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     /* Packet to self, enqueue it for loopback */
 780:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
 781:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     return netif_loop_output(netif, p, dest);
 782:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 783:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if LWIP_IGMP
 784:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if ((p->flags & PBUF_FLAG_MCASTLOOP) != 0) {
 785:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     netif_loop_output(netif, p, dest);
 786:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 787:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* LWIP_IGMP */
 788:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* ENABLE_LOOPBACK */
 789:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #if IP_FRAG
 790:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* don't fragment if interface has mtu set to 0 [loopif] */
 791:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if (netif->mtu && (p->tot_len > netif->mtu)) {
 792:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     return ip_frag(p, netif, dest);
 793:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 794:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** #endif /* IP_FRAG */
 795:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 796:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
 797:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   return netif->output(netif, p, dest);
 787              	 .loc 1 797 0
 788 013e 3B6B     	 ldr r3,[r7,#48]
 789 0140 5B69     	 ldr r3,[r3,#20]
 790 0142 386B     	 ldr r0,[r7,#48]
 791 0144 F968     	 ldr r1,[r7,#12]
 792 0146 7A68     	 ldr r2,[r7,#4]
 793 0148 9847     	 blx r3
 794 014a 0346     	 mov r3,r0
 795              	.L50:
 796 014c 5BB2     	 sxtb r3,r3
 798:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** }
 797              	 .loc 1 798 0 discriminator 1
 798 014e 1846     	 mov r0,r3
 799 0150 2037     	 adds r7,r7,#32
 800              	.LCFI19:
 801              	 .cfi_def_cfa_offset 8
 802 0152 BD46     	 mov sp,r7
 803              	.LCFI20:
 804              	 .cfi_def_cfa_register 13
 805              	 
 806 0154 80BD     	 pop {r7,pc}
 807              	.L52:
 808 0156 00BF     	 .align 2
 809              	.L51:
 810 0158 00000000 	 .word ip_id
 811              	 .cfi_endproc
 812              	.LFE131:
 814              	 .section .text.ip_output,"ax",%progbits
 815              	 .align 2
 816              	 .global ip_output
 817              	 .thumb
 818              	 .thumb_func
 820              	ip_output:
 821              	.LFB132:
 799:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 800:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** /**
 801:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * Simple interface to ip_output_if. It finds the outgoing network
 802:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * interface and calls upon ip_output_if to do the actual work.
 803:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  *
 804:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @param p the packet to send (p->payload points to the data, e.g. next
 805:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****             protocol header; if dest == IP_HDRINCL, p already includes an IP
 806:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****             header and p->payload points to that IP header)
 807:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @param src the source IP address to send from (if src == IP_ADDR_ANY, the
 808:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  *         IP  address of the netif used to send is used as source address)
 809:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @param dest the destination IP address to send the packet to
 810:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @param ttl the TTL value to be set in the IP header
 811:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @param tos the TOS value to be set in the IP header
 812:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @param proto the PROTOCOL to be set in the IP header
 813:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  *
 814:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  * @return ERR_RTE if no route is found
 815:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  *         see ip_output_if() for more return values
 816:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****  */
 817:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** err_t
 818:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
 819:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****           u8_t ttl, u8_t tos, u8_t proto)
 820:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** {
 822              	 .loc 1 820 0
 823              	 .cfi_startproc
 824              	 
 825              	 
 826 0000 90B5     	 push {r4,r7,lr}
 827              	.LCFI21:
 828              	 .cfi_def_cfa_offset 12
 829              	 .cfi_offset 4,-12
 830              	 .cfi_offset 7,-8
 831              	 .cfi_offset 14,-4
 832 0002 8BB0     	 sub sp,sp,#44
 833              	.LCFI22:
 834              	 .cfi_def_cfa_offset 56
 835 0004 04AF     	 add r7,sp,#16
 836              	.LCFI23:
 837              	 .cfi_def_cfa 7,40
 838 0006 F860     	 str r0,[r7,#12]
 839 0008 B960     	 str r1,[r7,#8]
 840 000a 7A60     	 str r2,[r7,#4]
 841 000c FB70     	 strb r3,[r7,#3]
 821:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   struct netif *netif;
 822:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 823:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
 824:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****      gets altered as the packet is passed down the stack */
 825:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   LWIP_ASSERT("p->ref == 1", p->ref == 1);
 826:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 827:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   if ((netif = ip_route(dest)) == NULL) {
 842              	 .loc 1 827 0
 843 000e 7868     	 ldr r0,[r7,#4]
 844 0010 FFF7FEFF 	 bl ip_route
 845 0014 7861     	 str r0,[r7,#20]
 846 0016 7B69     	 ldr r3,[r7,#20]
 847 0018 002B     	 cmp r3,#0
 848 001a 01D1     	 bne .L54
 828:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 829:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****       ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
 830:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     IP_STATS_INC(ip.rterr);
 831:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****     return ERR_RTE;
 849              	 .loc 1 831 0
 850 001c FC23     	 movs r3,#252
 851 001e 0FE0     	 b .L55
 852              	.L54:
 832:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   }
 833:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** 
 834:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c ****   return ip_output_if(p, src, dest, ttl, tos, proto, netif);
 853              	 .loc 1 834 0
 854 0020 FC78     	 ldrb r4,[r7,#3]
 855 0022 97F82830 	 ldrb r3,[r7,#40]
 856 0026 0093     	 str r3,[sp]
 857 0028 97F82C30 	 ldrb r3,[r7,#44]
 858 002c 0193     	 str r3,[sp,#4]
 859 002e 7B69     	 ldr r3,[r7,#20]
 860 0030 0293     	 str r3,[sp,#8]
 861 0032 F868     	 ldr r0,[r7,#12]
 862 0034 B968     	 ldr r1,[r7,#8]
 863 0036 7A68     	 ldr r2,[r7,#4]
 864 0038 2346     	 mov r3,r4
 865 003a FFF7FEFF 	 bl ip_output_if
 866 003e 0346     	 mov r3,r0
 867              	.L55:
 868 0040 5BB2     	 sxtb r3,r3
 835:../Dave/Generated/ETH_LWIP/lwip/core/ipv4/ip.c **** }
 869              	 .loc 1 835 0
 870 0042 1846     	 mov r0,r3
 871 0044 1C37     	 adds r7,r7,#28
 872              	.LCFI24:
 873              	 .cfi_def_cfa_offset 12
 874 0046 BD46     	 mov sp,r7
 875              	.LCFI25:
 876              	 .cfi_def_cfa_register 13
 877              	 
 878 0048 90BD     	 pop {r4,r7,pc}
 879              	 .cfi_endproc
 880              	.LFE132:
 882 004a 00BF     	 .text
 883              	.Letext0:
 884              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 885              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 886              	 .file 4 "../Dave/Generated/ETH_LWIP/lwip/core/ipv4/../../include/lwip/../../port/include/arch/cc.h"
 887              	 .file 5 "../Dave/Generated/ETH_LWIP/lwip/core/ipv4/../../include/ipv4/lwip/../../lwip/err.h"
 888              	 .file 6 "../Dave/Generated/ETH_LWIP/lwip/core/ipv4/../../include/ipv4/lwip/../../lwip/pbuf.h"
 889              	 .file 7 "../Dave/Generated/ETH_LWIP/lwip/core/ipv4/../../include/ipv4/lwip/ip_addr.h"
 890              	 .file 8 "../Dave/Generated/ETH_LWIP/lwip/core/ipv4/../../include/ipv4/lwip/../../lwip/netif.h"
 891              	 .file 9 "../Dave/Generated/ETH_LWIP/lwip/core/ipv4/../../include/ipv4/lwip/ip.h"
 892              	 .file 10 "C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/CMSIS/Include/core_cm4.h"
 893              	 .file 11 "../Dave/Generated/ETH_LWIP/lwip/core/ipv4/../../include/ipv4/lwip/icmp.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ip.c
                            *COM*:00000004 current_netif
                            *COM*:00000004 current_header
                            *COM*:00000004 current_iphdr_src
                            *COM*:00000004 current_iphdr_dest
    {standard input}:24     .bss.ip_id:00000000 $d
    {standard input}:27     .bss.ip_id:00000000 ip_id
    {standard input}:30     .text.ip_route:00000000 $t
    {standard input}:35     .text.ip_route:00000000 ip_route
    {standard input}:128    .text.ip_route:00000070 $d
    {standard input}:134    .text.ip_input:00000000 $t
    {standard input}:139    .text.ip_input:00000000 ip_input
    {standard input}:512    .text.ip_input:00000234 $d
    {standard input}:521    .text.ip_output_if:00000000 $t
    {standard input}:526    .text.ip_output_if:00000000 ip_output_if
    {standard input}:585    .text.ip_output_if_opt:00000000 ip_output_if_opt
    {standard input}:580    .text.ip_output_if_opt:00000000 $t
    {standard input}:810    .text.ip_output_if_opt:00000158 $d
    {standard input}:815    .text.ip_output:00000000 $t
    {standard input}:820    .text.ip_output:00000000 ip_output
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
netif_list
netif_default
pbuf_free
lwip_ntohs
pbuf_realloc
igmp_lookfor_group
ip4_addr_isbroadcast
raw_input
udp_input
icmp_input
igmp_input
icmp_dest_unreach
pbuf_header
thumb2_memcpy
memset
lwip_htons
