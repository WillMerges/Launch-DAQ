   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_vadc.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_VADC_GROUP_ExternalMuxControlInit,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_VADC_GROUP_ExternalMuxControlInit:
  25              	.LFB178:
  26              	 .file 1 "C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc/xmc_vadc.h"
   1:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
   2:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @file xmc_vadc.h
   3:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @date 2016-06-17
   4:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   5:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @cond
   6:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** ***************************************************************************************************
   7:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMClib v2.1.8 - XMC Peripheral Driver Library 
   8:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   9:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * All rights reserved.                        
  11:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                             
  12:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * following conditions are met:   
  14:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  15:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * disclaimer.                        
  17:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
  18:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
  21:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * products derived from this software without specific prior written permission.                  
  23:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  24:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  32:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
  35:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  36:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Change History
  37:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * --------------
  38:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  39:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-15:
  40:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Initial <br>
  41:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *      
  42:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-20:
  43:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised for XMC1201 device.<br>
  44:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *   
  45:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-04-27:
  46:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for SHS.<br>
  47:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added New APIs for trigger edge selection.<BR>
  48:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  51:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-20:
  52:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-25:
  54:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - BFL configuration in channel initialization fixed.
  55:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  56:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-07-28:
  57:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  58:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  59:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  60:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  61:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  62:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  63:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAlias
  64:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetInputClass
  65:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  66:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  67:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  68:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  69:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  70:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  71:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added:
  72:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC4300 device supported
  73:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  74:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed:
  75:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_TriggerEvent API updated. OR operation removed. 
  76:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_ClearEvent API updated. Multiple events triggering on clearing the event i
  77:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Wrong MACRO name defined in xmc_vadc_map.h file corrected for XMC4200/4100 devices.
  78:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *       XMC_VADC_G3_SAMPLE renamed to XMC_VADC_G1_SAMPLE
  79:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  80:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  81:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  82:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled
  83:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled
  84:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  85:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  86:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  87:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-09:
  88:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Optimization of write only registers
  89:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  90:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-18:
  91:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_IsConverterReady(): API checks the STEPCFG register for the read
  92:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *       SHSCFG SFR. 
  93:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  94:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-06-17:
  95:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New macros added XMC_VADC_SHS_FULL_SET_REG, XMC_VADC_RESULT_PRIORITY_AVAILABLE
  96:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New Enum added XMC_VADC_SHS_GAIN_LEVEL_t and XMC_VADC_SYNCTR_EVAL_t
  97:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs added are:
  98:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncSlaveReadySignal
  99:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetAssertedEvents
 100:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAssertedResultEvents
 101:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultRegPriority
 102:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncReadySignal
 103:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetSyncReadySignal
 104:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetResultRegPriority
 105:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @endcond 
 106:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 107:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 108:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 109:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #ifndef XMC_VADC_H
 110:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_H
 111:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  
 112:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 113:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * HEADER FILES
 114:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 115:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_common.h>
 116:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_scu.h>
 117:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_vadc_map.h>
 118:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 119:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 120:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup XMClib XMC Peripheral Library
 121:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 122:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 123:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  
 124:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 125:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup VADC
 126:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @brief Versatile Analog to Digital Converter (VADC) driver for XMC microcontroller family.
 127:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 128:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC microcontroller provides a series of analog input channels connected to a cluster of Ana
 129:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Converters using the Successive Approximation Register (SAR) principle to convert analog input v
 130:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * to discrete digital values.
 131:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC1
 132:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC1x is based on Sample & Hold converters, where a cluster contains 2 Sample&Hold units whi
 133:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter.
 134:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 135:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 136:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter of the ADC cluster can operate independent of the others, controlled by a dedicat
 137:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * registers and triggered by a dedicated group request source. The results of each channel can be 
 138:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * dedicated channel-specific result register or in a group-specific result register.<BR>
 139:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 140:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * The Versatile Analog to Digital Converter module (VADC) of the XMC comprises a set of converter 
 141:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be operated either independently or via a common request source that emulates a background c
 142:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter block is equipped with a dedicated input multiplexer and dedicated request source
 143:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * which together build separate groups.
 144:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 145:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC4
 146:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc4x.png"
 147:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \else
 148:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc1x.png"
 149:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 150:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 151:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * The VADC LLD is split into GLOBAL and GROUP related APIs.<BR>
 152:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GLOBAL: </B><BR>
 153:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 154:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Global APIs act on the entire ADC module. Configures global configuration registers</LI>
 155:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Allows configuration of the background request source of the VADC.</LI>
 156:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The clock related configurations for the VADC module are configured in the Global APIs/</LI>
 157:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Global API names are prefixed by the \b XMC_VADC_GLOBAL_ and they accept ::XMC_VADC_GLOB
 158:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 159:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the background request source of the VADC. The APIs which act on the background r
 160:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_Background</LI>
 161:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the sample and hold unit of the VADC. The APIs which act on the SHS related regis
 162:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_SHS_</LI>
 163:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 164:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 165:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GROUP: </B><BR>
 166:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 167:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Group APIs act on a VADC group. Configures the group configuration registers</LI>
 168:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the queue request source of the VADC. The APIs which act on the queue related reg
 169:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Queue</LI>
 170:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the scan request source of the VADC. The APIs which act on the scan related regis
 171:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Scan</LI>
 172:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configuration of the channels of each group are done by the API which have a prefix as
 173:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     \b XMC_VADC_GROUP_Channel.</LI>
 174:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Group API names are prefixed by the \b XMC_VADC_GROUP_ and they accept ::XMC_VADC_GROUP_
 175:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 176:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 177:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 178:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 179:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  
 180:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 181:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * MACROS
 182:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 183:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 184:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if ((UC_SERIES == XMC42)||(UC_SERIES == XMC41) || (UC_SERIES == XMC43))
 185:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE           (1U) /*  Defines the availability of group resource in a
 186:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE           (1U) /*  Defines the availability of scan request resour
 187:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE           (1U) /*  Defines the availability of queue request resou
 188:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE            (1U) /*  Defines the availability of external multiplexe
 189:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 190:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE        (1U) /*  Defines the availability of boundary check supp
 191:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS      (1U) /*  Defines the availability of synchronous request
 192:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS        (2U) /*  Defines the maximum number of groups available 
 193:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT      (1U) /*  Defines the availability of boundary flags in a
 194:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE         (1U) /*  Defines the external multiplexer channel select
 195:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 196:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE             (0U) /* Defines the availability of sample and hold modu
 197:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG          (0U) /* Defines the availability of sample and hold modu
 198:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE    (1U) /* Define the availability of a source specific res
 199:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 200:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 201:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 202:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC44 || UC_SERIES == XMC47 || UC_SERIES == XMC48)
 203:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 204:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 205:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 206:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 207:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 208:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 209:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 210:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 211:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 212:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 213:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 214:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 215:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 216:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 217:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 218:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 219:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 220:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC45)
 221:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 222:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 223:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 224:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 225:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 226:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 227:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 228:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 229:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 230:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 231:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 232:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 233:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 234:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 235:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 236:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 237:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 238:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC14 || UC_SERIES == XMC13 || UC_SERIES == XMC12)
 239:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 240:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 241:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 242:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 243:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 244:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 245:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 246:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 247:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 248:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 249:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 250:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 251:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (1U) /* Defines the availability of sample and hold module
 252:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 253:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (1U) /* Define the availability of a priority for result
 254:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 255:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 256:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC11)
 257:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (0U) /*  Defines the availability of group resource in a d
 258:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (0U) /*  Defines the availability of scan request resource
 259:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (0U) /*  Defines the availability of queue request resourc
 260:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (0U) /*  Defines the availability of external multiplexer 
 261:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 262:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (0U) /*  Defines the availability of boundary check suppor
 263:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (0U) /*  Defines the availability of synchronous request s
 264:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 265:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 266:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_START_UP_CAL_ACTIVE (3U) /*  Defines the need for SHS startup calibration acti
 267:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 devices */
 268:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_CONV_ENABLE_FOR_XMC11   (*(uint32_t*) 0x40010500UL) /*  Defines the additional err
 269:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 device for effective working*/ 
 270:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 271:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 272:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 273:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 274:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 275:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 276:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 277:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 278:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_PORTS               (16U) /* Defines the number of hardware ports that can be 
 279:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     as triggers and gating signals */
 280:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 281:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_RESULT_REGISTERS    (16U) /* Defines the number of result holding registers pe
 282:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 283:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_CHANNELS_PER_GROUP  (8U)  /**< Defines the number of ADC channels per group */
 284:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 285:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 286:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * ENUMS
 287:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 288:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef uint16_t XMC_VADC_RESULT_SIZE_t; /**< Type defined the converted result size to unsigned 16
 289:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_GLOBAL_TypeDef XMC_VADC_GLOBAL_t; /**< Type defined the device header file vadc global
 290:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC type*/
 291:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 292:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_AVAILABLE == 1U)
 293:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_G_TypeDef XMC_VADC_GROUP_t; /**< Type defined the device header file vadc group regist
 294:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC Group type*/
 295:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 296:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 297:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 298:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef SHS_Type XMC_VADC_GLOBAL_SHS_t; /**< Type defined the sample and hold register structure*/
 299:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 300:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 301:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the return status after execution of VADC specific API's. Use @ref XMC_VADC_STATUS_t fo
 302:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 303:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STATUS
 304:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 305:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_SUCCESS = 0,   /**< Returned when the API has been able to fulfill the callers re
 306:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_ERROR          /**< Returned when the API cannot fulfill the request */
 307:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STATUS_t;
 308:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 309:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 310:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various service requests lines. Each group can raise up to 4 service requests indep
 311:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  all groups together have the possibility of raising 4 module wide service requests. Use @ref XM
 312:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 313:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 314:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SR
 315:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 316:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR0 = 0, /**< Group specific Service Request-0 */
 317:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR1,     /**< Group specific Service Request-1 */
 318:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR2,     /**< Group specific Service Request-2 */
 319:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR3,     /**< Group specific Service Request-3 */
 320:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR0,    /**< Module Wide Common Service Request-0 */
 321:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR1,    /**< Module Wide Common Service Request-1 */
 322:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR2,    /**< Module Wide Common Service Request-2 */
 323:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR3    /**< Module Wide Common Service Request-3 */
 324:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SR_t;
 325:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 326:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 327:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the mode of operation of a channel, when an ongoing conversion gets interrupted in betw
 328:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_STARTMODE_t for this enumeration.
 329:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 330:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STARTMODE
 331:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 332:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_WFS = 0, /**< An ongoing conversion completes without interruption */
 333:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CIR,     /**< An ongoing conversion can be interrupted and resumed later*/
 334:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CNR     /**< An ongoing conversion can be interrupted and never resumed */
 335:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STARTMODE_t;
 336:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 337:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 338:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the edge sensitivity of the trigger signal which can assert a conversion.
 339:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_EDGE_t for this enumeration.
 340:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 341:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_EDGE
 342:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 343:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_NONE = 0, /**< No external trigger. Conversion request can be asserted by s
 344:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_FALLING,  /**< The falling edge of the external trigger can assert conversi
 345:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_RISING,   /**< The rising edge of the external trigger can assert conversio
 346:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_ANY       /**< Both the edges can assert conversion request */
 347:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_EDGE_t;
 348:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 349:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 350:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external trigger input selection possibilities, to assert a conversion. Refer the V
 351:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  section of the reference manual for details of peripherals which can be used. Also refer xmc_va
 352:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  detailed definitions of the peripherals which can take the control of these enumeration items.
 353:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_INPUT_SELECT_t for this enumeration.
 354:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 355:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_INPUT_SELECT
 356:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 357:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_A = 0, /**< Trigger select signal A */
 358:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_B,     /**< Trigger select signal B */
 359:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_C,     /**< Trigger select signal C */
 360:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_D,     /**< Trigger select signal D */
 361:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_E,     /**< Trigger select signal E */
 362:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_F,     /**< Trigger select signal F */
 363:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_G,     /**< Trigger select signal G */
 364:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_H,     /**< Trigger select signal H */
 365:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_I,     /**< Trigger select signal I */
 366:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_J,     /**< Trigger select signal J */
 367:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_K,     /**< Trigger select signal K */
 368:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_L,     /**< Trigger select signal L */
 369:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_M,     /**< Trigger select signal M */
 370:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_N,     /**< Trigger select signal N */
 371:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_O,     /**< Trigger select signal O */
 372:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_P      /**< Trigger select signal P */
 373:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   
 374:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_INPUT_SELECT_t;
 375:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 376:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 377:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external gating input selection possibilities, to gate the conversion requests. Ref
 378:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  interconnects section of the reference manual for details of peripherals which can be used. Als
 379:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  xmc_vadc_map.h file for detailed definitions of the peripherals which can take the control of t
 380:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  items. Use @ref XMC_VADC_GATE_INPUT_SELECT_t for this enumeration.
 381:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 382:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATE_INPUT_SELECT
 383:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 384:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_A = 0, /**< Gating select signal A */
 385:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_B,     /**< Gating select signal B */
 386:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_C,     /**< Gating select signal C */
 387:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_D,     /**< Gating select signal D */
 388:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_E,     /**< Gating select signal E */
 389:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_F,     /**< Gating select signal F */
 390:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_G,     /**< Gating select signal G */
 391:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_H,     /**< Gating select signal H */
 392:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_I,     /**< Gating select signal I */
 393:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_J,     /**< Gating select signal J */
 394:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_K,     /**< Gating select signal K */
 395:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_L,     /**< Gating select signal L */
 396:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_M,     /**< Gating select signal M */
 397:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_N,     /**< Gating select signal N */
 398:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_O,     /**< Gating select signal O */
 399:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_P      /**< Gating select signal P */
 400:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   
 401:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATE_INPUT_SELECT_t;
 402:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 403:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 404:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the condition for gating the conversion requests. It can be used to set the ENGT field
 405:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * of ASMR/BSMR/QMR register respectively for auto_scan/background_scan/queue request sources.
 406:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_GATEMODE_t for this enumeration.
 407:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 408:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATEMODE
 409:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 410:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_BLOCK = 0,  /**< External triggers are permanently blocked */
 411:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_IGNORE,     /**< External triggers are unconditionally passed */
 412:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVEHIGH, /**< External trigger is passed only if the gate signal is high */
 413:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVELOW  /**< External trigger is passed only if the gate signal is low */
 414:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATEMODE_t;
 415:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 416:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 417:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion result handling mode. Use @ref XMC_VADC_DMM_t for this enumeration.
 418:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 419:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_DMM
 420:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 421:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_REDUCTION_MODE = 0, /**< Standard Data reduction mode*/
 422:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_FILTERING_MODE,     /**< Provide option to select Finite Impulse Response Filter (FI
 423:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                         Infinite Impulse Response Filter (IIR)*/
 424:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_DIFFERENCE_MODE,    /**< Difference mode is selected*/
 425:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_DMM_t;
 426:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 427:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 428:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the conversion mode. It defines the resolution of conversion. Use XMC_VADC_CONVMODE_t f
 429:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 430:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CONVMODE
 431:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 432:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_12BIT       = 0,  /**< Results of conversion are 12bits wide */
 433:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_10BIT       = 1,  /**< Results of conversion are 10bits wide */
 434:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_8BIT        = 2,  /**< Results of conversion are 8bits wide */
 435:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_FASTCOMPARE = 5  /**< Input signal compared with a preset range */
 436:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CONVMODE_t;
 437:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 438:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 439:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the output of a fast compare mode. Use @ref XMC_VADC_FAST_COMPARE_t for
 440:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  this enumeration.
 441:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 442:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_FAST_COMPARE
 443:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 444:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_LOW = 0, /**< Input lower than than programmed reference */
 445:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_HIGH ,   /**< Input higher than than programmed reference */
 446:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_UNKNOWN  /**< Unknown, Conversion probably still ongoing */
 447:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_FAST_COMPARE_t;
 448:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  
 449:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 450:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the type of scan request source to be used. It can choose between auto scan and backgrou
 451:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * source methods. Use @ref XMC_VADC_SCAN_TYPE_t for this enumeration.
 452:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 453:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_TYPE
 454:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 455:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_GROUPSCAN = 0, /**< Auto scan mode of operation selected. Also called as Group
 456:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_BACKGROUND    /**< Background scan mode of operation selected. Also called as 
 457:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_TYPE_t;
 458:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 459:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 460:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the behavior of load event for the scan request source. Use @ref XMC_VADC_SCAN_LOAD_t fo
 461:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 462:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_LOAD
 463:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 464:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_OVERWRITE = 0, /**< The old set of channels is discarded in favor of the new s
 465:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                          awaiting conversion */
 466:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_COMBINE       /**< The new set of channels are combined with the pending chann
 467:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                          previous set */
 468:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_LOAD_t;
 469:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 470:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 471:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion classes that can be selected for each channel. The enumeration members ho
 472:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * global classes. The conversion classes decides the properties of conversion, like resolution, sa
 473:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_CHANNEL_CONV_t for this enumeration.
 474:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 475:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 476:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_CONV
 477:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 478:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 = 0, /**< Conversion property set-0 specific to the group */
 479:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS1,     /**< Conversion property set-1 specific to the group */
 480:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS0,    /**< Conversion property set-0, Module wide */
 481:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1    /**< Conversion property set-1, Module wide */
 482:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONV_t;
 483:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 484:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 485:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the references to boundary values used for limit checking feature. Each of these can be 
 486:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * either an upper bound or a lower bound. Use @ref XMC_VADC_CHANNEL_BOUNDARY_t for this enumeratio
 487:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 488:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 489:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY
 490:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 491:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 = 0, /**< Group specific Boundary-0 value */
 492:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1,     /**< Group specific Boundary-1 value */
 493:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0,    /**< Module wide Boundary-0 value */
 494:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1    /**< Module wide Boundary-1 value */
 495:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_t;
 496:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 497:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 498:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the voltage which the capacitor is charged to. Used in Broken wire detection feature. Us
 499:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_CHANNEL_BWDCH_t for this enumeration.
 500:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 501:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BWDCH
 502:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 503:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAGND = 0, /**< Capacitor pre-charged to ground*/
 504:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAREF     /**< Capacitor pre-charged to reference voltage*/
 505:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BWDCH_t;
 506:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 507:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 508:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Defines the criteria for event generation by the channel. Use @ref XMC_VADC_CHANNEL_EVGEN_t fo
 509:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 510:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_EVGEN
 511:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 512:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_NEVER     = 0,  /**< No event generated */
 513:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_INBOUND   = 1U, /**< Event generated when the result is within the normal 
 514:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPHIGH  = 1U, /**< Event generated when the result of fast compare opera
 515:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_OUTBOUND  = 2U, /**< Event generated when the result is outside the normal
 516:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPLOW   = 2U, /**< Event generated when the result result of fast compar
 517:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_ALWAYS    = 3U /**< Event generated always after conversion - unconditiona
 518:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_EVGEN_t;
 519:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 520:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 521:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the reference voltage selection for conversion. Use @ref XMC_VADC_CHANNEL_REF_t for this
 522:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 523:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_REF
 524:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 525:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_INTREF = 0, /**< Internal VARef */
 526:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_ALT_CH0    /**< External voltage available on Channel-0 of the perticular gr
 527:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_REF_t;
 528:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  
 529:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 530:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the criteria for boundary flag assertion. Use @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t
 531:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 532:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 533:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY_CONDITION
 534:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 535:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_ABOVE_BAND = 0, /**< Set Boundary condition criteria to asser
 536:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_BELOW_BAND     /**< Set Boundary condition criteria to assert
 537:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t;
 538:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  
 539:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 540:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the event which can lead to a global service request assertion. Use @ref XMC_VADC_GLOBAL
 541:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 542:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 543:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_EVENT
 544:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 545:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE = VADC_GLOBEFLAG_SEVGLB_Msk, /**< Background scan request sourc
 546:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_RESULT      = VADC_GLOBEFLAG_REVGLB_Msk  /**< Global result event */
 547:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_EVENT_t;
 548:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  
 549:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 550:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the power modes of a VADC Group. Use @ref XMC_VADC_GROUP_POWERMODE_t for this enumeratio
 551:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 552:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_POWERMODE
 553:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 554:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_OFF       = 0, /**< Group is powered down */
 555:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED1,     /**< Reserved */
 556:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED2,     /**< Reserved */
 557:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_NORMAL        /**< Group is powered up */
 558:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_POWERMODE_t;
 559:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 560:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 561:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the status of a VADC group (also known as kernel). Use @ref XMC_VADC_GROUP_STATE_t for 
 562:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 563:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_STATE
 564:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 565:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_IDLE = 0, /**< Idle and can convert if requested */
 566:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_BUSY      /**< Busy with an ongoing conversion */
 567:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_STATE_t;
 568:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 569:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 570:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the reference to sample time and conversion mode settings. Use @ref XMC_VADC_GROUP_CONV
 571:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 572:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 573:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_CONV
 574:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 575:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_STD = 0, /**< Settings pertaining to channels directly attached to VADC modul
 576:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_EMUX    /**< Settings pertaining to channels connected to VADC via EMUX */
 577:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONV_t;
 578:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 579:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 580:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbiter behavior. Use @ref XMC_VADC_GROUP_ARBMODE_t for this enumera
 581:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 582:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_ARBMODE
 583:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 584:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ALWAYS = 0, /**< Arbiter runs all the time */
 585:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ONDEMAND    /**< Arbiter runs only if a conversion request is asserted by 
 586:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                           request sources */
 587:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_ARBMODE_t;
 588:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 589:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 590:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX mode of operation. Use @ref XMC_VADC_GROUP_EMUXMODE_t for this enumeration.
 591:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 592:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXMODE
 593:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 594:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SWCTRL = 0,     /**< Perform EMUX in Software control mode*/
 595:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_STEADYMODE,     /**< Perform EMUX in Steady mode (Use EMUX set value)*/
 596:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SINGLEMODE,     /**< Perform EMUX in Single step mode*/
 597:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SEQUENCEMODE,   /**< Perform EMUX in Sequence mode*/
 598:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXMODE_t;
 599:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 600:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 601:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX channel selection encoding scheme. Use @ref XMC_VADC_GROUP_EMUXCODE_t for this
 602:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 603:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXCODE
 604:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 605:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_BINARY = 0, /**< A linearly incrementing code serves are MUX-SEL */
 606:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_GRAY       /**< The MUX-SEL is gray encoded */
 607:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCODE_t;
 608:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 609:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 610:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the service request set used. Use @ref XMC_VADC_GROUP_IRQ_t for this enumeration.
 611:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 612:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_IRQ
 613:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 614:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_KERNEL = 0, /**< Refers to Group specific service request */
 615:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_SHARED     /**< Refers to Module wide service request */
 616:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_IRQ_t;
 617:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 618:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 619:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the alignment of the converted result. Use @ref XMC_VADC_RESULT_ALIGN_t for this enumer
 620:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 621:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_ALIGN
 622:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 623:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_LEFT = 0,  /**< Always align result to left */
 624:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_RIGHT      /**< Always align result to right */
 625:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_ALIGN_t;
 626:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 627:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_SUBTRATION 
 628:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 629:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_LEFT_ALIGN  = 0U,  /**< Always align result to left */
 630:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 631:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_LEFT_ALIGN  = 2U,  /**< Always align result to left */
 632:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 633:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_LEFT_ALIGN   = 4U,  /**< Always align result to left */
 634:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_RIGHT_ALIGN  = 0U,  /**< Always align result to right */
 635:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_SUBTRATION_t;
 636:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 637:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 638:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbitration priority. Use @ref XMC_VADC_GROUP_RS_PRIORITY_t for this
 639:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 640:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_RS_PRIORITY
 641:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 642:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_0 = 0, /**< Lowest priority for the request source*/
 643:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_1,     /**< Second lowest priority for the request source*/
 644:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_2,     /**< Second highest priority for the request source*/
 645:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_3,     /**< Highest priority for the request source*/
 646:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_RS_PRIORITY_t;
 647:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 648:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 649:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various modes for the boundary flag. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t f
 650:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 651:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_BOUNDARY_FLAG_MODE
 652:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 653:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_DISABLED = 0,       /**< Disable boundary flag*/
 654:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED,            /**< Always enable boundary*/
 655:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_LOW, /**< Enable boundary flag when gate level
 656:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_HIGH /**< Enable boundary flag when gate level
 657:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t;
 658:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 659:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 660:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 661:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the boundary select for Channel. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t for this 
 662:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 663:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_SELECT
 664:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 665:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_LOWER_BOUND = 0U,       /**< Select the lower boundary*/
 666:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_UPPER_BOUND = 2U        /**< Selects the upper boundary*/
 667:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_SELECT_t;
 668:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 669:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 670:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 671:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the group indices. Use @ref XMC_VADC_GROUP_INDEX_t for this enumeration.
 672:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 673:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_INDEX
 674:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 675:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_0   = 0,
 676:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_1,
 677:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 678:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_2,
 679:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_3
 680:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 681:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_INDEX_t;
 682:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 683:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 684:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** * Defines channel alias.
 685:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** * All enum items are available for channels 0 and 1. Other Channels can accept only XMC_VADC_CHANNE
 686:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** */
 687:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_ALIAS
 688:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 689:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_DISABLED = -1,
 690:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH0 = 0,
 691:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH1 = 1,
 692:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH2 = 2,
 693:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH3 = 3,
 694:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH4 = 4,
 695:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH5 = 5,
 696:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH6 = 6,
 697:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH7 = 7
 698:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_ALIAS_t;
 699:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 700:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 701:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 702:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 703:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 704:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the gain calibration selection.
 705:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 706:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_GAIN_LEVEL
 707:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 708:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_0 = SHS_CALOC0_CALOFFVAL0_Pos, /**< Select the calibration value for gain
 709:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_1 = SHS_CALOC0_CALOFFVAL1_Pos, /**< Select the calibration value for gain
 710:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_2 = SHS_CALOC0_CALOFFVAL2_Pos, /**< Select the calibration value for gain
 711:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_3 = SHS_CALOC0_CALOFFVAL3_Pos  /**< Select the calibration value for gain
 712:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SHS_GAIN_LEVEL_t;
 713:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 714:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 715:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 716:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the Delta sigma loop.
 717:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 718:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_LOOP_CH
 719:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 720:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_0 = SHS_LOOP_LPCH0_Pos, /**< Select Delta-sigma loop 0*/
 721:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_1 = SHS_LOOP_LPCH1_Pos /**< Select Delta-sigma loop 1*/
 722:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SHS_LOOP_CH_t;
 723:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 724:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 725:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides the order in which the SHS should do the calibration
 726:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 727:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER
 728:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 729:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_POST_CONV = 0, /**< Calibration occur after conversion take
 730:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_PRE_CONV   /**< Calibration occur before conversion takes p
 731:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t;
 732:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 733:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 734:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 735:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 736:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides possible routing values for the boundary flag.
 737:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 738:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_NODE
 739:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 740:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_0 = 0U, /**<Route the Group boundary flag to Common b
 741:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_1,      /**<Route the Group boundary flag to Common b
 742:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_2,      /**<Route the Group boundary flag to Common b
 743:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_3,      /**<Route the Group boundary flag to Common b
 744:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_0,  /**<Route the Group boundary flag to Common Service Req
 745:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_1,  /**<Route the Group boundary flag to Common Service Req
 746:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_2,  /**<Route the Group boundary flag to Common Service Req
 747:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_3   /**<Route the Group boundary flag to Common Service Req
 748:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_NODE_t;
 749:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 750:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 751:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 752:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 753:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the ready signal selection
 754:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 755:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SYNCTR_EVAL
 756:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 757:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_1 = VADC_G_SYNCTR_EVALR1_Msk, /**<Mask to set the EVAL1 bits of SYNCTR */
 758:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 759:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_2 = VADC_G_SYNCTR_EVALR2_Msk, /**<Mask to set the EVAL2 bits of SYNCTR */
 760:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_3 = VADC_G_SYNCTR_EVALR3_Msk  /**<Mask to set the EVAL3 bits of SYNCTR */
 761:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 762:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SYNCTR_EVAL_t;
 763:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 764:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 765:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * DATA STRUCTURES
 766:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 767:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard start*/
 768:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
 769:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma push
 770:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma anon_unions
 771:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
 772:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma warning 586
 773:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 774:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 775:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 776:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC scan request source. Use type @ref XMC_VADC_SCAN_CONFIG_t for t
 777:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 778:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_SCAN_CONFIG
 779:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 780:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 781:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how scan request source would
 782:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 783:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter. If the Conversion
 784:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                          selected as Cancel inject repeat/Never mode then this fiel
 785:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                          priority of scan request source. Uses @ref XMC_VADC_GROUP_
 786:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 787:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 788:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 789:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 790:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 791:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Use any one Group related result register as 
 792:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 793:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 794:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 795:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 796:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 797:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 798:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 799:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_INPUT_SELECT_t enumeration*/
 800:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 801:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal. Uses @ref
 802:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_EDGE_t */
 803:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 804:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 805:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GATE_INPUT_SELECT_t */
 806:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 8;
 807:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Decides whether timer mode for equi-distant s
 808:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       activated or not.*/
 809:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 3;
 810:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 811:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t asctrl;
 812:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 813:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 814:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 815:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 816:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 817:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 2;
 818:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversions be initiated by external hardware trig
 819:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t req_src_interrupt  : 1;  /**< Request source event can be generated after a conv
 820:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t enable_auto_scan   : 1;  /**< Enables the continuous conversion mode. Conversion
 821:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  of the last channel in a scan sequence will cause 
 822:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t load_mode          : 1;  /**< Selects load event mode. Uses @ref XMC_VADC_SCAN_L
 823:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 26;
 824:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 825:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t asmr;
 826:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 827:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_CONFIG_t;
 828:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 829:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 830:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef XMC_VADC_SCAN_CONFIG_t XMC_VADC_BACKGROUND_CONFIG_t; /**< Type defined the scan configurati
 831:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                  structure for background Request S
 832:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 833:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 834:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC channel. Use type XMC_VADC_CHANNEL_CONFIG_t for this enumeratio
 835:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 836:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_CHANNEL_CONFIG
 837:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 838:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 839:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 840:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 841:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 842:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t input_class                : 2;  /**< Input conversion class selection.
 843:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_CONV_t */
 844:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 2;
 845:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t lower_boundary_select      : 2;  /**< Which boundary register serves as lower bo
 846:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 847:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t upper_boundary_select      : 2;  /**< Which boundary register serves as upper bo
 848:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 849:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_criteria         : 2;  /**< When should an event be generated?
 850:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_EVGEN_t */
 851:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sync_conversion            : 1;  /**< Enables synchronous conversion for the con
 852:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t alternate_reference        : 1;  /**< Input reference voltage selection either V
 853:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_REF_t*/
 854:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 4;
 855:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t result_reg_number          : 4;  /**< Group result register number */
 856:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t use_global_result          : 1;  /**< Use global result register for background 
 857:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t result_alignment           : 1;  /**< Alignment of the results read in the resul
 858:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_RESULT_ALIGN_t */
 859:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 6;
 860:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t broken_wire_detect_channel : 2;  /**< Source to be used to charge the capacitor 
 861:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BWDCH_t. */
 862:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t broken_wire_detect         : 1;  /**< Configures extra phase before the capacito
 863:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 864:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t chctr;
 865:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 866:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 867:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 868:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 869:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 870:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 8;
 871:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 872:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch0 : 1; /**< Condition for which the boundary flag should
 873:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITIO
 874:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch1 : 1; /**< Condition for which the boundary flag should
 875:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 876:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch2 : 1; /**< Condition for which the boundary flag should
 877:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 878:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch3 : 1; /**< Condition for which the boundary flag should
 879:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 880:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 881:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 4;
 882:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 883:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 4;
 884:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 885:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch0  : 1; /**< Inverts boundary flag output.*/
 886:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch1  : 1; /**< Inverts boundary flag output.*/
 887:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch2  : 1; /**< Inverts boundary flag output.*/
 888:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch3  : 1; /**< Inverts boundary flag output.*/
 889:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 890:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 891:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch0  : 1; /**< Enable the boundary flag output on the speci
 892:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch1  : 1; /**< Enable the boundary flag output on the speci
 893:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch2  : 1; /**< Enable the boundary flag output on the speci
 894:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch3  : 1; /**< Enable the boundary flag output on the speci
 895:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 896:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 12;
 897:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 898:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t bfl;
 899:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 900:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 901:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 902:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 903:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 904:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 905:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch0    : 4; /**< Specify the basic operation of boundary flag 
 906:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 907:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch1    : 4; /**< Specify the basic operation of boundary flag 
 908:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 909:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch2    : 4; /**< Specify the basic operation of boundary flag 
 910:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 911:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch3    : 4; /**< Specify the basic operation of boundary flag 
 912:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 913:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t                           : 16;
 914:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 915:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t bflc;
 916:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 917:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 918:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     bool    channel_priority;  /**< Only non priority channels can be converted by Background Reque
 919:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     int8_t  alias_channel;     /**< Specifies the channel which has to be aliased with CH0/CH1 (whi
 920:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Force the value to \b(int8_t)-1 to bypass alias feature.
 921:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Uses @ref XMC_VADC_CHANNEL_ALIAS_t  for configuration.*/
 922:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONFIG_t;
 923:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 924:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 925:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize a queue entry. Use type @ref XMC_VADC_QUEUE_ENTRY_t.
 926:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 927:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_ENTRY
 928:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 929:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 930:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 931:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 932:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 933:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t channel_num        : 5;  /**< Channel number associated with this queue entry.<B
 934:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t refill_needed      : 1;  /**< Conversion completed channel gets inserted back in
 935:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t generate_interrupt : 1;  /**< Generates a queue request source event */
 936:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversion requests are raised on an external trig
 937:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 24;
 938:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 939:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 940:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qinr0;
 941:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 942:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_ENTRY_t;
 943:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 944:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 945:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing a VADC queue request source. Use type @ref XMC_VADC_QUEUE_CONFIG_t.
 946:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 947:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_CONFIG
 948:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 949:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 950:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how queue request source woul
 951:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 952:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter.Uses @ref XMC_VADC
 953:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 954:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 955:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 956:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 957:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 958:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Uses any one Group related result register as
 959:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 960:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 961:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 962:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 963:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 964:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 965:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 966:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_INPUT_SELECT_t */
 967:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 968:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal.
 969:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_EDGE_t */
 970:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 971:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 972:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GATE_INPUT_SELECT_t */
 973:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 8;
 974:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Timer mode for equi-distant sampling shall be
 975:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 3;
 976:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 977:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qctrl0;
 978:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 979:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 980:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 981:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 982:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 983:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                   : 2;
 984:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger  : 1;  /**< Are external triggers supported? */
 985:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                   : 29;
 986:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 987:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qmr0;
 988:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 989:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_CONFIG_t;
 990:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 991:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
 992:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 993:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the global input class configuration. Configured parameters are sample 
 994:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
 995:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 996:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLASS
 997:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 998:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 999:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1000:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1001:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1002:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1003:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1004:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1005:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1006:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1007:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1008:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
1009:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1010:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1011:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1012:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1013:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1014:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1015:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1016:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 16;
1017:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1018:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1019:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globiclass;
1020:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1021:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLASS_t;
1022:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1023:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1024:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1025:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize converter and arbiter clock configuration
1026:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1027:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLOCK
1028:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
1029:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1030:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1031:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1032:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1033:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1034:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t analog_clock_divider     : 5;  /**< Clock for the converter. <BR>Range: [0x0 to 
1035:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 2;
1036:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t msb_conversion_clock     : 1;  /**< Additional clock cycle for analog converter 
1037:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbiter_clock_divider    : 2;  /**< Request source arbiter clock divider. <BR>Ra
1038:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 5;
1039:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 17;
1040:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1041:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globcfg;
1042:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1043:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLOCK_t;
1044:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1045:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1046:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1047:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1048:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize the VADC Global functions
1049:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1050:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CONFIG
1051:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
1052:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1053:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1054:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1055:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1056:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1057:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1058:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1059:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1060:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1061:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globbound;
1062:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1063:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1064:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLOCK_t clock_config; /**< ADC clock configurations*/
1065:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1066:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class0;      /**< ADC input conversion configurations for GLOBICLASS[0
1067:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class1;      /**< ADC input conversion configurations for GLOBICLASS[1
1068:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1069:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1070:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1071:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1072:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 16;
1073:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Data reduction stages */
1074:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
1075:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Results of the next conversion will not be ov
1076:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       result register until the previous value is r
1077:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 6;
1078:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1079:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1080:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globrcr;
1081:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1082:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1083:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1084:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1085:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1086:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t module_disable              : 1;  /**< Disables the module clock.*/
1087:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                             : 2;
1088:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t disable_sleep_mode_control  : 1;  /**< Set it to true in order to disable the Sl
1089:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                             : 28;
1090:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1091:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t clc;
1092:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1093:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CONFIG_t;
1094:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1095:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1096:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1097:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the group input class configuration. Configured parameters are sample t
1098:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
1099:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1100:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CLASS
1101:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
1102:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1103:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1104:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1105:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1106:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1107:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1108:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1109:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1110:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1111:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1112:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1113:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1114:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1115:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1116:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1117:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1118:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1119:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_iclass0;
1120:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1121:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CLASS_t;
1122:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1123:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1124:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1125:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  EMUX related configuration structure.
1126:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1127:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_EMUXCFG
1128:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
1129:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1130:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1131:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1132:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1133:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t starting_external_channel : 3;  /**< External channel number to which the VADC w
1134:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         generate a control signal (needed to select
1135:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         the analog multiplexer)*/
1136:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 13;
1137:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1138:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t connected_channel         : 10; /**< The Channel to which the EMUX is connected.
1139:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1140:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t connected_channel         : 5;  /**< The Channel to which the EMUX is connected.
1141:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 5;
1142:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1143:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_mode                 : 2;  /**< Selects the external multiplexer modes: Ste
1144:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         Uses @ref XMC_VADC_GROUP_EMUXMODE_t*/
1145:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_coding               : 1;  /**< Select Binary or Gray coding. Uses @ref XMC
1146:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t stce_usage                : 1;  /**< Use STCE for each conversion of an external
1147:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1148:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_channel_select_style : 1;  /**< Selects the style of configuring the \b con
1149:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         (Each bit represents the channel or entire 
1150:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 1;
1151:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1152:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 2;
1153:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1154:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1155:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_emuxctr;
1156:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1157:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCFG_t;
1158:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1159:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1160:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1161:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Group Configuration Data Structures
1162:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1163:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1164:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CONFIG
1165:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
1166:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_EMUXCFG_t emux_config;    /**< External multiplexer related configurations */
1167:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class0;           /**< ADC input conversion configurations for GxICLASS[
1168:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class1;           /**< ADC input conversion configurations for GxICLASS[
1169:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1170:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1171:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1172:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1173:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1174:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1175:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1176:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1177:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1178:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_bound;
1179:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1180:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1181:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1182:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1183:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1184:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 4;
1185:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbitration_round_length : 2;  /**< Number of arbiter slots to be considered */
1186:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 1;
1187:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbiter_mode             : 1;  /**< Arbiter mode - Select either Continuous mode
1188:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_ARBMODE_t */
1189:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 24;
1190:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1191:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_arbcfg;
1192:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1193:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONFIG_t;
1194:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1195:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1196:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize VADC Group result register.
1197:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1198:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1199:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_RESULT_CONFIG
1200:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
1201:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1202:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1203:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1204:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1205:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 16;
1206:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Configures the data reduction stages */
1207:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t post_processing_mode    : 2;  /**< Result data processing mode. Uses @ref  XMC_V
1208:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       For normal operation select
1209:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_DMM_t::XMC_VADC_DMM_REDUCTION_MODE
1210:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       and data_reduction_control as 0*/
1211:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 2;
1212:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Allow the conversion only after previous resu
1213:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t part_of_fifo            : 2;  /**< Make the result register a part of Result FIF
1214:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
1215:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1216:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1217:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_rcr;
1218:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1219:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_CONFIG_t;
1220:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1221:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1222:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1223:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1224:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Structure to initialize the Stepper configurations
1225:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1226:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_STEP_CONFIG
1227:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
1228:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1229:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1230:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1231:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1232:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step0            :3;  /**< Select a Sample and hold unit for the stepper's s
1233:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1234:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step0             :1;  /**< Should the step be added to the sequence */
1235:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step1            :3;  /**< Select a Sample and hold unit for the stepper's s
1236:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1237:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step1             :1;  /**< Should the step be added to the sequence */
1238:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step2            :3;  /**< Select a Sample and hold unit for the stepper's s
1239:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1240:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step2             :1;  /**< Should the step be added to the sequence */
1241:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step3            :3;  /**< Select a Sample and hold unit for the stepper's s
1242:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1243:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step3             :1;  /**< Should the step be added to the sequence */
1244:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step4            :3;  /**< Select a Sample and hold unit for the stepper's s
1245:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1246:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step4             :1;  /**< Should the step be added to the sequence */
1247:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step5            :3;  /**< Select a Sample and hold unit for the stepper's s
1248:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1249:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step5             :1;  /**< Should the step be added to the sequence */
1250:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step6            :3;  /**< Select a Sample and hold unit for the stepper's s
1251:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1252:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step6             :1;  /**< Should the step be added to the sequence */
1253:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step7            :3;  /**< Select a Sample and hold unit for the stepper's s
1254:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1255:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step7             :1;  /**< Should the step be added to the sequence */
1256:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1257:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1258:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t stepcfg;
1259:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1260:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t;
1261:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1262:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1263:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sample and hold Initialization structure
1264:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1265:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_CONFIG
1266:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
1267:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1268:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1269:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1270:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1271:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t shs_clock_divider        :4; /**< The divider value for the SHS clock. Range: [0x0 t
1272:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :6;
1273:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t analog_reference_select  :2; /**< It is possible to different reference voltage for 
1274:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  */
1275:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :20;
1276:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1277:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t shscfg;
1278:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1279:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1280:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t calibration_order; /**< order in which the calibration sh
1281:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1282:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CONFIG_t;
1283:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1284:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1285:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1286:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Detailed result structure
1287:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1288:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  typedef struct XMC_VADC_DETAILED_RESULT
1289:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
1290:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1291:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1292:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1293:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1294:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result                   :16;  /**< Result of the Analog to digital conversion*/
1295:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t data_reduction_counter   :4;   /**< Results reduction counter value*/
1296:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_number           :5;   /**< Converted channel number*/
1297:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_number      :3;   /**< Converted external multiplexer channel number.
1298:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1299:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t converted_request_source :2;   /**< Converted request source*/
1300:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t fast_compare_result      :1;   /**< Fast compare result if conversion mode is fast c
1301:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t vaild_result             :1;   /**< Valid flag is set when a new result is available
1302:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1303:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t res;
1304:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1305:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_DETAILED_RESULT_t;
1306:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  
1307:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1308:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard end*/
1309:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
1310:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma pop
1311:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
1312:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma warning restore
1313:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1314:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1315:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * static inline functions
1316:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1317:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1318:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U) 
1319:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_CHECK_GROUP_PTR(XMC_VADC_GROUP_t *const group_ptr)
1320:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
1321:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
1322:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1) || (group_ptr == VADC_G2) || (group_ptr =
1323:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1324:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1));
1325:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1326:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
1327:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1328:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1329:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * API Prototypes
1330:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1331:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1332:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #ifdef __cplusplus
1333:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** extern "C" {
1334:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1335:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1336:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1337:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1338:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1339:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1340:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1341:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1342:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module.<BR>\n
1343:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would ungate the clock to the VADC module (if applicable). Also this API would bring
1344:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module out of reset state(if applicable), by asserting the appropriate registers.
1345:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_UngatePeripheralClock() and XMC_SCU_RESET_DeassertPeripheral
1346:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * if needed. Directly accessed register is  COMPARATOR.ORCCTRL (Refer to the errata for XMC1100).
1347:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1348:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1349:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableModule().
1350:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1351:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_EnableModule(void);
1352:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1353:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1354:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1355:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1356:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1357:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1358:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1359:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module.<BR>\n
1360:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would gate the clock to the VADC module (if applicable). Also this API would put
1361:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module into the reset state(if applicable) by asserting the appropriate registers.
1362:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_GatePeripheralClock() and XMC_SCU_RESET_AssertPeripheralRese
1363:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1364:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1365:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModule().
1366:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1367:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_DisableModule(void);
1368:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1369:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1370:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1371:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module.
1372:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to initialization data structure
1373:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1374:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1375:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1376:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1377:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC global module with the associated configuration structure pointed by \a con
1378:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * enables the global access to registers by configuring reset and clock un-gating for selected dev
1379:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes global class, boundary , result resources by setting GLOBICLASS,GLOBBOUND,GLOBRCR re
1380:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the global analog and digital clock dividers by setting GLOBCFG register. Refer relat
1381:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the configurations later in the program.
1382:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1383:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1384:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_ClockInit()<BR>
1385:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1386:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
1387:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1388:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1389:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1390:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1391:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1392:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1393:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1394:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1395:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module clock.\n\n Call this API before any further configuration of VADC. It se
1396:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * register to enable.
1397:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1398:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1399:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1400:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1401:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1402:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1403:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
1404:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Enable:Wrong Module Pointer", (global_ptr == VADC))
1405:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_DISR_Msk);
1406:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
1407:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1408:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1409:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1410:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1411:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1412:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1413:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1414:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1415:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module clock.\n\n After this API call, no conversion will occur. Call
1416:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModuleClock() to enable the VADC module later in the program.
1417:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1418:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1419:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1420:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1421:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1422:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1423:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
1424:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Disable:Wrong Module Pointer", (global_ptr == VADC))
1425:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_DISR_Pos);
1426:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
1427:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1428:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1429:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1430:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1431:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1432:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1433:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1434:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1435:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables VADC module to sleep if a sleep request comes.\n\n
1436:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * It resets the EDIS bit of CLC register for enabling the sleep mode.
1437:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1438:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1439:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableSleepMode().
1440:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1441:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1442:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
1443:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1444:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_EDIS_Msk);
1445:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
1446:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1447:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1448:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1449:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1450:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1451:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1452:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1453:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1454:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the sleep mode request for the VADC.\n\n
1455:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * With the sleep feature enabled, the module will respond to sleep
1456:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * requests by going into a low power mode. It resets the EDIS bit of CLC register for enabling the
1457:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1458:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1459:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableSleepMode().
1460:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1461:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1462:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
1463:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1464:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_EDIS_Pos);
1465:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
1466:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1467:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1468:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1469:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1470:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1471:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to the data structure containing clock configuration data
1472:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1473:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1474:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1475:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1476:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the VADC clock.<BR>\n
1477:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the clock configuration of the VADC module using the config structure pointed by \a conf
1478:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * The clock to the analog converter and to the request source arbiter is configured by setting the
1479:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1480:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1481:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1482:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1483:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1484:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClockInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_
1485:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
1486:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClockInit:Wrong Module Pointer", (global_ptr == VADC))
1487:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1488:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Write the Clock configuration into the GLOBCFG register */
1489:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG = (uint32_t)(config->globcfg | (VADC_GLOBCFG_DIVWC_Msk));
1490:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
1491:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1492:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1493:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1494:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1495:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1496:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Conversion class parameter structure
1497:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type configure the input call for either standard conversion or EMUX related convers
1498:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
1499:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range: [0x0, 0x1]
1500:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1501:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1502:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ADC conversion settings like sample time and resolution.<BR>\n
1503:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc global resource associated with \a config structure. It
1504:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
1505:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the GLOBALICLASS register specified by \a set_num with the required settings.
1506:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1507:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1508:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1509:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1510:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1511:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1512:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1513:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
1514:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
1515:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1516:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1517:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1518:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC global module
1519:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to result configuration data structure
1520:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1521:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1522:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1523:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1524:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes global result register.<BR>\n
1525:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes Global Result Register with specified settings configured in the \a config structure
1526:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * results in configuration of GLOBRCR register. This helps in configuring the Data reduction mode,
1527:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * , wait for read mode on the GLOBRES register.
1528:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1529:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1530:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1531:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1532:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1533:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1534:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1535:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_ResultInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
1536:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1537:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ResultInit:Wrong Module Pointer", (global_ptr == VADC))
1538:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1539:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure GLOBRCR*/
1540:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBRCR = config->g_rcr;
1541:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1542:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  
1543:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1544:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1545:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1546:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1547:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1548:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1549:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1550:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of G
1551:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * enable the startup calibration feature. After turning it on, it loops until all active groups fi
1552:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call XMC_VADC_GLOBAL_Enable() and XMC_VADC_GLOBAL_ClockInit() before calling this API in sequenc
1553:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableStartupCalibration() can disable the calibration feature at runtime.
1554:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1555:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1556:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1557:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1558:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1559:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1560:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr);
1561:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1562:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1563:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1564:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1565:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr  Constant pointer to the VADC module.
1566:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1567:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1568:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1569:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1570:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of 
1571:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * disable the startup calibration feature. Calling the API XMC_VADC_GLOBAL_EnsableStartupCalibrati
1572:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * calibration feature at runtime.
1573:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1574:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1575:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1576:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1577:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1578:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableStartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
1579:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
1580:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableStartupCalibration:Wrong Module Pointer", (global_ptr == VADC)
1581:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= ~((uint32_t)VADC_GLOBCFG_SUCAL_Msk);
1582:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
1583:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1584:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1585:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1586:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1587:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1588:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be disabled. <BR>
1589:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1590:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1591:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1592:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1593:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1594:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the post calibration for a particular group specified as \a group_number.\n\n It config
1595:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to disable the post calibration feature. Call XMC_VADC_GLOBAL_Enable() and
1596:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit() before calling this API in sequence. Calling the API
1597:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnablePostCalibration() can enable back the calibration feature at runtime.
1598:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1599:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1600:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1601:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1602:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1603:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1604:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1605:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1606:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, ui
1607:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
1608:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1609:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1610:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_numbe
1611:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
1612:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1613:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1614:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1615:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1616:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be enabled. <BR>
1617:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1618:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1619:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1620:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1621:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1622:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the post calibration for a particular group specified as \a group_number.\n\n It configu
1623:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to enable the post calibration feature. Calling the API XMC_VADC_GLOBAL_Disa
1624:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * can disable the calibration feature at runtime.
1625:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1626:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1627:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1628:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1629:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1630:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uin
1631:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
1632:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1633:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1634:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= (~ (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_nu
1635:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
1636:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1637:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1638:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
1639:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1640:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1641:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1642:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>Range[0 - 4095]
1643:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>Range[0 - 4095]
1644:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1645:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1646:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1647:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1648:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
1649:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They define a range against which the result of a conversion can be compare
1650:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
1651:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
1652:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * GLOBBOUND1 who will derive their values from this palette.
1653:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1654:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1655:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1656:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1657:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1658:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t boundary0, c
1659:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1660:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1661:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1662:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1663:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
1664:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value  Boundary Value<BR>Range[0 - 4095]
1665:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1666:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1667:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1668:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1669:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs either the boundary 0 or boundary 1 for result comparison.\n\n This defines a range aga
1670:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
1671:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
1672:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1673:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1674:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1675:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1676:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1677:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
1678:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                            const XMC_VADC_CHANNEL_BOUNDARY_t selection,
1679:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                            const uint16_t boundary_value); 
1680:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1681:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1682:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_AVAILABLE== 1U)
1683:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1684:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1685:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module
1686:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param emuxif       The EMUX interface<BR>Range[0x0 - 0x1]
1687:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group        The VADC group which must be bound to the desired emux
1688:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1689:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1690:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1691:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1692:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds a VADC \a group to an EMUX interface specified in \a emuxif.<BR>\n
1693:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects which group's scan request source will control the EMUX interface (set of control select
1694:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * By passing \b group it would configure that group's scan request source to control the EMUX sele
1695:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \b emuxif.
1696:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1697:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1698:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1699:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1700:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
1701:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1702:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1703:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1704:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1705:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1706:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1707:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return uint32_t Complete global result register value GLOBRES
1708:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1709:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1710:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the complete result from the global result register associated with the \a global_ptr.
1711:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result register GLOBRES for the validity of the data. If the validity is assured, data is fi
1712:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the global result register, cached locally next and subsequently returned to the caller.
1713:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1714:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1715:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetResult()
1716:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1717:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GLOBAL_GetDetailedResult(XMC_VADC_GLOBAL_t *const global_ptr)
1718:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
1719:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetDetailedResult:Wrong Module Pointer", (global_ptr == VADC))
1720:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1721:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  return(global_ptr->GLOBRES);
1722:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
1723:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1724:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1725:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1726:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1727:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1728:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return XMC_VADC_RESULT_SIZE_t 16 bit result register value.<BR>
1729:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *         Range[0x0 - 0X0FFF]
1730:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1731:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1732:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the conversion result from the global result register associated with the \a global_pt
1733:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * lightweight version of XMC_VADC_GLOBAL_GetDetailedResult(). The behavior is exactly the same, ju
1734:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * only the 16 bit numeric result returned back to the application instead of the complete GLOBRES 
1735:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1736:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1737:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetDetailedResult()
1738:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1739:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GLOBAL_GetResult(XMC_VADC_GLOBAL_t *const global_pt
1740:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
1741:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetResult:Wrong Module Pointer", (global_ptr == VADC))
1742:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1743:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((XMC_VADC_RESULT_SIZE_t)global_ptr->GLOBRES);
1744:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
1745:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1746:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1747:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1748:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1749:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param compare_val Compare value which the result of a conversion will be compared against.
1750:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *         <BR>Range[0x0 - 0X0FFF]
1751:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1752:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1753:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1754:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1755:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set compare value in the global result register for fast compare mode.\n\n The result of a conve
1756:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * be compared to the compare value entered as part of \a compare_val. The prerequisite is that the
1757:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * with this global register must select an ICLASS which has the conversion mode configured as fast
1758:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_GLOBAL_GetCompareResult() after this API to
1759:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1760:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1761:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1762:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1763:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
1764:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1765:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1766:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1767:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1768:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return compare high or low. Refer @ref XMC_VADC_FAST_COMPARE_t enum
1769:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1770:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1771:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1772:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1773:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines the result of fast compare operation.\n\n This API returns the result of fast compare
1774:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the valid flag in the global result register GLOBRES is set.
1775:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1776:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1777:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1778:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1779:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr);
1780:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1781:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1782:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1783:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr         Constant pointer to the VADC module
1784:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param event_type   Desired event that must be manually asserted
1785:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1786:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1787:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1788:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1789:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts an event that can lead to an interrupt.\n\n This API manually asserts the reque
1790:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * (Background request source event or a global result event) by setting the GLOBEVFLAG register wi
1791:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \a event_type.
1792:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1793:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1794:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1795:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1796:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1797:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_TriggerEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32
1798:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
1799:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Module Pointer", (global_ptr == VADC))
1800:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Global Event", 
1801:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1802:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1803:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = event_type;
1804:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
1805:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1806:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1807:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1808:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1809:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param event_type Event that must be acknowledged
1810:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1811:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1812:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1813:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1814:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1815:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges an event that has been asserted manually or automatically.\n\n This API acknowledge
1816:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * by clearing GLOBEFLAG sticky flag.
1817:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1818:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1819:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1820:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1821:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClearEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t
1822:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
1823:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Module Pointer", (global_ptr == VADC))
1824:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Global Event", 
1825:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1826:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1827:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = ((uint32_t)(event_type << (uint32_t)16));
1828:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
1829:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1830:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1831:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1832:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1833:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global result event is connected. Refer @ref XMC_VADC
1834:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1835:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1836:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1837:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1838:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Binds the global result event to one of the 4 shared service requests.\n\n This API binds the g
1839:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  to one of the 4 module wide shared service requests .Sets GLOBEVNP register with the correspond
1840:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1841:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1842:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode()
1843:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1844:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
1845:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1846:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1847:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1848:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1849:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global request source event is connected. Refer @ref 
1850:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1851:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1852:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1853:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1854:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds the background request source event to one of the 4 shared service requests.\n\n This API 
1855:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source event to one of the 4 module wide shared service requests. Sets GLOBEVNP register
1856:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * corresponding \a sr line.
1857:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1858:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1859:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SetResultEventInterruptNode()
1860:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1861:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
1862:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1863:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1864:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1865:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1866:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  config Struct consisting of various SHS related configurations.
1867:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1868:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1869:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1870:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1871:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the basic SHS parameters.<BR>\n
1872:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration, the analog reference selection and
1873:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the calibration order for the Sample and Hold unit.
1874:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1875:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1876:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1877:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1878:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONF
1879:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1880:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1881:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  /**
1882:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1883:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param  config Struct consisting of various step configurations.
1884:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1885:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return None
1886:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1887:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1888:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   * Configures the stepper sequence for the converter.<BR>\n
1889:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   * Stepper of the SHS can be configured to take up a specific sequence of groups for conversion.
1890:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   * The stepper sequence is configured using this API.
1891:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1892:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1893:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   * None.
1894:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   */
1895:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetStepperSequence(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1896:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                              const XMC_VADC_GLOBAL_SHS_STEP_CONFIG_
1897:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1898:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
1899:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1900:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong config pointer",
1901:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****              (config == (XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t*)NULL))
1902:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1903:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->STEPCFG = (uint32_t) config->stepcfg;
1904:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1905:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1906:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1907:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  /**
1908:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1909:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1910:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return bool returns true if the analog converter is operable
1911:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   *              returns false if the analog converter is powered down
1912:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1913:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1914:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   * Returns the converter status.<BR>\n
1915:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   * Returns the ANRDY bit field of the SHSCFG register.
1916:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1917:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1918:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   * None.
1919:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   */
1920:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE bool XMC_VADC_GLOBAL_SHS_IsConverterReady(XMC_VADC_GLOBAL_SHS_t *const shs_ptr)
1921:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1922:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_IsConverterReady:Wrong SHS Pointer",(shs_ptr == (XMC_VADC_GLOBAL_
1923:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1924:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   return((bool)((shs_ptr->SHSCFG >> (uint32_t)SHS_SHSCFG_ANRDY_Pos) & (uint32_t)0x1));
1925:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1926:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1927:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1928:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1929:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1930:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
1931:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1932:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1933:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1934:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1935:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
1936:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
1937:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * this mode the ADC module will convert the input depending on the value stored in the SST bit of 
1938:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would configure the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
1939:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1940:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1941:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1942:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1943:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP_
1944:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1945:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1946:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1947:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be disabled.<BR>Range: [0x
1948:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1949:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1950:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1951:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1952:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
1953:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from accelerated mode to compatible mode of conversion is neede
1954:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would clear the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
1955:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1956:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1957:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1958:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1959:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP
1960:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1961:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1962:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1963:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
1964:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sst_value Value of short sample time that needs to be configured.<BR>
1965:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                  Range: [0x0 to 0x3F]
1966:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1967:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1968:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1969:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1970:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the Accelerated timing mode sample time.<BR>\n
1971:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
1972:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Accelerated mode the ADC module will convert the input depending on the value stored in the SST 
1973:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  SHS0_TIMCFGx. This API would configure the shot sample time either in SHS0_TIMCFG0.SST or SHS0_
1974:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1975:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1976:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1977:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1978:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1979:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                             XMC_VADC_GROUP_INDEX_t group_num,
1980:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint8_t sst_value);
1981:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
1982:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1983:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1984:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1985:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  divs_value The clock divider value that is possible
1986:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    <BR>Range:[0x0 to 0xF]
1987:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1988:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1989:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1990:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure Sample and hold clock divider value.<BR>\n
1991:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration. This determines the frequency of conversio
1992:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * of the Sample and hold converter.
1993:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1994:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1995:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1996:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1997:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetClockDivider(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, uint
1998:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
1999:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong SHS Pointer",
2000:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2001:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong divide factor selected",
2002:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****              (divs_value < (uint32_t)0x10))
2003:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2004:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG =  (shs_ptr->SHSCFG & (~(uint32_t)SHS_SHSCFG_DIVS_Msk)) | (uint32_t)SHS_SHSCFG_SC
2005:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG |=  ((uint32_t)divs_value << SHS_SHSCFG_DIVS_Pos) | (uint32_t)SHS_SHSCFG_SCWC_Msk
2006:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
2007:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2008:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2009:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2010:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_value gain value possible
2011:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Range:[0x0 to 0x3]
2012:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2013:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  ch_num The channel number for which the gain has to be configured
2014:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2015:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2016:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2017:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the gain value for SHS.<BR>\n
2018:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would set the gain factor for a selected channel.
2019:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2020:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2021:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2022:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2023:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2024:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                        uint8_t gain_value,
2025:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                        XMC_VADC_GROUP_INDEX_t group_num,
2026:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                        uint8_t ch_num);
2027:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2028:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
2029:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2030:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2031:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  max_calibration_time calibration time
2032:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                              Range:[0x0 to 0x3F]
2033:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2034:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2035:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2036:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the Maximum calibration timing.<BR>\n
2037:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the Maximum time after which the calibration should occur. If no adc conver
2038:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * occur during this duration then the calibration would run irrespective of conversions. The max t
2039:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter can go without a calibration is set in this API.
2040:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2041:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2042:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2043:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2044:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetMaxCalTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2045:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        uint32_t max_calibration_time)
2046:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
2047:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetMaxCalTime:Wrong SHS Pointer",
2048:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2049:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2050:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALMAX_Msk);
2051:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->CALCTR |=  ((uint32_t)max_calibration_time << SHS_CALCTR_CALMAX_Pos);
2052:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
2053:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2054:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2055:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2056:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2057:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2058:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2059:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2060:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2061:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the Gain and offset calibration.<BR>\n
2062:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the gain and offset calibration for all the Sample and hold units.
2063:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2064:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2065:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations()<BR>.
2066:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2067:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2068:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          XMC_VADC_GROUP_INDEX_t group_num);
2069:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2070:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2071:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2072:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2073:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2074:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2075:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2076:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the Gain and offset calibration.<BR>\n
2077:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the gain and offset calibration for all the Sample and hold units.
2078:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2079:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2080:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2081:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2082:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2083:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                           XMC_VADC_GROUP_INDEX_t group_num);
2084:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2085:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2086:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2087:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2088:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2089:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2090:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2091:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2092:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Read the calibration value for the selected gain level.<BR>\n
2093:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would return the offset calibration val
2094:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * selected gain level. This is applicable for all the channels in the group that use the particula
2095:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2096:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2097:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue()<BR>.
2098:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2099:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2100:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GROUP_INDEX_t group_num,
2101:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_SHS_GAIN_LEVEL_t gain_level);
2102:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2103:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2104:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2105:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2106:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2107:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  offset_calibration_value The offset calibration value to be set.
2108:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2109:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2110:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2111:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set the calibration value for the selected gain level.<BR>\n
2112:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would set the offset value of the selec
2113:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2114:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2115:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue()<BR>.
2116:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2117:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2118:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    XMC_VADC_GROUP_INDEX_t group_num,
2119:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
2120:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    uint8_t offset_calibration_value);
2121:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2122:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2123:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2124:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2125:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2126:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2127:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  ch_num Channel number for which the configurations applies
2128:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2129:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2130:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2131:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the delta sigma loop of the SHS.<BR>\n
2132:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * There are 2 Delta-Sigma loops that can be configured. This API would configure the loop (loop_se
2133:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * with the appropriate group_num and channel_num.
2134:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP bit fields.
2135:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2136:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2137:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop()<BR>.
2138:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2139:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2140:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                            XMC_VADC_GROUP_INDEX_t group_num,
2141:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                            XMC_VADC_SHS_LOOP_CH_t loop_select,
2142:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                            uint8_t ch_num);
2143:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2144:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2145:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2146:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2147:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2148:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2149:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2150:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the selected Delta-Sigma loop.<BR>\n
2151:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2152:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2153:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2154:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2155:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2156:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2157:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2158:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               XMC_VADC_SHS_LOOP_CH_t loop_select)
2159:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
2160:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong SHS Pointer",
2161:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2162:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2163:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2164:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2165:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->LOOP |= (uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select;
2166:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
2167:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2168:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2169:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2170:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2171:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2172:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2173:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2174:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the selected delta sigma loop.<BR>\n
2175:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2176:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2177:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2178:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2179:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2180:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2181:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr
2182:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                XMC_VADC_SHS_LOOP_CH_t loop_select)
2183:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
2184:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong SHS Pointer",
2185:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2186:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2187:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2188:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2189:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->LOOP &= ~((uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select);
2190:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2191:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
2192:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2193:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2194:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
2195:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2196:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2197:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the VADC group.
2198:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to the initialization data structure
2199:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2200:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2201:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2202:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2203:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC group module with the associated configuration structure pointed by \a conf
2204:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes the group specified as part of the \a group_ptr. It initializes group conversion cla
2205:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * configuration , boundary configuration by setting GxICLASS,GxARBCFG,GxBOUND, registers. It also
2206:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the EMUX control register if applicable. Refer related API's to change the configurat
2207:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  program.
2208:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2209:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2210:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_InputClassInit()<BR>
2211:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetPowerMode()<BR>
2212:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetBoundaries()<BR>
2213:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ExternalMuxControlInit()<BR>
2214:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2215:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_Init(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config);
2216:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2217:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2218:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2219:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group.
2220:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  group related conversion class parameter structure
2221:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type Use direct channels or EMUX channels. Refer @ref XMC_VADC_GROUP_CONV_t enum
2222:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
2223:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range[0x0, 0x1]
2224:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2225:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2226:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2227:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2228:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc group resource associated with \a config structure. It 
2229:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
2230:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the G_ICLASS register specified by \a set_num with the required settings.
2231:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2232:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2233:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2234:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_Init()
2235:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2236:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2237:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
2238:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num);
2239:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2240:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2241:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2242:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC Group which must be set as a slave
2243:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param master_grp The master group number<BR>
2244:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2245:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group The slave group number<BR>
2246:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2247:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2248:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2249:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2250:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2251:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures a VADC Group as a slave group.\n\n Conversion of identically numbered channels across
2252:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2253:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is the
2254:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * master group while Groups-0 and 3 are the slave groups. It uses the SYNCCTR register for the con
2255:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2256:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2257:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_SetSyncMaster()<BR>
2258:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR>
2259:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_EnableChannelSyncRequest()<BR>
2260:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2261:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2262:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
2263:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2264:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2265:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2266:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC Group.
2267:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param power_mode  Desired power mode
2268:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2269:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2270:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2271:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2272:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the power mode of a VADC group.\n\n For a VADC group to actually convert an analog si
2273:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter must be turned on.
2274:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2275:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2276:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2277:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2278:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
2279:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2280:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2281:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2282:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2283:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2284:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2285:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2286:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2287:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures a VADC Group as a master group.<BR>\n
2288:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Conversion of identically numbered channels across groups can be
2289:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2290:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is therefore the mast
2291:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Groups-0 and 3 are the slave groups.
2292:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2293:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2294:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2295:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2296:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr);
2297:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2298:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2299:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2300:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2301:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2302:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     <BR>Range: [0x0 to 0x3]
2303:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2304:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2305:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2306:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ready signal for master group.<BR>\n
2307:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would read the \b slave_group number and determine which EVAL configuration to apply fo
2308:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * slave set. Checks the readiness of slaves in synchronized conversions. Conversion of identically
2309:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * across groups can be synchronized. For example, when the trigger to convert CH-1 of Group-2 is r
2310:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * possible to simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this ex
2311:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * therefore the master group while Groups-0 and 3 are the slave groups. Before the master can requ
2312:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * for synchronized conversion, it has the option of checking the readiness of the slaves.
2313:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2314:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2315:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()
2316:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2317:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2318:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2319:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2320:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2321:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the master VADC Group
2322:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2323:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2324:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2325:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2326:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Clears the ready signal for master group.<BR>\n
2327:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the readiness of slaves in synchronized conversions.This API would read the \b slave_gro
2328:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * determine which EVAL configuration to apply for the given master slave set. Then clears the conf
2329:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is called when the master should issue the conversion request without waiting for the s
2330:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * assert a ready signal. The ready signal is asserted by the slave group(s) when the conversion is
2331:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * in these channels.
2332:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2333:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2334:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()<BR>
2335:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2336:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2337:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2338:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2339:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2340:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group waiting for ready signal
2341:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_waiting_group  The VADC Group which expects a ready signal to start it's conversion.
2342:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_origin_group  The VADC Group from which the eval_waiting_group will expect a ready s
2343:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2344:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2345:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2346:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets the ready signal in the eval_waiting_group .<BR>\n
2347:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion all the slaves participating need to configure the ready signal.
2348:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A slave group will also need to configure the ready signals coming from the other slave groups.
2349:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the Sync.slave's EVAL Bits (GxSYNCTR.EVALy).
2350:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2351:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2352:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2353:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2354:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlaveReadySignal(XMC_VADC_GROUP_t *const group_ptr,
2355:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint32_t eval_waiting_group,
2356:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint32_t eval_origin_group);
2357:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2358:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2359:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2360:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group
2361:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2362:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *         uint32_t EVAL bits for the group
2363:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2364:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2365:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Get the Eval bits of the group.<BR>\n
2366:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion the master's ready signal configuration must be copied onto the slav
2367:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would return the Sync EVAL Bits (GxSYNCTR.EVALy) which can be used to set in 
2368:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2369:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2370:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2371:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2372:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetSyncReadySignal(XMC_VADC_GROUP_t *const group_ptr)
2373:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
2374:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t eval_mask;
2375:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetSyncReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
2376:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2377:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
2378:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk | VADC_G_SYNCTR_EVALR2_Msk | VADC_G_SYNCTR_EVALR3_Msk;
2379:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #else
2380:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk;
2381:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2382:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   return( group_ptr->SYNCTR & eval_mask);
2383:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
2384:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2385:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2386:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group
2387:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_mask  mask to configure the eval bits
2388:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Use XMC_VADC_SYNCTR_EVAL_t to create the mask.
2389:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2390:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2391:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2392:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set the Eval bits of the group.<BR>\n
2393:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion the master's ready signal configuration must be copied onto the slav
2394:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the Sync EVAL Bits (GxSYNCTR.EVALy).
2395:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2396:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2397:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2398:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2399:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_SetSyncReadySignal(XMC_VADC_GROUP_t *const group_ptr, uint32_t 
2400:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
2401:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t eval_mask;
2402:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
2403:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2404:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
2405:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk | VADC_G_SYNCTR_EVALR2_Msk | VADC_G_SYNCTR_EVALR3_Msk;
2406:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #else
2407:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk;
2408:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2409:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SYNCTR &= ~(eval_mask);
2410:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SYNCTR |= mask;
2411:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
2412:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2413:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2414:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2415:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the master VADC Group
2416:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num  Channel whose conversion triggers conversion in slave groups
2417:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2418:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2419:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2420:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up a channel for synchronized conversion.\n\n Conversion of identically numbered channels a
2421:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be synchronized. For example, when the trigger to
2422:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * convert CH-1 of Group-2 is received, it is possible to simultaneously request conversion of CH-1
2423:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Group-3. Group-2 in this example is therefore the master group while Groups-0 and 3 are the slav
2424:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Before the master can request its slaves for synchronized conversion, it has the option of check
2425:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * of the slaves.
2426:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2427:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2428:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2429:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2430:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
2431:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2432:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2433:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2434:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2435:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     Channel whose conversion triggers conversion in slave groups
2436:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2437:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2438:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2439:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the synchronization request for the particular channel specified as ch_num. To enable th
2440:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * call the API @ref XMC_VADC_GROUP_EnableChannelSyncRequest().
2441:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2442:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2443:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2444:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2445:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
2446:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2447:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2448:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2449:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2450:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2451:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return retuns IDLE if converter is free else returns busy. Refer @ref XMC_VADC_GROUP_STATE_t en
2452:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2453:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2454:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Checks the live status of the analog to digital converter. The converter can either idle doing n
2455:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * sampling + converting.
2456:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2457:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2458:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2459:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2460:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr);
2461:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2462:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2463:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2464:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group whose global boundary registers are to be pr
2465:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>
2466:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2467:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>
2468:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2469:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2470:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2471:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2472:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2473:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
2474:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They defines a range against which the result of a conversion can be compar
2475:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
2476:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
2477:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * G_BOUND1 who will derive their values from this palette.
2478:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2479:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2480:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2481:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2482:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2483:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, 
2484:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                   const uint32_t boundary0, 
2485:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                   const uint32_t boundary1);
2486:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2487:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2488:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2489:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
2490:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value Select the boundary value.
2491:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2492:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2493:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2494:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2495:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundary with \a boundary_value for result comparison.\n\n This defines a range aga
2496:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
2497:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
2498:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2499:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2500:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2501:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2502:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
2503:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_CHANNEL_BOUNDARY_t selection,
2504:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const uint16_t boundary_value); 
2505:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2506:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2507:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2508:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr_num   The service request number (0 through 3)
2509:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param type     IRQ type (Kernel specific interrupt vs Module wide shared interrupt )
2510:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2511:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2512:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2513:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Activates a Service Request line(manually trigger).<BR>\n
2514:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * VADC provides few SR lines for each group and a few more which is shared across all the groups.
2515:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * These SR lines can be connected to an NVIC node which in-turn would generate an interrupt.
2516:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would manually trigger the given SR line. Could be used for evaluation and testing purp
2517:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2518:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2519:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2520:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2521:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr, 
2522:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const uint32_t sr_num, 
2523:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_IRQ_t type);
2524:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2525:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2526:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2527:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group
2528:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param emux_cfg   EMUX configuration structure
2529:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2530:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2531:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2532:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures group EMUX parameters associated with the \a emux_cfg configuration structure.\n\n An
2533:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * interface allows additional channels to be connected to a VADC group. The conversion properties
2534:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * of such channels can be different from the standard channels which are directly connected to the
2535:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API configures conversion properties of channels connected via EMUX interface.
2536:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2537:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2538:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2539:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2540:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
2541:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                            const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
2542:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
  27              	 .loc 1 2542 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 85B0     	 sub sp,sp,#20
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 24
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 3960     	 str r1,[r7]
2543:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t   emux_config;
2544:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2545:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
2546:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2547:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_P
  44              	 .loc 1 2547 0
  45 000a 3B78     	 ldrb r3,[r7]
  46 000c C3F30203 	 ubfx r3,r3,#0,#3
  47 0010 DBB2     	 uxtb r3,r3
  48 0012 1A46     	 mov r2,r3
2548:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****               ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
  49              	 .loc 1 2548 0
  50 0014 7B88     	 ldrh r3,[r7,#2]
  51 0016 C3F30903 	 ubfx r3,r3,#0,#10
  52 001a 9BB2     	 uxth r3,r3
  53 001c 1B04     	 lsls r3,r3,#16
2547:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****               ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
  54              	 .loc 1 2547 0
  55 001e 1343     	 orrs r3,r3,r2
  56 0020 FB60     	 str r3,[r7,#12]
2549:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2550:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->EMUXCTR  = emux_config;
  57              	 .loc 1 2550 0
  58 0022 7B68     	 ldr r3,[r7,#4]
  59 0024 FA68     	 ldr r2,[r7,#12]
  60 0026 C3F8F021 	 str r2,[r3,#496]
2551:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  61              	 .loc 1 2551 0
  62 002a FB78     	 ldrb r3,[r7,#3]
  63 002c C3F30013 	 ubfx r3,r3,#4,#1
  64 0030 DBB2     	 uxtb r3,r3
  65 0032 1A07     	 lsls r2,r3,#28
2552:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
  66              	 .loc 1 2552 0
  67 0034 FB78     	 ldrb r3,[r7,#3]
  68 0036 C3F38103 	 ubfx r3,r3,#2,#2
  69 003a DBB2     	 uxtb r3,r3
  70 003c 9B06     	 lsls r3,r3,#26
2551:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  71              	 .loc 1 2551 0
  72 003e 1A43     	 orrs r2,r2,r3
2553:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
  73              	 .loc 1 2553 0
  74 0040 FB78     	 ldrb r3,[r7,#3]
  75 0042 C3F34013 	 ubfx r3,r3,#5,#1
  76 0046 DBB2     	 uxtb r3,r3
  77 0048 5B07     	 lsls r3,r3,#29
2551:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  78              	 .loc 1 2551 0
  79 004a 1343     	 orrs r3,r3,r2
  80 004c FB60     	 str r3,[r7,#12]
2554:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2555:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
2556:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_P
  81              	 .loc 1 2556 0
  82 004e FB78     	 ldrb r3,[r7,#3]
  83 0050 C3F38013 	 ubfx r3,r3,#6,#1
  84 0054 DBB2     	 uxtb r3,r3
  85 0056 9B07     	 lsls r3,r3,#30
  86 0058 FA68     	 ldr r2,[r7,#12]
  87 005a 1343     	 orrs r3,r3,r2
  88 005c FB60     	 str r3,[r7,#12]
2557:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2558:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
  89              	 .loc 1 2558 0
  90 005e 7B68     	 ldr r3,[r7,#4]
  91 0060 D3F8F021 	 ldr r2,[r3,#496]
  92 0064 FB68     	 ldr r3,[r7,#12]
  93 0066 1343     	 orrs r3,r3,r2
  94 0068 43F00042 	 orr r2,r3,#-2147483648
  95 006c 7B68     	 ldr r3,[r7,#4]
  96 006e C3F8F021 	 str r2,[r3,#496]
2559:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
  97              	 .loc 1 2559 0
  98 0072 1437     	 adds r7,r7,#20
  99              	.LCFI3:
 100              	 .cfi_def_cfa_offset 4
 101 0074 BD46     	 mov sp,r7
 102              	.LCFI4:
 103              	 .cfi_def_cfa_register 13
 104              	 
 105 0076 5DF8047B 	 ldr r7,[sp],#4
 106              	.LCFI5:
 107              	 .cfi_restore 7
 108              	 .cfi_def_cfa_offset 0
 109 007a 7047     	 bx lr
 110              	 .cfi_endproc
 111              	.LFE178:
 113              	 .section .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot,"ax",%progbits
 114              	 .align 2
 115              	 .thumb
 116              	 .thumb_func
 118              	XMC_VADC_GROUP_ScanEnableArbitrationSlot:
 119              	.LFB181:
2560:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2561:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
2562:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2563:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2564:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2565:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_flag_num The Boundary flag for which the interrupt node needs to be configured.
2566:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                          Range: [0x0 to 0x3]
2567:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param node    Service Request node Id
2568:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2569:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2570:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2571:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2572:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the boundary event to the SR line of VADC or to a common boundary flag.<BR>\n
2573:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a boundary event. Hence to get a interrupt o
2574:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
2575:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * field GxBFLNP.BFLxNP.
2576:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2577:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2578:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2579:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2580:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
2581:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                   const uint8_t boundary_flag_num,
2582:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                   const XMC_VADC_BOUNDARY_NODE_t node);
2583:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2584:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2585:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2586:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2587:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2588:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t The complete GxALIAS register
2589:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2590:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2591:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the ALIAS values.\n The ALIAS value that is configured for Channel-0 and channel-1 are r
2592:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2593:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2594:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2595:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2596:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetAlias(XMC_VADC_GROUP_t *const group_ptr)
2597:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
2598:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetAliasWrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
2599:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   return (group_ptr->ALIAS);
2600:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
2601:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2602:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2603:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2604:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_class  conversion property to be extracted
2605:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2606:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_GROUP_CLASS_t The complete GxICLASSy register
2607:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2608:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2609:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the input class configuration values.\n
2610:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This returns the sampling time configuration and resolution configured in the appropriate group 
2611:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \b conv_class. A call to this API would return the register GxICLASSy.
2612:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2613:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2614:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2615:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2616:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_GROUP_CLASS_t XMC_VADC_GROUP_GetInputClass(XMC_VADC_GROUP_t *const group_p
2617:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const XMC_VADC_CHANNEL_CONV_t c
2618:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
2619:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CLASS_t input_value;
2620:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
2621:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong conv_class selected", 
2622:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****              (XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLA
2623:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2624:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   input_value.g_iclass0 = (uint32_t) 0xFFFFFFFF;
2625:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   if ((XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLASS1 == 
2626:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   {
2627:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     input_value.g_iclass0 = group_ptr->ICLASS[(uint32_t)conv_class];
2628:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   }
2629:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2630:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   return (input_value);
2631:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
2632:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2633:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2634:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)
2635:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2636:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
2637:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to Scan configuration
2638:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2639:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2640:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2641:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC SCAN functional block.<BR>\n
2642:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * The GROUP SCAN request source functional block converts channels sequentially starting with the 
2643:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * channel to the lowest. Channels must register themselves as being part of the the scan sequence.
2644:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_ScanEnableA
2645:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
2646:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_ScanDisableArbi
2647:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxASCTRL, GxASMR needed scan request s
2648:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2649:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2650:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR> XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2651:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanSelectGating()<BR>
2652:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2653:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
2654:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2655:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2656:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2657:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2658:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2659:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2660:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2661:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the scan request source.<BR>\n
2662:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2663:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2664:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot. Thus this must be enabled if any conversion need to take place.
2665:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2666:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2667:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2668:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2669:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2670:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2671:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 120              	 .loc 1 2671 0
 121              	 .cfi_startproc
 122              	 
 123              	 
 124              	 
 125 0000 80B4     	 push {r7}
 126              	.LCFI6:
 127              	 .cfi_def_cfa_offset 4
 128              	 .cfi_offset 7,-4
 129 0002 83B0     	 sub sp,sp,#12
 130              	.LCFI7:
 131              	 .cfi_def_cfa_offset 16
 132 0004 00AF     	 add r7,sp,#0
 133              	.LCFI8:
 134              	 .cfi_def_cfa_register 7
 135 0006 7860     	 str r0,[r7,#4]
2672:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2673:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN1_Msk;
 136              	 .loc 1 2673 0
 137 0008 7B68     	 ldr r3,[r7,#4]
 138 000a D3F88430 	 ldr r3,[r3,#132]
 139 000e 43F00072 	 orr r2,r3,#33554432
 140 0012 7B68     	 ldr r3,[r7,#4]
 141 0014 C3F88420 	 str r2,[r3,#132]
2674:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
 142              	 .loc 1 2674 0
 143 0018 0C37     	 adds r7,r7,#12
 144              	.LCFI9:
 145              	 .cfi_def_cfa_offset 4
 146 001a BD46     	 mov sp,r7
 147              	.LCFI10:
 148              	 .cfi_def_cfa_register 13
 149              	 
 150 001c 5DF8047B 	 ldr r7,[sp],#4
 151              	.LCFI11:
 152              	 .cfi_restore 7
 153              	 .cfi_def_cfa_offset 0
 154 0020 7047     	 bx lr
 155              	 .cfi_endproc
 156              	.LFE181:
 158 0022 00BF     	 .section .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot,"ax",%progbits
 159              	 .align 2
 160              	 .thumb
 161              	 .thumb_func
 163              	XMC_VADC_GROUP_ScanDisableArbitrationSlot:
 164              	.LFB182:
2675:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2676:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2677:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2678:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2679:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2680:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2681:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2682:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the scan request source.<BR>\n
2683:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2684:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2685:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot.A call to this API will lead to all conversions request by scan to be blocked.
2686:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2687:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2688:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2689:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR>
2690:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2691:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2692:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 165              	 .loc 1 2692 0
 166              	 .cfi_startproc
 167              	 
 168              	 
 169              	 
 170 0000 80B4     	 push {r7}
 171              	.LCFI12:
 172              	 .cfi_def_cfa_offset 4
 173              	 .cfi_offset 7,-4
 174 0002 83B0     	 sub sp,sp,#12
 175              	.LCFI13:
 176              	 .cfi_def_cfa_offset 16
 177 0004 00AF     	 add r7,sp,#0
 178              	.LCFI14:
 179              	 .cfi_def_cfa_register 7
 180 0006 7860     	 str r0,[r7,#4]
2693:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
2694:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN1_Msk);
 181              	 .loc 1 2694 0
 182 0008 7B68     	 ldr r3,[r7,#4]
 183 000a D3F88430 	 ldr r3,[r3,#132]
 184 000e 23F00072 	 bic r2,r3,#33554432
 185 0012 7B68     	 ldr r3,[r7,#4]
 186 0014 C3F88420 	 str r2,[r3,#132]
2695:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
 187              	 .loc 1 2695 0
 188 0018 0C37     	 adds r7,r7,#12
 189              	.LCFI15:
 190              	 .cfi_def_cfa_offset 4
 191 001a BD46     	 mov sp,r7
 192              	.LCFI16:
 193              	 .cfi_def_cfa_register 13
 194              	 
 195 001c 5DF8047B 	 ldr r7,[sp],#4
 196              	.LCFI17:
 197              	 .cfi_restore 7
 198              	 .cfi_def_cfa_offset 0
 199 0020 7047     	 bx lr
 200              	 .cfi_endproc
 201              	.LFE182:
 203 0022 00BF     	 .section .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot,"ax",%progbits
 204              	 .align 2
 205              	 .thumb
 206              	 .thumb_func
 208              	XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:
 209              	.LFB198:
2696:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2697:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2698:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2699:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2700:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
2701:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2702:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2703:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the arbitration status of the scan request source.<BR>\n
2704:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2705:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2706:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot. A call to this API would return the status of the arbitration slot of scan.
2707:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
2708:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2709:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2710:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR
2711:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2712:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr)
2713:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
2714:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GROU
2715:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2716:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN1_Msk) >> VADC_G_ARBPR_ASEN1_Pos);
2717:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
2718:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2719:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2720:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2721:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_input  Choice of the input earmarked as a trigger line
2722:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2723:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2724:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2725:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2726:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for scan request source.<BR>\n
2727:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2728:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
2729:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2730:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
2731:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTSEL.
2732:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2733:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2734:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectGating()<BR> XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
2735:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2736:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
2737:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2738:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2739:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2740:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2741:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Trigger edge selection
2742:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2743:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2744:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2745:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2746:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the trigger edge for scan request source.<BR>\n
2747:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2748:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible trigger edges. This is
2749:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2750:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTMODE.
2751:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2752:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2753:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2754:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2755:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
2756:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2757:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2758:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2759:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param gating_input  Module input signal meant to be selected as gating input
2760:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2761:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2762:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2763:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2764:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for scan request source.<BR>\n
2765:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
2766:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the scan request source o
2767:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxASMR.ENGT has to be config
2768:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxAS
2769:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2770:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2771:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2772:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2773:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
2774:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2775:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2776:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2777:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the scan request source
2778:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2779:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2780:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2781:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2782:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of scan request source.<BR>\n
2783:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
2784:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
2785:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
2786:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2787:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2788:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectGating();
2789:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2790:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_G
2791:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
2792:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2793:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE
2794:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2795:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
2796:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= (uint32_t) (~((uint32_t)VADC_G_ASMR_ENGT_Msk));
2797:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Set the new gating mode */
2798:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)((uint32_t)mode_sel << VADC_G_ASMR_ENGT_Pos);
2799:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
2800:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2801:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2802:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2803:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2804:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2805:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2806:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2807:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
2808:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2809:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2810:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2811:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2812:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. Every request source event will cause a load event to occur. A call to this API would 
2813:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2814:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2815:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2816:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableContinuousMode()<BR>
2817:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2818:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2819:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
2820:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2821:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_SCAN_Msk;
2822:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
2823:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2824:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2825:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2826:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2827:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2828:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2829:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2830:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
2831:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2832:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2833:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2834:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2835:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. By invoking this feature the Autoscan mode of operations is disabled. A call to this A
2836:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2837:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2838:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2839:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableContinuousMode()<BR>
2840:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2841:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2842:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
2843:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2844:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_SCAN_Msk);
2845:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
2846:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2847:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2848:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2849:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2850:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2851:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2852:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2853:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
2854:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
2855:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the s
2856:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxASMR.LD
2857:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2858:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2859:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2860:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2861:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
2862:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
2863:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
2864:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_LDEV_Msk;
2865:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
2866:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2867:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2868:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2869:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2870:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2871:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2872:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2873:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing scan sequence conversion.<BR>\n
2874:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
2875:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
2876:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
2877:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxASMR, GxASCTRL, GxARBPR to achieve the sequen
2878:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2879:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2880:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2881:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2882:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr);
2883:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2884:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2885:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2886:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel meant to be added to scan sequence
2887:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
2888:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2889:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2890:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2891:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2892:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds a channel to the scan sequence.<BR>\n
2893:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the scan request source. This will be added to
2894:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
2895:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2896:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2897:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2898:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddMultipleChannels()<BR>
2899:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2900:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddChannelToSequence(XMC_VADC_GROUP_t *const group_ptr, con
2901:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
2902:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("VADC_GSCAN_AddSingleChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
2903:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddChannelToSequence:Wrong Channel Number", 
2904:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
2905:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASSEL |= (uint32_t)((uint32_t)1 << ch_num);
2906:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
2907:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2908:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2909:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2910:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
2911:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
2912:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
2913:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the selected channels
2914:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
2915:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2916:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2917:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2918:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2919:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
2920:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
2921:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
2922:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2923:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2924:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2925:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddChannelToSequence()<BR>
2926:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2927:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddMultipleChannels(XMC_VADC_GROUP_t *const group_ptr, cons
2928:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
2929:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddMultipleChannels:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
2930:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASSEL = ch_mask;
2931:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
2932:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2933:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2934:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2935:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
2936:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
2937:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2938:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
2939:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2940:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2941:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determine if the channel is pending for conversion.<BR>\n
2942:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
2943:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
2944:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
2945:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the channel is found in the pending register (GxASPND).
2946:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2947:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2948:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanGetNumChannelsPending()<BR>
2949:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2950:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsChannelPending(XMC_VADC_GROUP_t *const group_ptr, const u
2951:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
2952:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2953:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
2954:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_C
2955:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2956:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)((uint32_t)(group_ptr->ASPND >> ch_num) & 1U));
2957:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
2958:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2959:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2960:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_ptr     Constant pointer to the VADC group
2961:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return  <BR>
2962:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
2963:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to 0x8]
2964:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2965:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2966:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the total number of pending channels.<BR>\n
2967:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
2968:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
2969:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
2970:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * return the total number of channels pending (GxASPND).
2971:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2972:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2973:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanIsChannelPending()<BR>
2974:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2975:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr);
2976:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2977:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2978:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2979:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2980:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2981:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2982:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2983:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
2984:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for scan. This will trigger a interrupt if the
2985:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
2986:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
2987:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2988:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2989:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2990:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2991:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
2992:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
2993:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
2994:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFLAG    |= (uint32_t)VADC_G_SEFLAG_SEV1_Msk;
2995:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
2996:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
2997:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2998:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2999:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3000:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3001:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3002:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3003:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the scan conversion complete request source event.<BR>\n
3004:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3005:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
3006:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3007:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3008:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanTriggerReqSrcEvent()<BR>
3009:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3010:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanClearReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
3011:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
3012:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanClearReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
3013:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFCLR |= (uint32_t)VADC_G_SEFCLR_SEV1_Msk;
3014:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
3015:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3016:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3017:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3018:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3019:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3020:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
3021:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3022:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3023:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3024:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the scan request source event. Will return a true
3025:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for scan. A call to this API would access the register bit field GxSEF
3026:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3027:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3028:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3029:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3030:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanGetReqSrcEventStatus(XMC_VADC_GROUP_t *const group_ptr)
3031:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
3032:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GSCAN_GetRSEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
3033:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)(group_ptr->SEFLAG & (uint32_t)VADC_G_SEFLAG_SEV1_Msk));
3034:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
3035:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3036:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3037:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
3038:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr    Service Request Id
3039:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3040:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3041:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3042:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3043:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the scan request source event to the SR line of VADC.<BR>\n
3044:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a scan request source event. Hence to get a 
3045:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
3046:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * field GxSEVNP.SEV1NP .
3047:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3048:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3049:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3050:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3051:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
3052:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3053:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3054:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3055:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3056:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3057:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3058:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3059:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for scan request source.<BR>\n
3060:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API, the trigger signal will be activated for the scan request source. The trigger
3061:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the ASCTRL register. The Selection of a input will be done by
3062:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectTrigger(). A call to this API would configure the register bit field Gx
3063:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3064:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3065:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanDisableExternalTrigger()<BR>
3066:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3067:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
3068:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
3069:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
3070:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3071:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_ENTR_Msk;
3072:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
3073:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3074:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3075:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3076:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3077:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3078:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3079:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3080:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for scan request source.<BR>
3081:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the scan request source.
3082:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the scan request source. If any configuration were
3083:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in GxASCTRL, it will be not be effected by this API.
3084:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENTR.
3085:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3086:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3087:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
3088:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3089:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
3090:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
3091:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3092:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3093:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENTR_Msk);
3094:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
3095:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3096:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3097:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3098:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param channel_num   channel number to be removed from the scan sequence.
3099:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3100:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3101:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3102:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3103:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Removes a channel from the scan sequence.<BR>
3104:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the it is possible to remove a single channel from the conversion sequence.
3105:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * The remaining channels will continue however they are.
3106:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register GxASSEL.
3107:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3108:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3109:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3110:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3111:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
3112:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3113:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3114:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3115:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3116:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3117:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3118:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3119:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the scan request source event .<BR>
3120:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be activated for the scan request source.
3121:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3122:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENSI.
3123:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3124:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3125:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableEvent(),<BR> XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode()<BR>
3126:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3127:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableEvent(XMC_VADC_GROUP_t *const group_ptr)
3128:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
3129:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
3130:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3131:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= ((uint32_t)VADC_G_ASMR_ENSI_Msk);
3132:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
3133:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3134:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3135:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3136:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3137:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3138:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3139:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3140:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the scan request source event .<BR>
3141:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be deactivated for the scan request source.
3142:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3143:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENSI.
3144:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3145:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3146:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableEvent(),<BR> XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode()<BR>
3147:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3148:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableEvent(XMC_VADC_GROUP_t *const group_ptr)
3149:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
3150:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
3151:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3152:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENSI_Msk);
3153:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
3154:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
3155:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3156:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3157:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Pointer to the VADC module
3158:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3159:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3160:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3161:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the Background scan functional block.<BR>\n
3162:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * The BACKGROUND SCAN request source functional block converts channels of all VADC groups that ha
3163:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * been assigned as a priority channel (priority channels can be converted only by queue and scan).
3164:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source converts the unprioritized channels. Unprioritized channels however can also be u
3165:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * and scan. But a channel which is prioritized can not be used with background request source.
3166:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3167:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3168:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR> XMC_VADC_GROUP_BackgroundDisableArbitratio
3169:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundSelectGating()<BR>
3170:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3171:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
3172:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3173:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
3174:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3175:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group which may receive a
3176:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                  conversion request from background request source
3177:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3178:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3179:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3180:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3181:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3182:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the Background request source.<BR>\n
3183:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3184:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3185:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * comes to the Background slot. Thus this must be enabled if any conversion need to take place.
3186:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2.
3187:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3188:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3189:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
3190:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3191:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_p
3192:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 210              	 .loc 1 3192 0
 211              	 .cfi_startproc
 212              	 
 213              	 
 214              	 
 215 0000 80B4     	 push {r7}
 216              	.LCFI18:
 217              	 .cfi_def_cfa_offset 4
 218              	 .cfi_offset 7,-4
 219 0002 83B0     	 sub sp,sp,#12
 220              	.LCFI19:
 221              	 .cfi_def_cfa_offset 16
 222 0004 00AF     	 add r7,sp,#0
 223              	.LCFI20:
 224              	 .cfi_def_cfa_register 7
 225 0006 7860     	 str r0,[r7,#4]
3193:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_
3194:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 226              	 .loc 1 3194 0
 227 0008 7B68     	 ldr r3,[r7,#4]
 228 000a D3F88430 	 ldr r3,[r3,#132]
 229 000e 43F08062 	 orr r2,r3,#67108864
 230 0012 7B68     	 ldr r3,[r7,#4]
 231 0014 C3F88420 	 str r2,[r3,#132]
3195:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
 232              	 .loc 1 3195 0
 233 0018 0C37     	 adds r7,r7,#12
 234              	.LCFI21:
 235              	 .cfi_def_cfa_offset 4
 236 001a BD46     	 mov sp,r7
 237              	.LCFI22:
 238              	 .cfi_def_cfa_register 13
 239              	 
 240 001c 5DF8047B 	 ldr r7,[sp],#4
 241              	.LCFI23:
 242              	 .cfi_restore 7
 243              	 .cfi_def_cfa_offset 0
 244 0020 7047     	 bx lr
 245              	 .cfi_endproc
 246              	.LFE198:
 248 0022 00BF     	 .section .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot,"ax",%progbits
 249              	 .align 2
 250              	 .thumb
 251              	 .thumb_func
 253              	XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:
 254              	.LFB199:
3196:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3197:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3198:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group which may receive a conversion request
3199:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     from background request source
3200:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3201:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3202:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3203:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3204:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the Background request source.<BR>\n
3205:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3206:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3207:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * comes to the Background slot.A call to this API will lead to all conversions request by Backgrou
3208:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2
3209:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3210:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3211:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
3212:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3213:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_
3214:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 255              	 .loc 1 3214 0
 256              	 .cfi_startproc
 257              	 
 258              	 
 259              	 
 260 0000 80B4     	 push {r7}
 261              	.LCFI24:
 262              	 .cfi_def_cfa_offset 4
 263              	 .cfi_offset 7,-4
 264 0002 83B0     	 sub sp,sp,#12
 265              	.LCFI25:
 266              	 .cfi_def_cfa_offset 16
 267 0004 00AF     	 add r7,sp,#0
 268              	.LCFI26:
 269              	 .cfi_def_cfa_register 7
 270 0006 7860     	 str r0,[r7,#4]
3215:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK
3216:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 271              	 .loc 1 3216 0
 272 0008 7B68     	 ldr r3,[r7,#4]
 273 000a D3F88430 	 ldr r3,[r3,#132]
 274 000e 23F08062 	 bic r2,r3,#67108864
 275 0012 7B68     	 ldr r3,[r7,#4]
 276 0014 C3F88420 	 str r2,[r3,#132]
3217:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
 277              	 .loc 1 3217 0
 278 0018 0C37     	 adds r7,r7,#12
 279              	.LCFI27:
 280              	 .cfi_def_cfa_offset 4
 281 001a BD46     	 mov sp,r7
 282              	.LCFI28:
 283              	 .cfi_def_cfa_register 13
 284              	 
 285 001c 5DF8047B 	 ldr r7,[sp],#4
 286              	.LCFI29:
 287              	 .cfi_restore 7
 288              	 .cfi_def_cfa_offset 0
 289 0020 7047     	 bx lr
 290              	 .cfi_endproc
 291              	.LFE199:
 293 0022 00BF     	 .section .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot,"ax",%progbits
 294              	 .align 2
 295              	 .thumb
 296              	 .thumb_func
 298              	XMC_VADC_GROUP_QueueEnableArbitrationSlot:
 299              	.LFB214:
3218:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
3219:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3220:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3221:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3222:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3223:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_TRIGGER_INPUT_SELECT_t
3224:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3225:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3226:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3227:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3228:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for Background request source.<BR>\n
3229:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3230:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3231:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3232:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3233:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTSEL.
3234:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3235:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3236:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3237:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3238:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
3239:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3240:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3241:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3242:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3243:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Select the trigger edge
3244:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3245:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3246:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3247:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3248:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger edge for Background request source.<BR>\n
3249:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3250:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible values for the trigger 
3251:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3252:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTMODE.
3253:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3254:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3255:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3256:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3257:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
3258:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3259:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3260:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3261:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Module input signal meant to be selected as gating input
3262:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_GATE_INPUT_SELECT_t
3263:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3264:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3265:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3266:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3267:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for Background request source.<BR>\n
3268:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3269:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the Background request so
3270:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxBRSMR.ENGT has to be confi
3271:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field BRSC
3272:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3273:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3274:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR>
3275:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3276:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
3277:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3278:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3279:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3280:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the background scan request source
3281:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3282:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3283:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3284:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3285:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of background request source.<BR>\n
3286:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3287:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3288:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3289:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENGT.
3290:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3291:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3292:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectGating();
3293:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3294:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundSetGatingMode(XMC_VADC_GLOBAL_t *const global_ptr,
3295:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                             XMC_VADC_GATEMODE_t mode_sel)
3296:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
3297:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong Module Pointer", (global_ptr == VADC))
3298:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_G
3299:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3300:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3301:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= (uint32_t)(~((uint32_t)VADC_BRSMR_ENGT_Msk));
3302:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure the new gating mode*/
3303:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)((uint32_t)mode_sel << VADC_BRSMR_ENGT_Pos);
3304:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
3305:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3306:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3307:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3308:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3309:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3310:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3311:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3312:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3313:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
3314:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3315:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is needed. Using autoscan (continuous conversion)feature it is possible to start the con
3316:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * once and allow the sequence to repeat without any further triggers. Once all channels belonging 
3317:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source have been converted, a request source completion event is generated. Generation o
3318:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * can restart the Background configure sequence. Every request source event will cause a load even
3319:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would access the register bit field BRSMR.SCAN.
3320:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3321:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3322:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableContinuousMode()<BR>
3323:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3324:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableContinuousMode(XMC_VADC_GLOBAL_t *const global
3325:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
3326:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableContinuousMode:Wrong Module Pointer", (global_ptr == 
3327:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_SCAN_Msk;
3328:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
3329:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3330:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3331:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3332:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3333:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3334:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3335:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3336:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
3337:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3338:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
3339:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a Background req
3340:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
3341:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. By invoking this API the Autoscan mode of operations is disabled. A call to this API w
3342:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * register bit field BRSMR.SCAN.
3343:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3344:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3345:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableContinuousMode()<BR>
3346:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3347:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableContinuousMode(XMC_VADC_GLOBAL_t *const globa
3348:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
3349:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableContinuousMode:Wrong Module Pointer", (global_ptr ==
3350:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_SCAN_Msk);
3351:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
3352:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3353:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3354:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3355:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3356:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3357:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3358:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3359:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
3360:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3361:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the b
3362:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * has already been filled up with entries. A call to this API would set the register bit field BRS
3363:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3364:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3365:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3366:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3367:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_pt
3368:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
3369:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VAD
3370:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
3371:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
3372:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3373:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3374:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3375:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3376:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3377:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3378:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3379:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing background scan conversion(sequence).<BR>\n
3380:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
3381:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
3382:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
3383:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers BRSMR, BRSCTRL, GxARBPR(if group is available) 
3384:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * current scan sequence.
3385:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3386:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3387:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3388:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3389:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr);
3390:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3391:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3392:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3393:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3394:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Request source
3395:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The unprioritized channel meant to be added to the scan sequence
3396:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3397:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3398:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3399:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3400:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3401:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds a channel to the background scan sequence.<BR>\n
3402:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the background scan request source. This will 
3403:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3404:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3405:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3406:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3407:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
3408:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3409:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global
3410:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const uint32_t grp_num,
3411:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const uint32_t ch_num)
3412:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
3413:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == 
3414:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_V
3415:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
3416:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3417:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3418:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
3419:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
3420:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3421:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3422:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3423:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3424:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3425:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3426:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3427:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the previously selected channels
3428:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3429:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3430:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3431:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3432:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3433:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
3434:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3435:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3436:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3437:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3438:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3439:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3440:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3441:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgndAddMultipleChannels(XMC_VADC_GLOBAL_t *const global_ptr
3442:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t grp_num,
3443:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t ch_mask)
3444:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
3445:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Module Pointer", (global_ptr == VADC
3446:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Group Number",   ((grp_num) < XMC_VA
3447:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= ch_mask;
3448:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
3449:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3450:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3451:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3452:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3453:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
3454:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3455:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3456:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
3457:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3458:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3459:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determine if the channel is pending.<BR>\n
3460:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
3461:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3462:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
3463:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the channel is found in the pending register (BRSPND[\b grp_num]).
3464:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3465:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3466:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending()<BR>
3467:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3468:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundIsChannelPending(XMC_VADC_GLOBAL_t *const global_ptr
3469:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t grp_num,
3470:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t ch_num)
3471:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
3472:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Module Pointer", (global_ptr == VADC
3473:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Group Number",   ((grp_num) < XMC_VA
3474:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Channel Number",
3475:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3476:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3477:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)(global_ptr->BRSPND[grp_num] & (uint32_t)((uint32_t)1 << ch_num)));
3478:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
3479:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3480:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3481:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3482:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return  <BR>
3483:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
3484:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to (0x8*number of groups)]
3485:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3486:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3487:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the number of pending channels.<BR>\n
3488:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
3489:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3490:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
3491:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * return the total number of channels pending (BRSPND[\b grp_num]).
3492:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3493:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3494:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundIsChannelPending()<BR>
3495:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3496:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr);
3497:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3498:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3499:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3500:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3501:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3502:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3503:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3504:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
3505:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for background scan. This will trigger a interrupt if
3506:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
3507:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB.
3508:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3509:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3510:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
3511:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3512:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent(XMC_VADC_GLOBAL_t *const global_p
3513:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
3514:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent:Wrong Module Pointer", (global_ptr == VA
3515:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk;
3516:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
3517:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3518:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3519:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3520:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3521:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3522:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3523:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3524:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the background scan conversion complete request source event.<BR>\n
3525:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3526:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB
3527:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3528:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3529:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent()<BR>
3530:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3531:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent(XMC_VADC_GLOBAL_t *const global_ptr
3532:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
3533:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent:Wrong Module Pointer", (global_ptr == VADC
3534:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLBCLR_Msk;
3535:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
3536:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3537:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3538:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3539:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3540:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3541:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
3542:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3543:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3544:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3545:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the background scan request source event. Will return a true
3546:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for background scan. A call to this API would configure the register
3547:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GLOBEFLAG.SEVGLB.
3548:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3549:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3550:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3551:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3552:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus(XMC_VADC_GLOBAL_t *const global
3553:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
3554:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus:Wrong Module Pointer", (global_ptr == 
3555:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   return((bool)(global_ptr->GLOBEFLAG & (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk));
3556:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
3557:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3558:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3559:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3560:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3561:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3562:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3563:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3564:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for background scan request source.<BR>\n
3565:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be activated for the scan request source. The trigger signal 
3566:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the BRSCTRL register. The Selection of a input will be done by
3567:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectTrigger(). A call to this API would configure the register bit f
3568:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3569:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3570:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(
3571:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3572:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger(XMC_VADC_GLOBAL_t *const globa
3573:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
3574:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger:Wrong Module Pointer", (global_ptr ==
3575:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3576:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_ENTR_Msk;
3577:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
3578:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3579:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3580:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3581:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3582:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3583:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3584:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3585:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for background scan request source.<BR>
3586:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the background scan request source.
3587:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the background scan request source. If any configu
3588:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in BRSCTRL will be not be effected. A call to this API would configu
3589:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field BRSMR.ENTR.
3590:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3591:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><br>
3592:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<BR>
3593:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3594:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(XMC_VADC_GLOBAL_t *const glob
3595:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
3596:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger:Wrong Module Pointer", (global_ptr =
3597:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3598:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENTR_Msk);
3599:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
3600:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3601:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3602:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3603:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3604:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3605:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3606:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3607:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the background scan request source event .<BR>
3608:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be activated for the background scan request sou
3609:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3610:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENSI.
3611:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3612:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3613:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableEvent(),<BR> XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptN
3614:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3615:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableEvent(XMC_VADC_GLOBAL_t *const global_ptr)
3616:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
3617:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableEvent:Wrong Module Pointer", (global_ptr == VADC))
3618:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3619:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= ((uint32_t)VADC_BRSMR_ENSI_Msk);
3620:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
3621:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3622:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3623:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr     Pointer to the VADC module
3624:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3625:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3626:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3627:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3628:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the background scan request source event .<BR>
3629:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be deactivated for the background scan request s
3630:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3631:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENSI.
3632:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3633:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3634:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableEvent(),<BR> XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNo
3635:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3636:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableEvent(XMC_VADC_GLOBAL_t *const global_ptr)
3637:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
3638:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableEvent:Wrong Module Pointer", (global_ptr == VADC))
3639:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3640:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENSI_Msk);
3641:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
3642:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3643:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)
3644:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3645:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
3646:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3647:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3648:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3649:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3650:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3651:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes VADC QUEUE functional block.<BR>\n
3652:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * The QUEUE request source functional block converts channels stored in a queue. The first channel
3653:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * queue is converted first. A channel once converted, can be placed back into the queue if desired
3654:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_QueueEnable
3655:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
3656:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_QueueDisableArb
3657:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxQCTRL0, GxQMR0 to configure the queu
3658:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * source.
3659:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3660:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3661:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR> XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR
3662:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR> XMC_VADC_GROUP_QueueSelectGating()<BR>
3663:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3664:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
3665:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3666:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3667:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3668:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3669:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3670:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3671:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3672:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the queue request source.<BR>\n
3673:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3674:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3675:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot. Thus this must be enabled if any conversion need to take place.
3676:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3677:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3678:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3679:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
3680:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3681:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3682:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 300              	 .loc 1 3682 0
 301              	 .cfi_startproc
 302              	 
 303              	 
 304              	 
 305 0000 80B4     	 push {r7}
 306              	.LCFI30:
 307              	 .cfi_def_cfa_offset 4
 308              	 .cfi_offset 7,-4
 309 0002 83B0     	 sub sp,sp,#12
 310              	.LCFI31:
 311              	 .cfi_def_cfa_offset 16
 312 0004 00AF     	 add r7,sp,#0
 313              	.LCFI32:
 314              	 .cfi_def_cfa_register 7
 315 0006 7860     	 str r0,[r7,#4]
3683:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3684:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
 316              	 .loc 1 3684 0
 317 0008 7B68     	 ldr r3,[r7,#4]
 318 000a D3F88430 	 ldr r3,[r3,#132]
 319 000e 43F08072 	 orr r2,r3,#16777216
 320 0012 7B68     	 ldr r3,[r7,#4]
 321 0014 C3F88420 	 str r2,[r3,#132]
3685:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
 322              	 .loc 1 3685 0
 323 0018 0C37     	 adds r7,r7,#12
 324              	.LCFI33:
 325              	 .cfi_def_cfa_offset 4
 326 001a BD46     	 mov sp,r7
 327              	.LCFI34:
 328              	 .cfi_def_cfa_register 13
 329              	 
 330 001c 5DF8047B 	 ldr r7,[sp],#4
 331              	.LCFI35:
 332              	 .cfi_restore 7
 333              	 .cfi_def_cfa_offset 0
 334 0020 7047     	 bx lr
 335              	 .cfi_endproc
 336              	.LFE214:
 338 0022 00BF     	 .section .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot,"ax",%progbits
 339              	 .align 2
 340              	 .thumb
 341              	 .thumb_func
 343              	XMC_VADC_GROUP_QueueDisableArbitrationSlot:
 344              	.LFB215:
3686:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3687:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3688:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3689:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3690:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3691:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3692:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3693:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the queue request source.<BR>\n
3694:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3695:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3696:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot.A call to this API will lead to all conversions request by queue to be blocked
3697:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3698:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3699:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3700:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
3701:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3702:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3703:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 345              	 .loc 1 3703 0
 346              	 .cfi_startproc
 347              	 
 348              	 
 349              	 
 350 0000 80B4     	 push {r7}
 351              	.LCFI36:
 352              	 .cfi_def_cfa_offset 4
 353              	 .cfi_offset 7,-4
 354 0002 83B0     	 sub sp,sp,#12
 355              	.LCFI37:
 356              	 .cfi_def_cfa_offset 16
 357 0004 00AF     	 add r7,sp,#0
 358              	.LCFI38:
 359              	 .cfi_def_cfa_register 7
 360 0006 7860     	 str r0,[r7,#4]
3704:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
3705:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
 361              	 .loc 1 3705 0
 362 0008 7B68     	 ldr r3,[r7,#4]
 363 000a D3F88430 	 ldr r3,[r3,#132]
 364 000e 23F08072 	 bic r2,r3,#16777216
 365 0012 7B68     	 ldr r3,[r7,#4]
 366 0014 C3F88420 	 str r2,[r3,#132]
3706:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
 367              	 .loc 1 3706 0
 368 0018 0C37     	 adds r7,r7,#12
 369              	.LCFI39:
 370              	 .cfi_def_cfa_offset 4
 371 001a BD46     	 mov sp,r7
 372              	.LCFI40:
 373              	 .cfi_def_cfa_register 13
 374              	 
 375 001c 5DF8047B 	 ldr r7,[sp],#4
 376              	.LCFI41:
 377              	 .cfi_restore 7
 378              	 .cfi_def_cfa_offset 0
 379 0020 7047     	 bx lr
 380              	 .cfi_endproc
 381              	.LFE215:
 383 0022 00BF     	 .section .text.XMC_VADC_GROUP_QueueFlushEntries,"ax",%progbits
 384              	 .align 2
 385              	 .thumb
 386              	 .thumb_func
 388              	XMC_VADC_GROUP_QueueFlushEntries:
 389              	.LFB219:
3707:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3708:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3709:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3710:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3711:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3712:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
3713:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3714:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3715:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the arbitration status of the queue request source.<BR>\n
3716:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the queue request source must have its conversion request considered by the arbiter, it must 
3717:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3718:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot. A call to this API would return the status of the arbitration slot of queue.
3719:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
3720:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3721:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3722:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<
3723:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3724:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr
3725:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
3726:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GRO
3727:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3728:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN0_Msk) >> VADC_G_ARBPR_ASEN0_Pos);
3729:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
3730:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3731:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3732:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3733:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3734:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3735:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3736:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3737:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3738:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for queue request source.<BR>\n
3739:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3740:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3741:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3742:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3743:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTSEL.
3744:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3745:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3746:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3747:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3748:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, 
3749:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num);
3750:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3751:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3752:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3753:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Choice of the trigger edge
3754:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3755:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3756:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3757:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3758:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal edge for queue request source.<BR>\n
3759:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3760:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 trigger edges. This is
3761:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3762:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3763:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTMODE.
3764:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3765:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3766:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3767:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3768:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
3769:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3770:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3771:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3772:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as the gating line
3773:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3774:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3775:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3776:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3777:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for queue request source.<BR>\n
3778:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3779:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the queue request source 
3780:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxQMR0.ENGT has to be config
3781:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxQC
3782:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3783:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3784:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR>
3785:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3786:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
3787:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3788:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3789:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3790:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the queue request source
3791:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3792:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3793:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3794:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3795:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of queue request source.<BR>\n
3796:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3797:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3798:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3799:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQMR0.ENGT.
3800:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3801:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3802:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_QueueSelectGating();
3803:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3804:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_
3805:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
3806:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
3807:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMOD
3808:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3809:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3810:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 &= (uint32_t)(~((uint32_t) VADC_G_QMR0_ENGT_Msk));
3811:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Set the new gating mode */
3812:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)mode_sel << VADC_G_QMR0_ENGT_Pos);
3813:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
3814:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3815:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3816:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3817:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3818:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3819:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3820:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3821:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3822:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>
3823:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3824:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the queue unit to generate a conversion request to the analog converter. It is assumed that the 
3825:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxQMR0.TR
3826:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3827:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Note:</b><br>
3828:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * The conversion of queue entry will start immediately after the entry has been loaded into GxQINR
3829:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This happens only if the queue entry has been loaded into the register without the need for the 
3830:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * If a H/W Trigger is selected while loading the entry, the conversion will occur in one of the 2 
3831:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * <ul>
3832:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * <li> The H/W generates a trigger needed for the queue request source.
3833:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * <li> The Conversion is triggered manually by calling this API.
3834:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * </ul>
3835:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3836:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3837:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3838:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3839:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
3840:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
3841:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
3842:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_TREV_Pos);
3843:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
3844:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3845:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3846:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3847:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3848:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t returns the total number of channels.
3849:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *             <BR>Range: [0x0 to 0x8]
3850:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3851:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3852:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the number of channels present in the queue.<BR>\n
3853:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will return the queue buffer size. This buffer will be consisting of valid queue entrie
3854:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * will be converted when a trigger event occurs. All the entries that are loaded onto the GxQINR0 
3855:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * be added to the queue buffer. Hence if an application needs to get the number of valid queue ent
3856:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * this API would provide the interface. A call to this API would access the registers GxQBUR0, GxQ
3857:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * to determine the queue length.
3858:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3859:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3860:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3861:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3862:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr);
3863:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3864:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3865:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3866:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3867:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3868:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3869:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3870:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing conversion by flushing the queue.<BR>\n
3871:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will flush the queue buffer. Ongoing conversion of the Queue request source will
3872:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
3873:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxQCTRL0, GxQMR0, GxARBPR in order to abort
3874:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * the queue sequence.
3875:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3876:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3877:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueFlushEntries() <BR>
3878:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3879:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr);
3880:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3881:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3882:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3883:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3884:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3885:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3886:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3887:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * Flushing the queue Entry.<BR>\n
3888:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will flush one entry in the queue buffer. Ongoing conversion of the Queue request sourc
3889:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
3890:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers  GxQMR0. This is a Blocking API, i.e will only 
3891:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * all the entries are removed from the queue.
3892:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3893:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3894:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueAbortSequence(0<BR>
3895:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3896:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueFlushEntries(XMC_VADC_GROUP_t *const group_ptr)
3897:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** {
 390              	 .loc 1 3897 0
 391              	 .cfi_startproc
 392              	 
 393              	 
 394              	 
 395 0000 80B4     	 push {r7}
 396              	.LCFI42:
 397              	 .cfi_def_cfa_offset 4
 398              	 .cfi_offset 7,-4
 399 0002 83B0     	 sub sp,sp,#12
 400              	.LCFI43:
 401              	 .cfi_def_cfa_offset 16
 402 0004 00AF     	 add r7,sp,#0
 403              	.LCFI44:
 404              	 .cfi_def_cfa_register 7
 405 0006 7860     	 str r0,[r7,#4]
3898:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Initiate flushing of the queue */
3899:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_FLUSH_Msk;
 406              	 .loc 1 3899 0
 407 0008 7B68     	 ldr r3,[r7,#4]
 408 000a D3F80431 	 ldr r3,[r3,#260]
 409 000e 43F48062 	 orr r2,r3,#1024
 410 0012 7B68     	 ldr r3,[r7,#4]
 411 0014 C3F80421 	 str r2,[r3,#260]
3900:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** 
3901:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   while( !((group_ptr->QSR0)& (uint32_t)VADC_G_QSR0_EMPTY_Msk))
 412              	 .loc 1 3901 0
 413 0018 00BF     	 nop
 414              	.L9:
 415              	 .loc 1 3901 0 is_stmt 0 discriminator 1
 416 001a 7B68     	 ldr r3,[r7,#4]
 417 001c D3F80831 	 ldr r3,[r3,#264]
 418 0020 03F02003 	 and r3,r3,#32
 419 0024 002B     	 cmp r3,#0
 420 0026 F8D0     	 beq .L9
3902:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   {
3903:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****     /* Wait until the queue is indeed flushed */
3904:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h ****   }
3905:C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc\xmc_vadc.h **** }
 421              	 .loc 1 3905 0 is_stmt 1
 422 0028 0C37     	 adds r7,r7,#12
 423              	.LCFI45:
 424              	 .cfi_def_cfa_offset 4
 425 002a BD46     	 mov sp,r7
 426              	.LCFI46:
 427              	 .cfi_def_cfa_register 13
 428              	 
 429 002c 5DF8047B 	 ldr r7,[sp],#4
 430              	.LCFI47:
 431              	 .cfi_restore 7
 432              	 .cfi_def_cfa_offset 0
 433 0030 7047     	 bx lr
 434              	 .cfi_endproc
 435              	.LFE219:
 437 0032 00BF     	 .section .rodata.g_xmc_vadc_group_array,"a",%progbits
 438              	 .align 2
 441              	g_xmc_vadc_group_array:
 442 0000 00440040 	 .word 1073759232
 443 0004 00480040 	 .word 1073760256
 444 0008 004C0040 	 .word 1073761280
 445 000c 00500040 	 .word 1073762304
 446              	 .section .text.XMC_VADC_GLOBAL_EnableModule,"ax",%progbits
 447              	 .align 2
 448              	 .global XMC_VADC_GLOBAL_EnableModule
 449              	 .thumb
 450              	 .thumb_func
 452              	XMC_VADC_GLOBAL_EnableModule:
 453              	.LFB239:
 454              	 .file 2 "../Libraries/XMCLib/src/xmc_vadc.c"
   1:../Libraries/XMCLib/src/xmc_vadc.c **** /**
   2:../Libraries/XMCLib/src/xmc_vadc.c ****  * @file xmc_vadc.c
   3:../Libraries/XMCLib/src/xmc_vadc.c ****  * @date 2016-06-17
   4:../Libraries/XMCLib/src/xmc_vadc.c ****  *
   5:../Libraries/XMCLib/src/xmc_vadc.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_vadc.c **** ***************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_vadc.c ****  * XMClib v2.1.8 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_vadc.c ****  *
   9:../Libraries/XMCLib/src/xmc_vadc.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_vadc.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_vadc.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_vadc.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_vadc.c ****  * 
  18:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_vadc.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_vadc.c ****  * 
  21:../Libraries/XMCLib/src/xmc_vadc.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_vadc.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_vadc.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_vadc.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_vadc.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_vadc.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_vadc.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_vadc.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_vadc.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_vadc.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_vadc.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  36:../Libraries/XMCLib/src/xmc_vadc.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_vadc.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  39:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-02-15:
  40:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_vadc.c ****  *      
  42:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-02-20:
  43:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Revised for XMC1201 device.<br>
  44:../Libraries/XMCLib/src/xmc_vadc.c ****  *   
  45:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-04-27:
  46:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added new APIs for SHS.<br>
  47:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added New APIs for trigger edge selection.<BR>
  48:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  51:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-06-20:
  52:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  54:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-06-25:
  55:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - BFL configuration in channel initialization fixed.
  56:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  57:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-07-28:
  58:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  59:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  60:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  61:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New APIs Created.
  62:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  63:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  64:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetAlias
  65:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetInputClass
  66:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  67:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  68:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  69:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  70:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  71:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-12-01:
  72:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  73:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  74:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  75:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2016-06-17:
  76:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New macros added XMC_VADC_SHS_FULL_SET_REG, XMC_VADC_RESULT_PRIORITY_AVAILABLE 
  77:../Libraries/XMCLib/src/xmc_vadc.c ****  *       and XMC_VADC_SYNCTR_START_LOCATION
  78:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New Enum added XMC_VADC_SHS_GAIN_LEVEL_t and XMC_VADC_SYNCTR_EVAL_t
  79:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the EVAL configuration in API XMC_VADC_GROUP_CheckSlaveReadiness and XMC_VADC_GROUP_
  80:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New APIs added are:
  81:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetSyncSlaveReadySignal
  82:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetAssertedEvents
  83:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetAssertedResultEvents
  84:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetResultRegPriority
  85:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetSyncReadySignal
  86:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetSyncReadySignal
  87:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetResultRegPriority
  88:../Libraries/XMCLib/src/xmc_vadc.c ****  * @endcond 
  89:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  90:../Libraries/XMCLib/src/xmc_vadc.c ****  */
  91:../Libraries/XMCLib/src/xmc_vadc.c **** 
  92:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
  93:../Libraries/XMCLib/src/xmc_vadc.c ****  * HEADER FILES
  94:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  95:../Libraries/XMCLib/src/xmc_vadc.c **** #include <xmc_vadc.h>
  96:../Libraries/XMCLib/src/xmc_vadc.c **** 
  97:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
  98:../Libraries/XMCLib/src/xmc_vadc.c ****  * MACROS
  99:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 100:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_MAX_ICLASS_SET          (2U)  /**< Defines the maximum number of conversion parame
 101:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_NUM_EMUX_INTERFACES     (2U)  /**< Defines the maximum number of external multiple
 102:../Libraries/XMCLib/src/xmc_vadc.c **** 
 103:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_RESULT_LEFT_ALIGN_10BIT (2U)  /**< Defines the 10 bit converted result register le
 104:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     is used in the XMC_VADC_GLOBAL_SetCompareValue(
 105:../Libraries/XMCLib/src/xmc_vadc.c **** 
 106:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_SYNCTR_START_LOCATION (3U)  /**< Defines the location in SYNCTR needed for calcula
 107:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 108:../Libraries/XMCLib/src/xmc_vadc.c ****  * ENUMS
 109:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 110:../Libraries/XMCLib/src/xmc_vadc.c **** 
 111:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 112:../Libraries/XMCLib/src/xmc_vadc.c ****  * DATA STRUCTURES
 113:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 114:../Libraries/XMCLib/src/xmc_vadc.c **** 
 115:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 116:../Libraries/XMCLib/src/xmc_vadc.c ****  * GLOBAL DATA
 117:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 118:../Libraries/XMCLib/src/xmc_vadc.c **** 
 119:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 120:../Libraries/XMCLib/src/xmc_vadc.c **** 
 121:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U) 
 122:../Libraries/XMCLib/src/xmc_vadc.c **** static VADC_G_TypeDef *const g_xmc_vadc_group_array[XMC_VADC_MAXIMUM_NUM_GROUPS] = {(VADC_G_TypeDef
 123:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 124:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 125:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 126:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 127:../Libraries/XMCLib/src/xmc_vadc.c **** static VADC_G_TypeDef *const g_xmc_vadc_group_array[XMC_VADC_MAXIMUM_NUM_GROUPS] = {(VADC_G_TypeDef
 128:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 129:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 130:../Libraries/XMCLib/src/xmc_vadc.c **** 
 131:../Libraries/XMCLib/src/xmc_vadc.c **** #endif 
 132:../Libraries/XMCLib/src/xmc_vadc.c **** 
 133:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 134:../Libraries/XMCLib/src/xmc_vadc.c ****  * LOCAL ROUTINES
 135:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 136:../Libraries/XMCLib/src/xmc_vadc.c **** 
 137:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 138:../Libraries/XMCLib/src/xmc_vadc.c ****  * API IMPLEMENTATION
 139:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 140:../Libraries/XMCLib/src/xmc_vadc.c **** 
 141:../Libraries/XMCLib/src/xmc_vadc.c **** /*API to enable the VADC Module*/
 142:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_EnableModule(void)
 143:../Libraries/XMCLib/src/xmc_vadc.c **** {
 455              	 .loc 2 143 0
 456              	 .cfi_startproc
 457              	 
 458              	 
 459 0000 80B5     	 push {r7,lr}
 460              	.LCFI48:
 461              	 .cfi_def_cfa_offset 8
 462              	 .cfi_offset 7,-8
 463              	 .cfi_offset 14,-4
 464 0002 00AF     	 add r7,sp,#0
 465              	.LCFI49:
 466              	 .cfi_def_cfa_register 7
 144:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
 145:../Libraries/XMCLib/src/xmc_vadc.c ****    * Enable Out of Range Comparator for ADC channels pins P2.2to P2.9. This hack is applicable only
 146:../Libraries/XMCLib/src/xmc_vadc.c ****    * and in particular the G11 step.
 147:../Libraries/XMCLib/src/xmc_vadc.c ****    *
 148:../Libraries/XMCLib/src/xmc_vadc.c ****    * Please refer to the XMC1000 Errata sheet V1.4 released 2014-06 Errata ID : ADC_AI.003 Additona
 149:../Libraries/XMCLib/src/xmc_vadc.c ****    * function
 150:../Libraries/XMCLib/src/xmc_vadc.c ****    */
 151:../Libraries/XMCLib/src/xmc_vadc.c **** 
 152:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined (COMPARATOR)
 153:../Libraries/XMCLib/src/xmc_vadc.c ****   COMPARATOR->ORCCTRL = (uint32_t)0xFF;
 154:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 155:../Libraries/XMCLib/src/xmc_vadc.c **** 
 156:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 157:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 467              	 .loc 2 157 0
 468 0004 0120     	 movs r0,#1
 469 0006 FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 158:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 159:../Libraries/XMCLib/src/xmc_vadc.c **** 
 160:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 161:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Reset the Hardware */
 162:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC )
 470              	 .loc 2 162 0
 471 000a 0120     	 movs r0,#1
 472 000c FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 163:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 164:../Libraries/XMCLib/src/xmc_vadc.c **** }
 473              	 .loc 2 164 0
 474 0010 80BD     	 pop {r7,pc}
 475              	 .cfi_endproc
 476              	.LFE239:
 478 0012 00BF     	 .section .text.XMC_VADC_GLOBAL_DisableModule,"ax",%progbits
 479              	 .align 2
 480              	 .global XMC_VADC_GLOBAL_DisableModule
 481              	 .thumb
 482              	 .thumb_func
 484              	XMC_VADC_GLOBAL_DisableModule:
 485              	.LFB240:
 165:../Libraries/XMCLib/src/xmc_vadc.c **** 
 166:../Libraries/XMCLib/src/xmc_vadc.c **** /*API to Disable the VADC Module*/
 167:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_DisableModule(void)
 168:../Libraries/XMCLib/src/xmc_vadc.c **** {
 486              	 .loc 2 168 0
 487              	 .cfi_startproc
 488              	 
 489              	 
 490 0000 80B5     	 push {r7,lr}
 491              	.LCFI50:
 492              	 .cfi_def_cfa_offset 8
 493              	 .cfi_offset 7,-8
 494              	 .cfi_offset 14,-4
 495 0002 00AF     	 add r7,sp,#0
 496              	.LCFI51:
 497              	 .cfi_def_cfa_register 7
 169:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 170:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Reset the Hardware */
 171:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_RESET_AssertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 498              	 .loc 2 171 0
 499 0004 0120     	 movs r0,#1
 500 0006 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 172:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 173:../Libraries/XMCLib/src/xmc_vadc.c **** 
 174:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 175:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 501              	 .loc 2 175 0
 502 000a 0120     	 movs r0,#1
 503 000c FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 176:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 177:../Libraries/XMCLib/src/xmc_vadc.c **** 
 178:../Libraries/XMCLib/src/xmc_vadc.c **** }
 504              	 .loc 2 178 0
 505 0010 80BD     	 pop {r7,pc}
 506              	 .cfi_endproc
 507              	.LFE240:
 509 0012 00BF     	 .section .text.XMC_VADC_GLOBAL_Init,"ax",%progbits
 510              	 .align 2
 511              	 .global XMC_VADC_GLOBAL_Init
 512              	 .thumb
 513              	 .thumb_func
 515              	XMC_VADC_GLOBAL_Init:
 516              	.LFB241:
 179:../Libraries/XMCLib/src/xmc_vadc.c **** 
 180:../Libraries/XMCLib/src/xmc_vadc.c **** 
 181:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize global resources */
 182:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
 183:../Libraries/XMCLib/src/xmc_vadc.c **** {
 517              	 .loc 2 183 0
 518              	 .cfi_startproc
 519              	 
 520              	 
 521 0000 80B5     	 push {r7,lr}
 522              	.LCFI52:
 523              	 .cfi_def_cfa_offset 8
 524              	 .cfi_offset 7,-8
 525              	 .cfi_offset 14,-4
 526 0002 82B0     	 sub sp,sp,#8
 527              	.LCFI53:
 528              	 .cfi_def_cfa_offset 16
 529 0004 00AF     	 add r7,sp,#0
 530              	.LCFI54:
 531              	 .cfi_def_cfa_register 7
 532 0006 7860     	 str r0,[r7,#4]
 533 0008 3960     	 str r1,[r7]
 184:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 0U)
 185:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
 186:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 187:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))
 188:../Libraries/XMCLib/src/xmc_vadc.c **** 
 189:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the VADC module*/
 190:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GLOBAL_EnableModule();
 534              	 .loc 2 190 0
 535 000a FFF7FEFF 	 bl XMC_VADC_GLOBAL_EnableModule
 191:../Libraries/XMCLib/src/xmc_vadc.c **** 
 192:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->CLC = (uint32_t)(config->clc);
 536              	 .loc 2 192 0
 537 000e 3B68     	 ldr r3,[r7]
 538 0010 5A69     	 ldr r2,[r3,#20]
 539 0012 7B68     	 ldr r3,[r7,#4]
 540 0014 1A60     	 str r2,[r3]
 193:../Libraries/XMCLib/src/xmc_vadc.c **** 
 194:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Clock configuration */
 195:../Libraries/XMCLib/src/xmc_vadc.c **** 
 196:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 197:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Ms
 541              	 .loc 2 197 0
 542 0016 3B68     	 ldr r3,[r7]
 543 0018 5B68     	 ldr r3,[r3,#4]
 544 001a 43F40042 	 orr r2,r3,#32768
 545 001e 7B68     	 ldr r3,[r7,#4]
 546 0020 C3F88020 	 str r2,[r3,#128]
 198:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 199:../Libraries/XMCLib/src/xmc_vadc.c **** 
 200:../Libraries/XMCLib/src/xmc_vadc.c ****   /* ICLASS-0 configuration */
 201:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 547              	 .loc 2 201 0
 548 0024 3B68     	 ldr r3,[r7]
 549 0026 9A68     	 ldr r2,[r3,#8]
 550 0028 7B68     	 ldr r3,[r7,#4]
 551 002a C3F8A020 	 str r2,[r3,#160]
 202:../Libraries/XMCLib/src/xmc_vadc.c **** 
 203:../Libraries/XMCLib/src/xmc_vadc.c ****   /* ICLASS-1 configuration */
 204:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 552              	 .loc 2 204 0
 553 002e 3B68     	 ldr r3,[r7]
 554 0030 DA68     	 ldr r2,[r3,#12]
 555 0032 7B68     	 ldr r3,[r7,#4]
 556 0034 C3F8A420 	 str r2,[r3,#164]
 205:../Libraries/XMCLib/src/xmc_vadc.c **** 
 206:../Libraries/XMCLib/src/xmc_vadc.c **** 
 207:../Libraries/XMCLib/src/xmc_vadc.c ****   /*Result generation related configuration */
 208:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 557              	 .loc 2 208 0
 558 0038 3B68     	 ldr r3,[r7]
 559 003a 1A69     	 ldr r2,[r3,#16]
 560 003c 7B68     	 ldr r3,[r7,#4]
 561 003e C3F88022 	 str r2,[r3,#640]
 209:../Libraries/XMCLib/src/xmc_vadc.c **** 
 210:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
 211:../Libraries/XMCLib/src/xmc_vadc.c **** 
 212:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Boundaries */
 213:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 562              	 .loc 2 213 0
 563 0042 3B68     	 ldr r3,[r7]
 564 0044 1A68     	 ldr r2,[r3]
 565 0046 7B68     	 ldr r3,[r7,#4]
 566 0048 C3F8B820 	 str r2,[r3,#184]
 214:../Libraries/XMCLib/src/xmc_vadc.c **** 
 215:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 216:../Libraries/XMCLib/src/xmc_vadc.c **** 
 217:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Configure the SHS register that are needed for XMC11xx devices*/
 218:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 0U)
 219:../Libraries/XMCLib/src/xmc_vadc.c **** 
 220:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enabling the Analog part of the converter*/
 221:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = SHS0->SHSCFG  | SHS_SHSCFG_SCWC_Msk;
 222:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~(SHS_SHSCFG_ANOFF_Msk);
 223:../Libraries/XMCLib/src/xmc_vadc.c ****   SHS0->SHSCFG = reg;
 224:../Libraries/XMCLib/src/xmc_vadc.c **** 
 225:../Libraries/XMCLib/src/xmc_vadc.c ****   /* From the Errata sheet of XMC1100 V1.7*/
 226:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
 227:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 228:../Libraries/XMCLib/src/xmc_vadc.c **** 
 229:../Libraries/XMCLib/src/xmc_vadc.c **** }
 567              	 .loc 2 229 0
 568 004c 0837     	 adds r7,r7,#8
 569              	.LCFI55:
 570              	 .cfi_def_cfa_offset 8
 571 004e BD46     	 mov sp,r7
 572              	.LCFI56:
 573              	 .cfi_def_cfa_register 13
 574              	 
 575 0050 80BD     	 pop {r7,pc}
 576              	 .cfi_endproc
 577              	.LFE241:
 579 0052 00BF     	 .section .text.XMC_VADC_GLOBAL_InputClassInit,"ax",%progbits
 580              	 .align 2
 581              	 .global XMC_VADC_GLOBAL_InputClassInit
 582              	 .thumb
 583              	 .thumb_func
 585              	XMC_VADC_GLOBAL_InputClassInit:
 586              	.LFB242:
 230:../Libraries/XMCLib/src/xmc_vadc.c **** 
 231:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to Set the Global IClass registers*/
 232:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
 233:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
 234:../Libraries/XMCLib/src/xmc_vadc.c **** {
 587              	 .loc 2 234 0
 588              	 .cfi_startproc
 589              	 
 590              	 
 591              	 
 592 0000 80B4     	 push {r7}
 593              	.LCFI57:
 594              	 .cfi_def_cfa_offset 4
 595              	 .cfi_offset 7,-4
 596 0002 85B0     	 sub sp,sp,#20
 597              	.LCFI58:
 598              	 .cfi_def_cfa_offset 24
 599 0004 00AF     	 add r7,sp,#0
 600              	.LCFI59:
 601              	 .cfi_def_cfa_register 7
 602 0006 F860     	 str r0,[r7,#12]
 603 0008 B960     	 str r1,[r7,#8]
 604 000a 3B60     	 str r3,[r7]
 605 000c 1346     	 mov r3,r2
 606 000e FB71     	 strb r3,[r7,#7]
 235:../Libraries/XMCLib/src/xmc_vadc.c **** 
 236:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
 237:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP
 238:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLA
 239:../Libraries/XMCLib/src/xmc_vadc.c **** 
 240:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 241:../Libraries/XMCLib/src/xmc_vadc.c ****   if (conv_type == XMC_VADC_GROUP_CONV_STD )
 607              	 .loc 2 241 0
 608 0010 FB79     	 ldrb r3,[r7,#7]
 609 0012 002B     	 cmp r3,#0
 610 0014 09D1     	 bne .L14
 242:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 243:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 244:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->GLOBICLASS[set_num] = config.globiclass &
 611              	 .loc 2 244 0
 612 0016 BA68     	 ldr r2,[r7,#8]
 613 0018 40F21F73 	 movw r3,#1823
 614 001c 1340     	 ands r3,r3,r2
 615 001e FA68     	 ldr r2,[r7,#12]
 616 0020 3968     	 ldr r1,[r7]
 617 0022 2831     	 adds r1,r1,#40
 618 0024 42F82130 	 str r3,[r2,r1,lsl#2]
 619 0028 07E0     	 b .L13
 620              	.L14:
 245:../Libraries/XMCLib/src/xmc_vadc.c ****                                       (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk
 246:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 247:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 248:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 249:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 250:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC
 621              	 .loc 2 250 0
 622 002a BA68     	 ldr r2,[r7,#8]
 623 002c 054B     	 ldr r3,.L16
 624 002e 1340     	 ands r3,r3,r2
 625 0030 FA68     	 ldr r2,[r7,#12]
 626 0032 3968     	 ldr r1,[r7]
 627 0034 2831     	 adds r1,r1,#40
 628 0036 42F82130 	 str r3,[r2,r1,lsl#2]
 629              	.L13:
 251:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 252:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 253:../Libraries/XMCLib/src/xmc_vadc.c **** }
 630              	 .loc 2 253 0
 631 003a 1437     	 adds r7,r7,#20
 632              	.LCFI60:
 633              	 .cfi_def_cfa_offset 4
 634 003c BD46     	 mov sp,r7
 635              	.LCFI61:
 636              	 .cfi_def_cfa_register 13
 637              	 
 638 003e 5DF8047B 	 ldr r7,[sp],#4
 639              	.LCFI62:
 640              	 .cfi_restore 7
 641              	 .cfi_def_cfa_offset 0
 642 0042 7047     	 bx lr
 643              	.L17:
 644              	 .align 2
 645              	.L16:
 646 0044 00001F07 	 .word 119472128
 647              	 .cfi_endproc
 648              	.LFE242:
 650              	 .section .text.XMC_VADC_GLOBAL_StartupCalibration,"ax",%progbits
 651              	 .align 2
 652              	 .global XMC_VADC_GLOBAL_StartupCalibration
 653              	 .thumb
 654              	 .thumb_func
 656              	XMC_VADC_GLOBAL_StartupCalibration:
 657              	.LFB243:
 254:../Libraries/XMCLib/src/xmc_vadc.c **** 
 255:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable startup calibration feature */
 256:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
 257:../Libraries/XMCLib/src/xmc_vadc.c **** {
 658              	 .loc 2 257 0
 659              	 .cfi_startproc
 660              	 
 661              	 
 662              	 
 663 0000 80B4     	 push {r7}
 664              	.LCFI63:
 665              	 .cfi_def_cfa_offset 4
 666              	 .cfi_offset 7,-4
 667 0002 85B0     	 sub sp,sp,#20
 668              	.LCFI64:
 669              	 .cfi_def_cfa_offset 24
 670 0004 00AF     	 add r7,sp,#0
 671              	.LCFI65:
 672              	 .cfi_def_cfa_register 7
 673 0006 7860     	 str r0,[r7,#4]
 258:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 259:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t i;
 260:../Libraries/XMCLib/src/xmc_vadc.c ****   VADC_G_TypeDef *group_ptr;
 261:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 262:../Libraries/XMCLib/src/xmc_vadc.c ****   
 263:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))
 264:../Libraries/XMCLib/src/xmc_vadc.c **** 
 265:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 674              	 .loc 2 265 0
 675 0008 7B68     	 ldr r3,[r7,#4]
 676 000a D3F88030 	 ldr r3,[r3,#128]
 677 000e 43F00042 	 orr r2,r3,#-2147483648
 678 0012 7B68     	 ldr r3,[r7,#4]
 679 0014 C3F88020 	 str r2,[r3,#128]
 266:../Libraries/XMCLib/src/xmc_vadc.c **** 
 267:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 268:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop until all active groups finish calibration */
 269:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 680              	 .loc 2 269 0
 681 0018 0023     	 movs r3,#0
 682 001a FB73     	 strb r3,[r7,#15]
 683 001c 16E0     	 b .L19
 684              	.L22:
 270:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 271:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr = g_xmc_vadc_group_array[i];
 685              	 .loc 2 271 0
 686 001e FB7B     	 ldrb r3,[r7,#15]
 687 0020 0E4A     	 ldr r2,.L23
 688 0022 52F82330 	 ldr r3,[r2,r3,lsl#2]
 689 0026 BB60     	 str r3,[r7,#8]
 272:../Libraries/XMCLib/src/xmc_vadc.c ****     if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 690              	 .loc 2 272 0
 691 0028 BB68     	 ldr r3,[r7,#8]
 692 002a D3F88030 	 ldr r3,[r3,#128]
 693 002e 03F44033 	 and r3,r3,#196608
 694 0032 002B     	 cmp r3,#0
 695 0034 07D0     	 beq .L20
 273:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 274:../Libraries/XMCLib/src/xmc_vadc.c ****       /* This group is active. Loop until it finishes calibration */
 275:../Libraries/XMCLib/src/xmc_vadc.c ****       while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 696              	 .loc 2 275 0
 697 0036 00BF     	 nop
 698              	.L21:
 699              	 .loc 2 275 0 is_stmt 0 discriminator 1
 700 0038 BB68     	 ldr r3,[r7,#8]
 701 003a D3F88030 	 ldr r3,[r3,#128]
 702 003e 03F08053 	 and r3,r3,#268435456
 703 0042 002B     	 cmp r3,#0
 704 0044 F8D1     	 bne .L21
 705              	.L20:
 269:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 706              	 .loc 2 269 0 is_stmt 1 discriminator 2
 707 0046 FB7B     	 ldrb r3,[r7,#15]
 708 0048 0133     	 adds r3,r3,#1
 709 004a FB73     	 strb r3,[r7,#15]
 710              	.L19:
 269:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 711              	 .loc 2 269 0 is_stmt 0 discriminator 1
 712 004c FB7B     	 ldrb r3,[r7,#15]
 713 004e 032B     	 cmp r3,#3
 714 0050 E5D9     	 bls .L22
 276:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 277:../Libraries/XMCLib/src/xmc_vadc.c ****         /* NOP */
 278:../Libraries/XMCLib/src/xmc_vadc.c ****       }
 279:../Libraries/XMCLib/src/xmc_vadc.c ****     }
 280:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 281:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 282:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop until it finishes calibration */
 283:../Libraries/XMCLib/src/xmc_vadc.c ****   while ((((SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) >> (uint32_t)SHS_SHSCFG_STATE_Pos) ==
 284:../Libraries/XMCLib/src/xmc_vadc.c ****          XMC_VADC_SHS_START_UP_CAL_ACTIVE )
 285:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 286:../Libraries/XMCLib/src/xmc_vadc.c ****     /* NOP */
 287:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 288:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 289:../Libraries/XMCLib/src/xmc_vadc.c **** }
 715              	 .loc 2 289 0 is_stmt 1
 716 0052 1437     	 adds r7,r7,#20
 717              	.LCFI66:
 718              	 .cfi_def_cfa_offset 4
 719 0054 BD46     	 mov sp,r7
 720              	.LCFI67:
 721              	 .cfi_def_cfa_register 13
 722              	 
 723 0056 5DF8047B 	 ldr r7,[sp],#4
 724              	.LCFI68:
 725              	 .cfi_restore 7
 726              	 .cfi_def_cfa_offset 0
 727 005a 7047     	 bx lr
 728              	.L24:
 729              	 .align 2
 730              	.L23:
 731 005c 00000000 	 .word g_xmc_vadc_group_array
 732              	 .cfi_endproc
 733              	.LFE243:
 735              	 .section .text.XMC_VADC_GLOBAL_SetBoundaries,"ax",%progbits
 736              	 .align 2
 737              	 .global XMC_VADC_GLOBAL_SetBoundaries
 738              	 .thumb
 739              	 .thumb_func
 741              	XMC_VADC_GLOBAL_SetBoundaries:
 742              	.LFB244:
 290:../Libraries/XMCLib/src/xmc_vadc.c **** 
 291:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set boudaries for result of conversion. Should the boundaries be violated, interrupts are
 292:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
 293:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr,
 294:../Libraries/XMCLib/src/xmc_vadc.c ****                                    const uint32_t boundary0,
 295:../Libraries/XMCLib/src/xmc_vadc.c ****                                    const uint32_t boundary1)
 296:../Libraries/XMCLib/src/xmc_vadc.c **** {
 743              	 .loc 2 296 0
 744              	 .cfi_startproc
 745              	 
 746              	 
 747              	 
 748 0000 80B4     	 push {r7}
 749              	.LCFI69:
 750              	 .cfi_def_cfa_offset 4
 751              	 .cfi_offset 7,-4
 752 0002 87B0     	 sub sp,sp,#28
 753              	.LCFI70:
 754              	 .cfi_def_cfa_offset 32
 755 0004 00AF     	 add r7,sp,#0
 756              	.LCFI71:
 757              	 .cfi_def_cfa_register 7
 758 0006 F860     	 str r0,[r7,#12]
 759 0008 B960     	 str r1,[r7,#8]
 760 000a 7A60     	 str r2,[r7,#4]
 297:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t globbound;
 298:../Libraries/XMCLib/src/xmc_vadc.c **** 
 299:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Module Pointer", (global_ptr == VADC))
 300:../Libraries/XMCLib/src/xmc_vadc.c **** 
 301:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound = 0U;
 761              	 .loc 2 301 0
 762 000c 0023     	 movs r3,#0
 763 000e 7B61     	 str r3,[r7,#20]
 302:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound |= (uint32_t) (boundary0 << VADC_GLOBBOUND_BOUNDARY0_Pos);
 764              	 .loc 2 302 0
 765 0010 7A69     	 ldr r2,[r7,#20]
 766 0012 BB68     	 ldr r3,[r7,#8]
 767 0014 1343     	 orrs r3,r3,r2
 768 0016 7B61     	 str r3,[r7,#20]
 303:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound |= (uint32_t) (boundary1 << VADC_GLOBBOUND_BOUNDARY1_Pos);
 769              	 .loc 2 303 0
 770 0018 7B68     	 ldr r3,[r7,#4]
 771 001a 1B04     	 lsls r3,r3,#16
 772 001c 7A69     	 ldr r2,[r7,#20]
 773 001e 1343     	 orrs r3,r3,r2
 774 0020 7B61     	 str r3,[r7,#20]
 304:../Libraries/XMCLib/src/xmc_vadc.c **** 
 305:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = globbound;
 775              	 .loc 2 305 0
 776 0022 FB68     	 ldr r3,[r7,#12]
 777 0024 7A69     	 ldr r2,[r7,#20]
 778 0026 C3F8B820 	 str r2,[r3,#184]
 306:../Libraries/XMCLib/src/xmc_vadc.c **** }
 779              	 .loc 2 306 0
 780 002a 1C37     	 adds r7,r7,#28
 781              	.LCFI72:
 782              	 .cfi_def_cfa_offset 4
 783 002c BD46     	 mov sp,r7
 784              	.LCFI73:
 785              	 .cfi_def_cfa_register 13
 786              	 
 787 002e 5DF8047B 	 ldr r7,[sp],#4
 788              	.LCFI74:
 789              	 .cfi_restore 7
 790              	 .cfi_def_cfa_offset 0
 791 0032 7047     	 bx lr
 792              	 .cfi_endproc
 793              	.LFE244:
 795              	 .section .text.XMC_VADC_GLOBAL_SetIndividualBoundary,"ax",%progbits
 796              	 .align 2
 797              	 .global XMC_VADC_GLOBAL_SetIndividualBoundary
 798              	 .thumb
 799              	 .thumb_func
 801              	XMC_VADC_GLOBAL_SetIndividualBoundary:
 802              	.LFB245:
 307:../Libraries/XMCLib/src/xmc_vadc.c **** 
 308:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an individual boundary for conversion results */
 309:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
 310:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const XMC_VADC_CHANNEL_BOUNDARY_t selection,
 311:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const uint16_t boundary_value)
 312:../Libraries/XMCLib/src/xmc_vadc.c **** {
 803              	 .loc 2 312 0
 804              	 .cfi_startproc
 805              	 
 806              	 
 807              	 
 808 0000 80B4     	 push {r7}
 809              	.LCFI75:
 810              	 .cfi_def_cfa_offset 4
 811              	 .cfi_offset 7,-4
 812 0002 85B0     	 sub sp,sp,#20
 813              	.LCFI76:
 814              	 .cfi_def_cfa_offset 24
 815 0004 00AF     	 add r7,sp,#0
 816              	.LCFI77:
 817              	 .cfi_def_cfa_register 7
 818 0006 7860     	 str r0,[r7,#4]
 819 0008 0B46     	 mov r3,r1
 820 000a FB70     	 strb r3,[r7,#3]
 821 000c 1346     	 mov r3,r2
 822 000e 3B80     	 strh r3,[r7]
 313:../Libraries/XMCLib/src/xmc_vadc.c **** 
 314:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t globbound;
 315:../Libraries/XMCLib/src/xmc_vadc.c **** 
 316:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Module Pointer", (global_ptr == VADC))
 317:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Boundary Selection",
 318:../Libraries/XMCLib/src/xmc_vadc.c ****              ((XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0 == selection) ||
 319:../Libraries/XMCLib/src/xmc_vadc.c ****               (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1 == selection)))
 320:../Libraries/XMCLib/src/xmc_vadc.c **** 
 321:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 322:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound = global_ptr->GLOBBOUND;
 823              	 .loc 2 322 0
 824 0010 7B68     	 ldr r3,[r7,#4]
 825 0012 D3F8B830 	 ldr r3,[r3,#184]
 826 0016 FB60     	 str r3,[r7,#12]
 323:../Libraries/XMCLib/src/xmc_vadc.c **** 
 324:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0 == selection)
 827              	 .loc 2 324 0
 828 0018 FB78     	 ldrb r3,[r7,#3]
 829 001a 022B     	 cmp r3,#2
 830 001c 0AD1     	 bne .L27
 325:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 326:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound &= ~((uint32_t) VADC_GLOBBOUND_BOUNDARY0_Msk);
 831              	 .loc 2 326 0
 832 001e FB68     	 ldr r3,[r7,#12]
 833 0020 23F47F63 	 bic r3,r3,#4080
 834 0024 23F00F03 	 bic r3,r3,#15
 835 0028 FB60     	 str r3,[r7,#12]
 327:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY0_Pos);
 836              	 .loc 2 327 0
 837 002a 3B88     	 ldrh r3,[r7]
 838 002c FA68     	 ldr r2,[r7,#12]
 839 002e 1343     	 orrs r3,r3,r2
 840 0030 FB60     	 str r3,[r7,#12]
 841 0032 0DE0     	 b .L28
 842              	.L27:
 328:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 329:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1 == selection)
 843              	 .loc 2 329 0
 844 0034 FB78     	 ldrb r3,[r7,#3]
 845 0036 032B     	 cmp r3,#3
 846 0038 0AD1     	 bne .L28
 330:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 331:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound &= ~((uint32_t) VADC_GLOBBOUND_BOUNDARY1_Msk);
 847              	 .loc 2 331 0
 848 003a FB68     	 ldr r3,[r7,#12]
 849 003c 23F07F63 	 bic r3,r3,#267386880
 850 0040 23F47023 	 bic r3,r3,#983040
 851 0044 FB60     	 str r3,[r7,#12]
 332:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY1_Pos);
 852              	 .loc 2 332 0
 853 0046 3B88     	 ldrh r3,[r7]
 854 0048 1B04     	 lsls r3,r3,#16
 855 004a FA68     	 ldr r2,[r7,#12]
 856 004c 1343     	 orrs r3,r3,r2
 857 004e FB60     	 str r3,[r7,#12]
 858              	.L28:
 333:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 334:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 335:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 336:../Libraries/XMCLib/src/xmc_vadc.c ****     /* For MISRA*/
 337:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 338:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = globbound;
 859              	 .loc 2 338 0
 860 0050 7B68     	 ldr r3,[r7,#4]
 861 0052 FA68     	 ldr r2,[r7,#12]
 862 0054 C3F8B820 	 str r2,[r3,#184]
 339:../Libraries/XMCLib/src/xmc_vadc.c **** 
 340:../Libraries/XMCLib/src/xmc_vadc.c **** }
 863              	 .loc 2 340 0
 864 0058 1437     	 adds r7,r7,#20
 865              	.LCFI78:
 866              	 .cfi_def_cfa_offset 4
 867 005a BD46     	 mov sp,r7
 868              	.LCFI79:
 869              	 .cfi_def_cfa_register 13
 870              	 
 871 005c 5DF8047B 	 ldr r7,[sp],#4
 872              	.LCFI80:
 873              	 .cfi_restore 7
 874              	 .cfi_def_cfa_offset 0
 875 0060 7047     	 bx lr
 876              	 .cfi_endproc
 877              	.LFE245:
 879 0062 00BF     	 .section .text.XMC_VADC_GLOBAL_SetCompareValue,"ax",%progbits
 880              	 .align 2
 881              	 .global XMC_VADC_GLOBAL_SetCompareValue
 882              	 .thumb
 883              	 .thumb_func
 885              	XMC_VADC_GLOBAL_SetCompareValue:
 886              	.LFB246:
 341:../Libraries/XMCLib/src/xmc_vadc.c **** 
 342:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 343:../Libraries/XMCLib/src/xmc_vadc.c **** 
 344:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set compare value for the result register. Result of conversion is compared against this 
 345:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
 346:../Libraries/XMCLib/src/xmc_vadc.c **** {
 887              	 .loc 2 346 0
 888              	 .cfi_startproc
 889              	 
 890              	 
 891              	 
 892 0000 80B4     	 push {r7}
 893              	.LCFI81:
 894              	 .cfi_def_cfa_offset 4
 895              	 .cfi_offset 7,-4
 896 0002 83B0     	 sub sp,sp,#12
 897              	.LCFI82:
 898              	 .cfi_def_cfa_offset 16
 899 0004 00AF     	 add r7,sp,#0
 900              	.LCFI83:
 901              	 .cfi_def_cfa_register 7
 902 0006 7860     	 str r0,[r7,#4]
 903 0008 0B46     	 mov r3,r1
 904 000a 7B80     	 strh r3,[r7,#2]
 347:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetCompareValue:Wrong Module Pointer", (global_ptr == VADC))
 348:../Libraries/XMCLib/src/xmc_vadc.c **** 
 349:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRES &= ~((uint32_t)VADC_GLOBRES_RESULT_Msk);
 905              	 .loc 2 349 0
 906 000c 7B68     	 ldr r3,[r7,#4]
 907 000e D3F80033 	 ldr r3,[r3,#768]
 908 0012 1B0C     	 lsrs r3,r3,#16
 909 0014 1B04     	 lsls r3,r3,#16
 910 0016 7A68     	 ldr r2,[r7,#4]
 911 0018 C2F80033 	 str r3,[r2,#768]
 350:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRES |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 912              	 .loc 2 350 0
 913 001c 7B68     	 ldr r3,[r7,#4]
 914 001e D3F80023 	 ldr r2,[r3,#768]
 915 0022 7B88     	 ldrh r3,[r7,#2]
 916 0024 9B00     	 lsls r3,r3,#2
 917 0026 1A43     	 orrs r2,r2,r3
 918 0028 7B68     	 ldr r3,[r7,#4]
 919 002a C3F80023 	 str r2,[r3,#768]
 351:../Libraries/XMCLib/src/xmc_vadc.c **** }
 920              	 .loc 2 351 0
 921 002e 0C37     	 adds r7,r7,#12
 922              	.LCFI84:
 923              	 .cfi_def_cfa_offset 4
 924 0030 BD46     	 mov sp,r7
 925              	.LCFI85:
 926              	 .cfi_def_cfa_register 13
 927              	 
 928 0032 5DF8047B 	 ldr r7,[sp],#4
 929              	.LCFI86:
 930              	 .cfi_restore 7
 931              	 .cfi_def_cfa_offset 0
 932 0036 7047     	 bx lr
 933              	 .cfi_endproc
 934              	.LFE246:
 936              	 .section .text.XMC_VADC_GLOBAL_GetCompareResult,"ax",%progbits
 937              	 .align 2
 938              	 .global XMC_VADC_GLOBAL_GetCompareResult
 939              	 .thumb
 940              	 .thumb_func
 942              	XMC_VADC_GLOBAL_GetCompareResult:
 943              	.LFB247:
 352:../Libraries/XMCLib/src/xmc_vadc.c **** 
 353:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result of comparison */
 354:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr)
 355:../Libraries/XMCLib/src/xmc_vadc.c **** {
 944              	 .loc 2 355 0
 945              	 .cfi_startproc
 946              	 
 947              	 
 948              	 
 949 0000 80B4     	 push {r7}
 950              	.LCFI87:
 951              	 .cfi_def_cfa_offset 4
 952              	 .cfi_offset 7,-4
 953 0002 85B0     	 sub sp,sp,#20
 954              	.LCFI88:
 955              	 .cfi_def_cfa_offset 24
 956 0004 00AF     	 add r7,sp,#0
 957              	.LCFI89:
 958              	 .cfi_def_cfa_register 7
 959 0006 7860     	 str r0,[r7,#4]
 356:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_FAST_COMPARE_t result;
 357:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
 358:../Libraries/XMCLib/src/xmc_vadc.c **** 
 359:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetCompareResult:Wrong Module Pointer", (global_ptr == VADC))
 360:../Libraries/XMCLib/src/xmc_vadc.c **** 
 361:../Libraries/XMCLib/src/xmc_vadc.c ****   res = global_ptr->GLOBRES;
 960              	 .loc 2 361 0
 961 0008 7B68     	 ldr r3,[r7,#4]
 962 000a D3F80033 	 ldr r3,[r3,#768]
 963 000e BB60     	 str r3,[r7,#8]
 362:../Libraries/XMCLib/src/xmc_vadc.c **** 
 363:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res & (uint32_t)VADC_GLOBRES_VF_Msk)
 964              	 .loc 2 363 0
 965 0010 BB68     	 ldr r3,[r7,#8]
 966 0012 002B     	 cmp r3,#0
 967 0014 06DA     	 bge .L31
 364:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 365:../Libraries/XMCLib/src/xmc_vadc.c ****     result = (XMC_VADC_FAST_COMPARE_t)((uint32_t)(res >> (uint32_t)VADC_GLOBRES_FCR_Pos) & (uint32_
 968              	 .loc 2 365 0
 969 0016 BB68     	 ldr r3,[r7,#8]
 970 0018 9B0F     	 lsrs r3,r3,#30
 971 001a DBB2     	 uxtb r3,r3
 972 001c 03F00103 	 and r3,r3,#1
 973 0020 FB73     	 strb r3,[r7,#15]
 974 0022 01E0     	 b .L32
 975              	.L31:
 366:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 367:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 368:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 369:../Libraries/XMCLib/src/xmc_vadc.c ****     result = XMC_VADC_FAST_COMPARE_UNKNOWN;
 976              	 .loc 2 369 0
 977 0024 0223     	 movs r3,#2
 978 0026 FB73     	 strb r3,[r7,#15]
 979              	.L32:
 370:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 371:../Libraries/XMCLib/src/xmc_vadc.c **** 
 372:../Libraries/XMCLib/src/xmc_vadc.c ****   return result;
 980              	 .loc 2 372 0
 981 0028 FB7B     	 ldrb r3,[r7,#15]
 373:../Libraries/XMCLib/src/xmc_vadc.c **** }
 982              	 .loc 2 373 0
 983 002a 1846     	 mov r0,r3
 984 002c 1437     	 adds r7,r7,#20
 985              	.LCFI90:
 986              	 .cfi_def_cfa_offset 4
 987 002e BD46     	 mov sp,r7
 988              	.LCFI91:
 989              	 .cfi_def_cfa_register 13
 990              	 
 991 0030 5DF8047B 	 ldr r7,[sp],#4
 992              	.LCFI92:
 993              	 .cfi_restore 7
 994              	 .cfi_def_cfa_offset 0
 995 0034 7047     	 bx lr
 996              	 .cfi_endproc
 997              	.LFE247:
 999 0036 00BF     	 .section .text.XMC_VADC_GLOBAL_BindGroupToEMux,"ax",%progbits
 1000              	 .align 2
 1001              	 .global XMC_VADC_GLOBAL_BindGroupToEMux
 1002              	 .thumb
 1003              	 .thumb_func
 1005              	XMC_VADC_GLOBAL_BindGroupToEMux:
 1006              	.LFB248:
 374:../Libraries/XMCLib/src/xmc_vadc.c **** 
 375:../Libraries/XMCLib/src/xmc_vadc.c **** /* Bind one of the four groups to one of the two EMUX interfaces */
 376:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_EMUX_AVAILABLE == 1U)
 377:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
 378:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1007              	 .loc 2 378 0
 1008              	 .cfi_startproc
 1009              	 
 1010              	 
 1011              	 
 1012 0000 80B4     	 push {r7}
 1013              	.LCFI93:
 1014              	 .cfi_def_cfa_offset 4
 1015              	 .cfi_offset 7,-4
 1016 0002 87B0     	 sub sp,sp,#28
 1017              	.LCFI94:
 1018              	 .cfi_def_cfa_offset 32
 1019 0004 00AF     	 add r7,sp,#0
 1020              	.LCFI95:
 1021              	 .cfi_def_cfa_register 7
 1022 0006 F860     	 str r0,[r7,#12]
 1023 0008 B960     	 str r1,[r7,#8]
 1024 000a 7A60     	 str r2,[r7,#4]
 379:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
 380:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t pos;
 381:../Libraries/XMCLib/src/xmc_vadc.c **** 
 382:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong Module Pointer", (global_ptr == VADC))
 383:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong EMUX Group", (emuxif < XMC_VADC_NUM_EMUX_INTERF
 384:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong VADC Group", (group < XMC_VADC_MAXIMUM_NUM_GROU
 385:../Libraries/XMCLib/src/xmc_vadc.c **** 
 386:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == emuxif)
 1025              	 .loc 2 386 0
 1026 000c BB68     	 ldr r3,[r7,#8]
 1027 000e 002B     	 cmp r3,#0
 1028 0010 04D1     	 bne .L35
 387:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 388:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t)VADC_EMUXSEL_EMUXGRP0_Pos;
 1029              	 .loc 2 388 0
 1030 0012 0023     	 movs r3,#0
 1031 0014 3B61     	 str r3,[r7,#16]
 389:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)VADC_EMUXSEL_EMUXGRP0_Msk;
 1032              	 .loc 2 389 0
 1033 0016 0F23     	 movs r3,#15
 1034 0018 7B61     	 str r3,[r7,#20]
 1035 001a 03E0     	 b .L36
 1036              	.L35:
 390:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 391:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 392:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 393:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t)VADC_EMUXSEL_EMUXGRP1_Pos;
 1037              	 .loc 2 393 0
 1038 001c 0423     	 movs r3,#4
 1039 001e 3B61     	 str r3,[r7,#16]
 394:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)VADC_EMUXSEL_EMUXGRP1_Msk;
 1040              	 .loc 2 394 0
 1041 0020 F023     	 movs r3,#240
 1042 0022 7B61     	 str r3,[r7,#20]
 1043              	.L36:
 395:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 396:../Libraries/XMCLib/src/xmc_vadc.c **** 
 397:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->EMUXSEL &= ~(mask);
 1044              	 .loc 2 397 0
 1045 0024 FB68     	 ldr r3,[r7,#12]
 1046 0026 D3F8F023 	 ldr r2,[r3,#1008]
 1047 002a 7B69     	 ldr r3,[r7,#20]
 1048 002c DB43     	 mvns r3,r3
 1049 002e 1A40     	 ands r2,r2,r3
 1050 0030 FB68     	 ldr r3,[r7,#12]
 1051 0032 C3F8F023 	 str r2,[r3,#1008]
 398:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->EMUXSEL |= (uint32_t) (group << pos);
 1052              	 .loc 2 398 0
 1053 0036 FB68     	 ldr r3,[r7,#12]
 1054 0038 D3F8F023 	 ldr r2,[r3,#1008]
 1055 003c 3B69     	 ldr r3,[r7,#16]
 1056 003e 7968     	 ldr r1,[r7,#4]
 1057 0040 01FA03F3 	 lsl r3,r1,r3
 1058 0044 1A43     	 orrs r2,r2,r3
 1059 0046 FB68     	 ldr r3,[r7,#12]
 1060 0048 C3F8F023 	 str r2,[r3,#1008]
 399:../Libraries/XMCLib/src/xmc_vadc.c **** 
 400:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1061              	 .loc 2 400 0
 1062 004c 1C37     	 adds r7,r7,#28
 1063              	.LCFI96:
 1064              	 .cfi_def_cfa_offset 4
 1065 004e BD46     	 mov sp,r7
 1066              	.LCFI97:
 1067              	 .cfi_def_cfa_register 13
 1068              	 
 1069 0050 5DF8047B 	 ldr r7,[sp],#4
 1070              	.LCFI98:
 1071              	 .cfi_restore 7
 1072              	 .cfi_def_cfa_offset 0
 1073 0054 7047     	 bx lr
 1074              	 .cfi_endproc
 1075              	.LFE248:
 1077 0056 00BF     	 .section .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode,"ax",%progbits
 1078              	 .align 2
 1079              	 .global XMC_VADC_GLOBAL_SetResultEventInterruptNode
 1080              	 .thumb
 1081              	 .thumb_func
 1083              	XMC_VADC_GLOBAL_SetResultEventInterruptNode:
 1084              	.LFB249:
 401:../Libraries/XMCLib/src/xmc_vadc.c **** #endif 
 402:../Libraries/XMCLib/src/xmc_vadc.c **** 
 403:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind result event with a service request line */
 404:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
 405:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1085              	 .loc 2 405 0
 1086              	 .cfi_startproc
 1087              	 
 1088              	 
 1089              	 
 1090 0000 80B4     	 push {r7}
 1091              	.LCFI99:
 1092              	 .cfi_def_cfa_offset 4
 1093              	 .cfi_offset 7,-4
 1094 0002 85B0     	 sub sp,sp,#20
 1095              	.LCFI100:
 1096              	 .cfi_def_cfa_offset 24
 1097 0004 00AF     	 add r7,sp,#0
 1098              	.LCFI101:
 1099              	 .cfi_def_cfa_register 7
 1100 0006 7860     	 str r0,[r7,#4]
 1101 0008 0B46     	 mov r3,r1
 1102 000a FB70     	 strb r3,[r7,#3]
 406:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t node;
 407:../Libraries/XMCLib/src/xmc_vadc.c ****   
 408:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong Module Pointer", (global_ptr == VAD
 409:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong SR Number", (sr <= XMC_VADC_SR_SHAR
 410:../Libraries/XMCLib/src/xmc_vadc.c **** 
 411:../Libraries/XMCLib/src/xmc_vadc.c ****   if (sr >= XMC_VADC_SR_SHARED_SR0)
 1103              	 .loc 2 411 0
 1104 000c FB78     	 ldrb r3,[r7,#3]
 1105 000e 032B     	 cmp r3,#3
 1106 0010 03D9     	 bls .L38
 412:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 413:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 1107              	 .loc 2 413 0
 1108 0012 FB78     	 ldrb r3,[r7,#3]
 1109 0014 043B     	 subs r3,r3,#4
 1110 0016 FB60     	 str r3,[r7,#12]
 1111 0018 01E0     	 b .L39
 1112              	.L38:
 414:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 415:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 416:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 417:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr;
 1113              	 .loc 2 417 0
 1114 001a FB78     	 ldrb r3,[r7,#3]
 1115 001c FB60     	 str r3,[r7,#12]
 1116              	.L39:
 418:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 419:../Libraries/XMCLib/src/xmc_vadc.c **** 
 420:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_REV0NP_Msk);
 1117              	 .loc 2 420 0
 1118 001e 7B68     	 ldr r3,[r7,#4]
 1119 0020 D3F84031 	 ldr r3,[r3,#320]
 1120 0024 23F47022 	 bic r2,r3,#983040
 1121 0028 7B68     	 ldr r3,[r7,#4]
 1122 002a C3F84021 	 str r2,[r3,#320]
 421:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
 1123              	 .loc 2 421 0
 1124 002e 7B68     	 ldr r3,[r7,#4]
 1125 0030 D3F84021 	 ldr r2,[r3,#320]
 1126 0034 FB68     	 ldr r3,[r7,#12]
 1127 0036 1B04     	 lsls r3,r3,#16
 1128 0038 1A43     	 orrs r2,r2,r3
 1129 003a 7B68     	 ldr r3,[r7,#4]
 1130 003c C3F84021 	 str r2,[r3,#320]
 422:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1131              	 .loc 2 422 0
 1132 0040 1437     	 adds r7,r7,#20
 1133              	.LCFI102:
 1134              	 .cfi_def_cfa_offset 4
 1135 0042 BD46     	 mov sp,r7
 1136              	.LCFI103:
 1137              	 .cfi_def_cfa_register 13
 1138              	 
 1139 0044 5DF8047B 	 ldr r7,[sp],#4
 1140              	.LCFI104:
 1141              	 .cfi_restore 7
 1142              	 .cfi_def_cfa_offset 0
 1143 0048 7047     	 bx lr
 1144              	 .cfi_endproc
 1145              	.LFE249:
 1147 004a 00BF     	 .section .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode,"ax",%progbits
 1148              	 .align 2
 1149              	 .global XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
 1150              	 .thumb
 1151              	 .thumb_func
 1153              	XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:
 1154              	.LFB250:
 423:../Libraries/XMCLib/src/xmc_vadc.c **** 
 424:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind request source event with a service request line */
 425:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
 426:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1155              	 .loc 2 426 0
 1156              	 .cfi_startproc
 1157              	 
 1158              	 
 1159              	 
 1160 0000 80B4     	 push {r7}
 1161              	.LCFI105:
 1162              	 .cfi_def_cfa_offset 4
 1163              	 .cfi_offset 7,-4
 1164 0002 85B0     	 sub sp,sp,#20
 1165              	.LCFI106:
 1166              	 .cfi_def_cfa_offset 24
 1167 0004 00AF     	 add r7,sp,#0
 1168              	.LCFI107:
 1169              	 .cfi_def_cfa_register 7
 1170 0006 7860     	 str r0,[r7,#4]
 1171 0008 0B46     	 mov r3,r1
 1172 000a FB70     	 strb r3,[r7,#3]
 427:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t node;
 428:../Libraries/XMCLib/src/xmc_vadc.c ****   
 429:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_
 430:../Libraries/XMCLib/src/xmc_vadc.c **** 
 431:../Libraries/XMCLib/src/xmc_vadc.c ****   if (sr >= XMC_VADC_SR_SHARED_SR0)
 1173              	 .loc 2 431 0
 1174 000c FB78     	 ldrb r3,[r7,#3]
 1175 000e 032B     	 cmp r3,#3
 1176 0010 03D9     	 bls .L41
 432:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 433:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 1177              	 .loc 2 433 0
 1178 0012 FB78     	 ldrb r3,[r7,#3]
 1179 0014 043B     	 subs r3,r3,#4
 1180 0016 FB60     	 str r3,[r7,#12]
 1181 0018 01E0     	 b .L42
 1182              	.L41:
 434:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 435:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 436:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 437:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr;
 1183              	 .loc 2 437 0
 1184 001a FB78     	 ldrb r3,[r7,#3]
 1185 001c FB60     	 str r3,[r7,#12]
 1186              	.L42:
 438:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 439:../Libraries/XMCLib/src/xmc_vadc.c **** 
 440:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 1187              	 .loc 2 440 0
 1188 001e 7B68     	 ldr r3,[r7,#4]
 1189 0020 D3F84031 	 ldr r3,[r3,#320]
 1190 0024 23F00F02 	 bic r2,r3,#15
 1191 0028 7B68     	 ldr r3,[r7,#4]
 1192 002a C3F84021 	 str r2,[r3,#320]
 441:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 1193              	 .loc 2 441 0
 1194 002e 7B68     	 ldr r3,[r7,#4]
 1195 0030 D3F84021 	 ldr r2,[r3,#320]
 1196 0034 FB68     	 ldr r3,[r7,#12]
 1197 0036 1A43     	 orrs r2,r2,r3
 1198 0038 7B68     	 ldr r3,[r7,#4]
 1199 003a C3F84021 	 str r2,[r3,#320]
 442:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1200              	 .loc 2 442 0
 1201 003e 1437     	 adds r7,r7,#20
 1202              	.LCFI108:
 1203              	 .cfi_def_cfa_offset 4
 1204 0040 BD46     	 mov sp,r7
 1205              	.LCFI109:
 1206              	 .cfi_def_cfa_register 13
 1207              	 
 1208 0042 5DF8047B 	 ldr r7,[sp],#4
 1209              	.LCFI110:
 1210              	 .cfi_restore 7
 1211              	 .cfi_def_cfa_offset 0
 1212 0046 7047     	 bx lr
 1213              	 .cfi_endproc
 1214              	.LFE250:
 1216              	 .section .text.XMC_VADC_GROUP_Init,"ax",%progbits
 1217              	 .align 2
 1218              	 .global XMC_VADC_GROUP_Init
 1219              	 .thumb
 1220              	 .thumb_func
 1222              	XMC_VADC_GROUP_Init:
 1223              	.LFB251:
 443:../Libraries/XMCLib/src/xmc_vadc.c **** 
 444:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize an instance of group of VADC hardware */
 445:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)  
 446:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
 447:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1224              	 .loc 2 447 0
 1225              	 .cfi_startproc
 1226              	 
 1227              	 
 1228 0000 80B5     	 push {r7,lr}
 1229              	.LCFI111:
 1230              	 .cfi_def_cfa_offset 8
 1231              	 .cfi_offset 7,-8
 1232              	 .cfi_offset 14,-4
 1233 0002 82B0     	 sub sp,sp,#8
 1234              	.LCFI112:
 1235              	 .cfi_def_cfa_offset 16
 1236 0004 00AF     	 add r7,sp,#0
 1237              	.LCFI113:
 1238              	 .cfi_def_cfa_register 7
 1239 0006 7860     	 str r0,[r7,#4]
 1240 0008 3960     	 str r1,[r7]
 448:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
 449:../Libraries/XMCLib/src/xmc_vadc.c **** 
 450:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the input classes */
 451:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 1241              	 .loc 2 451 0
 1242 000a 3B68     	 ldr r3,[r7]
 1243 000c 7868     	 ldr r0,[r7,#4]
 1244 000e 5968     	 ldr r1,[r3,#4]
 1245 0010 0022     	 movs r2,#0
 1246 0012 0023     	 movs r3,#0
 1247 0014 FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 452:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 1248              	 .loc 2 452 0
 1249 0018 3B68     	 ldr r3,[r7]
 1250 001a 7868     	 ldr r0,[r7,#4]
 1251 001c 5968     	 ldr r1,[r3,#4]
 1252 001e 0122     	 movs r2,#1
 1253 0020 0023     	 movs r3,#0
 1254 0022 FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 453:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 1255              	 .loc 2 453 0
 1256 0026 3B68     	 ldr r3,[r7]
 1257 0028 7868     	 ldr r0,[r7,#4]
 1258 002a 9968     	 ldr r1,[r3,#8]
 1259 002c 0022     	 movs r2,#0
 1260 002e 0123     	 movs r3,#1
 1261 0030 FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 454:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 1262              	 .loc 2 454 0
 1263 0034 3B68     	 ldr r3,[r7]
 1264 0036 7868     	 ldr r0,[r7,#4]
 1265 0038 9968     	 ldr r1,[r3,#8]
 1266 003a 0122     	 movs r2,#1
 1267 003c 0123     	 movs r3,#1
 1268 003e FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 455:../Libraries/XMCLib/src/xmc_vadc.c **** 
 456:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBCFG = config->g_arbcfg;
 1269              	 .loc 2 456 0
 1270 0042 3B68     	 ldr r3,[r7]
 1271 0044 1A69     	 ldr r2,[r3,#16]
 1272 0046 7B68     	 ldr r3,[r7,#4]
 1273 0048 C3F88020 	 str r2,[r3,#128]
 457:../Libraries/XMCLib/src/xmc_vadc.c **** 
 458:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = config->g_bound;
 1274              	 .loc 2 458 0
 1275 004c 3B68     	 ldr r3,[r7]
 1276 004e DA68     	 ldr r2,[r3,#12]
 1277 0050 7B68     	 ldr r3,[r7,#4]
 1278 0052 C3F8B820 	 str r2,[r3,#184]
 459:../Libraries/XMCLib/src/xmc_vadc.c **** 
 460:../Libraries/XMCLib/src/xmc_vadc.c ****   /* External mux configuration */
 461:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 1279              	 .loc 2 461 0
 1280 0056 3B68     	 ldr r3,[r7]
 1281 0058 7868     	 ldr r0,[r7,#4]
 1282 005a 1968     	 ldr r1,[r3]
 1283 005c FFF7FEFF 	 bl XMC_VADC_GROUP_ExternalMuxControlInit
 462:../Libraries/XMCLib/src/xmc_vadc.c **** 
 463:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1284              	 .loc 2 463 0
 1285 0060 0837     	 adds r7,r7,#8
 1286              	.LCFI114:
 1287              	 .cfi_def_cfa_offset 8
 1288 0062 BD46     	 mov sp,r7
 1289              	.LCFI115:
 1290              	 .cfi_def_cfa_register 13
 1291              	 
 1292 0064 80BD     	 pop {r7,pc}
 1293              	 .cfi_endproc
 1294              	.LFE251:
 1296 0066 00BF     	 .section .text.XMC_VADC_GROUP_InputClassInit,"ax",%progbits
 1297              	 .align 2
 1298              	 .global XMC_VADC_GROUP_InputClassInit
 1299              	 .thumb
 1300              	 .thumb_func
 1302              	XMC_VADC_GROUP_InputClassInit:
 1303              	.LFB252:
 464:../Libraries/XMCLib/src/xmc_vadc.c **** 
 465:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to program conversion characteristics */
 466:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
 467:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
 468:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1304              	 .loc 2 468 0
 1305              	 .cfi_startproc
 1306              	 
 1307              	 
 1308              	 
 1309 0000 80B4     	 push {r7}
 1310              	.LCFI116:
 1311              	 .cfi_def_cfa_offset 4
 1312              	 .cfi_offset 7,-4
 1313 0002 8DB0     	 sub sp,sp,#52
 1314              	.LCFI117:
 1315              	 .cfi_def_cfa_offset 56
 1316 0004 00AF     	 add r7,sp,#0
 1317              	.LCFI118:
 1318              	 .cfi_def_cfa_register 7
 1319 0006 F860     	 str r0,[r7,#12]
 1320 0008 B960     	 str r1,[r7,#8]
 1321 000a 3B60     	 str r3,[r7]
 1322 000c 1346     	 mov r3,r2
 1323 000e FB71     	 strb r3,[r7,#7]
 469:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_class;
 470:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_mode_pos;
 471:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time_pos;
 472:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_mode_mask;
 473:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time_mask;
 474:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time;
 475:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_CONVMODE_t conv_mode;
 476:../Libraries/XMCLib/src/xmc_vadc.c **** 
 477:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_pt
 478:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_
 479:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLAS
 480:../Libraries/XMCLib/src/xmc_vadc.c **** 
 481:../Libraries/XMCLib/src/xmc_vadc.c ****   /* 
 482:../Libraries/XMCLib/src/xmc_vadc.c ****    * Obtain the mask and position macros of the parameters based on what is being requested - Stand
 483:../Libraries/XMCLib/src/xmc_vadc.c ****    * external mux channels.
 484:../Libraries/XMCLib/src/xmc_vadc.c ****    */
 485:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_GROUP_CONV_STD == conv_type)
 1324              	 .loc 2 485 0
 1325 0010 FB79     	 ldrb r3,[r7,#7]
 1326 0012 002B     	 cmp r3,#0
 1327 0014 13D1     	 bne .L45
 486:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 487:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 1328              	 .loc 2 487 0
 1329 0016 0823     	 movs r3,#8
 1330 0018 FB62     	 str r3,[r7,#44]
 488:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 1331              	 .loc 2 488 0
 1332 001a 4FF4E063 	 mov r3,#1792
 1333 001e 7B62     	 str r3,[r7,#36]
 489:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 1334              	 .loc 2 489 0
 1335 0020 0023     	 movs r3,#0
 1336 0022 BB62     	 str r3,[r7,#40]
 490:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 1337              	 .loc 2 490 0
 1338 0024 1F23     	 movs r3,#31
 1339 0026 3B62     	 str r3,[r7,#32]
 491:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time      = (uint32_t) config.sample_time_std_conv;
 1340              	 .loc 2 491 0
 1341 0028 3B7A     	 ldrb r3,[r7,#8]
 1342 002a C3F30403 	 ubfx r3,r3,#0,#5
 1343 002e DBB2     	 uxtb r3,r3
 1344 0030 FB61     	 str r3,[r7,#28]
 492:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 1345              	 .loc 2 492 0
 1346 0032 7B7A     	 ldrb r3,[r7,#9]
 1347 0034 C3F30203 	 ubfx r3,r3,#0,#3
 1348 0038 DBB2     	 uxtb r3,r3
 1349 003a FB76     	 strb r3,[r7,#27]
 1350 003c 13E0     	 b .L46
 1351              	.L45:
 493:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 494:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 495:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 496:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 1352              	 .loc 2 496 0
 1353 003e 1823     	 movs r3,#24
 1354 0040 FB62     	 str r3,[r7,#44]
 497:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 1355              	 .loc 2 497 0
 1356 0042 4FF0E063 	 mov r3,#117440512
 1357 0046 7B62     	 str r3,[r7,#36]
 498:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 1358              	 .loc 2 498 0
 1359 0048 1023     	 movs r3,#16
 1360 004a BB62     	 str r3,[r7,#40]
 499:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 1361              	 .loc 2 499 0
 1362 004c 4FF4F813 	 mov r3,#2031616
 1363 0050 3B62     	 str r3,[r7,#32]
 500:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 1364              	 .loc 2 500 0
 1365 0052 BB7A     	 ldrb r3,[r7,#10]
 1366 0054 C3F30403 	 ubfx r3,r3,#0,#5
 1367 0058 DBB2     	 uxtb r3,r3
 1368 005a FB61     	 str r3,[r7,#28]
 501:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 1369              	 .loc 2 501 0
 1370 005c FB7A     	 ldrb r3,[r7,#11]
 1371 005e C3F30203 	 ubfx r3,r3,#0,#3
 1372 0062 DBB2     	 uxtb r3,r3
 1373 0064 FB76     	 strb r3,[r7,#27]
 1374              	.L46:
 502:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 503:../Libraries/XMCLib/src/xmc_vadc.c **** 
 504:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Determine the class */
 505:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class  = group_ptr->ICLASS[set_num];
 1375              	 .loc 2 505 0
 1376 0066 FB68     	 ldr r3,[r7,#12]
 1377 0068 3A68     	 ldr r2,[r7]
 1378 006a 2832     	 adds r2,r2,#40
 1379 006c 53F82230 	 ldr r3,[r3,r2,lsl#2]
 1380 0070 7B61     	 str r3,[r7,#20]
 506:../Libraries/XMCLib/src/xmc_vadc.c **** 
 507:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the class register */
 508:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(conv_mode_mask);
 1381              	 .loc 2 508 0
 1382 0072 7B6A     	 ldr r3,[r7,#36]
 1383 0074 DB43     	 mvns r3,r3
 1384 0076 7A69     	 ldr r2,[r7,#20]
 1385 0078 1340     	 ands r3,r3,r2
 1386 007a 7B61     	 str r3,[r7,#20]
 509:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 1387              	 .loc 2 509 0
 1388 007c FA7E     	 ldrb r2,[r7,#27]
 1389 007e FB6A     	 ldr r3,[r7,#44]
 1390 0080 02FA03F3 	 lsl r3,r2,r3
 1391 0084 7A69     	 ldr r2,[r7,#20]
 1392 0086 1343     	 orrs r3,r3,r2
 1393 0088 7B61     	 str r3,[r7,#20]
 510:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(sample_time_mask);
 1394              	 .loc 2 510 0
 1395 008a 3B6A     	 ldr r3,[r7,#32]
 1396 008c DB43     	 mvns r3,r3
 1397 008e 7A69     	 ldr r2,[r7,#20]
 1398 0090 1340     	 ands r3,r3,r2
 1399 0092 7B61     	 str r3,[r7,#20]
 511:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 1400              	 .loc 2 511 0
 1401 0094 BB6A     	 ldr r3,[r7,#40]
 1402 0096 FA69     	 ldr r2,[r7,#28]
 1403 0098 02FA03F3 	 lsl r3,r2,r3
 1404 009c 7A69     	 ldr r2,[r7,#20]
 1405 009e 1343     	 orrs r3,r3,r2
 1406 00a0 7B61     	 str r3,[r7,#20]
 512:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ICLASS[set_num] = conv_class;
 1407              	 .loc 2 512 0
 1408 00a2 FB68     	 ldr r3,[r7,#12]
 1409 00a4 3A68     	 ldr r2,[r7]
 1410 00a6 2832     	 adds r2,r2,#40
 1411 00a8 7969     	 ldr r1,[r7,#20]
 1412 00aa 43F82210 	 str r1,[r3,r2,lsl#2]
 513:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1413              	 .loc 2 513 0
 1414 00ae 3437     	 adds r7,r7,#52
 1415              	.LCFI119:
 1416              	 .cfi_def_cfa_offset 4
 1417 00b0 BD46     	 mov sp,r7
 1418              	.LCFI120:
 1419              	 .cfi_def_cfa_register 13
 1420              	 
 1421 00b2 5DF8047B 	 ldr r7,[sp],#4
 1422              	.LCFI121:
 1423              	 .cfi_restore 7
 1424              	 .cfi_def_cfa_offset 0
 1425 00b6 7047     	 bx lr
 1426              	 .cfi_endproc
 1427              	.LFE252:
 1429              	 .section .text.XMC_VADC_GROUP_SetPowerMode,"ax",%progbits
 1430              	 .align 2
 1431              	 .global XMC_VADC_GROUP_SetPowerMode
 1432              	 .thumb
 1433              	 .thumb_func
 1435              	XMC_VADC_GROUP_SetPowerMode:
 1436              	.LFB253:
 514:../Libraries/XMCLib/src/xmc_vadc.c **** 
 515:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which sets the power mode of analog converter of a VADC group */
 516:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
 517:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1437              	 .loc 2 517 0
 1438              	 .cfi_startproc
 1439              	 
 1440              	 
 1441              	 
 1442 0000 80B4     	 push {r7}
 1443              	.LCFI122:
 1444              	 .cfi_def_cfa_offset 4
 1445              	 .cfi_offset 7,-4
 1446 0002 85B0     	 sub sp,sp,#20
 1447              	.LCFI123:
 1448              	 .cfi_def_cfa_offset 24
 1449 0004 00AF     	 add r7,sp,#0
 1450              	.LCFI124:
 1451              	 .cfi_def_cfa_register 7
 1452 0006 7860     	 str r0,[r7,#4]
 1453 0008 0B46     	 mov r3,r1
 1454 000a FB70     	 strb r3,[r7,#3]
 518:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t arbcfg;
 519:../Libraries/XMCLib/src/xmc_vadc.c **** 
 520:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
 521:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMOD
 522:../Libraries/XMCLib/src/xmc_vadc.c **** 
 523:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg = group_ptr->ARBCFG;
 1455              	 .loc 2 523 0
 1456 000c 7B68     	 ldr r3,[r7,#4]
 1457 000e D3F88030 	 ldr r3,[r3,#128]
 1458 0012 FB60     	 str r3,[r7,#12]
 524:../Libraries/XMCLib/src/xmc_vadc.c **** 
 525:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 1459              	 .loc 2 525 0
 1460 0014 FB68     	 ldr r3,[r7,#12]
 1461 0016 23F00303 	 bic r3,r3,#3
 1462 001a FB60     	 str r3,[r7,#12]
 526:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg |= (uint32_t)power_mode;
 1463              	 .loc 2 526 0
 1464 001c FB78     	 ldrb r3,[r7,#3]
 1465 001e FA68     	 ldr r2,[r7,#12]
 1466 0020 1343     	 orrs r3,r3,r2
 1467 0022 FB60     	 str r3,[r7,#12]
 527:../Libraries/XMCLib/src/xmc_vadc.c **** 
 528:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBCFG = arbcfg;
 1468              	 .loc 2 528 0
 1469 0024 7B68     	 ldr r3,[r7,#4]
 1470 0026 FA68     	 ldr r2,[r7,#12]
 1471 0028 C3F88020 	 str r2,[r3,#128]
 529:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1472              	 .loc 2 529 0
 1473 002c 1437     	 adds r7,r7,#20
 1474              	.LCFI125:
 1475              	 .cfi_def_cfa_offset 4
 1476 002e BD46     	 mov sp,r7
 1477              	.LCFI126:
 1478              	 .cfi_def_cfa_register 13
 1479              	 
 1480 0030 5DF8047B 	 ldr r7,[sp],#4
 1481              	.LCFI127:
 1482              	 .cfi_restore 7
 1483              	 .cfi_def_cfa_offset 0
 1484 0034 7047     	 bx lr
 1485              	 .cfi_endproc
 1486              	.LFE253:
 1488 0036 00BF     	 .section .text.XMC_VADC_GROUP_SetSyncSlave,"ax",%progbits
 1489              	 .align 2
 1490              	 .global XMC_VADC_GROUP_SetSyncSlave
 1491              	 .thumb
 1492              	 .thumb_func
 1494              	XMC_VADC_GROUP_SetSyncSlave:
 1495              	.LFB254:
 530:../Libraries/XMCLib/src/xmc_vadc.c **** 
 531:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which programs a group as a slave group during sync conversions */
 532:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
 533:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1496              	 .loc 2 533 0
 1497              	 .cfi_startproc
 1498              	 
 1499              	 
 1500              	 
 1501 0000 80B4     	 push {r7}
 1502              	.LCFI128:
 1503              	 .cfi_def_cfa_offset 4
 1504              	 .cfi_offset 7,-4
 1505 0002 87B0     	 sub sp,sp,#28
 1506              	.LCFI129:
 1507              	 .cfi_def_cfa_offset 32
 1508 0004 00AF     	 add r7,sp,#0
 1509              	.LCFI130:
 1510              	 .cfi_def_cfa_register 7
 1511 0006 F860     	 str r0,[r7,#12]
 1512 0008 B960     	 str r1,[r7,#8]
 1513 000a 7A60     	 str r2,[r7,#4]
 534:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 535:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )
 536:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
 537:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlave:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
 538:../Libraries/XMCLib/src/xmc_vadc.c ****   
 539:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )
 540:../Libraries/XMCLib/src/xmc_vadc.c **** 
 541:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Determine the coding of SYNCTR */
 542:../Libraries/XMCLib/src/xmc_vadc.c ****   if (slave_grp > master_grp)
 1514              	 .loc 2 542 0
 1515 000c 7A68     	 ldr r2,[r7,#4]
 1516 000e BB68     	 ldr r3,[r7,#8]
 1517 0010 9A42     	 cmp r2,r3
 1518 0012 02D9     	 bls .L49
 543:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 544:../Libraries/XMCLib/src/xmc_vadc.c ****     master_grp = master_grp + 1U;
 1519              	 .loc 2 544 0
 1520 0014 BB68     	 ldr r3,[r7,#8]
 1521 0016 0133     	 adds r3,r3,#1
 1522 0018 BB60     	 str r3,[r7,#8]
 1523              	.L49:
 545:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 546:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
 547:../Libraries/XMCLib/src/xmc_vadc.c ****   
 548:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program SYNCTR */
 549:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr = group_ptr->SYNCTR;
 1524              	 .loc 2 549 0
 1525 001a FB68     	 ldr r3,[r7,#12]
 1526 001c D3F8C030 	 ldr r3,[r3,#192]
 1527 0020 7B61     	 str r3,[r7,#20]
 550:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 1528              	 .loc 2 550 0
 1529 0022 7B69     	 ldr r3,[r7,#20]
 1530 0024 23F00303 	 bic r3,r3,#3
 1531 0028 7B61     	 str r3,[r7,#20]
 551:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   |= master_grp;
 1532              	 .loc 2 551 0
 1533 002a 7A69     	 ldr r2,[r7,#20]
 1534 002c BB68     	 ldr r3,[r7,#8]
 1535 002e 1343     	 orrs r3,r3,r2
 1536 0030 7B61     	 str r3,[r7,#20]
 552:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR = synctr;
 1537              	 .loc 2 552 0
 1538 0032 FB68     	 ldr r3,[r7,#12]
 1539 0034 7A69     	 ldr r2,[r7,#20]
 1540 0036 C3F8C020 	 str r2,[r3,#192]
 553:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1541              	 .loc 2 553 0
 1542 003a 1C37     	 adds r7,r7,#28
 1543              	.LCFI131:
 1544              	 .cfi_def_cfa_offset 4
 1545 003c BD46     	 mov sp,r7
 1546              	.LCFI132:
 1547              	 .cfi_def_cfa_register 13
 1548              	 
 1549 003e 5DF8047B 	 ldr r7,[sp],#4
 1550              	.LCFI133:
 1551              	 .cfi_restore 7
 1552              	 .cfi_def_cfa_offset 0
 1553 0042 7047     	 bx lr
 1554              	 .cfi_endproc
 1555              	.LFE254:
 1557              	 .section .text.XMC_VADC_GROUP_SetSyncMaster,"ax",%progbits
 1558              	 .align 2
 1559              	 .global XMC_VADC_GROUP_SetSyncMaster
 1560              	 .thumb
 1561              	 .thumb_func
 1563              	XMC_VADC_GROUP_SetSyncMaster:
 1564              	.LFB255:
 554:../Libraries/XMCLib/src/xmc_vadc.c **** 
 555:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which programs a group as a master group during sync conversions */
 556:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr)
 557:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1565              	 .loc 2 557 0
 1566              	 .cfi_startproc
 1567              	 
 1568              	 
 1569              	 
 1570 0000 80B4     	 push {r7}
 1571              	.LCFI134:
 1572              	 .cfi_def_cfa_offset 4
 1573              	 .cfi_offset 7,-4
 1574 0002 85B0     	 sub sp,sp,#20
 1575              	.LCFI135:
 1576              	 .cfi_def_cfa_offset 24
 1577 0004 00AF     	 add r7,sp,#0
 1578              	.LCFI136:
 1579              	 .cfi_def_cfa_register 7
 1580 0006 7860     	 str r0,[r7,#4]
 558:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 559:../Libraries/XMCLib/src/xmc_vadc.c **** 
 560:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncMaster:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
 561:../Libraries/XMCLib/src/xmc_vadc.c **** 
 562:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr = group_ptr->SYNCTR;
 1581              	 .loc 2 562 0
 1582 0008 7B68     	 ldr r3,[r7,#4]
 1583 000a D3F8C030 	 ldr r3,[r3,#192]
 1584 000e FB60     	 str r3,[r7,#12]
 563:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 1585              	 .loc 2 563 0
 1586 0010 FB68     	 ldr r3,[r7,#12]
 1587 0012 23F00303 	 bic r3,r3,#3
 1588 0016 FB60     	 str r3,[r7,#12]
 564:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR = synctr;
 1589              	 .loc 2 564 0
 1590 0018 7B68     	 ldr r3,[r7,#4]
 1591 001a FA68     	 ldr r2,[r7,#12]
 1592 001c C3F8C020 	 str r2,[r3,#192]
 565:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1593              	 .loc 2 565 0
 1594 0020 1437     	 adds r7,r7,#20
 1595              	.LCFI137:
 1596              	 .cfi_def_cfa_offset 4
 1597 0022 BD46     	 mov sp,r7
 1598              	.LCFI138:
 1599              	 .cfi_def_cfa_register 13
 1600              	 
 1601 0024 5DF8047B 	 ldr r7,[sp],#4
 1602              	.LCFI139:
 1603              	 .cfi_restore 7
 1604              	 .cfi_def_cfa_offset 0
 1605 0028 7047     	 bx lr
 1606              	 .cfi_endproc
 1607              	.LFE255:
 1609 002a 00BF     	 .section .text.XMC_VADC_GROUP_CheckSlaveReadiness,"ax",%progbits
 1610              	 .align 2
 1611              	 .global XMC_VADC_GROUP_CheckSlaveReadiness
 1612              	 .thumb
 1613              	 .thumb_func
 1615              	XMC_VADC_GROUP_CheckSlaveReadiness:
 1616              	.LFB256:
 566:../Libraries/XMCLib/src/xmc_vadc.c **** 
 567:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable checking of readiness of slaves before a synchronous conversion request is issued 
 568:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
 569:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1617              	 .loc 2 569 0
 1618              	 .cfi_startproc
 1619              	 
 1620              	 
 1621              	 
 1622 0000 80B4     	 push {r7}
 1623              	.LCFI140:
 1624              	 .cfi_def_cfa_offset 4
 1625              	 .cfi_offset 7,-4
 1626 0002 85B0     	 sub sp,sp,#20
 1627              	.LCFI141:
 1628              	 .cfi_def_cfa_offset 24
 1629 0004 00AF     	 add r7,sp,#0
 1630              	.LCFI142:
 1631              	 .cfi_def_cfa_register 7
 1632 0006 7860     	 str r0,[r7,#4]
 1633 0008 3960     	 str r1,[r7]
 570:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i,master_grp_num;
 571:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
 572:../Libraries/XMCLib/src/xmc_vadc.c **** 
 573:../Libraries/XMCLib/src/xmc_vadc.c ****   master_grp_num =0;
 1634              	 .loc 2 573 0
 1635 000a 0023     	 movs r3,#0
 1636 000c BB60     	 str r3,[r7,#8]
 574:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 1637              	 .loc 2 574 0
 1638 000e 0023     	 movs r3,#0
 1639 0010 FB60     	 str r3,[r7,#12]
 1640 0012 0BE0     	 b .L52
 1641              	.L54:
 575:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 576:../Libraries/XMCLib/src/xmc_vadc.c ****     if(g_xmc_vadc_group_array[i] == group_ptr)
 1642              	 .loc 2 576 0
 1643 0014 134A     	 ldr r2,.L56
 1644 0016 FB68     	 ldr r3,[r7,#12]
 1645 0018 52F82320 	 ldr r2,[r2,r3,lsl#2]
 1646 001c 7B68     	 ldr r3,[r7,#4]
 1647 001e 9A42     	 cmp r2,r3
 1648 0020 01D1     	 bne .L53
 577:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 578:../Libraries/XMCLib/src/xmc_vadc.c ****       master_grp_num = i;
 1649              	 .loc 2 578 0
 1650 0022 FB68     	 ldr r3,[r7,#12]
 1651 0024 BB60     	 str r3,[r7,#8]
 1652              	.L53:
 574:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1653              	 .loc 2 574 0 discriminator 2
 1654 0026 FB68     	 ldr r3,[r7,#12]
 1655 0028 0133     	 adds r3,r3,#1
 1656 002a FB60     	 str r3,[r7,#12]
 1657              	.L52:
 574:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1658              	 .loc 2 574 0 is_stmt 0 discriminator 1
 1659 002c FB68     	 ldr r3,[r7,#12]
 1660 002e 032B     	 cmp r3,#3
 1661 0030 F0D9     	 bls .L54
 579:../Libraries/XMCLib/src/xmc_vadc.c ****     }
 580:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 581:../Libraries/XMCLib/src/xmc_vadc.c **** 
 582:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Slave group", (master_grp_num == slave_group
 583:../Libraries/XMCLib/src/xmc_vadc.c **** 
 584:../Libraries/XMCLib/src/xmc_vadc.c ****   if(slave_group < master_grp_num)
 1662              	 .loc 2 584 0 is_stmt 1
 1663 0032 3A68     	 ldr r2,[r7]
 1664 0034 BB68     	 ldr r3,[r7,#8]
 1665 0036 9A42     	 cmp r2,r3
 1666 0038 02D2     	 bcs .L55
 585:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 586:../Libraries/XMCLib/src/xmc_vadc.c ****     slave_group++;
 1667              	 .loc 2 586 0
 1668 003a 3B68     	 ldr r3,[r7]
 1669 003c 0133     	 adds r3,r3,#1
 1670 003e 3B60     	 str r3,[r7]
 1671              	.L55:
 587:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 588:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR |= (1U << (slave_group + XMC_VADC_SYNCTR_START_LOCATION));
 1672              	 .loc 2 588 0
 1673 0040 7B68     	 ldr r3,[r7,#4]
 1674 0042 D3F8C020 	 ldr r2,[r3,#192]
 1675 0046 3B68     	 ldr r3,[r7]
 1676 0048 0333     	 adds r3,r3,#3
 1677 004a 1946     	 mov r1,r3
 1678 004c 0123     	 movs r3,#1
 1679 004e 8B40     	 lsls r3,r3,r1
 1680 0050 1A43     	 orrs r2,r2,r3
 1681 0052 7B68     	 ldr r3,[r7,#4]
 1682 0054 C3F8C020 	 str r2,[r3,#192]
 589:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1683              	 .loc 2 589 0
 1684 0058 1437     	 adds r7,r7,#20
 1685              	.LCFI143:
 1686              	 .cfi_def_cfa_offset 4
 1687 005a BD46     	 mov sp,r7
 1688              	.LCFI144:
 1689              	 .cfi_def_cfa_register 13
 1690              	 
 1691 005c 5DF8047B 	 ldr r7,[sp],#4
 1692              	.LCFI145:
 1693              	 .cfi_restore 7
 1694              	 .cfi_def_cfa_offset 0
 1695 0060 7047     	 bx lr
 1696              	.L57:
 1697 0062 00BF     	 .align 2
 1698              	.L56:
 1699 0064 00000000 	 .word g_xmc_vadc_group_array
 1700              	 .cfi_endproc
 1701              	.LFE256:
 1703              	 .section .text.XMC_VADC_GROUP_IgnoreSlaveReadiness,"ax",%progbits
 1704              	 .align 2
 1705              	 .global XMC_VADC_GROUP_IgnoreSlaveReadiness
 1706              	 .thumb
 1707              	 .thumb_func
 1709              	XMC_VADC_GROUP_IgnoreSlaveReadiness:
 1710              	.LFB257:
 590:../Libraries/XMCLib/src/xmc_vadc.c **** 
 591:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable checking of readiness of slaves during synchronous conversions */
 592:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
 593:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1711              	 .loc 2 593 0
 1712              	 .cfi_startproc
 1713              	 
 1714              	 
 1715              	 
 1716 0000 80B4     	 push {r7}
 1717              	.LCFI146:
 1718              	 .cfi_def_cfa_offset 4
 1719              	 .cfi_offset 7,-4
 1720 0002 85B0     	 sub sp,sp,#20
 1721              	.LCFI147:
 1722              	 .cfi_def_cfa_offset 24
 1723 0004 00AF     	 add r7,sp,#0
 1724              	.LCFI148:
 1725              	 .cfi_def_cfa_register 7
 1726 0006 7860     	 str r0,[r7,#4]
 1727 0008 3960     	 str r1,[r7]
 594:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i,master_grp_num;
 595:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IgnoreSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
 596:../Libraries/XMCLib/src/xmc_vadc.c **** 
 597:../Libraries/XMCLib/src/xmc_vadc.c ****   master_grp_num =0;
 1728              	 .loc 2 597 0
 1729 000a 0023     	 movs r3,#0
 1730 000c BB60     	 str r3,[r7,#8]
 598:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 1731              	 .loc 2 598 0
 1732 000e 0023     	 movs r3,#0
 1733 0010 FB60     	 str r3,[r7,#12]
 1734 0012 0BE0     	 b .L59
 1735              	.L61:
 599:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 600:../Libraries/XMCLib/src/xmc_vadc.c **** 	if(g_xmc_vadc_group_array[i] == group_ptr)
 1736              	 .loc 2 600 0
 1737 0014 134A     	 ldr r2,.L63
 1738 0016 FB68     	 ldr r3,[r7,#12]
 1739 0018 52F82320 	 ldr r2,[r2,r3,lsl#2]
 1740 001c 7B68     	 ldr r3,[r7,#4]
 1741 001e 9A42     	 cmp r2,r3
 1742 0020 01D1     	 bne .L60
 601:../Libraries/XMCLib/src/xmc_vadc.c **** 	{
 602:../Libraries/XMCLib/src/xmc_vadc.c **** 	  master_grp_num = i;
 1743              	 .loc 2 602 0
 1744 0022 FB68     	 ldr r3,[r7,#12]
 1745 0024 BB60     	 str r3,[r7,#8]
 1746              	.L60:
 598:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1747              	 .loc 2 598 0 discriminator 2
 1748 0026 FB68     	 ldr r3,[r7,#12]
 1749 0028 0133     	 adds r3,r3,#1
 1750 002a FB60     	 str r3,[r7,#12]
 1751              	.L59:
 598:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 1752              	 .loc 2 598 0 is_stmt 0 discriminator 1
 1753 002c FB68     	 ldr r3,[r7,#12]
 1754 002e 032B     	 cmp r3,#3
 1755 0030 F0D9     	 bls .L61
 603:../Libraries/XMCLib/src/xmc_vadc.c **** 	}
 604:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 605:../Libraries/XMCLib/src/xmc_vadc.c **** 
 606:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IgnoreSlaveReadiness:Wrong Slave group", (master_grp_num == slave_grou
 607:../Libraries/XMCLib/src/xmc_vadc.c **** 
 608:../Libraries/XMCLib/src/xmc_vadc.c ****   if(slave_group < master_grp_num)
 1756              	 .loc 2 608 0 is_stmt 1
 1757 0032 3A68     	 ldr r2,[r7]
 1758 0034 BB68     	 ldr r3,[r7,#8]
 1759 0036 9A42     	 cmp r2,r3
 1760 0038 02D2     	 bcs .L62
 609:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 610:../Libraries/XMCLib/src/xmc_vadc.c **** 	slave_group++;
 1761              	 .loc 2 610 0
 1762 003a 3B68     	 ldr r3,[r7]
 1763 003c 0133     	 adds r3,r3,#1
 1764 003e 3B60     	 str r3,[r7]
 1765              	.L62:
 611:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 612:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR &= ~(1U << (slave_group + XMC_VADC_SYNCTR_START_LOCATION));
 1766              	 .loc 2 612 0
 1767 0040 7B68     	 ldr r3,[r7,#4]
 1768 0042 D3F8C020 	 ldr r2,[r3,#192]
 1769 0046 3B68     	 ldr r3,[r7]
 1770 0048 0333     	 adds r3,r3,#3
 1771 004a 1946     	 mov r1,r3
 1772 004c 0123     	 movs r3,#1
 1773 004e 8B40     	 lsls r3,r3,r1
 1774 0050 DB43     	 mvns r3,r3
 1775 0052 1A40     	 ands r2,r2,r3
 1776 0054 7B68     	 ldr r3,[r7,#4]
 1777 0056 C3F8C020 	 str r2,[r3,#192]
 613:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1778              	 .loc 2 613 0
 1779 005a 1437     	 adds r7,r7,#20
 1780              	.LCFI149:
 1781              	 .cfi_def_cfa_offset 4
 1782 005c BD46     	 mov sp,r7
 1783              	.LCFI150:
 1784              	 .cfi_def_cfa_register 13
 1785              	 
 1786 005e 5DF8047B 	 ldr r7,[sp],#4
 1787              	.LCFI151:
 1788              	 .cfi_restore 7
 1789              	 .cfi_def_cfa_offset 0
 1790 0062 7047     	 bx lr
 1791              	.L64:
 1792              	 .align 2
 1793              	.L63:
 1794 0064 00000000 	 .word g_xmc_vadc_group_array
 1795              	 .cfi_endproc
 1796              	.LFE257:
 1798              	 .section .text.XMC_VADC_GROUP_SetSyncSlaveReadySignal,"ax",%progbits
 1799              	 .align 2
 1800              	 .global XMC_VADC_GROUP_SetSyncSlaveReadySignal
 1801              	 .thumb
 1802              	 .thumb_func
 1804              	XMC_VADC_GROUP_SetSyncSlaveReadySignal:
 1805              	.LFB258:
 614:../Libraries/XMCLib/src/xmc_vadc.c **** 
 615:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure EVAL bit in the slave groups*/
 616:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncSlaveReadySignal(XMC_VADC_GROUP_t *const group_ptr,
 617:../Libraries/XMCLib/src/xmc_vadc.c ****                                             uint32_t eval_waiting_group,
 618:../Libraries/XMCLib/src/xmc_vadc.c ****                                             uint32_t eval_origin_group)
 619:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1806              	 .loc 2 619 0
 1807              	 .cfi_startproc
 1808              	 
 1809              	 
 1810              	 
 1811 0000 80B4     	 push {r7}
 1812              	.LCFI152:
 1813              	 .cfi_def_cfa_offset 4
 1814              	 .cfi_offset 7,-4
 1815 0002 85B0     	 sub sp,sp,#20
 1816              	.LCFI153:
 1817              	 .cfi_def_cfa_offset 24
 1818 0004 00AF     	 add r7,sp,#0
 1819              	.LCFI154:
 1820              	 .cfi_def_cfa_register 7
 1821 0006 F860     	 str r0,[r7,#12]
 1822 0008 B960     	 str r1,[r7,#8]
 1823 000a 7A60     	 str r2,[r7,#4]
 620:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlaveReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
 621:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlaveReadySignal:Wrong Group numbers", (eval_waiting_group == e
 622:../Libraries/XMCLib/src/xmc_vadc.c **** 
 623:../Libraries/XMCLib/src/xmc_vadc.c ****   if(eval_origin_group < eval_waiting_group)
 1824              	 .loc 2 623 0
 1825 000c 7A68     	 ldr r2,[r7,#4]
 1826 000e BB68     	 ldr r3,[r7,#8]
 1827 0010 9A42     	 cmp r2,r3
 1828 0012 02D2     	 bcs .L66
 624:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 625:../Libraries/XMCLib/src/xmc_vadc.c **** 	  eval_origin_group++;
 1829              	 .loc 2 625 0
 1830 0014 7B68     	 ldr r3,[r7,#4]
 1831 0016 0133     	 adds r3,r3,#1
 1832 0018 7B60     	 str r3,[r7,#4]
 1833              	.L66:
 626:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 627:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR |= (1U << (eval_origin_group + XMC_VADC_SYNCTR_START_LOCATION));
 1834              	 .loc 2 627 0
 1835 001a FB68     	 ldr r3,[r7,#12]
 1836 001c D3F8C020 	 ldr r2,[r3,#192]
 1837 0020 7B68     	 ldr r3,[r7,#4]
 1838 0022 0333     	 adds r3,r3,#3
 1839 0024 1946     	 mov r1,r3
 1840 0026 0123     	 movs r3,#1
 1841 0028 8B40     	 lsls r3,r3,r1
 1842 002a 1A43     	 orrs r2,r2,r3
 1843 002c FB68     	 ldr r3,[r7,#12]
 1844 002e C3F8C020 	 str r2,[r3,#192]
 628:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1845              	 .loc 2 628 0
 1846 0032 1437     	 adds r7,r7,#20
 1847              	.LCFI155:
 1848              	 .cfi_def_cfa_offset 4
 1849 0034 BD46     	 mov sp,r7
 1850              	.LCFI156:
 1851              	 .cfi_def_cfa_register 13
 1852              	 
 1853 0036 5DF8047B 	 ldr r7,[sp],#4
 1854              	.LCFI157:
 1855              	 .cfi_restore 7
 1856              	 .cfi_def_cfa_offset 0
 1857 003a 7047     	 bx lr
 1858              	 .cfi_endproc
 1859              	.LFE258:
 1861              	 .section .text.XMC_VADC_GROUP_EnableChannelSyncRequest,"ax",%progbits
 1862              	 .align 2
 1863              	 .global XMC_VADC_GROUP_EnableChannelSyncRequest
 1864              	 .thumb
 1865              	 .thumb_func
 1867              	XMC_VADC_GROUP_EnableChannelSyncRequest:
 1868              	.LFB259:
 629:../Libraries/XMCLib/src/xmc_vadc.c **** 
 630:../Libraries/XMCLib/src/xmc_vadc.c **** 
 631:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the synchronous conversion feature - Applicable only to kernel configured as maste
 632:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
 633:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1869              	 .loc 2 633 0
 1870              	 .cfi_startproc
 1871              	 
 1872              	 
 1873              	 
 1874 0000 80B4     	 push {r7}
 1875              	.LCFI158:
 1876              	 .cfi_def_cfa_offset 4
 1877              	 .cfi_offset 7,-4
 1878 0002 85B0     	 sub sp,sp,#20
 1879              	.LCFI159:
 1880              	 .cfi_def_cfa_offset 24
 1881 0004 00AF     	 add r7,sp,#0
 1882              	.LCFI160:
 1883              	 .cfi_def_cfa_register 7
 1884 0006 7860     	 str r0,[r7,#4]
 1885 0008 3960     	 str r1,[r7]
 634:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 635:../Libraries/XMCLib/src/xmc_vadc.c **** 
 636:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_EnableChannelSyncRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
 637:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_EnableChannelSyncRequest:Wrong Channel Number",
 638:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
 639:../Libraries/XMCLib/src/xmc_vadc.c **** 
 640:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr  = group_ptr->SYNCTR;
 1886              	 .loc 2 640 0
 1887 000a 7B68     	 ldr r3,[r7,#4]
 1888 000c D3F8C030 	 ldr r3,[r3,#192]
 1889 0010 FB60     	 str r3,[r7,#12]
 641:../Libraries/XMCLib/src/xmc_vadc.c **** 
 642:../Libraries/XMCLib/src/xmc_vadc.c ****   if (!(synctr &  (uint32_t)VADC_G_SYNCTR_STSEL_Msk))
 1890              	 .loc 2 642 0
 1891 0012 FB68     	 ldr r3,[r7,#12]
 1892 0014 03F00303 	 and r3,r3,#3
 1893 0018 002B     	 cmp r3,#0
 1894 001a 0BD1     	 bne .L67
 643:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 644:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->CHCTR[ch_num] |= (uint32_t)((uint32_t)1 << VADC_G_CHCTR_SYNC_Pos);
 1895              	 .loc 2 644 0
 1896 001c 7B68     	 ldr r3,[r7,#4]
 1897 001e 3A68     	 ldr r2,[r7]
 1898 0020 8032     	 adds r2,r2,#128
 1899 0022 53F82230 	 ldr r3,[r3,r2,lsl#2]
 1900 0026 43F48061 	 orr r1,r3,#1024
 1901 002a 7B68     	 ldr r3,[r7,#4]
 1902 002c 3A68     	 ldr r2,[r7]
 1903 002e 8032     	 adds r2,r2,#128
 1904 0030 43F82210 	 str r1,[r3,r2,lsl#2]
 1905              	.L67:
 645:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 646:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1906              	 .loc 2 646 0
 1907 0034 1437     	 adds r7,r7,#20
 1908              	.LCFI161:
 1909              	 .cfi_def_cfa_offset 4
 1910 0036 BD46     	 mov sp,r7
 1911              	.LCFI162:
 1912              	 .cfi_def_cfa_register 13
 1913              	 
 1914 0038 5DF8047B 	 ldr r7,[sp],#4
 1915              	.LCFI163:
 1916              	 .cfi_restore 7
 1917              	 .cfi_def_cfa_offset 0
 1918 003c 7047     	 bx lr
 1919              	 .cfi_endproc
 1920              	.LFE259:
 1922 003e 00BF     	 .section .text.XMC_VADC_GROUP_DisableChannelSyncRequest,"ax",%progbits
 1923              	 .align 2
 1924              	 .global XMC_VADC_GROUP_DisableChannelSyncRequest
 1925              	 .thumb
 1926              	 .thumb_func
 1928              	XMC_VADC_GROUP_DisableChannelSyncRequest:
 1929              	.LFB260:
 647:../Libraries/XMCLib/src/xmc_vadc.c **** 
 648:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable synchronous conversion feature */
 649:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
 650:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1930              	 .loc 2 650 0
 1931              	 .cfi_startproc
 1932              	 
 1933              	 
 1934              	 
 1935 0000 80B4     	 push {r7}
 1936              	.LCFI164:
 1937              	 .cfi_def_cfa_offset 4
 1938              	 .cfi_offset 7,-4
 1939 0002 85B0     	 sub sp,sp,#20
 1940              	.LCFI165:
 1941              	 .cfi_def_cfa_offset 24
 1942 0004 00AF     	 add r7,sp,#0
 1943              	.LCFI166:
 1944              	 .cfi_def_cfa_register 7
 1945 0006 7860     	 str r0,[r7,#4]
 1946 0008 3960     	 str r1,[r7]
 651:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    synctr;
 652:../Libraries/XMCLib/src/xmc_vadc.c **** 
 653:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_DisableChannelSyncRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
 654:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_DisableChannelSyncRequest:Wrong Channel Number",
 655:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
 656:../Libraries/XMCLib/src/xmc_vadc.c **** 
 657:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr  = group_ptr->SYNCTR;
 1947              	 .loc 2 657 0
 1948 000a 7B68     	 ldr r3,[r7,#4]
 1949 000c D3F8C030 	 ldr r3,[r3,#192]
 1950 0010 FB60     	 str r3,[r7,#12]
 658:../Libraries/XMCLib/src/xmc_vadc.c **** 
 659:../Libraries/XMCLib/src/xmc_vadc.c ****   if (synctr &  (uint32_t)VADC_G_SYNCTR_STSEL_Msk)
 1951              	 .loc 2 659 0
 1952 0012 FB68     	 ldr r3,[r7,#12]
 1953 0014 03F00303 	 and r3,r3,#3
 1954 0018 002B     	 cmp r3,#0
 1955 001a 0BD0     	 beq .L69
 660:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 661:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->CHCTR[ch_num] &= ~((uint32_t)VADC_G_CHCTR_SYNC_Msk);
 1956              	 .loc 2 661 0
 1957 001c 7B68     	 ldr r3,[r7,#4]
 1958 001e 3A68     	 ldr r2,[r7]
 1959 0020 8032     	 adds r2,r2,#128
 1960 0022 53F82230 	 ldr r3,[r3,r2,lsl#2]
 1961 0026 23F48061 	 bic r1,r3,#1024
 1962 002a 7B68     	 ldr r3,[r7,#4]
 1963 002c 3A68     	 ldr r2,[r7]
 1964 002e 8032     	 adds r2,r2,#128
 1965 0030 43F82210 	 str r1,[r3,r2,lsl#2]
 1966              	.L69:
 662:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 663:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1967              	 .loc 2 663 0
 1968 0034 1437     	 adds r7,r7,#20
 1969              	.LCFI167:
 1970              	 .cfi_def_cfa_offset 4
 1971 0036 BD46     	 mov sp,r7
 1972              	.LCFI168:
 1973              	 .cfi_def_cfa_register 13
 1974              	 
 1975 0038 5DF8047B 	 ldr r7,[sp],#4
 1976              	.LCFI169:
 1977              	 .cfi_restore 7
 1978              	 .cfi_def_cfa_offset 0
 1979 003c 7047     	 bx lr
 1980              	 .cfi_endproc
 1981              	.LFE260:
 1983 003e 00BF     	 .section .text.XMC_VADC_GROUP_IsConverterBusy,"ax",%progbits
 1984              	 .align 2
 1985              	 .global XMC_VADC_GROUP_IsConverterBusy
 1986              	 .thumb
 1987              	 .thumb_func
 1989              	XMC_VADC_GROUP_IsConverterBusy:
 1990              	.LFB261:
 664:../Libraries/XMCLib/src/xmc_vadc.c **** 
 665:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the converter state - Idle vs Busy */ 
 666:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr)
 667:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1991              	 .loc 2 667 0
 1992              	 .cfi_startproc
 1993              	 
 1994              	 
 1995              	 
 1996 0000 80B4     	 push {r7}
 1997              	.LCFI170:
 1998              	 .cfi_def_cfa_offset 4
 1999              	 .cfi_offset 7,-4
 2000 0002 85B0     	 sub sp,sp,#20
 2001              	.LCFI171:
 2002              	 .cfi_def_cfa_offset 24
 2003 0004 00AF     	 add r7,sp,#0
 2004              	.LCFI172:
 2005              	 .cfi_def_cfa_register 7
 2006 0006 7860     	 str r0,[r7,#4]
 668:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t      arbcfg;
 669:../Libraries/XMCLib/src/xmc_vadc.c **** 
 670:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsConverterBusy:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
 671:../Libraries/XMCLib/src/xmc_vadc.c **** 
 672:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg  = group_ptr->ARBCFG;
 2007              	 .loc 2 672 0
 2008 0008 7B68     	 ldr r3,[r7,#4]
 2009 000a D3F88030 	 ldr r3,[r3,#128]
 2010 000e FB60     	 str r3,[r7,#12]
 673:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg &= (uint32_t)VADC_G_ARBCFG_BUSY_Msk;
 2011              	 .loc 2 673 0
 2012 0010 FB68     	 ldr r3,[r7,#12]
 2013 0012 03F08043 	 and r3,r3,#1073741824
 2014 0016 FB60     	 str r3,[r7,#12]
 674:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg = arbcfg >> VADC_G_ARBCFG_BUSY_Pos;
 2015              	 .loc 2 674 0
 2016 0018 FB68     	 ldr r3,[r7,#12]
 2017 001a 9B0F     	 lsrs r3,r3,#30
 2018 001c FB60     	 str r3,[r7,#12]
 675:../Libraries/XMCLib/src/xmc_vadc.c **** 
 676:../Libraries/XMCLib/src/xmc_vadc.c ****   return( (XMC_VADC_GROUP_STATE_t)arbcfg);
 2019              	 .loc 2 676 0
 2020 001e FB68     	 ldr r3,[r7,#12]
 2021 0020 DBB2     	 uxtb r3,r3
 677:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2022              	 .loc 2 677 0
 2023 0022 1846     	 mov r0,r3
 2024 0024 1437     	 adds r7,r7,#20
 2025              	.LCFI173:
 2026              	 .cfi_def_cfa_offset 4
 2027 0026 BD46     	 mov sp,r7
 2028              	.LCFI174:
 2029              	 .cfi_def_cfa_register 13
 2030              	 
 2031 0028 5DF8047B 	 ldr r7,[sp],#4
 2032              	.LCFI175:
 2033              	 .cfi_restore 7
 2034              	 .cfi_def_cfa_offset 0
 2035 002c 7047     	 bx lr
 2036              	 .cfi_endproc
 2037              	.LFE261:
 2039 002e 00BF     	 .section .text.XMC_VADC_GROUP_SetBoundaries,"ax",%progbits
 2040              	 .align 2
 2041              	 .global XMC_VADC_GROUP_SetBoundaries
 2042              	 .thumb
 2043              	 .thumb_func
 2045              	XMC_VADC_GROUP_SetBoundaries:
 2046              	.LFB262:
 678:../Libraries/XMCLib/src/xmc_vadc.c **** 
 679:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set boundaries for conversion results */
 680:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, const uint32_t boundary0, cons
 681:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2047              	 .loc 2 681 0
 2048              	 .cfi_startproc
 2049              	 
 2050              	 
 2051              	 
 2052 0000 80B4     	 push {r7}
 2053              	.LCFI176:
 2054              	 .cfi_def_cfa_offset 4
 2055              	 .cfi_offset 7,-4
 2056 0002 87B0     	 sub sp,sp,#28
 2057              	.LCFI177:
 2058              	 .cfi_def_cfa_offset 32
 2059 0004 00AF     	 add r7,sp,#0
 2060              	.LCFI178:
 2061              	 .cfi_def_cfa_register 7
 2062 0006 F860     	 str r0,[r7,#12]
 2063 0008 B960     	 str r1,[r7,#8]
 2064 000a 7A60     	 str r2,[r7,#4]
 682:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t bound;
 683:../Libraries/XMCLib/src/xmc_vadc.c **** 
 684:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetBoundaries:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
 685:../Libraries/XMCLib/src/xmc_vadc.c **** 
 686:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 687:../Libraries/XMCLib/src/xmc_vadc.c ****   bound  = group_ptr->BOUND;
 2065              	 .loc 2 687 0
 2066 000c FB68     	 ldr r3,[r7,#12]
 2067 000e D3F8B830 	 ldr r3,[r3,#184]
 2068 0012 7B61     	 str r3,[r7,#20]
 688:../Libraries/XMCLib/src/xmc_vadc.c ****   bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 2069              	 .loc 2 688 0
 2070 0014 7B69     	 ldr r3,[r7,#20]
 2071 0016 23F47F63 	 bic r3,r3,#4080
 2072 001a 23F00F03 	 bic r3,r3,#15
 2073 001e 7B61     	 str r3,[r7,#20]
 689:../Libraries/XMCLib/src/xmc_vadc.c ****   bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY1_Msk);
 2074              	 .loc 2 689 0
 2075 0020 7B69     	 ldr r3,[r7,#20]
 2076 0022 23F07F63 	 bic r3,r3,#267386880
 2077 0026 23F47023 	 bic r3,r3,#983040
 2078 002a 7B61     	 str r3,[r7,#20]
 690:../Libraries/XMCLib/src/xmc_vadc.c ****   bound |= (uint32_t) ((uint32_t) boundary0 << VADC_G_BOUND_BOUNDARY0_Pos);
 2079              	 .loc 2 690 0
 2080 002c 7A69     	 ldr r2,[r7,#20]
 2081 002e BB68     	 ldr r3,[r7,#8]
 2082 0030 1343     	 orrs r3,r3,r2
 2083 0032 7B61     	 str r3,[r7,#20]
 691:../Libraries/XMCLib/src/xmc_vadc.c ****   bound |= (uint32_t) ((uint32_t) boundary1 << VADC_G_BOUND_BOUNDARY1_Pos);
 2084              	 .loc 2 691 0
 2085 0034 7B68     	 ldr r3,[r7,#4]
 2086 0036 1B04     	 lsls r3,r3,#16
 2087 0038 7A69     	 ldr r2,[r7,#20]
 2088 003a 1343     	 orrs r3,r3,r2
 2089 003c 7B61     	 str r3,[r7,#20]
 692:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = bound;
 2090              	 .loc 2 692 0
 2091 003e FB68     	 ldr r3,[r7,#12]
 2092 0040 7A69     	 ldr r2,[r7,#20]
 2093 0042 C3F8B820 	 str r2,[r3,#184]
 693:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2094              	 .loc 2 693 0
 2095 0046 1C37     	 adds r7,r7,#28
 2096              	.LCFI179:
 2097              	 .cfi_def_cfa_offset 4
 2098 0048 BD46     	 mov sp,r7
 2099              	.LCFI180:
 2100              	 .cfi_def_cfa_register 13
 2101              	 
 2102 004a 5DF8047B 	 ldr r7,[sp],#4
 2103              	.LCFI181:
 2104              	 .cfi_restore 7
 2105              	 .cfi_def_cfa_offset 0
 2106 004e 7047     	 bx lr
 2107              	 .cfi_endproc
 2108              	.LFE262:
 2110              	 .section .text.XMC_VADC_GROUP_SetIndividualBoundary,"ax",%progbits
 2111              	 .align 2
 2112              	 .global XMC_VADC_GROUP_SetIndividualBoundary
 2113              	 .thumb
 2114              	 .thumb_func
 2116              	XMC_VADC_GROUP_SetIndividualBoundary:
 2117              	.LFB263:
 694:../Libraries/XMCLib/src/xmc_vadc.c **** 
 695:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an individual boundary for conversion results */
 696:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
 697:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_CHANNEL_BOUNDARY_t selection,
 698:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const uint16_t boundary_value)
 699:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2118              	 .loc 2 699 0
 2119              	 .cfi_startproc
 2120              	 
 2121              	 
 2122              	 
 2123 0000 80B4     	 push {r7}
 2124              	.LCFI182:
 2125              	 .cfi_def_cfa_offset 4
 2126              	 .cfi_offset 7,-4
 2127 0002 85B0     	 sub sp,sp,#20
 2128              	.LCFI183:
 2129              	 .cfi_def_cfa_offset 24
 2130 0004 00AF     	 add r7,sp,#0
 2131              	.LCFI184:
 2132              	 .cfi_def_cfa_register 7
 2133 0006 7860     	 str r0,[r7,#4]
 2134 0008 0B46     	 mov r3,r1
 2135 000a FB70     	 strb r3,[r7,#3]
 2136 000c 1346     	 mov r3,r2
 2137 000e 3B80     	 strh r3,[r7]
 700:../Libraries/XMCLib/src/xmc_vadc.c **** 
 701:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t bound;
 702:../Libraries/XMCLib/src/xmc_vadc.c **** 
 703:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetIndividualBoundary:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
 704:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetIndividualBoundary:Wrong Boundary Selection",
 705:../Libraries/XMCLib/src/xmc_vadc.c ****                ((XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 == selection) ||
 706:../Libraries/XMCLib/src/xmc_vadc.c ****                 (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1 == selection)))
 707:../Libraries/XMCLib/src/xmc_vadc.c **** 
 708:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 709:../Libraries/XMCLib/src/xmc_vadc.c ****   bound  = group_ptr->BOUND;
 2138              	 .loc 2 709 0
 2139 0010 7B68     	 ldr r3,[r7,#4]
 2140 0012 D3F8B830 	 ldr r3,[r3,#184]
 2141 0016 FB60     	 str r3,[r7,#12]
 710:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 == selection)
 2142              	 .loc 2 710 0
 2143 0018 FB78     	 ldrb r3,[r7,#3]
 2144 001a 002B     	 cmp r3,#0
 2145 001c 0AD1     	 bne .L75
 711:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 712:../Libraries/XMCLib/src/xmc_vadc.c ****     bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 2146              	 .loc 2 712 0
 2147 001e FB68     	 ldr r3,[r7,#12]
 2148 0020 23F47F63 	 bic r3,r3,#4080
 2149 0024 23F00F03 	 bic r3,r3,#15
 2150 0028 FB60     	 str r3,[r7,#12]
 713:../Libraries/XMCLib/src/xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY0_Pos);
 2151              	 .loc 2 713 0
 2152 002a 3B88     	 ldrh r3,[r7]
 2153 002c FA68     	 ldr r2,[r7,#12]
 2154 002e 1343     	 orrs r3,r3,r2
 2155 0030 FB60     	 str r3,[r7,#12]
 2156 0032 0DE0     	 b .L76
 2157              	.L75:
 714:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 715:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1 == selection)
 2158              	 .loc 2 715 0
 2159 0034 FB78     	 ldrb r3,[r7,#3]
 2160 0036 012B     	 cmp r3,#1
 2161 0038 0AD1     	 bne .L76
 716:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 717:../Libraries/XMCLib/src/xmc_vadc.c ****     bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY1_Msk);
 2162              	 .loc 2 717 0
 2163 003a FB68     	 ldr r3,[r7,#12]
 2164 003c 23F07F63 	 bic r3,r3,#267386880
 2165 0040 23F47023 	 bic r3,r3,#983040
 2166 0044 FB60     	 str r3,[r7,#12]
 718:../Libraries/XMCLib/src/xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY1_Pos);
 2167              	 .loc 2 718 0
 2168 0046 3B88     	 ldrh r3,[r7]
 2169 0048 1B04     	 lsls r3,r3,#16
 2170 004a FA68     	 ldr r2,[r7,#12]
 2171 004c 1343     	 orrs r3,r3,r2
 2172 004e FB60     	 str r3,[r7,#12]
 2173              	.L76:
 719:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 720:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 721:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 722:../Libraries/XMCLib/src/xmc_vadc.c ****     /* For MISRA*/
 723:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 724:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = bound;
 2174              	 .loc 2 724 0
 2175 0050 7B68     	 ldr r3,[r7,#4]
 2176 0052 FA68     	 ldr r2,[r7,#12]
 2177 0054 C3F8B820 	 str r2,[r3,#184]
 725:../Libraries/XMCLib/src/xmc_vadc.c **** 
 726:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2178              	 .loc 2 726 0
 2179 0058 1437     	 adds r7,r7,#20
 2180              	.LCFI185:
 2181              	 .cfi_def_cfa_offset 4
 2182 005a BD46     	 mov sp,r7
 2183              	.LCFI186:
 2184              	 .cfi_def_cfa_register 13
 2185              	 
 2186 005c 5DF8047B 	 ldr r7,[sp],#4
 2187              	.LCFI187:
 2188              	 .cfi_restore 7
 2189              	 .cfi_def_cfa_offset 0
 2190 0060 7047     	 bx lr
 2191              	 .cfi_endproc
 2192              	.LFE263:
 2194 0062 00BF     	 .section .text.XMC_VADC_GROUP_TriggerServiceRequest,"ax",%progbits
 2195              	 .align 2
 2196              	 .global XMC_VADC_GROUP_TriggerServiceRequest
 2197              	 .thumb
 2198              	 .thumb_func
 2200              	XMC_VADC_GROUP_TriggerServiceRequest:
 2201              	.LFB264:
 727:../Libraries/XMCLib/src/xmc_vadc.c **** 
 728:../Libraries/XMCLib/src/xmc_vadc.c **** /* Manually assert service request (Interrupt) to NVIC */
 729:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr,
 730:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const uint32_t sr_num,
 731:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_IRQ_t type)
 732:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2202              	 .loc 2 732 0
 2203              	 .cfi_startproc
 2204              	 
 2205              	 
 2206              	 
 2207 0000 80B4     	 push {r7}
 2208              	.LCFI188:
 2209              	 .cfi_def_cfa_offset 4
 2210              	 .cfi_offset 7,-4
 2211 0002 87B0     	 sub sp,sp,#28
 2212              	.LCFI189:
 2213              	 .cfi_def_cfa_offset 32
 2214 0004 00AF     	 add r7,sp,#0
 2215              	.LCFI190:
 2216              	 .cfi_def_cfa_register 7
 2217 0006 F860     	 str r0,[r7,#12]
 2218 0008 B960     	 str r1,[r7,#8]
 2219 000a 1346     	 mov r3,r2
 2220 000c FB71     	 strb r3,[r7,#7]
 733:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sract;
 734:../Libraries/XMCLib/src/xmc_vadc.c **** 
 735:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
 736:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong SR number", (sr_num <= XMC_VADC_SR_SHARED_
 737:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong SR type", ((type)<= XMC_VADC_GROUP_IRQ_SHA
 738:../Libraries/XMCLib/src/xmc_vadc.c **** 
 739:../Libraries/XMCLib/src/xmc_vadc.c ****   sract = group_ptr->SRACT;
 2221              	 .loc 2 739 0
 2222 000e FB68     	 ldr r3,[r7,#12]
 2223 0010 D3F8C831 	 ldr r3,[r3,#456]
 2224 0014 7B61     	 str r3,[r7,#20]
 740:../Libraries/XMCLib/src/xmc_vadc.c **** 
 741:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_GROUP_IRQ_KERNEL == type)
 2225              	 .loc 2 741 0
 2226 0016 FB79     	 ldrb r3,[r7,#7]
 2227 0018 002B     	 cmp r3,#0
 2228 001a 07D1     	 bne .L78
 742:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 743:../Libraries/XMCLib/src/xmc_vadc.c ****     sract |= (uint32_t)((uint32_t)1 << sr_num);
 2229              	 .loc 2 743 0
 2230 001c BB68     	 ldr r3,[r7,#8]
 2231 001e 0122     	 movs r2,#1
 2232 0020 02FA03F3 	 lsl r3,r2,r3
 2233 0024 7A69     	 ldr r2,[r7,#20]
 2234 0026 1343     	 orrs r3,r3,r2
 2235 0028 7B61     	 str r3,[r7,#20]
 2236 002a 07E0     	 b .L79
 2237              	.L78:
 744:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 745:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 746:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 747:../Libraries/XMCLib/src/xmc_vadc.c ****     sract |= (uint32_t)((uint32_t)1 << (sr_num + (uint32_t)8));
 2238              	 .loc 2 747 0
 2239 002c BB68     	 ldr r3,[r7,#8]
 2240 002e 0833     	 adds r3,r3,#8
 2241 0030 1A46     	 mov r2,r3
 2242 0032 0123     	 movs r3,#1
 2243 0034 9340     	 lsls r3,r3,r2
 2244 0036 7A69     	 ldr r2,[r7,#20]
 2245 0038 1343     	 orrs r3,r3,r2
 2246 003a 7B61     	 str r3,[r7,#20]
 2247              	.L79:
 748:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 749:../Libraries/XMCLib/src/xmc_vadc.c **** 
 750:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SRACT = sract;
 2248              	 .loc 2 750 0
 2249 003c FB68     	 ldr r3,[r7,#12]
 2250 003e 7A69     	 ldr r2,[r7,#20]
 2251 0040 C3F8C821 	 str r2,[r3,#456]
 751:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2252              	 .loc 2 751 0
 2253 0044 1C37     	 adds r7,r7,#28
 2254              	.LCFI191:
 2255              	 .cfi_def_cfa_offset 4
 2256 0046 BD46     	 mov sp,r7
 2257              	.LCFI192:
 2258              	 .cfi_def_cfa_register 13
 2259              	 
 2260 0048 5DF8047B 	 ldr r7,[sp],#4
 2261              	.LCFI193:
 2262              	 .cfi_restore 7
 2263              	 .cfi_def_cfa_offset 0
 2264 004c 7047     	 bx lr
 2265              	 .cfi_endproc
 2266              	.LFE264:
 2268 004e 00BF     	 .section .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode,"ax",%progbits
 2269              	 .align 2
 2270              	 .global XMC_VADC_GROUP_SetBoundaryEventInterruptNode
 2271              	 .thumb
 2272              	 .thumb_func
 2274              	XMC_VADC_GROUP_SetBoundaryEventInterruptNode:
 2275              	.LFB265:
 752:../Libraries/XMCLib/src/xmc_vadc.c **** 
 753:../Libraries/XMCLib/src/xmc_vadc.c **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
 754:../Libraries/XMCLib/src/xmc_vadc.c **** 
 755:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the SR line for the Boundary flag node pointer*/
 756:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
 757:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                   const uint8_t boundary_flag_num,
 758:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                   const XMC_VADC_BOUNDARY_NODE_t sr
 759:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2276              	 .loc 2 759 0
 2277              	 .cfi_startproc
 2278              	 
 2279              	 
 2280              	 
 2281 0000 80B4     	 push {r7}
 2282              	.LCFI194:
 2283              	 .cfi_def_cfa_offset 4
 2284              	 .cfi_offset 7,-4
 2285 0002 85B0     	 sub sp,sp,#20
 2286              	.LCFI195:
 2287              	 .cfi_def_cfa_offset 24
 2288 0004 00AF     	 add r7,sp,#0
 2289              	.LCFI196:
 2290              	 .cfi_def_cfa_register 7
 2291 0006 7860     	 str r0,[r7,#4]
 2292 0008 0B46     	 mov r3,r1
 2293 000a FB70     	 strb r3,[r7,#3]
 2294 000c 1346     	 mov r3,r2
 2295 000e BB70     	 strb r3,[r7,#2]
 760:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t flag_pos;
 761:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetBoundaryEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GRO
 762:../Libraries/XMCLib/src/xmc_vadc.c **** 
 763:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the GxBFLNP */
 764:../Libraries/XMCLib/src/xmc_vadc.c ****   flag_pos = (uint32_t)boundary_flag_num << (uint32_t)2;
 2296              	 .loc 2 764 0
 2297 0010 FB78     	 ldrb r3,[r7,#3]
 2298 0012 9B00     	 lsls r3,r3,#2
 2299 0014 FB60     	 str r3,[r7,#12]
 765:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP &= ~((uint32_t)VADC_G_BFLNP_BFL0NP_Msk << flag_pos);
 2300              	 .loc 2 765 0
 2301 0016 7B68     	 ldr r3,[r7,#4]
 2302 0018 D3F8D420 	 ldr r2,[r3,#212]
 2303 001c FB68     	 ldr r3,[r7,#12]
 2304 001e 0F21     	 movs r1,#15
 2305 0020 01FA03F3 	 lsl r3,r1,r3
 2306 0024 DB43     	 mvns r3,r3
 2307 0026 1A40     	 ands r2,r2,r3
 2308 0028 7B68     	 ldr r3,[r7,#4]
 2309 002a C3F8D420 	 str r2,[r3,#212]
 766:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP |= (uint32_t)sr << flag_pos;
 2310              	 .loc 2 766 0
 2311 002e 7B68     	 ldr r3,[r7,#4]
 2312 0030 D3F8D420 	 ldr r2,[r3,#212]
 2313 0034 B978     	 ldrb r1,[r7,#2]
 2314 0036 FB68     	 ldr r3,[r7,#12]
 2315 0038 01FA03F3 	 lsl r3,r1,r3
 2316 003c 1A43     	 orrs r2,r2,r3
 2317 003e 7B68     	 ldr r3,[r7,#4]
 2318 0040 C3F8D420 	 str r2,[r3,#212]
 767:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2319              	 .loc 2 767 0
 2320 0044 1437     	 adds r7,r7,#20
 2321              	.LCFI197:
 2322              	 .cfi_def_cfa_offset 4
 2323 0046 BD46     	 mov sp,r7
 2324              	.LCFI198:
 2325              	 .cfi_def_cfa_register 13
 2326              	 
 2327 0048 5DF8047B 	 ldr r7,[sp],#4
 2328              	.LCFI199:
 2329              	 .cfi_restore 7
 2330              	 .cfi_def_cfa_offset 0
 2331 004c 7047     	 bx lr
 2332              	 .cfi_endproc
 2333              	.LFE265:
 2335 004e 00BF     	 .section .text.XMC_VADC_GROUP_ScanInit,"ax",%progbits
 2336              	 .align 2
 2337              	 .global XMC_VADC_GROUP_ScanInit
 2338              	 .thumb
 2339              	 .thumb_func
 2341              	XMC_VADC_GROUP_ScanInit:
 2342              	.LFB266:
 768:../Libraries/XMCLib/src/xmc_vadc.c **** 
 769:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 770:../Libraries/XMCLib/src/xmc_vadc.c **** 
 771:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 772:../Libraries/XMCLib/src/xmc_vadc.c **** 
 773:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 774:../Libraries/XMCLib/src/xmc_vadc.c **** 
 775:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to Initialize the Sample and hold features*/
 776:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONFI
 777:../Libraries/XMCLib/src/xmc_vadc.c **** {
 778:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_Init:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(voi
 779:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_Init:Wrong Index number",(config == (XMC_VADC_GLOBAL_SHS_CONFIG_t
 780:../Libraries/XMCLib/src/xmc_vadc.c **** 
 781:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Initialize the SHS Configuration register*/
 782:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->SHSCFG = (uint32_t)((uint32_t)config->shscfg | (uint32_t)SHS_SHSCFG_SCWC_Msk);
 783:../Libraries/XMCLib/src/xmc_vadc.c **** 
 784:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 785:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Select the Calibration order*/
 786:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALORD_Msk);
 787:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->CALCTR |=  (uint32_t) ((uint32_t)config->calibration_order << SHS_CALCTR_CALORD_Pos);
 788:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 789:../Libraries/XMCLib/src/xmc_vadc.c **** }
 790:../Libraries/XMCLib/src/xmc_vadc.c **** 
 791:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 792:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the accelerated mode of conversion */
 793:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROUP
 794:../Libraries/XMCLib/src/xmc_vadc.c **** {
 795:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong SHS Pointer",
 796:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 797:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC_
 798:../Libraries/XMCLib/src/xmc_vadc.c **** 
 799:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the converted to Accelerated mode from compatible mode*/
 800:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 801:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 802:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 |= (uint32_t)SHS_TIMCFG0_AT_Msk;
 803:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 804:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 805:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 806:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)SHS_TIMCFG1_AT_Msk;
 807:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 808:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 809:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 810:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 811:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 812:../Libraries/XMCLib/src/xmc_vadc.c **** }
 813:../Libraries/XMCLib/src/xmc_vadc.c **** 
 814:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable the accelerated mode of conversion */
 815:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROU
 816:../Libraries/XMCLib/src/xmc_vadc.c **** {
 817:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:Wrong SHS Pointer",
 818:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 819:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC
 820:../Libraries/XMCLib/src/xmc_vadc.c **** 
 821:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the converted to Accelerated mode from compatible mode*/
 822:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 823:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 824:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 &= ~(uint32_t)SHS_TIMCFG0_AT_Msk;
 825:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 826:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 827:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 828:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 &= ~(uint32_t)SHS_TIMCFG1_AT_Msk;
 829:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 830:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 831:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 832:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 833:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 834:../Libraries/XMCLib/src/xmc_vadc.c **** }
 835:../Libraries/XMCLib/src/xmc_vadc.c **** 
 836:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the Short sample time of the Sample and hold module*/
 837:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 838:../Libraries/XMCLib/src/xmc_vadc.c ****                                             XMC_VADC_GROUP_INDEX_t group_num,
 839:../Libraries/XMCLib/src/xmc_vadc.c ****                                             uint8_t sst_value)
 840:../Libraries/XMCLib/src/xmc_vadc.c **** {
 841:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong SHS Pointer",
 842:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 843:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong Index number",(group_num <= XMC_VADC_GRO
 844:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong SST value",(sst_value < 64U))
 845:../Libraries/XMCLib/src/xmc_vadc.c **** 
 846:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the short sample time for the Accelerated mode of operation*/
 847:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 848:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 849:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 &= ~((uint32_t)SHS_TIMCFG0_SST_Msk);
 850:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG0_SST_Pos );
 851:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 852:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 853:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 854:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 &= ~((uint32_t)SHS_TIMCFG1_SST_Msk);
 855:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG1_SST_Pos );
 856:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 857:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 858:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 859:../Libraries/XMCLib/src/xmc_vadc.c ****   /* for MISRA*/
 860:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 861:../Libraries/XMCLib/src/xmc_vadc.c **** }
 862:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 863:../Libraries/XMCLib/src/xmc_vadc.c **** 
 864:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the gain factor of the Sample and hold module*/
 865:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 866:../Libraries/XMCLib/src/xmc_vadc.c ****                                        uint8_t gain_value,
 867:../Libraries/XMCLib/src/xmc_vadc.c ****                                        XMC_VADC_GROUP_INDEX_t group_num,
 868:../Libraries/XMCLib/src/xmc_vadc.c ****                                        uint8_t ch_num)
 869:../Libraries/XMCLib/src/xmc_vadc.c **** {
 870:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ch_mask;
 871:../Libraries/XMCLib/src/xmc_vadc.c **** 
 872:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetGainFactor:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL_SH
 873:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetGainFactor:Wrong Index number",(group_num <= XMC_VADC_GROUP_IN
 874:../Libraries/XMCLib/src/xmc_vadc.c **** 
 875:../Libraries/XMCLib/src/xmc_vadc.c ****   /*Calculate location of channel bit-field*/
 876:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_mask = ((uint32_t)ch_num << (uint32_t)2);
 877:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 878:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 879:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR00 &= ~((uint32_t)SHS_GNCTR00_GAIN0_Msk << ch_mask) ;
 880:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR00 |=  ((uint32_t)gain_value << ch_mask);
 881:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 882:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 883:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 884:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 &= ~((uint32_t)SHS_GNCTR10_GAIN0_Msk << ch_mask);
 885:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 |=  ((uint32_t)gain_value << ch_mask);
 886:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 887:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 888:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 889:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 890:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 891:../Libraries/XMCLib/src/xmc_vadc.c **** }
 892:../Libraries/XMCLib/src/xmc_vadc.c **** 
 893:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 894:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the gain and offset calibration of the Sample and hold module*/
 895:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 896:../Libraries/XMCLib/src/xmc_vadc.c ****                                                          XMC_VADC_GROUP_INDEX_t group_num)
 897:../Libraries/XMCLib/src/xmc_vadc.c **** {
 898:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:Wrong SHS Pointer",
 899:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 900:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:Wrong group selected",
 901:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num <= (uint32_t)XMC_VADC_GROUP_INDEX_1))
 902:../Libraries/XMCLib/src/xmc_vadc.c **** 
 903:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable gain and offset calibration*/
 904:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 905:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 906:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 &= ~((uint32_t)SHS_CALOC0_DISCAL_Msk);
 907:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 908:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 909:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 910:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 &= ~((uint32_t)SHS_CALOC1_DISCAL_Msk);
 911:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 912:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 913:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 914:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 915:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 916:../Libraries/XMCLib/src/xmc_vadc.c **** }
 917:../Libraries/XMCLib/src/xmc_vadc.c **** 
 918:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the gain and offset calibration of the Sample and hold module*/
 919:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 920:../Libraries/XMCLib/src/xmc_vadc.c ****                                                           XMC_VADC_GROUP_INDEX_t group_num)
 921:../Libraries/XMCLib/src/xmc_vadc.c **** {
 922:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:Wrong SHS Pointer",
 923:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 924:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:Wrong group selected",
 925:../Libraries/XMCLib/src/xmc_vadc.c ****             (group_num <= (uint32_t)XMC_VADC_GROUP_INDEX_1))
 926:../Libraries/XMCLib/src/xmc_vadc.c **** 
 927:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 928:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 929:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 |= (uint32_t)SHS_CALOC0_DISCAL_Msk;
 930:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 931:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 932:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 933:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 |= (uint32_t)SHS_CALOC1_DISCAL_Msk;
 934:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 935:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 936:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 937:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 938:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 939:../Libraries/XMCLib/src/xmc_vadc.c **** }
 940:../Libraries/XMCLib/src/xmc_vadc.c **** 
 941:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to get the offset calibration value of the Sample and hold module*/
 942:../Libraries/XMCLib/src/xmc_vadc.c **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 943:../Libraries/XMCLib/src/xmc_vadc.c ****                                                       XMC_VADC_GROUP_INDEX_t group_num,
 944:../Libraries/XMCLib/src/xmc_vadc.c ****                                                       XMC_VADC_SHS_GAIN_LEVEL_t gain_level)
 945:../Libraries/XMCLib/src/xmc_vadc.c **** {
 946:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t calibration_value;
 947:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong SHS Pointer",
 948:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 949:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong Group number selected",
 950:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
 951:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong gain level selected",
 952:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_0)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_1)||
 953:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_2)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_3))
 954:../Libraries/XMCLib/src/xmc_vadc.c **** 
 955:../Libraries/XMCLib/src/xmc_vadc.c ****   calibration_value = 0U;
 956:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 957:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 958:../Libraries/XMCLib/src/xmc_vadc.c ****     calibration_value = (shs_ptr->CALOC0 >> (uint32_t)gain_level) & (uint32_t)SHS_CALOC0_CALOFFVAL0
 959:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 960:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 961:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 962:../Libraries/XMCLib/src/xmc_vadc.c ****     calibration_value = (shs_ptr->CALOC1 >> (uint32_t)gain_level) & (uint32_t)SHS_CALOC1_CALOFFVAL0
 963:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 964:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 965:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 966:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 967:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 968:../Libraries/XMCLib/src/xmc_vadc.c ****   return ((uint8_t)calibration_value);
 969:../Libraries/XMCLib/src/xmc_vadc.c **** }
 970:../Libraries/XMCLib/src/xmc_vadc.c **** 
 971:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the offset calibration value of the Sample and hold module*/
 972:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 973:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    XMC_VADC_GROUP_INDEX_t group_num,
 974:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
 975:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    uint8_t offset_calibration_value)
 976:../Libraries/XMCLib/src/xmc_vadc.c **** {
 977:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong SHS Pointer",
 978:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 979:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong Group number selected",
 980:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
 981:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong gain level selected",
 982:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_0)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_1)||
 983:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_2)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_3))
 984:../Libraries/XMCLib/src/xmc_vadc.c **** 
 985:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 986:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 987:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 = (shs_ptr->CALOC0  & ~((uint32_t)SHS_CALOC0_CALOFFVAL0_Msk << (uint32_t)gain_l
 988:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC0_OFFWC_Msk;
 989:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 |=  ((uint32_t)offset_calibration_value << (uint32_t)gain_level) | (uint32_t)SH
 990:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 991:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 992:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 993:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 = (shs_ptr->CALOC1 & ~((uint32_t)SHS_CALOC1_CALOFFVAL0_Msk << (uint32_t)gain_le
 994:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC1_OFFWC_Msk;
 995:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 |=  ((uint32_t)offset_calibration_value << (uint32_t)gain_level) | (uint32_t)SH
 996:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 997:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 998:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 999:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
1000:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1001:../Libraries/XMCLib/src/xmc_vadc.c **** }
1002:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1003:../Libraries/XMCLib/src/xmc_vadc.c **** 
1004:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the values of sigma delta loop of the Sample and hold module*/
1005:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1006:../Libraries/XMCLib/src/xmc_vadc.c ****                                            XMC_VADC_GROUP_INDEX_t group_num,
1007:../Libraries/XMCLib/src/xmc_vadc.c ****                                            XMC_VADC_SHS_LOOP_CH_t loop_select,
1008:../Libraries/XMCLib/src/xmc_vadc.c ****                                            uint8_t ch_num)
1009:../Libraries/XMCLib/src/xmc_vadc.c **** {
1010:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong SHS Pointer",
1011:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1012:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Group number selected",
1013:../Libraries/XMCLib/src/xmc_vadc.c ****                (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
1014:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Delta sigma loop selected",
1015:../Libraries/XMCLib/src/xmc_vadc.c ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
1016:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Channel Number",
1017:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1018:../Libraries/XMCLib/src/xmc_vadc.c **** 
1019:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->LOOP &= ~(((uint32_t)SHS_LOOP_LPCH0_Msk | (uint32_t)SHS_LOOP_LPSH0_Msk | (uint32_t)SHS_L
1020:../Libraries/XMCLib/src/xmc_vadc.c ****                      << (uint32_t)loop_select);
1021:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->LOOP |= ((uint32_t)ch_num | ((uint32_t)group_num << (uint32_t)SHS_LOOP_LPSH0_Pos)) << (u
1022:../Libraries/XMCLib/src/xmc_vadc.c **** 
1023:../Libraries/XMCLib/src/xmc_vadc.c **** }
1024:../Libraries/XMCLib/src/xmc_vadc.c **** 
1025:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1026:../Libraries/XMCLib/src/xmc_vadc.c **** 
1027:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)   
1028:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize the group scan hardware of a kernel */
1029:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
1030:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2343              	 .loc 2 1030 0
 2344              	 .cfi_startproc
 2345              	 
 2346              	 
 2347 0000 80B5     	 push {r7,lr}
 2348              	.LCFI200:
 2349              	 .cfi_def_cfa_offset 8
 2350              	 .cfi_offset 7,-8
 2351              	 .cfi_offset 14,-4
 2352 0002 84B0     	 sub sp,sp,#16
 2353              	.LCFI201:
 2354              	 .cfi_def_cfa_offset 24
 2355 0004 00AF     	 add r7,sp,#0
 2356              	.LCFI202:
 2357              	 .cfi_def_cfa_register 7
 2358 0006 7860     	 str r0,[r7,#4]
 2359 0008 3960     	 str r1,[r7]
1031:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t      reg;
1032:../Libraries/XMCLib/src/xmc_vadc.c **** 
1033:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1034:../Libraries/XMCLib/src/xmc_vadc.c **** 
1035:../Libraries/XMCLib/src/xmc_vadc.c ****   /* All configurations have to be performed with the arbitration slot disabled */
1036:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 2360              	 .loc 2 1036 0
 2361 000a 7868     	 ldr r0,[r7,#4]
 2362 000c FFF7FEFF 	 bl XMC_VADC_GROUP_ScanDisableArbitrationSlot
1037:../Libraries/XMCLib/src/xmc_vadc.c ****   
1038:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Read in the existing contents of arbitration priority register */
1039:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = group_ptr->ARBPR;
 2363              	 .loc 2 1039 0
 2364 0010 7B68     	 ldr r3,[r7,#4]
 2365 0012 D3F88430 	 ldr r3,[r3,#132]
 2366 0016 FB60     	 str r3,[r7,#12]
1040:../Libraries/XMCLib/src/xmc_vadc.c **** 
1041:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the priority of the request source */
1042:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~(uint32_t)VADC_G_ARBPR_PRIO1_Msk;
 2367              	 .loc 2 1042 0
 2368 0018 FB68     	 ldr r3,[r7,#12]
 2369 001a 23F03003 	 bic r3,r3,#48
 2370 001e FB60     	 str r3,[r7,#12]
1043:../Libraries/XMCLib/src/xmc_vadc.c ****   reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO1_Pos);
 2371              	 .loc 2 1043 0
 2372 0020 3B68     	 ldr r3,[r7]
 2373 0022 1B78     	 ldrb r3,[r3]
 2374 0024 C3F38103 	 ubfx r3,r3,#2,#2
 2375 0028 DBB2     	 uxtb r3,r3
 2376 002a 1B01     	 lsls r3,r3,#4
 2377 002c FA68     	 ldr r2,[r7,#12]
 2378 002e 1343     	 orrs r3,r3,r2
 2379 0030 FB60     	 str r3,[r7,#12]
1044:../Libraries/XMCLib/src/xmc_vadc.c ****   
1045:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the start mode */
1046:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 2380              	 .loc 2 1046 0
 2381 0032 3B68     	 ldr r3,[r7]
 2382 0034 1B78     	 ldrb r3,[r3]
 2383 0036 03F00303 	 and r3,r3,#3
 2384 003a DBB2     	 uxtb r3,r3
 2385 003c 002B     	 cmp r3,#0
 2386 003e 03D0     	 beq .L82
1047:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1048:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)(VADC_G_ARBPR_CSM1_Msk);
 2387              	 .loc 2 1048 0
 2388 0040 FB68     	 ldr r3,[r7,#12]
 2389 0042 43F08003 	 orr r3,r3,#128
 2390 0046 FB60     	 str r3,[r7,#12]
 2391              	.L82:
1049:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1050:../Libraries/XMCLib/src/xmc_vadc.c **** 
1051:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR = reg;
 2392              	 .loc 2 1051 0
 2393 0048 7B68     	 ldr r3,[r7,#4]
 2394 004a FA68     	 ldr r2,[r7,#12]
 2395 004c C3F88420 	 str r2,[r3,#132]
1052:../Libraries/XMCLib/src/xmc_vadc.c **** 
1053:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL = (uint32_t)(config->asctrl |(VADC_G_ASCTRL_XTWC_Msk) |(VADC_G_ASCTRL_GTWC_Msk)
 2396              	 .loc 2 1053 0
 2397 0050 3B68     	 ldr r3,[r7]
 2398 0052 5B68     	 ldr r3,[r3,#4]
 2399 0054 43F08023 	 orr r3,r3,#-2147450880
 2400 0058 43F40003 	 orr r3,r3,#8388608
 2401 005c 7A68     	 ldr r2,[r7,#4]
 2402 005e C2F82031 	 str r3,[r2,#288]
1054:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  (VADC_G_ASCTRL_TMWC_Msk));
1055:../Libraries/XMCLib/src/xmc_vadc.c **** 
1056:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR  = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VA
 2403              	 .loc 2 1056 0
 2404 0062 3B68     	 ldr r3,[r7]
 2405 0064 9B68     	 ldr r3,[r3,#8]
 2406 0066 43F00102 	 orr r2,r3,#1
 2407 006a 7B68     	 ldr r3,[r7,#4]
 2408 006c C3F82421 	 str r2,[r3,#292]
1057:../Libraries/XMCLib/src/xmc_vadc.c ****   
1058:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 2409              	 .loc 2 1058 0
 2410 0070 3B68     	 ldr r3,[r7]
 2411 0072 1B78     	 ldrb r3,[r3]
 2412 0074 03F00303 	 and r3,r3,#3
 2413 0078 DBB2     	 uxtb r3,r3
 2414 007a 022B     	 cmp r3,#2
 2415 007c 07D1     	 bne .L83
1059:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1060:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_RPTDIS_Msk;
 2416              	 .loc 2 1060 0
 2417 007e 7B68     	 ldr r3,[r7,#4]
 2418 0080 D3F82431 	 ldr r3,[r3,#292]
 2419 0084 43F48032 	 orr r2,r3,#65536
 2420 0088 7B68     	 ldr r3,[r7,#4]
 2421 008a C3F82421 	 str r2,[r3,#292]
 2422              	.L83:
1061:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1062:../Libraries/XMCLib/src/xmc_vadc.c ****   
1063:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable arbitration slot now */
1064:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanEnableArbitrationSlot(group_ptr);
 2423              	 .loc 2 1064 0
 2424 008e 7868     	 ldr r0,[r7,#4]
 2425 0090 FFF7FEFF 	 bl XMC_VADC_GROUP_ScanEnableArbitrationSlot
1065:../Libraries/XMCLib/src/xmc_vadc.c ****   
1066:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2426              	 .loc 2 1066 0
 2427 0094 1037     	 adds r7,r7,#16
 2428              	.LCFI203:
 2429              	 .cfi_def_cfa_offset 8
 2430 0096 BD46     	 mov sp,r7
 2431              	.LCFI204:
 2432              	 .cfi_def_cfa_register 13
 2433              	 
 2434 0098 80BD     	 pop {r7,pc}
 2435              	 .cfi_endproc
 2436              	.LFE266:
 2438 009a 00BF     	 .section .text.XMC_VADC_GROUP_ScanSelectTrigger,"ax",%progbits
 2439              	 .align 2
 2440              	 .global XMC_VADC_GROUP_ScanSelectTrigger
 2441              	 .thumb
 2442              	 .thumb_func
 2444              	XMC_VADC_GROUP_ScanSelectTrigger:
 2445              	.LFB267:
1067:../Libraries/XMCLib/src/xmc_vadc.c **** 
1068:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger input for Group Scan request source */
1069:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
1070:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2446              	 .loc 2 1070 0
 2447              	 .cfi_startproc
 2448              	 
 2449              	 
 2450              	 
 2451 0000 80B4     	 push {r7}
 2452              	.LCFI205:
 2453              	 .cfi_def_cfa_offset 4
 2454              	 .cfi_offset 7,-4
 2455 0002 85B0     	 sub sp,sp,#20
 2456              	.LCFI206:
 2457              	 .cfi_def_cfa_offset 24
 2458 0004 00AF     	 add r7,sp,#0
 2459              	.LCFI207:
 2460              	 .cfi_def_cfa_register 7
 2461 0006 7860     	 str r0,[r7,#4]
 2462 0008 0B46     	 mov r3,r1
 2463 000a FB70     	 strb r3,[r7,#3]
1071:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1072:../Libraries/XMCLib/src/xmc_vadc.c **** 
1073:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1074:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTrigger:Wrong Trigger Port", ((trigger_input)< XMC_VADC_NUM_
1075:../Libraries/XMCLib/src/xmc_vadc.c **** 
1076:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 2464              	 .loc 2 1076 0
 2465 000c 7B68     	 ldr r3,[r7,#4]
 2466 000e D3F82031 	 ldr r3,[r3,#288]
 2467 0012 FB60     	 str r3,[r7,#12]
1077:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
 2468              	 .loc 2 1077 0
 2469 0014 FB68     	 ldr r3,[r7,#12]
 2470 0016 43F40043 	 orr r3,r3,#32768
 2471 001a FB60     	 str r3,[r7,#12]
1078:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_XTSEL_Msk);
 2472              	 .loc 2 1078 0
 2473 001c FB68     	 ldr r3,[r7,#12]
 2474 001e 23F47063 	 bic r3,r3,#3840
 2475 0022 FB60     	 str r3,[r7,#12]
1079:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_input << VADC_G_ASCTRL_XTSEL_Pos);
 2476              	 .loc 2 1079 0
 2477 0024 FB78     	 ldrb r3,[r7,#3]
 2478 0026 1B02     	 lsls r3,r3,#8
 2479 0028 FA68     	 ldr r2,[r7,#12]
 2480 002a 1343     	 orrs r3,r3,r2
 2481 002c FB60     	 str r3,[r7,#12]
1080:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 2482              	 .loc 2 1080 0
 2483 002e 7B68     	 ldr r3,[r7,#4]
 2484 0030 FA68     	 ldr r2,[r7,#12]
 2485 0032 C3F82021 	 str r2,[r3,#288]
1081:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2486              	 .loc 2 1081 0
 2487 0036 1437     	 adds r7,r7,#20
 2488              	.LCFI208:
 2489              	 .cfi_def_cfa_offset 4
 2490 0038 BD46     	 mov sp,r7
 2491              	.LCFI209:
 2492              	 .cfi_def_cfa_register 13
 2493              	 
 2494 003a 5DF8047B 	 ldr r7,[sp],#4
 2495              	.LCFI210:
 2496              	 .cfi_restore 7
 2497              	 .cfi_def_cfa_offset 0
 2498 003e 7047     	 bx lr
 2499              	 .cfi_endproc
 2500              	.LFE267:
 2502              	 .section .text.XMC_VADC_GROUP_ScanSelectTriggerEdge,"ax",%progbits
 2503              	 .align 2
 2504              	 .global XMC_VADC_GROUP_ScanSelectTriggerEdge
 2505              	 .thumb
 2506              	 .thumb_func
 2508              	XMC_VADC_GROUP_ScanSelectTriggerEdge:
 2509              	.LFB268:
1082:../Libraries/XMCLib/src/xmc_vadc.c **** 
1083:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1084:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
1085:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2510              	 .loc 2 1085 0
 2511              	 .cfi_startproc
 2512              	 
 2513              	 
 2514              	 
 2515 0000 80B4     	 push {r7}
 2516              	.LCFI211:
 2517              	 .cfi_def_cfa_offset 4
 2518              	 .cfi_offset 7,-4
 2519 0002 85B0     	 sub sp,sp,#20
 2520              	.LCFI212:
 2521              	 .cfi_def_cfa_offset 24
 2522 0004 00AF     	 add r7,sp,#0
 2523              	.LCFI213:
 2524              	 .cfi_def_cfa_register 7
 2525 0006 7860     	 str r0,[r7,#4]
 2526 0008 0B46     	 mov r3,r1
 2527 000a FB70     	 strb r3,[r7,#3]
1086:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1087:../Libraries/XMCLib/src/xmc_vadc.c **** 
1088:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTriggerEdge:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
1089:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTriggerEdge:Wrong Trigger Port", ((trigger_edge)<= XMC_VADC_
1090:../Libraries/XMCLib/src/xmc_vadc.c **** 
1091:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 2528              	 .loc 2 1091 0
 2529 000c 7B68     	 ldr r3,[r7,#4]
 2530 000e D3F82031 	 ldr r3,[r3,#288]
 2531 0012 FB60     	 str r3,[r7,#12]
1092:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
 2532              	 .loc 2 1092 0
 2533 0014 FB68     	 ldr r3,[r7,#12]
 2534 0016 43F40043 	 orr r3,r3,#32768
 2535 001a FB60     	 str r3,[r7,#12]
1093:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_XTMODE_Msk);
 2536              	 .loc 2 1093 0
 2537 001c FB68     	 ldr r3,[r7,#12]
 2538 001e 23F4C043 	 bic r3,r3,#24576
 2539 0022 FB60     	 str r3,[r7,#12]
1094:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_G_ASCTRL_XTMODE_Pos);
 2540              	 .loc 2 1094 0
 2541 0024 FB78     	 ldrb r3,[r7,#3]
 2542 0026 5B03     	 lsls r3,r3,#13
 2543 0028 FA68     	 ldr r2,[r7,#12]
 2544 002a 1343     	 orrs r3,r3,r2
 2545 002c FB60     	 str r3,[r7,#12]
1095:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 2546              	 .loc 2 1095 0
 2547 002e 7B68     	 ldr r3,[r7,#4]
 2548 0030 FA68     	 ldr r2,[r7,#12]
 2549 0032 C3F82021 	 str r2,[r3,#288]
1096:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2550              	 .loc 2 1096 0
 2551 0036 1437     	 adds r7,r7,#20
 2552              	.LCFI214:
 2553              	 .cfi_def_cfa_offset 4
 2554 0038 BD46     	 mov sp,r7
 2555              	.LCFI215:
 2556              	 .cfi_def_cfa_register 13
 2557              	 
 2558 003a 5DF8047B 	 ldr r7,[sp],#4
 2559              	.LCFI216:
 2560              	 .cfi_restore 7
 2561              	 .cfi_def_cfa_offset 0
 2562 003e 7047     	 bx lr
 2563              	 .cfi_endproc
 2564              	.LFE268:
 2566              	 .section .text.XMC_VADC_GROUP_ScanSelectGating,"ax",%progbits
 2567              	 .align 2
 2568              	 .global XMC_VADC_GROUP_ScanSelectGating
 2569              	 .thumb
 2570              	 .thumb_func
 2572              	XMC_VADC_GROUP_ScanSelectGating:
 2573              	.LFB269:
1097:../Libraries/XMCLib/src/xmc_vadc.c **** 
1098:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger gating input for Group Scan request source */
1099:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
1100:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2574              	 .loc 2 1100 0
 2575              	 .cfi_startproc
 2576              	 
 2577              	 
 2578              	 
 2579 0000 80B4     	 push {r7}
 2580              	.LCFI217:
 2581              	 .cfi_def_cfa_offset 4
 2582              	 .cfi_offset 7,-4
 2583 0002 85B0     	 sub sp,sp,#20
 2584              	.LCFI218:
 2585              	 .cfi_def_cfa_offset 24
 2586 0004 00AF     	 add r7,sp,#0
 2587              	.LCFI219:
 2588              	 .cfi_def_cfa_register 7
 2589 0006 7860     	 str r0,[r7,#4]
 2590 0008 0B46     	 mov r3,r1
 2591 000a FB70     	 strb r3,[r7,#3]
1101:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1102:../Libraries/XMCLib/src/xmc_vadc.c **** 
1103:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectGating:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
1104:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectGating:Wrong Gating Port", ((gating_input)< XMC_VADC_NUM_POR
1105:../Libraries/XMCLib/src/xmc_vadc.c **** 
1106:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 2592              	 .loc 2 1106 0
 2593 000c 7B68     	 ldr r3,[r7,#4]
 2594 000e D3F82031 	 ldr r3,[r3,#288]
 2595 0012 FB60     	 str r3,[r7,#12]
1107:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)VADC_G_ASCTRL_GTWC_Msk;
 2596              	 .loc 2 1107 0
 2597 0014 FB68     	 ldr r3,[r7,#12]
 2598 0016 43F40003 	 orr r3,r3,#8388608
 2599 001a FB60     	 str r3,[r7,#12]
1108:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_GTSEL_Msk);
 2600              	 .loc 2 1108 0
 2601 001c FB68     	 ldr r3,[r7,#12]
 2602 001e 23F47023 	 bic r3,r3,#983040
 2603 0022 FB60     	 str r3,[r7,#12]
1109:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)gating_input << VADC_G_ASCTRL_GTSEL_Pos);
 2604              	 .loc 2 1109 0
 2605 0024 FB78     	 ldrb r3,[r7,#3]
 2606 0026 1B04     	 lsls r3,r3,#16
 2607 0028 FA68     	 ldr r2,[r7,#12]
 2608 002a 1343     	 orrs r3,r3,r2
 2609 002c FB60     	 str r3,[r7,#12]
1110:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 2610              	 .loc 2 1110 0
 2611 002e 7B68     	 ldr r3,[r7,#4]
 2612 0030 FA68     	 ldr r2,[r7,#12]
 2613 0032 C3F82021 	 str r2,[r3,#288]
1111:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2614              	 .loc 2 1111 0
 2615 0036 1437     	 adds r7,r7,#20
 2616              	.LCFI220:
 2617              	 .cfi_def_cfa_offset 4
 2618 0038 BD46     	 mov sp,r7
 2619              	.LCFI221:
 2620              	 .cfi_def_cfa_register 13
 2621              	 
 2622 003a 5DF8047B 	 ldr r7,[sp],#4
 2623              	.LCFI222:
 2624              	 .cfi_restore 7
 2625              	 .cfi_def_cfa_offset 0
 2626 003e 7047     	 bx lr
 2627              	 .cfi_endproc
 2628              	.LFE269:
 2630              	 .section .text.XMC_VADC_GROUP_ScanSequenceAbort,"ax",%progbits
 2631              	 .align 2
 2632              	 .global XMC_VADC_GROUP_ScanSequenceAbort
 2633              	 .thumb
 2634              	 .thumb_func
 2636              	XMC_VADC_GROUP_ScanSequenceAbort:
 2637              	.LFB270:
1112:../Libraries/XMCLib/src/xmc_vadc.c **** 
1113:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to stop an ongoing conversion of a sequence */
1114:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr)
1115:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2638              	 .loc 2 1115 0
 2639              	 .cfi_startproc
 2640              	 
 2641              	 
 2642 0000 80B5     	 push {r7,lr}
 2643              	.LCFI223:
 2644              	 .cfi_def_cfa_offset 8
 2645              	 .cfi_offset 7,-8
 2646              	 .cfi_offset 14,-4
 2647 0002 84B0     	 sub sp,sp,#16
 2648              	.LCFI224:
 2649              	 .cfi_def_cfa_offset 24
 2650 0004 00AF     	 add r7,sp,#0
 2651              	.LCFI225:
 2652              	 .cfi_def_cfa_register 7
 2653 0006 7860     	 str r0,[r7,#4]
1116:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t asctrl;
1117:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1118:../Libraries/XMCLib/src/xmc_vadc.c **** 
1119:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSequenceAbort:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1120:../Libraries/XMCLib/src/xmc_vadc.c **** 
1121:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable trigger and gating before abort*/
1122:../Libraries/XMCLib/src/xmc_vadc.c ****   asctrl = group_ptr->ASCTRL;
 2654              	 .loc 2 1122 0
 2655 0008 7B68     	 ldr r3,[r7,#4]
 2656 000a D3F82031 	 ldr r3,[r3,#288]
 2657 000e FB60     	 str r3,[r7,#12]
1123:../Libraries/XMCLib/src/xmc_vadc.c **** 
1124:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL =(0U | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
 2658              	 .loc 2 1124 0
 2659 0010 7B68     	 ldr r3,[r7,#4]
 2660 0012 1A4A     	 ldr r2,.L88
 2661 0014 C3F82021 	 str r2,[r3,#288]
1125:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
1126:../Libraries/XMCLib/src/xmc_vadc.c **** 
1127:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable Arbitration before abort*/
1128:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN1_Pos) & 1U);
 2662              	 .loc 2 1128 0
 2663 0018 7B68     	 ldr r3,[r7,#4]
 2664 001a D3F88430 	 ldr r3,[r3,#132]
 2665 001e 5B0E     	 lsrs r3,r3,#25
 2666 0020 03F00103 	 and r3,r3,#1
 2667 0024 002B     	 cmp r3,#0
 2668 0026 14BF     	 ite ne
 2669 0028 0123     	 movne r3,#1
 2670 002a 0023     	 moveq r3,#0
 2671 002c FB72     	 strb r3,[r7,#11]
1129:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 2672              	 .loc 2 1129 0
 2673 002e 7868     	 ldr r0,[r7,#4]
 2674 0030 FFF7FEFF 	 bl XMC_VADC_GROUP_ScanDisableArbitrationSlot
1130:../Libraries/XMCLib/src/xmc_vadc.c **** 
1131:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENGT_Msk);
 2675              	 .loc 2 1131 0
 2676 0034 7B68     	 ldr r3,[r7,#4]
 2677 0036 D3F82431 	 ldr r3,[r3,#292]
 2678 003a 23F00302 	 bic r2,r3,#3
 2679 003e 7B68     	 ldr r3,[r7,#4]
 2680 0040 C3F82421 	 str r2,[r3,#292]
1132:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_CLRPND_Msk;
 2681              	 .loc 2 1132 0
 2682 0044 7B68     	 ldr r3,[r7,#4]
 2683 0046 D3F82431 	 ldr r3,[r3,#292]
 2684 004a 43F48072 	 orr r2,r3,#256
 2685 004e 7B68     	 ldr r3,[r7,#4]
 2686 0050 C3F82421 	 str r2,[r3,#292]
1133:../Libraries/XMCLib/src/xmc_vadc.c **** 
1134:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Enable the arbitration slot 1*/
1135:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN1_Pos);
 2687              	 .loc 2 1135 0
 2688 0054 7B68     	 ldr r3,[r7,#4]
 2689 0056 D3F88420 	 ldr r2,[r3,#132]
 2690 005a FB7A     	 ldrb r3,[r7,#11]
 2691 005c 5B06     	 lsls r3,r3,#25
 2692 005e 1A43     	 orrs r2,r2,r3
 2693 0060 7B68     	 ldr r3,[r7,#4]
 2694 0062 C3F88420 	 str r2,[r3,#132]
1136:../Libraries/XMCLib/src/xmc_vadc.c **** 
1137:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1138:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL =(asctrl | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
1139:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
 2695              	 .loc 2 1139 0
 2696 0066 FB68     	 ldr r3,[r7,#12]
 2697 0068 43F08023 	 orr r3,r3,#-2147450880
 2698 006c 43F40003 	 orr r3,r3,#8388608
1138:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
 2699              	 .loc 2 1138 0
 2700 0070 7A68     	 ldr r2,[r7,#4]
 2701 0072 C2F82031 	 str r3,[r2,#288]
1140:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2702              	 .loc 2 1140 0
 2703 0076 1037     	 adds r7,r7,#16
 2704              	.LCFI226:
 2705              	 .cfi_def_cfa_offset 8
 2706 0078 BD46     	 mov sp,r7
 2707              	.LCFI227:
 2708              	 .cfi_def_cfa_register 13
 2709              	 
 2710 007a 80BD     	 pop {r7,pc}
 2711              	.L89:
 2712              	 .align 2
 2713              	.L88:
 2714 007c 00808080 	 .word -2139062272
 2715              	 .cfi_endproc
 2716              	.LFE270:
 2718              	 .section .text.XMC_VADC_GROUP_ScanGetNumChannelsPending,"ax",%progbits
 2719              	 .align 2
 2720              	 .global XMC_VADC_GROUP_ScanGetNumChannelsPending
 2721              	 .thumb
 2722              	 .thumb_func
 2724              	XMC_VADC_GROUP_ScanGetNumChannelsPending:
 2725              	.LFB271:
1141:../Libraries/XMCLib/src/xmc_vadc.c **** 
1142:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to find out number of channels awaiting conversion */
1143:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr)
1144:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2726              	 .loc 2 1144 0
 2727              	 .cfi_startproc
 2728              	 
 2729              	 
 2730              	 
 2731 0000 80B4     	 push {r7}
 2732              	.LCFI228:
 2733              	 .cfi_def_cfa_offset 4
 2734              	 .cfi_offset 7,-4
 2735 0002 87B0     	 sub sp,sp,#28
 2736              	.LCFI229:
 2737              	 .cfi_def_cfa_offset 32
 2738 0004 00AF     	 add r7,sp,#0
 2739              	.LCFI230:
 2740              	 .cfi_def_cfa_register 7
 2741 0006 7860     	 str r0,[r7,#4]
1145:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1146:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1147:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t count;
1148:../Libraries/XMCLib/src/xmc_vadc.c **** 
1149:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanGetNumChannelsPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1150:../Libraries/XMCLib/src/xmc_vadc.c **** 
1151:../Libraries/XMCLib/src/xmc_vadc.c **** 
1152:../Libraries/XMCLib/src/xmc_vadc.c ****   count = 0U;
 2742              	 .loc 2 1152 0
 2743 0008 0023     	 movs r3,#0
 2744 000a FB60     	 str r3,[r7,#12]
1153:../Libraries/XMCLib/src/xmc_vadc.c **** 
1154:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_ptr->ASPND)
 2745              	 .loc 2 1154 0
 2746 000c 7B68     	 ldr r3,[r7,#4]
 2747 000e D3F82C31 	 ldr r3,[r3,#300]
 2748 0012 002B     	 cmp r3,#0
 2749 0014 17D0     	 beq .L91
1155:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1156:../Libraries/XMCLib/src/xmc_vadc.c ****     reg = group_ptr->ASPND;
 2750              	 .loc 2 1156 0
 2751 0016 7B68     	 ldr r3,[r7,#4]
 2752 0018 D3F82C31 	 ldr r3,[r3,#300]
 2753 001c 7B61     	 str r3,[r7,#20]
1157:../Libraries/XMCLib/src/xmc_vadc.c **** 
1158:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i=0U;i<XMC_VADC_NUM_CHANNELS_PER_GROUP;i++)
 2754              	 .loc 2 1158 0
 2755 001e 0023     	 movs r3,#0
 2756 0020 3B61     	 str r3,[r7,#16]
 2757 0022 0DE0     	 b .L92
 2758              	.L94:
1159:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1160:../Libraries/XMCLib/src/xmc_vadc.c ****       if (reg & 1U)
 2759              	 .loc 2 1160 0
 2760 0024 7B69     	 ldr r3,[r7,#20]
 2761 0026 03F00103 	 and r3,r3,#1
 2762 002a 002B     	 cmp r3,#0
 2763 002c 02D0     	 beq .L93
1161:../Libraries/XMCLib/src/xmc_vadc.c ****       {
1162:../Libraries/XMCLib/src/xmc_vadc.c ****         count++;
 2764              	 .loc 2 1162 0
 2765 002e FB68     	 ldr r3,[r7,#12]
 2766 0030 0133     	 adds r3,r3,#1
 2767 0032 FB60     	 str r3,[r7,#12]
 2768              	.L93:
1163:../Libraries/XMCLib/src/xmc_vadc.c ****       }
1164:../Libraries/XMCLib/src/xmc_vadc.c ****       reg = (uint32_t)(reg >> (uint32_t)1);
 2769              	 .loc 2 1164 0 discriminator 2
 2770 0034 7B69     	 ldr r3,[r7,#20]
 2771 0036 5B08     	 lsrs r3,r3,#1
 2772 0038 7B61     	 str r3,[r7,#20]
1158:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 2773              	 .loc 2 1158 0 discriminator 2
 2774 003a 3B69     	 ldr r3,[r7,#16]
 2775 003c 0133     	 adds r3,r3,#1
 2776 003e 3B61     	 str r3,[r7,#16]
 2777              	.L92:
1158:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 2778              	 .loc 2 1158 0 is_stmt 0 discriminator 1
 2779 0040 3B69     	 ldr r3,[r7,#16]
 2780 0042 072B     	 cmp r3,#7
 2781 0044 EED9     	 bls .L94
 2782              	.L91:
1165:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1166:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1167:../Libraries/XMCLib/src/xmc_vadc.c **** 
1168:../Libraries/XMCLib/src/xmc_vadc.c ****   return count;
 2783              	 .loc 2 1168 0 is_stmt 1
 2784 0046 FB68     	 ldr r3,[r7,#12]
1169:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2785              	 .loc 2 1169 0
 2786 0048 1846     	 mov r0,r3
 2787 004a 1C37     	 adds r7,r7,#28
 2788              	.LCFI231:
 2789              	 .cfi_def_cfa_offset 4
 2790 004c BD46     	 mov sp,r7
 2791              	.LCFI232:
 2792              	 .cfi_def_cfa_register 13
 2793              	 
 2794 004e 5DF8047B 	 ldr r7,[sp],#4
 2795              	.LCFI233:
 2796              	 .cfi_restore 7
 2797              	 .cfi_def_cfa_offset 0
 2798 0052 7047     	 bx lr
 2799              	 .cfi_endproc
 2800              	.LFE271:
 2802              	 .section .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode,"ax",%progbits
 2803              	 .align 2
 2804              	 .global XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode
 2805              	 .thumb
 2806              	 .thumb_func
 2808              	XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:
 2809              	.LFB272:
1170:../Libraries/XMCLib/src/xmc_vadc.c **** 
1171:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select a service request line (NVIC Node) for request source event */
1172:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
1173:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2810              	 .loc 2 1173 0
 2811              	 .cfi_startproc
 2812              	 
 2813              	 
 2814              	 
 2815 0000 80B4     	 push {r7}
 2816              	.LCFI234:
 2817              	 .cfi_def_cfa_offset 4
 2818              	 .cfi_offset 7,-4
 2819 0002 85B0     	 sub sp,sp,#20
 2820              	.LCFI235:
 2821              	 .cfi_def_cfa_offset 24
 2822 0004 00AF     	 add r7,sp,#0
 2823              	.LCFI236:
 2824              	 .cfi_def_cfa_register 7
 2825 0006 7860     	 str r0,[r7,#4]
 2826 0008 0B46     	 mov r3,r1
 2827 000a FB70     	 strb r3,[r7,#3]
1174:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sevnp;
1175:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp = group_ptr->SEVNP;
 2828              	 .loc 2 1175 0
 2829 000c 7B68     	 ldr r3,[r7,#4]
 2830 000e D3F8C031 	 ldr r3,[r3,#448]
 2831 0012 FB60     	 str r3,[r7,#12]
1176:../Libraries/XMCLib/src/xmc_vadc.c **** 
1177:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_G
1178:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_
1179:../Libraries/XMCLib/src/xmc_vadc.c **** 
1180:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV1NP_Msk);
 2832              	 .loc 2 1180 0
 2833 0014 FB68     	 ldr r3,[r7,#12]
 2834 0016 23F0F003 	 bic r3,r3,#240
 2835 001a FB60     	 str r3,[r7,#12]
1181:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV1NP_Pos);
 2836              	 .loc 2 1181 0
 2837 001c FB78     	 ldrb r3,[r7,#3]
 2838 001e 1B01     	 lsls r3,r3,#4
 2839 0020 FA68     	 ldr r2,[r7,#12]
 2840 0022 1343     	 orrs r3,r3,r2
 2841 0024 FB60     	 str r3,[r7,#12]
1182:../Libraries/XMCLib/src/xmc_vadc.c **** 
1183:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SEVNP = sevnp;
 2842              	 .loc 2 1183 0
 2843 0026 7B68     	 ldr r3,[r7,#4]
 2844 0028 FA68     	 ldr r2,[r7,#12]
 2845 002a C3F8C021 	 str r2,[r3,#448]
1184:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2846              	 .loc 2 1184 0
 2847 002e 1437     	 adds r7,r7,#20
 2848              	.LCFI237:
 2849              	 .cfi_def_cfa_offset 4
 2850 0030 BD46     	 mov sp,r7
 2851              	.LCFI238:
 2852              	 .cfi_def_cfa_register 13
 2853              	 
 2854 0032 5DF8047B 	 ldr r7,[sp],#4
 2855              	.LCFI239:
 2856              	 .cfi_restore 7
 2857              	 .cfi_def_cfa_offset 0
 2858 0036 7047     	 bx lr
 2859              	 .cfi_endproc
 2860              	.LFE272:
 2862              	 .section .text.XMC_VADC_GROUP_ScanRemoveChannel,"ax",%progbits
 2863              	 .align 2
 2864              	 .global XMC_VADC_GROUP_ScanRemoveChannel
 2865              	 .thumb
 2866              	 .thumb_func
 2868              	XMC_VADC_GROUP_ScanRemoveChannel:
 2869              	.LFB273:
1185:../Libraries/XMCLib/src/xmc_vadc.c **** 
1186:../Libraries/XMCLib/src/xmc_vadc.c **** /* Removes the selected channel from conversion*/
1187:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
1188:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2870              	 .loc 2 1188 0
 2871              	 .cfi_startproc
 2872              	 
 2873              	 
 2874              	 
 2875 0000 80B4     	 push {r7}
 2876              	.LCFI240:
 2877              	 .cfi_def_cfa_offset 4
 2878              	 .cfi_offset 7,-4
 2879 0002 85B0     	 sub sp,sp,#20
 2880              	.LCFI241:
 2881              	 .cfi_def_cfa_offset 24
 2882 0004 00AF     	 add r7,sp,#0
 2883              	.LCFI242:
 2884              	 .cfi_def_cfa_register 7
 2885 0006 7860     	 str r0,[r7,#4]
 2886 0008 3960     	 str r1,[r7]
1189:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t assel;
1190:../Libraries/XMCLib/src/xmc_vadc.c **** 
1191:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanRemoveChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1192:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanRemoveChannel:Wrong channel number", ((channel_num)< XMC_VADC_NUM_
1193:../Libraries/XMCLib/src/xmc_vadc.c **** 
1194:../Libraries/XMCLib/src/xmc_vadc.c ****   assel = group_ptr->ASSEL; 
 2887              	 .loc 2 1194 0
 2888 000a 7B68     	 ldr r3,[r7,#4]
 2889 000c D3F82831 	 ldr r3,[r3,#296]
 2890 0010 FB60     	 str r3,[r7,#12]
1195:../Libraries/XMCLib/src/xmc_vadc.c ****   assel &= (~( 1 << channel_num));
 2891              	 .loc 2 1195 0
 2892 0012 3B68     	 ldr r3,[r7]
 2893 0014 0122     	 movs r2,#1
 2894 0016 02FA03F3 	 lsl r3,r2,r3
 2895 001a DB43     	 mvns r3,r3
 2896 001c 1A46     	 mov r2,r3
 2897 001e FB68     	 ldr r3,[r7,#12]
 2898 0020 1340     	 ands r3,r3,r2
 2899 0022 FB60     	 str r3,[r7,#12]
1196:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASSEL  = assel;
 2900              	 .loc 2 1196 0
 2901 0024 7B68     	 ldr r3,[r7,#4]
 2902 0026 FA68     	 ldr r2,[r7,#12]
 2903 0028 C3F82821 	 str r2,[r3,#296]
1197:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2904              	 .loc 2 1197 0
 2905 002c 1437     	 adds r7,r7,#20
 2906              	.LCFI243:
 2907              	 .cfi_def_cfa_offset 4
 2908 002e BD46     	 mov sp,r7
 2909              	.LCFI244:
 2910              	 .cfi_def_cfa_register 13
 2911              	 
 2912 0030 5DF8047B 	 ldr r7,[sp],#4
 2913              	.LCFI245:
 2914              	 .cfi_restore 7
 2915              	 .cfi_def_cfa_offset 0
 2916 0034 7047     	 bx lr
 2917              	 .cfi_endproc
 2918              	.LFE273:
 2920 0036 00BF     	 .section .text.XMC_VADC_GLOBAL_BackgroundInit,"ax",%progbits
 2921              	 .align 2
 2922              	 .global XMC_VADC_GLOBAL_BackgroundInit
 2923              	 .thumb
 2924              	 .thumb_func
 2926              	XMC_VADC_GLOBAL_BackgroundInit:
 2927              	.LFB274:
1198:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1199:../Libraries/XMCLib/src/xmc_vadc.c **** 
1200:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize background scan request source hardware */
1201:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
1202:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2928              	 .loc 2 1202 0
 2929              	 .cfi_startproc
 2930              	 
 2931              	 
 2932 0000 80B5     	 push {r7,lr}
 2933              	.LCFI246:
 2934              	 .cfi_def_cfa_offset 8
 2935              	 .cfi_offset 7,-8
 2936              	 .cfi_offset 14,-4
 2937 0002 86B0     	 sub sp,sp,#24
 2938              	.LCFI247:
 2939              	 .cfi_def_cfa_offset 32
 2940 0004 00AF     	 add r7,sp,#0
 2941              	.LCFI248:
 2942              	 .cfi_def_cfa_register 7
 2943 0006 7860     	 str r0,[r7,#4]
 2944 0008 3960     	 str r1,[r7]
1203:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1204:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t i;
1205:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1206:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t conv_start_mask;
1207:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1208:../Libraries/XMCLib/src/xmc_vadc.c ****   
1209:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))
1210:../Libraries/XMCLib/src/xmc_vadc.c **** 
1211:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1212:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 2945              	 .loc 2 1212 0
 2946 000a 0023     	 movs r3,#0
 2947 000c FB75     	 strb r3,[r7,#23]
 2948 000e 09E0     	 b .L99
 2949              	.L100:
1213:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1214:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 2950              	 .loc 2 1214 0 discriminator 3
 2951 0010 FB7D     	 ldrb r3,[r7,#23]
 2952 0012 394A     	 ldr r2,.L107
 2953 0014 52F82330 	 ldr r3,[r2,r3,lsl#2]
 2954 0018 1846     	 mov r0,r3
 2955 001a FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
1212:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 2956              	 .loc 2 1212 0 discriminator 3
 2957 001e FB7D     	 ldrb r3,[r7,#23]
 2958 0020 0133     	 adds r3,r3,#1
 2959 0022 FB75     	 strb r3,[r7,#23]
 2960              	.L99:
1212:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 2961              	 .loc 2 1212 0 is_stmt 0 discriminator 1
 2962 0024 FB7D     	 ldrb r3,[r7,#23]
 2963 0026 032B     	 cmp r3,#3
 2964 0028 F2D9     	 bls .L100
1215:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1216:../Libraries/XMCLib/src/xmc_vadc.c ****   
1217:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_start_mask = (uint32_t) 0;
 2965              	 .loc 2 1217 0 is_stmt 1
 2966 002a 0023     	 movs r3,#0
 2967 002c 3B61     	 str r3,[r7,#16]
1218:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 2968              	 .loc 2 1218 0
 2969 002e 3B68     	 ldr r3,[r7]
 2970 0030 1B78     	 ldrb r3,[r3]
 2971 0032 03F00303 	 and r3,r3,#3
 2972 0036 DBB2     	 uxtb r3,r3
 2973 0038 002B     	 cmp r3,#0
 2974 003a 02D0     	 beq .L101
1219:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1220:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 2975              	 .loc 2 1220 0
 2976 003c 4FF40063 	 mov r3,#2048
 2977 0040 3B61     	 str r3,[r7,#16]
 2978              	.L101:
1221:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1222:../Libraries/XMCLib/src/xmc_vadc.c ****   
1223:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 2979              	 .loc 2 1223 0
 2980 0042 0023     	 movs r3,#0
 2981 0044 FB75     	 strb r3,[r7,#23]
 2982 0046 21E0     	 b .L102
 2983              	.L103:
1224:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1225:../Libraries/XMCLib/src/xmc_vadc.c ****     reg = g_xmc_vadc_group_array[i]->ARBPR;
 2984              	 .loc 2 1225 0 discriminator 3
 2985 0048 FB7D     	 ldrb r3,[r7,#23]
 2986 004a 2B4A     	 ldr r2,.L107
 2987 004c 52F82330 	 ldr r3,[r2,r3,lsl#2]
 2988 0050 D3F88430 	 ldr r3,[r3,#132]
 2989 0054 FB60     	 str r3,[r7,#12]
1226:../Libraries/XMCLib/src/xmc_vadc.c **** 
1227:../Libraries/XMCLib/src/xmc_vadc.c ****     reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 2990              	 .loc 2 1227 0 discriminator 3
 2991 0056 FB68     	 ldr r3,[r7,#12]
 2992 0058 23F44073 	 bic r3,r3,#768
 2993 005c FB60     	 str r3,[r7,#12]
1228:../Libraries/XMCLib/src/xmc_vadc.c **** 
1229:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Program the priority of the request source */
1230:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 2994              	 .loc 2 1230 0 discriminator 3
 2995 005e 3B68     	 ldr r3,[r7]
 2996 0060 1B78     	 ldrb r3,[r3]
 2997 0062 C3F38103 	 ubfx r3,r3,#2,#2
 2998 0066 DBB2     	 uxtb r3,r3
 2999 0068 1B02     	 lsls r3,r3,#8
 3000 006a FA68     	 ldr r2,[r7,#12]
 3001 006c 1343     	 orrs r3,r3,r2
 3002 006e FB60     	 str r3,[r7,#12]
1231:../Libraries/XMCLib/src/xmc_vadc.c ****   
1232:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Program the start mode */
1233:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= conv_start_mask;
 3003              	 .loc 2 1233 0 discriminator 3
 3004 0070 FA68     	 ldr r2,[r7,#12]
 3005 0072 3B69     	 ldr r3,[r7,#16]
 3006 0074 1343     	 orrs r3,r3,r2
 3007 0076 FB60     	 str r3,[r7,#12]
1234:../Libraries/XMCLib/src/xmc_vadc.c **** 
1235:../Libraries/XMCLib/src/xmc_vadc.c ****     g_xmc_vadc_group_array[i]->ARBPR = reg;
 3008              	 .loc 2 1235 0 discriminator 3
 3009 0078 FB7D     	 ldrb r3,[r7,#23]
 3010 007a 1F4A     	 ldr r2,.L107
 3011 007c 52F82330 	 ldr r3,[r2,r3,lsl#2]
 3012 0080 FA68     	 ldr r2,[r7,#12]
 3013 0082 C3F88420 	 str r2,[r3,#132]
1223:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3014              	 .loc 2 1223 0 discriminator 3
 3015 0086 FB7D     	 ldrb r3,[r7,#23]
 3016 0088 0133     	 adds r3,r3,#1
 3017 008a FB75     	 strb r3,[r7,#23]
 3018              	.L102:
1223:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3019              	 .loc 2 1223 0 is_stmt 0 discriminator 1
 3020 008c FB7D     	 ldrb r3,[r7,#23]
 3021 008e 032B     	 cmp r3,#3
 3022 0090 DAD9     	 bls .L103
1236:../Libraries/XMCLib/src/xmc_vadc.c ****   
1237:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1238:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1239:../Libraries/XMCLib/src/xmc_vadc.c **** 
1240:../Libraries/XMCLib/src/xmc_vadc.c ****   /* program BRSCTRL register */
1241:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VAD
 3023              	 .loc 2 1241 0 is_stmt 1
 3024 0092 3B68     	 ldr r3,[r7]
 3025 0094 5B68     	 ldr r3,[r3,#4]
 3026 0096 43F40003 	 orr r3,r3,#8388608
 3027 009a 43F40043 	 orr r3,r3,#32768
 3028 009e 7A68     	 ldr r2,[r7,#4]
 3029 00a0 C2F80032 	 str r3,[r2,#512]
1242:../Libraries/XMCLib/src/xmc_vadc.c **** 
1243:../Libraries/XMCLib/src/xmc_vadc.c ****   /* program BRSMR register */
1244:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << V
 3030              	 .loc 2 1244 0
 3031 00a4 3B68     	 ldr r3,[r7]
 3032 00a6 9B68     	 ldr r3,[r3,#8]
 3033 00a8 43F00102 	 orr r2,r3,#1
 3034 00ac 7B68     	 ldr r3,[r7,#4]
 3035 00ae C3F80422 	 str r2,[r3,#516]
1245:../Libraries/XMCLib/src/xmc_vadc.c ****   
1246:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1247:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 3036              	 .loc 2 1247 0
 3037 00b2 3B68     	 ldr r3,[r7]
 3038 00b4 1B78     	 ldrb r3,[r3]
 3039 00b6 03F00303 	 and r3,r3,#3
 3040 00ba DBB2     	 uxtb r3,r3
 3041 00bc 022B     	 cmp r3,#2
 3042 00be 07D1     	 bne .L104
1248:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1249:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 3043              	 .loc 2 1249 0
 3044 00c0 7B68     	 ldr r3,[r7,#4]
 3045 00c2 D3F80432 	 ldr r3,[r3,#516]
 3046 00c6 43F48032 	 orr r2,r3,#65536
 3047 00ca 7B68     	 ldr r3,[r7,#4]
 3048 00cc C3F80422 	 str r2,[r3,#516]
 3049              	.L104:
1250:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1251:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1252:../Libraries/XMCLib/src/xmc_vadc.c ****   
1253:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1254:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3050              	 .loc 2 1254 0
 3051 00d0 0023     	 movs r3,#0
 3052 00d2 FB75     	 strb r3,[r7,#23]
 3053 00d4 09E0     	 b .L105
 3054              	.L106:
1255:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1256:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 3055              	 .loc 2 1256 0 discriminator 3
 3056 00d6 FB7D     	 ldrb r3,[r7,#23]
 3057 00d8 074A     	 ldr r2,.L107
 3058 00da 52F82330 	 ldr r3,[r2,r3,lsl#2]
 3059 00de 1846     	 mov r0,r3
 3060 00e0 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
1254:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3061              	 .loc 2 1254 0 discriminator 3
 3062 00e4 FB7D     	 ldrb r3,[r7,#23]
 3063 00e6 0133     	 adds r3,r3,#1
 3064 00e8 FB75     	 strb r3,[r7,#23]
 3065              	.L105:
1254:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3066              	 .loc 2 1254 0 is_stmt 0 discriminator 1
 3067 00ea FB7D     	 ldrb r3,[r7,#23]
 3068 00ec 032B     	 cmp r3,#3
 3069 00ee F2D9     	 bls .L106
1257:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1258:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1259:../Libraries/XMCLib/src/xmc_vadc.c ****   
1260:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3070              	 .loc 2 1260 0 is_stmt 1
 3071 00f0 1837     	 adds r7,r7,#24
 3072              	.LCFI249:
 3073              	 .cfi_def_cfa_offset 8
 3074 00f2 BD46     	 mov sp,r7
 3075              	.LCFI250:
 3076              	 .cfi_def_cfa_register 13
 3077              	 
 3078 00f4 80BD     	 pop {r7,pc}
 3079              	.L108:
 3080 00f6 00BF     	 .align 2
 3081              	.L107:
 3082 00f8 00000000 	 .word g_xmc_vadc_group_array
 3083              	 .cfi_endproc
 3084              	.LFE274:
 3086              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger,"ax",%progbits
 3087              	 .align 2
 3088              	 .global XMC_VADC_GLOBAL_BackgroundSelectTrigger
 3089              	 .thumb
 3090              	 .thumb_func
 3092              	XMC_VADC_GLOBAL_BackgroundSelectTrigger:
 3093              	.LFB275:
1261:../Libraries/XMCLib/src/xmc_vadc.c **** 
1262:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger for background scan request source */
1263:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
1264:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3094              	 .loc 2 1264 0
 3095              	 .cfi_startproc
 3096              	 
 3097              	 
 3098              	 
 3099 0000 80B4     	 push {r7}
 3100              	.LCFI251:
 3101              	 .cfi_def_cfa_offset 4
 3102              	 .cfi_offset 7,-4
 3103 0002 85B0     	 sub sp,sp,#20
 3104              	.LCFI252:
 3105              	 .cfi_def_cfa_offset 24
 3106 0004 00AF     	 add r7,sp,#0
 3107              	.LCFI253:
 3108              	 .cfi_def_cfa_register 7
 3109 0006 7860     	 str r0,[r7,#4]
 3110 0008 3960     	 str r1,[r7]
1265:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1266:../Libraries/XMCLib/src/xmc_vadc.c **** 
1267:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("VADC_BCKGND_SelectTriggerInput:Wrong Module Pointer", (global_ptr == VADC))
1268:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTrigger:Wrong Trigger Port", ((input_num)< XMC_VADC_N
1269:../Libraries/XMCLib/src/xmc_vadc.c **** 
1270:../Libraries/XMCLib/src/xmc_vadc.c ****   
1271:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl       = global_ptr->BRSCTRL;
 3111              	 .loc 2 1271 0
 3112 000a 7B68     	 ldr r3,[r7,#4]
 3113 000c D3F80032 	 ldr r3,[r3,#512]
 3114 0010 FB60     	 str r3,[r7,#12]
1272:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)VADC_BRSCTRL_XTWC_Msk;
 3115              	 .loc 2 1272 0
 3116 0012 FB68     	 ldr r3,[r7,#12]
 3117 0014 43F40043 	 orr r3,r3,#32768
 3118 0018 FB60     	 str r3,[r7,#12]
1273:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      &= ~((uint32_t)VADC_BRSCTRL_XTSEL_Msk);
 3119              	 .loc 2 1273 0
 3120 001a FB68     	 ldr r3,[r7,#12]
 3121 001c 23F47063 	 bic r3,r3,#3840
 3122 0020 FB60     	 str r3,[r7,#12]
1274:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_XTSEL_Pos);
 3123              	 .loc 2 1274 0
 3124 0022 3B68     	 ldr r3,[r7]
 3125 0024 1B02     	 lsls r3,r3,#8
 3126 0026 FA68     	 ldr r2,[r7,#12]
 3127 0028 1343     	 orrs r3,r3,r2
 3128 002a FB60     	 str r3,[r7,#12]
1275:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 3129              	 .loc 2 1275 0
 3130 002c 7B68     	 ldr r3,[r7,#4]
 3131 002e FA68     	 ldr r2,[r7,#12]
 3132 0030 C3F80022 	 str r2,[r3,#512]
1276:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3133              	 .loc 2 1276 0
 3134 0034 1437     	 adds r7,r7,#20
 3135              	.LCFI254:
 3136              	 .cfi_def_cfa_offset 4
 3137 0036 BD46     	 mov sp,r7
 3138              	.LCFI255:
 3139              	 .cfi_def_cfa_register 13
 3140              	 
 3141 0038 5DF8047B 	 ldr r7,[sp],#4
 3142              	.LCFI256:
 3143              	 .cfi_restore 7
 3144              	 .cfi_def_cfa_offset 0
 3145 003c 7047     	 bx lr
 3146              	 .cfi_endproc
 3147              	.LFE275:
 3149 003e 00BF     	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge,"ax",%progbits
 3150              	 .align 2
 3151              	 .global XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge
 3152              	 .thumb
 3153              	 .thumb_func
 3155              	XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:
 3156              	.LFB276:
1277:../Libraries/XMCLib/src/xmc_vadc.c **** 
1278:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1279:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr,
1280:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const XMC_VADC_TRIGGER_EDGE_t trigger_edge)
1281:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3157              	 .loc 2 1281 0
 3158              	 .cfi_startproc
 3159              	 
 3160              	 
 3161              	 
 3162 0000 80B4     	 push {r7}
 3163              	.LCFI257:
 3164              	 .cfi_def_cfa_offset 4
 3165              	 .cfi_offset 7,-4
 3166 0002 85B0     	 sub sp,sp,#20
 3167              	.LCFI258:
 3168              	 .cfi_def_cfa_offset 24
 3169 0004 00AF     	 add r7,sp,#0
 3170              	.LCFI259:
 3171              	 .cfi_def_cfa_register 7
 3172 0006 7860     	 str r0,[r7,#4]
 3173 0008 0B46     	 mov r3,r1
 3174 000a FB70     	 strb r3,[r7,#3]
1282:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1283:../Libraries/XMCLib/src/xmc_vadc.c **** 
1284:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:Wrong Global Pointer", (global_ptr == VAD
1285:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:Wrong Trigger Port",
1286:../Libraries/XMCLib/src/xmc_vadc.c ****             ((trigger_edge)<= XMC_VADC_TRIGGER_EDGE_ANY))
1287:../Libraries/XMCLib/src/xmc_vadc.c **** 
1288:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = global_ptr->BRSCTRL;
 3175              	 .loc 2 1288 0
 3176 000c 7B68     	 ldr r3,[r7,#4]
 3177 000e D3F80032 	 ldr r3,[r3,#512]
 3178 0012 FB60     	 str r3,[r7,#12]
1289:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_BRSCTRL_XTWC_Msk;
 3179              	 .loc 2 1289 0
 3180 0014 FB68     	 ldr r3,[r7,#12]
 3181 0016 43F40043 	 orr r3,r3,#32768
 3182 001a FB60     	 str r3,[r7,#12]
1290:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_BRSCTRL_XTMODE_Msk);
 3183              	 .loc 2 1290 0
 3184 001c FB68     	 ldr r3,[r7,#12]
 3185 001e 23F4C043 	 bic r3,r3,#24576
 3186 0022 FB60     	 str r3,[r7,#12]
1291:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_BRSCTRL_XTMODE_Pos);
 3187              	 .loc 2 1291 0
 3188 0024 FB78     	 ldrb r3,[r7,#3]
 3189 0026 5B03     	 lsls r3,r3,#13
 3190 0028 FA68     	 ldr r2,[r7,#12]
 3191 002a 1343     	 orrs r3,r3,r2
 3192 002c FB60     	 str r3,[r7,#12]
1292:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 3193              	 .loc 2 1292 0
 3194 002e 7B68     	 ldr r3,[r7,#4]
 3195 0030 FA68     	 ldr r2,[r7,#12]
 3196 0032 C3F80022 	 str r2,[r3,#512]
1293:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3197              	 .loc 2 1293 0
 3198 0036 1437     	 adds r7,r7,#20
 3199              	.LCFI260:
 3200              	 .cfi_def_cfa_offset 4
 3201 0038 BD46     	 mov sp,r7
 3202              	.LCFI261:
 3203              	 .cfi_def_cfa_register 13
 3204              	 
 3205 003a 5DF8047B 	 ldr r7,[sp],#4
 3206              	.LCFI262:
 3207              	 .cfi_restore 7
 3208              	 .cfi_def_cfa_offset 0
 3209 003e 7047     	 bx lr
 3210              	 .cfi_endproc
 3211              	.LFE276:
 3213              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectGating,"ax",%progbits
 3214              	 .align 2
 3215              	 .global XMC_VADC_GLOBAL_BackgroundSelectGating
 3216              	 .thumb
 3217              	 .thumb_func
 3219              	XMC_VADC_GLOBAL_BackgroundSelectGating:
 3220              	.LFB277:
1294:../Libraries/XMCLib/src/xmc_vadc.c **** 
1295:../Libraries/XMCLib/src/xmc_vadc.c **** 
1296:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger gate for background scan request source */
1297:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
1298:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3221              	 .loc 2 1298 0
 3222              	 .cfi_startproc
 3223              	 
 3224              	 
 3225              	 
 3226 0000 80B4     	 push {r7}
 3227              	.LCFI263:
 3228              	 .cfi_def_cfa_offset 4
 3229              	 .cfi_offset 7,-4
 3230 0002 85B0     	 sub sp,sp,#20
 3231              	.LCFI264:
 3232              	 .cfi_def_cfa_offset 24
 3233 0004 00AF     	 add r7,sp,#0
 3234              	.LCFI265:
 3235              	 .cfi_def_cfa_register 7
 3236 0006 7860     	 str r0,[r7,#4]
 3237 0008 3960     	 str r1,[r7]
1299:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1300:../Libraries/XMCLib/src/xmc_vadc.c **** 
1301:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectGating:Wrong Module Pointer", (global_ptr == VADC))
1302:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectGating:Wrong Gating Port", ((input_num)< XMC_VADC_NUM
1303:../Libraries/XMCLib/src/xmc_vadc.c **** 
1304:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl       = global_ptr->BRSCTRL;
 3238              	 .loc 2 1304 0
 3239 000a 7B68     	 ldr r3,[r7,#4]
 3240 000c D3F80032 	 ldr r3,[r3,#512]
 3241 0010 FB60     	 str r3,[r7,#12]
1305:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)VADC_BRSCTRL_GTWC_Msk;
 3242              	 .loc 2 1305 0
 3243 0012 FB68     	 ldr r3,[r7,#12]
 3244 0014 43F40003 	 orr r3,r3,#8388608
 3245 0018 FB60     	 str r3,[r7,#12]
1306:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      &= ~((uint32_t)VADC_BRSCTRL_GTSEL_Msk);
 3246              	 .loc 2 1306 0
 3247 001a FB68     	 ldr r3,[r7,#12]
 3248 001c 23F47023 	 bic r3,r3,#983040
 3249 0020 FB60     	 str r3,[r7,#12]
1307:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_GTSEL_Pos);
 3250              	 .loc 2 1307 0
 3251 0022 3B68     	 ldr r3,[r7]
 3252 0024 1B04     	 lsls r3,r3,#16
 3253 0026 FA68     	 ldr r2,[r7,#12]
 3254 0028 1343     	 orrs r3,r3,r2
 3255 002a FB60     	 str r3,[r7,#12]
1308:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 3256              	 .loc 2 1308 0
 3257 002c 7B68     	 ldr r3,[r7,#4]
 3258 002e FA68     	 ldr r2,[r7,#12]
 3259 0030 C3F80022 	 str r2,[r3,#512]
1309:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3260              	 .loc 2 1309 0
 3261 0034 1437     	 adds r7,r7,#20
 3262              	.LCFI266:
 3263              	 .cfi_def_cfa_offset 4
 3264 0036 BD46     	 mov sp,r7
 3265              	.LCFI267:
 3266              	 .cfi_def_cfa_register 13
 3267              	 
 3268 0038 5DF8047B 	 ldr r7,[sp],#4
 3269              	.LCFI268:
 3270              	 .cfi_restore 7
 3271              	 .cfi_def_cfa_offset 0
 3272 003c 7047     	 bx lr
 3273              	 .cfi_endproc
 3274              	.LFE277:
 3276 003e 00BF     	 .section .text.XMC_VADC_GLOBAL_BackgroundAbortSequence,"ax",%progbits
 3277              	 .align 2
 3278              	 .global XMC_VADC_GLOBAL_BackgroundAbortSequence
 3279              	 .thumb
 3280              	 .thumb_func
 3282              	XMC_VADC_GLOBAL_BackgroundAbortSequence:
 3283              	.LFB278:
1310:../Libraries/XMCLib/src/xmc_vadc.c **** 
1311:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort ongoing conversion of a sequence */
1312:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr)
1313:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3284              	 .loc 2 1313 0
 3285              	 .cfi_startproc
 3286              	 
 3287              	 
 3288 0000 80B5     	 push {r7,lr}
 3289              	.LCFI269:
 3290              	 .cfi_def_cfa_offset 8
 3291              	 .cfi_offset 7,-8
 3292              	 .cfi_offset 14,-4
 3293 0002 86B0     	 sub sp,sp,#24
 3294              	.LCFI270:
 3295              	 .cfi_def_cfa_offset 32
 3296 0004 00AF     	 add r7,sp,#0
 3297              	.LCFI271:
 3298              	 .cfi_def_cfa_register 7
 3299 0006 7860     	 str r0,[r7,#4]
1314:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t brsctrl;
1315:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1316:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1317:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t grp_asen2_flag[XMC_VADC_MAXIMUM_NUM_GROUPS];
1318:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1319:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAbortSequence:Wrong Module Pointer", (global_ptr == VADC))
1320:../Libraries/XMCLib/src/xmc_vadc.c **** 
1321:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable trigger and gating before abort*/
1322:../Libraries/XMCLib/src/xmc_vadc.c ****   brsctrl = global_ptr->BRSCTRL;
 3300              	 .loc 2 1322 0
 3301 0008 7B68     	 ldr r3,[r7,#4]
 3302 000a D3F80032 	 ldr r3,[r3,#512]
 3303 000e 3B61     	 str r3,[r7,#16]
1323:../Libraries/XMCLib/src/xmc_vadc.c **** 
1324:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL =(0U | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 3304              	 .loc 2 1324 0
 3305 0010 7B68     	 ldr r3,[r7,#4]
 3306 0012 254A     	 ldr r2,.L118
 3307 0014 C3F80022 	 str r2,[r3,#512]
1325:../Libraries/XMCLib/src/xmc_vadc.c **** 
1326:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable Background Request source */
1327:../Libraries/XMCLib/src/xmc_vadc.c **** 
1328:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1329:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3308              	 .loc 2 1329 0
 3309 0018 0023     	 movs r3,#0
 3310 001a 7B61     	 str r3,[r7,#20]
 3311 001c 17E0     	 b .L113
 3312              	.L114:
1330:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1331:../Libraries/XMCLib/src/xmc_vadc.c ****     grp_asen2_flag[i] = (uint8_t)(g_xmc_vadc_group_array[i]->ARBPR >> VADC_G_ARBPR_ASEN2_Pos);
 3313              	 .loc 2 1331 0 discriminator 3
 3314 001e 234A     	 ldr r2,.L118+4
 3315 0020 7B69     	 ldr r3,[r7,#20]
 3316 0022 52F82330 	 ldr r3,[r2,r3,lsl#2]
 3317 0026 D3F88430 	 ldr r3,[r3,#132]
 3318 002a 9B0E     	 lsrs r3,r3,#26
 3319 002c D9B2     	 uxtb r1,r3
 3320 002e 07F10C02 	 add r2,r7,#12
 3321 0032 7B69     	 ldr r3,[r7,#20]
 3322 0034 1344     	 add r3,r3,r2
 3323 0036 0A46     	 mov r2,r1
 3324 0038 1A70     	 strb r2,[r3]
1332:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 3325              	 .loc 2 1332 0 discriminator 3
 3326 003a 1C4A     	 ldr r2,.L118+4
 3327 003c 7B69     	 ldr r3,[r7,#20]
 3328 003e 52F82330 	 ldr r3,[r2,r3,lsl#2]
 3329 0042 1846     	 mov r0,r3
 3330 0044 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
1329:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3331              	 .loc 2 1329 0 discriminator 3
 3332 0048 7B69     	 ldr r3,[r7,#20]
 3333 004a 0133     	 adds r3,r3,#1
 3334 004c 7B61     	 str r3,[r7,#20]
 3335              	.L113:
1329:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3336              	 .loc 2 1329 0 is_stmt 0 discriminator 1
 3337 004e 7B69     	 ldr r3,[r7,#20]
 3338 0050 032B     	 cmp r3,#3
 3339 0052 E4D9     	 bls .L114
1333:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1334:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1335:../Libraries/XMCLib/src/xmc_vadc.c **** 
1336:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Abort the ongoing sequence */
1337:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_CLRPND_Msk;
 3340              	 .loc 2 1337 0 is_stmt 1
 3341 0054 7B68     	 ldr r3,[r7,#4]
 3342 0056 D3F80432 	 ldr r3,[r3,#516]
 3343 005a 43F48072 	 orr r2,r3,#256
 3344 005e 7B68     	 ldr r3,[r7,#4]
 3345 0060 C3F80422 	 str r2,[r3,#516]
1338:../Libraries/XMCLib/src/xmc_vadc.c **** 
1339:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1340:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable Background Request source */
1341:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3346              	 .loc 2 1341 0
 3347 0064 0023     	 movs r3,#0
 3348 0066 7B61     	 str r3,[r7,#20]
 3349 0068 10E0     	 b .L115
 3350              	.L117:
1342:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1343:../Libraries/XMCLib/src/xmc_vadc.c ****     if ((uint8_t)1 == grp_asen2_flag[i])
 3351              	 .loc 2 1343 0
 3352 006a 07F10C02 	 add r2,r7,#12
 3353 006e 7B69     	 ldr r3,[r7,#20]
 3354 0070 1344     	 add r3,r3,r2
 3355 0072 1B78     	 ldrb r3,[r3]
 3356 0074 012B     	 cmp r3,#1
 3357 0076 06D1     	 bne .L116
1344:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1345:../Libraries/XMCLib/src/xmc_vadc.c ****       XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t*)g_xmc_vadc_group_array[i]);
 3358              	 .loc 2 1345 0
 3359 0078 0C4A     	 ldr r2,.L118+4
 3360 007a 7B69     	 ldr r3,[r7,#20]
 3361 007c 52F82330 	 ldr r3,[r2,r3,lsl#2]
 3362 0080 1846     	 mov r0,r3
 3363 0082 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
 3364              	.L116:
1341:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3365              	 .loc 2 1341 0 discriminator 2
 3366 0086 7B69     	 ldr r3,[r7,#20]
 3367 0088 0133     	 adds r3,r3,#1
 3368 008a 7B61     	 str r3,[r7,#20]
 3369              	.L115:
1341:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3370              	 .loc 2 1341 0 is_stmt 0 discriminator 1
 3371 008c 7B69     	 ldr r3,[r7,#20]
 3372 008e 032B     	 cmp r3,#3
 3373 0090 EBD9     	 bls .L117
1346:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1347:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1348:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1349:../Libraries/XMCLib/src/xmc_vadc.c **** 
1350:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Re-enable any disabled trigger and gating*/
1351:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL =(brsctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk
 3374              	 .loc 2 1351 0 is_stmt 1
 3375 0092 3B69     	 ldr r3,[r7,#16]
 3376 0094 43F40003 	 orr r3,r3,#8388608
 3377 0098 43F40043 	 orr r3,r3,#32768
 3378 009c 7A68     	 ldr r2,[r7,#4]
 3379 009e C2F80032 	 str r3,[r2,#512]
1352:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3380              	 .loc 2 1352 0
 3381 00a2 1837     	 adds r7,r7,#24
 3382              	.LCFI272:
 3383              	 .cfi_def_cfa_offset 8
 3384 00a4 BD46     	 mov sp,r7
 3385              	.LCFI273:
 3386              	 .cfi_def_cfa_register 13
 3387              	 
 3388 00a6 80BD     	 pop {r7,pc}
 3389              	.L119:
 3390              	 .align 2
 3391              	.L118:
 3392 00a8 00808000 	 .word 8421376
 3393 00ac 00000000 	 .word g_xmc_vadc_group_array
 3394              	 .cfi_endproc
 3395              	.LFE278:
 3397              	 .section .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending,"ax",%progbits
 3398              	 .align 2
 3399              	 .global XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending
 3400              	 .thumb
 3401              	 .thumb_func
 3403              	XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:
 3404              	.LFB279:
1353:../Libraries/XMCLib/src/xmc_vadc.c **** 
1354:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine how many channels are awaiting conversion */
1355:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr)
1356:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3405              	 .loc 2 1356 0
 3406              	 .cfi_startproc
 3407              	 
 3408              	 
 3409              	 
 3410 0000 80B4     	 push {r7}
 3411              	.LCFI274:
 3412              	 .cfi_def_cfa_offset 4
 3413              	 .cfi_offset 7,-4
 3414 0002 87B0     	 sub sp,sp,#28
 3415              	.LCFI275:
 3416              	 .cfi_def_cfa_offset 32
 3417 0004 00AF     	 add r7,sp,#0
 3418              	.LCFI276:
 3419              	 .cfi_def_cfa_register 7
 3420 0006 7860     	 str r0,[r7,#4]
1357:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1358:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1359:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t j;
1360:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t count;
1361:../Libraries/XMCLib/src/xmc_vadc.c **** 
1362:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:Wrong Module Pointer", (global_ptr ==
1363:../Libraries/XMCLib/src/xmc_vadc.c **** 
1364:../Libraries/XMCLib/src/xmc_vadc.c ****   count = 0U;
 3421              	 .loc 2 1364 0
 3422 0008 0023     	 movs r3,#0
 3423 000a BB60     	 str r3,[r7,#8]
1365:../Libraries/XMCLib/src/xmc_vadc.c ****   
1366:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop through all groups and find out who is awaiting conversion */
1367:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3424              	 .loc 2 1367 0
 3425 000c 0023     	 movs r3,#0
 3426 000e 3B61     	 str r3,[r7,#16]
 3427 0010 23E0     	 b .L121
 3428              	.L126:
1368:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1369:../Libraries/XMCLib/src/xmc_vadc.c ****     if (global_ptr->BRSSEL[i])
 3429              	 .loc 2 1369 0
 3430 0012 7B68     	 ldr r3,[r7,#4]
 3431 0014 3A69     	 ldr r2,[r7,#16]
 3432 0016 6032     	 adds r2,r2,#96
 3433 0018 53F82230 	 ldr r3,[r3,r2,lsl#2]
 3434 001c 002B     	 cmp r3,#0
 3435 001e 19D0     	 beq .L122
1370:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1371:../Libraries/XMCLib/src/xmc_vadc.c ****       reg = global_ptr->BRSPND[i];
 3436              	 .loc 2 1371 0
 3437 0020 7B68     	 ldr r3,[r7,#4]
 3438 0022 3A69     	 ldr r2,[r7,#16]
 3439 0024 7032     	 adds r2,r2,#112
 3440 0026 53F82230 	 ldr r3,[r3,r2,lsl#2]
 3441 002a 7B61     	 str r3,[r7,#20]
1372:../Libraries/XMCLib/src/xmc_vadc.c **** 
1373:../Libraries/XMCLib/src/xmc_vadc.c ****       for(j=0U;j<XMC_VADC_NUM_CHANNELS_PER_GROUP;j++)
 3442              	 .loc 2 1373 0
 3443 002c 0023     	 movs r3,#0
 3444 002e FB60     	 str r3,[r7,#12]
 3445 0030 0DE0     	 b .L123
 3446              	.L125:
1374:../Libraries/XMCLib/src/xmc_vadc.c ****       {
1375:../Libraries/XMCLib/src/xmc_vadc.c ****         if (reg & 1U)
 3447              	 .loc 2 1375 0
 3448 0032 7B69     	 ldr r3,[r7,#20]
 3449 0034 03F00103 	 and r3,r3,#1
 3450 0038 002B     	 cmp r3,#0
 3451 003a 02D0     	 beq .L124
1376:../Libraries/XMCLib/src/xmc_vadc.c ****         {
1377:../Libraries/XMCLib/src/xmc_vadc.c ****           count++;
 3452              	 .loc 2 1377 0
 3453 003c BB68     	 ldr r3,[r7,#8]
 3454 003e 0133     	 adds r3,r3,#1
 3455 0040 BB60     	 str r3,[r7,#8]
 3456              	.L124:
1378:../Libraries/XMCLib/src/xmc_vadc.c ****         }
1379:../Libraries/XMCLib/src/xmc_vadc.c **** 
1380:../Libraries/XMCLib/src/xmc_vadc.c ****         reg = reg >> 1U;
 3457              	 .loc 2 1380 0 discriminator 2
 3458 0042 7B69     	 ldr r3,[r7,#20]
 3459 0044 5B08     	 lsrs r3,r3,#1
 3460 0046 7B61     	 str r3,[r7,#20]
1373:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 3461              	 .loc 2 1373 0 discriminator 2
 3462 0048 FB68     	 ldr r3,[r7,#12]
 3463 004a 0133     	 adds r3,r3,#1
 3464 004c FB60     	 str r3,[r7,#12]
 3465              	.L123:
1373:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 3466              	 .loc 2 1373 0 is_stmt 0 discriminator 1
 3467 004e FB68     	 ldr r3,[r7,#12]
 3468 0050 072B     	 cmp r3,#7
 3469 0052 EED9     	 bls .L125
 3470              	.L122:
1367:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3471              	 .loc 2 1367 0 is_stmt 1 discriminator 2
 3472 0054 3B69     	 ldr r3,[r7,#16]
 3473 0056 0133     	 adds r3,r3,#1
 3474 0058 3B61     	 str r3,[r7,#16]
 3475              	.L121:
1367:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3476              	 .loc 2 1367 0 is_stmt 0 discriminator 1
 3477 005a 3B69     	 ldr r3,[r7,#16]
 3478 005c 032B     	 cmp r3,#3
 3479 005e D8D9     	 bls .L126
1381:../Libraries/XMCLib/src/xmc_vadc.c ****       }
1382:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1383:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1384:../Libraries/XMCLib/src/xmc_vadc.c **** 
1385:../Libraries/XMCLib/src/xmc_vadc.c ****   return count;
 3480              	 .loc 2 1385 0 is_stmt 1
 3481 0060 BB68     	 ldr r3,[r7,#8]
1386:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3482              	 .loc 2 1386 0
 3483 0062 1846     	 mov r0,r3
 3484 0064 1C37     	 adds r7,r7,#28
 3485              	.LCFI277:
 3486              	 .cfi_def_cfa_offset 4
 3487 0066 BD46     	 mov sp,r7
 3488              	.LCFI278:
 3489              	 .cfi_def_cfa_register 13
 3490              	 
 3491 0068 5DF8047B 	 ldr r7,[sp],#4
 3492              	.LCFI279:
 3493              	 .cfi_restore 7
 3494              	 .cfi_def_cfa_offset 0
 3495 006c 7047     	 bx lr
 3496              	 .cfi_endproc
 3497              	.LFE279:
 3499 006e 00BF     	 .section .text.XMC_VADC_GROUP_QueueInit,"ax",%progbits
 3500              	 .align 2
 3501              	 .global XMC_VADC_GROUP_QueueInit
 3502              	 .thumb
 3503              	 .thumb_func
 3505              	XMC_VADC_GROUP_QueueInit:
 3506              	.LFB280:
1387:../Libraries/XMCLib/src/xmc_vadc.c **** 
1388:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)  
1389:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize queue request source */
1390:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
1391:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3507              	 .loc 2 1391 0
 3508              	 .cfi_startproc
 3509              	 
 3510              	 
 3511 0000 80B5     	 push {r7,lr}
 3512              	.LCFI280:
 3513              	 .cfi_def_cfa_offset 8
 3514              	 .cfi_offset 7,-8
 3515              	 .cfi_offset 14,-4
 3516 0002 84B0     	 sub sp,sp,#16
 3517              	.LCFI281:
 3518              	 .cfi_def_cfa_offset 24
 3519 0004 00AF     	 add r7,sp,#0
 3520              	.LCFI282:
 3521              	 .cfi_def_cfa_register 7
 3522 0006 7860     	 str r0,[r7,#4]
 3523 0008 3960     	 str r1,[r7]
1392:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t          reg;
1393:../Libraries/XMCLib/src/xmc_vadc.c **** 
1394:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1395:../Libraries/XMCLib/src/xmc_vadc.c **** 
1396:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable arbitration slot of the queue request source */
1397:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 3524              	 .loc 2 1397 0
 3525 000a 7868     	 ldr r0,[r7,#4]
 3526 000c FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1398:../Libraries/XMCLib/src/xmc_vadc.c ****   
1399:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = group_ptr->ARBPR;
 3527              	 .loc 2 1399 0
 3528 0010 7B68     	 ldr r3,[r7,#4]
 3529 0012 D3F88430 	 ldr r3,[r3,#132]
 3530 0016 FB60     	 str r3,[r7,#12]
1400:../Libraries/XMCLib/src/xmc_vadc.c **** 
1401:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Request Source priority */
1402:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~((uint32_t)VADC_G_ARBPR_PRIO0_Msk);
 3531              	 .loc 2 1402 0
 3532 0018 FB68     	 ldr r3,[r7,#12]
 3533 001a 23F00303 	 bic r3,r3,#3
 3534 001e FB60     	 str r3,[r7,#12]
1403:../Libraries/XMCLib/src/xmc_vadc.c ****   reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
 3535              	 .loc 2 1403 0
 3536 0020 3B68     	 ldr r3,[r7]
 3537 0022 1B78     	 ldrb r3,[r3]
 3538 0024 C3F38103 	 ubfx r3,r3,#2,#2
 3539 0028 DBB2     	 uxtb r3,r3
 3540 002a 1A46     	 mov r2,r3
 3541 002c FB68     	 ldr r3,[r7,#12]
 3542 002e 1343     	 orrs r3,r3,r2
 3543 0030 FB60     	 str r3,[r7,#12]
1404:../Libraries/XMCLib/src/xmc_vadc.c **** 
1405:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Conversion Start mode */
1406:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 3544              	 .loc 2 1406 0
 3545 0032 3B68     	 ldr r3,[r7]
 3546 0034 1B78     	 ldrb r3,[r3]
 3547 0036 03F00303 	 and r3,r3,#3
 3548 003a DBB2     	 uxtb r3,r3
 3549 003c 002B     	 cmp r3,#0
 3550 003e 03D0     	 beq .L129
1407:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1408:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)(VADC_G_ARBPR_CSM0_Msk);
 3551              	 .loc 2 1408 0
 3552 0040 FB68     	 ldr r3,[r7,#12]
 3553 0042 43F00803 	 orr r3,r3,#8
 3554 0046 FB60     	 str r3,[r7,#12]
 3555              	.L129:
1409:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1410:../Libraries/XMCLib/src/xmc_vadc.c **** 
1411:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR = reg;
 3556              	 .loc 2 1411 0
 3557 0048 7B68     	 ldr r3,[r7,#4]
 3558 004a FA68     	 ldr r2,[r7,#12]
 3559 004c C3F88420 	 str r2,[r3,#132]
1412:../Libraries/XMCLib/src/xmc_vadc.c **** 
1413:../Libraries/XMCLib/src/xmc_vadc.c **** 
1414:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (uint32_t)((config->qctrl0)|(uint32_t)(VADC_G_QCTRL0_XTWC_Msk)|
 3560              	 .loc 2 1414 0
 3561 0050 3B68     	 ldr r3,[r7]
 3562 0052 5B68     	 ldr r3,[r3,#4]
 3563 0054 43F08023 	 orr r3,r3,#-2147450880
 3564 0058 43F40003 	 orr r3,r3,#8388608
 3565 005c 7A68     	 ldr r2,[r7,#4]
 3566 005e C2F80031 	 str r3,[r2,#256]
1415:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     (uint32_t)(VADC_G_QCTRL0_TMWC_Msk)|
1416:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     (uint32_t)(VADC_G_QCTRL0_GTWC_Msk));
1417:../Libraries/XMCLib/src/xmc_vadc.c **** 
1418:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Gating mode */
1419:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QMR0 = ((uint32_t)(config->qmr0) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VA
 3567              	 .loc 2 1419 0
 3568 0062 3B68     	 ldr r3,[r7]
 3569 0064 9B68     	 ldr r3,[r3,#8]
 3570 0066 43F00102 	 orr r2,r3,#1
 3571 006a 7B68     	 ldr r3,[r7,#4]
 3572 006c C3F80421 	 str r2,[r3,#260]
1420:../Libraries/XMCLib/src/xmc_vadc.c **** 
1421:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode) )
 3573              	 .loc 2 1421 0
 3574 0070 3B68     	 ldr r3,[r7]
 3575 0072 1B78     	 ldrb r3,[r3]
 3576 0074 03F00303 	 and r3,r3,#3
 3577 0078 DBB2     	 uxtb r3,r3
 3578 007a 022B     	 cmp r3,#2
 3579 007c 07D1     	 bne .L130
1422:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1423:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_RPTDIS_Pos);
 3580              	 .loc 2 1423 0
 3581 007e 7B68     	 ldr r3,[r7,#4]
 3582 0080 D3F80431 	 ldr r3,[r3,#260]
 3583 0084 43F48032 	 orr r2,r3,#65536
 3584 0088 7B68     	 ldr r3,[r7,#4]
 3585 008a C3F80421 	 str r2,[r3,#260]
 3586              	.L130:
1424:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1425:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable arbitration slot for the queue request source */
1426:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptr);
 3587              	 .loc 2 1426 0
 3588 008e 7868     	 ldr r0,[r7,#4]
 3589 0090 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueEnableArbitrationSlot
1427:../Libraries/XMCLib/src/xmc_vadc.c **** 
1428:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3590              	 .loc 2 1428 0
 3591 0094 1037     	 adds r7,r7,#16
 3592              	.LCFI283:
 3593              	 .cfi_def_cfa_offset 8
 3594 0096 BD46     	 mov sp,r7
 3595              	.LCFI284:
 3596              	 .cfi_def_cfa_register 13
 3597              	 
 3598 0098 80BD     	 pop {r7,pc}
 3599              	 .cfi_endproc
 3600              	.LFE280:
 3602 009a 00BF     	 .section .text.XMC_VADC_GROUP_QueueSelectTrigger,"ax",%progbits
 3603              	 .align 2
 3604              	 .global XMC_VADC_GROUP_QueueSelectTrigger
 3605              	 .thumb
 3606              	 .thumb_func
 3608              	XMC_VADC_GROUP_QueueSelectTrigger:
 3609              	.LFB281:
1429:../Libraries/XMCLib/src/xmc_vadc.c **** 
1430:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 possible triggers as a conversion trigger for queue request source *
1431:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr,
1432:../Libraries/XMCLib/src/xmc_vadc.c ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num)
1433:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3610              	 .loc 2 1433 0
 3611              	 .cfi_startproc
 3612              	 
 3613              	 
 3614              	 
 3615 0000 80B4     	 push {r7}
 3616              	.LCFI285:
 3617              	 .cfi_def_cfa_offset 4
 3618              	 .cfi_offset 7,-4
 3619 0002 85B0     	 sub sp,sp,#20
 3620              	.LCFI286:
 3621              	 .cfi_def_cfa_offset 24
 3622 0004 00AF     	 add r7,sp,#0
 3623              	.LCFI287:
 3624              	 .cfi_def_cfa_register 7
 3625 0006 7860     	 str r0,[r7,#4]
 3626 0008 0B46     	 mov r3,r1
 3627 000a FB70     	 strb r3,[r7,#3]
1434:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    qctrl;
1435:../Libraries/XMCLib/src/xmc_vadc.c ****   
1436:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1437:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTrigger:Wrong Trigger Port", ((input_num)< XMC_VADC_NUM_POR
1438:../Libraries/XMCLib/src/xmc_vadc.c **** 
1439:../Libraries/XMCLib/src/xmc_vadc.c ****   
1440:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the conversion trigger */
1441:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 3628              	 .loc 2 1441 0
 3629 000c 7B68     	 ldr r3,[r7,#4]
 3630 000e D3F80031 	 ldr r3,[r3,#256]
 3631 0012 FB60     	 str r3,[r7,#12]
1442:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
 3632              	 .loc 2 1442 0
 3633 0014 FB68     	 ldr r3,[r7,#12]
 3634 0016 43F40043 	 orr r3,r3,#32768
 3635 001a FB60     	 str r3,[r7,#12]
1443:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_XTSEL_Msk);
 3636              	 .loc 2 1443 0
 3637 001c FB68     	 ldr r3,[r7,#12]
 3638 001e 23F47063 	 bic r3,r3,#3840
 3639 0022 FB60     	 str r3,[r7,#12]
1444:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_XTSEL_Pos);
 3640              	 .loc 2 1444 0
 3641 0024 FB78     	 ldrb r3,[r7,#3]
 3642 0026 1B02     	 lsls r3,r3,#8
 3643 0028 FA68     	 ldr r2,[r7,#12]
 3644 002a 1343     	 orrs r3,r3,r2
 3645 002c FB60     	 str r3,[r7,#12]
1445:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 3646              	 .loc 2 1445 0
 3647 002e 7B68     	 ldr r3,[r7,#4]
 3648 0030 FA68     	 ldr r2,[r7,#12]
 3649 0032 C3F80021 	 str r2,[r3,#256]
1446:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3650              	 .loc 2 1446 0
 3651 0036 1437     	 adds r7,r7,#20
 3652              	.LCFI288:
 3653              	 .cfi_def_cfa_offset 4
 3654 0038 BD46     	 mov sp,r7
 3655              	.LCFI289:
 3656              	 .cfi_def_cfa_register 13
 3657              	 
 3658 003a 5DF8047B 	 ldr r7,[sp],#4
 3659              	.LCFI290:
 3660              	 .cfi_restore 7
 3661              	 .cfi_def_cfa_offset 0
 3662 003e 7047     	 bx lr
 3663              	 .cfi_endproc
 3664              	.LFE281:
 3666              	 .section .text.XMC_VADC_GROUP_QueueSelectTriggerEdge,"ax",%progbits
 3667              	 .align 2
 3668              	 .global XMC_VADC_GROUP_QueueSelectTriggerEdge
 3669              	 .thumb
 3670              	 .thumb_func
 3672              	XMC_VADC_GROUP_QueueSelectTriggerEdge:
 3673              	.LFB282:
1447:../Libraries/XMCLib/src/xmc_vadc.c **** 
1448:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1449:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
1450:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3674              	 .loc 2 1450 0
 3675              	 .cfi_startproc
 3676              	 
 3677              	 
 3678              	 
 3679 0000 80B4     	 push {r7}
 3680              	.LCFI291:
 3681              	 .cfi_def_cfa_offset 4
 3682              	 .cfi_offset 7,-4
 3683 0002 85B0     	 sub sp,sp,#20
 3684              	.LCFI292:
 3685              	 .cfi_def_cfa_offset 24
 3686 0004 00AF     	 add r7,sp,#0
 3687              	.LCFI293:
 3688              	 .cfi_def_cfa_register 7
 3689 0006 7860     	 str r0,[r7,#4]
 3690 0008 0B46     	 mov r3,r1
 3691 000a FB70     	 strb r3,[r7,#3]
1451:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl;
1452:../Libraries/XMCLib/src/xmc_vadc.c **** 
1453:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTriggerEdge:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
1454:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTriggerEdge:Wrong Gating Port", ((trigger_edge)<= XMC_VADC_
1455:../Libraries/XMCLib/src/xmc_vadc.c **** 
1456:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the gating input */
1457:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 3692              	 .loc 2 1457 0
 3693 000c 7B68     	 ldr r3,[r7,#4]
 3694 000e D3F80031 	 ldr r3,[r3,#256]
 3695 0012 FB60     	 str r3,[r7,#12]
1458:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
 3696              	 .loc 2 1458 0
 3697 0014 FB68     	 ldr r3,[r7,#12]
 3698 0016 43F40043 	 orr r3,r3,#32768
 3699 001a FB60     	 str r3,[r7,#12]
1459:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_XTMODE_Msk);
 3700              	 .loc 2 1459 0
 3701 001c FB68     	 ldr r3,[r7,#12]
 3702 001e 23F4C043 	 bic r3,r3,#24576
 3703 0022 FB60     	 str r3,[r7,#12]
1460:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)trigger_edge << VADC_G_QCTRL0_XTMODE_Pos);
 3704              	 .loc 2 1460 0
 3705 0024 FB78     	 ldrb r3,[r7,#3]
 3706 0026 5B03     	 lsls r3,r3,#13
 3707 0028 FA68     	 ldr r2,[r7,#12]
 3708 002a 1343     	 orrs r3,r3,r2
 3709 002c FB60     	 str r3,[r7,#12]
1461:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 3710              	 .loc 2 1461 0
 3711 002e 7B68     	 ldr r3,[r7,#4]
 3712 0030 FA68     	 ldr r2,[r7,#12]
 3713 0032 C3F80021 	 str r2,[r3,#256]
1462:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3714              	 .loc 2 1462 0
 3715 0036 1437     	 adds r7,r7,#20
 3716              	.LCFI294:
 3717              	 .cfi_def_cfa_offset 4
 3718 0038 BD46     	 mov sp,r7
 3719              	.LCFI295:
 3720              	 .cfi_def_cfa_register 13
 3721              	 
 3722 003a 5DF8047B 	 ldr r7,[sp],#4
 3723              	.LCFI296:
 3724              	 .cfi_restore 7
 3725              	 .cfi_def_cfa_offset 0
 3726 003e 7047     	 bx lr
 3727              	 .cfi_endproc
 3728              	.LFE282:
 3730              	 .section .text.XMC_VADC_GROUP_QueueSelectGating,"ax",%progbits
 3731              	 .align 2
 3732              	 .global XMC_VADC_GROUP_QueueSelectGating
 3733              	 .thumb
 3734              	 .thumb_func
 3736              	XMC_VADC_GROUP_QueueSelectGating:
 3737              	.LFB283:
1463:../Libraries/XMCLib/src/xmc_vadc.c **** 
1464:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 possible trigger gates as a trigger gating signal for queue request 
1465:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
1466:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3738              	 .loc 2 1466 0
 3739              	 .cfi_startproc
 3740              	 
 3741              	 
 3742              	 
 3743 0000 80B4     	 push {r7}
 3744              	.LCFI297:
 3745              	 .cfi_def_cfa_offset 4
 3746              	 .cfi_offset 7,-4
 3747 0002 85B0     	 sub sp,sp,#20
 3748              	.LCFI298:
 3749              	 .cfi_def_cfa_offset 24
 3750 0004 00AF     	 add r7,sp,#0
 3751              	.LCFI299:
 3752              	 .cfi_def_cfa_register 7
 3753 0006 7860     	 str r0,[r7,#4]
 3754 0008 0B46     	 mov r3,r1
 3755 000a FB70     	 strb r3,[r7,#3]
1467:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl;
1468:../Libraries/XMCLib/src/xmc_vadc.c **** 
1469:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectGating:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1470:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectGating:Wrong Gating Port", ((input_num)< XMC_VADC_NUM_PORTS
1471:../Libraries/XMCLib/src/xmc_vadc.c ****   
1472:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the gating input */
1473:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 3756              	 .loc 2 1473 0
 3757 000c 7B68     	 ldr r3,[r7,#4]
 3758 000e D3F80031 	 ldr r3,[r3,#256]
 3759 0012 FB60     	 str r3,[r7,#12]
1474:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)VADC_G_QCTRL0_GTWC_Msk;
 3760              	 .loc 2 1474 0
 3761 0014 FB68     	 ldr r3,[r7,#12]
 3762 0016 43F40003 	 orr r3,r3,#8388608
 3763 001a FB60     	 str r3,[r7,#12]
1475:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_GTSEL_Msk);
 3764              	 .loc 2 1475 0
 3765 001c FB68     	 ldr r3,[r7,#12]
 3766 001e 23F47023 	 bic r3,r3,#983040
 3767 0022 FB60     	 str r3,[r7,#12]
1476:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_GTSEL_Pos);
 3768              	 .loc 2 1476 0
 3769 0024 FB78     	 ldrb r3,[r7,#3]
 3770 0026 1B04     	 lsls r3,r3,#16
 3771 0028 FA68     	 ldr r2,[r7,#12]
 3772 002a 1343     	 orrs r3,r3,r2
 3773 002c FB60     	 str r3,[r7,#12]
1477:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 3774              	 .loc 2 1477 0
 3775 002e 7B68     	 ldr r3,[r7,#4]
 3776 0030 FA68     	 ldr r2,[r7,#12]
 3777 0032 C3F80021 	 str r2,[r3,#256]
1478:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3778              	 .loc 2 1478 0
 3779 0036 1437     	 adds r7,r7,#20
 3780              	.LCFI300:
 3781              	 .cfi_def_cfa_offset 4
 3782 0038 BD46     	 mov sp,r7
 3783              	.LCFI301:
 3784              	 .cfi_def_cfa_register 13
 3785              	 
 3786 003a 5DF8047B 	 ldr r7,[sp],#4
 3787              	.LCFI302:
 3788              	 .cfi_restore 7
 3789              	 .cfi_def_cfa_offset 0
 3790 003e 7047     	 bx lr
 3791              	 .cfi_endproc
 3792              	.LFE283:
 3794              	 .section .text.XMC_VADC_GROUP_QueueGetLength,"ax",%progbits
 3795              	 .align 2
 3796              	 .global XMC_VADC_GROUP_QueueGetLength
 3797              	 .thumb
 3798              	 .thumb_func
 3800              	XMC_VADC_GROUP_QueueGetLength:
 3801              	.LFB284:
1479:../Libraries/XMCLib/src/xmc_vadc.c **** 
1480:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine the number of channels in the queue (length includes the valid channel in the B
1481:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr)
1482:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3802              	 .loc 2 1482 0
 3803              	 .cfi_startproc
 3804              	 
 3805              	 
 3806              	 
 3807 0000 80B4     	 push {r7}
 3808              	.LCFI303:
 3809              	 .cfi_def_cfa_offset 4
 3810              	 .cfi_offset 7,-4
 3811 0002 87B0     	 sub sp,sp,#28
 3812              	.LCFI304:
 3813              	 .cfi_def_cfa_offset 32
 3814 0004 00AF     	 add r7,sp,#0
 3815              	.LCFI305:
 3816              	 .cfi_def_cfa_register 7
 3817 0006 7860     	 str r0,[r7,#4]
1483:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        qsr;
1484:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        qbur0;
1485:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        length;
1486:../Libraries/XMCLib/src/xmc_vadc.c **** 
1487:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetLength:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_pt
1488:../Libraries/XMCLib/src/xmc_vadc.c **** 
1489:../Libraries/XMCLib/src/xmc_vadc.c ****   qsr = group_ptr->QSR0;
 3818              	 .loc 2 1489 0
 3819 0008 7B68     	 ldr r3,[r7,#4]
 3820 000a D3F80831 	 ldr r3,[r3,#264]
 3821 000e 3B61     	 str r3,[r7,#16]
1490:../Libraries/XMCLib/src/xmc_vadc.c ****   qbur0 = group_ptr->QBUR0;
 3822              	 .loc 2 1490 0
 3823 0010 7B68     	 ldr r3,[r7,#4]
 3824 0012 D3F81031 	 ldr r3,[r3,#272]
 3825 0016 FB60     	 str r3,[r7,#12]
1491:../Libraries/XMCLib/src/xmc_vadc.c **** 
1492:../Libraries/XMCLib/src/xmc_vadc.c ****   if (qsr & (uint32_t)VADC_G_QSR0_EMPTY_Msk)
 3826              	 .loc 2 1492 0
 3827 0018 3B69     	 ldr r3,[r7,#16]
 3828 001a 03F02003 	 and r3,r3,#32
 3829 001e 002B     	 cmp r3,#0
 3830 0020 02D0     	 beq .L135
1493:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1494:../Libraries/XMCLib/src/xmc_vadc.c ****     length = 0U;
 3831              	 .loc 2 1494 0
 3832 0022 0023     	 movs r3,#0
 3833 0024 7B61     	 str r3,[r7,#20]
 3834 0026 04E0     	 b .L136
 3835              	.L135:
1495:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1496:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1497:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1498:../Libraries/XMCLib/src/xmc_vadc.c ****     length = (qsr & (uint32_t)VADC_G_QSR0_FILL_Msk) + 1U;
 3836              	 .loc 2 1498 0
 3837 0028 3B69     	 ldr r3,[r7,#16]
 3838 002a 03F00F03 	 and r3,r3,#15
 3839 002e 0133     	 adds r3,r3,#1
 3840 0030 7B61     	 str r3,[r7,#20]
 3841              	.L136:
1499:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1500:../Libraries/XMCLib/src/xmc_vadc.c ****   
1501:../Libraries/XMCLib/src/xmc_vadc.c ****   if (qbur0 & (uint32_t)VADC_G_QBUR0_V_Msk )
 3842              	 .loc 2 1501 0
 3843 0032 FB68     	 ldr r3,[r7,#12]
 3844 0034 03F48073 	 and r3,r3,#256
 3845 0038 002B     	 cmp r3,#0
 3846 003a 02D0     	 beq .L137
1502:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1503:../Libraries/XMCLib/src/xmc_vadc.c ****     length++;
 3847              	 .loc 2 1503 0
 3848 003c 7B69     	 ldr r3,[r7,#20]
 3849 003e 0133     	 adds r3,r3,#1
 3850 0040 7B61     	 str r3,[r7,#20]
 3851              	.L137:
1504:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1505:../Libraries/XMCLib/src/xmc_vadc.c **** 
1506:../Libraries/XMCLib/src/xmc_vadc.c ****   return length;
 3852              	 .loc 2 1506 0
 3853 0042 7B69     	 ldr r3,[r7,#20]
1507:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3854              	 .loc 2 1507 0
 3855 0044 1846     	 mov r0,r3
 3856 0046 1C37     	 adds r7,r7,#28
 3857              	.LCFI306:
 3858              	 .cfi_def_cfa_offset 4
 3859 0048 BD46     	 mov sp,r7
 3860              	.LCFI307:
 3861              	 .cfi_def_cfa_register 13
 3862              	 
 3863 004a 5DF8047B 	 ldr r7,[sp],#4
 3864              	.LCFI308:
 3865              	 .cfi_restore 7
 3866              	 .cfi_def_cfa_offset 0
 3867 004e 7047     	 bx lr
 3868              	 .cfi_endproc
 3869              	.LFE284:
 3871              	 .section .text.XMC_VADC_GROUP_QueueAbortSequence,"ax",%progbits
 3872              	 .align 2
 3873              	 .global XMC_VADC_GROUP_QueueAbortSequence
 3874              	 .thumb
 3875              	 .thumb_func
 3877              	XMC_VADC_GROUP_QueueAbortSequence:
 3878              	.LFB285:
1508:../Libraries/XMCLib/src/xmc_vadc.c **** 
1509:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort ongoing conversion of a channel sequence */
1510:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr)
1511:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3879              	 .loc 2 1511 0
 3880              	 .cfi_startproc
 3881              	 
 3882              	 
 3883 0000 80B5     	 push {r7,lr}
 3884              	.LCFI309:
 3885              	 .cfi_def_cfa_offset 8
 3886              	 .cfi_offset 7,-8
 3887              	 .cfi_offset 14,-4
 3888 0002 84B0     	 sub sp,sp,#16
 3889              	.LCFI310:
 3890              	 .cfi_def_cfa_offset 24
 3891 0004 00AF     	 add r7,sp,#0
 3892              	.LCFI311:
 3893              	 .cfi_def_cfa_register 7
 3894 0006 7860     	 str r0,[r7,#4]
1512:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl0;
1513:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1514:../Libraries/XMCLib/src/xmc_vadc.c **** 
1515:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueAbortSequence:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1516:../Libraries/XMCLib/src/xmc_vadc.c **** 
1517:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable any gating if present*/
1518:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl0 = group_ptr->QCTRL0;
 3895              	 .loc 2 1518 0
 3896 0008 7B68     	 ldr r3,[r7,#4]
 3897 000a D3F80031 	 ldr r3,[r3,#256]
 3898 000e FB60     	 str r3,[r7,#12]
1519:../Libraries/XMCLib/src/xmc_vadc.c **** 
1520:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 =(0U | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 3899              	 .loc 2 1520 0
 3900 0010 7B68     	 ldr r3,[r7,#4]
 3901 0012 144A     	 ldr r2,.L140
 3902 0014 C3F80021 	 str r2,[r3,#256]
1521:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_M
1522:../Libraries/XMCLib/src/xmc_vadc.c ****   
1523:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable the Arbitration 0 in the group before abort*/
1524:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN0_Pos) & 1U);
 3903              	 .loc 2 1524 0
 3904 0018 7B68     	 ldr r3,[r7,#4]
 3905 001a D3F88430 	 ldr r3,[r3,#132]
 3906 001e 1B0E     	 lsrs r3,r3,#24
 3907 0020 03F00103 	 and r3,r3,#1
 3908 0024 002B     	 cmp r3,#0
 3909 0026 14BF     	 ite ne
 3910 0028 0123     	 movne r3,#1
 3911 002a 0023     	 moveq r3,#0
 3912 002c FB72     	 strb r3,[r7,#11]
1525:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 3913              	 .loc 2 1525 0
 3914 002e 7868     	 ldr r0,[r7,#4]
 3915 0030 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1526:../Libraries/XMCLib/src/xmc_vadc.c ****    
1527:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Flush the Entries from queue*/
1528:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueFlushEntries(group_ptr);
 3916              	 .loc 2 1528 0
 3917 0034 7868     	 ldr r0,[r7,#4]
 3918 0036 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueFlushEntries
1529:../Libraries/XMCLib/src/xmc_vadc.c ****   
1530:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the arbitration slot 0*/
1531:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
 3919              	 .loc 2 1531 0
 3920 003a 7B68     	 ldr r3,[r7,#4]
 3921 003c D3F88420 	 ldr r2,[r3,#132]
 3922 0040 FB7A     	 ldrb r3,[r7,#11]
 3923 0042 1B06     	 lsls r3,r3,#24
 3924 0044 1A43     	 orrs r2,r2,r3
 3925 0046 7B68     	 ldr r3,[r7,#4]
 3926 0048 C3F88420 	 str r2,[r3,#132]
1532:../Libraries/XMCLib/src/xmc_vadc.c ****   
1533:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1534:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
1535:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 3927              	 .loc 2 1535 0
 3928 004c FB68     	 ldr r3,[r7,#12]
 3929 004e 43F08023 	 orr r3,r3,#-2147450880
 3930 0052 43F40003 	 orr r3,r3,#8388608
1534:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 3931              	 .loc 2 1534 0
 3932 0056 7A68     	 ldr r2,[r7,#4]
 3933 0058 C2F80031 	 str r3,[r2,#256]
1536:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3934              	 .loc 2 1536 0
 3935 005c 1037     	 adds r7,r7,#16
 3936              	.LCFI312:
 3937              	 .cfi_def_cfa_offset 8
 3938 005e BD46     	 mov sp,r7
 3939              	.LCFI313:
 3940              	 .cfi_def_cfa_register 13
 3941              	 
 3942 0060 80BD     	 pop {r7,pc}
 3943              	.L141:
 3944 0062 00BF     	 .align 2
 3945              	.L140:
 3946 0064 00808080 	 .word -2139062272
 3947              	 .cfi_endproc
 3948              	.LFE285:
 3950              	 .section .text.XMC_VADC_GROUP_QueueRemoveChannel,"ax",%progbits
 3951              	 .align 2
 3952              	 .global XMC_VADC_GROUP_QueueRemoveChannel
 3953              	 .thumb
 3954              	 .thumb_func
 3956              	XMC_VADC_GROUP_QueueRemoveChannel:
 3957              	.LFB286:
1537:../Libraries/XMCLib/src/xmc_vadc.c **** 
1538:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort conversion of the channel queued up next */
1539:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueRemoveChannel(XMC_VADC_GROUP_t *const group_ptr)
1540:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3958              	 .loc 2 1540 0
 3959              	 .cfi_startproc
 3960              	 
 3961              	 
 3962 0000 80B5     	 push {r7,lr}
 3963              	.LCFI314:
 3964              	 .cfi_def_cfa_offset 8
 3965              	 .cfi_offset 7,-8
 3966              	 .cfi_offset 14,-4
 3967 0002 86B0     	 sub sp,sp,#24
 3968              	.LCFI315:
 3969              	 .cfi_def_cfa_offset 32
 3970 0004 00AF     	 add r7,sp,#0
 3971              	.LCFI316:
 3972              	 .cfi_def_cfa_register 7
 3973 0006 7860     	 str r0,[r7,#4]
1541:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t length_before_abort;
1542:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t length_after_abort;
1543:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl0;
1544:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1545:../Libraries/XMCLib/src/xmc_vadc.c **** 
1546:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueRemoveChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1547:../Libraries/XMCLib/src/xmc_vadc.c ****   
1548:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable any gating if present*/
1549:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl0= group_ptr->QCTRL0;
 3974              	 .loc 2 1549 0
 3975 0008 7B68     	 ldr r3,[r7,#4]
 3976 000a D3F80031 	 ldr r3,[r3,#256]
 3977 000e 3B61     	 str r3,[r7,#16]
1550:../Libraries/XMCLib/src/xmc_vadc.c **** 
1551:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 =(0U | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 3978              	 .loc 2 1551 0
 3979 0010 7B68     	 ldr r3,[r7,#4]
 3980 0012 204A     	 ldr r2,.L146
 3981 0014 C3F80021 	 str r2,[r3,#256]
1552:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_M
1553:../Libraries/XMCLib/src/xmc_vadc.c ****   
1554:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable the Arbitration 0 in the group before abort*/
1555:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN0_Pos) & 1U);
 3982              	 .loc 2 1555 0
 3983 0018 7B68     	 ldr r3,[r7,#4]
 3984 001a D3F88430 	 ldr r3,[r3,#132]
 3985 001e 1B0E     	 lsrs r3,r3,#24
 3986 0020 03F00103 	 and r3,r3,#1
 3987 0024 002B     	 cmp r3,#0
 3988 0026 14BF     	 ite ne
 3989 0028 0123     	 movne r3,#1
 3990 002a 0023     	 moveq r3,#0
 3991 002c FB73     	 strb r3,[r7,#15]
1556:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 3992              	 .loc 2 1556 0
 3993 002e 7868     	 ldr r0,[r7,#4]
 3994 0030 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1557:../Libraries/XMCLib/src/xmc_vadc.c **** 
1558:../Libraries/XMCLib/src/xmc_vadc.c ****   length_before_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 3995              	 .loc 2 1558 0
 3996 0034 7868     	 ldr r0,[r7,#4]
 3997 0036 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 3998 003a B860     	 str r0,[r7,#8]
1559:../Libraries/XMCLib/src/xmc_vadc.c **** 
1560:../Libraries/XMCLib/src/xmc_vadc.c ****   if (length_before_abort)
 3999              	 .loc 2 1560 0
 4000 003c BB68     	 ldr r3,[r7,#8]
 4001 003e 002B     	 cmp r3,#0
 4002 0040 14D0     	 beq .L143
1561:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1562:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Remove the first entry of the queue */
1563:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_CLRV_Msk;
 4003              	 .loc 2 1563 0
 4004 0042 7B68     	 ldr r3,[r7,#4]
 4005 0044 D3F80431 	 ldr r3,[r3,#260]
 4006 0048 43F48072 	 orr r2,r3,#256
 4007 004c 7B68     	 ldr r3,[r7,#4]
 4008 004e C3F80421 	 str r2,[r3,#260]
1564:../Libraries/XMCLib/src/xmc_vadc.c **** 
1565:../Libraries/XMCLib/src/xmc_vadc.c ****     length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 4009              	 .loc 2 1565 0
 4010 0052 7868     	 ldr r0,[r7,#4]
 4011 0054 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 4012 0058 7861     	 str r0,[r7,#20]
1566:../Libraries/XMCLib/src/xmc_vadc.c **** 
1567:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Loop until a reduction in queue length is assessed */
1568:../Libraries/XMCLib/src/xmc_vadc.c ****     while(length_after_abort == length_before_abort)
 4013              	 .loc 2 1568 0
 4014 005a 03E0     	 b .L144
 4015              	.L145:
1569:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1570:../Libraries/XMCLib/src/xmc_vadc.c ****       length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 4016              	 .loc 2 1570 0
 4017 005c 7868     	 ldr r0,[r7,#4]
 4018 005e FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 4019 0062 7861     	 str r0,[r7,#20]
 4020              	.L144:
1568:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 4021              	 .loc 2 1568 0
 4022 0064 7A69     	 ldr r2,[r7,#20]
 4023 0066 BB68     	 ldr r3,[r7,#8]
 4024 0068 9A42     	 cmp r2,r3
 4025 006a F7D0     	 beq .L145
 4026              	.L143:
1571:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1572:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1573:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the arbitration slot 0*/
1574:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
 4027              	 .loc 2 1574 0
 4028 006c 7B68     	 ldr r3,[r7,#4]
 4029 006e D3F88420 	 ldr r2,[r3,#132]
 4030 0072 FB7B     	 ldrb r3,[r7,#15]
 4031 0074 1B06     	 lsls r3,r3,#24
 4032 0076 1A43     	 orrs r2,r2,r3
 4033 0078 7B68     	 ldr r3,[r7,#4]
 4034 007a C3F88420 	 str r2,[r3,#132]
1575:../Libraries/XMCLib/src/xmc_vadc.c ****   
1576:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1577:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
1578:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 4035              	 .loc 2 1578 0
 4036 007e 3B69     	 ldr r3,[r7,#16]
 4037 0080 43F08023 	 orr r3,r3,#-2147450880
 4038 0084 43F40003 	 orr r3,r3,#8388608
1577:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 4039              	 .loc 2 1577 0
 4040 0088 7A68     	 ldr r2,[r7,#4]
 4041 008a C2F80031 	 str r3,[r2,#256]
1579:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4042              	 .loc 2 1579 0
 4043 008e 1837     	 adds r7,r7,#24
 4044              	.LCFI317:
 4045              	 .cfi_def_cfa_offset 8
 4046 0090 BD46     	 mov sp,r7
 4047              	.LCFI318:
 4048              	 .cfi_def_cfa_register 13
 4049              	 
 4050 0092 80BD     	 pop {r7,pc}
 4051              	.L147:
 4052              	 .align 2
 4053              	.L146:
 4054 0094 00808080 	 .word -2139062272
 4055              	 .cfi_endproc
 4056              	.LFE286:
 4058              	 .section .text.XMC_VADC_GROUP_QueueGetNextChannel,"ax",%progbits
 4059              	 .align 2
 4060              	 .global XMC_VADC_GROUP_QueueGetNextChannel
 4061              	 .thumb
 4062              	 .thumb_func
 4064              	XMC_VADC_GROUP_QueueGetNextChannel:
 4065              	.LFB287:
1580:../Libraries/XMCLib/src/xmc_vadc.c **** 
1581:../Libraries/XMCLib/src/xmc_vadc.c **** /* Get details of channel meant to be converted right after the ongoing conversion */
1582:../Libraries/XMCLib/src/xmc_vadc.c **** int32_t XMC_VADC_GROUP_QueueGetNextChannel(XMC_VADC_GROUP_t *const group_ptr)
1583:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4066              	 .loc 2 1583 0
 4067              	 .cfi_startproc
 4068              	 
 4069              	 
 4070              	 
 4071 0000 80B4     	 push {r7}
 4072              	.LCFI319:
 4073              	 .cfi_def_cfa_offset 4
 4074              	 .cfi_offset 7,-4
 4075 0002 85B0     	 sub sp,sp,#20
 4076              	.LCFI320:
 4077              	 .cfi_def_cfa_offset 24
 4078 0004 00AF     	 add r7,sp,#0
 4079              	.LCFI321:
 4080              	 .cfi_def_cfa_register 7
 4081 0006 7860     	 str r0,[r7,#4]
1584:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t ch_num;
1585:../Libraries/XMCLib/src/xmc_vadc.c **** 
1586:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetNextChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
1587:../Libraries/XMCLib/src/xmc_vadc.c ****   
1588:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
1589:../Libraries/XMCLib/src/xmc_vadc.c ****    * Check if there is something in the backup stage. If not, read queue-0
1590:../Libraries/XMCLib/src/xmc_vadc.c ****    * entry.
1591:../Libraries/XMCLib/src/xmc_vadc.c ****    */
1592:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( (group_ptr->QBUR0) & (uint32_t)VADC_G_QBUR0_V_Msk)
 4082              	 .loc 2 1592 0
 4083 0008 7B68     	 ldr r3,[r7,#4]
 4084 000a D3F81031 	 ldr r3,[r3,#272]
 4085 000e 03F48073 	 and r3,r3,#256
 4086 0012 002B     	 cmp r3,#0
 4087 0014 06D0     	 beq .L149
1593:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1594:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->QBUR0 & (uint32_t)VADC_G_QBUR0_REQCHNR_Msk);
 4088              	 .loc 2 1594 0
 4089 0016 7B68     	 ldr r3,[r7,#4]
 4090 0018 D3F81031 	 ldr r3,[r3,#272]
 4091 001c 03F01F03 	 and r3,r3,#31
 4092 0020 FB60     	 str r3,[r7,#12]
 4093 0022 10E0     	 b .L150
 4094              	.L149:
1595:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1596:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( (group_ptr->Q0R0) & (uint32_t)VADC_G_Q0R0_V_Msk)
 4095              	 .loc 2 1596 0
 4096 0024 7B68     	 ldr r3,[r7,#4]
 4097 0026 D3F80C31 	 ldr r3,[r3,#268]
 4098 002a 03F48073 	 and r3,r3,#256
 4099 002e 002B     	 cmp r3,#0
 4100 0030 06D0     	 beq .L151
1597:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1598:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->Q0R0 & (uint32_t)VADC_G_Q0R0_REQCHNR_Msk);
 4101              	 .loc 2 1598 0
 4102 0032 7B68     	 ldr r3,[r7,#4]
 4103 0034 D3F80C31 	 ldr r3,[r3,#268]
 4104 0038 03F01F03 	 and r3,r3,#31
 4105 003c FB60     	 str r3,[r7,#12]
 4106 003e 02E0     	 b .L150
 4107              	.L151:
1599:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1600:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1601:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1602:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Nothing is pending */
1603:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = -1;
 4108              	 .loc 2 1603 0
 4109 0040 4FF0FF33 	 mov r3,#-1
 4110 0044 FB60     	 str r3,[r7,#12]
 4111              	.L150:
1604:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1605:../Libraries/XMCLib/src/xmc_vadc.c **** 
1606:../Libraries/XMCLib/src/xmc_vadc.c ****   return ch_num;
 4112              	 .loc 2 1606 0
 4113 0046 FB68     	 ldr r3,[r7,#12]
1607:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4114              	 .loc 2 1607 0
 4115 0048 1846     	 mov r0,r3
 4116 004a 1437     	 adds r7,r7,#20
 4117              	.LCFI322:
 4118              	 .cfi_def_cfa_offset 4
 4119 004c BD46     	 mov sp,r7
 4120              	.LCFI323:
 4121              	 .cfi_def_cfa_register 13
 4122              	 
 4123 004e 5DF8047B 	 ldr r7,[sp],#4
 4124              	.LCFI324:
 4125              	 .cfi_restore 7
 4126              	 .cfi_def_cfa_offset 0
 4127 0052 7047     	 bx lr
 4128              	 .cfi_endproc
 4129              	.LFE287:
 4131              	 .section .text.XMC_VADC_GROUP_QueueGetInterruptedChannel,"ax",%progbits
 4132              	 .align 2
 4133              	 .global XMC_VADC_GROUP_QueueGetInterruptedChannel
 4134              	 .thumb
 4135              	 .thumb_func
 4137              	XMC_VADC_GROUP_QueueGetInterruptedChannel:
 4138              	.LFB288:
1608:../Libraries/XMCLib/src/xmc_vadc.c **** 
1609:../Libraries/XMCLib/src/xmc_vadc.c **** /* Get the channel number of the channel whose conversion had been interrupted */
1610:../Libraries/XMCLib/src/xmc_vadc.c **** int32_t XMC_VADC_GROUP_QueueGetInterruptedChannel(XMC_VADC_GROUP_t *const group_ptr)
1611:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4139              	 .loc 2 1611 0
 4140              	 .cfi_startproc
 4141              	 
 4142              	 
 4143              	 
 4144 0000 80B4     	 push {r7}
 4145              	.LCFI325:
 4146              	 .cfi_def_cfa_offset 4
 4147              	 .cfi_offset 7,-4
 4148 0002 85B0     	 sub sp,sp,#20
 4149              	.LCFI326:
 4150              	 .cfi_def_cfa_offset 24
 4151 0004 00AF     	 add r7,sp,#0
 4152              	.LCFI327:
 4153              	 .cfi_def_cfa_register 7
 4154 0006 7860     	 str r0,[r7,#4]
1612:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t ch_num;
1613:../Libraries/XMCLib/src/xmc_vadc.c **** 
1614:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetInterruptedChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
1615:../Libraries/XMCLib/src/xmc_vadc.c ****   
1616:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((group_ptr->QBUR0) & (uint32_t)VADC_G_QBUR0_V_Msk)
 4155              	 .loc 2 1616 0
 4156 0008 7B68     	 ldr r3,[r7,#4]
 4157 000a D3F81031 	 ldr r3,[r3,#272]
 4158 000e 03F48073 	 and r3,r3,#256
 4159 0012 002B     	 cmp r3,#0
 4160 0014 06D0     	 beq .L154
1617:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1618:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->QBUR0 & (uint32_t)VADC_G_QBUR0_REQCHNR_Msk);
 4161              	 .loc 2 1618 0
 4162 0016 7B68     	 ldr r3,[r7,#4]
 4163 0018 D3F81031 	 ldr r3,[r3,#272]
 4164 001c 03F01F03 	 and r3,r3,#31
 4165 0020 FB60     	 str r3,[r7,#12]
 4166 0022 02E0     	 b .L155
 4167              	.L154:
1619:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1620:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1621:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1622:../Libraries/XMCLib/src/xmc_vadc.c ****     /* No such channel */
1623:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = -1;
 4168              	 .loc 2 1623 0
 4169 0024 4FF0FF33 	 mov r3,#-1
 4170 0028 FB60     	 str r3,[r7,#12]
 4171              	.L155:
1624:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1625:../Libraries/XMCLib/src/xmc_vadc.c **** 
1626:../Libraries/XMCLib/src/xmc_vadc.c ****   return ch_num;
 4172              	 .loc 2 1626 0
 4173 002a FB68     	 ldr r3,[r7,#12]
1627:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4174              	 .loc 2 1627 0
 4175 002c 1846     	 mov r0,r3
 4176 002e 1437     	 adds r7,r7,#20
 4177              	.LCFI328:
 4178              	 .cfi_def_cfa_offset 4
 4179 0030 BD46     	 mov sp,r7
 4180              	.LCFI329:
 4181              	 .cfi_def_cfa_register 13
 4182              	 
 4183 0032 5DF8047B 	 ldr r7,[sp],#4
 4184              	.LCFI330:
 4185              	 .cfi_restore 7
 4186              	 .cfi_def_cfa_offset 0
 4187 0036 7047     	 bx lr
 4188              	 .cfi_endproc
 4189              	.LFE288:
 4191              	 .section .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode,"ax",%progbits
 4192              	 .align 2
 4193              	 .global XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode
 4194              	 .thumb
 4195              	 .thumb_func
 4197              	XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:
 4198              	.LFB289:
1628:../Libraries/XMCLib/src/xmc_vadc.c **** 
1629:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a Service Request line for the request source event */
1630:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_V
1631:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4199              	 .loc 2 1631 0
 4200              	 .cfi_startproc
 4201              	 
 4202              	 
 4203              	 
 4204 0000 80B4     	 push {r7}
 4205              	.LCFI331:
 4206              	 .cfi_def_cfa_offset 4
 4207              	 .cfi_offset 7,-4
 4208 0002 85B0     	 sub sp,sp,#20
 4209              	.LCFI332:
 4210              	 .cfi_def_cfa_offset 24
 4211 0004 00AF     	 add r7,sp,#0
 4212              	.LCFI333:
 4213              	 .cfi_def_cfa_register 7
 4214 0006 7860     	 str r0,[r7,#4]
 4215 0008 0B46     	 mov r3,r1
 4216 000a FB70     	 strb r3,[r7,#3]
1632:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sevnp;
1633:../Libraries/XMCLib/src/xmc_vadc.c **** 
1634:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_
1635:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC
1636:../Libraries/XMCLib/src/xmc_vadc.c **** 
1637:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp = group_ptr->SEVNP;
 4217              	 .loc 2 1637 0
 4218 000c 7B68     	 ldr r3,[r7,#4]
 4219 000e D3F8C031 	 ldr r3,[r3,#448]
 4220 0012 FB60     	 str r3,[r7,#12]
1638:../Libraries/XMCLib/src/xmc_vadc.c **** 
1639:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV0NP_Msk);
 4221              	 .loc 2 1639 0
 4222 0014 FB68     	 ldr r3,[r7,#12]
 4223 0016 23F00F03 	 bic r3,r3,#15
 4224 001a FB60     	 str r3,[r7,#12]
1640:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV0NP_Pos);
 4225              	 .loc 2 1640 0
 4226 001c FB78     	 ldrb r3,[r7,#3]
 4227 001e FA68     	 ldr r2,[r7,#12]
 4228 0020 1343     	 orrs r3,r3,r2
 4229 0022 FB60     	 str r3,[r7,#12]
1641:../Libraries/XMCLib/src/xmc_vadc.c **** 
1642:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SEVNP = sevnp;
 4230              	 .loc 2 1642 0
 4231 0024 7B68     	 ldr r3,[r7,#4]
 4232 0026 FA68     	 ldr r2,[r7,#12]
 4233 0028 C3F8C021 	 str r2,[r3,#448]
1643:../Libraries/XMCLib/src/xmc_vadc.c **** 
1644:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4234              	 .loc 2 1644 0
 4235 002c 1437     	 adds r7,r7,#20
 4236              	.LCFI334:
 4237              	 .cfi_def_cfa_offset 4
 4238 002e BD46     	 mov sp,r7
 4239              	.LCFI335:
 4240              	 .cfi_def_cfa_register 13
 4241              	 
 4242 0030 5DF8047B 	 ldr r7,[sp],#4
 4243              	.LCFI336:
 4244              	 .cfi_restore 7
 4245              	 .cfi_def_cfa_offset 0
 4246 0034 7047     	 bx lr
 4247              	 .cfi_endproc
 4248              	.LFE289:
 4250 0036 00BF     	 .section .text.XMC_VADC_GROUP_ChannelInit,"ax",%progbits
 4251              	 .align 2
 4252              	 .global XMC_VADC_GROUP_ChannelInit
 4253              	 .thumb
 4254              	 .thumb_func
 4256              	XMC_VADC_GROUP_ChannelInit:
 4257              	.LFB290:
1645:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1646:../Libraries/XMCLib/src/xmc_vadc.c **** 
1647:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1648:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize a channel unit */
1649:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
1650:../Libraries/XMCLib/src/xmc_vadc.c ****                                         const XMC_VADC_CHANNEL_CONFIG_t *config)
1651:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4258              	 .loc 2 1651 0
 4259              	 .cfi_startproc
 4260              	 
 4261              	 
 4262              	 
 4263 0000 80B4     	 push {r7}
 4264              	.LCFI337:
 4265              	 .cfi_def_cfa_offset 4
 4266              	 .cfi_offset 7,-4
 4267 0002 89B0     	 sub sp,sp,#36
 4268              	.LCFI338:
 4269              	 .cfi_def_cfa_offset 40
 4270 0004 00AF     	 add r7,sp,#0
 4271              	.LCFI339:
 4272              	 .cfi_def_cfa_register 7
 4273 0006 F860     	 str r0,[r7,#12]
 4274 0008 B960     	 str r1,[r7,#8]
 4275 000a 7A60     	 str r2,[r7,#4]
1652:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t prio;
1653:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ch_assign;
1654:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
1655:../Libraries/XMCLib/src/xmc_vadc.c **** 
1656:../Libraries/XMCLib/src/xmc_vadc.c **** 
1657:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1658:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_P
1659:../Libraries/XMCLib/src/xmc_vadc.c ****   
1660:../Libraries/XMCLib/src/xmc_vadc.c ****   prio  = (uint32_t)config->channel_priority;
 4276              	 .loc 2 1660 0
 4277 000c 7B68     	 ldr r3,[r7,#4]
 4278 000e 1B7B     	 ldrb r3,[r3,#12]
 4279 0010 BB61     	 str r3,[r7,#24]
1661:../Libraries/XMCLib/src/xmc_vadc.c **** 
1662:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Priority channel */
1663:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign  = group_ptr->CHASS;
 4280              	 .loc 2 1663 0
 4281 0012 FB68     	 ldr r3,[r7,#12]
 4282 0014 D3F88830 	 ldr r3,[r3,#136]
 4283 0018 7B61     	 str r3,[r7,#20]
1664:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 4284              	 .loc 2 1664 0
 4285 001a BB68     	 ldr r3,[r7,#8]
 4286 001c 0122     	 movs r2,#1
 4287 001e 02FA03F3 	 lsl r3,r2,r3
 4288 0022 DB43     	 mvns r3,r3
 4289 0024 7A69     	 ldr r2,[r7,#20]
 4290 0026 1340     	 ands r3,r3,r2
 4291 0028 7B61     	 str r3,[r7,#20]
1665:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign |= (uint32_t)(prio << ch_num);
 4292              	 .loc 2 1665 0
 4293 002a BB68     	 ldr r3,[r7,#8]
 4294 002c BA69     	 ldr r2,[r7,#24]
 4295 002e 02FA03F3 	 lsl r3,r2,r3
 4296 0032 7A69     	 ldr r2,[r7,#20]
 4297 0034 1343     	 orrs r3,r3,r2
 4298 0036 7B61     	 str r3,[r7,#20]
1666:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHASS = ch_assign;
 4299              	 .loc 2 1666 0
 4300 0038 FB68     	 ldr r3,[r7,#12]
 4301 003a 7A69     	 ldr r2,[r7,#20]
 4302 003c C3F88820 	 str r2,[r3,#136]
1667:../Libraries/XMCLib/src/xmc_vadc.c **** 
1668:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Alias channel */
1669:../Libraries/XMCLib/src/xmc_vadc.c ****   if (config->alias_channel >= (int32_t)0)
 4303              	 .loc 2 1669 0
 4304 0040 7B68     	 ldr r3,[r7,#4]
 4305 0042 5B7B     	 ldrb r3,[r3,#13]
 4306 0044 5BB2     	 sxtb r3,r3
 4307 0046 002B     	 cmp r3,#0
 4308 0048 29DB     	 blt .L159
1670:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1671:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)0;
 4309              	 .loc 2 1671 0
 4310 004a 0023     	 movs r3,#0
 4311 004c FB61     	 str r3,[r7,#28]
1672:../Libraries/XMCLib/src/xmc_vadc.c ****     if ((uint32_t)1 == ch_num)
 4312              	 .loc 2 1672 0
 4313 004e BB68     	 ldr r3,[r7,#8]
 4314 0050 012B     	 cmp r3,#1
 4315 0052 0AD1     	 bne .L160
1673:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1674:../Libraries/XMCLib/src/xmc_vadc.c ****       mask = VADC_G_ALIAS_ALIAS1_Pos;
 4316              	 .loc 2 1674 0
 4317 0054 0823     	 movs r3,#8
 4318 0056 FB61     	 str r3,[r7,#28]
1675:../Libraries/XMCLib/src/xmc_vadc.c ****       group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 4319              	 .loc 2 1675 0
 4320 0058 FB68     	 ldr r3,[r7,#12]
 4321 005a D3F8B030 	 ldr r3,[r3,#176]
 4322 005e 23F4F852 	 bic r2,r3,#7936
 4323 0062 FB68     	 ldr r3,[r7,#12]
 4324 0064 C3F8B020 	 str r2,[r3,#176]
 4325 0068 0CE0     	 b .L161
 4326              	.L160:
1676:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1677:../Libraries/XMCLib/src/xmc_vadc.c ****     else if ((uint32_t)0 == ch_num)
 4327              	 .loc 2 1677 0
 4328 006a BB68     	 ldr r3,[r7,#8]
 4329 006c 002B     	 cmp r3,#0
 4330 006e 09D1     	 bne .L161
1678:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1679:../Libraries/XMCLib/src/xmc_vadc.c ****       mask = VADC_G_ALIAS_ALIAS0_Pos;
 4331              	 .loc 2 1679 0
 4332 0070 0023     	 movs r3,#0
 4333 0072 FB61     	 str r3,[r7,#28]
1680:../Libraries/XMCLib/src/xmc_vadc.c ****       group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 4334              	 .loc 2 1680 0
 4335 0074 FB68     	 ldr r3,[r7,#12]
 4336 0076 D3F8B030 	 ldr r3,[r3,#176]
 4337 007a 23F01F02 	 bic r2,r3,#31
 4338 007e FB68     	 ldr r3,[r7,#12]
 4339 0080 C3F8B020 	 str r2,[r3,#176]
 4340              	.L161:
1681:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1682:../Libraries/XMCLib/src/xmc_vadc.c **** 
1683:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 4341              	 .loc 2 1683 0
 4342 0084 FB68     	 ldr r3,[r7,#12]
 4343 0086 D3F8B030 	 ldr r3,[r3,#176]
 4344 008a 7A68     	 ldr r2,[r7,#4]
 4345 008c 527B     	 ldrb r2,[r2,#13]
 4346 008e 51B2     	 sxtb r1,r2
 4347 0090 FA69     	 ldr r2,[r7,#28]
 4348 0092 01FA02F2 	 lsl r2,r1,r2
 4349 0096 1A43     	 orrs r2,r2,r3
 4350 0098 FB68     	 ldr r3,[r7,#12]
 4351 009a C3F8B020 	 str r2,[r3,#176]
 4352              	.L159:
1684:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1685:../Libraries/XMCLib/src/xmc_vadc.c **** 
1686:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFL |= config->bfl;
 4353              	 .loc 2 1686 0
 4354 009e FB68     	 ldr r3,[r7,#12]
 4355 00a0 D3F8C820 	 ldr r2,[r3,#200]
 4356 00a4 7B68     	 ldr r3,[r7,#4]
 4357 00a6 5B68     	 ldr r3,[r3,#4]
 4358 00a8 1A43     	 orrs r2,r2,r3
 4359 00aa FB68     	 ldr r3,[r7,#12]
 4360 00ac C3F8C820 	 str r2,[r3,#200]
1687:../Libraries/XMCLib/src/xmc_vadc.c **** 
1688:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
1689:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLC |= config->bflc;
 4361              	 .loc 2 1689 0
 4362 00b0 FB68     	 ldr r3,[r7,#12]
 4363 00b2 D3F8D020 	 ldr r2,[r3,#208]
 4364 00b6 7B68     	 ldr r3,[r7,#4]
 4365 00b8 9B68     	 ldr r3,[r3,#8]
 4366 00ba 1A43     	 orrs r2,r2,r3
 4367 00bc FB68     	 ldr r3,[r7,#12]
 4368 00be C3F8D020 	 str r2,[r3,#208]
1690:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1691:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the CHCTR register */
1692:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = config->chctr;
 4369              	 .loc 2 1692 0
 4370 00c2 7B68     	 ldr r3,[r7,#4]
 4371 00c4 1968     	 ldr r1,[r3]
 4372 00c6 FB68     	 ldr r3,[r7,#12]
 4373 00c8 BA68     	 ldr r2,[r7,#8]
 4374 00ca 8032     	 adds r2,r2,#128
 4375 00cc 43F82210 	 str r1,[r3,r2,lsl#2]
1693:../Libraries/XMCLib/src/xmc_vadc.c **** 
1694:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4376              	 .loc 2 1694 0
 4377 00d0 2437     	 adds r7,r7,#36
 4378              	.LCFI340:
 4379              	 .cfi_def_cfa_offset 4
 4380 00d2 BD46     	 mov sp,r7
 4381              	.LCFI341:
 4382              	 .cfi_def_cfa_register 13
 4383              	 
 4384 00d4 5DF8047B 	 ldr r7,[sp],#4
 4385              	.LCFI342:
 4386              	 .cfi_restore 7
 4387              	 .cfi_def_cfa_offset 0
 4388 00d8 7047     	 bx lr
 4389              	 .cfi_endproc
 4390              	.LFE290:
 4392 00da 00BF     	 .section .text.XMC_VADC_GROUP_SetChannelAlias,"ax",%progbits
 4393              	 .align 2
 4394              	 .global XMC_VADC_GROUP_SetChannelAlias
 4395              	 .thumb
 4396              	 .thumb_func
 4398              	XMC_VADC_GROUP_SetChannelAlias:
 4399              	.LFB291:
1695:../Libraries/XMCLib/src/xmc_vadc.c **** 
1696:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an alias channel for channels numbered 2 through 7 */
1697:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetChannelAlias(XMC_VADC_GROUP_t *const group_ptr,
1698:../Libraries/XMCLib/src/xmc_vadc.c ****                                     const uint32_t src_ch_num,
1699:../Libraries/XMCLib/src/xmc_vadc.c ****                                     const uint32_t alias_ch_num)
1700:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4400              	 .loc 2 1700 0
 4401              	 .cfi_startproc
 4402              	 
 4403              	 
 4404              	 
 4405 0000 80B4     	 push {r7}
 4406              	.LCFI343:
 4407              	 .cfi_def_cfa_offset 4
 4408              	 .cfi_offset 7,-4
 4409 0002 89B0     	 sub sp,sp,#36
 4410              	.LCFI344:
 4411              	 .cfi_def_cfa_offset 40
 4412 0004 00AF     	 add r7,sp,#0
 4413              	.LCFI345:
 4414              	 .cfi_def_cfa_register 7
 4415 0006 F860     	 str r0,[r7,#12]
 4416 0008 B960     	 str r1,[r7,#8]
 4417 000a 7A60     	 str r2,[r7,#4]
1701:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t alias;
1702:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
1703:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t pos;
1704:../Libraries/XMCLib/src/xmc_vadc.c **** 
1705:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
1706:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Alias Channel", ((alias_ch_num == 0)|| (alias_ch
1707:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Aliased Channel", ((src_ch_num < 8U)))
1708:../Libraries/XMCLib/src/xmc_vadc.c **** 
1709:../Libraries/XMCLib/src/xmc_vadc.c ****   alias = group_ptr->ALIAS;
 4418              	 .loc 2 1709 0
 4419 000c FB68     	 ldr r3,[r7,#12]
 4420 000e D3F8B030 	 ldr r3,[r3,#176]
 4421 0012 7B61     	 str r3,[r7,#20]
1710:../Libraries/XMCLib/src/xmc_vadc.c **** 
1711:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == alias_ch_num)
 4422              	 .loc 2 1711 0
 4423 0014 7B68     	 ldr r3,[r7,#4]
 4424 0016 002B     	 cmp r3,#0
 4425 0018 04D1     	 bne .L163
1712:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1713:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t) VADC_G_ALIAS_ALIAS0_Msk;
 4426              	 .loc 2 1713 0
 4427 001a 1F23     	 movs r3,#31
 4428 001c FB61     	 str r3,[r7,#28]
1714:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t) VADC_G_ALIAS_ALIAS0_Pos;
 4429              	 .loc 2 1714 0
 4430 001e 0023     	 movs r3,#0
 4431 0020 BB61     	 str r3,[r7,#24]
 4432 0022 04E0     	 b .L164
 4433              	.L163:
1715:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1716:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1717:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1718:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t) VADC_G_ALIAS_ALIAS1_Msk;
 4434              	 .loc 2 1718 0
 4435 0024 4FF4F853 	 mov r3,#7936
 4436 0028 FB61     	 str r3,[r7,#28]
1719:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t) VADC_G_ALIAS_ALIAS1_Pos;
 4437              	 .loc 2 1719 0
 4438 002a 0823     	 movs r3,#8
 4439 002c BB61     	 str r3,[r7,#24]
 4440              	.L164:
1720:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1721:../Libraries/XMCLib/src/xmc_vadc.c ****   alias &= ~mask;
 4441              	 .loc 2 1721 0
 4442 002e FB69     	 ldr r3,[r7,#28]
 4443 0030 DB43     	 mvns r3,r3
 4444 0032 7A69     	 ldr r2,[r7,#20]
 4445 0034 1340     	 ands r3,r3,r2
 4446 0036 7B61     	 str r3,[r7,#20]
1722:../Libraries/XMCLib/src/xmc_vadc.c ****   alias |= (uint32_t)(src_ch_num << pos);
 4447              	 .loc 2 1722 0
 4448 0038 BB69     	 ldr r3,[r7,#24]
 4449 003a BA68     	 ldr r2,[r7,#8]
 4450 003c 02FA03F3 	 lsl r3,r2,r3
 4451 0040 7A69     	 ldr r2,[r7,#20]
 4452 0042 1343     	 orrs r3,r3,r2
 4453 0044 7B61     	 str r3,[r7,#20]
1723:../Libraries/XMCLib/src/xmc_vadc.c **** 
1724:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ALIAS = alias;
 4454              	 .loc 2 1724 0
 4455 0046 FB68     	 ldr r3,[r7,#12]
 4456 0048 7A69     	 ldr r2,[r7,#20]
 4457 004a C3F8B020 	 str r2,[r3,#176]
1725:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4458              	 .loc 2 1725 0
 4459 004e 2437     	 adds r7,r7,#36
 4460              	.LCFI346:
 4461              	 .cfi_def_cfa_offset 4
 4462 0050 BD46     	 mov sp,r7
 4463              	.LCFI347:
 4464              	 .cfi_def_cfa_register 13
 4465              	 
 4466 0052 5DF8047B 	 ldr r7,[sp],#4
 4467              	.LCFI348:
 4468              	 .cfi_restore 7
 4469              	 .cfi_def_cfa_offset 0
 4470 0056 7047     	 bx lr
 4471              	 .cfi_endproc
 4472              	.LFE291:
 4474              	 .section .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds,"ax",%progbits
 4475              	 .align 2
 4476              	 .global XMC_VADC_GROUP_ChannelIsResultOutOfBounds
 4477              	 .thumb
 4478              	 .thumb_func
 4480              	XMC_VADC_GROUP_ChannelIsResultOutOfBounds:
 4481              	.LFB292:
1726:../Libraries/XMCLib/src/xmc_vadc.c **** 
1727:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine whether input to a channel has violated boundary conditions */
1728:../Libraries/XMCLib/src/xmc_vadc.c **** bool XMC_VADC_GROUP_ChannelIsResultOutOfBounds(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch
1729:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4482              	 .loc 2 1729 0
 4483              	 .cfi_startproc
 4484              	 
 4485              	 
 4486              	 
 4487 0000 80B4     	 push {r7}
 4488              	.LCFI349:
 4489              	 .cfi_def_cfa_offset 4
 4490              	 .cfi_offset 7,-4
 4491 0002 87B0     	 sub sp,sp,#28
 4492              	.LCFI350:
 4493              	 .cfi_def_cfa_offset 32
 4494 0004 00AF     	 add r7,sp,#0
 4495              	.LCFI351:
 4496              	 .cfi_def_cfa_register 7
 4497 0006 7860     	 str r0,[r7,#4]
 4498 0008 3960     	 str r1,[r7]
1730:../Libraries/XMCLib/src/xmc_vadc.c ****   bool retval;
1731:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    chctr;
1732:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    ceflag;
1733:../Libraries/XMCLib/src/xmc_vadc.c **** 
1734:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelIsResultOutOfBounds:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
1735:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelIsResultOutOfBounds:Wrong Channel Number",
1736:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1737:../Libraries/XMCLib/src/xmc_vadc.c **** 
1738:../Libraries/XMCLib/src/xmc_vadc.c ****   retval = (bool)false;
 4499              	 .loc 2 1738 0
 4500 000a 0023     	 movs r3,#0
 4501 000c FB75     	 strb r3,[r7,#23]
1739:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
1740:../Libraries/XMCLib/src/xmc_vadc.c ****     Check if the Channel event is configured to be generated in the event of
1741:../Libraries/XMCLib/src/xmc_vadc.c ****     boundary violation and if affirmative, check if the channel event is set.
1742:../Libraries/XMCLib/src/xmc_vadc.c ****   */
1743:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract CHEVMODE for requested channel */
1744:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = group_ptr->CHCTR[ch_num];
 4502              	 .loc 2 1744 0
 4503 000e 7B68     	 ldr r3,[r7,#4]
 4504 0010 3A68     	 ldr r2,[r7]
 4505 0012 8032     	 adds r2,r2,#128
 4506 0014 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4507 0018 3B61     	 str r3,[r7,#16]
1745:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = (uint32_t)(chctr >> (uint32_t)VADC_G_CHCTR_CHEVMODE_Pos)& (uint32_t)0x3;
 4508              	 .loc 2 1745 0
 4509 001a 3B69     	 ldr r3,[r7,#16]
 4510 001c 1B0A     	 lsrs r3,r3,#8
 4511 001e 03F00303 	 and r3,r3,#3
 4512 0022 3B61     	 str r3,[r7,#16]
1746:../Libraries/XMCLib/src/xmc_vadc.c **** 
1747:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract CEFLAG for the requested channel */
1748:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag = group_ptr->CEFLAG;
 4513              	 .loc 2 1748 0
 4514 0024 7B68     	 ldr r3,[r7,#4]
 4515 0026 D3F88031 	 ldr r3,[r3,#384]
 4516 002a FB60     	 str r3,[r7,#12]
1749:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag = ceflag & ((uint32_t)((uint32_t)1 << ch_num) );
 4517              	 .loc 2 1749 0
 4518 002c 3B68     	 ldr r3,[r7]
 4519 002e 0122     	 movs r2,#1
 4520 0030 02FA03F3 	 lsl r3,r2,r3
 4521 0034 FA68     	 ldr r2,[r7,#12]
 4522 0036 1340     	 ands r3,r3,r2
 4523 0038 FB60     	 str r3,[r7,#12]
1750:../Libraries/XMCLib/src/xmc_vadc.c **** 
1751:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Check what was the channel event generation criteria */
1752:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( (( (uint32_t)XMC_VADC_CHANNEL_EVGEN_INBOUND == chctr) \
 4524              	 .loc 2 1752 0
 4525 003a 3B69     	 ldr r3,[r7,#16]
 4526 003c 012B     	 cmp r3,#1
 4527 003e 02D0     	 beq .L166
1753:../Libraries/XMCLib/src/xmc_vadc.c ****       || ((uint32_t) XMC_VADC_CHANNEL_EVGEN_OUTBOUND == chctr)) && (ceflag) )
 4528              	 .loc 2 1753 0
 4529 0040 3B69     	 ldr r3,[r7,#16]
 4530 0042 022B     	 cmp r3,#2
 4531 0044 04D1     	 bne .L167
 4532              	.L166:
 4533              	 .loc 2 1753 0 is_stmt 0 discriminator 1
 4534 0046 FB68     	 ldr r3,[r7,#12]
 4535 0048 002B     	 cmp r3,#0
 4536 004a 01D0     	 beq .L167
1754:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1755:../Libraries/XMCLib/src/xmc_vadc.c ****     retval = (bool)true;
 4537              	 .loc 2 1755 0 is_stmt 1
 4538 004c 0123     	 movs r3,#1
 4539 004e FB75     	 strb r3,[r7,#23]
 4540              	.L167:
1756:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1757:../Libraries/XMCLib/src/xmc_vadc.c **** 
1758:../Libraries/XMCLib/src/xmc_vadc.c ****   return retval;
 4541              	 .loc 2 1758 0
 4542 0050 FB7D     	 ldrb r3,[r7,#23]
1759:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4543              	 .loc 2 1759 0
 4544 0052 1846     	 mov r0,r3
 4545 0054 1C37     	 adds r7,r7,#28
 4546              	.LCFI352:
 4547              	 .cfi_def_cfa_offset 4
 4548 0056 BD46     	 mov sp,r7
 4549              	.LCFI353:
 4550              	 .cfi_def_cfa_register 13
 4551              	 
 4552 0058 5DF8047B 	 ldr r7,[sp],#4
 4553              	.LCFI354:
 4554              	 .cfi_restore 7
 4555              	 .cfi_def_cfa_offset 0
 4556 005c 7047     	 bx lr
 4557              	 .cfi_endproc
 4558              	.LFE292:
 4560 005e 00BF     	 .section .text.XMC_VADC_GROUP_ChannelSetInputReference,"ax",%progbits
 4561              	 .align 2
 4562              	 .global XMC_VADC_GROUP_ChannelSetInputReference
 4563              	 .thumb
 4564              	 .thumb_func
 4566              	XMC_VADC_GROUP_ChannelSetInputReference:
 4567              	.LFB293:
1760:../Libraries/XMCLib/src/xmc_vadc.c **** 
1761:../Libraries/XMCLib/src/xmc_vadc.c **** /* Set a reference voltage for conversion */
1762:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetInputReference(XMC_VADC_GROUP_t *const group_ptr,
1763:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t ch_num,
1764:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const XMC_VADC_CHANNEL_REF_t ref)
1765:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4568              	 .loc 2 1765 0
 4569              	 .cfi_startproc
 4570              	 
 4571              	 
 4572              	 
 4573 0000 80B4     	 push {r7}
 4574              	.LCFI355:
 4575              	 .cfi_def_cfa_offset 4
 4576              	 .cfi_offset 7,-4
 4577 0002 87B0     	 sub sp,sp,#28
 4578              	.LCFI356:
 4579              	 .cfi_def_cfa_offset 32
 4580 0004 00AF     	 add r7,sp,#0
 4581              	.LCFI357:
 4582              	 .cfi_def_cfa_register 7
 4583 0006 F860     	 str r0,[r7,#12]
 4584 0008 B960     	 str r1,[r7,#8]
 4585 000a 1346     	 mov r3,r2
 4586 000c FB71     	 strb r3,[r7,#7]
1766:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1767:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1768:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Channel Number", ((ch_num) < XMC_VADC_N
1769:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Voltage Reference", ((ref)<= XMC_VADC_C
1770:../Libraries/XMCLib/src/xmc_vadc.c **** 
1771:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 4587              	 .loc 2 1771 0
 4588 000e FB68     	 ldr r3,[r7,#12]
 4589 0010 BA68     	 ldr r2,[r7,#8]
 4590 0012 8032     	 adds r2,r2,#128
 4591 0014 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4592 0018 7B61     	 str r3,[r7,#20]
1772:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_REFSEL_Msk);
 4593              	 .loc 2 1772 0
 4594 001a 7B69     	 ldr r3,[r7,#20]
 4595 001c 23F40063 	 bic r3,r3,#2048
 4596 0020 7B61     	 str r3,[r7,#20]
1773:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)ref <<  VADC_G_CHCTR_REFSEL_Pos);
 4597              	 .loc 2 1773 0
 4598 0022 FB79     	 ldrb r3,[r7,#7]
 4599 0024 DB02     	 lsls r3,r3,#11
 4600 0026 7A69     	 ldr r2,[r7,#20]
 4601 0028 1343     	 orrs r3,r3,r2
 4602 002a 7B61     	 str r3,[r7,#20]
1774:../Libraries/XMCLib/src/xmc_vadc.c **** 
1775:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 4603              	 .loc 2 1775 0
 4604 002c FB68     	 ldr r3,[r7,#12]
 4605 002e BA68     	 ldr r2,[r7,#8]
 4606 0030 8032     	 adds r2,r2,#128
 4607 0032 7969     	 ldr r1,[r7,#20]
 4608 0034 43F82210 	 str r1,[r3,r2,lsl#2]
1776:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4609              	 .loc 2 1776 0
 4610 0038 1C37     	 adds r7,r7,#28
 4611              	.LCFI358:
 4612              	 .cfi_def_cfa_offset 4
 4613 003a BD46     	 mov sp,r7
 4614              	.LCFI359:
 4615              	 .cfi_def_cfa_register 13
 4616              	 
 4617 003c 5DF8047B 	 ldr r7,[sp],#4
 4618              	.LCFI360:
 4619              	 .cfi_restore 7
 4620              	 .cfi_def_cfa_offset 0
 4621 0040 7047     	 bx lr
 4622              	 .cfi_endproc
 4623              	.LFE293:
 4625 0042 00BF     	 .section .text.XMC_VADC_GROUP_ChannelSetResultRegister,"ax",%progbits
 4626              	 .align 2
 4627              	 .global XMC_VADC_GROUP_ChannelSetResultRegister
 4628              	 .thumb
 4629              	 .thumb_func
 4631              	XMC_VADC_GROUP_ChannelSetResultRegister:
 4632              	.LFB294:
1777:../Libraries/XMCLib/src/xmc_vadc.c **** 
1778:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the available 16 registers for storing the channel result */
1779:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetResultRegister(XMC_VADC_GROUP_t *const group_ptr,
1780:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t ch_num,
1781:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t result_reg_num)
1782:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4633              	 .loc 2 1782 0
 4634              	 .cfi_startproc
 4635              	 
 4636              	 
 4637              	 
 4638 0000 80B4     	 push {r7}
 4639              	.LCFI361:
 4640              	 .cfi_def_cfa_offset 4
 4641              	 .cfi_offset 7,-4
 4642 0002 87B0     	 sub sp,sp,#28
 4643              	.LCFI362:
 4644              	 .cfi_def_cfa_offset 32
 4645 0004 00AF     	 add r7,sp,#0
 4646              	.LCFI363:
 4647              	 .cfi_def_cfa_register 7
 4648 0006 F860     	 str r0,[r7,#12]
 4649 0008 B960     	 str r1,[r7,#8]
 4650 000a 7A60     	 str r2,[r7,#4]
1783:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1784:../Libraries/XMCLib/src/xmc_vadc.c **** 
1785:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1786:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Channel Number",
1787:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1788:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Result Register",
1789:../Libraries/XMCLib/src/xmc_vadc.c ****              ((result_reg_num) < XMC_VADC_NUM_RESULT_REGISTERS))
1790:../Libraries/XMCLib/src/xmc_vadc.c **** 
1791:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 4651              	 .loc 2 1791 0
 4652 000c FB68     	 ldr r3,[r7,#12]
 4653 000e BA68     	 ldr r2,[r7,#8]
 4654 0010 8032     	 adds r2,r2,#128
 4655 0012 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4656 0016 7B61     	 str r3,[r7,#20]
1792:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_RESREG_Msk);
 4657              	 .loc 2 1792 0
 4658 0018 7B69     	 ldr r3,[r7,#20]
 4659 001a 23F47023 	 bic r3,r3,#983040
 4660 001e 7B61     	 str r3,[r7,#20]
1793:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)(result_reg_num <<  VADC_G_CHCTR_RESREG_Pos);
 4661              	 .loc 2 1793 0
 4662 0020 7B68     	 ldr r3,[r7,#4]
 4663 0022 1B04     	 lsls r3,r3,#16
 4664 0024 7A69     	 ldr r2,[r7,#20]
 4665 0026 1343     	 orrs r3,r3,r2
 4666 0028 7B61     	 str r3,[r7,#20]
1794:../Libraries/XMCLib/src/xmc_vadc.c **** 
1795:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 4667              	 .loc 2 1795 0
 4668 002a FB68     	 ldr r3,[r7,#12]
 4669 002c BA68     	 ldr r2,[r7,#8]
 4670 002e 8032     	 adds r2,r2,#128
 4671 0030 7969     	 ldr r1,[r7,#20]
 4672 0032 43F82210 	 str r1,[r3,r2,lsl#2]
1796:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4673              	 .loc 2 1796 0
 4674 0036 1C37     	 adds r7,r7,#28
 4675              	.LCFI364:
 4676              	 .cfi_def_cfa_offset 4
 4677 0038 BD46     	 mov sp,r7
 4678              	.LCFI365:
 4679              	 .cfi_def_cfa_register 13
 4680              	 
 4681 003a 5DF8047B 	 ldr r7,[sp],#4
 4682              	.LCFI366:
 4683              	 .cfi_restore 7
 4684              	 .cfi_def_cfa_offset 0
 4685 003e 7047     	 bx lr
 4686              	 .cfi_endproc
 4687              	.LFE294:
 4689              	 .section .text.XMC_VADC_GROUP_ChannelSetIclass,"ax",%progbits
 4690              	 .align 2
 4691              	 .global XMC_VADC_GROUP_ChannelSetIclass
 4692              	 .thumb
 4693              	 .thumb_func
 4695              	XMC_VADC_GROUP_ChannelSetIclass:
 4696              	.LFB295:
1797:../Libraries/XMCLib/src/xmc_vadc.c **** 
1798:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the available 4 class conversion */
1799:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetIclass(XMC_VADC_GROUP_t *const group_ptr,
1800:../Libraries/XMCLib/src/xmc_vadc.c ****                                      const uint32_t ch_num,
1801:../Libraries/XMCLib/src/xmc_vadc.c ****                                      const XMC_VADC_CHANNEL_CONV_t conversion_class)
1802:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4697              	 .loc 2 1802 0
 4698              	 .cfi_startproc
 4699              	 
 4700              	 
 4701              	 
 4702 0000 80B4     	 push {r7}
 4703              	.LCFI367:
 4704              	 .cfi_def_cfa_offset 4
 4705              	 .cfi_offset 7,-4
 4706 0002 87B0     	 sub sp,sp,#28
 4707              	.LCFI368:
 4708              	 .cfi_def_cfa_offset 32
 4709 0004 00AF     	 add r7,sp,#0
 4710              	.LCFI369:
 4711              	 .cfi_def_cfa_register 7
 4712 0006 F860     	 str r0,[r7,#12]
 4713 0008 B960     	 str r1,[r7,#8]
 4714 000a 1346     	 mov r3,r2
 4715 000c FB71     	 strb r3,[r7,#7]
1803:../Libraries/XMCLib/src/xmc_vadc.c **** 
1804:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1805:../Libraries/XMCLib/src/xmc_vadc.c **** 
1806:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
1807:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong Channel Number",
1808:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1809:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong input class ",
1810:../Libraries/XMCLib/src/xmc_vadc.c ****              (XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1 >= conversion_class))
1811:../Libraries/XMCLib/src/xmc_vadc.c **** 
1812:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 4716              	 .loc 2 1812 0
 4717 000e FB68     	 ldr r3,[r7,#12]
 4718 0010 BA68     	 ldr r2,[r7,#8]
 4719 0012 8032     	 adds r2,r2,#128
 4720 0014 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4721 0018 7B61     	 str r3,[r7,#20]
1813:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_ICLSEL_Msk);
 4722              	 .loc 2 1813 0
 4723 001a 7B69     	 ldr r3,[r7,#20]
 4724 001c 23F00303 	 bic r3,r3,#3
 4725 0020 7B61     	 str r3,[r7,#20]
1814:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)conversion_class <<  (uint32_t)VADC_G_CHCTR_ICLSEL_Pos);
 4726              	 .loc 2 1814 0
 4727 0022 FB79     	 ldrb r3,[r7,#7]
 4728 0024 7A69     	 ldr r2,[r7,#20]
 4729 0026 1343     	 orrs r3,r3,r2
 4730 0028 7B61     	 str r3,[r7,#20]
1815:../Libraries/XMCLib/src/xmc_vadc.c **** 
1816:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 4731              	 .loc 2 1816 0
 4732 002a FB68     	 ldr r3,[r7,#12]
 4733 002c BA68     	 ldr r2,[r7,#8]
 4734 002e 8032     	 adds r2,r2,#128
 4735 0030 7969     	 ldr r1,[r7,#20]
 4736 0032 43F82210 	 str r1,[r3,r2,lsl#2]
1817:../Libraries/XMCLib/src/xmc_vadc.c **** 
1818:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4737              	 .loc 2 1818 0
 4738 0036 1C37     	 adds r7,r7,#28
 4739              	.LCFI370:
 4740              	 .cfi_def_cfa_offset 4
 4741 0038 BD46     	 mov sp,r7
 4742              	.LCFI371:
 4743              	 .cfi_def_cfa_register 13
 4744              	 
 4745 003a 5DF8047B 	 ldr r7,[sp],#4
 4746              	.LCFI372:
 4747              	 .cfi_restore 7
 4748              	 .cfi_def_cfa_offset 0
 4749 003e 7047     	 bx lr
 4750              	 .cfi_endproc
 4751              	.LFE295:
 4753              	 .section .text.XMC_VADC_GROUP_ChannelGetResultRegister,"ax",%progbits
 4754              	 .align 2
 4755              	 .global XMC_VADC_GROUP_ChannelGetResultRegister
 4756              	 .thumb
 4757              	 .thumb_func
 4759              	XMC_VADC_GROUP_ChannelGetResultRegister:
 4760              	.LFB296:
1819:../Libraries/XMCLib/src/xmc_vadc.c **** 
1820:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result register bound with specified channel */
1821:../Libraries/XMCLib/src/xmc_vadc.c **** uint8_t XMC_VADC_GROUP_ChannelGetResultRegister(XMC_VADC_GROUP_t *const group_ptr, const uint32_t c
1822:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4761              	 .loc 2 1822 0
 4762              	 .cfi_startproc
 4763              	 
 4764              	 
 4765              	 
 4766 0000 80B4     	 push {r7}
 4767              	.LCFI373:
 4768              	 .cfi_def_cfa_offset 4
 4769              	 .cfi_offset 7,-4
 4770 0002 85B0     	 sub sp,sp,#20
 4771              	.LCFI374:
 4772              	 .cfi_def_cfa_offset 24
 4773 0004 00AF     	 add r7,sp,#0
 4774              	.LCFI375:
 4775              	 .cfi_def_cfa_register 7
 4776 0006 7860     	 str r0,[r7,#4]
 4777 0008 3960     	 str r1,[r7]
1823:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t resreg;
1824:../Libraries/XMCLib/src/xmc_vadc.c **** 
1825:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1826:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Channel Number",
1827:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1828:../Libraries/XMCLib/src/xmc_vadc.c **** 
1829:../Libraries/XMCLib/src/xmc_vadc.c ****   resreg = (uint8_t)((group_ptr->CHCTR[ch_num] & (uint32_t)VADC_G_CHCTR_RESREG_Msk) >> VADC_G_CHCTR
 4778              	 .loc 2 1829 0
 4779 000a 7B68     	 ldr r3,[r7,#4]
 4780 000c 3A68     	 ldr r2,[r7]
 4781 000e 8032     	 adds r2,r2,#128
 4782 0010 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4783 0014 03F47023 	 and r3,r3,#983040
 4784 0018 1B0C     	 lsrs r3,r3,#16
 4785 001a FB73     	 strb r3,[r7,#15]
1830:../Libraries/XMCLib/src/xmc_vadc.c **** 
1831:../Libraries/XMCLib/src/xmc_vadc.c ****   return resreg;
 4786              	 .loc 2 1831 0
 4787 001c FB7B     	 ldrb r3,[r7,#15]
1832:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4788              	 .loc 2 1832 0
 4789 001e 1846     	 mov r0,r3
 4790 0020 1437     	 adds r7,r7,#20
 4791              	.LCFI376:
 4792              	 .cfi_def_cfa_offset 4
 4793 0022 BD46     	 mov sp,r7
 4794              	.LCFI377:
 4795              	 .cfi_def_cfa_register 13
 4796              	 
 4797 0024 5DF8047B 	 ldr r7,[sp],#4
 4798              	.LCFI378:
 4799              	 .cfi_restore 7
 4800              	 .cfi_def_cfa_offset 0
 4801 0028 7047     	 bx lr
 4802              	 .cfi_endproc
 4803              	.LFE296:
 4805 002a 00BF     	 .section .text.XMC_VADC_GROUP_ChannelTriggerEvent,"ax",%progbits
 4806              	 .align 2
 4807              	 .global XMC_VADC_GROUP_ChannelTriggerEvent
 4808              	 .thumb
 4809              	 .thumb_func
 4811              	XMC_VADC_GROUP_ChannelTriggerEvent:
 4812              	.LFB297:
1833:../Libraries/XMCLib/src/xmc_vadc.c **** 
1834:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to manually assert channel event */
1835:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelTriggerEvent(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)
1836:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4813              	 .loc 2 1836 0
 4814              	 .cfi_startproc
 4815              	 
 4816              	 
 4817              	 
 4818 0000 80B4     	 push {r7}
 4819              	.LCFI379:
 4820              	 .cfi_def_cfa_offset 4
 4821              	 .cfi_offset 7,-4
 4822 0002 85B0     	 sub sp,sp,#20
 4823              	.LCFI380:
 4824              	 .cfi_def_cfa_offset 24
 4825 0004 00AF     	 add r7,sp,#0
 4826              	.LCFI381:
 4827              	 .cfi_def_cfa_register 7
 4828 0006 7860     	 str r0,[r7,#4]
 4829 0008 3960     	 str r1,[r7]
1837:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ceflag;
1838:../Libraries/XMCLib/src/xmc_vadc.c **** 
1839:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
1840:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEvent:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CH
1841:../Libraries/XMCLib/src/xmc_vadc.c **** 
1842:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag  = group_ptr->CEFLAG;
 4830              	 .loc 2 1842 0
 4831 000a 7B68     	 ldr r3,[r7,#4]
 4832 000c D3F88031 	 ldr r3,[r3,#384]
 4833 0010 FB60     	 str r3,[r7,#12]
1843:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag |= (uint32_t)((uint32_t)1 << ch_num);
 4834              	 .loc 2 1843 0
 4835 0012 3B68     	 ldr r3,[r7]
 4836 0014 0122     	 movs r2,#1
 4837 0016 02FA03F3 	 lsl r3,r2,r3
 4838 001a FA68     	 ldr r2,[r7,#12]
 4839 001c 1343     	 orrs r3,r3,r2
 4840 001e FB60     	 str r3,[r7,#12]
1844:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CEFLAG = ceflag;
 4841              	 .loc 2 1844 0
 4842 0020 7B68     	 ldr r3,[r7,#4]
 4843 0022 FA68     	 ldr r2,[r7,#12]
 4844 0024 C3F88021 	 str r2,[r3,#384]
1845:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4845              	 .loc 2 1845 0
 4846 0028 1437     	 adds r7,r7,#20
 4847              	.LCFI382:
 4848              	 .cfi_def_cfa_offset 4
 4849 002a BD46     	 mov sp,r7
 4850              	.LCFI383:
 4851              	 .cfi_def_cfa_register 13
 4852              	 
 4853 002c 5DF8047B 	 ldr r7,[sp],#4
 4854              	.LCFI384:
 4855              	 .cfi_restore 7
 4856              	 .cfi_def_cfa_offset 0
 4857 0030 7047     	 bx lr
 4858              	 .cfi_endproc
 4859              	.LFE297:
 4861 0032 00BF     	 .section .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode,"ax",%progbits
 4862              	 .align 2
 4863              	 .global XMC_VADC_GROUP_ChannelSetEventInterruptNode
 4864              	 .thumb
 4865              	 .thumb_func
 4867              	XMC_VADC_GROUP_ChannelSetEventInterruptNode:
 4868              	.LFB298:
1846:../Libraries/XMCLib/src/xmc_vadc.c **** 
1847:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind channel event with a service request (NVIC Node) */
1848:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
1849:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const uint32_t ch_num,
1850:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const XMC_VADC_SR_t sr)
1851:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4869              	 .loc 2 1851 0
 4870              	 .cfi_startproc
 4871              	 
 4872              	 
 4873              	 
 4874 0000 80B4     	 push {r7}
 4875              	.LCFI385:
 4876              	 .cfi_def_cfa_offset 4
 4877              	 .cfi_offset 7,-4
 4878 0002 87B0     	 sub sp,sp,#28
 4879              	.LCFI386:
 4880              	 .cfi_def_cfa_offset 32
 4881 0004 00AF     	 add r7,sp,#0
 4882              	.LCFI387:
 4883              	 .cfi_def_cfa_register 7
 4884 0006 F860     	 str r0,[r7,#12]
 4885 0008 B960     	 str r1,[r7,#8]
 4886 000a 1346     	 mov r3,r2
 4887 000c FB71     	 strb r3,[r7,#7]
1852:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t route_mask;
1853:../Libraries/XMCLib/src/xmc_vadc.c **** 
1854:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROU
1855:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Channel Number",
1856:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1857:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VAD
1858:../Libraries/XMCLib/src/xmc_vadc.c **** 
1859:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask  = group_ptr->CEVNP0;
 4888              	 .loc 2 1859 0
 4889 000e FB68     	 ldr r3,[r7,#12]
 4890 0010 D3F8A031 	 ldr r3,[r3,#416]
 4891 0014 7B61     	 str r3,[r7,#20]
1860:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask &= ~((uint32_t)15 << (ch_num * (uint32_t)4));
 4892              	 .loc 2 1860 0
 4893 0016 BB68     	 ldr r3,[r7,#8]
 4894 0018 9B00     	 lsls r3,r3,#2
 4895 001a 1A46     	 mov r2,r3
 4896 001c 0F23     	 movs r3,#15
 4897 001e 9340     	 lsls r3,r3,r2
 4898 0020 DB43     	 mvns r3,r3
 4899 0022 7A69     	 ldr r2,[r7,#20]
 4900 0024 1340     	 ands r3,r3,r2
 4901 0026 7B61     	 str r3,[r7,#20]
1861:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask |= (uint32_t)( (uint32_t)sr << (ch_num * (uint32_t)4));
 4902              	 .loc 2 1861 0
 4903 0028 FB79     	 ldrb r3,[r7,#7]
 4904 002a BA68     	 ldr r2,[r7,#8]
 4905 002c 9200     	 lsls r2,r2,#2
 4906 002e 9340     	 lsls r3,r3,r2
 4907 0030 7A69     	 ldr r2,[r7,#20]
 4908 0032 1343     	 orrs r3,r3,r2
 4909 0034 7B61     	 str r3,[r7,#20]
1862:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CEVNP0 = route_mask;
 4910              	 .loc 2 1862 0
 4911 0036 FB68     	 ldr r3,[r7,#12]
 4912 0038 7A69     	 ldr r2,[r7,#20]
 4913 003a C3F8A021 	 str r2,[r3,#416]
1863:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4914              	 .loc 2 1863 0
 4915 003e 1C37     	 adds r7,r7,#28
 4916              	.LCFI388:
 4917              	 .cfi_def_cfa_offset 4
 4918 0040 BD46     	 mov sp,r7
 4919              	.LCFI389:
 4920              	 .cfi_def_cfa_register 13
 4921              	 
 4922 0042 5DF8047B 	 ldr r7,[sp],#4
 4923              	.LCFI390:
 4924              	 .cfi_restore 7
 4925              	 .cfi_def_cfa_offset 0
 4926 0046 7047     	 bx lr
 4927              	 .cfi_endproc
 4928              	.LFE298:
 4930              	 .section .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria,"ax",%progbits
 4931              	 .align 2
 4932              	 .global XMC_VADC_GROUP_ChannelTriggerEventGenCriteria
 4933              	 .thumb
 4934              	 .thumb_func
 4936              	XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:
 4937              	.LFB299:
1864:../Libraries/XMCLib/src/xmc_vadc.c **** 
1865:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure conditions for generation of channel event */
1866:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelTriggerEventGenCriteria( XMC_VADC_GROUP_t *const group_ptr,
1867:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    const uint32_t ch_num,
1868:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    const XMC_VADC_CHANNEL_EVGEN_t criteria)
1869:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4938              	 .loc 2 1869 0
 4939              	 .cfi_startproc
 4940              	 
 4941              	 
 4942              	 
 4943 0000 80B4     	 push {r7}
 4944              	.LCFI391:
 4945              	 .cfi_def_cfa_offset 4
 4946              	 .cfi_offset 7,-4
 4947 0002 87B0     	 sub sp,sp,#28
 4948              	.LCFI392:
 4949              	 .cfi_def_cfa_offset 32
 4950 0004 00AF     	 add r7,sp,#0
 4951              	.LCFI393:
 4952              	 .cfi_def_cfa_register 7
 4953 0006 F860     	 str r0,[r7,#12]
 4954 0008 B960     	 str r1,[r7,#8]
 4955 000a 1346     	 mov r3,r2
 4956 000c FB71     	 strb r3,[r7,#7]
1870:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1871:../Libraries/XMCLib/src/xmc_vadc.c **** 
1872:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Group Pointer", XMC_VADC_CHECK_GR
1873:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Channel Number",
1874:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1875:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Event Generation Criteria",
1876:../Libraries/XMCLib/src/xmc_vadc.c ****              ((criteria) <= XMC_VADC_CHANNEL_EVGEN_ALWAYS))
1877:../Libraries/XMCLib/src/xmc_vadc.c **** 
1878:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = group_ptr->CHCTR[ch_num];
 4957              	 .loc 2 1878 0
 4958 000e FB68     	 ldr r3,[r7,#12]
 4959 0010 BA68     	 ldr r2,[r7,#8]
 4960 0012 8032     	 adds r2,r2,#128
 4961 0014 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4962 0018 7B61     	 str r3,[r7,#20]
1879:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_CHEVMODE_Msk);
 4963              	 .loc 2 1879 0
 4964 001a 7B69     	 ldr r3,[r7,#20]
 4965 001c 23F44073 	 bic r3,r3,#768
 4966 0020 7B61     	 str r3,[r7,#20]
1880:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)criteria << VADC_G_CHCTR_CHEVMODE_Pos);
 4967              	 .loc 2 1880 0
 4968 0022 FB79     	 ldrb r3,[r7,#7]
 4969 0024 1B02     	 lsls r3,r3,#8
 4970 0026 7A69     	 ldr r2,[r7,#20]
 4971 0028 1343     	 orrs r3,r3,r2
 4972 002a 7B61     	 str r3,[r7,#20]
1881:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 4973              	 .loc 2 1881 0
 4974 002c FB68     	 ldr r3,[r7,#12]
 4975 002e BA68     	 ldr r2,[r7,#8]
 4976 0030 8032     	 adds r2,r2,#128
 4977 0032 7969     	 ldr r1,[r7,#20]
 4978 0034 43F82210 	 str r1,[r3,r2,lsl#2]
1882:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4979              	 .loc 2 1882 0
 4980 0038 1C37     	 adds r7,r7,#28
 4981              	.LCFI394:
 4982              	 .cfi_def_cfa_offset 4
 4983 003a BD46     	 mov sp,r7
 4984              	.LCFI395:
 4985              	 .cfi_def_cfa_register 13
 4986              	 
 4987 003c 5DF8047B 	 ldr r7,[sp],#4
 4988              	.LCFI396:
 4989              	 .cfi_restore 7
 4990              	 .cfi_def_cfa_offset 0
 4991 0040 7047     	 bx lr
 4992              	 .cfi_endproc
 4993              	.LFE299:
 4995 0042 00BF     	 .section .text.XMC_VADC_GROUP_ChannelSetBoundarySelection,"ax",%progbits
 4996              	 .align 2
 4997              	 .global XMC_VADC_GROUP_ChannelSetBoundarySelection
 4998              	 .thumb
 4999              	 .thumb_func
 5001              	XMC_VADC_GROUP_ChannelSetBoundarySelection:
 5002              	.LFB300:
1883:../Libraries/XMCLib/src/xmc_vadc.c **** 
1884:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure the boundary selection */
1885:../Libraries/XMCLib/src/xmc_vadc.c **** void  XMC_VADC_GROUP_ChannelSetBoundarySelection(XMC_VADC_GROUP_t *const group_ptr,
1886:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const uint32_t ch_num,
1887:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  XMC_VADC_BOUNDARY_SELECT_t boundary_sel,
1888:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  XMC_VADC_CHANNEL_BOUNDARY_t selection)
1889:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5003              	 .loc 2 1889 0
 5004              	 .cfi_startproc
 5005              	 
 5006              	 
 5007              	 
 5008 0000 80B4     	 push {r7}
 5009              	.LCFI397:
 5010              	 .cfi_def_cfa_offset 4
 5011              	 .cfi_offset 7,-4
 5012 0002 85B0     	 sub sp,sp,#20
 5013              	.LCFI398:
 5014              	 .cfi_def_cfa_offset 24
 5015 0004 00AF     	 add r7,sp,#0
 5016              	.LCFI399:
 5017              	 .cfi_def_cfa_register 7
 5018 0006 F860     	 str r0,[r7,#12]
 5019 0008 B960     	 str r1,[r7,#8]
 5020 000a 1146     	 mov r1,r2
 5021 000c 1A46     	 mov r2,r3
 5022 000e 0B46     	 mov r3,r1
 5023 0010 FB71     	 strb r3,[r7,#7]
 5024 0012 1346     	 mov r3,r2
 5025 0014 BB71     	 strb r3,[r7,#6]
1890:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetBoundarySelection:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
1891:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetBoundarySelection:Wrong Channel Number",
1892:../Libraries/XMCLib/src/xmc_vadc.c ****               ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1893:../Libraries/XMCLib/src/xmc_vadc.c **** 
1894:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] &= ~((uint32_t)VADC_G_CHCTR_BNDSELL_Msk << boundary_sel);
 5026              	 .loc 2 1894 0
 5027 0016 FB68     	 ldr r3,[r7,#12]
 5028 0018 BA68     	 ldr r2,[r7,#8]
 5029 001a 8032     	 adds r2,r2,#128
 5030 001c 53F82220 	 ldr r2,[r3,r2,lsl#2]
 5031 0020 FB79     	 ldrb r3,[r7,#7]
 5032 0022 3021     	 movs r1,#48
 5033 0024 01FA03F3 	 lsl r3,r1,r3
 5034 0028 DB43     	 mvns r3,r3
 5035 002a 02EA0301 	 and r1,r2,r3
 5036 002e FB68     	 ldr r3,[r7,#12]
 5037 0030 BA68     	 ldr r2,[r7,#8]
 5038 0032 8032     	 adds r2,r2,#128
 5039 0034 43F82210 	 str r1,[r3,r2,lsl#2]
1895:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] |= (selection<< ((uint32_t)VADC_G_CHCTR_BNDSELL_Pos + (uint32_t)boundary
 5040              	 .loc 2 1895 0
 5041 0038 FB68     	 ldr r3,[r7,#12]
 5042 003a BA68     	 ldr r2,[r7,#8]
 5043 003c 8032     	 adds r2,r2,#128
 5044 003e 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5045 0042 BA79     	 ldrb r2,[r7,#6]
 5046 0044 F979     	 ldrb r1,[r7,#7]
 5047 0046 0431     	 adds r1,r1,#4
 5048 0048 8A40     	 lsls r2,r2,r1
 5049 004a 43EA0201 	 orr r1,r3,r2
 5050 004e FB68     	 ldr r3,[r7,#12]
 5051 0050 BA68     	 ldr r2,[r7,#8]
 5052 0052 8032     	 adds r2,r2,#128
 5053 0054 43F82210 	 str r1,[r3,r2,lsl#2]
1896:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5054              	 .loc 2 1896 0
 5055 0058 1437     	 adds r7,r7,#20
 5056              	.LCFI400:
 5057              	 .cfi_def_cfa_offset 4
 5058 005a BD46     	 mov sp,r7
 5059              	.LCFI401:
 5060              	 .cfi_def_cfa_register 13
 5061              	 
 5062 005c 5DF8047B 	 ldr r7,[sp],#4
 5063              	.LCFI402:
 5064              	 .cfi_restore 7
 5065              	 .cfi_def_cfa_offset 0
 5066 0060 7047     	 bx lr
 5067              	 .cfi_endproc
 5068              	.LFE300:
 5070 0062 00BF     	 .section .text.XMC_VADC_GROUP_AddResultToFifo,"ax",%progbits
 5071              	 .align 2
 5072              	 .global XMC_VADC_GROUP_AddResultToFifo
 5073              	 .thumb
 5074              	 .thumb_func
 5076              	XMC_VADC_GROUP_AddResultToFifo:
 5077              	.LFB301:
1897:../Libraries/XMCLib/src/xmc_vadc.c **** 
1898:../Libraries/XMCLib/src/xmc_vadc.c **** /* Make the specified result register part of Result FIFO */ 
1899:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_AddResultToFifo(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)
1900:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5078              	 .loc 2 1900 0
 5079              	 .cfi_startproc
 5080              	 
 5081              	 
 5082              	 
 5083 0000 80B4     	 push {r7}
 5084              	.LCFI403:
 5085              	 .cfi_def_cfa_offset 4
 5086              	 .cfi_offset 7,-4
 5087 0002 85B0     	 sub sp,sp,#20
 5088              	.LCFI404:
 5089              	 .cfi_def_cfa_offset 24
 5090 0004 00AF     	 add r7,sp,#0
 5091              	.LCFI405:
 5092              	 .cfi_def_cfa_register 7
 5093 0006 7860     	 str r0,[r7,#4]
 5094 0008 3960     	 str r1,[r7]
1901:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t fen;
1902:../Libraries/XMCLib/src/xmc_vadc.c **** 
1903:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_AddResultToFifo:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
1904:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_AddResultToFifo:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESU
1905:../Libraries/XMCLib/src/xmc_vadc.c **** 
1906:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract and clear the FIFO enable field */
1907:../Libraries/XMCLib/src/xmc_vadc.c ****   fen = group_ptr->RCR[res_reg];
 5095              	 .loc 2 1907 0
 5096 000a 7B68     	 ldr r3,[r7,#4]
 5097 000c 3A68     	 ldr r2,[r7]
 5098 000e A032     	 adds r2,r2,#160
 5099 0010 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5100 0014 FB60     	 str r3,[r7,#12]
1908:../Libraries/XMCLib/src/xmc_vadc.c ****   fen &= ~((uint32_t)VADC_G_RCR_FEN_Msk);
 5101              	 .loc 2 1908 0
 5102 0016 FB68     	 ldr r3,[r7,#12]
 5103 0018 23F0C063 	 bic r3,r3,#100663296
 5104 001c FB60     	 str r3,[r7,#12]
1909:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set this register up as a FIFO member */
1910:../Libraries/XMCLib/src/xmc_vadc.c ****   fen |= (uint32_t)((uint32_t)1 << VADC_G_RCR_FEN_Pos);
 5105              	 .loc 2 1910 0
 5106 001e FB68     	 ldr r3,[r7,#12]
 5107 0020 43F00073 	 orr r3,r3,#33554432
 5108 0024 FB60     	 str r3,[r7,#12]
1911:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RCR[res_reg] = fen;
 5109              	 .loc 2 1911 0
 5110 0026 7B68     	 ldr r3,[r7,#4]
 5111 0028 3A68     	 ldr r2,[r7]
 5112 002a A032     	 adds r2,r2,#160
 5113 002c F968     	 ldr r1,[r7,#12]
 5114 002e 43F82210 	 str r1,[r3,r2,lsl#2]
1912:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5115              	 .loc 2 1912 0
 5116 0032 1437     	 adds r7,r7,#20
 5117              	.LCFI406:
 5118              	 .cfi_def_cfa_offset 4
 5119 0034 BD46     	 mov sp,r7
 5120              	.LCFI407:
 5121              	 .cfi_def_cfa_register 13
 5122              	 
 5123 0036 5DF8047B 	 ldr r7,[sp],#4
 5124              	.LCFI408:
 5125              	 .cfi_restore 7
 5126              	 .cfi_def_cfa_offset 0
 5127 003a 7047     	 bx lr
 5128              	 .cfi_endproc
 5129              	.LFE301:
 5131              	 .section .text.XMC_VADC_GROUP_SetResultFastCompareValue,"ax",%progbits
 5132              	 .align 2
 5133              	 .global XMC_VADC_GROUP_SetResultFastCompareValue
 5134              	 .thumb
 5135              	 .thumb_func
 5137              	XMC_VADC_GROUP_SetResultFastCompareValue:
 5138              	.LFB302:
1913:../Libraries/XMCLib/src/xmc_vadc.c **** 
1914:../Libraries/XMCLib/src/xmc_vadc.c **** 
1915:../Libraries/XMCLib/src/xmc_vadc.c **** /* Applicable to fast compare mode, this API sets up the value which is to be compared against conv
1916:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultFastCompareValue(XMC_VADC_GROUP_t *const group_ptr,
1917:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const uint32_t res_reg,
1918:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const XMC_VADC_RESULT_SIZE_t compare_val)
1919:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5139              	 .loc 2 1919 0
 5140              	 .cfi_startproc
 5141              	 
 5142              	 
 5143              	 
 5144 0000 80B4     	 push {r7}
 5145              	.LCFI409:
 5146              	 .cfi_def_cfa_offset 4
 5147              	 .cfi_offset 7,-4
 5148 0002 87B0     	 sub sp,sp,#28
 5149              	.LCFI410:
 5150              	 .cfi_def_cfa_offset 32
 5151 0004 00AF     	 add r7,sp,#0
 5152              	.LCFI411:
 5153              	 .cfi_def_cfa_register 7
 5154 0006 F860     	 str r0,[r7,#12]
 5155 0008 B960     	 str r1,[r7,#8]
 5156 000a 1346     	 mov r3,r2
 5157 000c FB80     	 strh r3,[r7,#6]
1920:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res = group_ptr->RES[res_reg];
 5158              	 .loc 2 1920 0
 5159 000e FB68     	 ldr r3,[r7,#12]
 5160 0010 BA68     	 ldr r2,[r7,#8]
 5161 0012 C032     	 adds r2,r2,#192
 5162 0014 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5163 0018 7B61     	 str r3,[r7,#20]
1921:../Libraries/XMCLib/src/xmc_vadc.c **** 
1922:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultFastCompareValue:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1923:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultFastCompareValue:Wrong Result Register",
1924:../Libraries/XMCLib/src/xmc_vadc.c ****             ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
1925:../Libraries/XMCLib/src/xmc_vadc.c **** 
1926:../Libraries/XMCLib/src/xmc_vadc.c ****   res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
 5164              	 .loc 2 1926 0
 5165 001a 7B69     	 ldr r3,[r7,#20]
 5166 001c 1B0C     	 lsrs r3,r3,#16
 5167 001e 1B04     	 lsls r3,r3,#16
 5168 0020 7B61     	 str r3,[r7,#20]
1927:../Libraries/XMCLib/src/xmc_vadc.c ****   res |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 5169              	 .loc 2 1927 0
 5170 0022 FB88     	 ldrh r3,[r7,#6]
 5171 0024 9B00     	 lsls r3,r3,#2
 5172 0026 7A69     	 ldr r2,[r7,#20]
 5173 0028 1343     	 orrs r3,r3,r2
 5174 002a 7B61     	 str r3,[r7,#20]
1928:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RES[res_reg] = res;
 5175              	 .loc 2 1928 0
 5176 002c FB68     	 ldr r3,[r7,#12]
 5177 002e BA68     	 ldr r2,[r7,#8]
 5178 0030 C032     	 adds r2,r2,#192
 5179 0032 7969     	 ldr r1,[r7,#20]
 5180 0034 43F82210 	 str r1,[r3,r2,lsl#2]
1929:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5181              	 .loc 2 1929 0
 5182 0038 1C37     	 adds r7,r7,#28
 5183              	.LCFI412:
 5184              	 .cfi_def_cfa_offset 4
 5185 003a BD46     	 mov sp,r7
 5186              	.LCFI413:
 5187              	 .cfi_def_cfa_register 13
 5188              	 
 5189 003c 5DF8047B 	 ldr r7,[sp],#4
 5190              	.LCFI414:
 5191              	 .cfi_restore 7
 5192              	 .cfi_def_cfa_offset 0
 5193 0040 7047     	 bx lr
 5194              	 .cfi_endproc
 5195              	.LFE302:
 5197 0042 00BF     	 .section .text.XMC_VADC_GROUP_GetFastCompareResult,"ax",%progbits
 5198              	 .align 2
 5199              	 .global XMC_VADC_GROUP_GetFastCompareResult
 5200              	 .thumb
 5201              	 .thumb_func
 5203              	XMC_VADC_GROUP_GetFastCompareResult:
 5204              	.LFB303:
1930:../Libraries/XMCLib/src/xmc_vadc.c **** 
1931:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result of fast mode comparison */
1932:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GROUP_GetFastCompareResult(XMC_VADC_GROUP_t *const group_ptr, cons
1933:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5205              	 .loc 2 1933 0
 5206              	 .cfi_startproc
 5207              	 
 5208              	 
 5209              	 
 5210 0000 80B4     	 push {r7}
 5211              	.LCFI415:
 5212              	 .cfi_def_cfa_offset 4
 5213              	 .cfi_offset 7,-4
 5214 0002 85B0     	 sub sp,sp,#20
 5215              	.LCFI416:
 5216              	 .cfi_def_cfa_offset 24
 5217 0004 00AF     	 add r7,sp,#0
 5218              	.LCFI417:
 5219              	 .cfi_def_cfa_register 7
 5220 0006 7860     	 str r0,[r7,#4]
 5221 0008 3960     	 str r1,[r7]
1934:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_FAST_COMPARE_t result;
1935:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
1936:../Libraries/XMCLib/src/xmc_vadc.c **** 
1937:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetFastCompareResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
1938:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetFastCompareResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM
1939:../Libraries/XMCLib/src/xmc_vadc.c **** 
1940:../Libraries/XMCLib/src/xmc_vadc.c ****   res = group_ptr->RES[res_reg];
 5222              	 .loc 2 1940 0
 5223 000a 7B68     	 ldr r3,[r7,#4]
 5224 000c 3A68     	 ldr r2,[r7]
 5225 000e C032     	 adds r2,r2,#192
 5226 0010 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5227 0014 BB60     	 str r3,[r7,#8]
1941:../Libraries/XMCLib/src/xmc_vadc.c **** 
1942:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res & (uint32_t)VADC_G_RES_VF_Msk)
 5228              	 .loc 2 1942 0
 5229 0016 BB68     	 ldr r3,[r7,#8]
 5230 0018 002B     	 cmp r3,#0
 5231 001a 06DA     	 bge .L181
1943:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1944:../Libraries/XMCLib/src/xmc_vadc.c ****     result = (XMC_VADC_FAST_COMPARE_t)((uint32_t)(res >> (uint32_t)VADC_G_RES_FCR_Pos) & (uint32_t)
 5232              	 .loc 2 1944 0
 5233 001c BB68     	 ldr r3,[r7,#8]
 5234 001e 9B0F     	 lsrs r3,r3,#30
 5235 0020 DBB2     	 uxtb r3,r3
 5236 0022 03F00103 	 and r3,r3,#1
 5237 0026 FB73     	 strb r3,[r7,#15]
 5238 0028 01E0     	 b .L182
 5239              	.L181:
1945:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1946:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1947:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1948:../Libraries/XMCLib/src/xmc_vadc.c ****     result = XMC_VADC_FAST_COMPARE_UNKNOWN;
 5240              	 .loc 2 1948 0
 5241 002a 0223     	 movs r3,#2
 5242 002c FB73     	 strb r3,[r7,#15]
 5243              	.L182:
1949:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1950:../Libraries/XMCLib/src/xmc_vadc.c **** 
1951:../Libraries/XMCLib/src/xmc_vadc.c ****   return result;
 5244              	 .loc 2 1951 0
 5245 002e FB7B     	 ldrb r3,[r7,#15]
1952:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5246              	 .loc 2 1952 0
 5247 0030 1846     	 mov r0,r3
 5248 0032 1437     	 adds r7,r7,#20
 5249              	.LCFI418:
 5250              	 .cfi_def_cfa_offset 4
 5251 0034 BD46     	 mov sp,r7
 5252              	.LCFI419:
 5253              	 .cfi_def_cfa_register 13
 5254              	 
 5255 0036 5DF8047B 	 ldr r7,[sp],#4
 5256              	.LCFI420:
 5257              	 .cfi_restore 7
 5258              	 .cfi_def_cfa_offset 0
 5259 003a 7047     	 bx lr
 5260              	 .cfi_endproc
 5261              	.LFE303:
 5263              	 .section .text.XMC_VADC_GROUP_SetResultSubtractionValue,"ax",%progbits
 5264              	 .align 2
 5265              	 .global XMC_VADC_GROUP_SetResultSubtractionValue
 5266              	 .thumb
 5267              	 .thumb_func
 5269              	XMC_VADC_GROUP_SetResultSubtractionValue:
 5270              	.LFB304:
1953:../Libraries/XMCLib/src/xmc_vadc.c **** 
1954:../Libraries/XMCLib/src/xmc_vadc.c **** /* Applicable to fast compare mode, this API sets up the value which is to be compared against conv
1955:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultSubtractionValue(XMC_VADC_GROUP_t *const group_ptr,
1956:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const uint16_t subtraction_val)
1957:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5271              	 .loc 2 1957 0
 5272              	 .cfi_startproc
 5273              	 
 5274              	 
 5275              	 
 5276 0000 80B4     	 push {r7}
 5277              	.LCFI421:
 5278              	 .cfi_def_cfa_offset 4
 5279              	 .cfi_offset 7,-4
 5280 0002 85B0     	 sub sp,sp,#20
 5281              	.LCFI422:
 5282              	 .cfi_def_cfa_offset 24
 5283 0004 00AF     	 add r7,sp,#0
 5284              	.LCFI423:
 5285              	 .cfi_def_cfa_register 7
 5286 0006 7860     	 str r0,[r7,#4]
 5287 0008 0B46     	 mov r3,r1
 5288 000a 7B80     	 strh r3,[r7,#2]
1958:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
1959:../Libraries/XMCLib/src/xmc_vadc.c **** 
1960:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultSubtractionValue:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1961:../Libraries/XMCLib/src/xmc_vadc.c **** 
1962:../Libraries/XMCLib/src/xmc_vadc.c ****   res = group_ptr->RES[0];
 5289              	 .loc 2 1962 0
 5290 000c 7B68     	 ldr r3,[r7,#4]
 5291 000e D3F80033 	 ldr r3,[r3,#768]
 5292 0012 FB60     	 str r3,[r7,#12]
1963:../Libraries/XMCLib/src/xmc_vadc.c ****   res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
 5293              	 .loc 2 1963 0
 5294 0014 FB68     	 ldr r3,[r7,#12]
 5295 0016 1B0C     	 lsrs r3,r3,#16
 5296 0018 1B04     	 lsls r3,r3,#16
 5297 001a FB60     	 str r3,[r7,#12]
1964:../Libraries/XMCLib/src/xmc_vadc.c ****   res |= (uint32_t)subtraction_val;
 5298              	 .loc 2 1964 0
 5299 001c 7B88     	 ldrh r3,[r7,#2]
 5300 001e FA68     	 ldr r2,[r7,#12]
 5301 0020 1343     	 orrs r3,r3,r2
 5302 0022 FB60     	 str r3,[r7,#12]
1965:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RES[0] = res;
 5303              	 .loc 2 1965 0
 5304 0024 7B68     	 ldr r3,[r7,#4]
 5305 0026 FA68     	 ldr r2,[r7,#12]
 5306 0028 C3F80023 	 str r2,[r3,#768]
1966:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5307              	 .loc 2 1966 0
 5308 002c 1437     	 adds r7,r7,#20
 5309              	.LCFI424:
 5310              	 .cfi_def_cfa_offset 4
 5311 002e BD46     	 mov sp,r7
 5312              	.LCFI425:
 5313              	 .cfi_def_cfa_register 13
 5314              	 
 5315 0030 5DF8047B 	 ldr r7,[sp],#4
 5316              	.LCFI426:
 5317              	 .cfi_restore 7
 5318              	 .cfi_def_cfa_offset 0
 5319 0034 7047     	 bx lr
 5320              	 .cfi_endproc
 5321              	.LFE304:
 5323 0036 00BF     	 .section .text.XMC_VADC_GROUP_SetResultInterruptNode,"ax",%progbits
 5324              	 .align 2
 5325              	 .global XMC_VADC_GROUP_SetResultInterruptNode
 5326              	 .thumb
 5327              	 .thumb_func
 5329              	XMC_VADC_GROUP_SetResultInterruptNode:
 5330              	.LFB305:
1967:../Libraries/XMCLib/src/xmc_vadc.c **** 
1968:../Libraries/XMCLib/src/xmc_vadc.c **** 
1969:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select a service request line (NVIC Node) for result event of specified unit of result ha
1970:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
1971:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const uint32_t res_reg,
1972:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const XMC_VADC_SR_t sr)
1973:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5331              	 .loc 2 1973 0
 5332              	 .cfi_startproc
 5333              	 
 5334              	 
 5335              	 
 5336 0000 80B4     	 push {r7}
 5337              	.LCFI427:
 5338              	 .cfi_def_cfa_offset 4
 5339              	 .cfi_offset 7,-4
 5340 0002 87B0     	 sub sp,sp,#28
 5341              	.LCFI428:
 5342              	 .cfi_def_cfa_offset 32
 5343 0004 00AF     	 add r7,sp,#0
 5344              	.LCFI429:
 5345              	 .cfi_def_cfa_register 7
 5346 0006 F860     	 str r0,[r7,#12]
 5347 0008 B960     	 str r1,[r7,#8]
 5348 000a 1346     	 mov r3,r2
 5349 000c FB71     	 strb r3,[r7,#7]
1974:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t route_mask;
1975:../Libraries/XMCLib/src/xmc_vadc.c **** 
1976:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
1977:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Result Register", ((res_reg) < XMC_VADC_N
1978:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_S
1979:../Libraries/XMCLib/src/xmc_vadc.c **** 
1980:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res_reg <= 7U)
 5350              	 .loc 2 1980 0
 5351 000e BB68     	 ldr r3,[r7,#8]
 5352 0010 072B     	 cmp r3,#7
 5353 0012 18D8     	 bhi .L186
1981:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1982:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask  = group_ptr->REVNP0;
 5354              	 .loc 2 1982 0
 5355 0014 FB68     	 ldr r3,[r7,#12]
 5356 0016 D3F8B031 	 ldr r3,[r3,#432]
 5357 001a 7B61     	 str r3,[r7,#20]
1983:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (res_reg * (uint32_t)4) ));
 5358              	 .loc 2 1983 0
 5359 001c BB68     	 ldr r3,[r7,#8]
 5360 001e 9B00     	 lsls r3,r3,#2
 5361 0020 1A46     	 mov r2,r3
 5362 0022 0F23     	 movs r3,#15
 5363 0024 9340     	 lsls r3,r3,r2
 5364 0026 DB43     	 mvns r3,r3
 5365 0028 7A69     	 ldr r2,[r7,#20]
 5366 002a 1340     	 ands r3,r3,r2
 5367 002c 7B61     	 str r3,[r7,#20]
1984:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
 5368              	 .loc 2 1984 0
 5369 002e FB79     	 ldrb r3,[r7,#7]
 5370 0030 BA68     	 ldr r2,[r7,#8]
 5371 0032 9200     	 lsls r2,r2,#2
 5372 0034 9340     	 lsls r3,r3,r2
 5373 0036 7A69     	 ldr r2,[r7,#20]
 5374 0038 1343     	 orrs r3,r3,r2
 5375 003a 7B61     	 str r3,[r7,#20]
1985:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP0 = route_mask;
 5376              	 .loc 2 1985 0
 5377 003c FB68     	 ldr r3,[r7,#12]
 5378 003e 7A69     	 ldr r2,[r7,#20]
 5379 0040 C3F8B021 	 str r2,[r3,#432]
 5380 0044 1EE0     	 b .L185
 5381              	.L186:
1986:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1987:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1988:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1989:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask = group_ptr->REVNP1;
 5382              	 .loc 2 1989 0
 5383 0046 FB68     	 ldr r3,[r7,#12]
 5384 0048 D3F8B431 	 ldr r3,[r3,#436]
 5385 004c 7B61     	 str r3,[r7,#20]
1990:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
 5386              	 .loc 2 1990 0
 5387 004e BB68     	 ldr r3,[r7,#8]
 5388 0050 03F18043 	 add r3,r3,#1073741824
 5389 0054 083B     	 subs r3,r3,#8
 5390 0056 9B00     	 lsls r3,r3,#2
 5391 0058 1A46     	 mov r2,r3
 5392 005a 0F23     	 movs r3,#15
 5393 005c 9340     	 lsls r3,r3,r2
 5394 005e DB43     	 mvns r3,r3
 5395 0060 7A69     	 ldr r2,[r7,#20]
 5396 0062 1340     	 ands r3,r3,r2
 5397 0064 7B61     	 str r3,[r7,#20]
1991:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
 5398              	 .loc 2 1991 0
 5399 0066 FA79     	 ldrb r2,[r7,#7]
 5400 0068 BB68     	 ldr r3,[r7,#8]
 5401 006a 03F18043 	 add r3,r3,#1073741824
 5402 006e 083B     	 subs r3,r3,#8
 5403 0070 9B00     	 lsls r3,r3,#2
 5404 0072 02FA03F3 	 lsl r3,r2,r3
 5405 0076 7A69     	 ldr r2,[r7,#20]
 5406 0078 1343     	 orrs r3,r3,r2
 5407 007a 7B61     	 str r3,[r7,#20]
1992:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP1 = route_mask;
 5408              	 .loc 2 1992 0
 5409 007c FB68     	 ldr r3,[r7,#12]
 5410 007e 7A69     	 ldr r2,[r7,#20]
 5411 0080 C3F8B421 	 str r2,[r3,#436]
 5412              	.L185:
1993:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1994:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5413              	 .loc 2 1994 0
 5414 0084 1C37     	 adds r7,r7,#28
 5415              	.LCFI430:
 5416              	 .cfi_def_cfa_offset 4
 5417 0086 BD46     	 mov sp,r7
 5418              	.LCFI431:
 5419              	 .cfi_def_cfa_register 13
 5420              	 
 5421 0088 5DF8047B 	 ldr r7,[sp],#4
 5422              	.LCFI432:
 5423              	 .cfi_restore 7
 5424              	 .cfi_def_cfa_offset 0
 5425 008c 7047     	 bx lr
 5426              	 .cfi_endproc
 5427              	.LFE305:
 5429 008e 00BF     	 .section .text.XMC_VADC_GROUP_GetResultFifoTail,"ax",%progbits
 5430              	 .align 2
 5431              	 .global XMC_VADC_GROUP_GetResultFifoTail
 5432              	 .thumb
 5433              	 .thumb_func
 5435              	XMC_VADC_GROUP_GetResultFifoTail:
 5436              	.LFB306:
1995:../Libraries/XMCLib/src/xmc_vadc.c **** 
1996:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the tail of the fifo which the specified result register is a part of */
1997:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_GetResultFifoTail(XMC_VADC_GROUP_t *const group_ptr, uint32_t res_reg)
1998:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5437              	 .loc 2 1998 0
 5438              	 .cfi_startproc
 5439              	 
 5440              	 
 5441 0000 80B5     	 push {r7,lr}
 5442              	.LCFI433:
 5443              	 .cfi_def_cfa_offset 8
 5444              	 .cfi_offset 7,-8
 5445              	 .cfi_offset 14,-4
 5446 0002 86B0     	 sub sp,sp,#24
 5447              	.LCFI434:
 5448              	 .cfi_def_cfa_offset 32
 5449 0004 00AF     	 add r7,sp,#0
 5450              	.LCFI435:
 5451              	 .cfi_def_cfa_register 7
 5452 0006 7860     	 str r0,[r7,#4]
 5453 0008 3960     	 str r1,[r7]
1999:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t tail;
2000:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr;
2001:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t i;
2002:../Libraries/XMCLib/src/xmc_vadc.c ****   bool exit_flag;
2003:../Libraries/XMCLib/src/xmc_vadc.c **** 
2004:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoTail:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2005:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoTail:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
2006:../Libraries/XMCLib/src/xmc_vadc.c **** 
2007:../Libraries/XMCLib/src/xmc_vadc.c ****   tail = 0U;
 5454              	 .loc 2 2007 0
 5455 000a 0023     	 movs r3,#0
 5456 000c 7B61     	 str r3,[r7,#20]
2008:../Libraries/XMCLib/src/xmc_vadc.c ****   exit_flag= (bool)false;
 5457              	 .loc 2 2008 0
 5458 000e 0023     	 movs r3,#0
 5459 0010 FB73     	 strb r3,[r7,#15]
2009:../Libraries/XMCLib/src/xmc_vadc.c **** 
2010:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((bool)true == XMC_VADC_GROUP_IsResultRegisterFifoHead(group_ptr, res_reg))
 5460              	 .loc 2 2010 0
 5461 0012 7868     	 ldr r0,[r7,#4]
 5462 0014 3968     	 ldr r1,[r7]
 5463 0016 FFF7FEFF 	 bl XMC_VADC_GROUP_IsResultRegisterFifoHead
 5464 001a 0346     	 mov r3,r0
 5465 001c 002B     	 cmp r3,#0
 5466 001e 02D0     	 beq .L189
2011:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2012:../Libraries/XMCLib/src/xmc_vadc.c ****     res_reg = res_reg - 1U;
 5467              	 .loc 2 2012 0
 5468 0020 3B68     	 ldr r3,[r7]
 5469 0022 013B     	 subs r3,r3,#1
 5470 0024 3B60     	 str r3,[r7]
 5471              	.L189:
2013:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2014:../Libraries/XMCLib/src/xmc_vadc.c **** 
2015:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Border condition */
2016:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == res_reg)
 5472              	 .loc 2 2016 0
 5473 0026 3B68     	 ldr r3,[r7]
 5474 0028 002B     	 cmp r3,#0
 5475 002a 02D1     	 bne .L190
2017:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2018:../Libraries/XMCLib/src/xmc_vadc.c ****     tail = 0U;
 5476              	 .loc 2 2018 0
 5477 002c 0023     	 movs r3,#0
 5478 002e 7B61     	 str r3,[r7,#20]
 5479 0030 26E0     	 b .L191
 5480              	.L190:
2019:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2020:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2021:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2022:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Stop either at a node that does not have FEN set or at Node-0 */
2023:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i = (int32_t)res_reg; i >= (int32_t)0; i--)
 5481              	 .loc 2 2023 0
 5482 0032 3B68     	 ldr r3,[r7]
 5483 0034 3B61     	 str r3,[r7,#16]
 5484 0036 20E0     	 b .L192
 5485              	.L197:
2024:../Libraries/XMCLib/src/xmc_vadc.c ****     {
2025:../Libraries/XMCLib/src/xmc_vadc.c ****        rcr = group_ptr->RCR[i];
 5486              	 .loc 2 2025 0
 5487 0038 7B68     	 ldr r3,[r7,#4]
 5488 003a 3A69     	 ldr r2,[r7,#16]
 5489 003c A032     	 adds r2,r2,#160
 5490 003e 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5491 0042 BB60     	 str r3,[r7,#8]
2026:../Libraries/XMCLib/src/xmc_vadc.c ****        rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5492              	 .loc 2 2026 0
 5493 0044 BB68     	 ldr r3,[r7,#8]
 5494 0046 03F0C063 	 and r3,r3,#100663296
 5495 004a BB60     	 str r3,[r7,#8]
2027:../Libraries/XMCLib/src/xmc_vadc.c **** 
2028:../Libraries/XMCLib/src/xmc_vadc.c ****        if (rcr)
 5496              	 .loc 2 2028 0
 5497 004c BB68     	 ldr r3,[r7,#8]
 5498 004e 002B     	 cmp r3,#0
 5499 0050 07D0     	 beq .L193
2029:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2030:../Libraries/XMCLib/src/xmc_vadc.c ****          if ((int32_t)0 == i)
 5500              	 .loc 2 2030 0
 5501 0052 3B69     	 ldr r3,[r7,#16]
 5502 0054 002B     	 cmp r3,#0
 5503 0056 09D1     	 bne .L195
2031:../Libraries/XMCLib/src/xmc_vadc.c ****          {
2032:../Libraries/XMCLib/src/xmc_vadc.c ****           /* No more nodes. Stop here */
2033:../Libraries/XMCLib/src/xmc_vadc.c ****           tail = (uint32_t)0;
 5504              	 .loc 2 2033 0
 5505 0058 0023     	 movs r3,#0
 5506 005a 7B61     	 str r3,[r7,#20]
2034:../Libraries/XMCLib/src/xmc_vadc.c ****           exit_flag = (bool)true;
 5507              	 .loc 2 2034 0
 5508 005c 0123     	 movs r3,#1
 5509 005e FB73     	 strb r3,[r7,#15]
 5510 0060 04E0     	 b .L195
 5511              	.L193:
2035:../Libraries/XMCLib/src/xmc_vadc.c ****          }
2036:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2037:../Libraries/XMCLib/src/xmc_vadc.c ****        else
2038:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2039:../Libraries/XMCLib/src/xmc_vadc.c ****          /* The preceding register forms the tail of the FIFO */
2040:../Libraries/XMCLib/src/xmc_vadc.c ****          tail = (uint32_t)i + (uint32_t)1;
 5512              	 .loc 2 2040 0
 5513 0062 3B69     	 ldr r3,[r7,#16]
 5514 0064 0133     	 adds r3,r3,#1
 5515 0066 7B61     	 str r3,[r7,#20]
2041:../Libraries/XMCLib/src/xmc_vadc.c ****          exit_flag = (bool)true;
 5516              	 .loc 2 2041 0
 5517 0068 0123     	 movs r3,#1
 5518 006a FB73     	 strb r3,[r7,#15]
 5519              	.L195:
2042:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2043:../Libraries/XMCLib/src/xmc_vadc.c ****        if (exit_flag)
 5520              	 .loc 2 2043 0
 5521 006c FB7B     	 ldrb r3,[r7,#15]
 5522 006e 002B     	 cmp r3,#0
 5523 0070 00D0     	 beq .L196
2044:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2045:../Libraries/XMCLib/src/xmc_vadc.c ****          break;
 5524              	 .loc 2 2045 0
 5525 0072 05E0     	 b .L191
 5526              	.L196:
2023:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5527              	 .loc 2 2023 0 discriminator 2
 5528 0074 3B69     	 ldr r3,[r7,#16]
 5529 0076 013B     	 subs r3,r3,#1
 5530 0078 3B61     	 str r3,[r7,#16]
 5531              	.L192:
2023:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5532              	 .loc 2 2023 0 is_stmt 0 discriminator 1
 5533 007a 3B69     	 ldr r3,[r7,#16]
 5534 007c 002B     	 cmp r3,#0
 5535 007e DBDA     	 bge .L197
 5536              	.L191:
2046:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2047:../Libraries/XMCLib/src/xmc_vadc.c ****     }
2048:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2049:../Libraries/XMCLib/src/xmc_vadc.c ****   return tail;
 5537              	 .loc 2 2049 0 is_stmt 1
 5538 0080 7B69     	 ldr r3,[r7,#20]
2050:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5539              	 .loc 2 2050 0
 5540 0082 1846     	 mov r0,r3
 5541 0084 1837     	 adds r7,r7,#24
 5542              	.LCFI436:
 5543              	 .cfi_def_cfa_offset 8
 5544 0086 BD46     	 mov sp,r7
 5545              	.LCFI437:
 5546              	 .cfi_def_cfa_register 13
 5547              	 
 5548 0088 80BD     	 pop {r7,pc}
 5549              	 .cfi_endproc
 5550              	.LFE306:
 5552              	 .section .text.XMC_VADC_GROUP_GetResultFifoHead,"ax",%progbits
 5553              	 .align 2
 5554              	 .global XMC_VADC_GROUP_GetResultFifoHead
 5555              	 .thumb
 5556              	 .thumb_func
 5558              	XMC_VADC_GROUP_GetResultFifoHead:
 5559              	.LFB307:
2051:../Libraries/XMCLib/src/xmc_vadc.c **** 
2052:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the head of the fifo which the specified result register is a part of */
2053:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_GetResultFifoHead(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg
2054:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5560              	 .loc 2 2054 0
 5561              	 .cfi_startproc
 5562              	 
 5563              	 
 5564 0000 80B5     	 push {r7,lr}
 5565              	.LCFI438:
 5566              	 .cfi_def_cfa_offset 8
 5567              	 .cfi_offset 7,-8
 5568              	 .cfi_offset 14,-4
 5569 0002 86B0     	 sub sp,sp,#24
 5570              	.LCFI439:
 5571              	 .cfi_def_cfa_offset 32
 5572 0004 00AF     	 add r7,sp,#0
 5573              	.LCFI440:
 5574              	 .cfi_def_cfa_register 7
 5575 0006 7860     	 str r0,[r7,#4]
 5576 0008 3960     	 str r1,[r7]
2055:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t head;
2056:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr;
2057:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
2058:../Libraries/XMCLib/src/xmc_vadc.c **** 
2059:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoHead:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2060:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoHead:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
2061:../Libraries/XMCLib/src/xmc_vadc.c **** 
2062:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((bool)true == XMC_VADC_GROUP_IsResultRegisterFifoHead(group_ptr, res_reg))
 5577              	 .loc 2 2062 0
 5578 000a 7868     	 ldr r0,[r7,#4]
 5579 000c 3968     	 ldr r1,[r7]
 5580 000e FFF7FEFF 	 bl XMC_VADC_GROUP_IsResultRegisterFifoHead
 5581 0012 0346     	 mov r3,r0
 5582 0014 002B     	 cmp r3,#0
 5583 0016 02D0     	 beq .L200
2063:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2064:../Libraries/XMCLib/src/xmc_vadc.c ****       head = res_reg;
 5584              	 .loc 2 2064 0
 5585 0018 3B68     	 ldr r3,[r7]
 5586 001a 7B61     	 str r3,[r7,#20]
 5587 001c 1AE0     	 b .L201
 5588              	.L200:
2065:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2066:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2067:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2068:../Libraries/XMCLib/src/xmc_vadc.c ****     head = XMC_VADC_NUM_RESULT_REGISTERS - (uint32_t)1;
 5589              	 .loc 2 2068 0
 5590 001e 0F23     	 movs r3,#15
 5591 0020 7B61     	 str r3,[r7,#20]
2069:../Libraries/XMCLib/src/xmc_vadc.c **** 
2070:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i = res_reg; i < XMC_VADC_NUM_RESULT_REGISTERS ; i++)
 5592              	 .loc 2 2070 0
 5593 0022 3B68     	 ldr r3,[r7]
 5594 0024 3B61     	 str r3,[r7,#16]
 5595 0026 12E0     	 b .L202
 5596              	.L204:
2071:../Libraries/XMCLib/src/xmc_vadc.c ****     {
2072:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr = group_ptr->RCR[i];
 5597              	 .loc 2 2072 0
 5598 0028 7B68     	 ldr r3,[r7,#4]
 5599 002a 3A69     	 ldr r2,[r7,#16]
 5600 002c A032     	 adds r2,r2,#160
 5601 002e 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5602 0032 FB60     	 str r3,[r7,#12]
2073:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5603              	 .loc 2 2073 0
 5604 0034 FB68     	 ldr r3,[r7,#12]
 5605 0036 03F0C063 	 and r3,r3,#100663296
 5606 003a FB60     	 str r3,[r7,#12]
2074:../Libraries/XMCLib/src/xmc_vadc.c **** 
2075:../Libraries/XMCLib/src/xmc_vadc.c ****       if (!rcr)
 5607              	 .loc 2 2075 0
 5608 003c FB68     	 ldr r3,[r7,#12]
 5609 003e 002B     	 cmp r3,#0
 5610 0040 02D1     	 bne .L203
2076:../Libraries/XMCLib/src/xmc_vadc.c ****       {
2077:../Libraries/XMCLib/src/xmc_vadc.c ****         /* This node forms the head of the FIFO */
2078:../Libraries/XMCLib/src/xmc_vadc.c ****         head = i ;
 5611              	 .loc 2 2078 0
 5612 0042 3B69     	 ldr r3,[r7,#16]
 5613 0044 7B61     	 str r3,[r7,#20]
2079:../Libraries/XMCLib/src/xmc_vadc.c ****         break;
 5614              	 .loc 2 2079 0
 5615 0046 05E0     	 b .L201
 5616              	.L203:
2070:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5617              	 .loc 2 2070 0 discriminator 2
 5618 0048 3B69     	 ldr r3,[r7,#16]
 5619 004a 0133     	 adds r3,r3,#1
 5620 004c 3B61     	 str r3,[r7,#16]
 5621              	.L202:
2070:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5622              	 .loc 2 2070 0 is_stmt 0 discriminator 1
 5623 004e 3B69     	 ldr r3,[r7,#16]
 5624 0050 0F2B     	 cmp r3,#15
 5625 0052 E9D9     	 bls .L204
 5626              	.L201:
2080:../Libraries/XMCLib/src/xmc_vadc.c ****       }
2081:../Libraries/XMCLib/src/xmc_vadc.c ****     }
2082:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2083:../Libraries/XMCLib/src/xmc_vadc.c ****   return head;
 5627              	 .loc 2 2083 0 is_stmt 1
 5628 0054 7B69     	 ldr r3,[r7,#20]
2084:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5629              	 .loc 2 2084 0
 5630 0056 1846     	 mov r0,r3
 5631 0058 1837     	 adds r7,r7,#24
 5632              	.LCFI441:
 5633              	 .cfi_def_cfa_offset 8
 5634 005a BD46     	 mov sp,r7
 5635              	.LCFI442:
 5636              	 .cfi_def_cfa_register 13
 5637              	 
 5638 005c 80BD     	 pop {r7,pc}
 5639              	 .cfi_endproc
 5640              	.LFE307:
 5642 005e 00BF     	 .section .text.XMC_VADC_GROUP_IsResultRegisterFifoHead,"ax",%progbits
 5643              	 .align 2
 5644              	 .global XMC_VADC_GROUP_IsResultRegisterFifoHead
 5645              	 .thumb
 5646              	 .thumb_func
 5648              	XMC_VADC_GROUP_IsResultRegisterFifoHead:
 5649              	.LFB308:
2085:../Libraries/XMCLib/src/xmc_vadc.c **** 
2086:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine if the specified result register is the head of a result fifo */
2087:../Libraries/XMCLib/src/xmc_vadc.c **** bool XMC_VADC_GROUP_IsResultRegisterFifoHead(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_
2088:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5650              	 .loc 2 2088 0
 5651              	 .cfi_startproc
 5652              	 
 5653              	 
 5654              	 
 5655 0000 80B4     	 push {r7}
 5656              	.LCFI443:
 5657              	 .cfi_def_cfa_offset 4
 5658              	 .cfi_offset 7,-4
 5659 0002 87B0     	 sub sp,sp,#28
 5660              	.LCFI444:
 5661              	 .cfi_def_cfa_offset 32
 5662 0004 00AF     	 add r7,sp,#0
 5663              	.LCFI445:
 5664              	 .cfi_def_cfa_register 7
 5665 0006 7860     	 str r0,[r7,#4]
 5666 0008 3960     	 str r1,[r7]
2089:../Libraries/XMCLib/src/xmc_vadc.c ****   bool ret_val;
2090:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr_head;
2091:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr_next;
2092:../Libraries/XMCLib/src/xmc_vadc.c **** 
2093:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsResultRegisterFifoHead:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2094:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsResultRegisterFifoHead:Wrong Result Register",
2095:../Libraries/XMCLib/src/xmc_vadc.c ****              ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
2096:../Libraries/XMCLib/src/xmc_vadc.c **** 
2097:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head = group_ptr->RCR[res_reg];
 5667              	 .loc 2 2097 0
 5668 000a 7B68     	 ldr r3,[r7,#4]
 5669 000c 3A68     	 ldr r2,[r7]
 5670 000e A032     	 adds r2,r2,#160
 5671 0010 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5672 0014 3B61     	 str r3,[r7,#16]
2098:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5673              	 .loc 2 2098 0
 5674 0016 3B69     	 ldr r3,[r7,#16]
 5675 0018 03F0C063 	 and r3,r3,#100663296
 5676 001c 3B61     	 str r3,[r7,#16]
2099:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next = group_ptr->RCR[res_reg - (uint32_t)1];
 5677              	 .loc 2 2099 0
 5678 001e 3B68     	 ldr r3,[r7]
 5679 0020 5A1E     	 subs r2,r3,#1
 5680 0022 7B68     	 ldr r3,[r7,#4]
 5681 0024 A032     	 adds r2,r2,#160
 5682 0026 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5683 002a FB60     	 str r3,[r7,#12]
2100:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5684              	 .loc 2 2100 0
 5685 002c FB68     	 ldr r3,[r7,#12]
 5686 002e 03F0C063 	 and r3,r3,#100663296
 5687 0032 FB60     	 str r3,[r7,#12]
2101:../Libraries/XMCLib/src/xmc_vadc.c **** 
2102:../Libraries/XMCLib/src/xmc_vadc.c ****   if (rcr_head)
 5688              	 .loc 2 2102 0
 5689 0034 3B69     	 ldr r3,[r7,#16]
 5690 0036 002B     	 cmp r3,#0
 5691 0038 02D0     	 beq .L207
2103:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2104:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)false;
 5692              	 .loc 2 2104 0
 5693 003a 0023     	 movs r3,#0
 5694 003c FB75     	 strb r3,[r7,#23]
 5695 003e 07E0     	 b .L208
 5696              	.L207:
2105:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2106:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (rcr_next)
 5697              	 .loc 2 2106 0
 5698 0040 FB68     	 ldr r3,[r7,#12]
 5699 0042 002B     	 cmp r3,#0
 5700 0044 02D0     	 beq .L209
2107:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2108:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)true;
 5701              	 .loc 2 2108 0
 5702 0046 0123     	 movs r3,#1
 5703 0048 FB75     	 strb r3,[r7,#23]
 5704 004a 01E0     	 b .L208
 5705              	.L209:
2109:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2110:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2111:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2112:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)false;
 5706              	 .loc 2 2112 0
 5707 004c 0023     	 movs r3,#0
 5708 004e FB75     	 strb r3,[r7,#23]
 5709              	.L208:
2113:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2114:../Libraries/XMCLib/src/xmc_vadc.c **** 
2115:../Libraries/XMCLib/src/xmc_vadc.c ****   return ret_val;
 5710              	 .loc 2 2115 0
 5711 0050 FB7D     	 ldrb r3,[r7,#23]
2116:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5712              	 .loc 2 2116 0
 5713 0052 1846     	 mov r0,r3
 5714 0054 1C37     	 adds r7,r7,#28
 5715              	.LCFI446:
 5716              	 .cfi_def_cfa_offset 4
 5717 0056 BD46     	 mov sp,r7
 5718              	.LCFI447:
 5719              	 .cfi_def_cfa_register 13
 5720              	 
 5721 0058 5DF8047B 	 ldr r7,[sp],#4
 5722              	.LCFI448:
 5723              	 .cfi_restore 7
 5724              	 .cfi_def_cfa_offset 0
 5725 005c 7047     	 bx lr
 5726              	 .cfi_endproc
 5727              	.LFE308:
 5729 005e 00BF     	 .text
 5730              	.Letext0:
 5731              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 5732              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 5733              	 .file 5 "C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/CMSIS/Infineon/XMC4700_series/Include/XMC4700.h"
 5734              	 .file 6 "C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/XMCLib/inc/xmc4_scu.h"
 5735              	 .file 7 "C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/CMSIS/Include/core_cm4.h"
 5736              	 .file 8 "C:/Users/Will/Documents/GitHub/Launch-DAQ/Libraries/CMSIS/Infineon/XMC4700_series/Include/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_vadc.c
    {standard input}:20     .text.XMC_VADC_GROUP_ExternalMuxControlInit:00000000 $t
    {standard input}:24     .text.XMC_VADC_GROUP_ExternalMuxControlInit:00000000 XMC_VADC_GROUP_ExternalMuxControlInit
    {standard input}:114    .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot:00000000 $t
    {standard input}:118    .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot:00000000 XMC_VADC_GROUP_ScanEnableArbitrationSlot
    {standard input}:159    .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot:00000000 $t
    {standard input}:163    .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot:00000000 XMC_VADC_GROUP_ScanDisableArbitrationSlot
    {standard input}:204    .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:00000000 $t
    {standard input}:208    .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:00000000 XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
    {standard input}:249    .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:00000000 $t
    {standard input}:253    .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:00000000 XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
    {standard input}:294    .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot:00000000 $t
    {standard input}:298    .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot:00000000 XMC_VADC_GROUP_QueueEnableArbitrationSlot
    {standard input}:339    .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot:00000000 $t
    {standard input}:343    .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot:00000000 XMC_VADC_GROUP_QueueDisableArbitrationSlot
    {standard input}:384    .text.XMC_VADC_GROUP_QueueFlushEntries:00000000 $t
    {standard input}:388    .text.XMC_VADC_GROUP_QueueFlushEntries:00000000 XMC_VADC_GROUP_QueueFlushEntries
    {standard input}:438    .rodata.g_xmc_vadc_group_array:00000000 $d
    {standard input}:441    .rodata.g_xmc_vadc_group_array:00000000 g_xmc_vadc_group_array
    {standard input}:447    .text.XMC_VADC_GLOBAL_EnableModule:00000000 $t
    {standard input}:452    .text.XMC_VADC_GLOBAL_EnableModule:00000000 XMC_VADC_GLOBAL_EnableModule
    {standard input}:479    .text.XMC_VADC_GLOBAL_DisableModule:00000000 $t
    {standard input}:484    .text.XMC_VADC_GLOBAL_DisableModule:00000000 XMC_VADC_GLOBAL_DisableModule
    {standard input}:510    .text.XMC_VADC_GLOBAL_Init:00000000 $t
    {standard input}:515    .text.XMC_VADC_GLOBAL_Init:00000000 XMC_VADC_GLOBAL_Init
    {standard input}:580    .text.XMC_VADC_GLOBAL_InputClassInit:00000000 $t
    {standard input}:585    .text.XMC_VADC_GLOBAL_InputClassInit:00000000 XMC_VADC_GLOBAL_InputClassInit
    {standard input}:646    .text.XMC_VADC_GLOBAL_InputClassInit:00000044 $d
    {standard input}:651    .text.XMC_VADC_GLOBAL_StartupCalibration:00000000 $t
    {standard input}:656    .text.XMC_VADC_GLOBAL_StartupCalibration:00000000 XMC_VADC_GLOBAL_StartupCalibration
    {standard input}:731    .text.XMC_VADC_GLOBAL_StartupCalibration:0000005c $d
    {standard input}:736    .text.XMC_VADC_GLOBAL_SetBoundaries:00000000 $t
    {standard input}:741    .text.XMC_VADC_GLOBAL_SetBoundaries:00000000 XMC_VADC_GLOBAL_SetBoundaries
    {standard input}:796    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000000 $t
    {standard input}:801    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000000 XMC_VADC_GLOBAL_SetIndividualBoundary
    {standard input}:880    .text.XMC_VADC_GLOBAL_SetCompareValue:00000000 $t
    {standard input}:885    .text.XMC_VADC_GLOBAL_SetCompareValue:00000000 XMC_VADC_GLOBAL_SetCompareValue
    {standard input}:937    .text.XMC_VADC_GLOBAL_GetCompareResult:00000000 $t
    {standard input}:942    .text.XMC_VADC_GLOBAL_GetCompareResult:00000000 XMC_VADC_GLOBAL_GetCompareResult
    {standard input}:1000   .text.XMC_VADC_GLOBAL_BindGroupToEMux:00000000 $t
    {standard input}:1005   .text.XMC_VADC_GLOBAL_BindGroupToEMux:00000000 XMC_VADC_GLOBAL_BindGroupToEMux
    {standard input}:1078   .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:00000000 $t
    {standard input}:1083   .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:00000000 XMC_VADC_GLOBAL_SetResultEventInterruptNode
    {standard input}:1148   .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:1153   .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:00000000 XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
    {standard input}:1217   .text.XMC_VADC_GROUP_Init:00000000 $t
    {standard input}:1222   .text.XMC_VADC_GROUP_Init:00000000 XMC_VADC_GROUP_Init
    {standard input}:1302   .text.XMC_VADC_GROUP_InputClassInit:00000000 XMC_VADC_GROUP_InputClassInit
    {standard input}:1297   .text.XMC_VADC_GROUP_InputClassInit:00000000 $t
    {standard input}:1430   .text.XMC_VADC_GROUP_SetPowerMode:00000000 $t
    {standard input}:1435   .text.XMC_VADC_GROUP_SetPowerMode:00000000 XMC_VADC_GROUP_SetPowerMode
    {standard input}:1489   .text.XMC_VADC_GROUP_SetSyncSlave:00000000 $t
    {standard input}:1494   .text.XMC_VADC_GROUP_SetSyncSlave:00000000 XMC_VADC_GROUP_SetSyncSlave
    {standard input}:1558   .text.XMC_VADC_GROUP_SetSyncMaster:00000000 $t
    {standard input}:1563   .text.XMC_VADC_GROUP_SetSyncMaster:00000000 XMC_VADC_GROUP_SetSyncMaster
    {standard input}:1610   .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000000 $t
    {standard input}:1615   .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000000 XMC_VADC_GROUP_CheckSlaveReadiness
    {standard input}:1699   .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000064 $d
    {standard input}:1704   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000000 $t
    {standard input}:1709   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000000 XMC_VADC_GROUP_IgnoreSlaveReadiness
    {standard input}:1794   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000064 $d
    {standard input}:1799   .text.XMC_VADC_GROUP_SetSyncSlaveReadySignal:00000000 $t
    {standard input}:1804   .text.XMC_VADC_GROUP_SetSyncSlaveReadySignal:00000000 XMC_VADC_GROUP_SetSyncSlaveReadySignal
    {standard input}:1862   .text.XMC_VADC_GROUP_EnableChannelSyncRequest:00000000 $t
    {standard input}:1867   .text.XMC_VADC_GROUP_EnableChannelSyncRequest:00000000 XMC_VADC_GROUP_EnableChannelSyncRequest
    {standard input}:1923   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:00000000 $t
    {standard input}:1928   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:00000000 XMC_VADC_GROUP_DisableChannelSyncRequest
    {standard input}:1984   .text.XMC_VADC_GROUP_IsConverterBusy:00000000 $t
    {standard input}:1989   .text.XMC_VADC_GROUP_IsConverterBusy:00000000 XMC_VADC_GROUP_IsConverterBusy
    {standard input}:2040   .text.XMC_VADC_GROUP_SetBoundaries:00000000 $t
    {standard input}:2045   .text.XMC_VADC_GROUP_SetBoundaries:00000000 XMC_VADC_GROUP_SetBoundaries
    {standard input}:2111   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000000 $t
    {standard input}:2116   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000000 XMC_VADC_GROUP_SetIndividualBoundary
    {standard input}:2195   .text.XMC_VADC_GROUP_TriggerServiceRequest:00000000 $t
    {standard input}:2200   .text.XMC_VADC_GROUP_TriggerServiceRequest:00000000 XMC_VADC_GROUP_TriggerServiceRequest
    {standard input}:2269   .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode:00000000 $t
    {standard input}:2274   .text.XMC_VADC_GROUP_SetBoundaryEventInterruptNode:00000000 XMC_VADC_GROUP_SetBoundaryEventInterruptNode
    {standard input}:2336   .text.XMC_VADC_GROUP_ScanInit:00000000 $t
    {standard input}:2341   .text.XMC_VADC_GROUP_ScanInit:00000000 XMC_VADC_GROUP_ScanInit
    {standard input}:2439   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000000 $t
    {standard input}:2444   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000000 XMC_VADC_GROUP_ScanSelectTrigger
    {standard input}:2503   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000000 $t
    {standard input}:2508   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000000 XMC_VADC_GROUP_ScanSelectTriggerEdge
    {standard input}:2567   .text.XMC_VADC_GROUP_ScanSelectGating:00000000 $t
    {standard input}:2572   .text.XMC_VADC_GROUP_ScanSelectGating:00000000 XMC_VADC_GROUP_ScanSelectGating
    {standard input}:2631   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000000 $t
    {standard input}:2636   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000000 XMC_VADC_GROUP_ScanSequenceAbort
    {standard input}:2714   .text.XMC_VADC_GROUP_ScanSequenceAbort:0000007c $d
    {standard input}:2719   .text.XMC_VADC_GROUP_ScanGetNumChannelsPending:00000000 $t
    {standard input}:2724   .text.XMC_VADC_GROUP_ScanGetNumChannelsPending:00000000 XMC_VADC_GROUP_ScanGetNumChannelsPending
    {standard input}:2803   .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:2808   .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:00000000 XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode
    {standard input}:2863   .text.XMC_VADC_GROUP_ScanRemoveChannel:00000000 $t
    {standard input}:2868   .text.XMC_VADC_GROUP_ScanRemoveChannel:00000000 XMC_VADC_GROUP_ScanRemoveChannel
    {standard input}:2921   .text.XMC_VADC_GLOBAL_BackgroundInit:00000000 $t
    {standard input}:2926   .text.XMC_VADC_GLOBAL_BackgroundInit:00000000 XMC_VADC_GLOBAL_BackgroundInit
    {standard input}:3082   .text.XMC_VADC_GLOBAL_BackgroundInit:000000f8 $d
    {standard input}:3087   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000000 $t
    {standard input}:3092   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000000 XMC_VADC_GLOBAL_BackgroundSelectTrigger
    {standard input}:3150   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000000 $t
    {standard input}:3155   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000000 XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge
    {standard input}:3214   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000000 $t
    {standard input}:3219   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000000 XMC_VADC_GLOBAL_BackgroundSelectGating
    {standard input}:3277   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:00000000 $t
    {standard input}:3282   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:00000000 XMC_VADC_GLOBAL_BackgroundAbortSequence
    {standard input}:3392   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:000000a8 $d
    {standard input}:3398   .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:00000000 $t
    {standard input}:3403   .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:00000000 XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending
    {standard input}:3500   .text.XMC_VADC_GROUP_QueueInit:00000000 $t
    {standard input}:3505   .text.XMC_VADC_GROUP_QueueInit:00000000 XMC_VADC_GROUP_QueueInit
    {standard input}:3603   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000000 $t
    {standard input}:3608   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000000 XMC_VADC_GROUP_QueueSelectTrigger
    {standard input}:3667   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000000 $t
    {standard input}:3672   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000000 XMC_VADC_GROUP_QueueSelectTriggerEdge
    {standard input}:3731   .text.XMC_VADC_GROUP_QueueSelectGating:00000000 $t
    {standard input}:3736   .text.XMC_VADC_GROUP_QueueSelectGating:00000000 XMC_VADC_GROUP_QueueSelectGating
    {standard input}:3795   .text.XMC_VADC_GROUP_QueueGetLength:00000000 $t
    {standard input}:3800   .text.XMC_VADC_GROUP_QueueGetLength:00000000 XMC_VADC_GROUP_QueueGetLength
    {standard input}:3872   .text.XMC_VADC_GROUP_QueueAbortSequence:00000000 $t
    {standard input}:3877   .text.XMC_VADC_GROUP_QueueAbortSequence:00000000 XMC_VADC_GROUP_QueueAbortSequence
    {standard input}:3946   .text.XMC_VADC_GROUP_QueueAbortSequence:00000064 $d
    {standard input}:3951   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000000 $t
    {standard input}:3956   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000000 XMC_VADC_GROUP_QueueRemoveChannel
    {standard input}:4054   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000094 $d
    {standard input}:4059   .text.XMC_VADC_GROUP_QueueGetNextChannel:00000000 $t
    {standard input}:4064   .text.XMC_VADC_GROUP_QueueGetNextChannel:00000000 XMC_VADC_GROUP_QueueGetNextChannel
    {standard input}:4132   .text.XMC_VADC_GROUP_QueueGetInterruptedChannel:00000000 $t
    {standard input}:4137   .text.XMC_VADC_GROUP_QueueGetInterruptedChannel:00000000 XMC_VADC_GROUP_QueueGetInterruptedChannel
    {standard input}:4192   .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:4197   .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:00000000 XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode
    {standard input}:4251   .text.XMC_VADC_GROUP_ChannelInit:00000000 $t
    {standard input}:4256   .text.XMC_VADC_GROUP_ChannelInit:00000000 XMC_VADC_GROUP_ChannelInit
    {standard input}:4393   .text.XMC_VADC_GROUP_SetChannelAlias:00000000 $t
    {standard input}:4398   .text.XMC_VADC_GROUP_SetChannelAlias:00000000 XMC_VADC_GROUP_SetChannelAlias
    {standard input}:4475   .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds:00000000 $t
    {standard input}:4480   .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds:00000000 XMC_VADC_GROUP_ChannelIsResultOutOfBounds
    {standard input}:4561   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000000 $t
    {standard input}:4566   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000000 XMC_VADC_GROUP_ChannelSetInputReference
    {standard input}:4626   .text.XMC_VADC_GROUP_ChannelSetResultRegister:00000000 $t
    {standard input}:4631   .text.XMC_VADC_GROUP_ChannelSetResultRegister:00000000 XMC_VADC_GROUP_ChannelSetResultRegister
    {standard input}:4690   .text.XMC_VADC_GROUP_ChannelSetIclass:00000000 $t
    {standard input}:4695   .text.XMC_VADC_GROUP_ChannelSetIclass:00000000 XMC_VADC_GROUP_ChannelSetIclass
    {standard input}:4754   .text.XMC_VADC_GROUP_ChannelGetResultRegister:00000000 $t
    {standard input}:4759   .text.XMC_VADC_GROUP_ChannelGetResultRegister:00000000 XMC_VADC_GROUP_ChannelGetResultRegister
    {standard input}:4806   .text.XMC_VADC_GROUP_ChannelTriggerEvent:00000000 $t
    {standard input}:4811   .text.XMC_VADC_GROUP_ChannelTriggerEvent:00000000 XMC_VADC_GROUP_ChannelTriggerEvent
    {standard input}:4862   .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode:00000000 $t
    {standard input}:4867   .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode:00000000 XMC_VADC_GROUP_ChannelSetEventInterruptNode
    {standard input}:4931   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000000 $t
    {standard input}:4936   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000000 XMC_VADC_GROUP_ChannelTriggerEventGenCriteria
    {standard input}:4996   .text.XMC_VADC_GROUP_ChannelSetBoundarySelection:00000000 $t
    {standard input}:5001   .text.XMC_VADC_GROUP_ChannelSetBoundarySelection:00000000 XMC_VADC_GROUP_ChannelSetBoundarySelection
    {standard input}:5071   .text.XMC_VADC_GROUP_AddResultToFifo:00000000 $t
    {standard input}:5076   .text.XMC_VADC_GROUP_AddResultToFifo:00000000 XMC_VADC_GROUP_AddResultToFifo
    {standard input}:5132   .text.XMC_VADC_GROUP_SetResultFastCompareValue:00000000 $t
    {standard input}:5137   .text.XMC_VADC_GROUP_SetResultFastCompareValue:00000000 XMC_VADC_GROUP_SetResultFastCompareValue
    {standard input}:5198   .text.XMC_VADC_GROUP_GetFastCompareResult:00000000 $t
    {standard input}:5203   .text.XMC_VADC_GROUP_GetFastCompareResult:00000000 XMC_VADC_GROUP_GetFastCompareResult
    {standard input}:5264   .text.XMC_VADC_GROUP_SetResultSubtractionValue:00000000 $t
    {standard input}:5269   .text.XMC_VADC_GROUP_SetResultSubtractionValue:00000000 XMC_VADC_GROUP_SetResultSubtractionValue
    {standard input}:5324   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000000 $t
    {standard input}:5329   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000000 XMC_VADC_GROUP_SetResultInterruptNode
    {standard input}:5430   .text.XMC_VADC_GROUP_GetResultFifoTail:00000000 $t
    {standard input}:5435   .text.XMC_VADC_GROUP_GetResultFifoTail:00000000 XMC_VADC_GROUP_GetResultFifoTail
    {standard input}:5648   .text.XMC_VADC_GROUP_IsResultRegisterFifoHead:00000000 XMC_VADC_GROUP_IsResultRegisterFifoHead
    {standard input}:5553   .text.XMC_VADC_GROUP_GetResultFifoHead:00000000 $t
    {standard input}:5558   .text.XMC_VADC_GROUP_GetResultFifoHead:00000000 XMC_VADC_GROUP_GetResultFifoHead
    {standard input}:5643   .text.XMC_VADC_GROUP_IsResultRegisterFifoHead:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_CLOCK_GatePeripheralClock
