
jme_DAQ_Integrated_XMC4700-F144x2048_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008f5c  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00020000  2**0
                  ALLOC
  2 .data         00000310  1ffe8800  0c008f5c  00018800  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00006cf0  1ffe8b10  0c00926c  00018b10  2**2
                  ALLOC
  4 ETH_RAM       000030a0  20000000  20000000  00020000  2**2
                  ALLOC
  5 .no_init      00000014  2003ffc0  2003ffc0  0001ffc0  2**2
                  ALLOC
  6 .debug_aranges 00001810  00000000  00000000  00018b10  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00028c73  00000000  00000000  0001a320  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000576c  00000000  00000000  00042f93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000e278  00000000  00000000  000486ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000061d8  00000000  00000000  00056978  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000dcb8  00000000  00000000  0005cb50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c4d1  00000000  00000000  0006a808  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001458  00000000  00000000  00076cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 00000de5  00000000  00000000  00078131  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	a5 2c 00 08 99 02 00 08 99 02 00 08 99 02 00 08     .,..............
 800004c:	4d 87 00 08 11 87 00 08 99 02 00 08 99 02 00 08     M...............
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 a9 86 00 08 89 87 00 08 99 02 00 08     ................
 800012c:	c9 86 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 01 3f 00 08 99 02 00 08     .........?......
 80001ec:	99 02 00 08 65 48 00 08 00 00 00 00 11 3f 00 08     ....eH.......?..
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
    ldr r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
    ldr r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
    cmp r4, r5
 800020c:	42ac      	cmp	r4, r5
    bge .L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
    ldr r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
    ldr r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
    ldr r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
    subs    r3, #4
 8000216:	3b04      	subs	r3, #4
    ittt    ge
 8000218:	bfa2      	ittt	ge
    ldrge   r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
    strge   r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
    bge .L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

    adds    r4, #12
 8000220:	340c      	adds	r4, #12
    b   .L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
    ldr r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
    ldr r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
    cmp r3, r4
 8000228:	42a3      	cmp	r3, r4
    bge .L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
    ldr r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
    ldr r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
    movs    r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
    subs    r2, #4
 8000232:	3a04      	subs	r2, #4
    itt ge
 8000234:	bfa4      	itt	ge
    strge   r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
    bge .L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

    adds    r3, #8
 800023a:	3308      	adds	r3, #8
    b   .L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c008f5c 	.word	0x0c008f5c
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	00000310 	.word	0x00000310
 8000254:	0c008f5c 	.word	0x0c008f5c
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe8b10 	.word	0x1ffe8b10
 8000264:	00006cf0 	.word	0x00006cf0
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	000030a0 	.word	0x000030a0

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
    ldr r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
    ldr r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
    ldr r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
    ldr r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
    b   .L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	08008aa1 	.word	0x08008aa1
    blx  r0
#endif

    ldr  r0, =main
 8000294:	0800840d 	.word	0x0800840d

08000298 <BusFault_Handler>:
    .align  1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x1c>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  SystemCoreSetup();
 80002ae:	f007 fe91 	bl	8007fd4 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002b2:	f007 fef9 	bl	80080a8 <SystemCoreClockSetup>
}
 80002b6:	bd98      	pop	{r3, r4, r7, pc}
 80002b8:	2003ffc4 	.word	0x2003ffc4

080002bc <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d03e      	beq.n	800034c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d002      	beq.n	80002e0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002da:	4b2b      	ldr	r3, [pc, #172]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e002      	b.n	80002e6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002e0:	f007 fed8 	bl	8008094 <OSCHP_GetFrequency>
 80002e4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002e6:	4b27      	ldr	r3, [pc, #156]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0304 	and.w	r3, r3, #4
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d020      	beq.n	8000334 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002f2:	4b24      	ldr	r3, [pc, #144]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80002fa:	0e1b      	lsrs	r3, r3, #24
 80002fc:	3301      	adds	r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000300:	4b20      	ldr	r3, [pc, #128]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000308:	0a1b      	lsrs	r3, r3, #8
 800030a:	3301      	adds	r3, #1
 800030c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800030e:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000316:	0c1b      	lsrs	r3, r3, #16
 8000318:	3301      	adds	r3, #1
 800031a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	fbb2 f3f3 	udiv	r3, r2, r3
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e00d      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800033c:	3301      	adds	r3, #1
 800033e:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	fbb2 f3f3 	udiv	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e001      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 800034e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	3301      	adds	r3, #1
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	3301      	adds	r3, #1
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000370:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000372:	4a06      	ldr	r2, [pc, #24]	; (800038c <SystemCoreClockUpdate+0xd0>)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	50004600 	.word	0x50004600
 8000384:	50004710 	.word	0x50004710
 8000388:	016e3600 	.word	0x016e3600
 800038c:	2003ffc0 	.word	0x2003ffc0

08000390 <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a07      	ldr	r2, [pc, #28]	; (80003b8 <XMC_ERU_Enable+0x28>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d107      	bne.n	80003b0 <XMC_ERU_Enable+0x20>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ERU1);
 80003a0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80003a4:	f000 facc 	bl	8000940 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 80003a8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80003ac:	f000 f944 	bl	8000638 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#else
  XMC_UNUSED_ARG(eru);
  #endif
}
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40044000 	.word	0x40044000

080003bc <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	60f8      	str	r0, [r7, #12]
 80003c4:	460b      	mov	r3, r1
 80003c6:	607a      	str	r2, [r7, #4]
 80003c8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003ca:	7afb      	ldrb	r3, [r7, #11]
 80003cc:	089b      	lsrs	r3, r3, #2
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	4618      	mov	r0, r3
 80003d2:	7afb      	ldrb	r3, [r7, #11]
 80003d4:	089b      	lsrs	r3, r3, #2
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	461a      	mov	r2, r3
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	3204      	adds	r2, #4
 80003de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003e2:	7afb      	ldrb	r3, [r7, #11]
 80003e4:	f003 0303 	and.w	r3, r3, #3
 80003e8:	00db      	lsls	r3, r3, #3
 80003ea:	4619      	mov	r1, r3
 80003ec:	23f8      	movs	r3, #248	; 0xf8
 80003ee:	408b      	lsls	r3, r1
 80003f0:	43db      	mvns	r3, r3
 80003f2:	ea02 0103 	and.w	r1, r2, r3
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	1d02      	adds	r2, r0, #4
 80003fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000402:	7afb      	ldrb	r3, [r7, #11]
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	4619      	mov	r1, r3
 8000408:	2303      	movs	r3, #3
 800040a:	408b      	lsls	r3, r1
 800040c:	43db      	mvns	r3, r3
 800040e:	401a      	ands	r2, r3
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	4a37      	ldr	r2, [pc, #220]	; (80004f4 <XMC_GPIO_Init+0x138>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d003      	beq.n	8000424 <XMC_GPIO_Init+0x68>
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	4a36      	ldr	r2, [pc, #216]	; (80004f8 <XMC_GPIO_Init+0x13c>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d10a      	bne.n	800043a <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000428:	7afb      	ldrb	r3, [r7, #11]
 800042a:	2101      	movs	r1, #1
 800042c:	fa01 f303 	lsl.w	r3, r1, r3
 8000430:	43db      	mvns	r3, r3
 8000432:	401a      	ands	r2, r3
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	661a      	str	r2, [r3, #96]	; 0x60
 8000438:	e03c      	b.n	80004b4 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	685a      	ldr	r2, [r3, #4]
 800043e:	7afb      	ldrb	r3, [r7, #11]
 8000440:	409a      	lsls	r2, r3
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000446:	7afb      	ldrb	r3, [r7, #11]
 8000448:	08db      	lsrs	r3, r3, #3
 800044a:	b2db      	uxtb	r3, r3
 800044c:	4618      	mov	r0, r3
 800044e:	7afb      	ldrb	r3, [r7, #11]
 8000450:	08db      	lsrs	r3, r3, #3
 8000452:	b2db      	uxtb	r3, r3
 8000454:	461a      	mov	r2, r3
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	3210      	adds	r2, #16
 800045a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800045e:	7afb      	ldrb	r3, [r7, #11]
 8000460:	f003 0307 	and.w	r3, r3, #7
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	4619      	mov	r1, r3
 8000468:	2307      	movs	r3, #7
 800046a:	408b      	lsls	r3, r1
 800046c:	43db      	mvns	r3, r3
 800046e:	ea02 0103 	and.w	r1, r2, r3
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	f100 0210 	add.w	r2, r0, #16
 8000478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800047c:	7afb      	ldrb	r3, [r7, #11]
 800047e:	08db      	lsrs	r3, r3, #3
 8000480:	b2db      	uxtb	r3, r3
 8000482:	4618      	mov	r0, r3
 8000484:	7afb      	ldrb	r3, [r7, #11]
 8000486:	08db      	lsrs	r3, r3, #3
 8000488:	b2db      	uxtb	r3, r3
 800048a:	461a      	mov	r2, r3
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	3210      	adds	r2, #16
 8000490:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	7a1b      	ldrb	r3, [r3, #8]
 8000498:	4619      	mov	r1, r3
 800049a:	7afb      	ldrb	r3, [r7, #11]
 800049c:	f003 0307 	and.w	r3, r3, #7
 80004a0:	009b      	lsls	r3, r3, #2
 80004a2:	fa01 f303 	lsl.w	r3, r1, r3
 80004a6:	ea42 0103 	orr.w	r1, r2, r3
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	f100 0210 	add.w	r2, r0, #16
 80004b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004b4:	7afb      	ldrb	r3, [r7, #11]
 80004b6:	089b      	lsrs	r3, r3, #2
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	4618      	mov	r0, r3
 80004bc:	7afb      	ldrb	r3, [r7, #11]
 80004be:	089b      	lsrs	r3, r3, #2
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	461a      	mov	r2, r3
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	3204      	adds	r2, #4
 80004c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	4619      	mov	r1, r3
 80004d2:	7afb      	ldrb	r3, [r7, #11]
 80004d4:	f003 0303 	and.w	r3, r3, #3
 80004d8:	00db      	lsls	r3, r3, #3
 80004da:	fa01 f303 	lsl.w	r3, r1, r3
 80004de:	ea42 0103 	orr.w	r1, r2, r3
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	1d02      	adds	r2, r0, #4
 80004e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004ea:	3714      	adds	r7, #20
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	48028e00 	.word	0x48028e00
 80004f8:	48028f00 	.word	0x48028f00

080004fc <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000500:	4b03      	ldr	r3, [pc, #12]	; (8000510 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8000502:	681b      	ldr	r3, [r3, #0]
}
 8000504:	4618      	mov	r0, r3
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	2003ffc0 	.word	0x2003ffc0

08000514 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 800051c:	f7ff fece 	bl	80002bc <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <XMC_SCU_lDelay+0x3c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <XMC_SCU_lDelay+0x40>)
 8000526:	fba2 2303 	umull	r2, r3, r2, r3
 800052a:	0c9a      	lsrs	r2, r3, #18
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	fb02 f303 	mul.w	r3, r2, r3
 8000532:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000534:	2300      	movs	r3, #0
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	e003      	b.n	8000542 <XMC_SCU_lDelay+0x2e>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800053a:	bf00      	nop
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	3301      	adds	r3, #1
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	68fa      	ldr	r2, [r7, #12]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	429a      	cmp	r2, r3
 8000548:	d3f7      	bcc.n	800053a <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	2003ffc0 	.word	0x2003ffc0
 8000554:	431bde83 	.word	0x431bde83

08000558 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000558:	b5b0      	push	{r4, r5, r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af02      	add	r7, sp, #8
 800055e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000560:	2000      	movs	r0, #0
 8000562:	f000 f8b9 	bl	80006d8 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000566:	f000 fa8b 	bl	8000a80 <XMC_SCU_HIB_EnableHibernateDomain>
  if (config->enable_osculp == true)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	79db      	ldrb	r3, [r3, #7]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d00a      	beq.n	8000588 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8000572:	f000 fac3 	bl	8000afc <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while(XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8000576:	bf00      	nop
 8000578:	f000 faae 	bl	8000ad8 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 800057c:	4603      	mov	r3, r0
 800057e:	f083 0301 	eor.w	r3, r3, #1
 8000582:	b2db      	uxtb	r3, r3
 8000584:	2b00      	cmp	r3, #0
 8000586:	d1f7      	bne.n	8000578 <XMC_SCU_CLOCK_Init+0x20>
  }
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	7a5b      	ldrb	r3, [r3, #9]
 800058c:	4618      	mov	r0, r3
 800058e:	f000 f91d 	bl	80007cc <XMC_SCU_HIB_SetStandbyClockSource>

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	7a1b      	ldrb	r3, [r3, #8]
 8000596:	4618      	mov	r0, r3
 8000598:	f000 fa4c 	bl	8000a34 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	7c1b      	ldrb	r3, [r3, #16]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 f931 	bl	8000808 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	7c5b      	ldrb	r3, [r3, #17]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 f954 	bl	8000858 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	7c9b      	ldrb	r3, [r3, #18]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f93b 	bl	8000830 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	7cdb      	ldrb	r3, [r3, #19]
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 f95e 	bl	8000880 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	799b      	ldrb	r3, [r3, #6]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d00a      	beq.n	80005e2 <XMC_SCU_CLOCK_Init+0x8a>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80005cc:	f000 fac8 	bl	8000b60 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80005d0:	bf00      	nop
 80005d2:	f000 faed 	bl	8000bb0 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80005d6:	4603      	mov	r3, r0
 80005d8:	f083 0301 	eor.w	r3, r3, #1
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1f7      	bne.n	80005d2 <XMC_SCU_CLOCK_Init+0x7a>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	78db      	ldrb	r3, [r3, #3]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d102      	bne.n	80005f0 <XMC_SCU_CLOCK_Init+0x98>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 80005ea:	f000 fb05 	bl	8000bf8 <XMC_SCU_CLOCK_DisableSystemPll>
 80005ee:	e014      	b.n	800061a <XMC_SCU_CLOCK_Init+0xc2>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 80005f0:	f000 faf2 	bl	8000bd8 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	8899      	ldrh	r1, [r3, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000600:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000606:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	4608      	mov	r0, r1
 8000610:	4611      	mov	r1, r2
 8000612:	462a      	mov	r2, r5
 8000614:	4623      	mov	r3, r4
 8000616:	f000 faff 	bl	8000c18 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	68db      	ldr	r3, [r3, #12]
 800061e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000622:	d103      	bne.n	800062c <XMC_SCU_CLOCK_Init+0xd4>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8000624:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000628:	f000 f856 	bl	80006d8 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800062c:	f7ff fe46 	bl	80002bc <SystemCoreClockUpdate>
}
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bdb0      	pop	{r4, r5, r7, pc}
 8000636:	bf00      	nop

08000638 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	0f1b      	lsrs	r3, r3, #28
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800064c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	4613      	mov	r3, r2
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	4413      	add	r3, r2
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	461a      	mov	r2, r3
 800065a:	4b04      	ldr	r3, [pc, #16]	; (800066c <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 800065c:	4413      	add	r3, r2
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	601a      	str	r2, [r3, #0]
}
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	50004414 	.word	0x50004414

08000670 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	0f1b      	lsrs	r3, r3, #28
 800067c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000684:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	4613      	mov	r3, r2
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	4413      	add	r3, r2
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	461a      	mov	r2, r3
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8000694:	4413      	add	r3, r2
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	4013      	ands	r3, r2
 800069c:	2b00      	cmp	r3, #0
 800069e:	bf14      	ite	ne
 80006a0:	2301      	movne	r3, #1
 80006a2:	2300      	moveq	r3, #0
 80006a4:	b2db      	uxtb	r3, r3
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	5000440c 	.word	0x5000440c

080006b8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80006bc:	f7ff ff1e 	bl	80004fc <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80006c0:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80006c4:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	50004600 	.word	0x50004600

080006d8 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006e0:	4906      	ldr	r1, [pc, #24]	; (80006fc <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006e4:	68db      	ldr	r3, [r3, #12]
 80006e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	50004600 	.word	0x50004600

08000700 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000708:	4906      	ldr	r1, [pc, #24]	; (8000724 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4313      	orrs	r3, r2
 8000716:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	50004600 	.word	0x50004600

08000728 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000730:	4906      	ldr	r1, [pc, #24]	; (800074c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000736:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4313      	orrs	r3, r2
 800073e:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	50004600 	.word	0x50004600

08000750 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800075a:	88fb      	ldrh	r3, [r7, #6]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d108      	bne.n	8000772 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000760:	4a0a      	ldr	r2, [pc, #40]	; (800078c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000764:	68db      	ldr	r3, [r3, #12]
 8000766:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800076a:	f023 0301 	bic.w	r3, r3, #1
 800076e:	60d3      	str	r3, [r2, #12]
 8000770:	e007      	b.n	8000782 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000772:	4a06      	ldr	r2, [pc, #24]	; (800078c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	60d3      	str	r3, [r2, #12]
  }
}
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	50004710 	.word	0x50004710

08000790 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800079a:	bf00      	nop
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 800079e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007a2:	f003 0308 	and.w	r3, r3, #8
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d1f8      	bne.n	800079c <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007aa:	4907      	ldr	r1, [pc, #28]	; (80007c8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80007b4:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007b6:	4313      	orrs	r3, r2
 80007b8:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	50004000 	.word	0x50004000
 80007c8:	50004300 	.word	0x50004300

080007cc <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007d6:	bf00      	nop
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80007da:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007de:	f003 0308 	and.w	r3, r3, #8
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d1f8      	bne.n	80007d8 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007e6:	4907      	ldr	r1, [pc, #28]	; (8000804 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80007f0:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007f2:	4313      	orrs	r3, r2
 80007f4:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	50004000 	.word	0x50004000
 8000804:	50004300 	.word	0x50004300

08000808 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000810:	4906      	ldr	r1, [pc, #24]	; (800082c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000814:	68db      	ldr	r3, [r3, #12]
 8000816:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800081e:	4313      	orrs	r3, r2
 8000820:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	50004600 	.word	0x50004600

08000830 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000838:	4906      	ldr	r1, [pc, #24]	; (8000854 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800083c:	6a1b      	ldr	r3, [r3, #32]
 800083e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000846:	4313      	orrs	r3, r2
 8000848:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	50004600 	.word	0x50004600

08000858 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000860:	4906      	ldr	r1, [pc, #24]	; (800087c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000864:	691b      	ldr	r3, [r3, #16]
 8000866:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800086e:	4313      	orrs	r3, r2
 8000870:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	50004600 	.word	0x50004600

08000880 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000888:	4906      	ldr	r1, [pc, #24]	; (80008a4 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000896:	4313      	orrs	r3, r2
 8000898:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	50004600 	.word	0x50004600

080008a8 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008b0:	4906      	ldr	r1, [pc, #24]	; (80008cc <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008be:	4313      	orrs	r3, r2
 80008c0:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	50004600 	.word	0x50004600

080008d0 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008d8:	4906      	ldr	r1, [pc, #24]	; (80008f4 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008e6:	4313      	orrs	r3, r2
 80008e8:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	50004600 	.word	0x50004600

080008f8 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000900:	4906      	ldr	r1, [pc, #24]	; (800091c <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000906:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800090e:	4313      	orrs	r3, r2
 8000910:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	50004600 	.word	0x50004600

08000920 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 800092a:	4a04      	ldr	r2, [pc, #16]	; (800093c <XMC_SCU_CLOCK_EnableClock+0x1c>)
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	6053      	str	r3, [r2, #4]
}
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	50004600 	.word	0x50004600

08000940 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	0f1b      	lsrs	r3, r3, #28
 800094c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000954:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	4613      	mov	r3, r2
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	4413      	add	r3, r2
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	461a      	mov	r2, r3
 8000962:	4b04      	ldr	r3, [pc, #16]	; (8000974 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8000964:	4413      	add	r3, r2
 8000966:	68ba      	ldr	r2, [r7, #8]
 8000968:	601a      	str	r2, [r3, #0]
}
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	50004648 	.word	0x50004648

08000978 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* API to ungate a given module clock */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	0f1b      	lsrs	r3, r3, #28
 8000984:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800098c:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	4613      	mov	r3, r2
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	4413      	add	r3, r2
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	461a      	mov	r2, r3
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <XMC_SCU_CLOCK_IsPeripheralClockGated+0x44>)
 800099c:	4413      	add	r3, r2
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	4013      	ands	r3, r2
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	bf14      	ite	ne
 80009a8:	2301      	movne	r3, #1
 80009aa:	2300      	moveq	r3, #0
 80009ac:	b2db      	uxtb	r3, r3
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	50004640 	.word	0x50004640

080009c0 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80009ca:	4a19      	ldr	r2, [pc, #100]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009cc:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009ce:	695b      	ldr	r3, [r3, #20]
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80009d6:	4a16      	ldr	r2, [pc, #88]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	f043 0310 	orr.w	r3, r3, #16
 80009e0:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80009e2:	4913      	ldr	r1, [pc, #76]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3b01      	subs	r3, #1
 80009ee:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80009f0:	4313      	orrs	r3, r2
 80009f2:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80009f4:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009fe:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a00:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	f023 0310 	bic.w	r3, r3, #16
 8000a0a:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000a0c:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a16:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000a18:	bf00      	nop
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000a1c:	691b      	ldr	r3, [r3, #16]
 8000a1e:	f003 0304 	and.w	r3, r3, #4
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d0f9      	beq.n	8000a1a <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	50004710 	.word	0x50004710

08000a34 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000a3e:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a40:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a48:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d10e      	bne.n	8000a6e <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a52:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000a5a:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000a5c:	2064      	movs	r0, #100	; 0x64
 8000a5e:	f7ff fd59 	bl	8000514 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000a62:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a6c:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000a6e:	2064      	movs	r0, #100	; 0x64
 8000a70:	f7ff fd50 	bl	8000514 <XMC_SCU_lDelay>
}
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	50004710 	.word	0x50004710

08000a80 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d109      	bne.n	8000aa4 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a96:	bf00      	nop
 8000a98:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d0f9      	beq.n	8000a98 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d00a      	beq.n	8000ac6 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ab6:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000ab8:	bf00      	nop
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d1f9      	bne.n	8000aba <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	50004200 	.word	0x50004200
 8000ad4:	50004400 	.word	0x50004400

08000ad8 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f003 0308 	and.w	r3, r3, #8
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bf0c      	ite	eq
 8000ae8:	2301      	moveq	r3, #1
 8000aea:	2300      	movne	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	50004300 	.word	0x50004300

08000afc <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8000b00:	bf00      	nop
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>)
 8000b04:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1f8      	bne.n	8000b02 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until the update of OSCULCTRL register in hibernate domain is completed */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000b10:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000b12:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b1a:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000b1c:	bf00      	nop
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>)
 8000b20:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000b24:	f003 0308 	and.w	r3, r3, #8
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d1f8      	bne.n	8000b1e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	f043 0308 	orr.w	r3, r3, #8
 8000b36:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8000b38:	bf00      	nop
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>)
 8000b3c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d1f8      	bne.n	8000b3a <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000b4a:	2208      	movs	r2, #8
 8000b4c:	609a      	str	r2, [r3, #8]
}
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	50004000 	.word	0x50004000
 8000b5c:	50004300 	.word	0x50004300

08000b60 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000b64:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b6e:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b70:	4d0d      	ldr	r5, [pc, #52]	; (8000ba8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000b7a:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000b7e:	f007 fa89 	bl	8008094 <OSCHP_GetFrequency>
 8000b82:	4602      	mov	r2, r0
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000b86:	fba3 2302 	umull	r2, r3, r3, r2
 8000b8a:	0d1b      	lsrs	r3, r3, #20
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b90:	4323      	orrs	r3, r4
 8000b92:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000b94:	4a03      	ldr	r2, [pc, #12]	; (8000ba4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b96:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b9e:	6053      	str	r3, [r2, #4]
}
 8000ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	50004710 	.word	0x50004710
 8000ba8:	50004700 	.word	0x50004700
 8000bac:	6b5fca6b 	.word	0x6b5fca6b

08000bb0 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000bbc:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000bc0:	bf0c      	ite	eq
 8000bc2:	2301      	moveq	r3, #1
 8000bc4:	2300      	movne	r3, #0
 8000bc6:	b2db      	uxtb	r3, r3
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	50004710 	.word	0x50004710

08000bd8 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000bdc:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000bde:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000be6:	f023 0302 	bic.w	r3, r3, #2
 8000bea:	6053      	str	r3, [r2, #4]
}
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	50004710 	.word	0x50004710

08000bf8 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000bfc:	4a05      	ldr	r2, [pc, #20]	; (8000c14 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000bfe:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c06:	f043 0302 	orr.w	r3, r3, #2
 8000c0a:	6053      	str	r3, [r2, #4]
}
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	50004710 	.word	0x50004710

08000c18 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60ba      	str	r2, [r7, #8]
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	4603      	mov	r3, r0
 8000c24:	81fb      	strh	r3, [r7, #14]
 8000c26:	460b      	mov	r3, r1
 8000c28:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000c2a:	89fb      	ldrh	r3, [r7, #14]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fd8f 	bl	8000750 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000c32:	7b7b      	ldrb	r3, [r7, #13]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	f040 8084 	bne.w	8000d42 <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000c3a:	89fb      	ldrh	r3, [r7, #14]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d109      	bne.n	8000c54 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000c40:	f007 fa28 	bl	8008094 <OSCHP_GetFrequency>
 8000c44:	4602      	mov	r2, r0
 8000c46:	4b4b      	ldr	r3, [pc, #300]	; (8000d74 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000c48:	fba3 2302 	umull	r2, r3, r3, r2
 8000c4c:	0c9b      	lsrs	r3, r3, #18
 8000c4e:	059b      	lsls	r3, r3, #22
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	e002      	b.n	8000c5a <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000c54:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000c58:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	fb02 f203 	mul.w	r2, r2, r3
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c68:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	4a42      	ldr	r2, [pc, #264]	; (8000d78 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c72:	091b      	lsrs	r3, r3, #4
 8000c74:	0d9b      	lsrs	r3, r3, #22
 8000c76:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c78:	4a40      	ldr	r2, [pc, #256]	; (8000d7c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c7a:	4b40      	ldr	r3, [pc, #256]	; (8000d7c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c84:	4a3d      	ldr	r2, [pc, #244]	; (8000d7c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c86:	4b3d      	ldr	r3, [pc, #244]	; (8000d7c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f043 0310 	orr.w	r3, r3, #16
 8000c8e:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c90:	493a      	ldr	r1, [pc, #232]	; (8000d7c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c92:	4b3a      	ldr	r3, [pc, #232]	; (8000d7c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	4b3a      	ldr	r3, [pc, #232]	; (8000d80 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000c98:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	3a01      	subs	r2, #1
 8000c9e:	0212      	lsls	r2, r2, #8
 8000ca0:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000ca8:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	3b01      	subs	r3, #1
 8000cae:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000cb4:	4a31      	ldr	r2, [pc, #196]	; (8000d7c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cb6:	4b31      	ldr	r3, [pc, #196]	; (8000d7c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cbe:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000cc0:	4a2e      	ldr	r2, [pc, #184]	; (8000d7c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cc2:	4b2e      	ldr	r3, [pc, #184]	; (8000d7c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f023 0310 	bic.w	r3, r3, #16
 8000cca:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000ccc:	4a2b      	ldr	r2, [pc, #172]	; (8000d7c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cce:	4b2b      	ldr	r3, [pc, #172]	; (8000d7c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd6:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000cd8:	bf00      	nop
 8000cda:	4b28      	ldr	r3, [pc, #160]	; (8000d7c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d0f9      	beq.n	8000cda <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000ce6:	4a25      	ldr	r2, [pc, #148]	; (8000d7c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ce8:	4b24      	ldr	r3, [pc, #144]	; (8000d7c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f023 0301 	bic.w	r3, r3, #1
 8000cf0:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000cf2:	bf00      	nop
 8000cf4:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d1f9      	bne.n	8000cf4 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	4a20      	ldr	r2, [pc, #128]	; (8000d84 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000d04:	fba2 2303 	umull	r2, r3, r2, r3
 8000d08:	095b      	lsrs	r3, r3, #5
 8000d0a:	0d9b      	lsrs	r3, r3, #22
 8000d0c:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000d0e:	6a3a      	ldr	r2, [r7, #32]
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d202      	bcs.n	8000d1c <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d16:	6938      	ldr	r0, [r7, #16]
 8000d18:	f000 f838 	bl	8000d8c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	085b      	lsrs	r3, r3, #1
 8000d20:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000d22:	fba2 2303 	umull	r2, r3, r2, r3
 8000d26:	095b      	lsrs	r3, r3, #5
 8000d28:	0d9b      	lsrs	r3, r3, #22
 8000d2a:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000d2c:	6a3a      	ldr	r2, [r7, #32]
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d202      	bcs.n	8000d3a <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d34:	6938      	ldr	r0, [r7, #16]
 8000d36:	f000 f829 	bl	8000d8c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000d3a:	6a38      	ldr	r0, [r7, #32]
 8000d3c:	f000 f826 	bl	8000d8c <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000d40:	e015      	b.n	8000d6e <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d42:	490e      	ldr	r1, [pc, #56]	; (8000d7c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d44:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000d4c:	6a3b      	ldr	r3, [r7, #32]
 8000d4e:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d50:	4313      	orrs	r3, r2
 8000d52:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d54:	4a09      	ldr	r2, [pc, #36]	; (8000d7c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000d60:	bf00      	nop
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0f9      	beq.n	8000d62 <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	431bde83 	.word	0x431bde83
 8000d78:	aaaaaaab 	.word	0xaaaaaaab
 8000d7c:	50004710 	.word	0x50004710
 8000d80:	f08080ff 	.word	0xf08080ff
 8000d84:	88888889 	.word	0x88888889
 8000d88:	b60b60b7 	.word	0xb60b60b7

08000d8c <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d94:	4907      	ldr	r1, [pc, #28]	; (8000db4 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3b01      	subs	r3, #1
 8000da2:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000da4:	4313      	orrs	r3, r2
 8000da6:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000da8:	2032      	movs	r0, #50	; 0x32
 8000daa:	f7ff fbb3 	bl	8000514 <XMC_SCU_lDelay>
}
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	50004710 	.word	0x50004710

08000db8 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	60da      	str	r2, [r3, #12]
}
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop

08000dd8 <XMC_CCU4_lDeassertReset>:

  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  switch ((uint32_t)module)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <XMC_CCU4_lDeassertReset+0x54>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d011      	beq.n	8000e0c <XMC_CCU4_lDeassertReset+0x34>
 8000de8:	4a10      	ldr	r2, [pc, #64]	; (8000e2c <XMC_CCU4_lDeassertReset+0x54>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d803      	bhi.n	8000df6 <XMC_CCU4_lDeassertReset+0x1e>
 8000dee:	4a10      	ldr	r2, [pc, #64]	; (8000e30 <XMC_CCU4_lDeassertReset+0x58>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d007      	beq.n	8000e04 <XMC_CCU4_lDeassertReset+0x2c>
      break;
#endif

    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   
 8000df4:	e016      	b.n	8000e24 <XMC_CCU4_lDeassertReset+0x4c>
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
 8000df6:	4a0f      	ldr	r2, [pc, #60]	; (8000e34 <XMC_CCU4_lDeassertReset+0x5c>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d00b      	beq.n	8000e14 <XMC_CCU4_lDeassertReset+0x3c>
 8000dfc:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <XMC_CCU4_lDeassertReset+0x60>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d00c      	beq.n	8000e1c <XMC_CCU4_lDeassertReset+0x44>
      break;
#endif

    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   
 8000e02:	e00f      	b.n	8000e24 <XMC_CCU4_lDeassertReset+0x4c>
__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
  {
    case (uint32_t)CCU40:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000e04:	2004      	movs	r0, #4
 8000e06:	f7ff fc17 	bl	8000638 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 8000e0a:	e00b      	b.n	8000e24 <XMC_CCU4_lDeassertReset+0x4c>
      
#if defined(CCU41)
    case (uint32_t)CCU41:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000e0c:	2008      	movs	r0, #8
 8000e0e:	f7ff fc13 	bl	8000638 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 8000e12:	e007      	b.n	8000e24 <XMC_CCU4_lDeassertReset+0x4c>
#endif

#if defined(CCU42)
    case (uint32_t)CCU42:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8000e14:	2010      	movs	r0, #16
 8000e16:	f7ff fc0f 	bl	8000638 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 8000e1a:	e003      	b.n	8000e24 <XMC_CCU4_lDeassertReset+0x4c>
#endif

#if defined(CCU43)
    case (uint32_t)CCU43:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000e1c:	4807      	ldr	r0, [pc, #28]	; (8000e3c <XMC_CCU4_lDeassertReset+0x64>)
 8000e1e:	f7ff fc0b 	bl	8000638 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 8000e22:	bf00      	nop
    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   

  }
}
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40010000 	.word	0x40010000
 8000e30:	4000c000 	.word	0x4000c000
 8000e34:	40014000 	.word	0x40014000
 8000e38:	48004000 	.word	0x48004000
 8000e3c:	10000001 	.word	0x10000001

08000e40 <XMC_CCU4_lUngateClock>:

  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  switch ((uint32_t)module)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <XMC_CCU4_lUngateClock+0x54>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d011      	beq.n	8000e74 <XMC_CCU4_lUngateClock+0x34>
 8000e50:	4a10      	ldr	r2, [pc, #64]	; (8000e94 <XMC_CCU4_lUngateClock+0x54>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d803      	bhi.n	8000e5e <XMC_CCU4_lUngateClock+0x1e>
 8000e56:	4a10      	ldr	r2, [pc, #64]	; (8000e98 <XMC_CCU4_lUngateClock+0x58>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d007      	beq.n	8000e6c <XMC_CCU4_lUngateClock+0x2c>
      break;
#endif  

    default:
      XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
      break;   
 8000e5c:	e016      	b.n	8000e8c <XMC_CCU4_lUngateClock+0x4c>
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
 8000e5e:	4a0f      	ldr	r2, [pc, #60]	; (8000e9c <XMC_CCU4_lUngateClock+0x5c>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d00b      	beq.n	8000e7c <XMC_CCU4_lUngateClock+0x3c>
 8000e64:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <XMC_CCU4_lUngateClock+0x60>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d00c      	beq.n	8000e84 <XMC_CCU4_lUngateClock+0x44>
      break;
#endif  

    default:
      XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
      break;   
 8000e6a:	e00f      	b.n	8000e8c <XMC_CCU4_lUngateClock+0x4c>
__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
  {
    case (uint32_t)CCU40:
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 8000e6c:	2004      	movs	r0, #4
 8000e6e:	f7ff fd67 	bl	8000940 <XMC_SCU_CLOCK_UngatePeripheralClock>
      break;
 8000e72:	e00b      	b.n	8000e8c <XMC_CCU4_lUngateClock+0x4c>
      
#if defined(CCU41)      
    case (uint32_t)CCU41:
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 8000e74:	2008      	movs	r0, #8
 8000e76:	f7ff fd63 	bl	8000940 <XMC_SCU_CLOCK_UngatePeripheralClock>
      break;
 8000e7a:	e007      	b.n	8000e8c <XMC_CCU4_lUngateClock+0x4c>
#endif

#if defined(CCU42)      
    case (uint32_t)CCU42:
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 8000e7c:	2010      	movs	r0, #16
 8000e7e:	f7ff fd5f 	bl	8000940 <XMC_SCU_CLOCK_UngatePeripheralClock>
      break;
 8000e82:	e003      	b.n	8000e8c <XMC_CCU4_lUngateClock+0x4c>
#endif

#if defined(CCU43)      
    case (uint32_t)CCU43:
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 8000e84:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <XMC_CCU4_lUngateClock+0x64>)
 8000e86:	f7ff fd5b 	bl	8000940 <XMC_SCU_CLOCK_UngatePeripheralClock>
      break;
 8000e8a:	bf00      	nop
    default:
      XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
      break;   
    
  }
}
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40010000 	.word	0x40010000
 8000e98:	4000c000 	.word	0x4000c000
 8000e9c:	40014000 	.word	0x40014000
 8000ea0:	48004000 	.word	0x48004000
 8000ea4:	10000001 	.word	0x10000001

08000ea8 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000eb0:	2010      	movs	r0, #16
 8000eb2:	f7ff fd35 	bl	8000920 <XMC_SCU_CLOCK_EnableClock>
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ffc2 	bl	8000e40 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ff8b 	bl	8000dd8 <XMC_CCU4_lDeassertReset>
#endif
}
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff ffe7 	bl	8000ea8 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ff6c 	bl	8000db8 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000eec:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000eee:	78fb      	ldrb	r3, [r7, #3]
 8000ef0:	039b      	lsls	r3, r3, #14
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	601a      	str	r2, [r3, #0]
}
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
		                            const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	795b      	ldrb	r3, [r3, #5]
 8000f1a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	051a      	lsls	r2, r3, #20
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	791b      	ldrb	r3, [r3, #4]
 8000f2a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	461a      	mov	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	795b      	ldrb	r3, [r3, #5]
 8000f3a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	461a      	mov	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	795b      	ldrb	r3, [r3, #5]
 8000f4a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	461a      	mov	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	791b      	ldrb	r3, [r3, #4]
 8000f5a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	461a      	mov	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b087      	sub	sp, #28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	70fb      	strb	r3, [r7, #3]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000f86:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8000f88:	78fb      	ldrb	r3, [r7, #3]
 8000f8a:	2b09      	cmp	r3, #9
 8000f8c:	d82c      	bhi.n	8000fe8 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 8000f8e:	a201      	add	r2, pc, #4	; (adr r2, 8000f94 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8000f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f94:	08000fbd 	.word	0x08000fbd
 8000f98:	08000fbd 	.word	0x08000fbd
 8000f9c:	08000fc7 	.word	0x08000fc7
 8000fa0:	08000fc7 	.word	0x08000fc7
 8000fa4:	08000fe9 	.word	0x08000fe9
 8000fa8:	08000fe9 	.word	0x08000fe9
 8000fac:	08000fe9 	.word	0x08000fe9
 8000fb0:	08000fe9 	.word	0x08000fe9
 8000fb4:	08000fd1 	.word	0x08000fd1
 8000fb8:	08000fdd 	.word	0x08000fdd
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
      break;
 8000fc4:	e016      	b.n	8000ff4 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8000fc6:	230c      	movs	r3, #12
 8000fc8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	617b      	str	r3, [r7, #20]
      break;
 8000fce:	e011      	b.n	8000ff4 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8000fd0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fd4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8000fd6:	2308      	movs	r3, #8
 8000fd8:	617b      	str	r3, [r7, #20]
      break;
 8000fda:	e00b      	b.n	8000ff4 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8000fdc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fe0:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8000fe2:	230a      	movs	r3, #10
 8000fe4:	617b      	str	r3, [r7, #20]
      break;
 8000fe6:	e005      	b.n	8000ff4 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8000fe8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000fec:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8000fee:	230c      	movs	r3, #12
 8000ff0:	617b      	str	r3, [r7, #20]
      break;
 8000ff2:	bf00      	nop
  }
  
  srs &= ~mask; 
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8000ffe:	78ba      	ldrb	r2, [r7, #2]
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	4313      	orrs	r3, r2
 800100a:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8001014:	371c      	adds	r7, #28
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <XMC_DMA_GetEventStatus>:
 * Source transaction complete -> ::XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE      <br>
 * Destination transaction complete -> ::XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE <br>
 * DMA error event -> ::XMC_DMA_CH_EVENT_ERROR                                     <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetEventStatus(XMC_DMA_t *const dma)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  return (dma->STATUSGLEV);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f8d3 3360 	ldr.w	r3, [r3, #864]	; 0x360
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <XMC_DMA_GetChannelsTransferCompleteStatus>:
 *
 * \par
 * The function returns GPDMA transfer complete interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsTransferCompleteStatus(XMC_DMA_t *const dma)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[0]);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
}
 800104a:	4618      	mov	r0, r3
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <XMC_DMA_GetChannelsBlockCompleteStatus>:
 *
 * \par
 * The function returns GPDMA block transfer complete interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsBlockCompleteStatus(XMC_DMA_t *const dma)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[2]);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <XMC_DMA_GetChannelsSourceTransactionCompleteStatus>:
 * \par<b>Note: </b><br>
 * If the source peripheral is memory, the source transaction complete interrupt is
 * ignored.
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsSourceTransactionCompleteStatus(XMC_DMA_t *const dma)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[4]);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <XMC_DMA_GetChannelsDestinationTransactionCompleteStatus>:
 * \par<b>Note: </b><br>
 * If the destination peripheral is memory, the destination transaction complete
 * interrupt is ignored.
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(XMC_DMA_t *const dma)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[6]);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <XMC_DMA_GetChannelsErrorStatus>:
 *
 * \par
 * The function returns error interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsErrorStatus(XMC_DMA_t *const dma)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[8]);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <XMC_DMA_Init>:
 * API IMPLEMENTATION
 *******************************************************************************/

/* Initialize GPDMA */
void XMC_DMA_Init(XMC_DMA_t *const dma)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  XMC_DMA_Enable(dma);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 f803 	bl	80010dc <XMC_DMA_Enable>
}
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <XMC_DMA_Enable>:

/* Enable GPDMA module */
void XMC_DMA_Enable(XMC_DMA_t *const dma)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <XMC_DMA_Enable+0x38>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d106      	bne.n	80010fa <XMC_DMA_Enable+0x1e>
  {
#endif
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 80010ec:	480a      	ldr	r0, [pc, #40]	; (8001118 <XMC_DMA_Enable+0x3c>)
 80010ee:	f7ff fc27 	bl	8000940 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 80010f2:	4809      	ldr	r0, [pc, #36]	; (8001118 <XMC_DMA_Enable+0x3c>)
 80010f4:	f7ff faa0 	bl	8000638 <XMC_SCU_RESET_DeassertPeripheralReset>
 80010f8:	e005      	b.n	8001106 <XMC_DMA_Enable+0x2a>
#if defined(GPDMA1)
  }
  else
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 80010fa:	4808      	ldr	r0, [pc, #32]	; (800111c <XMC_DMA_Enable+0x40>)
 80010fc:	f7ff fc20 	bl	8000940 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 8001100:	4806      	ldr	r0, [pc, #24]	; (800111c <XMC_DMA_Enable+0x40>)
 8001102:	f7ff fa99 	bl	8000638 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#endif

  dma->DMACFGREG = 0x1U;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2201      	movs	r2, #1
 800110a:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
}
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	50014000 	.word	0x50014000
 8001118:	20000010 	.word	0x20000010
 800111c:	20000020 	.word	0x20000020

08001120 <XMC_DMA_IsEnabled>:
#endif
}

/* Check is the GPDMA peripheral is enabled */
bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  bool status;

#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a33      	ldr	r2, [pc, #204]	; (80011f8 <XMC_DMA_IsEnabled+0xd8>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d125      	bne.n	800117c <XMC_DMA_IsEnabled+0x5c>
  {
#endif
    status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 8001130:	4832      	ldr	r0, [pc, #200]	; (80011fc <XMC_DMA_IsEnabled+0xdc>)
 8001132:	f7ff fa9d 	bl	8000670 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	bf14      	ite	ne
 800113c:	2301      	movne	r3, #1
 800113e:	2300      	moveq	r3, #0
 8001140:	b2db      	uxtb	r3, r3
 8001142:	f083 0301 	eor.w	r3, r3, #1
 8001146:	b2db      	uxtb	r3, r3
 8001148:	73fb      	strb	r3, [r7, #15]
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	73fb      	strb	r3, [r7, #15]
#if defined(CLOCK_GATING_SUPPORTED)
    status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d00a      	beq.n	800116e <XMC_DMA_IsEnabled+0x4e>
 8001158:	4828      	ldr	r0, [pc, #160]	; (80011fc <XMC_DMA_IsEnabled+0xdc>)
 800115a:	f7ff fc0d 	bl	8000978 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 800115e:	4603      	mov	r3, r0
 8001160:	f083 0301 	eor.w	r3, r3, #1
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <XMC_DMA_IsEnabled+0x4e>
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <XMC_DMA_IsEnabled+0x50>
 800116e:	2300      	movs	r3, #0
 8001170:	73fb      	strb	r3, [r7, #15]
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	73fb      	strb	r3, [r7, #15]
 800117a:	e024      	b.n	80011c6 <XMC_DMA_IsEnabled+0xa6>
#endif
#if defined(GPDMA1)
  }
  else
  {
    status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 800117c:	4820      	ldr	r0, [pc, #128]	; (8001200 <XMC_DMA_IsEnabled+0xe0>)
 800117e:	f7ff fa77 	bl	8000670 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	bf14      	ite	ne
 8001188:	2301      	movne	r3, #1
 800118a:	2300      	moveq	r3, #0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	f083 0301 	eor.w	r3, r3, #1
 8001192:	b2db      	uxtb	r3, r3
 8001194:	73fb      	strb	r3, [r7, #15]
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	73fb      	strb	r3, [r7, #15]
#if defined(CLOCK_GATING_SUPPORTED)
    status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00a      	beq.n	80011ba <XMC_DMA_IsEnabled+0x9a>
 80011a4:	4816      	ldr	r0, [pc, #88]	; (8001200 <XMC_DMA_IsEnabled+0xe0>)
 80011a6:	f7ff fbe7 	bl	8000978 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 80011aa:	4603      	mov	r3, r0
 80011ac:	f083 0301 	eor.w	r3, r3, #1
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <XMC_DMA_IsEnabled+0x9a>
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <XMC_DMA_IsEnabled+0x9c>
 80011ba:	2300      	movs	r3, #0
 80011bc:	73fb      	strb	r3, [r7, #15]
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	73fb      	strb	r3, [r7, #15]
#endif
  }
#endif

  /* DMA reset is not asserted and peripheral clock is not gated */
  if (status == true)
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d00f      	beq.n	80011ec <XMC_DMA_IsEnabled+0xcc>
  {
    status = status && (dma->DMACFGREG != 0U);
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d006      	beq.n	80011e0 <XMC_DMA_IsEnabled+0xc0>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f8d3 3398 	ldr.w	r3, [r3, #920]	; 0x398
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <XMC_DMA_IsEnabled+0xc0>
 80011dc:	2301      	movs	r3, #1
 80011de:	e000      	b.n	80011e2 <XMC_DMA_IsEnabled+0xc2>
 80011e0:	2300      	movs	r3, #0
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	50014000 	.word	0x50014000
 80011fc:	20000010 	.word	0x20000010
 8001200:	20000020 	.word	0x20000020

08001204 <XMC_DMA_EnableRequestLine>:

/* Enable request line */
void XMC_DMA_EnableRequestLine(XMC_DMA_t *const dma, uint8_t line, uint8_t peripheral)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	70fb      	strb	r3, [r7, #3]
 8001210:	4613      	mov	r3, r2
 8001212:	70bb      	strb	r3, [r7, #2]
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a1f      	ldr	r2, [pc, #124]	; (8001294 <XMC_DMA_EnableRequestLine+0x90>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d11b      	bne.n	8001254 <XMC_DMA_EnableRequestLine+0x50>
  {
#endif
    DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 800121c:	481e      	ldr	r0, [pc, #120]	; (8001298 <XMC_DMA_EnableRequestLine+0x94>)
 800121e:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <XMC_DMA_EnableRequestLine+0x94>)
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4619      	mov	r1, r3
 8001228:	230f      	movs	r3, #15
 800122a:	408b      	lsls	r3, r1
 800122c:	43db      	mvns	r3, r3
 800122e:	401a      	ands	r2, r3
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 8001230:	78bb      	ldrb	r3, [r7, #2]
 8001232:	78f9      	ldrb	r1, [r7, #3]
 8001234:	0089      	lsls	r1, r1, #2
 8001236:	408b      	lsls	r3, r1
{
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
  {
#endif
    DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8001238:	4313      	orrs	r3, r2
 800123a:	6083      	str	r3, [r0, #8]
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
    DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
 800123c:	4916      	ldr	r1, [pc, #88]	; (8001298 <XMC_DMA_EnableRequestLine+0x94>)
 800123e:	4b16      	ldr	r3, [pc, #88]	; (8001298 <XMC_DMA_EnableRequestLine+0x94>)
 8001240:	691a      	ldr	r2, [r3, #16]
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	2001      	movs	r0, #1
 800124a:	fa00 f303 	lsl.w	r3, r0, r3
 800124e:	4313      	orrs	r3, r2
 8001250:	610b      	str	r3, [r1, #16]
 8001252:	e019      	b.n	8001288 <XMC_DMA_EnableRequestLine+0x84>
#if defined(GPDMA1)
  }
  else
  {
    DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8001254:	4810      	ldr	r0, [pc, #64]	; (8001298 <XMC_DMA_EnableRequestLine+0x94>)
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <XMC_DMA_EnableRequestLine+0x94>)
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	78fb      	ldrb	r3, [r7, #3]
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4619      	mov	r1, r3
 8001260:	230f      	movs	r3, #15
 8001262:	408b      	lsls	r3, r1
 8001264:	43db      	mvns	r3, r3
 8001266:	401a      	ands	r2, r3
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 8001268:	78bb      	ldrb	r3, [r7, #2]
 800126a:	78f9      	ldrb	r1, [r7, #3]
 800126c:	0089      	lsls	r1, r1, #2
 800126e:	408b      	lsls	r3, r1
    DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
#if defined(GPDMA1)
  }
  else
  {
    DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8001270:	4313      	orrs	r3, r2
 8001272:	60c3      	str	r3, [r0, #12]
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
    DLR->LNEN |= (0x100UL << line);
 8001274:	4908      	ldr	r1, [pc, #32]	; (8001298 <XMC_DMA_EnableRequestLine+0x94>)
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <XMC_DMA_EnableRequestLine+0x94>)
 8001278:	691a      	ldr	r2, [r3, #16]
 800127a:	78fb      	ldrb	r3, [r7, #3]
 800127c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001280:	fa00 f303 	lsl.w	r3, r0, r3
 8001284:	4313      	orrs	r3, r2
 8001286:	610b      	str	r3, [r1, #16]
  }
#endif
}
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	50014000 	.word	0x50014000
 8001298:	50004900 	.word	0x50004900

0800129c <XMC_DMA_CH_IsEnabled>:
  }
}

/* Check if a DMA channel is enabled */
bool XMC_DMA_CH_IsEnabled(XMC_DMA_t *const dma, const uint8_t channel)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	70fb      	strb	r3, [r7, #3]
  return (bool)(dma->CHENREG & ((uint32_t)1U << channel));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f8d3 23a0 	ldr.w	r2, [r3, #928]	; 0x3a0
 80012ae:	78fb      	ldrb	r3, [r7, #3]
 80012b0:	fa22 f303 	lsr.w	r3, r2, r3
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	bf14      	ite	ne
 80012bc:	2301      	movne	r3, #1
 80012be:	2300      	moveq	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop

080012d0 <XMC_DMA_CH_Init>:

/* Initialize DMA channel */
XMC_DMA_CH_STATUS_t XMC_DMA_CH_Init(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_CONFIG_t *const config)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	460b      	mov	r3, r1
 80012da:	607a      	str	r2, [r7, #4]
 80012dc:	72fb      	strb	r3, [r7, #11]
  XMC_DMA_CH_STATUS_t status;
  uint8_t line;
  uint8_t peripheral;

  if (XMC_DMA_IsEnabled(dma) == true)
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f7ff ff1e 	bl	8001120 <XMC_DMA_IsEnabled>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 81f1 	beq.w	80016ce <XMC_DMA_CH_Init+0x3fe>
  {
    if (XMC_DMA_CH_IsEnabled(dma, channel) == false)
 80012ec:	7afb      	ldrb	r3, [r7, #11]
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	4619      	mov	r1, r3
 80012f2:	f7ff ffd3 	bl	800129c <XMC_DMA_CH_IsEnabled>
 80012f6:	4603      	mov	r3, r0
 80012f8:	f083 0301 	eor.w	r3, r3, #1
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 81e2 	beq.w	80016c8 <XMC_DMA_CH_Init+0x3f8>
    {
      dma->CH[channel].SAR = config->src_addr;
 8001304:	7afb      	ldrb	r3, [r7, #11]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	6852      	ldr	r2, [r2, #4]
 800130a:	68f9      	ldr	r1, [r7, #12]
 800130c:	2058      	movs	r0, #88	; 0x58
 800130e:	fb00 f303 	mul.w	r3, r0, r3
 8001312:	440b      	add	r3, r1
 8001314:	601a      	str	r2, [r3, #0]
      dma->CH[channel].DAR = config->dst_addr;
 8001316:	7afb      	ldrb	r3, [r7, #11]
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	6892      	ldr	r2, [r2, #8]
 800131c:	68f9      	ldr	r1, [r7, #12]
 800131e:	2058      	movs	r0, #88	; 0x58
 8001320:	fb00 f303 	mul.w	r3, r0, r3
 8001324:	440b      	add	r3, r1
 8001326:	3308      	adds	r3, #8
 8001328:	601a      	str	r2, [r3, #0]
      dma->CH[channel].LLP = (uint32_t)config->linked_list_pointer;
 800132a:	7afb      	ldrb	r3, [r7, #11]
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	68d2      	ldr	r2, [r2, #12]
 8001330:	4610      	mov	r0, r2
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	2158      	movs	r1, #88	; 0x58
 8001336:	fb01 f303 	mul.w	r3, r1, r3
 800133a:	4413      	add	r3, r2
 800133c:	3310      	adds	r3, #16
 800133e:	6018      	str	r0, [r3, #0]
      dma->CH[channel].CTLH = (uint32_t)config->block_size;
 8001340:	7afb      	ldrb	r3, [r7, #11]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	8b12      	ldrh	r2, [r2, #24]
 8001346:	4610      	mov	r0, r2
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	2158      	movs	r1, #88	; 0x58
 800134c:	fb01 f303 	mul.w	r3, r1, r3
 8001350:	4413      	add	r3, r2
 8001352:	3318      	adds	r3, #24
 8001354:	6058      	str	r0, [r3, #4]
      dma->CH[channel].CTLL = config->control;
 8001356:	7afb      	ldrb	r3, [r7, #11]
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	6812      	ldr	r2, [r2, #0]
 800135c:	68f9      	ldr	r1, [r7, #12]
 800135e:	2058      	movs	r0, #88	; 0x58
 8001360:	fb00 f303 	mul.w	r3, r0, r3
 8001364:	440b      	add	r3, r1
 8001366:	3318      	adds	r3, #24
 8001368:	601a      	str	r2, [r3, #0]

      dma->CH[channel].CFGL = (uint32_t)((uint32_t)config->priority |
 800136a:	7afb      	ldrb	r3, [r7, #11]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	7ed2      	ldrb	r2, [r2, #27]
 8001370:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
 8001374:	68f9      	ldr	r1, [r7, #12]
 8001376:	2058      	movs	r0, #88	; 0x58
 8001378:	fb00 f303 	mul.w	r3, r0, r3
 800137c:	440b      	add	r3, r1
 800137e:	3340      	adds	r3, #64	; 0x40
 8001380:	601a      	str	r2, [r3, #0]
                                         (uint32_t)GPDMA0_CH_CFGL_HS_SEL_SRC_Msk |
                                         (uint32_t)GPDMA0_CH_CFGL_HS_SEL_DST_Msk);

      if ((dma == XMC_DMA0) && (channel < (uint8_t)2))
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4ab1      	ldr	r2, [pc, #708]	; (800164c <XMC_DMA_CH_Init+0x37c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d116      	bne.n	80013b8 <XMC_DMA_CH_Init+0xe8>
 800138a:	7afb      	ldrb	r3, [r7, #11]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d813      	bhi.n	80013b8 <XMC_DMA_CH_Init+0xe8>
      {
        /* Configure scatter and gather */
        dma->CH[channel].SGR = config->src_gather_control;
 8001390:	7afb      	ldrb	r3, [r7, #11]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6912      	ldr	r2, [r2, #16]
 8001396:	68f9      	ldr	r1, [r7, #12]
 8001398:	2058      	movs	r0, #88	; 0x58
 800139a:	fb00 f303 	mul.w	r3, r0, r3
 800139e:	440b      	add	r3, r1
 80013a0:	3348      	adds	r3, #72	; 0x48
 80013a2:	601a      	str	r2, [r3, #0]
        dma->CH[channel].DSR = config->dst_scatter_control;
 80013a4:	7afb      	ldrb	r3, [r7, #11]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	6952      	ldr	r2, [r2, #20]
 80013aa:	68f9      	ldr	r1, [r7, #12]
 80013ac:	2058      	movs	r0, #88	; 0x58
 80013ae:	fb00 f303 	mul.w	r3, r0, r3
 80013b2:	440b      	add	r3, r1
 80013b4:	3350      	adds	r3, #80	; 0x50
 80013b6:	601a      	str	r2, [r3, #0]
      }

      if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	8c1b      	ldrh	r3, [r3, #32]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d14f      	bne.n	8001460 <XMC_DMA_CH_Init+0x190>
      {
        /* Hardware handshaking interface configuration */
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	789b      	ldrb	r3, [r3, #2]
 80013c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b10      	cmp	r3, #16
 80013cc:	d006      	beq.n	80013dc <XMC_DMA_CH_Init+0x10c>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	789b      	ldrb	r3, [r3, #2]
 80013d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80013d6:	b2db      	uxtb	r3, r3
      }

      if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
      {
        /* Hardware handshaking interface configuration */
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 80013d8:	2b30      	cmp	r3, #48	; 0x30
 80013da:	d141      	bne.n	8001460 <XMC_DMA_CH_Init+0x190>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
        {
#if defined(GPDMA1)
          if (dma == XMC_DMA0)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4a9b      	ldr	r2, [pc, #620]	; (800164c <XMC_DMA_CH_Init+0x37c>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d106      	bne.n	80013f2 <XMC_DMA_CH_Init+0x122>
          {
#endif
            line = config->dst_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	75bb      	strb	r3, [r7, #22]
 80013f0:	e005      	b.n	80013fe <XMC_DMA_CH_Init+0x12e>
#if defined(GPDMA1)
          }
          else
          {
            line = config->dst_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	75bb      	strb	r3, [r7, #22]
          }
#endif
          peripheral = config->dst_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001404:	091b      	lsrs	r3, r3, #4
 8001406:	757b      	strb	r3, [r7, #21]

          dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_DEST_PER_Pos);
 8001408:	7afb      	ldrb	r3, [r7, #11]
 800140a:	7afa      	ldrb	r2, [r7, #11]
 800140c:	68f9      	ldr	r1, [r7, #12]
 800140e:	2058      	movs	r0, #88	; 0x58
 8001410:	fb00 f202 	mul.w	r2, r0, r2
 8001414:	440a      	add	r2, r1
 8001416:	3240      	adds	r2, #64	; 0x40
 8001418:	6851      	ldr	r1, [r2, #4]
 800141a:	7dba      	ldrb	r2, [r7, #22]
 800141c:	02d2      	lsls	r2, r2, #11
 800141e:	430a      	orrs	r2, r1
 8001420:	68f9      	ldr	r1, [r7, #12]
 8001422:	2058      	movs	r0, #88	; 0x58
 8001424:	fb00 f303 	mul.w	r3, r0, r3
 8001428:	440b      	add	r3, r1
 800142a:	3340      	adds	r3, #64	; 0x40
 800142c:	605a      	str	r2, [r3, #4]
          XMC_DMA_EnableRequestLine(dma, line, peripheral);
 800142e:	7dba      	ldrb	r2, [r7, #22]
 8001430:	7d7b      	ldrb	r3, [r7, #21]
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	4611      	mov	r1, r2
 8001436:	461a      	mov	r2, r3
 8001438:	f7ff fee4 	bl	8001204 <XMC_DMA_EnableRequestLine>
          dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_DST_Msk;
 800143c:	7afb      	ldrb	r3, [r7, #11]
 800143e:	7afa      	ldrb	r2, [r7, #11]
 8001440:	68f9      	ldr	r1, [r7, #12]
 8001442:	2058      	movs	r0, #88	; 0x58
 8001444:	fb00 f202 	mul.w	r2, r0, r2
 8001448:	440a      	add	r2, r1
 800144a:	3240      	adds	r2, #64	; 0x40
 800144c:	6812      	ldr	r2, [r2, #0]
 800144e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001452:	68f9      	ldr	r1, [r7, #12]
 8001454:	2058      	movs	r0, #88	; 0x58
 8001456:	fb00 f303 	mul.w	r3, r0, r3
 800145a:	440b      	add	r3, r1
 800145c:	3340      	adds	r3, #64	; 0x40
 800145e:	601a      	str	r2, [r3, #0]
        }
      }


      if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	8b9b      	ldrh	r3, [r3, #28]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d14c      	bne.n	8001502 <XMC_DMA_CH_Init+0x232>
      {
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	789b      	ldrb	r3, [r3, #2]
 800146c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b20      	cmp	r3, #32
 8001474:	d006      	beq.n	8001484 <XMC_DMA_CH_Init+0x1b4>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	789b      	ldrb	r3, [r3, #2]
 800147a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800147e:	b2db      	uxtb	r3, r3
      }


      if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
      {
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 8001480:	2b30      	cmp	r3, #48	; 0x30
 8001482:	d13e      	bne.n	8001502 <XMC_DMA_CH_Init+0x232>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
        {
#if defined(GPDMA1)
          if (dma == XMC_DMA0)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4a71      	ldr	r2, [pc, #452]	; (800164c <XMC_DMA_CH_Init+0x37c>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d105      	bne.n	8001498 <XMC_DMA_CH_Init+0x1c8>
          {
#endif
            line = config->src_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	7f9b      	ldrb	r3, [r3, #30]
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	75bb      	strb	r3, [r7, #22]
 8001496:	e004      	b.n	80014a2 <XMC_DMA_CH_Init+0x1d2>
#if defined(GPDMA1)
          }
          else
          {
            line = config->src_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7f9b      	ldrb	r3, [r3, #30]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	75bb      	strb	r3, [r7, #22]
          }
#endif
          peripheral = config->src_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	7f9b      	ldrb	r3, [r3, #30]
 80014a6:	091b      	lsrs	r3, r3, #4
 80014a8:	757b      	strb	r3, [r7, #21]

          dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_SRC_PER_Pos);
 80014aa:	7afb      	ldrb	r3, [r7, #11]
 80014ac:	7afa      	ldrb	r2, [r7, #11]
 80014ae:	68f9      	ldr	r1, [r7, #12]
 80014b0:	2058      	movs	r0, #88	; 0x58
 80014b2:	fb00 f202 	mul.w	r2, r0, r2
 80014b6:	440a      	add	r2, r1
 80014b8:	3240      	adds	r2, #64	; 0x40
 80014ba:	6851      	ldr	r1, [r2, #4]
 80014bc:	7dba      	ldrb	r2, [r7, #22]
 80014be:	01d2      	lsls	r2, r2, #7
 80014c0:	430a      	orrs	r2, r1
 80014c2:	68f9      	ldr	r1, [r7, #12]
 80014c4:	2058      	movs	r0, #88	; 0x58
 80014c6:	fb00 f303 	mul.w	r3, r0, r3
 80014ca:	440b      	add	r3, r1
 80014cc:	3340      	adds	r3, #64	; 0x40
 80014ce:	605a      	str	r2, [r3, #4]
          XMC_DMA_EnableRequestLine(dma, line, peripheral);
 80014d0:	7dba      	ldrb	r2, [r7, #22]
 80014d2:	7d7b      	ldrb	r3, [r7, #21]
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	4611      	mov	r1, r2
 80014d8:	461a      	mov	r2, r3
 80014da:	f7ff fe93 	bl	8001204 <XMC_DMA_EnableRequestLine>
          dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_SRC_Msk;
 80014de:	7afb      	ldrb	r3, [r7, #11]
 80014e0:	7afa      	ldrb	r2, [r7, #11]
 80014e2:	68f9      	ldr	r1, [r7, #12]
 80014e4:	2058      	movs	r0, #88	; 0x58
 80014e6:	fb00 f202 	mul.w	r2, r0, r2
 80014ea:	440a      	add	r2, r1
 80014ec:	3240      	adds	r2, #64	; 0x40
 80014ee:	6812      	ldr	r2, [r2, #0]
 80014f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014f4:	68f9      	ldr	r1, [r7, #12]
 80014f6:	2058      	movs	r0, #88	; 0x58
 80014f8:	fb00 f303 	mul.w	r3, r0, r3
 80014fc:	440b      	add	r3, r1
 80014fe:	3340      	adds	r3, #64	; 0x40
 8001500:	601a      	str	r2, [r3, #0]
        }
      }
      
      XMC_DMA_CH_ClearEventStatus(dma, channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE |
 8001502:	7afb      	ldrb	r3, [r7, #11]
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	4619      	mov	r1, r3
 8001508:	221f      	movs	r2, #31
 800150a:	f000 f90f 	bl	800172c <XMC_DMA_CH_ClearEventStatus>
                                                           (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
                                                           (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
                                                           (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE |
                                                           (uint32_t)XMC_DMA_CH_EVENT_ERROR));

      switch (config->transfer_type)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	7e9b      	ldrb	r3, [r3, #26]
 8001512:	2b08      	cmp	r3, #8
 8001514:	f200 80d4 	bhi.w	80016c0 <XMC_DMA_CH_Init+0x3f0>
 8001518:	a201      	add	r2, pc, #4	; (adr r2, 8001520 <XMC_DMA_CH_Init+0x250>)
 800151a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151e:	bf00      	nop
 8001520:	080016c1 	.word	0x080016c1
 8001524:	08001545 	.word	0x08001545
 8001528:	0800156b 	.word	0x0800156b
 800152c:	08001591 	.word	0x08001591
 8001530:	080015b7 	.word	0x080015b7
 8001534:	080015dd 	.word	0x080015dd
 8001538:	08001627 	.word	0x08001627
 800153c:	08001651 	.word	0x08001651
 8001540:	0800169b 	.word	0x0800169b
      {
        case XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK:
          break;

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 8001544:	7afb      	ldrb	r3, [r7, #11]
 8001546:	7afa      	ldrb	r2, [r7, #11]
 8001548:	68f9      	ldr	r1, [r7, #12]
 800154a:	2058      	movs	r0, #88	; 0x58
 800154c:	fb00 f202 	mul.w	r2, r0, r2
 8001550:	440a      	add	r2, r1
 8001552:	3240      	adds	r2, #64	; 0x40
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800155a:	68f9      	ldr	r1, [r7, #12]
 800155c:	2058      	movs	r0, #88	; 0x58
 800155e:	fb00 f303 	mul.w	r3, r0, r3
 8001562:	440b      	add	r3, r1
 8001564:	3340      	adds	r3, #64	; 0x40
 8001566:	601a      	str	r2, [r3, #0]
          break;
 8001568:	e0ab      	b.n	80016c2 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 800156a:	7afb      	ldrb	r3, [r7, #11]
 800156c:	7afa      	ldrb	r2, [r7, #11]
 800156e:	68f9      	ldr	r1, [r7, #12]
 8001570:	2058      	movs	r0, #88	; 0x58
 8001572:	fb00 f202 	mul.w	r2, r0, r2
 8001576:	440a      	add	r2, r1
 8001578:	3240      	adds	r2, #64	; 0x40
 800157a:	6812      	ldr	r2, [r2, #0]
 800157c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001580:	68f9      	ldr	r1, [r7, #12]
 8001582:	2058      	movs	r0, #88	; 0x58
 8001584:	fb00 f303 	mul.w	r3, r0, r3
 8001588:	440b      	add	r3, r1
 800158a:	3340      	adds	r3, #64	; 0x40
 800158c:	601a      	str	r2, [r3, #0]
          break;
 800158e:	e098      	b.n	80016c2 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)((uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk |
 8001590:	7afb      	ldrb	r3, [r7, #11]
 8001592:	7afa      	ldrb	r2, [r7, #11]
 8001594:	68f9      	ldr	r1, [r7, #12]
 8001596:	2058      	movs	r0, #88	; 0x58
 8001598:	fb00 f202 	mul.w	r2, r0, r2
 800159c:	440a      	add	r2, r1
 800159e:	3240      	adds	r2, #64	; 0x40
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80015a6:	68f9      	ldr	r1, [r7, #12]
 80015a8:	2058      	movs	r0, #88	; 0x58
 80015aa:	fb00 f303 	mul.w	r3, r0, r3
 80015ae:	440b      	add	r3, r1
 80015b0:	3340      	adds	r3, #64	; 0x40
 80015b2:	601a      	str	r2, [r3, #0]
                                              (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk);
          break;
 80015b4:	e085      	b.n	80016c2 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED:
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 80015b6:	7afb      	ldrb	r3, [r7, #11]
 80015b8:	7afa      	ldrb	r2, [r7, #11]
 80015ba:	68f9      	ldr	r1, [r7, #12]
 80015bc:	2058      	movs	r0, #88	; 0x58
 80015be:	fb00 f202 	mul.w	r2, r0, r2
 80015c2:	440a      	add	r2, r1
 80015c4:	3218      	adds	r2, #24
 80015c6:	6812      	ldr	r2, [r2, #0]
 80015c8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80015cc:	68f9      	ldr	r1, [r7, #12]
 80015ce:	2058      	movs	r0, #88	; 0x58
 80015d0:	fb00 f303 	mul.w	r3, r0, r3
 80015d4:	440b      	add	r3, r1
 80015d6:	3318      	adds	r3, #24
 80015d8:	601a      	str	r2, [r3, #0]
          break;
 80015da:	e072      	b.n	80016c2 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 80015dc:	7afb      	ldrb	r3, [r7, #11]
 80015de:	7afa      	ldrb	r2, [r7, #11]
 80015e0:	68f9      	ldr	r1, [r7, #12]
 80015e2:	2058      	movs	r0, #88	; 0x58
 80015e4:	fb00 f202 	mul.w	r2, r0, r2
 80015e8:	440a      	add	r2, r1
 80015ea:	3240      	adds	r2, #64	; 0x40
 80015ec:	6812      	ldr	r2, [r2, #0]
 80015ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015f2:	68f9      	ldr	r1, [r7, #12]
 80015f4:	2058      	movs	r0, #88	; 0x58
 80015f6:	fb00 f303 	mul.w	r3, r0, r3
 80015fa:	440b      	add	r3, r1
 80015fc:	3340      	adds	r3, #64	; 0x40
 80015fe:	601a      	str	r2, [r3, #0]
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 8001600:	7afb      	ldrb	r3, [r7, #11]
 8001602:	7afa      	ldrb	r2, [r7, #11]
 8001604:	68f9      	ldr	r1, [r7, #12]
 8001606:	2058      	movs	r0, #88	; 0x58
 8001608:	fb00 f202 	mul.w	r2, r0, r2
 800160c:	440a      	add	r2, r1
 800160e:	3218      	adds	r2, #24
 8001610:	6812      	ldr	r2, [r2, #0]
 8001612:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001616:	68f9      	ldr	r1, [r7, #12]
 8001618:	2058      	movs	r0, #88	; 0x58
 800161a:	fb00 f303 	mul.w	r3, r0, r3
 800161e:	440b      	add	r3, r1
 8001620:	3318      	adds	r3, #24
 8001622:	601a      	str	r2, [r3, #0]
          break;
 8001624:	e04d      	b.n	80016c2 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS:
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 8001626:	7afb      	ldrb	r3, [r7, #11]
 8001628:	7afa      	ldrb	r2, [r7, #11]
 800162a:	68f9      	ldr	r1, [r7, #12]
 800162c:	2058      	movs	r0, #88	; 0x58
 800162e:	fb00 f202 	mul.w	r2, r0, r2
 8001632:	440a      	add	r2, r1
 8001634:	3218      	adds	r2, #24
 8001636:	6812      	ldr	r2, [r2, #0]
 8001638:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800163c:	68f9      	ldr	r1, [r7, #12]
 800163e:	2058      	movs	r0, #88	; 0x58
 8001640:	fb00 f303 	mul.w	r3, r0, r3
 8001644:	440b      	add	r3, r1
 8001646:	3318      	adds	r3, #24
 8001648:	601a      	str	r2, [r3, #0]
          break;
 800164a:	e03a      	b.n	80016c2 <XMC_DMA_CH_Init+0x3f2>
 800164c:	50014000 	.word	0x50014000

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 8001650:	7afb      	ldrb	r3, [r7, #11]
 8001652:	7afa      	ldrb	r2, [r7, #11]
 8001654:	68f9      	ldr	r1, [r7, #12]
 8001656:	2058      	movs	r0, #88	; 0x58
 8001658:	fb00 f202 	mul.w	r2, r0, r2
 800165c:	440a      	add	r2, r1
 800165e:	3240      	adds	r2, #64	; 0x40
 8001660:	6812      	ldr	r2, [r2, #0]
 8001662:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001666:	68f9      	ldr	r1, [r7, #12]
 8001668:	2058      	movs	r0, #88	; 0x58
 800166a:	fb00 f303 	mul.w	r3, r0, r3
 800166e:	440b      	add	r3, r1
 8001670:	3340      	adds	r3, #64	; 0x40
 8001672:	601a      	str	r2, [r3, #0]
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 8001674:	7afb      	ldrb	r3, [r7, #11]
 8001676:	7afa      	ldrb	r2, [r7, #11]
 8001678:	68f9      	ldr	r1, [r7, #12]
 800167a:	2058      	movs	r0, #88	; 0x58
 800167c:	fb00 f202 	mul.w	r2, r0, r2
 8001680:	440a      	add	r2, r1
 8001682:	3218      	adds	r2, #24
 8001684:	6812      	ldr	r2, [r2, #0]
 8001686:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800168a:	68f9      	ldr	r1, [r7, #12]
 800168c:	2058      	movs	r0, #88	; 0x58
 800168e:	fb00 f303 	mul.w	r3, r0, r3
 8001692:	440b      	add	r3, r1
 8001694:	3318      	adds	r3, #24
 8001696:	601a      	str	r2, [r3, #0]
          break;
 8001698:	e013      	b.n	80016c2 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED:
          dma->CH[channel].CTLL |= (uint32_t)((uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk |
 800169a:	7afb      	ldrb	r3, [r7, #11]
 800169c:	7afa      	ldrb	r2, [r7, #11]
 800169e:	68f9      	ldr	r1, [r7, #12]
 80016a0:	2058      	movs	r0, #88	; 0x58
 80016a2:	fb00 f202 	mul.w	r2, r0, r2
 80016a6:	440a      	add	r2, r1
 80016a8:	3218      	adds	r2, #24
 80016aa:	6812      	ldr	r2, [r2, #0]
 80016ac:	f042 52c0 	orr.w	r2, r2, #402653184	; 0x18000000
 80016b0:	68f9      	ldr	r1, [r7, #12]
 80016b2:	2058      	movs	r0, #88	; 0x58
 80016b4:	fb00 f303 	mul.w	r3, r0, r3
 80016b8:	440b      	add	r3, r1
 80016ba:	3318      	adds	r3, #24
 80016bc:	601a      	str	r2, [r3, #0]
                                              (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
          break;
 80016be:	e000      	b.n	80016c2 <XMC_DMA_CH_Init+0x3f2>

        default:
          break;
 80016c0:	bf00      	nop
      }

      status = XMC_DMA_CH_STATUS_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	75fb      	strb	r3, [r7, #23]
 80016c6:	e004      	b.n	80016d2 <XMC_DMA_CH_Init+0x402>

    }
    else
    {
      status = XMC_DMA_CH_STATUS_BUSY;
 80016c8:	2302      	movs	r3, #2
 80016ca:	75fb      	strb	r3, [r7, #23]
 80016cc:	e001      	b.n	80016d2 <XMC_DMA_CH_Init+0x402>
    }
  }
  else 
  {
    status = XMC_DMA_CH_STATUS_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80016d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <XMC_DMA_CH_EnableEvent>:
  return (bool)(dma->CH[channel].CFGL & (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk);
}

/* Enable GPDMA event */
void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	460b      	mov	r3, r1
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	72fb      	strb	r3, [r7, #11]
  uint32_t event_idx;

  for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	e014      	b.n	800171a <XMC_DMA_CH_EnableEvent+0x3e>
  {
    if (event & ((uint32_t)0x1UL << event_idx))
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	fa22 f303 	lsr.w	r3, r2, r3
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d009      	beq.n	8001714 <XMC_DMA_CH_EnableEvent+0x38>
    {
      dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	005a      	lsls	r2, r3, #1
 8001704:	7afb      	ldrb	r3, [r7, #11]
 8001706:	f240 1101 	movw	r1, #257	; 0x101
 800170a:	4099      	lsls	r1, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	32c4      	adds	r2, #196	; 0xc4
 8001710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/* Enable GPDMA event */
void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
  uint32_t event_idx;

  for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3301      	adds	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	2b04      	cmp	r3, #4
 800171e:	d9e7      	bls.n	80016f0 <XMC_DMA_CH_EnableEvent+0x14>
    if (event & ((uint32_t)0x1UL << event_idx))
    {
      dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
    }
  }
}
 8001720:	371c      	adds	r7, #28
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop

0800172c <XMC_DMA_CH_ClearEventStatus>:
  }
}

/* Clear GPDMA event */
void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
 800172c:	b480      	push	{r7}
 800172e:	b087      	sub	sp, #28
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	460b      	mov	r3, r1
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	72fb      	strb	r3, [r7, #11]
  uint32_t event_idx;

  for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	e013      	b.n	8001768 <XMC_DMA_CH_ClearEventStatus+0x3c>
  {
    if (event & (uint32_t)((uint32_t)0x1UL << event_idx))
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	fa22 f303 	lsr.w	r3, r2, r3
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b00      	cmp	r3, #0
 800174e:	d008      	beq.n	8001762 <XMC_DMA_CH_ClearEventStatus+0x36>
    {
      dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	005a      	lsls	r2, r3, #1
 8001754:	7afb      	ldrb	r3, [r7, #11]
 8001756:	2101      	movs	r1, #1
 8001758:	4099      	lsls	r1, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	32ce      	adds	r2, #206	; 0xce
 800175e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/* Clear GPDMA event */
void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
  uint32_t event_idx;

  for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3301      	adds	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	2b04      	cmp	r3, #4
 800176c:	d9e8      	bls.n	8001740 <XMC_DMA_CH_ClearEventStatus+0x14>
    {
      dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
    }
  }

}
 800176e:	371c      	adds	r7, #28
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <XMC_DMA_CH_SetEventHandler>:
  dma->CH[channel].CFGL &= (uint32_t)~(GPDMA0_CH_CFGL_RELOAD_SRC_Msk | GPDMA0_CH_CFGL_RELOAD_DST_Msk);
}

/* Set event handler */
void XMC_DMA_CH_SetEventHandler(XMC_DMA_t *const dma, const uint8_t channel, XMC_DMA_CH_EVENT_HANDLER_t event_handler)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	460b      	mov	r3, r1
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	72fb      	strb	r3, [r7, #11]
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4a09      	ldr	r2, [pc, #36]	; (80017b0 <XMC_DMA_CH_SetEventHandler+0x38>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d105      	bne.n	800179a <XMC_DMA_CH_SetEventHandler+0x22>
  {
#endif
    dma0_event_handlers[channel] = event_handler;
 800178e:	7afb      	ldrb	r3, [r7, #11]
 8001790:	4908      	ldr	r1, [pc, #32]	; (80017b4 <XMC_DMA_CH_SetEventHandler+0x3c>)
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001798:	e004      	b.n	80017a4 <XMC_DMA_CH_SetEventHandler+0x2c>
#if defined(GPDMA1)
  }
  else
  {
    dma1_event_handlers[channel] = event_handler;
 800179a:	7afb      	ldrb	r3, [r7, #11]
 800179c:	4906      	ldr	r1, [pc, #24]	; (80017b8 <XMC_DMA_CH_SetEventHandler+0x40>)
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
#endif
}
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	50014000 	.word	0x50014000
 80017b4:	1ffef0cc 	.word	0x1ffef0cc
 80017b8:	1ffef0ec 	.word	0x1ffef0ec

080017bc <XMC_DMA_IRQHandler>:
  XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
}

/* Default DMA IRQ handler */
void XMC_DMA_IRQHandler(XMC_DMA_t *const dma)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t mask;
  XMC_DMA_CH_EVENT_HANDLER_t *dma_event_handlers;
  XMC_DMA_CH_EVENT_HANDLER_t event_handler;

#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a82      	ldr	r2, [pc, #520]	; (80019d0 <XMC_DMA_IRQHandler+0x214>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d102      	bne.n	80017d2 <XMC_DMA_IRQHandler+0x16>
  {
#endif
    dma_event_handlers = dma0_event_handlers;
 80017cc:	4b81      	ldr	r3, [pc, #516]	; (80019d4 <XMC_DMA_IRQHandler+0x218>)
 80017ce:	61bb      	str	r3, [r7, #24]
 80017d0:	e001      	b.n	80017d6 <XMC_DMA_IRQHandler+0x1a>
#if defined(GPDMA1)
  }
  else
  {
    dma_event_handlers = dma1_event_handlers;
 80017d2:	4b81      	ldr	r3, [pc, #516]	; (80019d8 <XMC_DMA_IRQHandler+0x21c>)
 80017d4:	61bb      	str	r3, [r7, #24]
  }
#endif
  
  event = XMC_DMA_GetEventStatus(dma);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff fc22 	bl	8001020 <XMC_DMA_GetEventStatus>
 80017dc:	6178      	str	r0, [r7, #20]
  channel = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]

  if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f003 0310 	and.w	r3, r3, #16
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d02b      	beq.n	8001844 <XMC_DMA_IRQHandler+0x88>
  {
    event = XMC_DMA_GetChannelsErrorStatus(dma);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff fc5d 	bl	80010ac <XMC_DMA_GetChannelsErrorStatus>
 80017f2:	6178      	str	r0, [r7, #20]
    while (event != 0)
 80017f4:	e021      	b.n	800183a <XMC_DMA_IRQHandler+0x7e>
    {
      mask = (uint32_t)1U << channel;
 80017f6:	2201      	movs	r2, #1
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	613b      	str	r3, [r7, #16]
      if ((event & mask) != 0)
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4013      	ands	r3, r2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d014      	beq.n	8001834 <XMC_DMA_IRQHandler+0x78>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_ERROR);
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	4619      	mov	r1, r3
 8001812:	2210      	movs	r2, #16
 8001814:	f7ff ff8a 	bl	800172c <XMC_DMA_CH_ClearEventStatus>

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4413      	add	r3, r2
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <XMC_DMA_IRQHandler+0x76>
        {
          event_handler(XMC_DMA_CH_EVENT_ERROR);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2010      	movs	r0, #16
 800182e:	4798      	blx	r3
        }
       
        break;
 8001830:	e007      	b.n	8001842 <XMC_DMA_IRQHandler+0x86>
 8001832:	e006      	b.n	8001842 <XMC_DMA_IRQHandler+0x86>
      }
      ++channel;
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	3301      	adds	r3, #1
 8001838:	61fb      	str	r3, [r7, #28]
  channel = 0;

  if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsErrorStatus(dma);
    while (event != 0)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1da      	bne.n	80017f6 <XMC_DMA_IRQHandler+0x3a>
 8001840:	e0c3      	b.n	80019ca <XMC_DMA_IRQHandler+0x20e>
 8001842:	e0c2      	b.n	80019ca <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d02b      	beq.n	80018a6 <XMC_DMA_IRQHandler+0xea>
  {
    event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff fbf4 	bl	800103c <XMC_DMA_GetChannelsTransferCompleteStatus>
 8001854:	6178      	str	r0, [r7, #20]
    while (event != 0)
 8001856:	e021      	b.n	800189c <XMC_DMA_IRQHandler+0xe0>
    {
      mask = (uint32_t)1U << channel;
 8001858:	2201      	movs	r2, #1
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	613b      	str	r3, [r7, #16]
      if (event & mask)
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d014      	beq.n	8001896 <XMC_DMA_IRQHandler+0xda>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE | 
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	4619      	mov	r1, r3
 8001874:	220f      	movs	r2, #15
 8001876:	f7ff ff59 	bl	800172c <XMC_DMA_CH_ClearEventStatus>
                                                                      (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE | 
                                                                      (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE | 
                                                                      (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE));

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4413      	add	r3, r2
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <XMC_DMA_IRQHandler+0xd8>
        {
          event_handler(XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2001      	movs	r0, #1
 8001890:	4798      	blx	r3
        }
																	  
        break;
 8001892:	e007      	b.n	80018a4 <XMC_DMA_IRQHandler+0xe8>
 8001894:	e006      	b.n	80018a4 <XMC_DMA_IRQHandler+0xe8>
      }
      ++channel;
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3301      	adds	r3, #1
 800189a:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
    while (event != 0)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1da      	bne.n	8001858 <XMC_DMA_IRQHandler+0x9c>
 80018a2:	e092      	b.n	80019ca <XMC_DMA_IRQHandler+0x20e>
 80018a4:	e091      	b.n	80019ca <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d02b      	beq.n	8001908 <XMC_DMA_IRQHandler+0x14c>
  {
    event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff fbd1 	bl	8001058 <XMC_DMA_GetChannelsBlockCompleteStatus>
 80018b6:	6178      	str	r0, [r7, #20]
    while (event != 0)
 80018b8:	e021      	b.n	80018fe <XMC_DMA_IRQHandler+0x142>
    {
      mask = (uint32_t)1U << channel;
 80018ba:	2201      	movs	r2, #1
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	613b      	str	r3, [r7, #16]
      if (event & mask)
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d014      	beq.n	80018f8 <XMC_DMA_IRQHandler+0x13c>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	4619      	mov	r1, r3
 80018d6:	220e      	movs	r2, #14
 80018d8:	f7ff ff28 	bl	800172c <XMC_DMA_CH_ClearEventStatus>
                                                                      (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE | 
                                                                      (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE));

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4413      	add	r3, r2
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <XMC_DMA_IRQHandler+0x13a>
        {
          event_handler(XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2002      	movs	r0, #2
 80018f2:	4798      	blx	r3
        }

        break;
 80018f4:	e007      	b.n	8001906 <XMC_DMA_IRQHandler+0x14a>
 80018f6:	e006      	b.n	8001906 <XMC_DMA_IRQHandler+0x14a>
      }
      ++channel;
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	3301      	adds	r3, #1
 80018fc:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
    while (event != 0)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1da      	bne.n	80018ba <XMC_DMA_IRQHandler+0xfe>
 8001904:	e061      	b.n	80019ca <XMC_DMA_IRQHandler+0x20e>
 8001906:	e060      	b.n	80019ca <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	2b00      	cmp	r3, #0
 8001910:	d02b      	beq.n	800196a <XMC_DMA_IRQHandler+0x1ae>
  {
    event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff fbae 	bl	8001074 <XMC_DMA_GetChannelsSourceTransactionCompleteStatus>
 8001918:	6178      	str	r0, [r7, #20]
    while (event != 0)
 800191a:	e021      	b.n	8001960 <XMC_DMA_IRQHandler+0x1a4>
    {
      mask = (uint32_t)1U << channel;
 800191c:	2201      	movs	r2, #1
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	613b      	str	r3, [r7, #16]
      if (event & mask)
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d014      	beq.n	800195a <XMC_DMA_IRQHandler+0x19e>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	b2db      	uxtb	r3, r3
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	4619      	mov	r1, r3
 8001938:	2204      	movs	r2, #4
 800193a:	f7ff fef7 	bl	800172c <XMC_DMA_CH_ClearEventStatus>

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4413      	add	r3, r2
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <XMC_DMA_IRQHandler+0x19c>
        {
          event_handler(XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2004      	movs	r0, #4
 8001954:	4798      	blx	r3
        }
        
        break;
 8001956:	e007      	b.n	8001968 <XMC_DMA_IRQHandler+0x1ac>
 8001958:	e006      	b.n	8001968 <XMC_DMA_IRQHandler+0x1ac>
      }
      ++channel;
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3301      	adds	r3, #1
 800195e:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
    while (event != 0)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1da      	bne.n	800191c <XMC_DMA_IRQHandler+0x160>
 8001966:	e030      	b.n	80019ca <XMC_DMA_IRQHandler+0x20e>
 8001968:	e02f      	b.n	80019ca <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d02a      	beq.n	80019ca <XMC_DMA_IRQHandler+0x20e>
  {
    event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff fb8b 	bl	8001090 <XMC_DMA_GetChannelsDestinationTransactionCompleteStatus>
 800197a:	6178      	str	r0, [r7, #20]
    while (event != 0)
 800197c:	e021      	b.n	80019c2 <XMC_DMA_IRQHandler+0x206>
    {
      mask = (uint32_t)1U << channel;
 800197e:	2201      	movs	r2, #1
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	613b      	str	r3, [r7, #16]
      if (event & mask)
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4013      	ands	r3, r2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d014      	beq.n	80019bc <XMC_DMA_IRQHandler+0x200>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	4619      	mov	r1, r3
 800199a:	2208      	movs	r2, #8
 800199c:	f7ff fec6 	bl	800172c <XMC_DMA_CH_ClearEventStatus>

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4413      	add	r3, r2
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <XMC_DMA_IRQHandler+0x1fe>
        {
          event_handler(XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2008      	movs	r0, #8
 80019b6:	4798      	blx	r3
        }      

        break;
 80019b8:	e007      	b.n	80019ca <XMC_DMA_IRQHandler+0x20e>
 80019ba:	e006      	b.n	80019ca <XMC_DMA_IRQHandler+0x20e>
      }
      ++channel;
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	3301      	adds	r3, #1
 80019c0:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
    while (event != 0)
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1da      	bne.n	800197e <XMC_DMA_IRQHandler+0x1c2>
 80019c8:	e7ff      	b.n	80019ca <XMC_DMA_IRQHandler+0x20e>
  else
  {
    /* no active interrupt was found? */
  }

}
 80019ca:	3720      	adds	r7, #32
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	50014000 	.word	0x50014000
 80019d4:	1ffef0cc 	.word	0x1ffef0cc
 80019d8:	1ffef0ec 	.word	0x1ffef0ec

080019dc <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{ 
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	460b      	mov	r3, r1
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f7fe fcd0 	bl	8000390 <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL & 
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681a      	ldr	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 80019f4:	7afb      	ldrb	r3, [r7, #11]
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4619      	mov	r1, r3
 80019fa:	230f      	movs	r3, #15
 80019fc:	408b      	lsls	r3, r1
 80019fe:	43db      	mvns	r3, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 8001a00:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	7af9      	ldrb	r1, [r7, #11]
 8001a08:	0089      	lsls	r1, r1, #2
 8001a0a:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8001a0c:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  
  eru->EXICON[channel] = config->raw;
 8001a12:	7afa      	ldrb	r2, [r7, #11]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6859      	ldr	r1, [r3, #4]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3204      	adds	r2, #4
 8001a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop

08001a28 <XMC_ERU_OGU_SetServiceRequestMode>:

/* Configures the gating scheme for service request generation by setting (GP) bit. */
void XMC_ERU_OGU_SetServiceRequestMode(XMC_ERU_t *const eru,
                                       const uint8_t channel,
                                       const XMC_ERU_OGU_SERVICE_REQUEST_t mode)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	70fb      	strb	r3, [r7, #3]
 8001a34:	4613      	mov	r3, r2
 8001a36:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Service Request Mode", XMC_ERU_OGU_CHECK_SERIVCE_REQUEST(mode));

  eru->EXOCON_b[channel].GP = (uint8_t)mode;
 8001a38:	78fa      	ldrb	r2, [r7, #3]
 8001a3a:	78bb      	ldrb	r3, [r7, #2]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	b2d9      	uxtb	r1, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3208      	adds	r2, #8
 8001a46:	f001 0103 	and.w	r1, r1, #3
 8001a4a:	0109      	lsls	r1, r1, #4
 8001a4c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001a50:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 8001a54:	4301      	orrs	r1, r0
 8001a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <XMC_ETH_MAC_Reset>:
 *
 * \par
 * The function resets the ETH MAC peripheral. It blocks until reset.
 */
__STATIC_INLINE void XMC_ETH_MAC_Reset(XMC_ETH_MAC_t *const eth_mac)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  eth_mac->regs->BUS_MODE |= (uint32_t)ETH_BUS_MODE_SWR_Msk;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	f042 0201 	orr.w	r2, r2, #1
 8001a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a82:	601a      	str	r2, [r3, #0]
  while ((eth_mac->regs->BUS_MODE & (uint32_t)ETH_BUS_MODE_SWR_Msk) != 0U)
 8001a84:	bf00      	nop
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f6      	bne.n	8001a86 <XMC_ETH_MAC_Reset+0x22>
  {
  }
}
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop

08001aa4 <XMC_ETH_MAC_SetAddress>:
 * \par
 * The function sets the MAC address by writing to the MAC_ADDRESS0_HIGH and
 * MAC_ADDRESS0_LOW registers.
 */
__STATIC_INLINE void XMC_ETH_MAC_SetAddress(XMC_ETH_MAC_t *const eth_mac, uint64_t addr)
{
 8001aa4:	b4b0      	push	{r4, r5, r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	e9c7 2300 	strd	r2, r3, [r7]
  eth_mac->regs->MAC_ADDRESS0_HIGH = (uint32_t)(addr >> 32);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6819      	ldr	r1, [r3, #0]
 8001ab4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ab8:	001c      	movs	r4, r3
 8001aba:	2500      	movs	r5, #0
 8001abc:	4623      	mov	r3, r4
 8001abe:	640b      	str	r3, [r1, #64]	; 0x40
  eth_mac->regs->MAC_ADDRESS0_LOW = (uint32_t)addr;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bcb0      	pop	{r4, r5, r7}
 8001ace:	4770      	bx	lr

08001ad0 <XMC_SCU_CLOCK_GetSystemClockFrequency>:
 * fSYS = fCPU << CPUDIV.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x20>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x24>)
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	2003ffc0 	.word	0x2003ffc0
 8001af4:	50004600 	.word	0x50004600

08001af8 <XMC_SCU_CLOCK_GetEthernetClockFrequency>:
 * fETH = fSYS >> 1;
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetSystemClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetEthernetClockFrequency(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  return XMC_SCU_CLOCK_GetSystemClockFrequency() >> 1U;
 8001afc:	f7ff ffe8 	bl	8001ad0 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 8001b00:	4603      	mov	r3, r0
 8001b02:	085b      	lsrs	r3, r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <XCM_ETH_MAC_IsNormalEvent>:
 * API IMPLEMENTATION
 *******************************************************************************/

/* Check if the event passed is a normal event */
__STATIC_INLINE bool XCM_ETH_MAC_IsNormalEvent(uint32_t event)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  return (bool)((event & ((uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT |
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	f244 0345 	movw	r3, #16453	; 0x4045
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bf14      	ite	ne
 8001b1c:	2301      	movne	r3, #1
 8001b1e:	2300      	moveq	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
                          (uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_BUFFER_UNAVAILABLE |
                          (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE |
                          (uint32_t)XMC_ETH_MAC_EVENT_EARLY_RECEIVE)) != (uint32_t)0);
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop

08001b30 <XCM_ETH_MAC_IsAbnormalEvent>:

/* Check if the event passed is an abnormal event */
__STATIC_INLINE bool XCM_ETH_MAC_IsAbnormalEvent(uint32_t event)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
   return (bool)((event & ((uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_PROCESS_STOPPED |
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	f242 73ba 	movw	r3, #10170	; 0x27ba
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	bf14      	ite	ne
 8001b44:	2301      	movne	r3, #1
 8001b46:	2300      	moveq	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
                           (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_BUFFER_UNAVAILABLE |
                           (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_PROCESS_STOPPED |
                           (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_WATCHDOG_TIMEOUT |
                           (uint32_t)XMC_ETH_MAC_EVENT_EARLY_TRANSMIT |
                           (uint32_t)XMC_ETH_MAC_EVENT_BUS_ERROR)) != (uint32_t)0);
 }
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop

08001b58 <XMC_ETH_MAC_Init>:

#endif

/* ETH MAC initialize */
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_Init(XMC_ETH_MAC_t *const eth_mac)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  XMC_ETH_MAC_STATUS_t status;

  XMC_ASSERT("XMC_ETH_MAC_Init: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  XMC_ETH_MAC_Enable(eth_mac);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f97d 	bl	8001e60 <XMC_ETH_MAC_Enable>
  XMC_ETH_MAC_Reset(eth_mac);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ff7c 	bl	8001a64 <XMC_ETH_MAC_Reset>

  status = XMC_ETH_MAC_SetManagmentClockDivider(eth_mac);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f927 	bl	8001dc0 <XMC_ETH_MAC_SetManagmentClockDivider>
 8001b72:	4603      	mov	r3, r0
 8001b74:	73fb      	strb	r3, [r7, #15]

  XMC_ETH_MAC_SetAddress(eth_mac, eth_mac->address);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ff91 	bl	8001aa4 <XMC_ETH_MAC_SetAddress>

  /* Initialize MAC configuration */
  eth_mac->regs->MAC_CONFIGURATION = (uint32_t)ETH_MAC_CONFIGURATION_IPC_Msk;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b8a:	601a      	str	r2, [r3, #0]

  /* Initialize Filter registers */
  eth_mac->regs->FLOW_CONTROL = ETH_FLOW_CONTROL_DZPQ_Msk; /* Disable Zero Quanta Pause */
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2280      	movs	r2, #128	; 0x80
 8001b92:	619a      	str	r2, [r3, #24]

  eth_mac->regs->OPERATION_MODE = (uint32_t)ETH_OPERATION_MODE_RSF_Msk |
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b9c:	3318      	adds	r3, #24
 8001b9e:	f04f 7208 	mov.w	r2, #35651584	; 0x2200000
 8001ba2:	601a      	str	r2, [r3, #0]
		                          (uint32_t)ETH_OPERATION_MODE_TSF_Msk;

  /* Increase enhanced descriptor to 8 WORDS, required when the Advanced Time-Stamp feature or Full IPC Offload Engine is enabled */
  eth_mac->regs->BUS_MODE |= (uint32_t)ETH_BUS_MODE_ATDS_Msk;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bb0:	6812      	ldr	r2, [r2, #0]
 8001bb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bba:	601a      	str	r2, [r3, #0]

  /* Initialize DMA Descriptors */
  XMC_ETH_MAC_InitRxDescriptors(eth_mac);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f81f 	bl	8001c00 <XMC_ETH_MAC_InitRxDescriptors>
  XMC_ETH_MAC_InitTxDescriptors(eth_mac);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f874 	bl	8001cb0 <XMC_ETH_MAC_InitTxDescriptors>

  /* Clear interrupts */
  eth_mac->regs->STATUS = 0xFFFFFFFFUL;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd0:	3314      	adds	r3, #20
 8001bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd6:	601a      	str	r2, [r3, #0]

  /* Disable MMC interrupt events */
  eth_mac->regs->MMC_TRANSMIT_INTERRUPT_MASK = ETH_MAC_MMC_INTERRUPT_MSK;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f06f 427c 	mvn.w	r2, #4227858432	; 0xfc000000
 8001be0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  eth_mac->regs->MMC_RECEIVE_INTERRUPT_MASK = ETH_MAC_MMC_INTERRUPT_MSK;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f06f 427c 	mvn.w	r2, #4227858432	; 0xfc000000
 8001bec:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  eth_mac->frame_end = NULL;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	621a      	str	r2, [r3, #32]

  return status;
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <XMC_ETH_MAC_InitRxDescriptors>:

/* Initialize RX descriptors */
void XMC_ETH_MAC_InitRxDescriptors(XMC_ETH_MAC_t *const eth_mac)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  /*
   * Chained structure (ETH_MAC_DMA_RDES1_RCH), second address in the descriptor
   * (buffer2) is the next descriptor address
   */
  for (i = 0U; i < eth_mac->num_rx_buf; ++i)
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	e037      	b.n	8001c7e <XMC_ETH_MAC_InitRxDescriptors+0x7e>
  {
	eth_mac->rx_desc[i].status = (uint32_t)ETH_MAC_DMA_RDES0_OWN;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691a      	ldr	r2, [r3, #16]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	015b      	lsls	r3, r3, #5
 8001c16:	4413      	add	r3, r2
 8001c18:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c1c:	601a      	str	r2, [r3, #0]
	eth_mac->rx_desc[i].length = (uint32_t)ETH_MAC_DMA_RDES1_RCH | (uint32_t)XMC_ETH_MAC_BUF_SIZE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691a      	ldr	r2, [r3, #16]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	015b      	lsls	r3, r3, #5
 8001c26:	4413      	add	r3, r2
 8001c28:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001c2c:	605a      	str	r2, [r3, #4]
	eth_mac->rx_desc[i].buffer1 = (uint32_t)&(eth_mac->rx_buf[i * XMC_ETH_MAC_BUF_SIZE]);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	015b      	lsls	r3, r3, #5
 8001c36:	4413      	add	r3, r2
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6991      	ldr	r1, [r2, #24]
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	f240 50f4 	movw	r0, #1524	; 0x5f4
 8001c42:	fb00 f202 	mul.w	r2, r0, r2
 8001c46:	440a      	add	r2, r1
 8001c48:	609a      	str	r2, [r3, #8]
    next = i + 1U;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	60bb      	str	r3, [r7, #8]
    if (next == eth_mac->num_rx_buf)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c56:	461a      	mov	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d101      	bne.n	8001c62 <XMC_ETH_MAC_InitRxDescriptors+0x62>
    {
      next = 0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
    }
    eth_mac->rx_desc[i].buffer2 = (uint32_t)&(eth_mac->rx_desc[next]);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	015b      	lsls	r3, r3, #5
 8001c6a:	4413      	add	r3, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6911      	ldr	r1, [r2, #16]
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	0152      	lsls	r2, r2, #5
 8001c74:	440a      	add	r2, r1
 8001c76:	60da      	str	r2, [r3, #12]

  /*
   * Chained structure (ETH_MAC_DMA_RDES1_RCH), second address in the descriptor
   * (buffer2) is the next descriptor address
   */
  for (i = 0U; i < eth_mac->num_rx_buf; ++i)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c84:	461a      	mov	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d8c0      	bhi.n	8001c0e <XMC_ETH_MAC_InitRxDescriptors+0xe>
    {
      next = 0U;
    }
    eth_mac->rx_desc[i].buffer2 = (uint32_t)&(eth_mac->rx_desc[next]);
  }
  eth_mac->regs->RECEIVE_DESCRIPTOR_LIST_ADDRESS = (uint32_t)&(eth_mac->rx_desc[0]);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6912      	ldr	r2, [r2, #16]
 8001c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c98:	330c      	adds	r3, #12
 8001c9a:	601a      	str	r2, [r3, #0]
  eth_mac->rx_index = 0U;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop

08001cb0 <XMC_ETH_MAC_InitTxDescriptors>:

/* Initialize TX descriptors */
void XMC_ETH_MAC_InitTxDescriptors(XMC_ETH_MAC_t *const eth_mac)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t next;

  XMC_ASSERT("XMC_ETH_MAC_InitTxDescriptors: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  /* Chained structure (ETH_MAC_DMA_TDES0_TCH), second address in the descriptor (buffer2) is the next descriptor address */
  for (i = 0U; i < eth_mac->num_tx_buf; ++i)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	e02e      	b.n	8001d1c <XMC_ETH_MAC_InitTxDescriptors+0x6c>
  {
	eth_mac->tx_desc[i].status = ETH_MAC_DMA_TDES0_TCH | ETH_MAC_DMA_TDES0_LS | ETH_MAC_DMA_TDES0_FS;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695a      	ldr	r2, [r3, #20]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	015b      	lsls	r3, r3, #5
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4a20      	ldr	r2, [pc, #128]	; (8001d4c <XMC_ETH_MAC_InitTxDescriptors+0x9c>)
 8001cca:	601a      	str	r2, [r3, #0]
	eth_mac->tx_desc[i].buffer1 = (uint32_t)&(eth_mac->tx_buf[i * XMC_ETH_MAC_BUF_SIZE]);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	695a      	ldr	r2, [r3, #20]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	015b      	lsls	r3, r3, #5
 8001cd4:	4413      	add	r3, r2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	69d1      	ldr	r1, [r2, #28]
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	f240 50f4 	movw	r0, #1524	; 0x5f4
 8001ce0:	fb00 f202 	mul.w	r2, r0, r2
 8001ce4:	440a      	add	r2, r1
 8001ce6:	609a      	str	r2, [r3, #8]
    next = i + 1U;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	3301      	adds	r3, #1
 8001cec:	60bb      	str	r3, [r7, #8]
    if (next == eth_mac->num_tx_buf)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d101      	bne.n	8001d00 <XMC_ETH_MAC_InitTxDescriptors+0x50>
    {
        next = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60bb      	str	r3, [r7, #8]
    }
    eth_mac->tx_desc[i].buffer2 = (uint32_t)&(eth_mac->tx_desc[next]);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	695a      	ldr	r2, [r3, #20]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	015b      	lsls	r3, r3, #5
 8001d08:	4413      	add	r3, r2
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6951      	ldr	r1, [r2, #20]
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	0152      	lsls	r2, r2, #5
 8001d12:	440a      	add	r2, r1
 8001d14:	60da      	str	r2, [r3, #12]
  uint32_t next;

  XMC_ASSERT("XMC_ETH_MAC_InitTxDescriptors: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  /* Chained structure (ETH_MAC_DMA_TDES0_TCH), second address in the descriptor (buffer2) is the next descriptor address */
  for (i = 0U; i < eth_mac->num_tx_buf; ++i)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d22:	461a      	mov	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d8c9      	bhi.n	8001cbe <XMC_ETH_MAC_InitTxDescriptors+0xe>
    {
        next = 0U;
    }
    eth_mac->tx_desc[i].buffer2 = (uint32_t)&(eth_mac->tx_desc[next]);
  }
  eth_mac->regs->TRANSMIT_DESCRIPTOR_LIST_ADDRESS = (uint32_t)&(eth_mac->tx_desc[0]);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6952      	ldr	r2, [r2, #20]
 8001d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d36:	3310      	adds	r3, #16
 8001d38:	601a      	str	r2, [r3, #0]
  eth_mac->tx_index = 0U;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	30100000 	.word	0x30100000

08001d50 <XMC_ETH_MAC_GetRxFrameSize>:
  return (len);
}

/* Get RX frame size */
uint32_t XMC_ETH_MAC_GetRxFrameSize(XMC_ETH_MAC_t *const eth_mac)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t status;
  uint32_t len = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]

  status = eth_mac->rx_desc[eth_mac->rx_index].status;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691a      	ldr	r2, [r3, #16]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001d66:	015b      	lsls	r3, r3, #5
 8001d68:	4413      	add	r3, r2
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	60bb      	str	r3, [r7, #8]

  if (status & ETH_MAC_DMA_RDES0_OWN)
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	da02      	bge.n	8001d7a <XMC_ETH_MAC_GetRxFrameSize+0x2a>
  {
    /* Owned by DMA */
    len = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	e018      	b.n	8001dac <XMC_ETH_MAC_GetRxFrameSize+0x5c>
  }
  else if (((status & ETH_MAC_DMA_RDES0_ES) != 0U) ||
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d109      	bne.n	8001d98 <XMC_ETH_MAC_GetRxFrameSize+0x48>
           ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if (status & ETH_MAC_DMA_RDES0_OWN)
  {
    /* Owned by DMA */
    len = 0U;
  }
  else if (((status & ETH_MAC_DMA_RDES0_ES) != 0U) ||
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d004      	beq.n	8001d98 <XMC_ETH_MAC_GetRxFrameSize+0x48>
           ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
           ((status & ETH_MAC_DMA_RDES0_LS) == 0U)) 
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
  {
    /* Owned by DMA */
    len = 0U;
  }
  else if (((status & ETH_MAC_DMA_RDES0_ES) != 0U) ||
           ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d103      	bne.n	8001da0 <XMC_ETH_MAC_GetRxFrameSize+0x50>
           ((status & ETH_MAC_DMA_RDES0_LS) == 0U)) 
  {
    /* Error, this block is invalid */
    len = 0xFFFFFFFFU;
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	e005      	b.n	8001dac <XMC_ETH_MAC_GetRxFrameSize+0x5c>
  }
  else 
  {
    /* Subtract CRC */
    len = ((status & ETH_MAC_DMA_RDES0_FL) >> 16U) - 4U;
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <XMC_ETH_MAC_GetRxFrameSize+0x6c>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	0c1b      	lsrs	r3, r3, #16
 8001da8:	3b04      	subs	r3, #4
 8001daa:	60fb      	str	r3, [r7, #12]
  }

  return len;
 8001dac:	68fb      	ldr	r3, [r7, #12]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	3fff0000 	.word	0x3fff0000

08001dc0 <XMC_ETH_MAC_SetManagmentClockDivider>:

/* Set management clock divider */
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_SetManagmentClockDivider(XMC_ETH_MAC_t *const eth_mac)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t eth_mac_clk;
  XMC_ETH_MAC_STATUS_t status;
  __IO uint32_t *reg;

  eth_mac_clk = XMC_SCU_CLOCK_GetEthernetClockFrequency();
 8001dc8:	f7ff fe96 	bl	8001af8 <XMC_SCU_CLOCK_GetEthernetClockFrequency>
 8001dcc:	6138      	str	r0, [r7, #16]
  status = XMC_ETH_MAC_STATUS_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	75fb      	strb	r3, [r7, #23]

  reg = &(eth_mac->regs->GMII_ADDRESS);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	3310      	adds	r3, #16
 8001dd8:	60fb      	str	r3, [r7, #12]
  if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_35MHZ)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4a1a      	ldr	r2, [pc, #104]	; (8001e48 <XMC_ETH_MAC_SetManagmentClockDivider+0x88>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d803      	bhi.n	8001dea <XMC_ETH_MAC_SetManagmentClockDivider+0x2a>
  {
	*reg = XMC_ETH_MAC_MDC_DIVIDER_16;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2208      	movs	r2, #8
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e029      	b.n	8001e3e <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_60MHZ)
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4a17      	ldr	r2, [pc, #92]	; (8001e4c <XMC_ETH_MAC_SetManagmentClockDivider+0x8c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d803      	bhi.n	8001dfa <XMC_ETH_MAC_SetManagmentClockDivider+0x3a>
  {
	*reg = XMC_ETH_MAC_MDC_DIVIDER_26;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	220c      	movs	r2, #12
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	e021      	b.n	8001e3e <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_100MHZ)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4a14      	ldr	r2, [pc, #80]	; (8001e50 <XMC_ETH_MAC_SetManagmentClockDivider+0x90>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d803      	bhi.n	8001e0a <XMC_ETH_MAC_SetManagmentClockDivider+0x4a>
  {
	*reg = XMC_ETH_MAC_MDC_DIVIDER_42;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	e019      	b.n	8001e3e <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_150MHZ)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4a11      	ldr	r2, [pc, #68]	; (8001e54 <XMC_ETH_MAC_SetManagmentClockDivider+0x94>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d803      	bhi.n	8001e1a <XMC_ETH_MAC_SetManagmentClockDivider+0x5a>
  {
	*reg = XMC_ETH_MAC_MDC_DIVIDER_62;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2204      	movs	r2, #4
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	e011      	b.n	8001e3e <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_200MHZ)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4a0e      	ldr	r2, [pc, #56]	; (8001e58 <XMC_ETH_MAC_SetManagmentClockDivider+0x98>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d803      	bhi.n	8001e2a <XMC_ETH_MAC_SetManagmentClockDivider+0x6a>
  {
	*reg = XMC_ETH_MAC_MDC_DIVIDER_102;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2210      	movs	r2, #16
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	e009      	b.n	8001e3e <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_250MHZ)
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <XMC_ETH_MAC_SetManagmentClockDivider+0x9c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d803      	bhi.n	8001e3a <XMC_ETH_MAC_SetManagmentClockDivider+0x7a>
  {
	*reg = XMC_ETH_MAC_MDC_DIVIDER_124;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2214      	movs	r2, #20
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	e001      	b.n	8001e3e <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else
  {
    status = XMC_ETH_MAC_STATUS_ERROR;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	02160ec0 	.word	0x02160ec0
 8001e4c:	03938700 	.word	0x03938700
 8001e50:	05f5e100 	.word	0x05f5e100
 8001e54:	08f0d180 	.word	0x08f0d180
 8001e58:	0bebc200 	.word	0x0bebc200
 8001e5c:	0ee6b280 	.word	0x0ee6b280

08001e60 <XMC_ETH_MAC_Enable>:

/* ETH MAC enable */
void XMC_ETH_MAC_Enable(XMC_ETH_MAC_t *const eth_mac)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_ETH);
 8001e68:	2004      	movs	r0, #4
 8001e6a:	f7fe fd59 	bl	8000920 <XMC_SCU_CLOCK_EnableClock>
#if UC_DEVICE != XMC4500
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ETH0);
 8001e6e:	4804      	ldr	r0, [pc, #16]	; (8001e80 <XMC_ETH_MAC_Enable+0x20>)
 8001e70:	f7fe fd66 	bl	8000940 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ETH0);
 8001e74:	4802      	ldr	r0, [pc, #8]	; (8001e80 <XMC_ETH_MAC_Enable+0x20>)
 8001e76:	f7fe fbdf 	bl	8000638 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000004 	.word	0x20000004

08001e84 <XMC_ETH_MAC_ReadPhy>:
  XMC_SCU_CLOCK_DisableClock(XMC_SCU_CLOCK_ETH);
}

/* Read physical layer and obtain status */
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_ReadPhy(XMC_ETH_MAC_t *eth_mac, uint8_t phy_addr, uint8_t reg_addr, uint16_t *data)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b087      	sub	sp, #28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	72fb      	strb	r3, [r7, #11]
 8001e92:	4613      	mov	r3, r2
 8001e94:	72bb      	strb	r3, [r7, #10]
  uint32_t retries;

  XMC_ASSERT("XMC_ETH_MAC_PhyRead: Parameter error", data != NULL);

  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	6912      	ldr	r2, [r2, #16]
 8001ea0:	f002 013c 	and.w	r1, r2, #60	; 0x3c
                                           (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
                                           (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
 8001ea4:	7afa      	ldrb	r2, [r7, #11]
 8001ea6:	02d2      	lsls	r2, r2, #11
  uint32_t retries;

  XMC_ASSERT("XMC_ETH_MAC_PhyRead: Parameter error", data != NULL);

  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
                                           (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
 8001ea8:	4311      	orrs	r1, r2
                                           (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
                                           (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos));
 8001eaa:	7aba      	ldrb	r2, [r7, #10]
 8001eac:	0192      	lsls	r2, r2, #6
{
  uint32_t retries;

  XMC_ASSERT("XMC_ETH_MAC_PhyRead: Parameter error", data != NULL);

  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	f042 0201 	orr.w	r2, r2, #1
 8001eb4:	611a      	str	r2, [r3, #16]
                                           (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
                                           (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
                                           (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos));

  /* Poll busy bit during max PHY_TIMEOUT time */
  retries = 0U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
  do
  {
    if ((eth_mac->regs->GMII_ADDRESS & ETH_GMII_ADDRESS_MB_Msk) == 0U)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d107      	bne.n	8001ed8 <XMC_ETH_MAC_ReadPhy+0x54>
    {
      *data = (uint16_t)(eth_mac->regs->GMII_DATA & ETH_GMII_DATA_MD_Msk);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	801a      	strh	r2, [r3, #0]
      return XMC_ETH_MAC_STATUS_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	e008      	b.n	8001eea <XMC_ETH_MAC_ReadPhy+0x66>
    }
    ++retries;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	3301      	adds	r3, #1
 8001edc:	617b      	str	r3, [r7, #20]
  } while (retries < XMC_ETH_MAC_PHY_MAX_RETRIES);
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d9e8      	bls.n	8001eba <XMC_ETH_MAC_ReadPhy+0x36>

  return XMC_ETH_MAC_STATUS_ERROR;
 8001ee8:	2302      	movs	r3, #2
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	371c      	adds	r7, #28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop

08001ef8 <XMC_ETH_MAC_WritePhy>:

/* Write physical layer and return status */
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_WritePhy(XMC_ETH_MAC_t *eth_mac, uint8_t phy_addr, uint8_t reg_addr, uint16_t data)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	4608      	mov	r0, r1
 8001f02:	4611      	mov	r1, r2
 8001f04:	461a      	mov	r2, r3
 8001f06:	4603      	mov	r3, r0
 8001f08:	70fb      	strb	r3, [r7, #3]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	70bb      	strb	r3, [r7, #2]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	803b      	strh	r3, [r7, #0]
  uint32_t retries;

  eth_mac->regs->GMII_DATA  = data;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	883a      	ldrh	r2, [r7, #0]
 8001f18:	615a      	str	r2, [r3, #20]
  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	6912      	ldr	r2, [r2, #16]
 8001f24:	f002 013c 	and.w	r1, r2, #60	; 0x3c
                                           (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
                                           (uint32_t)ETH_GMII_ADDRESS_MW_Msk |
                                           (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
 8001f28:	78fa      	ldrb	r2, [r7, #3]
 8001f2a:	02d2      	lsls	r2, r2, #11
  uint32_t retries;

  eth_mac->regs->GMII_DATA  = data;
  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
                                           (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
                                           (uint32_t)ETH_GMII_ADDRESS_MW_Msk |
 8001f2c:	4311      	orrs	r1, r2
                                           (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
                                           (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos));
 8001f2e:	78ba      	ldrb	r2, [r7, #2]
 8001f30:	0192      	lsls	r2, r2, #6
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_WritePhy(XMC_ETH_MAC_t *eth_mac, uint8_t phy_addr, uint8_t reg_addr, uint16_t data)
{
  uint32_t retries;

  eth_mac->regs->GMII_DATA  = data;
  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 8001f32:	430a      	orrs	r2, r1
 8001f34:	f042 0203 	orr.w	r2, r2, #3
 8001f38:	611a      	str	r2, [r3, #16]
                                           (uint32_t)ETH_GMII_ADDRESS_MW_Msk |
                                           (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
                                           (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos));

   /* Poll busy bit during max PHY_TIMEOUT time */
  retries = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
  do
  {
    if ((eth_mac->regs->GMII_ADDRESS & ETH_GMII_ADDRESS_MB_Msk) == 0U)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <XMC_ETH_MAC_WritePhy+0x58>
    {
      return XMC_ETH_MAC_STATUS_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e008      	b.n	8001f62 <XMC_ETH_MAC_WritePhy+0x6a>
    }
    ++retries;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	3301      	adds	r3, #1
 8001f54:	60fb      	str	r3, [r7, #12]
  } while (retries < XMC_ETH_MAC_PHY_MAX_RETRIES);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d9ee      	bls.n	8001f3e <XMC_ETH_MAC_WritePhy+0x46>

  return XMC_ETH_MAC_STATUS_ERROR;
 8001f60:	2302      	movs	r3, #2
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop

08001f70 <XMC_ETH_MAC_EnableEvent>:
  }
}

/* Enable event */
void XMC_ETH_MAC_EnableEvent(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_ETH_MAC_EnableDMAEvent: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  eth_mac->regs->INTERRUPT_MASK &= ~(event >> 16U);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	0c12      	lsrs	r2, r2, #16
 8001f88:	43d2      	mvns	r2, r2
 8001f8a:	400a      	ands	r2, r1
 8001f8c:	63da      	str	r2, [r3, #60]	; 0x3c

  event &= (uint16_t)0x7fffU;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001f94:	603b      	str	r3, [r7, #0]
  if (XCM_ETH_MAC_IsNormalEvent(event))
 8001f96:	6838      	ldr	r0, [r7, #0]
 8001f98:	f7ff fdb6 	bl	8001b08 <XCM_ETH_MAC_IsNormalEvent>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <XMC_ETH_MAC_EnableEvent+0x3a>
  {
	event |= (uint32_t)ETH_INTERRUPT_ENABLE_NIE_Msk;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa8:	603b      	str	r3, [r7, #0]
  }

  if (XCM_ETH_MAC_IsAbnormalEvent(event))
 8001faa:	6838      	ldr	r0, [r7, #0]
 8001fac:	f7ff fdc0 	bl	8001b30 <XCM_ETH_MAC_IsAbnormalEvent>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <XMC_ETH_MAC_EnableEvent+0x4e>
  {
	event |= (uint32_t)ETH_INTERRUPT_ENABLE_AIE_Msk;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fbc:	603b      	str	r3, [r7, #0]
  }

  eth_mac->regs->INTERRUPT_ENABLE |= event;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6819      	ldr	r1, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fca:	331c      	adds	r3, #28
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001fd6:	331c      	adds	r3, #28
 8001fd8:	601a      	str	r2, [r3, #0]
}
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <XMC_ETH_MAC_DisableEvent>:

/* Disable event */
void XMC_ETH_MAC_DisableEvent(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_ETH_MAC_DisableDMAEvent: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  eth_mac->regs->INTERRUPT_MASK |= event >> 16U;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6812      	ldr	r2, [r2, #0]
 8001ff2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	0c12      	lsrs	r2, r2, #16
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	63da      	str	r2, [r3, #60]	; 0x3c

  event &= 0x7fffU;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002002:	603b      	str	r3, [r7, #0]
  eth_mac->regs->INTERRUPT_ENABLE &= ~event;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6819      	ldr	r1, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002010:	331c      	adds	r3, #28
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	43db      	mvns	r3, r3
 8002018:	401a      	ands	r2, r3
 800201a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800201e:	331c      	adds	r3, #28
 8002020:	601a      	str	r2, [r3, #0]
}
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <XMC_ETH_MAC_ClearEventStatus>:

/* Clear event status */
void XMC_ETH_MAC_ClearEventStatus(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_ETH_MAC_ClearDMAEventStatus: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  if ((eth_mac->regs->STATUS & ETH_STATUS_NIS_Msk) != 0U)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800203e:	3314      	adds	r3, #20
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <XMC_ETH_MAC_ClearEventStatus+0x26>
  {
	event |= (uint32_t)ETH_STATUS_NIS_Msk;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002050:	603b      	str	r3, [r7, #0]
  }

  if ((eth_mac->regs->STATUS & ETH_STATUS_AIS_Msk) != 0U)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800205a:	3314      	adds	r3, #20
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <XMC_ETH_MAC_ClearEventStatus+0x42>
  {
	event |= (uint32_t)ETH_STATUS_AIS_Msk;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800206c:	603b      	str	r3, [r7, #0]
  }

  eth_mac->regs->STATUS = event;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002076:	3314      	adds	r3, #20
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	601a      	str	r2, [r3, #0]
}
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop

08002088 <XMC_ETH_MAC_ReturnRxDescriptor>:
		  temp_status);
}

/* Return RX descriptor */
void XMC_ETH_MAC_ReturnRxDescriptor(XMC_ETH_MAC_t *const eth_mac)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  eth_mac->rx_desc[eth_mac->rx_index].status |= ETH_MAC_DMA_RDES0_OWN;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800209a:	015b      	lsls	r3, r3, #5
 800209c:	4413      	add	r3, r2
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6911      	ldr	r1, [r2, #16]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80020a8:	0152      	lsls	r2, r2, #5
 80020aa:	440a      	add	r2, r1
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80020b2:	601a      	str	r2, [r3, #0]
  eth_mac->rx_index++;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80020ba:	3301      	adds	r3, #1
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  if (eth_mac->rx_index == eth_mac->num_rx_buf)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d103      	bne.n	80020dc <XMC_ETH_MAC_ReturnRxDescriptor+0x54>
  {
    eth_mac->rx_index = 0U;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  } 
}
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop

080020e8 <XMC_ETH_MAC_ReturnTxDescriptor>:

/* Return TX descriptor */
void XMC_ETH_MAC_ReturnTxDescriptor(XMC_ETH_MAC_t *const eth_mac)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  eth_mac->tx_ts_index = eth_mac->tx_index;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  eth_mac->tx_desc[eth_mac->tx_index].status |= ETH_MAC_DMA_TDES0_CIC |ETH_MAC_DMA_TDES0_OWN;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	695a      	ldr	r2, [r3, #20]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002106:	015b      	lsls	r3, r3, #5
 8002108:	441a      	add	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6959      	ldr	r1, [r3, #20]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002114:	015b      	lsls	r3, r3, #5
 8002116:	440b      	add	r3, r1
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800211e:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8002122:	6013      	str	r3, [r2, #0]
  eth_mac->tx_index++;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800212a:	3301      	adds	r3, #1
 800212c:	b2da      	uxtb	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  if (eth_mac->tx_index == eth_mac->num_tx_buf)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002140:	429a      	cmp	r2, r3
 8002142:	d103      	bne.n	800214c <XMC_ETH_MAC_ReturnTxDescriptor+0x64>
  {
    eth_mac->tx_index = 0U;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  } 

  eth_mac->frame_end = NULL;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	621a      	str	r2, [r3, #32]
}
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	70fb      	strb	r3, [r7, #3]
 8002168:	4613      	mov	r3, r2
 800216a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4619      	mov	r1, r3
 8002176:	2303      	movs	r3, #3
 8002178:	408b      	lsls	r3, r1
 800217a:	43db      	mvns	r3, r3
 800217c:	401a      	ands	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002186:	78bb      	ldrb	r3, [r7, #2]
 8002188:	78f9      	ldrb	r1, [r7, #3]
 800218a:	0049      	lsls	r1, r1, #1
 800218c:	408b      	lsls	r3, r1
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop

080021a0 <XMC_SPI_CH_Init>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/
 
/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f892 	bl	80022d4 <XMC_USIC_CH_Enable>
  
  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	791b      	ldrb	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d106      	bne.n	80021c6 <XMC_SPI_CH_Init+0x26>
  {
    /* Configure baud rate */
    (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	4619      	mov	r1, r3
 80021c0:	2202      	movs	r2, #2
 80021c2:	f000 f8d3 	bl	800236c <XMC_USIC_CH_SetBaudrate>
  }
  
  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a0e      	ldr	r2, [pc, #56]	; (8002204 <XMC_SPI_CH_Init+0x64>)
 80021ca:	635a      	str	r2, [r3, #52]	; 0x34
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 80021d2:	639a      	str	r2, [r3, #56]	; 0x38
                  (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	791b      	ldrb	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d107      	bne.n	80021ec <XMC_SPI_CH_Init+0x4c>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                           USIC_CH_PCR_SSCMode_SELCTR_Msk |
                           (uint32_t)config->selo_inversion |
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	795b      	ldrb	r3, [r3, #5]
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 80021e0:	f043 030b 	orr.w	r3, r3, #11
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	63da      	str	r2, [r3, #60]	; 0x3c
                           (uint32_t)config->selo_inversion |
                           USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f04f 32ff 	mov.w	r2, #4294967295
 80021f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	88db      	ldrh	r3, [r3, #6]
 80021f8:	461a      	mov	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	073f0102 	.word	0x073f0102

08002208 <XMC_SPI_CH_EnableSlaveSelect>:
  return status;
}

/* Enable the selected slave signal by setting (SELO) bits in PCR register. */
void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t slave)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002216:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	63da      	str	r2, [r3, #60]	; 0x3c
  channel->PCR_SSCMode |= (uint32_t)slave;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <XMC_SPI_CH_GetReceivedData>:
  }
}

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002242:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d103      	bne.n	8002252 <XMC_SPI_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224e:	81fb      	strh	r3, [r7, #14]
 8002250:	e003      	b.n	800225a <XMC_SPI_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002258:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 800225a:	89fb      	ldrh	r3, [r7, #14]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <XMC_SPI_CH_EnableEvent>:

  return status;
}

void XMC_SPI_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  channel->CCR |= (event&0x1fc00U);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 800227c:	431a      	orrs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_SSCMode |= ((event << 13U) & 0xe000U);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	035b      	lsls	r3, r3, #13
 800228a:	b29b      	uxth	r3, r3
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <XMC_SPI_CH_DisableEvent>:

void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~(event&0x1fc00U);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 80022b0:	43db      	mvns	r3, r3
 80022b2:	401a      	ands	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_SSCMode &= (uint32_t)~((event << 13U) & 0xe000U);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	035b      	lsls	r3, r3, #13
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	401a      	ands	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a1a      	ldr	r2, [pc, #104]	; (8002348 <XMC_USIC_CH_Enable+0x74>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d003      	beq.n	80022ec <XMC_USIC_CH_Enable+0x18>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a19      	ldr	r2, [pc, #100]	; (800234c <XMC_USIC_CH_Enable+0x78>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d103      	bne.n	80022f4 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 80022ec:	4818      	ldr	r0, [pc, #96]	; (8002350 <XMC_USIC_CH_Enable+0x7c>)
 80022ee:	f000 f8c9 	bl	8002484 <XMC_USIC_Enable>
 80022f2:	e016      	b.n	8002322 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a17      	ldr	r2, [pc, #92]	; (8002354 <XMC_USIC_CH_Enable+0x80>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d003      	beq.n	8002304 <XMC_USIC_CH_Enable+0x30>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a16      	ldr	r2, [pc, #88]	; (8002358 <XMC_USIC_CH_Enable+0x84>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d103      	bne.n	800230c <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8002304:	4815      	ldr	r0, [pc, #84]	; (800235c <XMC_USIC_CH_Enable+0x88>)
 8002306:	f000 f8bd 	bl	8002484 <XMC_USIC_Enable>
 800230a:	e00a      	b.n	8002322 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a14      	ldr	r2, [pc, #80]	; (8002360 <XMC_USIC_CH_Enable+0x8c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d003      	beq.n	800231c <XMC_USIC_CH_Enable+0x48>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a13      	ldr	r2, [pc, #76]	; (8002364 <XMC_USIC_CH_Enable+0x90>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d102      	bne.n	8002322 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 800231c:	4812      	ldr	r0, [pc, #72]	; (8002368 <XMC_USIC_CH_Enable+0x94>)
 800231e:	f000 f8b1 	bl	8002484 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2203      	movs	r2, #3
 8002326:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8002328:	bf00      	nop
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f9      	beq.n	800232a <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f023 020f 	bic.w	r2, r3, #15
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40030000 	.word	0x40030000
 800234c:	40030200 	.word	0x40030200
 8002350:	40030008 	.word	0x40030008
 8002354:	48020000 	.word	0x48020000
 8002358:	48020200 	.word	0x48020200
 800235c:	48020008 	.word	0x48020008
 8002360:	48024000 	.word	0x48024000
 8002364:	48024200 	.word	0x48024200
 8002368:	48024008 	.word	0x48024008

0800236c <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08e      	sub	sp, #56	; 0x38
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2b63      	cmp	r3, #99	; 0x63
 800237c:	d958      	bls.n	8002430 <XMC_USIC_CH_SetBaudrate+0xc4>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d055      	beq.n	8002430 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8002384:	f7fe f998 	bl	80006b8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8002388:	4602      	mov	r2, r0
 800238a:	4b2e      	ldr	r3, [pc, #184]	; (8002444 <XMC_USIC_CH_SetBaudrate+0xd8>)
 800238c:	fba3 2302 	umull	r2, r3, r3, r2
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	4a2b      	ldr	r2, [pc, #172]	; (8002444 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	095b      	lsrs	r3, r3, #5
 800239e:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 80023a0:	2301      	movs	r3, #1
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 80023a4:	2301      	movs	r3, #1
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 80023a8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 80023ae:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
 80023b4:	e022      	b.n	80023fc <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ba:	fb02 f203 	mul.w	r2, r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ca:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	0a9b      	lsrs	r3, r3, #10
 80023d0:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023d8:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e0:	d209      	bcs.n	80023f6 <XMC_USIC_CH_SetBaudrate+0x8a>
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d205      	bcs.n	80023f6 <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 80023f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 80023f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f8:	3b01      	subs	r3, #1
 80023fa:	633b      	str	r3, [r7, #48]	; 0x30
 80023fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1d9      	bne.n	80023b6 <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8002402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002404:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	695a      	ldr	r2, [r3, #20]
 8002410:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8002412:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	3a01      	subs	r2, #1
 8002418:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 800241a:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 800241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241e:	3b01      	subs	r3, #1
 8002420:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8002422:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800242e:	e002      	b.n	8002436 <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 8002436:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800243a:	4618      	mov	r0, r3
 800243c:	3738      	adds	r7, #56	; 0x38
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	51eb851f 	.word	0x51eb851f
 8002448:	fc0080ef 	.word	0xfc0080ef

0800244c <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	460b      	mov	r3, r1
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	699a      	ldr	r2, [r3, #24]
 800245e:	7afb      	ldrb	r3, [r7, #11]
 8002460:	2107      	movs	r1, #7
 8002462:	fa01 f303 	lsl.w	r3, r1, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 800246a:	7afb      	ldrb	r3, [r7, #11]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8002472:	431a      	orrs	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop

08002484 <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                   (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a12      	ldr	r2, [pc, #72]	; (80024d8 <XMC_USIC_Enable+0x54>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d108      	bne.n	80024a6 <XMC_USIC_Enable+0x22>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 8002494:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002498:	f7fe fa52 	bl	8000940 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 800249c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80024a0:	f7fe f8ca 	bl	8000638 <XMC_SCU_RESET_DeassertPeripheralReset>
 80024a4:	e014      	b.n	80024d0 <XMC_USIC_Enable+0x4c>
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a0c      	ldr	r2, [pc, #48]	; (80024dc <XMC_USIC_Enable+0x58>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d106      	bne.n	80024bc <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 80024ae:	480c      	ldr	r0, [pc, #48]	; (80024e0 <XMC_USIC_Enable+0x5c>)
 80024b0:	f7fe fa46 	bl	8000940 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 80024b4:	480a      	ldr	r0, [pc, #40]	; (80024e0 <XMC_USIC_Enable+0x5c>)
 80024b6:	f7fe f8bf 	bl	8000638 <XMC_SCU_RESET_DeassertPeripheralReset>
 80024ba:	e009      	b.n	80024d0 <XMC_USIC_Enable+0x4c>
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a09      	ldr	r2, [pc, #36]	; (80024e4 <XMC_USIC_Enable+0x60>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d105      	bne.n	80024d0 <XMC_USIC_Enable+0x4c>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
 80024c4:	4808      	ldr	r0, [pc, #32]	; (80024e8 <XMC_USIC_Enable+0x64>)
 80024c6:	f7fe fa3b 	bl	8000940 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 80024ca:	4807      	ldr	r0, [pc, #28]	; (80024e8 <XMC_USIC_Enable+0x64>)
 80024cc:	f7fe f8b4 	bl	8000638 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40030008 	.word	0x40030008
 80024dc:	48020008 	.word	0x48020008
 80024e0:	10000080 	.word	0x10000080
 80024e4:	48024008 	.word	0x48024008
 80024e8:	10000100 	.word	0x10000100

080024ec <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 80024f4:	4b14      	ldr	r3, [pc, #80]	; (8002548 <_sbrk+0x5c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d102      	bne.n	8002502 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 80024fc:	4b12      	ldr	r3, [pc, #72]	; (8002548 <_sbrk+0x5c>)
 80024fe:	4a13      	ldr	r2, [pc, #76]	; (800254c <_sbrk+0x60>)
 8002500:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <_sbrk+0x5c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3303      	adds	r3, #3
 800250c:	f023 0303 	bic.w	r3, r3, #3
 8002510:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8002512:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <_sbrk+0x5c>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	4a0d      	ldr	r2, [pc, #52]	; (8002550 <_sbrk+0x64>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d207      	bcs.n	8002530 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8002520:	4b09      	ldr	r3, [pc, #36]	; (8002548 <_sbrk+0x5c>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4413      	add	r3, r2
 8002528:	4a07      	ldr	r2, [pc, #28]	; (8002548 <_sbrk+0x5c>)
 800252a:	6013      	str	r3, [r2, #0]
    return (base);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	e006      	b.n	800253e <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8002530:	f006 fab0 	bl	8008a94 <__errno>
 8002534:	4602      	mov	r2, r0
 8002536:	230c      	movs	r3, #12
 8002538:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 800253a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	1ffe8b10 	.word	0x1ffe8b10
 800254c:	200030a0 	.word	0x200030a0
 8002550:	2003ffc0 	.word	0x2003ffc0

08002554 <_init>:

/* Init */
void _init(void)
{}
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	2101      	movs	r1, #1
 8002574:	fa01 f303 	lsl.w	r3, r1, r3
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	60da      	str	r2, [r3, #12]
}
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	60da      	str	r2, [r3, #12]
}
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	611a      	str	r2, [r3, #16]
}
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 80025c4:	887a      	ldrh	r2, [r7, #2]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 80025e0:	887a      	ldrh	r2, [r7, #2]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	611a      	str	r2, [r3, #16]
}
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop

0800260c <XMC_CCU4_SLICE_GetTimerValue>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_SetTimerValue().
 */
__STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerValue(const XMC_CCU4_SLICE_t *const slice)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return((uint16_t)slice->TIMER);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002618:	b29b      	uxth	r3, r3
}
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop

08002628 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800263a:	78fb      	ldrb	r3, [r7, #3]
 800263c:	2101      	movs	r1, #1
 800263e:	fa01 f303 	lsl.w	r3, r1, r3
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <XMC_CCU4_SLICE_ClearEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent()<BR> XMC_CCU4_SLICE_GetEvent().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->SWR |= ((uint32_t) 1) << ((uint32_t) event);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	2101      	movs	r1, #1
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8002688:	2300      	movs	r3, #0
 800268a:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002692:	f083 0301 	eor.w	r3, r3, #1
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d009      	beq.n	80026b0 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d104      	bne.n	80026b0 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f85e 	bl	8002768 <TIMER_CCU4_lInit>
 80026ac:	4603      	mov	r3, r0
 80026ae:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop

080026bc <TIMER_ClearEvent>:

/*
 * This function clears the period match interrupt status of the given timer.
 */
void TIMER_ClearEvent(TIMER_t *const handle_ptr)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("TIME_CCU_AcknowledgeInterrupt:handle_ptr NULL" , (handle_ptr != NULL));

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d105      	bne.n	80026da <TIMER_ClearEvent+0x1e>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU4_SLICE_ClearEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	4618      	mov	r0, r3
 80026d4:	2100      	movs	r1, #0
 80026d6:	f7ff ffbd 	bl	8002654 <XMC_CCU4_SLICE_ClearEvent>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU8_SLICE_ClearEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
  }
#endif
}
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <TIMER_GetTime>:

/*
 * This function returns the current time value
 */
uint32_t TIMER_GetTime(TIMER_t *const handle_ptr)
{
 80026e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t ltimer_val;
  uint32_t lprescaler;
  uint32_t ltime_val;

  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));
  ltime_val = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d131      	bne.n	800275a <TIMER_GetTime+0x7a>
  {
    /* Added one to according to the edge aligned mode */
    ltimer_val = (uint32_t)XMC_CCU4_SLICE_GetTimerValue(handle_ptr->ccu4_slice_ptr) + 1U;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff ff86 	bl	800260c <XMC_CCU4_SLICE_GetTimerValue>
 8002700:	4603      	mov	r3, r0
 8002702:	3301      	adds	r3, #1
 8002704:	613b      	str	r3, [r7, #16]
    lprescaler = handle_ptr->ccu4_slice_config_ptr->prescaler_initval;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	791b      	ldrb	r3, [r3, #4]
 800270c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002710:	b2db      	uxtb	r3, r3
 8002712:	60fb      	str	r3, [r7, #12]

    /* calculate the time value in micro seconds and scaled with 100 */
    ltime_val = (uint32_t)((uint64_t)((uint64_t)ltimer_val * (uint64_t)TIMER_CLK_CONST_SCALED) >> \
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	461a      	mov	r2, r3
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	4911      	ldr	r1, [pc, #68]	; (8002764 <TIMER_GetTime+0x84>)
 800271e:	fb01 f003 	mul.w	r0, r1, r3
 8002722:	2100      	movs	r1, #0
 8002724:	fb01 f102 	mul.w	r1, r1, r2
 8002728:	4401      	add	r1, r0
 800272a:	480e      	ldr	r0, [pc, #56]	; (8002764 <TIMER_GetTime+0x84>)
 800272c:	fba2 2300 	umull	r2, r3, r2, r0
 8002730:	4419      	add	r1, r3
 8002732:	460b      	mov	r3, r1
                           (TIMER_CLK_SCALE_FACTOR - lprescaler));
 8002734:	68f9      	ldr	r1, [r7, #12]
 8002736:	f1c1 0120 	rsb	r1, r1, #32
    /* Added one to according to the edge aligned mode */
    ltimer_val = (uint32_t)XMC_CCU4_SLICE_GetTimerValue(handle_ptr->ccu4_slice_ptr) + 1U;
    lprescaler = handle_ptr->ccu4_slice_config_ptr->prescaler_initval;

    /* calculate the time value in micro seconds and scaled with 100 */
    ltime_val = (uint32_t)((uint64_t)((uint64_t)ltimer_val * (uint64_t)TIMER_CLK_CONST_SCALED) >> \
 800273a:	f1c1 0620 	rsb	r6, r1, #32
 800273e:	f1a1 0020 	sub.w	r0, r1, #32
 8002742:	fa22 f401 	lsr.w	r4, r2, r1
 8002746:	fa03 f606 	lsl.w	r6, r3, r6
 800274a:	4334      	orrs	r4, r6
 800274c:	fa23 f000 	lsr.w	r0, r3, r0
 8002750:	4304      	orrs	r4, r0
 8002752:	fa23 f501 	lsr.w	r5, r3, r1
 8002756:	4623      	mov	r3, r4
 8002758:	617b      	str	r3, [r7, #20]
    ltime_val = (uint32_t)((uint64_t)((uint64_t)ltimer_val * (uint64_t)TIMER_CLK_CONST_SCALED) >> \
                           (TIMER_CLK_SCALE_FACTOR - lprescaler));
  }
#endif

  return ltime_val;
 800275a:	697b      	ldr	r3, [r7, #20]
}
 800275c:	4618      	mov	r0, r3
 800275e:	371c      	adds	r7, #28
 8002760:	46bd      	mov	sp, r7
 8002762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002764:	b1c71c71 	.word	0xb1c71c71

08002768 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	4618      	mov	r0, r3
 8002776:	f001 fbe3 	bl	8003f40 <GLOBAL_CCU4_Init>
 800277a:	4603      	mov	r3, r0
 800277c:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	7e1b      	ldrb	r3, [r3, #24]
 8002788:	4610      	mov	r0, r2
 800278a:	4619      	mov	r1, r3
 800278c:	f7ff fee8 	bl	8002560 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	695a      	ldr	r2, [r3, #20]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	4610      	mov	r0, r2
 800279a:	4619      	mov	r1, r3
 800279c:	f7fe fbb2 	bl	8000f04 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f82d 	bl	8002800 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00f      	beq.n	80027d0 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	695a      	ldr	r2, [r3, #20]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027ba:	4610      	mov	r0, r2
 80027bc:	2100      	movs	r1, #0
 80027be:	461a      	mov	r2, r3
 80027c0:	f7fe fbd6 	bl	8000f70 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	4618      	mov	r0, r3
 80027ca:	2100      	movs	r1, #0
 80027cc:	f7ff ff2c 	bl	8002628 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fee3 	bl	80025a0 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d004      	beq.n	80027f6 <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fec9 	bl	8002588 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002810:	4610      	mov	r0, r2
 8002812:	4619      	mov	r1, r3
 8002814:	f7ff fed0 	bl	80025b8 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	4618      	mov	r0, r3
 800281e:	2100      	movs	r1, #0
 8002820:	f7ff fed8 	bl	80025d4 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	4610      	mov	r0, r2
 8002830:	4619      	mov	r1, r3
 8002832:	f7ff fedd 	bl	80025f0 <XMC_CCU4_EnableShadowTransfer>
}
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002840:	4b04      	ldr	r3, [pc, #16]	; (8002854 <NVIC_GetPriorityGrouping+0x18>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002848:	0a1b      	lsrs	r3, r3, #8
}
 800284a:	4618      	mov	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	6039      	str	r1, [r7, #0]
 8002862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002868:	2b00      	cmp	r3, #0
 800286a:	da0b      	bge.n	8002884 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286c:	490d      	ldr	r1, [pc, #52]	; (80028a4 <NVIC_SetPriority+0x4c>)
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	f003 030f 	and.w	r3, r3, #15
 8002874:	3b04      	subs	r3, #4
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	0092      	lsls	r2, r2, #2
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	440b      	add	r3, r1
 8002880:	761a      	strb	r2, [r3, #24]
 8002882:	e009      	b.n	8002898 <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002884:	4908      	ldr	r1, [pc, #32]	; (80028a8 <NVIC_SetPriority+0x50>)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	0092      	lsls	r2, r2, #2
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	440b      	add	r3, r1
 8002894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000ed00 	.word	0xe000ed00
 80028a8:	e000e100 	.word	0xe000e100

080028ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b089      	sub	sp, #36	; 0x24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f1c3 0307 	rsb	r3, r3, #7
 80028c6:	2b06      	cmp	r3, #6
 80028c8:	bf28      	it	cs
 80028ca:	2306      	movcs	r3, #6
 80028cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3306      	adds	r3, #6
 80028d2:	2b06      	cmp	r3, #6
 80028d4:	d902      	bls.n	80028dc <NVIC_EncodePriority+0x30>
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3b01      	subs	r3, #1
 80028da:	e000      	b.n	80028de <NVIC_EncodePriority+0x32>
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2201      	movs	r2, #1
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	1e5a      	subs	r2, r3, #1
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	401a      	ands	r2, r3
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2101      	movs	r1, #1
 80028f6:	fa01 f303 	lsl.w	r3, r1, r3
 80028fa:	1e59      	subs	r1, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002900:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002902:	4618      	mov	r0, r3
 8002904:	3724      	adds	r7, #36	; 0x24
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop

08002910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3b01      	subs	r3, #1
 800291c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002920:	d301      	bcc.n	8002926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002922:	2301      	movs	r3, #1
 8002924:	e00f      	b.n	8002946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002926:	4a0a      	ldr	r2, [pc, #40]	; (8002950 <SysTick_Config+0x40>)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3b01      	subs	r3, #1
 800292c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800292e:	f04f 30ff 	mov.w	r0, #4294967295
 8002932:	213f      	movs	r1, #63	; 0x3f
 8002934:	f7ff ff90 	bl	8002858 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <SysTick_Config+0x40>)
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800293e:	4b04      	ldr	r3, [pc, #16]	; (8002950 <SysTick_Config+0x40>)
 8002940:	2207      	movs	r2, #7
 8002942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	e000e010 	.word	0xe000e010

08002954 <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
 8002954:	b490      	push	{r4, r7}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
 800295c:	2300      	movs	r3, #0
 800295e:	73fb      	strb	r3, [r7, #15]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
 8002960:	496b      	ldr	r1, [pc, #428]	; (8002b10 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	3318      	adds	r3, #24
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
 8002974:	4b67      	ldr	r3, [pc, #412]	; (8002b14 <SYSTIMER_lInsertTimerList+0x1c0>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d109      	bne.n	8002990 <SYSTIMER_lInsertTimerList+0x3c>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4a62      	ldr	r2, [pc, #392]	; (8002b10 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002988:	4413      	add	r3, r2
 800298a:	4a62      	ldr	r2, [pc, #392]	; (8002b14 <SYSTIMER_lInsertTimerList+0x1c0>)
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	e0bb      	b.n	8002b08 <SYSTIMER_lInsertTimerList+0x1b4>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
 8002990:	4b60      	ldr	r3, [pc, #384]	; (8002b14 <SYSTIMER_lInsertTimerList+0x1c0>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 800299a:	e0ab      	b.n	8002af4 <SYSTIMER_lInsertTimerList+0x1a0>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	461a      	mov	r2, r3
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	dc7a      	bgt.n	8002aa4 <SYSTIMER_lInsertTimerList+0x150>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d026      	beq.n	8002a04 <SYSTIMER_lInsertTimerList+0xb0>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	6859      	ldr	r1, [r3, #4]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4a52      	ldr	r2, [pc, #328]	; (8002b10 <SYSTIMER_lInsertTimerList+0x1bc>)
 80029c6:	4413      	add	r3, r2
 80029c8:	600b      	str	r3, [r1, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	6859      	ldr	r1, [r3, #4]
 80029ce:	4850      	ldr	r0, [pc, #320]	; (8002b10 <SYSTIMER_lInsertTimerList+0x1bc>)
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4403      	add	r3, r0
 80029dc:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
 80029de:	494c      	ldr	r1, [pc, #304]	; (8002b10 <SYSTIMER_lInsertTimerList+0x1bc>)
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	601a      	str	r2, [r3, #0]
          object_ptr->prev = &g_timer_tbl[tbl_index];
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4413      	add	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4a45      	ldr	r2, [pc, #276]	; (8002b10 <SYSTIMER_lInsertTimerList+0x1bc>)
 80029fc:	441a      	add	r2, r3
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	e01c      	b.n	8002a3e <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
 8002a04:	4b43      	ldr	r3, [pc, #268]	; (8002b14 <SYSTIMER_lInsertTimerList+0x1c0>)
 8002a06:	6819      	ldr	r1, [r3, #0]
 8002a08:	4841      	ldr	r0, [pc, #260]	; (8002b10 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4403      	add	r3, r0
 8002a16:	6019      	str	r1, [r3, #0]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
 8002a18:	4b3e      	ldr	r3, [pc, #248]	; (8002b14 <SYSTIMER_lInsertTimerList+0x1c0>)
 8002a1a:	6819      	ldr	r1, [r3, #0]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4a3a      	ldr	r2, [pc, #232]	; (8002b10 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002a28:	4413      	add	r3, r2
 8002a2a:	604b      	str	r3, [r1, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4a36      	ldr	r2, [pc, #216]	; (8002b10 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002a38:	4413      	add	r3, r2
 8002a3a:	4a36      	ldr	r2, [pc, #216]	; (8002b14 <SYSTIMER_lInsertTimerList+0x1c0>)
 8002a3c:	6013      	str	r3, [r2, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
 8002a3e:	4934      	ldr	r1, [pc, #208]	; (8002b10 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4413      	add	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	699a      	ldr	r2, [r3, #24]
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	18d1      	adds	r1, r2, r3
 8002a54:	482e      	ldr	r0, [pc, #184]	; (8002b10 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4403      	add	r3, r0
 8002a62:	3318      	adds	r3, #24
 8002a64:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
 8002a66:	492a      	ldr	r1, [pc, #168]	; (8002b10 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	440b      	add	r3, r1
 8002a74:	6819      	ldr	r1, [r3, #0]
 8002a76:	4826      	ldr	r0, [pc, #152]	; (8002b10 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4413      	add	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4403      	add	r3, r0
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6998      	ldr	r0, [r3, #24]
 8002a88:	4c21      	ldr	r4, [pc, #132]	; (8002b10 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4413      	add	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4423      	add	r3, r4
 8002a96:	3318      	adds	r3, #24
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	1ac3      	subs	r3, r0, r3
 8002a9c:	618b      	str	r3, [r1, #24]
        found_flag = true;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
 8002aa2:	e024      	b.n	8002aee <SYSTIMER_lInsertTimerList+0x19a>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	dd21      	ble.n	8002aee <SYSTIMER_lInsertTimerList+0x19a>
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d11d      	bne.n	8002aee <SYSTIMER_lInsertTimerList+0x19a>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
 8002ab2:	4917      	ldr	r1, [pc, #92]	; (8002b10 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	4413      	add	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4a10      	ldr	r2, [pc, #64]	; (8002b10 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002ad0:	441a      	add	r2, r3
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
 8002ad6:	6939      	ldr	r1, [r7, #16]
 8002ad8:	480d      	ldr	r0, [pc, #52]	; (8002b10 <SYSTIMER_lInsertTimerList+0x1bc>)
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4403      	add	r3, r0
 8002ae6:	3318      	adds	r3, #24
 8002ae8:	6019      	str	r1, [r3, #0]
          found_flag = true;
 8002aea:	2301      	movs	r3, #1
 8002aec:	73fb      	strb	r3, [r7, #15]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d006      	beq.n	8002b08 <SYSTIMER_lInsertTimerList+0x1b4>
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	f083 0301 	eor.w	r3, r3, #1
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f47f af4a 	bne.w	800299c <SYSTIMER_lInsertTimerList+0x48>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc90      	pop	{r4, r7}
 8002b0e:	4770      	bx	lr
 8002b10:	1ffef0fc 	.word	0x1ffef0fc
 8002b14:	1ffe8b14 	.word	0x1ffe8b14

08002b18 <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4a29      	ldr	r2, [pc, #164]	; (8002bd0 <SYSTIMER_lRemoveTimerList+0xb8>)
 8002b2c:	4413      	add	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d107      	bne.n	8002b48 <SYSTIMER_lRemoveTimerList+0x30>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d103      	bne.n	8002b48 <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
 8002b40:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <SYSTIMER_lRemoveTimerList+0xbc>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	e03d      	b.n	8002bc4 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d114      	bne.n	8002b7a <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a1f      	ldr	r2, [pc, #124]	; (8002bd4 <SYSTIMER_lRemoveTimerList+0xbc>)
 8002b56:	6013      	str	r3, [r2, #0]
    g_timer_list->prev = NULL;
 8002b58:	4b1e      	ldr	r3, [pc, #120]	; (8002bd4 <SYSTIMER_lRemoveTimerList+0xbc>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
 8002b60:	4b1c      	ldr	r3, [pc, #112]	; (8002bd4 <SYSTIMER_lRemoveTimerList+0xbc>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a1b      	ldr	r2, [pc, #108]	; (8002bd4 <SYSTIMER_lRemoveTimerList+0xbc>)
 8002b66:	6812      	ldr	r2, [r2, #0]
 8002b68:	6991      	ldr	r1, [r2, #24]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	6992      	ldr	r2, [r2, #24]
 8002b6e:	440a      	add	r2, r1
 8002b70:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	e024      	b.n	8002bc4 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d107      	bne.n	8002b92 <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	e018      	b.n	8002bc4 <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	6852      	ldr	r2, [r2, #4]
 8002ba4:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	6812      	ldr	r2, [r2, #0]
 8002bae:	6991      	ldr	r1, [r2, #24]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	6992      	ldr	r2, [r2, #24]
 8002bb4:	440a      	add	r2, r1
 8002bb6:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	605a      	str	r2, [r3, #4]
  }
}
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	1ffef0fc 	.word	0x1ffef0fc
 8002bd4:	1ffe8b14 	.word	0x1ffe8b14

08002bd8 <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
 8002bde:	4b2f      	ldr	r3, [pc, #188]	; (8002c9c <SYSTIMER_lTimerHandler+0xc4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8002be4:	e050      	b.n	8002c88 <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d013      	beq.n	8002c18 <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ff8f 	bl	8002b18 <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	461a      	mov	r2, r3
 8002c06:	2301      	movs	r3, #1
 8002c08:	4093      	lsls	r3, r2
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <SYSTIMER_lTimerHandler+0xc8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4013      	ands	r3, r2
 8002c12:	4a23      	ldr	r2, [pc, #140]	; (8002ca0 <SYSTIMER_lTimerHandler+0xc8>)
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e034      	b.n	8002c82 <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	7b1b      	ldrb	r3, [r3, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d112      	bne.n	8002c46 <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	7b5b      	ldrb	r3, [r3, #13]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d12c      	bne.n	8002c82 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff ff73 	bl	8002b18 <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2202      	movs	r2, #2
 8002c36:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6912      	ldr	r2, [r2, #16]
 8002c40:	4610      	mov	r0, r2
 8002c42:	4798      	blx	r3
 8002c44:	e01d      	b.n	8002c82 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7b1b      	ldrb	r3, [r3, #12]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d118      	bne.n	8002c80 <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	7b5b      	ldrb	r3, [r3, #13]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d115      	bne.n	8002c82 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff ff5c 	bl	8002b18 <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69da      	ldr	r2, [r3, #28]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fe71 	bl	8002954 <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6912      	ldr	r2, [r2, #16]
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4798      	blx	r3
 8002c7e:	e000      	b.n	8002c82 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
 8002c80:	e009      	b.n	8002c96 <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
 8002c82:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <SYSTIMER_lTimerHandler+0xc4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <SYSTIMER_lTimerHandler+0xbe>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0a7      	beq.n	8002be6 <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	1ffe8b14 	.word	0x1ffe8b14
 8002ca0:	1ffe8b18 	.word	0x1ffe8b18

08002ca4 <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
 8002caa:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <SysTick_Handler+0x40>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	607b      	str	r3, [r7, #4]
  g_systick_count++;
 8002cb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <SysTick_Handler+0x44>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	4a0c      	ldr	r2, [pc, #48]	; (8002ce8 <SysTick_Handler+0x44>)
 8002cb8:	6013      	str	r3, [r2, #0]

  if (NULL != object_ptr)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00e      	beq.n	8002cde <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d905      	bls.n	8002cd4 <SysTick_Handler+0x30>
    {
      object_ptr->count--;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	1e5a      	subs	r2, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	619a      	str	r2, [r3, #24]
 8002cd2:	e004      	b.n	8002cde <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
 8002cda:	f7ff ff7d 	bl	8002bd8 <SYSTIMER_lTimerHandler>
    }
  }
}
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	1ffe8b14 	.word	0x1ffe8b14
 8002ce8:	1ffe8b1c 	.word	0x1ffe8b1c

08002cec <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	f083 0301 	eor.w	r3, r3, #1
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d021      	beq.n	8002d4a <SYSTIMER_Init+0x5e>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
 8002d06:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <SYSTIMER_Init+0x68>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
 8002d0c:	f44f 60b4 	mov.w	r0, #1440	; 0x5a0
 8002d10:	f7ff fdfe 	bl	8002910 <SysTick_Config>
 8002d14:	4603      	mov	r3, r0
 8002d16:	73fb      	strb	r3, [r7, #15]

    if (SYSTIMER_STATUS_FAILURE == status)
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d015      	beq.n	8002d4a <SYSTIMER_Init+0x5e>
    }
    else
    {
#if (UC_FAMILY == XMC4)
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
 8002d1e:	f7ff fd8d 	bl	800283c <NVIC_GetPriorityGrouping>
 8002d22:	4603      	mov	r3, r0
 8002d24:	4618      	mov	r0, r3
 8002d26:	213f      	movs	r1, #63	; 0x3f
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f7ff fdbf 	bl	80028ac <NVIC_EncodePriority>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	f04f 30ff 	mov.w	r0, #4294967295
 8002d34:	4619      	mov	r1, r3
 8002d36:	f7ff fd8f 	bl	8002858 <NVIC_SetPriority>
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
#endif      
      g_timer_tracker = 0U;
 8002d3a:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <SYSTIMER_Init+0x6c>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
 8002d46:	2300      	movs	r3, #0
 8002d48:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	1ffe8b14 	.word	0x1ffe8b14
 8002d58:	1ffe8b18 	.word	0x1ffe8b18

08002d5c <SYSTIMER_CreateTimer>:
  uint32_t period,
  SYSTIMER_MODE_t mode,
  SYSTIMER_CALLBACK_t callback,
  void  *args
)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b089      	sub	sp, #36	; 0x24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	607a      	str	r2, [r7, #4]
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	72fb      	strb	r3, [r7, #11]
  uint32_t id = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61fb      	str	r3, [r7, #28]
  uint32_t count = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	61bb      	str	r3, [r7, #24]
  uint32_t period_ratio = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
            ((period >= SYSTIMER_TICK_PERIOD_US) && (period > 0U) && (period <= 0xFFFFFFFFU)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Timer creation failure due to invalid timer mode",
            ((SYSTIMER_MODE_ONE_SHOT == mode) || (SYSTIMER_MODE_PERIODIC == mode)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Can not create software without user callback", (NULL != callback));
  
  if (period < SYSTIMER_TICK_PERIOD_US)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b09      	cmp	r3, #9
 8002d7c:	d802      	bhi.n	8002d84 <SYSTIMER_CreateTimer+0x28>
  {
    id = 0U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
 8002d82:	e07b      	b.n	8002e7c <SYSTIMER_CreateTimer+0x120>
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8002d84:	2300      	movs	r3, #0
 8002d86:	61bb      	str	r3, [r7, #24]
 8002d88:	e075      	b.n	8002e76 <SYSTIMER_CreateTimer+0x11a>
    {
      /* Check for free timer ID */
      if (0U == (g_timer_tracker & (1U << count)))
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	409a      	lsls	r2, r3
 8002d90:	4b3e      	ldr	r3, [pc, #248]	; (8002e8c <SYSTIMER_CreateTimer+0x130>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d16a      	bne.n	8002e70 <SYSTIMER_CreateTimer+0x114>
      {
        /* If yes, assign ID to this timer */
        g_timer_tracker |= (1U << count);
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	4b3a      	ldr	r3, [pc, #232]	; (8002e8c <SYSTIMER_CreateTimer+0x130>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	4a39      	ldr	r2, [pc, #228]	; (8002e8c <SYSTIMER_CreateTimer+0x130>)
 8002da8:	6013      	str	r3, [r2, #0]
        /* Initialize the timer as per input values */
        g_timer_tbl[count].id     = count;
 8002daa:	4939      	ldr	r1, [pc, #228]	; (8002e90 <SYSTIMER_CreateTimer+0x134>)
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4613      	mov	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4413      	add	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	3310      	adds	r3, #16
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].mode   = mode;
 8002dbe:	4934      	ldr	r1, [pc, #208]	; (8002e90 <SYSTIMER_CreateTimer+0x134>)
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	3308      	adds	r3, #8
 8002dce:	7afa      	ldrb	r2, [r7, #11]
 8002dd0:	711a      	strb	r2, [r3, #4]
        g_timer_tbl[count].state  = SYSTIMER_STATE_STOPPED;
 8002dd2:	492f      	ldr	r1, [pc, #188]	; (8002e90 <SYSTIMER_CreateTimer+0x134>)
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	3308      	adds	r3, #8
 8002de2:	2202      	movs	r2, #2
 8002de4:	715a      	strb	r2, [r3, #5]
        period_ratio = (uint32_t)(period / SYSTIMER_TICK_PERIOD_US);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4a2a      	ldr	r2, [pc, #168]	; (8002e94 <SYSTIMER_CreateTimer+0x138>)
 8002dea:	fba2 2303 	umull	r2, r3, r2, r3
 8002dee:	08db      	lsrs	r3, r3, #3
 8002df0:	617b      	str	r3, [r7, #20]
        g_timer_tbl[count].count  = (period_ratio + HW_TIMER_ADDITIONAL_CNT);
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	1c59      	adds	r1, r3, #1
 8002df6:	4826      	ldr	r0, [pc, #152]	; (8002e90 <SYSTIMER_CreateTimer+0x134>)
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4403      	add	r3, r0
 8002e04:	3318      	adds	r3, #24
 8002e06:	6019      	str	r1, [r3, #0]
        g_timer_tbl[count].reload  = period_ratio;
 8002e08:	4921      	ldr	r1, [pc, #132]	; (8002e90 <SYSTIMER_CreateTimer+0x134>)
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	3318      	adds	r3, #24
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].callback = callback;
 8002e1c:	491c      	ldr	r1, [pc, #112]	; (8002e90 <SYSTIMER_CreateTimer+0x134>)
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4613      	mov	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	3308      	adds	r3, #8
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].args = args;
 8002e30:	4917      	ldr	r1, [pc, #92]	; (8002e90 <SYSTIMER_CreateTimer+0x134>)
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4613      	mov	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	3310      	adds	r3, #16
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].prev   = NULL;
 8002e44:	4912      	ldr	r1, [pc, #72]	; (8002e90 <SYSTIMER_CreateTimer+0x134>)
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	2200      	movs	r2, #0
 8002e54:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].next   = NULL;
 8002e56:	490e      	ldr	r1, [pc, #56]	; (8002e90 <SYSTIMER_CreateTimer+0x134>)
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	4413      	add	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	440b      	add	r3, r1
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
        id = count + 1U;
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	61fb      	str	r3, [r7, #28]
        break;
 8002e6e:	e005      	b.n	8002e7c <SYSTIMER_CreateTimer+0x120>
  {
    id = 0U;
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	3301      	adds	r3, #1
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d086      	beq.n	8002d8a <SYSTIMER_CreateTimer+0x2e>
      }
    }

  }
  
  return (id);
 8002e7c:	69fb      	ldr	r3, [r7, #28]
}  
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3724      	adds	r7, #36	; 0x24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	1ffe8b18 	.word	0x1ffe8b18
 8002e90:	1ffef0fc 	.word	0x1ffef0fc
 8002e94:	cccccccd 	.word	0xcccccccd

08002e98 <SYSTIMER_StartTimer>:

/*
 *  API to start the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StartTimer(uint32_t id)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_FAILURE;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_StartTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StartTimer: Error during start of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));
  
  /* Check if timer is running */
  if (SYSTIMER_STATE_STOPPED == g_timer_tbl[id - 1U].state)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	1e5a      	subs	r2, r3, #1
 8002ea8:	491a      	ldr	r1, [pc, #104]	; (8002f14 <SYSTIMER_StartTimer+0x7c>)
 8002eaa:	4613      	mov	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	3308      	adds	r3, #8
 8002eb6:	795b      	ldrb	r3, [r3, #5]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d126      	bne.n	8002f0a <SYSTIMER_StartTimer+0x72>
  {
    g_timer_tbl[id - 1U].count = (g_timer_tbl[id - 1U].reload + HW_TIMER_ADDITIONAL_CNT);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	1e5a      	subs	r2, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	1e59      	subs	r1, r3, #1
 8002ec4:	4813      	ldr	r0, [pc, #76]	; (8002f14 <SYSTIMER_StartTimer+0x7c>)
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	440b      	add	r3, r1
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4403      	add	r3, r0
 8002ed0:	3318      	adds	r3, #24
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	1c59      	adds	r1, r3, #1
 8002ed6:	480f      	ldr	r0, [pc, #60]	; (8002f14 <SYSTIMER_StartTimer+0x7c>)
 8002ed8:	4613      	mov	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4403      	add	r3, r0
 8002ee2:	3318      	adds	r3, #24
 8002ee4:	6019      	str	r1, [r3, #0]
    /* set timer status as SYSTIMER_STATE_RUNNING */
    g_timer_tbl[id - 1U].state = SYSTIMER_STATE_RUNNING;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	1e5a      	subs	r2, r3, #1
 8002eea:	490a      	ldr	r1, [pc, #40]	; (8002f14 <SYSTIMER_StartTimer+0x7c>)
 8002eec:	4613      	mov	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	3308      	adds	r3, #8
 8002ef8:	2201      	movs	r2, #1
 8002efa:	715a      	strb	r2, [r3, #5]
    /* Insert this timer into timer list */
    SYSTIMER_lInsertTimerList((id - 1U));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff fd27 	bl	8002954 <SYSTIMER_lInsertTimerList>
    status = SYSTIMER_STATUS_SUCCESS;
 8002f06:	2300      	movs	r3, #0
 8002f08:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	1ffef0fc 	.word	0x1ffef0fc

08002f18 <SYSTIMER_GetTickCount>:

/*
 *  API to get the SysTick count.
 */
uint32_t SYSTIMER_GetTickCount(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  return (g_systick_count);
 8002f1c:	4b03      	ldr	r3, [pc, #12]	; (8002f2c <SYSTIMER_GetTickCount+0x14>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	1ffe8b1c 	.word	0x1ffe8b1c

08002f30 <XMC_SPI_CH_SetTransmitMode>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	019b      	lsls	r3, r3, #6
 8002f48:	b2db      	uxtb	r3, r3
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40
                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
}
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop

08002f5c <XMC_DMA_CH_Enable>:
 * The function sets the GPDMA's CHENREG register to enable a DMA channel. Please
 * ensure that the GPDMA module itself is enabled before calling this function.
 * See ::XMC_DMA_Enable() for details.
 */
__STATIC_INLINE void XMC_DMA_CH_Enable(XMC_DMA_t *const dma, const uint8_t channel)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	70fb      	strb	r3, [r7, #3]
  dma->CHENREG = (uint32_t)(0x101UL << channel);   
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	f240 1201 	movw	r2, #257	; 0x101
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <XMC_DMA_CH_SetSourceAddress>:
 *
 * \par<b>Related API: </b><br>
 * ::XMC_DMA_CH_SetDestinationAddress() <br>
 */
__STATIC_INLINE void XMC_DMA_CH_SetSourceAddress(XMC_DMA_t *const dma, const uint8_t channel, uint32_t addr)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	72fb      	strb	r3, [r7, #11]
  dma->CH[channel].SAR = addr;
 8002f8e:	7afb      	ldrb	r3, [r7, #11]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	2158      	movs	r1, #88	; 0x58
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	4413      	add	r3, r2
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	601a      	str	r2, [r3, #0]
}
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <XMC_DMA_CH_SetDestinationAddress>:
 *
 * \par<b>Related API: </b><br>
 * ::XMC_DMA_CH_SetSourceAddress() <br>
 */
__STATIC_INLINE void XMC_DMA_CH_SetDestinationAddress(XMC_DMA_t *const dma, const uint8_t channel, uint32_t addr)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	607a      	str	r2, [r7, #4]
 8002fb4:	72fb      	strb	r3, [r7, #11]
  dma->CH[channel].DAR = addr;
 8002fb6:	7afb      	ldrb	r3, [r7, #11]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	2158      	movs	r1, #88	; 0x58
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3308      	adds	r3, #8
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	601a      	str	r2, [r3, #0]
}
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop

08002fd4 <XMC_DMA_CH_SetBlockSize>:
 * The function may be called after enabling the DMA channel. Please
 * see ::XMC_DMA_CH_Enable() for more information.
 *
 */
__STATIC_INLINE void XMC_DMA_CH_SetBlockSize(XMC_DMA_t *const dma, const uint8_t channel, uint32_t block_size)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	72fb      	strb	r3, [r7, #11]
  dma->CH[channel].CTLH = block_size;
 8002fe2:	7afb      	ldrb	r3, [r7, #11]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	2158      	movs	r1, #88	; 0x58
 8002fe8:	fb01 f303 	mul.w	r3, r1, r3
 8002fec:	4413      	add	r3, r2
 8002fee:	3318      	adds	r3, #24
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	605a      	str	r2, [r3, #4]
}
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop

08003000 <SPI_MASTER_Init>:

/*
 * This function initializes the SPI channel, based on UI configuration.
 */
SPI_MASTER_STATUS_t SPI_MASTER_Init(SPI_MASTER_t* const handle)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t status;

  XMC_ASSERT("SPI_MASTER_Init:handle NULL" , (handle != NULL));

  /* Configure the port registers and data input registers of SPI channel */
  status = handle->config->fptr_spi_master_config();
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	4798      	blx	r3
 8003010:	4603      	mov	r3, r0
 8003012:	73fb      	strb	r3, [r7, #15]

  return status;
 8003014:	7bfb      	ldrb	r3, [r7, #15]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop

08003020 <SPI_MASTER_Transmit>:

  return status;
}

SPI_MASTER_STATUS_t SPI_MASTER_Transmit(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  
   status = SPI_MASTER_STATUS_FAILURE;
 800302c:	2301      	movs	r3, #1
 800302e:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_StartTransmitIRQ(handle, dataptr, count);
  }
#endif

#if (SPI_MASTER_DMA_TRANSMIT_MODE == 1U)
  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003038:	2b01      	cmp	r3, #1
 800303a:	d106      	bne.n	800304a <SPI_MASTER_Transmit+0x2a>
  {
    status = SPI_MASTER_StartTransmitDMA(handle, dataptr, count);
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	68b9      	ldr	r1, [r7, #8]
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	f000 f821 	bl	8003088 <SPI_MASTER_StartTransmitDMA>
 8003046:	4603      	mov	r3, r0
 8003048:	75fb      	strb	r3, [r7, #23]
  {
    status = SPI_MASTER_lStartTransmitPolling(handle, dataptr, count);
  }
#endif

  return status;
 800304a:	7dfb      	ldrb	r3, [r7, #23]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <SPI_MASTER_Receive>:

SPI_MASTER_STATUS_t SPI_MASTER_Receive(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;

  status = SPI_MASTER_STATUS_FAILURE;
 8003060:	2301      	movs	r3, #1
 8003062:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_StartReceiveIRQ(handle, dataptr, count);
  }
#endif

#if (SPI_MASTER_DMA_RECEIVE_MODE == 1U)
  if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800306c:	2b01      	cmp	r3, #1
 800306e:	d106      	bne.n	800307e <SPI_MASTER_Receive+0x2a>
  {
    status = SPI_MASTER_StartReceiveDMA(handle, dataptr, count);
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	68b9      	ldr	r1, [r7, #8]
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	f000 f8db 	bl	8003230 <SPI_MASTER_StartReceiveDMA>
 800307a:	4603      	mov	r3, r0
 800307c:	75fb      	strb	r3, [r7, #23]
  {
    status = SPI_MASTER_lStartReceivePolling(handle, dataptr, count);
  }
#endif

  return status;
 800307e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <SPI_MASTER_StartTransmitDMA>:
}
#endif

#if(SPI_MASTER_DMA_TRANSMIT_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_StartTransmitDMA(const SPI_MASTER_t *const handle, uint8_t *data_ptr, uint32_t block_size)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  uint32_t dma_ctll;
  uint32_t mode;

  XMC_ASSERT("SPI_MASTER_StartTransmitDMA:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_MODE_MISMATCH;
 8003094:	2304      	movs	r3, #4
 8003096:	77fb      	strb	r3, [r7, #31]
  runtime_handle = handle->runtime;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	617b      	str	r3, [r7, #20]

  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	f040 80bc 	bne.w	8003224 <SPI_MASTER_StartTransmitDMA+0x19c>
  {
    /* Check whether SPI channel is free or not */
    if (false == runtime_handle->tx_busy)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	f083 0301 	eor.w	r3, r3, #1
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 80b0 	beq.w	8003220 <SPI_MASTER_StartTransmitDMA+0x198>
    {
      /* Check data pointer is valid or not */
      if ((data_ptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 80a9 	beq.w	800321a <SPI_MASTER_StartTransmitDMA+0x192>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 80a5 	beq.w	800321a <SPI_MASTER_StartTransmitDMA+0x192>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d6:	f080 80a0 	bcs.w	800321a <SPI_MASTER_StartTransmitDMA+0x192>
      {
        /* Obtain the address of data, size of data */
        runtime_handle->tx_data_count = block_size;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	605a      	str	r2, [r3, #4]
        /* Initialize to first index and set the busy flag */
        runtime_handle->tx_data_index = 0U;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2200      	movs	r2, #0
 80030e4:	609a      	str	r2, [r3, #8]
        runtime_handle->tx_busy = true;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2020 	strb.w	r2, [r3, #32]

        if (runtime_handle->tx_data_dummy == true)
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d029      	beq.n	800314e <SPI_MASTER_StartTransmitDMA+0xc6>
        {
          dma_ctll = (uint32_t)handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	7f5b      	ldrb	r3, [r3, #29]
 8003104:	4619      	mov	r1, r3
 8003106:	2358      	movs	r3, #88	; 0x58
 8003108:	fb03 f301 	mul.w	r3, r3, r1
 800310c:	4413      	add	r3, r2
 800310e:	3318      	adds	r3, #24
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	613b      	str	r3, [r7, #16]

          dma_ctll = (uint32_t)(dma_ctll & (uint32_t)(~(GPDMA0_CH_CTLL_SINC_Msk))) |
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800311a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800311e:	613b      	str	r3, [r7, #16]
                               ((uint32_t)XMC_DMA_CH_ADDRESS_COUNT_MODE_NO_CHANGE << GPDMA0_CH_CTLL_SINC_Pos);

          handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL = dma_ctll;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	7f5b      	ldrb	r3, [r3, #29]
 800312a:	4619      	mov	r1, r3
 800312c:	2358      	movs	r3, #88	; 0x58
 800312e:	fb03 f301 	mul.w	r3, r3, r1
 8003132:	4413      	add	r3, r2
 8003134:	3318      	adds	r3, #24
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	601a      	str	r2, [r3, #0]
          mode = (uint32_t)((uint32_t)handle->runtime->spi_master_mode & 0xfffbU);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	7f1b      	ldrb	r3, [r3, #28]
 8003140:	b2db      	uxtb	r3, r3
 8003142:	461a      	mov	r2, r3
 8003144:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
 800314c:	e025      	b.n	800319a <SPI_MASTER_StartTransmitDMA+0x112>
        }
        else
        {
          runtime_handle->tx_data = data_ptr;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	619a      	str	r2, [r3, #24]
          dma_ctll = handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	7f5b      	ldrb	r3, [r3, #29]
 800315e:	4619      	mov	r1, r3
 8003160:	2358      	movs	r3, #88	; 0x58
 8003162:	fb03 f301 	mul.w	r3, r3, r1
 8003166:	4413      	add	r3, r2
 8003168:	3318      	adds	r3, #24
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	613b      	str	r3, [r7, #16]

          dma_ctll = (uint32_t)(dma_ctll & (~GPDMA0_CH_CTLL_SINC_Msk)) |
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003174:	613b      	str	r3, [r7, #16]
                               ((uint32_t)XMC_DMA_CH_ADDRESS_COUNT_MODE_INCREMENT << GPDMA0_CH_CTLL_SINC_Pos);

          handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL = dma_ctll;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	7f5b      	ldrb	r3, [r3, #29]
 8003180:	4619      	mov	r1, r3
 8003182:	2358      	movs	r3, #88	; 0x58
 8003184:	fb03 f301 	mul.w	r3, r3, r1
 8003188:	4413      	add	r3, r2
 800318a:	3318      	adds	r3, #24
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	601a      	str	r2, [r3, #0]
          mode = (uint32_t)handle->runtime->spi_master_mode;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	7f1b      	ldrb	r3, [r3, #28]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	61bb      	str	r3, [r7, #24]
        }

        /* Enable transmit event generation */
        XMC_SPI_CH_EnableEvent(handle->channel, (uint32_t)XMC_SPI_CH_EVENT_RECEIVE_START);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031a4:	f7ff f860 	bl	8002268 <XMC_SPI_CH_EnableEvent>

        XMC_DMA_CH_SetBlockSize(handle->global_dma->dma, handle->dma_ch_tx_number, block_size);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	7f5b      	ldrb	r3, [r3, #29]
 80031b2:	4610      	mov	r0, r2
 80031b4:	4619      	mov	r1, r3
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	f7ff ff0c 	bl	8002fd4 <XMC_DMA_CH_SetBlockSize>

        XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma, handle->dma_ch_tx_number, (uint32_t)runtime_handle->tx_data);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	6819      	ldr	r1, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	7f5a      	ldrb	r2, [r3, #29]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	4608      	mov	r0, r1
 80031cc:	4611      	mov	r1, r2
 80031ce:	461a      	mov	r2, r3
 80031d0:	f7ff fed6 	bl	8002f80 <XMC_DMA_CH_SetSourceAddress>

        XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	7f1b      	ldrb	r3, [r3, #28]
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	4610      	mov	r0, r2
 80031e0:	4619      	mov	r1, r3
 80031e2:	f7ff fea5 	bl	8002f30 <XMC_SPI_CH_SetTransmitMode>

        XMC_DMA_CH_SetDestinationAddress(handle->global_dma->dma,
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	7f59      	ldrb	r1, [r3, #29]
                                         handle->dma_ch_tx_number,
                                         (uint32_t)&(handle->channel->TBUF[mode]));
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	3320      	adds	r3, #32
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2

        XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma, handle->dma_ch_tx_number, (uint32_t)runtime_handle->tx_data);

        XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);

        XMC_DMA_CH_SetDestinationAddress(handle->global_dma->dma,
 80031fc:	461a      	mov	r2, r3
 80031fe:	f7ff fed3 	bl	8002fa8 <XMC_DMA_CH_SetDestinationAddress>
                                         handle->dma_ch_tx_number,
                                         (uint32_t)&(handle->channel->TBUF[mode]));

        status = SPI_MASTER_STATUS_SUCCESS;
 8003202:	2300      	movs	r3, #0
 8003204:	77fb      	strb	r3, [r7, #31]

        XMC_DMA_CH_Enable(handle->global_dma->dma, handle->dma_ch_tx_number);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	7f5b      	ldrb	r3, [r3, #29]
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	f7ff fea2 	bl	8002f5c <XMC_DMA_CH_Enable>
 8003218:	e004      	b.n	8003224 <SPI_MASTER_StartTransmitDMA+0x19c>
      }
      else
      {
        status = SPI_MASTER_STATUS_BUFFER_INVALID;
 800321a:	2303      	movs	r3, #3
 800321c:	77fb      	strb	r3, [r7, #31]
 800321e:	e001      	b.n	8003224 <SPI_MASTER_StartTransmitDMA+0x19c>
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUSY;
 8003220:	2302      	movs	r3, #2
 8003222:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 8003224:	7ffb      	ldrb	r3, [r7, #31]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3720      	adds	r7, #32
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop

08003230 <SPI_MASTER_StartReceiveDMA>:
}
#endif

#if(SPI_MASTER_DMA_RECEIVE_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_StartReceiveDMA(const SPI_MASTER_t  *const handle, uint8_t *dataptr, uint32_t block_size)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  static uint8_t dummy_data[2] = {0xFFU, 0xFFU};

  XMC_ASSERT("SPI_MASTER_StartReceiveDMA:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_MODE_MISMATCH;
 800323c:	2304      	movs	r3, #4
 800323e:	75fb      	strb	r3, [r7, #23]
  runtime_handle = handle->runtime;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	613b      	str	r3, [r7, #16]

  if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800324e:	2b01      	cmp	r3, #1
 8003250:	d13c      	bne.n	80032cc <SPI_MASTER_StartReceiveDMA+0x9c>
  {
    status = SPI_MASTER_STATUS_BUSY;
 8003252:	2302      	movs	r3, #2
 8003254:	75fb      	strb	r3, [r7, #23]
    /* Check whether SPI channel is free or not */
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	7fdb      	ldrb	r3, [r3, #31]
 800325a:	b2db      	uxtb	r3, r3
 800325c:	f083 0301 	eor.w	r3, r3, #1
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d030      	beq.n	80032c8 <SPI_MASTER_StartReceiveDMA+0x98>
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	f083 0301 	eor.w	r3, r3, #1
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d027      	beq.n	80032c8 <SPI_MASTER_StartReceiveDMA+0x98>
    {
      /* Check data pointer is valid or not */
      if ((dataptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d021      	beq.n	80032c2 <SPI_MASTER_StartReceiveDMA+0x92>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d01e      	beq.n	80032c2 <SPI_MASTER_StartReceiveDMA+0x92>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800328a:	d21a      	bcs.n	80032c2 <SPI_MASTER_StartReceiveDMA+0x92>
      {
        runtime_handle->rx_busy = true;
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	2201      	movs	r2, #1
 8003290:	77da      	strb	r2, [r3, #31]
        runtime_handle->rx_data = dataptr;
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	615a      	str	r2, [r3, #20]
        runtime_handle->tx_data = &dummy_data[0];
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4a0f      	ldr	r2, [pc, #60]	; (80032d8 <SPI_MASTER_StartReceiveDMA+0xa8>)
 800329c:	619a      	str	r2, [r3, #24]
        runtime_handle->tx_data_count = block_size;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	605a      	str	r2, [r3, #4]
        runtime_handle->tx_data_dummy = true;
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        runtime_handle->rx_data_dummy = false;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        status = SPI_MASTER_lReceiveDMA(handle, block_size);
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	f000 f868 	bl	800338c <SPI_MASTER_lReceiveDMA>
 80032bc:	4603      	mov	r3, r0
 80032be:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_STATUS_BUSY;
    /* Check whether SPI channel is free or not */
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
    {
      /* Check data pointer is valid or not */
      if ((dataptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 80032c0:	e004      	b.n	80032cc <SPI_MASTER_StartReceiveDMA+0x9c>

        status = SPI_MASTER_lReceiveDMA(handle, block_size);
      }
      else
      {
        status = SPI_MASTER_STATUS_BUFFER_INVALID;
 80032c2:	2303      	movs	r3, #3
 80032c4:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_STATUS_BUSY;
    /* Check whether SPI channel is free or not */
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
    {
      /* Check data pointer is valid or not */
      if ((dataptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 80032c6:	e001      	b.n	80032cc <SPI_MASTER_StartReceiveDMA+0x9c>
        status = SPI_MASTER_STATUS_BUFFER_INVALID;
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUSY;
 80032c8:	2302      	movs	r3, #2
 80032ca:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	1ffe8890 	.word	0x1ffe8890

080032dc <SPI_MASTER_Transfer>:
 */
SPI_MASTER_STATUS_t SPI_MASTER_Transfer(const SPI_MASTER_t *const handle,
                                        uint8_t* tx_dataptr,
                                        uint8_t* rx_dataptr,
                                        uint32_t count)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	603b      	str	r3, [r7, #0]
  SPI_MASTER_STATUS_t status;
  SPI_MASTER_RUNTIME_t * runtime_handle;

  XMC_ASSERT("SPI_MASTER_Transfer:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_BUSY;
 80032ea:	2302      	movs	r3, #2
 80032ec:	75fb      	strb	r3, [r7, #23]
  runtime_handle = handle->runtime;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	613b      	str	r3, [r7, #16]

  if (XMC_SPI_CH_MODE_STANDARD == runtime_handle->spi_master_mode)
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	7f1b      	ldrb	r3, [r3, #28]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d13f      	bne.n	800337e <SPI_MASTER_Transfer+0xa2>
  {
    /* Check whether SPI channel is free or not */
    if ((tx_dataptr != NULL) && (rx_dataptr != NULL) && (count > 0U))
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d038      	beq.n	8003376 <SPI_MASTER_Transfer+0x9a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d035      	beq.n	8003376 <SPI_MASTER_Transfer+0x9a>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d032      	beq.n	8003376 <SPI_MASTER_Transfer+0x9a>
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	7fdb      	ldrb	r3, [r3, #31]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	f083 0301 	eor.w	r3, r3, #1
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d029      	beq.n	8003374 <SPI_MASTER_Transfer+0x98>
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003326:	b2db      	uxtb	r3, r3
 8003328:	f083 0301 	eor.w	r3, r3, #1
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d020      	beq.n	8003374 <SPI_MASTER_Transfer+0x98>
      {
        runtime_handle->rx_busy = true;
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	2201      	movs	r2, #1
 8003336:	77da      	strb	r2, [r3, #31]
        runtime_handle->rx_data = rx_dataptr;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	615a      	str	r2, [r3, #20]
        runtime_handle->tx_data = tx_dataptr;
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	619a      	str	r2, [r3, #24]
        runtime_handle->tx_data_count = count;
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	605a      	str	r2, [r3, #4]
        runtime_handle->tx_data_dummy = false;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        runtime_handle->rx_data_dummy = false;
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        {
          status = SPI_MASTER_lReceiveIRQ(handle, count);
        }
#endif
#if (SPI_MASTER_DMA_RECEIVE_MODE == 1U)
        if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8003362:	2b01      	cmp	r3, #1
 8003364:	d106      	bne.n	8003374 <SPI_MASTER_Transfer+0x98>
        {
          status = SPI_MASTER_lReceiveDMA(handle, count);
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	6839      	ldr	r1, [r7, #0]
 800336a:	f000 f80f 	bl	800338c <SPI_MASTER_lReceiveDMA>
 800336e:	4603      	mov	r3, r0
 8003370:	75fb      	strb	r3, [r7, #23]
  {
    /* Check whether SPI channel is free or not */
    if ((tx_dataptr != NULL) && (rx_dataptr != NULL) && (count > 0U))
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8003372:	e003      	b.n	800337c <SPI_MASTER_Transfer+0xa0>
 8003374:	e002      	b.n	800337c <SPI_MASTER_Transfer+0xa0>
#endif
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUFFER_INVALID;
 8003376:	2303      	movs	r3, #3
 8003378:	75fb      	strb	r3, [r7, #23]
 800337a:	e002      	b.n	8003382 <SPI_MASTER_Transfer+0xa6>
 800337c:	e001      	b.n	8003382 <SPI_MASTER_Transfer+0xa6>
    }
  }
  else
  {
    status = SPI_MASTER_STATUS_FAILURE;
 800337e:	2301      	movs	r3, #1
 8003380:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003382:	7dfb      	ldrb	r3, [r7, #23]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <SPI_MASTER_lReceiveDMA>:
}
#endif

#if (SPI_MASTER_DMA_RECEIVE_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_lReceiveDMA(const SPI_MASTER_t *const handle, uint32_t block_size)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  SPI_MASTER_STATUS_t status;
  SPI_MASTER_RUNTIME_t * runtime_handle;

  runtime_handle = handle->runtime;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	60fb      	str	r3, [r7, #12]
  runtime_handle->rx_data_index = 0U;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	611a      	str	r2, [r3, #16]
  runtime_handle->rx_data_count = (uint32_t)block_size;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	60da      	str	r2, [r3, #12]

  SPI_MASTER_lStdRBUFFlush(handle->channel);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 f847 	bl	8003440 <SPI_MASTER_lStdRBUFFlush>

  XMC_SPI_CH_EnableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80033bc:	f7fe ff54 	bl	8002268 <XMC_SPI_CH_EnableEvent>

  XMC_DMA_CH_SetBlockSize(handle->global_dma->dma, handle->dma_ch_rx_number, runtime_handle->rx_data_count);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	6819      	ldr	r1, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	7f1a      	ldrb	r2, [r3, #28]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	4608      	mov	r0, r1
 80033d0:	4611      	mov	r1, r2
 80033d2:	461a      	mov	r2, r3
 80033d4:	f7ff fdfe 	bl	8002fd4 <XMC_DMA_CH_SetBlockSize>

  XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma,
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	6819      	ldr	r1, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	7f1a      	ldrb	r2, [r3, #28]
                              handle->dma_ch_rx_number,
                              (uint32_t)&(handle->channel->RBUF));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3354      	adds	r3, #84	; 0x54

  XMC_SPI_CH_EnableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);

  XMC_DMA_CH_SetBlockSize(handle->global_dma->dma, handle->dma_ch_rx_number, runtime_handle->rx_data_count);

  XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma,
 80033e8:	4608      	mov	r0, r1
 80033ea:	4611      	mov	r1, r2
 80033ec:	461a      	mov	r2, r3
 80033ee:	f7ff fdc7 	bl	8002f80 <XMC_DMA_CH_SetSourceAddress>
                              handle->dma_ch_rx_number,
                              (uint32_t)&(handle->channel->RBUF));

  XMC_DMA_CH_SetDestinationAddress(handle->global_dma->dma, handle->dma_ch_rx_number, (uint32_t)runtime_handle->rx_data);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	6819      	ldr	r1, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	7f1a      	ldrb	r2, [r3, #28]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	4608      	mov	r0, r1
 8003402:	4611      	mov	r1, r2
 8003404:	461a      	mov	r2, r3
 8003406:	f7ff fdcf 	bl	8002fa8 <XMC_DMA_CH_SetDestinationAddress>

  status = SPI_MASTER_STATUS_SUCCESS;
 800340a:	2300      	movs	r3, #0
 800340c:	72fb      	strb	r3, [r7, #11]

  XMC_DMA_CH_Enable(handle->global_dma->dma, handle->dma_ch_rx_number);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	7f1b      	ldrb	r3, [r3, #28]
 8003418:	4610      	mov	r0, r2
 800341a:	4619      	mov	r1, r3
 800341c:	f7ff fd9e 	bl	8002f5c <XMC_DMA_CH_Enable>

  /* Call the transmit, to receive the data synchronously */
  status = SPI_MASTER_Transmit(handle, runtime_handle->tx_data, runtime_handle->tx_data_count);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	699a      	ldr	r2, [r3, #24]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	4611      	mov	r1, r2
 800342c:	461a      	mov	r2, r3
 800342e:	f7ff fdf7 	bl	8003020 <SPI_MASTER_Transmit>
 8003432:	4603      	mov	r3, r0
 8003434:	72fb      	strb	r3, [r7, #11]

  return status;
 8003436:	7afb      	ldrb	r3, [r7, #11]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <SPI_MASTER_lStdRBUFFlush>:

/*
 * Clears the receive buffers
 */
static void SPI_MASTER_lStdRBUFFlush(XMC_USIC_CH_t *const channel)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Clear RBF0 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7fe fef3 	bl	8002234 <XMC_SPI_CH_GetReceivedData>
  /* Clear RBF1 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7fe fef0 	bl	8002234 <XMC_SPI_CH_GetReceivedData>
}
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop

0800345c <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	70fb      	strb	r3, [r7, #3]
 8003468:	4613      	mov	r3, r2
 800346a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 800346c:	78f8      	ldrb	r0, [r7, #3]
 800346e:	78fb      	ldrb	r3, [r7, #3]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	3306      	adds	r3, #6
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 800347e:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8003480:	431a      	orrs	r2, r3
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	1d83      	adds	r3, r0, #6
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop

08003498 <XMC_USIC_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a8:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	061b      	lsls	r3, r3, #24
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	635a      	str	r2, [r3, #52]	; 0x34
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
}
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop

080034c4 <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d4:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
 80034d8:	78fb      	ldrb	r3, [r7, #3]
 80034da:	3b01      	subs	r3, #1
 80034dc:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop

080034f0 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003502:	b2db      	uxtb	r3, r3
}
 8003504:	4618      	mov	r0, r3
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003520:	409a      	lsls	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <XMC_USIC_CH_ConfigureShiftClockOutput>:
 * 
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	f023 4250 	bic.w	r2, r3, #3489660928	; 0xd0000000
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
 8003544:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
 8003546:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	615a      	str	r2, [r3, #20]
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop

0800355c <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	f023 020f 	bic.w	r2, r3, #15
 8003570:	78fb      	ldrb	r3, [r7, #3]
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop

08003584 <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	2101      	movs	r1, #1
 8003590:	f7ff ffe4 	bl	800355c <XMC_USIC_CH_SetMode>
}
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop

0800359c <XMC_SPI_CH_SetBitOrderMsbFirst>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetBitOrderLsbFirst()
 */
__STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a8:	f043 0201 	orr.w	r2, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	635a      	str	r2, [r3, #52]	; 0x34
}
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop

080035bc <XMC_SPI_CH_SetSlaveSelectDelay>:
 * This delay is dependent on the peripheral clock. The maximum possible value supported by this API
 * is 30 clock cycles.
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
								   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	3b01      	subs	r3, #1
 80035d2:	029b      	lsls	r3, r3, #10
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
								   USIC_CH_BRG_PCTQ_Msk)) |
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	615a      	str	r2, [r3, #20]
								   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
}
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <XMC_SPI_CH_DisableFEM>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_EnableFEM()
 */
__STATIC_INLINE void XMC_SPI_CH_DisableFEM(XMC_USIC_CH_t *const channel)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_FEM_Msk;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f4:	f023 0208 	bic.w	r2, r3, #8
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop

08003608 <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	68b9      	ldr	r1, [r7, #8]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	f7ff ff89 	bl	8003530 <XMC_USIC_CH_ConfigureShiftClockOutput>
                                       (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <XMC_SPI_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetFrameLength()
 */
__STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetWordLength(channel, word_length);
 8003630:	78fb      	ldrb	r3, [r7, #3]
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	4619      	mov	r1, r3
 8003636:	f7ff ff2f 	bl	8003498 <XMC_USIC_CH_SetWordLength>
}
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <XMC_SPI_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSelect()
 */
__STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetFrameLength(channel, frame_length);
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	4619      	mov	r1, r3
 8003652:	f7ff ff37 	bl	80034c4 <XMC_USIC_CH_SetFrameLength>
}
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
                                               const XMC_SPI_CH_INPUT_t input,
                                               const uint8_t source)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	70fb      	strb	r3, [r7, #3]
 8003668:	4613      	mov	r3, r2
 800366a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0CR_INSW_Msk;
 800366c:	78f8      	ldrb	r0, [r7, #3]
 800366e:	78fb      	ldrb	r3, [r7, #3]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	3306      	adds	r3, #6
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 800367e:	f043 0210 	orr.w	r2, r3, #16
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	1d83      	adds	r3, r0, #6
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 800368c:	78fa      	ldrb	r2, [r7, #3]
 800368e:	78bb      	ldrb	r3, [r7, #2]
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	4611      	mov	r1, r2
 8003694:	461a      	mov	r2, r3
 8003696:	f7ff fee1 	bl	800345c <XMC_USIC_CH_SetInputSource>
}
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <SPI_MASTER_ADC_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_MASTER_ADC_lInit(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
 80036a6:	2300      	movs	r3, #0
 80036a8:	71fb      	strb	r3, [r7, #7]
  status =  (SPI_MASTER_STATUS_t)GLOBAL_DMA_Init(&GLOBAL_DMA_0);
 80036aa:	4842      	ldr	r0, [pc, #264]	; (80037b4 <SPI_MASTER_ADC_lInit+0x114>)
 80036ac:	f000 fbf2 	bl	8003e94 <GLOBAL_DMA_Init>
 80036b0:	4603      	mov	r3, r0
 80036b2:	71fb      	strb	r3, [r7, #7]
  if (status == SPI_MASTER_STATUS_SUCCESS)
 80036b4:	79fb      	ldrb	r3, [r7, #7]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d176      	bne.n	80037a8 <SPI_MASTER_ADC_lInit+0x108>
  {            
                            
  (void)XMC_DMA_CH_Init(XMC_DMA1, 3U, &SPI_MASTER_ADC_dma_ch_tx_config);
 80036ba:	483f      	ldr	r0, [pc, #252]	; (80037b8 <SPI_MASTER_ADC_lInit+0x118>)
 80036bc:	2103      	movs	r1, #3
 80036be:	4a3f      	ldr	r2, [pc, #252]	; (80037bc <SPI_MASTER_ADC_lInit+0x11c>)
 80036c0:	f7fd fe06 	bl	80012d0 <XMC_DMA_CH_Init>
  /*"Interrupt Settings" configuration for "transmit" and/or "receive"*/
  XMC_DMA_CH_EnableEvent(XMC_DMA1, 3U, (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 80036c4:	483c      	ldr	r0, [pc, #240]	; (80037b8 <SPI_MASTER_ADC_lInit+0x118>)
 80036c6:	2103      	movs	r1, #3
 80036c8:	2201      	movs	r2, #1
 80036ca:	f7fe f807 	bl	80016dc <XMC_DMA_CH_EnableEvent>
  XMC_DMA_CH_SetEventHandler(XMC_DMA1, 3U, SPI_MASTER_ADC_DMA_tx_handler);
 80036ce:	483a      	ldr	r0, [pc, #232]	; (80037b8 <SPI_MASTER_ADC_lInit+0x118>)
 80036d0:	2103      	movs	r1, #3
 80036d2:	4a3b      	ldr	r2, [pc, #236]	; (80037c0 <SPI_MASTER_ADC_lInit+0x120>)
 80036d4:	f7fe f850 	bl	8001778 <XMC_DMA_CH_SetEventHandler>
                             
  (void)XMC_DMA_CH_Init(XMC_DMA1, 2U, &SPI_MASTER_ADC_dma_ch_rx_config);
 80036d8:	4837      	ldr	r0, [pc, #220]	; (80037b8 <SPI_MASTER_ADC_lInit+0x118>)
 80036da:	2102      	movs	r1, #2
 80036dc:	4a39      	ldr	r2, [pc, #228]	; (80037c4 <SPI_MASTER_ADC_lInit+0x124>)
 80036de:	f7fd fdf7 	bl	80012d0 <XMC_DMA_CH_Init>
  /*"Interrupt Settings" configuration for "transmit" and/or "receive"*/
  XMC_DMA_CH_EnableEvent(XMC_DMA1, 2U, (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 80036e2:	4835      	ldr	r0, [pc, #212]	; (80037b8 <SPI_MASTER_ADC_lInit+0x118>)
 80036e4:	2102      	movs	r1, #2
 80036e6:	2201      	movs	r2, #1
 80036e8:	f7fd fff8 	bl	80016dc <XMC_DMA_CH_EnableEvent>
  XMC_DMA_CH_SetEventHandler(XMC_DMA1, 2U, SPI_MASTER_ADC_DMA_rx_handler);
 80036ec:	4832      	ldr	r0, [pc, #200]	; (80037b8 <SPI_MASTER_ADC_lInit+0x118>)
 80036ee:	2102      	movs	r1, #2
 80036f0:	4a35      	ldr	r2, [pc, #212]	; (80037c8 <SPI_MASTER_ADC_lInit+0x128>)
 80036f2:	f7fe f841 	bl	8001778 <XMC_DMA_CH_SetEventHandler>
                             
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI2_CH0, &SPI_MASTER_ADC_Channel_Config);
 80036f6:	4835      	ldr	r0, [pc, #212]	; (80037cc <SPI_MASTER_ADC_lInit+0x12c>)
 80036f8:	4935      	ldr	r1, [pc, #212]	; (80037d0 <SPI_MASTER_ADC_lInit+0x130>)
 80036fa:	f7fe fd51 	bl	80021a0 <XMC_SPI_CH_Init>
                             
  XMC_SPI_CH_DisableFEM(XMC_SPI2_CH0);
 80036fe:	4833      	ldr	r0, [pc, #204]	; (80037cc <SPI_MASTER_ADC_lInit+0x12c>)
 8003700:	f7ff ff72 	bl	80035e8 <XMC_SPI_CH_DisableFEM>
                              
  XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI2_CH0);
 8003704:	4831      	ldr	r0, [pc, #196]	; (80037cc <SPI_MASTER_ADC_lInit+0x12c>)
 8003706:	f7ff ff49 	bl	800359c <XMC_SPI_CH_SetBitOrderMsbFirst>
          
  XMC_SPI_CH_SetWordLength(XMC_SPI2_CH0, (uint8_t)8);
 800370a:	4830      	ldr	r0, [pc, #192]	; (80037cc <SPI_MASTER_ADC_lInit+0x12c>)
 800370c:	2108      	movs	r1, #8
 800370e:	f7ff ff89 	bl	8003624 <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI2_CH0, (uint8_t)24);
 8003712:	482e      	ldr	r0, [pc, #184]	; (80037cc <SPI_MASTER_ADC_lInit+0x12c>)
 8003714:	2118      	movs	r1, #24
 8003716:	f7ff ff93 	bl	8003640 <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI2_CH0,
 800371a:	482c      	ldr	r0, [pc, #176]	; (80037cc <SPI_MASTER_ADC_lInit+0x12c>)
 800371c:	2100      	movs	r1, #0
 800371e:	2200      	movs	r2, #0
 8003720:	f7ff ff72 	bl	8003608 <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI2_CH0, 2U);
 8003724:	4829      	ldr	r0, [pc, #164]	; (80037cc <SPI_MASTER_ADC_lInit+0x12c>)
 8003726:	2102      	movs	r1, #2
 8003728:	f7ff ff48 	bl	80035bc <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)7, &SPI_MASTER_ADC_MISO_Config.port_config);
 800372c:	4829      	ldr	r0, [pc, #164]	; (80037d4 <SPI_MASTER_ADC_lInit+0x134>)
 800372e:	2107      	movs	r1, #7
 8003730:	4a29      	ldr	r2, [pc, #164]	; (80037d8 <SPI_MASTER_ADC_lInit+0x138>)
 8003732:	f7fc fe43 	bl	80003bc <XMC_GPIO_Init>

  /* Configure the data input line selected */
  XMC_SPI_CH_SetInputSource(XMC_SPI2_CH0, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_C);
 8003736:	4825      	ldr	r0, [pc, #148]	; (80037cc <SPI_MASTER_ADC_lInit+0x12c>)
 8003738:	2100      	movs	r1, #0
 800373a:	2202      	movs	r2, #2
 800373c:	f7ff ff8e 	bl	800365c <XMC_SPI_CH_SetInputSource>
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI2_CH0);
 8003740:	4822      	ldr	r0, [pc, #136]	; (80037cc <SPI_MASTER_ADC_lInit+0x12c>)
 8003742:	f7ff ff1f 	bl	8003584 <XMC_SPI_CH_Start>

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)8, &SPI_MASTER_ADC_MOSI_Config.port_config);
 8003746:	4823      	ldr	r0, [pc, #140]	; (80037d4 <SPI_MASTER_ADC_lInit+0x134>)
 8003748:	2108      	movs	r1, #8
 800374a:	4a24      	ldr	r2, [pc, #144]	; (80037dc <SPI_MASTER_ADC_lInit+0x13c>)
 800374c:	f7fc fe36 	bl	80003bc <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)9, &SPI_MASTER_ADC_SCLKOUT_Config.port_config);
 8003750:	4820      	ldr	r0, [pc, #128]	; (80037d4 <SPI_MASTER_ADC_lInit+0x134>)
 8003752:	2109      	movs	r1, #9
 8003754:	4a22      	ldr	r2, [pc, #136]	; (80037e0 <SPI_MASTER_ADC_lInit+0x140>)
 8003756:	f7fc fe31 	bl	80003bc <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, (uint8_t)3, &SPI_MASTER_ADC_SS_0_Config.port_config);
 800375a:	4822      	ldr	r0, [pc, #136]	; (80037e4 <SPI_MASTER_ADC_lInit+0x144>)
 800375c:	2103      	movs	r1, #3
 800375e:	4a22      	ldr	r2, [pc, #136]	; (80037e8 <SPI_MASTER_ADC_lInit+0x148>)
 8003760:	f7fc fe2c 	bl	80003bc <XMC_GPIO_Init>
  XMC_SPI_CH_EnableSlaveSelect(XMC_SPI2_CH0, XMC_SPI_CH_SLAVE_SELECT_0);
 8003764:	4819      	ldr	r0, [pc, #100]	; (80037cc <SPI_MASTER_ADC_lInit+0x12c>)
 8003766:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800376a:	f7fe fd4d 	bl	8002208 <XMC_SPI_CH_EnableSlaveSelect>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, (uint8_t)4, &SPI_MASTER_ADC_SS_1_Config.port_config);
 800376e:	481d      	ldr	r0, [pc, #116]	; (80037e4 <SPI_MASTER_ADC_lInit+0x144>)
 8003770:	2104      	movs	r1, #4
 8003772:	4a1e      	ldr	r2, [pc, #120]	; (80037ec <SPI_MASTER_ADC_lInit+0x14c>)
 8003774:	f7fc fe22 	bl	80003bc <XMC_GPIO_Init>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI2_CH0,
 8003778:	4814      	ldr	r0, [pc, #80]	; (80037cc <SPI_MASTER_ADC_lInit+0x12c>)
 800377a:	2104      	movs	r1, #4
 800377c:	2201      	movs	r2, #1
 800377e:	f7fe fe65 	bl	800244c <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER,
                                      (uint32_t)SPI_MASTER_SR_ID_1);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI2_CH0,
 8003782:	4812      	ldr	r0, [pc, #72]	; (80037cc <SPI_MASTER_ADC_lInit+0x12c>)
 8003784:	2108      	movs	r1, #8
 8003786:	2200      	movs	r2, #0
 8003788:	f7fe fe60 	bl	800244c <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE,
                                      (uint32_t)SPI_MASTER_SR_ID_0);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI2_CH0,
 800378c:	480f      	ldr	r0, [pc, #60]	; (80037cc <SPI_MASTER_ADC_lInit+0x12c>)
 800378e:	210c      	movs	r1, #12
 8003790:	2200      	movs	r2, #0
 8003792:	f7fe fe5b 	bl	800244c <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE,
                                      (uint32_t)SPI_MASTER_SR_ID_0);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI2_CH0,
 8003796:	480d      	ldr	r0, [pc, #52]	; (80037cc <SPI_MASTER_ADC_lInit+0x12c>)
 8003798:	2110      	movs	r1, #16
 800379a:	2202      	movs	r2, #2
 800379c:	f7fe fe56 	bl	800244c <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_2);
            
  XMC_USIC_CH_TriggerServiceRequest(XMC_SPI2_CH0, (uint32_t)SPI_MASTER_SR_ID_1);
 80037a0:	480a      	ldr	r0, [pc, #40]	; (80037cc <SPI_MASTER_ADC_lInit+0x12c>)
 80037a2:	2101      	movs	r1, #1
 80037a4:	f7ff feb4 	bl	8003510 <XMC_USIC_CH_TriggerServiceRequest>
}            

  return status;
 80037a8:	79fb      	ldrb	r3, [r7, #7]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	1ffe8a10 	.word	0x1ffe8a10
 80037b8:	50018000 	.word	0x50018000
 80037bc:	1ffe88c4 	.word	0x1ffe88c4
 80037c0:	080037f1 	.word	0x080037f1
 80037c4:	1ffe88e8 	.word	0x1ffe88e8
 80037c8:	08003829 	.word	0x08003829
 80037cc:	48024000 	.word	0x48024000
 80037d0:	1ffe88bc 	.word	0x1ffe88bc
 80037d4:	48028300 	.word	0x48028300
 80037d8:	1ffe8b24 	.word	0x1ffe8b24
 80037dc:	1ffe8894 	.word	0x1ffe8894
 80037e0:	08008c9c 	.word	0x08008c9c
 80037e4:	48028500 	.word	0x48028500
 80037e8:	08008cb8 	.word	0x08008cb8
 80037ec:	1ffe88a8 	.word	0x1ffe88a8

080037f0 <SPI_MASTER_ADC_DMA_tx_handler>:
/*Transmit ISR*/
void SPI_MASTER_ADC_DMA_tx_handler(XMC_DMA_CH_EVENT_t event)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	71fb      	strb	r3, [r7, #7]
  if (event == XMC_DMA_CH_EVENT_TRANSFER_COMPLETE)
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d10b      	bne.n	8003818 <SPI_MASTER_ADC_DMA_tx_handler+0x28>
  {
    while(XMC_USIC_CH_GetTransmitBufferStatus(XMC_SPI2_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
 8003800:	bf00      	nop
 8003802:	4807      	ldr	r0, [pc, #28]	; (8003820 <SPI_MASTER_ADC_DMA_tx_handler+0x30>)
 8003804:	f7ff fe74 	bl	80034f0 <XMC_USIC_CH_GetTransmitBufferStatus>
 8003808:	4603      	mov	r3, r0
 800380a:	2b80      	cmp	r3, #128	; 0x80
 800380c:	d0f9      	beq.n	8003802 <SPI_MASTER_ADC_DMA_tx_handler+0x12>
    SPI_MASTER_ADC.runtime->tx_busy = false;
 800380e:	4b05      	ldr	r3, [pc, #20]	; (8003824 <SPI_MASTER_ADC_DMA_tx_handler+0x34>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2020 	strb.w	r2, [r3, #32]
  }
}
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	48024000 	.word	0x48024000
 8003824:	1ffe8930 	.word	0x1ffe8930

08003828 <SPI_MASTER_ADC_DMA_rx_handler>:

/*Receive ISR*/
void SPI_MASTER_ADC_DMA_rx_handler(XMC_DMA_CH_EVENT_t event)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	71fb      	strb	r3, [r7, #7]
  if (event == XMC_DMA_CH_EVENT_TRANSFER_COMPLETE)
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d112      	bne.n	800385e <SPI_MASTER_ADC_DMA_rx_handler+0x36>
  {
    XMC_SPI_CH_DisableEvent(XMC_SPI2_CH0, (uint32_t)((uint32_t)XMC_SPI_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_SPI_CH_EVENT_ALTERNATIVE_RECEIVE));
 8003838:	480a      	ldr	r0, [pc, #40]	; (8003864 <SPI_MASTER_ADC_DMA_rx_handler+0x3c>)
 800383a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800383e:	f7fe fd2d 	bl	800229c <XMC_SPI_CH_DisableEvent>
    SPI_MASTER_ADC.runtime->tx_data_dummy = false;
 8003842:	4b09      	ldr	r3, [pc, #36]	; (8003868 <SPI_MASTER_ADC_DMA_rx_handler+0x40>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    SPI_MASTER_ADC.runtime->rx_data_dummy = true;
 800384c:	4b06      	ldr	r3, [pc, #24]	; (8003868 <SPI_MASTER_ADC_DMA_rx_handler+0x40>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    SPI_MASTER_ADC.runtime->rx_busy = false;
 8003856:	4b04      	ldr	r3, [pc, #16]	; (8003868 <SPI_MASTER_ADC_DMA_rx_handler+0x40>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	2200      	movs	r2, #0
 800385c:	77da      	strb	r2, [r3, #31]
  }
}
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	48024000 	.word	0x48024000
 8003868:	1ffe8930 	.word	0x1ffe8930

0800386c <SPI_MASTER_TC_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_MASTER_TC_lInit(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
 8003872:	2300      	movs	r3, #0
 8003874:	71fb      	strb	r3, [r7, #7]
  status =  (SPI_MASTER_STATUS_t)GLOBAL_DMA_Init(&GLOBAL_DMA_1);
 8003876:	4845      	ldr	r0, [pc, #276]	; (800398c <SPI_MASTER_TC_lInit+0x120>)
 8003878:	f000 fb0c 	bl	8003e94 <GLOBAL_DMA_Init>
 800387c:	4603      	mov	r3, r0
 800387e:	71fb      	strb	r3, [r7, #7]
  if (status == SPI_MASTER_STATUS_SUCCESS)
 8003880:	79fb      	ldrb	r3, [r7, #7]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d17d      	bne.n	8003982 <SPI_MASTER_TC_lInit+0x116>
  {            
                            
  (void)XMC_DMA_CH_Init(XMC_DMA0, 0U, &SPI_MASTER_TC_dma_ch_tx_config);
 8003886:	4842      	ldr	r0, [pc, #264]	; (8003990 <SPI_MASTER_TC_lInit+0x124>)
 8003888:	2100      	movs	r1, #0
 800388a:	4a42      	ldr	r2, [pc, #264]	; (8003994 <SPI_MASTER_TC_lInit+0x128>)
 800388c:	f7fd fd20 	bl	80012d0 <XMC_DMA_CH_Init>
  /*"Interrupt Settings" configuration for "transmit" and/or "receive"*/
  XMC_DMA_CH_EnableEvent(XMC_DMA0, 0U, (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 8003890:	483f      	ldr	r0, [pc, #252]	; (8003990 <SPI_MASTER_TC_lInit+0x124>)
 8003892:	2100      	movs	r1, #0
 8003894:	2201      	movs	r2, #1
 8003896:	f7fd ff21 	bl	80016dc <XMC_DMA_CH_EnableEvent>
  XMC_DMA_CH_SetEventHandler(XMC_DMA0, 0U, SPI_MASTER_TC_DMA_tx_handler);
 800389a:	483d      	ldr	r0, [pc, #244]	; (8003990 <SPI_MASTER_TC_lInit+0x124>)
 800389c:	2100      	movs	r1, #0
 800389e:	4a3e      	ldr	r2, [pc, #248]	; (8003998 <SPI_MASTER_TC_lInit+0x12c>)
 80038a0:	f7fd ff6a 	bl	8001778 <XMC_DMA_CH_SetEventHandler>
                             
  (void)XMC_DMA_CH_Init(XMC_DMA0, 1U, &SPI_MASTER_TC_dma_ch_rx_config);
 80038a4:	483a      	ldr	r0, [pc, #232]	; (8003990 <SPI_MASTER_TC_lInit+0x124>)
 80038a6:	2101      	movs	r1, #1
 80038a8:	4a3c      	ldr	r2, [pc, #240]	; (800399c <SPI_MASTER_TC_lInit+0x130>)
 80038aa:	f7fd fd11 	bl	80012d0 <XMC_DMA_CH_Init>
  /*"Interrupt Settings" configuration for "transmit" and/or "receive"*/
  XMC_DMA_CH_EnableEvent(XMC_DMA0, 1U, (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 80038ae:	4838      	ldr	r0, [pc, #224]	; (8003990 <SPI_MASTER_TC_lInit+0x124>)
 80038b0:	2101      	movs	r1, #1
 80038b2:	2201      	movs	r2, #1
 80038b4:	f7fd ff12 	bl	80016dc <XMC_DMA_CH_EnableEvent>
  XMC_DMA_CH_SetEventHandler(XMC_DMA0, 1U, SPI_MASTER_TC_DMA_rx_handler);
 80038b8:	4835      	ldr	r0, [pc, #212]	; (8003990 <SPI_MASTER_TC_lInit+0x124>)
 80038ba:	2101      	movs	r1, #1
 80038bc:	4a38      	ldr	r2, [pc, #224]	; (80039a0 <SPI_MASTER_TC_lInit+0x134>)
 80038be:	f7fd ff5b 	bl	8001778 <XMC_DMA_CH_SetEventHandler>
                             
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI1_CH0, &SPI_MASTER_TC_Channel_Config);
 80038c2:	4838      	ldr	r0, [pc, #224]	; (80039a4 <SPI_MASTER_TC_lInit+0x138>)
 80038c4:	4938      	ldr	r1, [pc, #224]	; (80039a8 <SPI_MASTER_TC_lInit+0x13c>)
 80038c6:	f7fe fc6b 	bl	80021a0 <XMC_SPI_CH_Init>
                             
  XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI1_CH0);
 80038ca:	4836      	ldr	r0, [pc, #216]	; (80039a4 <SPI_MASTER_TC_lInit+0x138>)
 80038cc:	f7ff fe66 	bl	800359c <XMC_SPI_CH_SetBitOrderMsbFirst>
          
  XMC_SPI_CH_SetWordLength(XMC_SPI1_CH0, (uint8_t)8);
 80038d0:	4834      	ldr	r0, [pc, #208]	; (80039a4 <SPI_MASTER_TC_lInit+0x138>)
 80038d2:	2108      	movs	r1, #8
 80038d4:	f7ff fea6 	bl	8003624 <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI1_CH0, (uint8_t)32);
 80038d8:	4832      	ldr	r0, [pc, #200]	; (80039a4 <SPI_MASTER_TC_lInit+0x138>)
 80038da:	2120      	movs	r1, #32
 80038dc:	f7ff feb0 	bl	8003640 <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI1_CH0,
 80038e0:	4830      	ldr	r0, [pc, #192]	; (80039a4 <SPI_MASTER_TC_lInit+0x138>)
 80038e2:	2100      	movs	r1, #0
 80038e4:	2200      	movs	r2, #0
 80038e6:	f7ff fe8f 	bl	8003608 <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI1_CH0, 2U);
 80038ea:	482e      	ldr	r0, [pc, #184]	; (80039a4 <SPI_MASTER_TC_lInit+0x138>)
 80038ec:	2102      	movs	r1, #2
 80038ee:	f7ff fe65 	bl	80035bc <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)4, &SPI_MASTER_TC_MISO_Config.port_config);
 80038f2:	482e      	ldr	r0, [pc, #184]	; (80039ac <SPI_MASTER_TC_lInit+0x140>)
 80038f4:	2104      	movs	r1, #4
 80038f6:	4a2e      	ldr	r2, [pc, #184]	; (80039b0 <SPI_MASTER_TC_lInit+0x144>)
 80038f8:	f7fc fd60 	bl	80003bc <XMC_GPIO_Init>

  /* Configure the data input line selected */
  XMC_SPI_CH_SetInputSource(XMC_SPI1_CH0, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_A);
 80038fc:	4829      	ldr	r0, [pc, #164]	; (80039a4 <SPI_MASTER_TC_lInit+0x138>)
 80038fe:	2100      	movs	r1, #0
 8003900:	2200      	movs	r2, #0
 8003902:	f7ff feab 	bl	800365c <XMC_SPI_CH_SetInputSource>
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI1_CH0);
 8003906:	4827      	ldr	r0, [pc, #156]	; (80039a4 <SPI_MASTER_TC_lInit+0x138>)
 8003908:	f7ff fe3c 	bl	8003584 <XMC_SPI_CH_Start>

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)5, &SPI_MASTER_TC_MOSI_Config.port_config);
 800390c:	4827      	ldr	r0, [pc, #156]	; (80039ac <SPI_MASTER_TC_lInit+0x140>)
 800390e:	2105      	movs	r1, #5
 8003910:	4a28      	ldr	r2, [pc, #160]	; (80039b4 <SPI_MASTER_TC_lInit+0x148>)
 8003912:	f7fc fd53 	bl	80003bc <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)11, &SPI_MASTER_TC_SCLKOUT_Config.port_config);
 8003916:	4825      	ldr	r0, [pc, #148]	; (80039ac <SPI_MASTER_TC_lInit+0x140>)
 8003918:	210b      	movs	r1, #11
 800391a:	4a27      	ldr	r2, [pc, #156]	; (80039b8 <SPI_MASTER_TC_lInit+0x14c>)
 800391c:	f7fc fd4e 	bl	80003bc <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)6, &SPI_MASTER_TC_SS_0_Config.port_config);
 8003920:	4822      	ldr	r0, [pc, #136]	; (80039ac <SPI_MASTER_TC_lInit+0x140>)
 8003922:	2106      	movs	r1, #6
 8003924:	4a25      	ldr	r2, [pc, #148]	; (80039bc <SPI_MASTER_TC_lInit+0x150>)
 8003926:	f7fc fd49 	bl	80003bc <XMC_GPIO_Init>
  XMC_SPI_CH_EnableSlaveSelect(XMC_SPI1_CH0, XMC_SPI_CH_SLAVE_SELECT_0);
 800392a:	481e      	ldr	r0, [pc, #120]	; (80039a4 <SPI_MASTER_TC_lInit+0x138>)
 800392c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003930:	f7fe fc6a 	bl	8002208 <XMC_SPI_CH_EnableSlaveSelect>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)14, &SPI_MASTER_TC_SS_1_Config.port_config);
 8003934:	481d      	ldr	r0, [pc, #116]	; (80039ac <SPI_MASTER_TC_lInit+0x140>)
 8003936:	210e      	movs	r1, #14
 8003938:	4a21      	ldr	r2, [pc, #132]	; (80039c0 <SPI_MASTER_TC_lInit+0x154>)
 800393a:	f7fc fd3f 	bl	80003bc <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)15, &SPI_MASTER_TC_SS_2_Config.port_config);
 800393e:	481b      	ldr	r0, [pc, #108]	; (80039ac <SPI_MASTER_TC_lInit+0x140>)
 8003940:	210f      	movs	r1, #15
 8003942:	4a20      	ldr	r2, [pc, #128]	; (80039c4 <SPI_MASTER_TC_lInit+0x158>)
 8003944:	f7fc fd3a 	bl	80003bc <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)14, &SPI_MASTER_TC_SS_3_Config.port_config);
 8003948:	481f      	ldr	r0, [pc, #124]	; (80039c8 <SPI_MASTER_TC_lInit+0x15c>)
 800394a:	210e      	movs	r1, #14
 800394c:	4a1f      	ldr	r2, [pc, #124]	; (80039cc <SPI_MASTER_TC_lInit+0x160>)
 800394e:	f7fc fd35 	bl	80003bc <XMC_GPIO_Init>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI1_CH0,
 8003952:	4814      	ldr	r0, [pc, #80]	; (80039a4 <SPI_MASTER_TC_lInit+0x138>)
 8003954:	2104      	movs	r1, #4
 8003956:	2200      	movs	r2, #0
 8003958:	f7fe fd78 	bl	800244c <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER,
                                      (uint32_t)SPI_MASTER_SR_ID_0);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI1_CH0,
 800395c:	4811      	ldr	r0, [pc, #68]	; (80039a4 <SPI_MASTER_TC_lInit+0x138>)
 800395e:	2108      	movs	r1, #8
 8003960:	2201      	movs	r2, #1
 8003962:	f7fe fd73 	bl	800244c <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE,
                                      (uint32_t)SPI_MASTER_SR_ID_1);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI1_CH0,
 8003966:	480f      	ldr	r0, [pc, #60]	; (80039a4 <SPI_MASTER_TC_lInit+0x138>)
 8003968:	210c      	movs	r1, #12
 800396a:	2201      	movs	r2, #1
 800396c:	f7fe fd6e 	bl	800244c <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE,
                                      (uint32_t)SPI_MASTER_SR_ID_1);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI1_CH0,
 8003970:	480c      	ldr	r0, [pc, #48]	; (80039a4 <SPI_MASTER_TC_lInit+0x138>)
 8003972:	2110      	movs	r1, #16
 8003974:	2202      	movs	r2, #2
 8003976:	f7fe fd69 	bl	800244c <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_2);
            
  XMC_USIC_CH_TriggerServiceRequest(XMC_SPI1_CH0, (uint32_t)SPI_MASTER_SR_ID_0);
 800397a:	480a      	ldr	r0, [pc, #40]	; (80039a4 <SPI_MASTER_TC_lInit+0x138>)
 800397c:	2100      	movs	r1, #0
 800397e:	f7ff fdc7 	bl	8003510 <XMC_USIC_CH_TriggerServiceRequest>
}            

  return status;
 8003982:	79fb      	ldrb	r3, [r7, #7]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	1ffe8a20 	.word	0x1ffe8a20
 8003990:	50014000 	.word	0x50014000
 8003994:	1ffe8980 	.word	0x1ffe8980
 8003998:	080039d1 	.word	0x080039d1
 800399c:	1ffe89a4 	.word	0x1ffe89a4
 80039a0:	08003a09 	.word	0x08003a09
 80039a4:	48020000 	.word	0x48020000
 80039a8:	1ffe8978 	.word	0x1ffe8978
 80039ac:	48028000 	.word	0x48028000
 80039b0:	1ffe8b38 	.word	0x1ffe8b38
 80039b4:	1ffe8950 	.word	0x1ffe8950
 80039b8:	08008d78 	.word	0x08008d78
 80039bc:	08008d94 	.word	0x08008d94
 80039c0:	1ffe8964 	.word	0x1ffe8964
 80039c4:	08008db8 	.word	0x08008db8
 80039c8:	48028300 	.word	0x48028300
 80039cc:	08008dd4 	.word	0x08008dd4

080039d0 <SPI_MASTER_TC_DMA_tx_handler>:
/*Transmit ISR*/
void SPI_MASTER_TC_DMA_tx_handler(XMC_DMA_CH_EVENT_t event)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	71fb      	strb	r3, [r7, #7]
  if (event == XMC_DMA_CH_EVENT_TRANSFER_COMPLETE)
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d10b      	bne.n	80039f8 <SPI_MASTER_TC_DMA_tx_handler+0x28>
  {
    while(XMC_USIC_CH_GetTransmitBufferStatus(XMC_SPI1_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
 80039e0:	bf00      	nop
 80039e2:	4807      	ldr	r0, [pc, #28]	; (8003a00 <SPI_MASTER_TC_DMA_tx_handler+0x30>)
 80039e4:	f7ff fd84 	bl	80034f0 <XMC_USIC_CH_GetTransmitBufferStatus>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b80      	cmp	r3, #128	; 0x80
 80039ec:	d0f9      	beq.n	80039e2 <SPI_MASTER_TC_DMA_tx_handler+0x12>
    SPI_MASTER_TC.runtime->tx_busy = false;
 80039ee:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <SPI_MASTER_TC_DMA_tx_handler+0x34>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2020 	strb.w	r2, [r3, #32]
  }
}
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	48020000 	.word	0x48020000
 8003a04:	1ffe89ec 	.word	0x1ffe89ec

08003a08 <SPI_MASTER_TC_DMA_rx_handler>:

/*Receive ISR*/
void SPI_MASTER_TC_DMA_rx_handler(XMC_DMA_CH_EVENT_t event)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	71fb      	strb	r3, [r7, #7]
  if (event == XMC_DMA_CH_EVENT_TRANSFER_COMPLETE)
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d112      	bne.n	8003a3e <SPI_MASTER_TC_DMA_rx_handler+0x36>
  {
    XMC_SPI_CH_DisableEvent(XMC_SPI1_CH0, (uint32_t)((uint32_t)XMC_SPI_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_SPI_CH_EVENT_ALTERNATIVE_RECEIVE));
 8003a18:	480a      	ldr	r0, [pc, #40]	; (8003a44 <SPI_MASTER_TC_DMA_rx_handler+0x3c>)
 8003a1a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8003a1e:	f7fe fc3d 	bl	800229c <XMC_SPI_CH_DisableEvent>
    SPI_MASTER_TC.runtime->tx_data_dummy = false;
 8003a22:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <SPI_MASTER_TC_DMA_rx_handler+0x40>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    SPI_MASTER_TC.runtime->rx_data_dummy = true;
 8003a2c:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <SPI_MASTER_TC_DMA_rx_handler+0x40>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    SPI_MASTER_TC.runtime->rx_busy = false;
 8003a36:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <SPI_MASTER_TC_DMA_rx_handler+0x40>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	77da      	strb	r2, [r3, #31]
  }
}
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	48020000 	.word	0x48020000
 8003a48:	1ffe89ec 	.word	0x1ffe89ec

08003a4c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a50:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <NVIC_GetPriorityGrouping+0x18>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a58:	0a1b      	lsrs	r3, r3, #8
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	e000ed00 	.word	0xe000ed00

08003a68 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003a72:	4908      	ldr	r1, [pc, #32]	; (8003a94 <NVIC_EnableIRQ+0x2c>)
 8003a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	79fa      	ldrb	r2, [r7, #7]
 8003a7c:	f002 021f 	and.w	r2, r2, #31
 8003a80:	2001      	movs	r0, #1
 8003a82:	fa00 f202 	lsl.w	r2, r0, r2
 8003a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	e000e100 	.word	0xe000e100

08003a98 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003aa2:	4909      	ldr	r1, [pc, #36]	; (8003ac8 <NVIC_ClearPendingIRQ+0x30>)
 8003aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	79fa      	ldrb	r2, [r7, #7]
 8003aac:	f002 021f 	and.w	r2, r2, #31
 8003ab0:	2001      	movs	r0, #1
 8003ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ab6:	3360      	adds	r3, #96	; 0x60
 8003ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	e000e100 	.word	0xe000e100

08003acc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	6039      	str	r1, [r7, #0]
 8003ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	da0b      	bge.n	8003af8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae0:	490d      	ldr	r1, [pc, #52]	; (8003b18 <NVIC_SetPriority+0x4c>)
 8003ae2:	79fb      	ldrb	r3, [r7, #7]
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	3b04      	subs	r3, #4
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	0092      	lsls	r2, r2, #2
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	440b      	add	r3, r1
 8003af4:	761a      	strb	r2, [r3, #24]
 8003af6:	e009      	b.n	8003b0c <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af8:	4908      	ldr	r1, [pc, #32]	; (8003b1c <NVIC_SetPriority+0x50>)
 8003afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	0092      	lsls	r2, r2, #2
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	440b      	add	r3, r1
 8003b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	e000ed00 	.word	0xe000ed00
 8003b1c:	e000e100 	.word	0xe000e100

08003b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b089      	sub	sp, #36	; 0x24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f1c3 0307 	rsb	r3, r3, #7
 8003b3a:	2b06      	cmp	r3, #6
 8003b3c:	bf28      	it	cs
 8003b3e:	2306      	movcs	r3, #6
 8003b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	3306      	adds	r3, #6
 8003b46:	2b06      	cmp	r3, #6
 8003b48:	d902      	bls.n	8003b50 <NVIC_EncodePriority+0x30>
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	e000      	b.n	8003b52 <NVIC_EncodePriority+0x32>
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	2201      	movs	r2, #1
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	1e5a      	subs	r2, r3, #1
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	401a      	ands	r2, r3
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2101      	movs	r1, #1
 8003b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6e:	1e59      	subs	r1, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8003b74:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3724      	adds	r7, #36	; 0x24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop

08003b84 <PIN_INTERRUPT_Init>:
/*
 * API to initialize the PIN_INTERRUPT APP ERU Event Trigger Logic, Output Gating Unit Hardware initialization
 * and NVIC node configuration.
 */
PIN_INTERRUPT_STATUS_t PIN_INTERRUPT_Init(const PIN_INTERRUPT_t *const handle)
{
 8003b84:	b590      	push	{r4, r7, lr}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_Init: PIN_INTERRUPT APP handle function pointer uninitialized", (handle != NULL));

  /* Initializes input pin characteristics */
  XMC_GPIO_Init(handle->port, handle->pin, &handle->gpio_config);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6859      	ldr	r1, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3308      	adds	r3, #8
 8003b9a:	4608      	mov	r0, r1
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f7fc fc0c 	bl	80003bc <XMC_GPIO_Init>
  /* ERU Event Trigger Logic Hardware initialization based on UI */
  XMC_ERU_ETL_Init(handle->eru, handle->etl, &handle->etl_config);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6819      	ldr	r1, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	7fda      	ldrb	r2, [r3, #31]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3314      	adds	r3, #20
 8003bb0:	4608      	mov	r0, r1
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	f7fd ff11 	bl	80019dc <XMC_ERU_ETL_Init>
  /* OGU is configured to generate event on configured trigger edge */
  XMC_ERU_OGU_SetServiceRequestMode(handle->eru, handle->ogu, XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f7fd ff2d 	bl	8001a28 <XMC_ERU_OGU_SetServiceRequestMode>
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	7f1c      	ldrb	r4, [r3, #28]
 8003bd2:	f7ff ff3b 	bl	8003a4c <NVIC_GetPriorityGrouping>
 8003bd6:	4601      	mov	r1, r0
                    handle->irq_priority, handle->irq_subpriority));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	7f5b      	ldrb	r3, [r3, #29]
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8003bdc:	461a      	mov	r2, r3
                    handle->irq_priority, handle->irq_subpriority));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	7f9b      	ldrb	r3, [r3, #30]
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8003be2:	4608      	mov	r0, r1
 8003be4:	4611      	mov	r1, r2
 8003be6:	461a      	mov	r2, r3
 8003be8:	f7ff ff9a 	bl	8003b20 <NVIC_EncodePriority>
 8003bec:	4602      	mov	r2, r0
 8003bee:	b263      	sxtb	r3, r4
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	f7ff ff6a 	bl	8003acc <NVIC_SetPriority>
                    handle->irq_priority, handle->irq_subpriority));
#endif
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((IRQn_Type)handle->IRQn, (XMC_SCU_IRQCTRL_t)handle->irqctrl);
#endif
  if (true == handle->enable_at_init)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00b      	beq.n	8003c1a <PIN_INTERRUPT_Init+0x96>
  {
    /* Clear pending interrupt before enabling it */
    NVIC_ClearPendingIRQ((IRQn_Type)handle->IRQn);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	7f1b      	ldrb	r3, [r3, #28]
 8003c06:	b25b      	sxtb	r3, r3
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff ff45 	bl	8003a98 <NVIC_ClearPendingIRQ>
    /* Enable NVIC node */
    NVIC_EnableIRQ((IRQn_Type)handle->IRQn);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	7f1b      	ldrb	r3, [r3, #28]
 8003c12:	b25b      	sxtb	r3, r3
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff ff27 	bl	8003a68 <NVIC_EnableIRQ>
  }
  return (PIN_INTERRUPT_STATUS_SUCCESS);
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd90      	pop	{r4, r7, pc}

08003c24 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c28:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <NVIC_GetPriorityGrouping+0x18>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c30:	0a1b      	lsrs	r3, r3, #8
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	e000ed00 	.word	0xe000ed00

08003c40 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4603      	mov	r3, r0
 8003c48:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003c4a:	4908      	ldr	r1, [pc, #32]	; (8003c6c <NVIC_EnableIRQ+0x2c>)
 8003c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c50:	095b      	lsrs	r3, r3, #5
 8003c52:	79fa      	ldrb	r2, [r7, #7]
 8003c54:	f002 021f 	and.w	r2, r2, #31
 8003c58:	2001      	movs	r0, #1
 8003c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	e000e100 	.word	0xe000e100

08003c70 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	4603      	mov	r3, r0
 8003c78:	6039      	str	r1, [r7, #0]
 8003c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	da0b      	bge.n	8003c9c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c84:	490d      	ldr	r1, [pc, #52]	; (8003cbc <NVIC_SetPriority+0x4c>)
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	3b04      	subs	r3, #4
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	b2d2      	uxtb	r2, r2
 8003c92:	0092      	lsls	r2, r2, #2
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	440b      	add	r3, r1
 8003c98:	761a      	strb	r2, [r3, #24]
 8003c9a:	e009      	b.n	8003cb0 <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c9c:	4908      	ldr	r1, [pc, #32]	; (8003cc0 <NVIC_SetPriority+0x50>)
 8003c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	0092      	lsls	r2, r2, #2
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	440b      	add	r3, r1
 8003cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	e000ed00 	.word	0xe000ed00
 8003cc0:	e000e100 	.word	0xe000e100

08003cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b089      	sub	sp, #36	; 0x24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f1c3 0307 	rsb	r3, r3, #7
 8003cde:	2b06      	cmp	r3, #6
 8003ce0:	bf28      	it	cs
 8003ce2:	2306      	movcs	r3, #6
 8003ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	3306      	adds	r3, #6
 8003cea:	2b06      	cmp	r3, #6
 8003cec:	d902      	bls.n	8003cf4 <NVIC_EncodePriority+0x30>
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <NVIC_EncodePriority+0x32>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	1e5a      	subs	r2, r3, #1
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	401a      	ands	r2, r3
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d12:	1e59      	subs	r1, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8003d18:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3724      	adds	r7, #36	; 0x24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop

08003d28 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	b25b      	sxtb	r3, r3
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff ff82 	bl	8003c40 <NVIC_EnableIRQ>
}
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop

08003d44 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8003d44:	b590      	push	{r4, r7, lr}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	781c      	ldrb	r4, [r3, #0]
 8003d50:	f7ff ff68 	bl	8003c24 <NVIC_GetPriorityGrouping>
 8003d54:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8003d5a:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8003d60:	4608      	mov	r0, r1
 8003d62:	4611      	mov	r1, r2
 8003d64:	461a      	mov	r2, r3
 8003d66:	f7ff ffad 	bl	8003cc4 <NVIC_EncodePriority>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	b263      	sxtb	r3, r4
 8003d6e:	4618      	mov	r0, r3
 8003d70:	4611      	mov	r1, r2
 8003d72:	f7ff ff7d 	bl	8003c70 <NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	78db      	ldrb	r3, [r3, #3]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7ff ffd2 	bl	8003d28 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd90      	pop	{r4, r7, pc}
 8003d8e:	bf00      	nop

08003d90 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d94:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <NVIC_GetPriorityGrouping+0x18>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d9c:	0a1b      	lsrs	r3, r3, #8
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	e000ed00 	.word	0xe000ed00

08003dac <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003db6:	4908      	ldr	r1, [pc, #32]	; (8003dd8 <NVIC_EnableIRQ+0x2c>)
 8003db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dbc:	095b      	lsrs	r3, r3, #5
 8003dbe:	79fa      	ldrb	r2, [r7, #7]
 8003dc0:	f002 021f 	and.w	r2, r2, #31
 8003dc4:	2001      	movs	r0, #1
 8003dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8003dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	e000e100 	.word	0xe000e100

08003ddc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	6039      	str	r1, [r7, #0]
 8003de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	da0b      	bge.n	8003e08 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df0:	490d      	ldr	r1, [pc, #52]	; (8003e28 <NVIC_SetPriority+0x4c>)
 8003df2:	79fb      	ldrb	r3, [r7, #7]
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	3b04      	subs	r3, #4
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	0092      	lsls	r2, r2, #2
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	440b      	add	r3, r1
 8003e04:	761a      	strb	r2, [r3, #24]
 8003e06:	e009      	b.n	8003e1c <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e08:	4908      	ldr	r1, [pc, #32]	; (8003e2c <NVIC_SetPriority+0x50>)
 8003e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	0092      	lsls	r2, r2, #2
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	440b      	add	r3, r1
 8003e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	e000ed00 	.word	0xe000ed00
 8003e2c:	e000e100 	.word	0xe000e100

08003e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b089      	sub	sp, #36	; 0x24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	f1c3 0307 	rsb	r3, r3, #7
 8003e4a:	2b06      	cmp	r3, #6
 8003e4c:	bf28      	it	cs
 8003e4e:	2306      	movcs	r3, #6
 8003e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	3306      	adds	r3, #6
 8003e56:	2b06      	cmp	r3, #6
 8003e58:	d902      	bls.n	8003e60 <NVIC_EncodePriority+0x30>
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <NVIC_EncodePriority+0x32>
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	2201      	movs	r2, #1
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	1e5a      	subs	r2, r3, #1
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	401a      	ands	r2, r3
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2101      	movs	r1, #1
 8003e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7e:	1e59      	subs	r1, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8003e84:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3724      	adds	r7, #36	; 0x24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop

08003e94 <GLOBAL_DMA_Init>:
  return version;
}

/* GLOBAL_DMA initialization function */
GLOBAL_DMA_STATUS_t GLOBAL_DMA_Init(GLOBAL_DMA_t *const obj)
{
 8003e94:	b590      	push	{r4, r7, lr}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DMA_GLOBAL_Init: NULL DMA_GLOBAL_t object", (obj != NULL));

  if (obj->initialized == false)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	7a1b      	ldrb	r3, [r3, #8]
 8003ea0:	f083 0301 	eor.w	r3, r3, #1
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d024      	beq.n	8003ef4 <GLOBAL_DMA_Init+0x60>
  {
    /* Enable DMA module */
    XMC_DMA_Init(obj->dma);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fd f90a 	bl	80010c8 <XMC_DMA_Init>

    /* Enable DMA event handling */
    NVIC_SetPriority(obj->irq_node, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	7a5c      	ldrb	r4, [r3, #9]
 8003eb8:	f7ff ff6a 	bl	8003d90 <NVIC_GetPriorityGrouping>
 8003ebc:	4601      	mov	r1, r0
                                                        obj->config->priority,
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
  {
    /* Enable DMA module */
    XMC_DMA_Init(obj->dma);

    /* Enable DMA event handling */
    NVIC_SetPriority(obj->irq_node, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8003ec4:	461a      	mov	r2, r3
                                                        obj->config->priority,
                                                        obj->config->sub_priority));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	785b      	ldrb	r3, [r3, #1]
  {
    /* Enable DMA module */
    XMC_DMA_Init(obj->dma);

    /* Enable DMA event handling */
    NVIC_SetPriority(obj->irq_node, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8003ecc:	4608      	mov	r0, r1
 8003ece:	4611      	mov	r1, r2
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	f7ff ffad 	bl	8003e30 <NVIC_EncodePriority>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	b263      	sxtb	r3, r4
 8003eda:	4618      	mov	r0, r3
 8003edc:	4611      	mov	r1, r2
 8003ede:	f7ff ff7d 	bl	8003ddc <NVIC_SetPriority>
                                                        obj->config->priority,
                                                        obj->config->sub_priority));
    NVIC_EnableIRQ(obj->irq_node);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	7a5b      	ldrb	r3, [r3, #9]
 8003ee6:	b25b      	sxtb	r3, r3
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff ff5f 	bl	8003dac <NVIC_EnableIRQ>
    obj->initialized = true;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	721a      	strb	r2, [r3, #8]
  }

  return GLOBAL_DMA_STATUS_SUCCESS;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd90      	pop	{r4, r7, pc}
 8003efe:	bf00      	nop

08003f00 <GPDMA0_0_IRQHandler>:
  .initialized = (bool)0U, /* Is DMA initialized yet? */
  .irq_node = (IRQn_Type)105U /* Allotted DMA IRQ node */
};

void GPDMA0_0_IRQHandler(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  XMC_DMA_IRQHandler(XMC_DMA0);
 8003f04:	4801      	ldr	r0, [pc, #4]	; (8003f0c <GPDMA0_0_IRQHandler+0xc>)
 8003f06:	f7fd fc59 	bl	80017bc <XMC_DMA_IRQHandler>
}
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	50014000 	.word	0x50014000

08003f10 <GPDMA1_0_IRQHandler>:

#ifdef XMC_DMA1
void GPDMA1_0_IRQHandler(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  XMC_DMA_IRQHandler(XMC_DMA1);
 8003f14:	4801      	ldr	r0, [pc, #4]	; (8003f1c <GPDMA1_0_IRQHandler+0xc>)
 8003f16:	f7fd fc51 	bl	80017bc <XMC_DMA_IRQHandler>
}
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	50018000 	.word	0x50018000

08003f20 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	60da      	str	r2, [r3, #12]
}
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop

08003f40 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	7b5b      	ldrb	r3, [r3, #13]
 8003f4c:	f083 0301 	eor.w	r3, r3, #1
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00f      	beq.n	8003f76 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	7b1b      	ldrb	r3, [r3, #12]
 8003f5e:	4610      	mov	r0, r2
 8003f60:	4619      	mov	r1, r3
 8003f62:	f7fc ffb1 	bl	8000ec8 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff ffd8 	bl	8003f20 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f84:	4b04      	ldr	r3, [pc, #16]	; (8003f98 <NVIC_GetPriorityGrouping+0x18>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f8c:	0a1b      	lsrs	r3, r3, #8
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	e000ed00 	.word	0xe000ed00

08003f9c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003fa6:	4908      	ldr	r1, [pc, #32]	; (8003fc8 <NVIC_EnableIRQ+0x2c>)
 8003fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fac:	095b      	lsrs	r3, r3, #5
 8003fae:	79fa      	ldrb	r2, [r7, #7]
 8003fb0:	f002 021f 	and.w	r2, r2, #31
 8003fb4:	2001      	movs	r0, #1
 8003fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8003fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	e000e100 	.word	0xe000e100

08003fcc <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003fd6:	4909      	ldr	r1, [pc, #36]	; (8003ffc <NVIC_DisableIRQ+0x30>)
 8003fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fdc:	095b      	lsrs	r3, r3, #5
 8003fde:	79fa      	ldrb	r2, [r7, #7]
 8003fe0:	f002 021f 	and.w	r2, r2, #31
 8003fe4:	2001      	movs	r0, #1
 8003fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8003fea:	3320      	adds	r3, #32
 8003fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	e000e100 	.word	0xe000e100

08004000 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	4603      	mov	r3, r0
 8004008:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800400a:	4909      	ldr	r1, [pc, #36]	; (8004030 <NVIC_ClearPendingIRQ+0x30>)
 800400c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004010:	095b      	lsrs	r3, r3, #5
 8004012:	79fa      	ldrb	r2, [r7, #7]
 8004014:	f002 021f 	and.w	r2, r2, #31
 8004018:	2001      	movs	r0, #1
 800401a:	fa00 f202 	lsl.w	r2, r0, r2
 800401e:	3360      	adds	r3, #96	; 0x60
 8004020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	e000e100 	.word	0xe000e100

08004034 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	4603      	mov	r3, r0
 800403c:	6039      	str	r1, [r7, #0]
 800403e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8004040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004044:	2b00      	cmp	r3, #0
 8004046:	da0b      	bge.n	8004060 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004048:	490d      	ldr	r1, [pc, #52]	; (8004080 <NVIC_SetPriority+0x4c>)
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	3b04      	subs	r3, #4
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	0092      	lsls	r2, r2, #2
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	440b      	add	r3, r1
 800405c:	761a      	strb	r2, [r3, #24]
 800405e:	e009      	b.n	8004074 <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004060:	4908      	ldr	r1, [pc, #32]	; (8004084 <NVIC_SetPriority+0x50>)
 8004062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	0092      	lsls	r2, r2, #2
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	440b      	add	r3, r1
 8004070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	e000ed00 	.word	0xe000ed00
 8004084:	e000e100 	.word	0xe000e100

08004088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004088:	b480      	push	{r7}
 800408a:	b089      	sub	sp, #36	; 0x24
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f1c3 0307 	rsb	r3, r3, #7
 80040a2:	2b06      	cmp	r3, #6
 80040a4:	bf28      	it	cs
 80040a6:	2306      	movcs	r3, #6
 80040a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	3306      	adds	r3, #6
 80040ae:	2b06      	cmp	r3, #6
 80040b0:	d902      	bls.n	80040b8 <NVIC_EncodePriority+0x30>
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	3b01      	subs	r3, #1
 80040b6:	e000      	b.n	80040ba <NVIC_EncodePriority+0x32>
 80040b8:	2300      	movs	r3, #0
 80040ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	2201      	movs	r2, #1
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	1e5a      	subs	r2, r3, #1
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	401a      	ands	r2, r3
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2101      	movs	r1, #1
 80040d2:	fa01 f303 	lsl.w	r3, r1, r3
 80040d6:	1e59      	subs	r1, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80040dc:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3724      	adds	r7, #36	; 0x24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop

080040ec <XMC_ETH_MAC_SetPortControl>:
 * - XMC4700 LQFP144 and BGA196 packages
 * - XMC4800 LQFP144 and BGA196 packages
 *
 */
__STATIC_INLINE void XMC_ETH_MAC_SetPortControl(XMC_ETH_MAC_t *const eth_mac, const XMC_ETH_MAC_PORT_CTRL_t port_ctrl)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  ETH0_CON->CON = (uint32_t)port_ctrl.raw;
 80040f6:	4a04      	ldr	r2, [pc, #16]	; (8004108 <XMC_ETH_MAC_SetPortControl+0x1c>)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	6013      	str	r3, [r2, #0]
}
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	50004040 	.word	0x50004040

0800410c <XMC_ETH_MAC_DisableJumboFrame>:
 *
 * \par
 * The function can be used to disable jumbo frames.
 */
__STATIC_INLINE void XMC_ETH_MAC_DisableJumboFrame(XMC_ETH_MAC_t *const eth_mac)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  eth_mac->regs->MAC_CONFIGURATION &= (uint32_t)~ETH_MAC_CONFIGURATION_JE_Msk;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	6812      	ldr	r2, [r2, #0]
 800411e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004122:	601a      	str	r2, [r3, #0]
}
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop

08004130 <XMC_ETH_MAC_SetLink>:
 * The function sets the link speed and duplex settings.
 */
__STATIC_INLINE void XMC_ETH_MAC_SetLink(XMC_ETH_MAC_t *const eth_mac,
                                         XMC_ETH_LINK_SPEED_t speed,
                                         XMC_ETH_LINK_DUPLEX_t duplex)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	460b      	mov	r3, r1
 800413a:	807b      	strh	r3, [r7, #2]
 800413c:	4613      	mov	r3, r2
 800413e:	803b      	strh	r3, [r7, #0]
  eth_mac->regs->MAC_CONFIGURATION = (eth_mac->regs->MAC_CONFIGURATION &
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6812      	ldr	r2, [r2, #0]
 8004148:	6812      	ldr	r2, [r2, #0]
 800414a:	f422 4190 	bic.w	r1, r2, #18432	; 0x4800
                                      (uint32_t)~(ETH_MAC_CONFIGURATION_DM_Msk | ETH_MAC_CONFIGURATION_FES_Msk)) |
                                     (uint32_t)speed | (uint32_t)duplex;
 800414e:	887a      	ldrh	r2, [r7, #2]
__STATIC_INLINE void XMC_ETH_MAC_SetLink(XMC_ETH_MAC_t *const eth_mac,
                                         XMC_ETH_LINK_SPEED_t speed,
                                         XMC_ETH_LINK_DUPLEX_t duplex)
{
  eth_mac->regs->MAC_CONFIGURATION = (eth_mac->regs->MAC_CONFIGURATION &
                                      (uint32_t)~(ETH_MAC_CONFIGURATION_DM_Msk | ETH_MAC_CONFIGURATION_FES_Msk)) |
 8004150:	4311      	orrs	r1, r2
                                     (uint32_t)speed | (uint32_t)duplex;
 8004152:	883a      	ldrh	r2, [r7, #0]
 8004154:	430a      	orrs	r2, r1
 */
__STATIC_INLINE void XMC_ETH_MAC_SetLink(XMC_ETH_MAC_t *const eth_mac,
                                         XMC_ETH_LINK_SPEED_t speed,
                                         XMC_ETH_LINK_DUPLEX_t duplex)
{
  eth_mac->regs->MAC_CONFIGURATION = (eth_mac->regs->MAC_CONFIGURATION &
 8004156:	601a      	str	r2, [r3, #0]
                                      (uint32_t)~(ETH_MAC_CONFIGURATION_DM_Msk | ETH_MAC_CONFIGURATION_FES_Msk)) |
                                     (uint32_t)speed | (uint32_t)duplex;
}
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop

08004164 <XMC_ETH_MAC_IsRxDescriptorOwnedByDma>:
 *
 * \par
 * The function checks if the RX descriptor is owned by the DMA.
 */
__STATIC_INLINE bool XMC_ETH_MAC_IsRxDescriptorOwnedByDma(XMC_ETH_MAC_t *const eth_mac)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  return ((eth_mac->rx_desc[eth_mac->rx_index].status & ETH_MAC_DMA_RDES0_OWN) != 0U);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004176:	015b      	lsls	r3, r3, #5
 8004178:	4413      	add	r3, r2
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	0fdb      	lsrs	r3, r3, #31
 800417e:	b2db      	uxtb	r3, r3
}
 8004180:	4618      	mov	r0, r3
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <XMC_ETH_MAC_IsTxDescriptorOwnedByDma>:
 *
 * \par
 * The function checks if the TX descriptor is owned by the DMA.
 */
__STATIC_INLINE bool XMC_ETH_MAC_IsTxDescriptorOwnedByDma(XMC_ETH_MAC_t *const eth_mac)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  return ((eth_mac->tx_desc[eth_mac->tx_index].status & ETH_MAC_DMA_TDES0_OWN) != 0U);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	695a      	ldr	r2, [r3, #20]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800419e:	015b      	lsls	r3, r3, #5
 80041a0:	4413      	add	r3, r2
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	0fdb      	lsrs	r3, r3, #31
 80041a6:	b2db      	uxtb	r3, r3
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <XMC_ETH_MAC_EnableRx>:
 * The function enables the receiver state machine of the MAC and puts the
 * receive process in running state. The DMA then acquires the descriptor
 * from the receive list and processes the received frames.
 */
__STATIC_INLINE void XMC_ETH_MAC_EnableRx(XMC_ETH_MAC_t *const eth_mac)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  eth_mac->regs->OPERATION_MODE |= (uint32_t)ETH_OPERATION_MODE_SR_Msk;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6819      	ldr	r1, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041c8:	3318      	adds	r3, #24
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f043 0202 	orr.w	r2, r3, #2
 80041d0:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80041d4:	3318      	adds	r3, #24
 80041d6:	601a      	str	r2, [r3, #0]
  eth_mac->regs->MAC_CONFIGURATION |= (uint32_t)ETH_MAC_CONFIGURATION_RE_Msk;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6812      	ldr	r2, [r2, #0]
 80041e0:	6812      	ldr	r2, [r2, #0]
 80041e2:	f042 0204 	orr.w	r2, r2, #4
 80041e6:	601a      	str	r2, [r3, #0]
}
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop

080041f4 <XMC_ETH_MAC_DisableRx>:
 *
 * \par
 * The function disables the receive process.
 */
__STATIC_INLINE void XMC_ETH_MAC_DisableRx(XMC_ETH_MAC_t *const eth_mac)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  eth_mac->regs->MAC_CONFIGURATION &= (uint32_t)~ETH_MAC_CONFIGURATION_RE_Msk;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6812      	ldr	r2, [r2, #0]
 8004204:	6812      	ldr	r2, [r2, #0]
 8004206:	f022 0204 	bic.w	r2, r2, #4
 800420a:	601a      	str	r2, [r3, #0]
  eth_mac->regs->OPERATION_MODE &= (uint32_t)~ETH_OPERATION_MODE_SR_Msk;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6819      	ldr	r1, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004218:	3318      	adds	r3, #24
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f023 0202 	bic.w	r2, r3, #2
 8004220:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8004224:	3318      	adds	r3, #24
 8004226:	601a      	str	r2, [r3, #0]
}
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop

08004234 <XMC_ETH_MAC_EnableTx>:
 * The function enables the transmit state machine of the MAC and puts the
 * transmit process in running state. The DMA then checks the TX list at the
 * current position for transmitting a frame.
 */
__STATIC_INLINE void XMC_ETH_MAC_EnableTx(XMC_ETH_MAC_t *const eth_mac)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  eth_mac->regs->OPERATION_MODE |= (uint32_t)ETH_OPERATION_MODE_ST_Msk;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6819      	ldr	r1, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004248:	3318      	adds	r3, #24
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004250:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8004254:	3318      	adds	r3, #24
 8004256:	601a      	str	r2, [r3, #0]
  eth_mac->regs->MAC_CONFIGURATION |= (uint32_t)ETH_MAC_CONFIGURATION_TE_Msk;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6812      	ldr	r2, [r2, #0]
 8004260:	6812      	ldr	r2, [r2, #0]
 8004262:	f042 0208 	orr.w	r2, r2, #8
 8004266:	601a      	str	r2, [r3, #0]
}
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop

08004274 <XMC_ETH_MAC_DisableTx>:
 *
 * \par
 * The function disables the transmit process.
 */
__STATIC_INLINE void XMC_ETH_MAC_DisableTx(XMC_ETH_MAC_t *const eth_mac)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  eth_mac->regs->MAC_CONFIGURATION &= (uint32_t)~ETH_MAC_CONFIGURATION_TE_Msk;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6812      	ldr	r2, [r2, #0]
 8004284:	6812      	ldr	r2, [r2, #0]
 8004286:	f022 0208 	bic.w	r2, r2, #8
 800428a:	601a      	str	r2, [r3, #0]
  eth_mac->regs->OPERATION_MODE &= (uint32_t)~ETH_OPERATION_MODE_ST_Msk;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6819      	ldr	r1, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004298:	3318      	adds	r3, #24
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80042a0:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80042a4:	3318      	adds	r3, #24
 80042a6:	601a      	str	r2, [r3, #0]
}
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop

080042b4 <XMC_ETH_MAC_ResumeTx>:
 * current descriptor pointed to by the "current host transmit descriptor" reg.
 * If that descriptor is not available (owned by the CPU), the transmission
 * returns to the suspend state else the transmission resumes.
 */
__STATIC_INLINE void XMC_ETH_MAC_ResumeTx(XMC_ETH_MAC_t *const eth_mac)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_TPS_Msk;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c4:	3314      	adds	r3, #20
 80042c6:	2202      	movs	r2, #2
 80042c8:	601a      	str	r2, [r3, #0]
  eth_mac->regs->TRANSMIT_POLL_DEMAND = 0U;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d2:	3304      	adds	r3, #4
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
}
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop

080042e4 <XMC_ETH_MAC_ResumeRx>:
 * current descriptor pointed to by the "current host transmit descriptor" reg.
 * If that descriptor is not available (owned by the CPU), the transmission
 * returns to the suspend state else the transmission resumes.
 */
__STATIC_INLINE void XMC_ETH_MAC_ResumeRx(XMC_ETH_MAC_t *const eth_mac)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_RU_Msk;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f4:	3314      	adds	r3, #20
 80042f6:	2280      	movs	r2, #128	; 0x80
 80042f8:	601a      	str	r2, [r3, #0]
  eth_mac->regs->RECEIVE_POLL_DEMAND = 0U;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004302:	3308      	adds	r3, #8
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]
}
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop

08004314 <XMC_ETH_MAC_GetTxBuffer>:
 *
 * \par<b>Description: </b><br>
 * Returns the current TX buffer.
 */
__STATIC_INLINE uint8_t *XMC_ETH_MAC_GetTxBuffer(XMC_ETH_MAC_t *const eth_mac)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  return (uint8_t *)(eth_mac->tx_desc[eth_mac->tx_index].buffer1);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	695a      	ldr	r2, [r3, #20]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004326:	015b      	lsls	r3, r3, #5
 8004328:	4413      	add	r3, r2
 800432a:	689b      	ldr	r3, [r3, #8]
}
 800432c:	4618      	mov	r0, r3
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <XMC_ETH_MAC_GetRxBuffer>:
 *
 * \par<b>Description: </b><br>
 * Returns the current RX buffer.
 */
__STATIC_INLINE uint8_t *XMC_ETH_MAC_GetRxBuffer(XMC_ETH_MAC_t *const eth_mac)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  return (uint8_t *)(eth_mac->rx_desc[eth_mac->rx_index].buffer1); 
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800434a:	015b      	lsls	r3, r3, #5
 800434c:	4413      	add	r3, r2
 800434e:	689b      	ldr	r3, [r3, #8]
}
 8004350:	4618      	mov	r0, r3
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <XMC_ETH_MAC_SetTxBufferSize>:
 *
 * \par<b>Description: </b><br>
 * Sets the current TX buffer size.
 */
__STATIC_INLINE void XMC_ETH_MAC_SetTxBufferSize(XMC_ETH_MAC_t *const eth_mac, uint32_t size)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  eth_mac->tx_desc[eth_mac->tx_index].length = size;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695a      	ldr	r2, [r3, #20]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004370:	015b      	lsls	r3, r3, #5
 8004372:	4413      	add	r3, r2
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	605a      	str	r2, [r3, #4]
}
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop

08004384 <ethernetif_link_callback>:
err_t ethernetif_init(struct netif *netif);
static void ethernetif_link_callback(struct netif *netif);
static void ethernetif_link_status(void *args);

static void ethernetif_link_callback(struct netif *netif)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  XMC_ETH_LINK_SPEED_t speed;
  XMC_ETH_LINK_DUPLEX_t duplex;
  bool phy_autoneg_state;
  uint32_t retries = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]
  int32_t status;

  if (netif_is_link_up(netif))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004396:	f003 0310 	and.w	r3, r3, #16
 800439a:	2b00      	cmp	r3, #0
 800439c:	d05d      	beq.n	800445a <ethernetif_link_callback+0xd6>
  {
    if((status = XMC_ETH_PHY_Init(&eth_mac, ETH_LWIP_0_PHY_ADDR, &eth_phy_config)) != XMC_ETH_PHY_STATUS_OK)
 800439e:	4838      	ldr	r0, [pc, #224]	; (8004480 <ethernetif_link_callback+0xfc>)
 80043a0:	2100      	movs	r1, #0
 80043a2:	4a38      	ldr	r2, [pc, #224]	; (8004484 <ethernetif_link_callback+0x100>)
 80043a4:	f003 fcf2 	bl	8007d8c <XMC_ETH_PHY_Init>
 80043a8:	6138      	str	r0, [r7, #16]
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d004      	beq.n	80043ba <ethernetif_link_callback+0x36>
    {
      ETH_LWIP_Error((ETH_LWIP_ERROR_t)status);
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 fa63 	bl	8004880 <ETH_LWIP_Error>
    }

    /* If autonegotiation is enabled */
    do {
      phy_autoneg_state = XMC_ETH_PHY_IsAutonegotiationCompleted(&eth_mac, ETH_LWIP_0_PHY_ADDR);
 80043ba:	4831      	ldr	r0, [pc, #196]	; (8004480 <ethernetif_link_callback+0xfc>)
 80043bc:	2100      	movs	r1, #0
 80043be:	f003 fdab 	bl	8007f18 <XMC_ETH_PHY_IsAutonegotiationCompleted>
 80043c2:	4603      	mov	r3, r0
 80043c4:	73fb      	strb	r3, [r7, #15]
      retries++;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	3301      	adds	r3, #1
 80043ca:	617b      	str	r3, [r7, #20]
    } while ((phy_autoneg_state == false) && (retries < ETH_LWIP_PHY_MAX_RETRIES));
 80043cc:	7bfb      	ldrb	r3, [r7, #15]
 80043ce:	f083 0301 	eor.w	r3, r3, #1
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <ethernetif_link_callback+0x5c>
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	4a2b      	ldr	r2, [pc, #172]	; (8004488 <ethernetif_link_callback+0x104>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d9ec      	bls.n	80043ba <ethernetif_link_callback+0x36>
    
    if(phy_autoneg_state == false)
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
 80043e2:	f083 0301 	eor.w	r3, r3, #1
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <ethernetif_link_callback+0x6e>
    {
      ETH_LWIP_Error(ETH_LWIP_ERROR_PHY_TIMEOUT);
 80043ec:	2004      	movs	r0, #4
 80043ee:	f000 fa47 	bl	8004880 <ETH_LWIP_Error>
    }
	
    speed = XMC_ETH_PHY_GetLinkSpeed(&eth_mac, ETH_LWIP_0_PHY_ADDR);
 80043f2:	4823      	ldr	r0, [pc, #140]	; (8004480 <ethernetif_link_callback+0xfc>)
 80043f4:	2100      	movs	r1, #0
 80043f6:	f003 fd57 	bl	8007ea8 <XMC_ETH_PHY_GetLinkSpeed>
 80043fa:	4603      	mov	r3, r0
 80043fc:	81bb      	strh	r3, [r7, #12]
    duplex = XMC_ETH_PHY_GetLinkDuplex(&eth_mac, ETH_LWIP_0_PHY_ADDR);
 80043fe:	4820      	ldr	r0, [pc, #128]	; (8004480 <ethernetif_link_callback+0xfc>)
 8004400:	2100      	movs	r1, #0
 8004402:	f003 fd6d 	bl	8007ee0 <XMC_ETH_PHY_GetLinkDuplex>
 8004406:	4603      	mov	r3, r0
 8004408:	817b      	strh	r3, [r7, #10]
	
    XMC_ETH_MAC_SetLink(&eth_mac, speed, duplex);
 800440a:	89ba      	ldrh	r2, [r7, #12]
 800440c:	897b      	ldrh	r3, [r7, #10]
 800440e:	481c      	ldr	r0, [pc, #112]	; (8004480 <ethernetif_link_callback+0xfc>)
 8004410:	4611      	mov	r1, r2
 8004412:	461a      	mov	r2, r3
 8004414:	f7ff fe8c 	bl	8004130 <XMC_ETH_MAC_SetLink>
    /* Enable ethernet interrupts */
    XMC_ETH_MAC_EnableEvent(&eth_mac, (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE);
 8004418:	4819      	ldr	r0, [pc, #100]	; (8004480 <ethernetif_link_callback+0xfc>)
 800441a:	2140      	movs	r1, #64	; 0x40
 800441c:	f7fd fda8 	bl	8001f70 <XMC_ETH_MAC_EnableEvent>

    NVIC_SetPriority((IRQn_Type)108, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 63U, 0U));
 8004420:	f7ff fdae 	bl	8003f80 <NVIC_GetPriorityGrouping>
 8004424:	4603      	mov	r3, r0
 8004426:	4618      	mov	r0, r3
 8004428:	213f      	movs	r1, #63	; 0x3f
 800442a:	2200      	movs	r2, #0
 800442c:	f7ff fe2c 	bl	8004088 <NVIC_EncodePriority>
 8004430:	4603      	mov	r3, r0
 8004432:	206c      	movs	r0, #108	; 0x6c
 8004434:	4619      	mov	r1, r3
 8004436:	f7ff fdfd 	bl	8004034 <NVIC_SetPriority>
    NVIC_ClearPendingIRQ((IRQn_Type)108);
 800443a:	206c      	movs	r0, #108	; 0x6c
 800443c:	f7ff fde0 	bl	8004000 <NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ((IRQn_Type)108);
 8004440:	206c      	movs	r0, #108	; 0x6c
 8004442:	f7ff fdab 	bl	8003f9c <NVIC_EnableIRQ>
    XMC_ETH_MAC_EnableTx(&eth_mac);
 8004446:	480e      	ldr	r0, [pc, #56]	; (8004480 <ethernetif_link_callback+0xfc>)
 8004448:	f7ff fef4 	bl	8004234 <XMC_ETH_MAC_EnableTx>
    XMC_ETH_MAC_EnableRx(&eth_mac);
 800444c:	480c      	ldr	r0, [pc, #48]	; (8004480 <ethernetif_link_callback+0xfc>)
 800444e:	f7ff feb1 	bl	80041b4 <XMC_ETH_MAC_EnableRx>
#elif LWIP_AUTOIP == 1
    /* Start AUTOIP probing */
    autoip_start(&xnetif);
#else
    /* When the netif is fully configured this function must be called. */
    netif_set_up(&xnetif);
 8004452:	480e      	ldr	r0, [pc, #56]	; (800448c <ethernetif_link_callback+0x108>)
 8004454:	f002 fc9c 	bl	8006d90 <netif_set_up>
 8004458:	e00f      	b.n	800447a <ethernetif_link_callback+0xf6>

  }
  else
  {
    /* Enable ethernet interrupts */
    XMC_ETH_MAC_DisableEvent(&eth_mac, (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE);
 800445a:	4809      	ldr	r0, [pc, #36]	; (8004480 <ethernetif_link_callback+0xfc>)
 800445c:	2140      	movs	r1, #64	; 0x40
 800445e:	f7fd fdbf 	bl	8001fe0 <XMC_ETH_MAC_DisableEvent>
    NVIC_DisableIRQ((IRQn_Type)108);
 8004462:	206c      	movs	r0, #108	; 0x6c
 8004464:	f7ff fdb2 	bl	8003fcc <NVIC_DisableIRQ>

    XMC_ETH_MAC_DisableTx(&eth_mac);
 8004468:	4805      	ldr	r0, [pc, #20]	; (8004480 <ethernetif_link_callback+0xfc>)
 800446a:	f7ff ff03 	bl	8004274 <XMC_ETH_MAC_DisableTx>
    XMC_ETH_MAC_DisableRx(&eth_mac);
 800446e:	4804      	ldr	r0, [pc, #16]	; (8004480 <ethernetif_link_callback+0xfc>)
 8004470:	f7ff fec0 	bl	80041f4 <XMC_ETH_MAC_DisableRx>
#elif LWIP_AUTOIP == 1
    /* Stop AUTOIP probing */
    autoip_stop(&xnetif);
#else
    /* When the netif link is down, set the status down. */
    netif_set_down(&xnetif);
 8004474:	4805      	ldr	r0, [pc, #20]	; (800448c <ethernetif_link_callback+0x108>)
 8004476:	f002 fcc1 	bl	8006dfc <netif_set_down>
#endif

  }
}
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	1ffe8a40 	.word	0x1ffe8a40
 8004484:	08008ec8 	.word	0x08008ec8
 8004488:	000ffffe 	.word	0x000ffffe
 800448c:	1ffe8a70 	.word	0x1ffe8a70

08004490 <ethernetif_link_status>:

static void ethernetif_link_status(void *args)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]

  if (XMC_ETH_PHY_GetLinkStatus(&eth_mac, ETH_LWIP_0_PHY_ADDR) == XMC_ETH_LINK_STATUS_DOWN)
 8004498:	4812      	ldr	r0, [pc, #72]	; (80044e4 <ethernetif_link_status+0x54>)
 800449a:	2100      	movs	r1, #0
 800449c:	f003 fcea 	bl	8007e74 <XMC_ETH_PHY_GetLinkStatus>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10a      	bne.n	80044bc <ethernetif_link_status+0x2c>
  {
    if (netif_is_link_up(&xnetif))
 80044a6:	4b10      	ldr	r3, [pc, #64]	; (80044e8 <ethernetif_link_status+0x58>)
 80044a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80044ac:	f003 0310 	and.w	r3, r3, #16
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00d      	beq.n	80044d0 <ethernetif_link_status+0x40>
    {
      netif_set_link_down(&xnetif);
 80044b4:	480c      	ldr	r0, [pc, #48]	; (80044e8 <ethernetif_link_status+0x58>)
 80044b6:	f002 fd01 	bl	8006ebc <netif_set_link_down>
 80044ba:	e009      	b.n	80044d0 <ethernetif_link_status+0x40>
    }
  }
  else
  {
    if (!netif_is_link_up(&xnetif))
 80044bc:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <ethernetif_link_status+0x58>)
 80044be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80044c2:	f003 0310 	and.w	r3, r3, #16
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d102      	bne.n	80044d0 <ethernetif_link_status+0x40>
    {
      netif_set_link_up(&xnetif);
 80044ca:	4807      	ldr	r0, [pc, #28]	; (80044e8 <ethernetif_link_status+0x58>)
 80044cc:	f002 fcb8 	bl	8006e40 <netif_set_link_up>
    }
  }

  sys_timeout(1000U, ethernetif_link_status, NULL);
 80044d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044d4:	4905      	ldr	r1, [pc, #20]	; (80044ec <ethernetif_link_status+0x5c>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	f003 f8a2 	bl	8007620 <sys_timeout>

}
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	1ffe8a40 	.word	0x1ffe8a40
 80044e8:	1ffe8a70 	.word	0x1ffe8a70
 80044ec:	08004491 	.word	0x08004491

080044f0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  XMC_ETH_MAC_PORT_CTRL_t port_control;
  XMC_GPIO_CONFIG_t gpio_config;
  gpio_config.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 80044f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044fc:	60fb      	str	r3, [r7, #12]
  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 80044fe:	2300      	movs	r3, #0
 8004500:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_CRS_DV, &gpio_config);
 8004502:	f107 0308 	add.w	r3, r7, #8
 8004506:	4847      	ldr	r0, [pc, #284]	; (8004624 <low_level_init+0x134>)
 8004508:	2109      	movs	r1, #9
 800450a:	461a      	mov	r2, r3
 800450c:	f7fb ff56 	bl	80003bc <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 8004510:	2300      	movs	r3, #0
 8004512:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_RXER, &gpio_config);
 8004514:	f107 0308 	add.w	r3, r7, #8
 8004518:	4843      	ldr	r0, [pc, #268]	; (8004628 <low_level_init+0x138>)
 800451a:	2104      	movs	r1, #4
 800451c:	461a      	mov	r2, r3
 800451e:	f7fb ff4d 	bl	80003bc <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 8004522:	2300      	movs	r3, #0
 8004524:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_RXD0, &gpio_config);
 8004526:	f107 0308 	add.w	r3, r7, #8
 800452a:	483f      	ldr	r0, [pc, #252]	; (8004628 <low_level_init+0x138>)
 800452c:	2102      	movs	r1, #2
 800452e:	461a      	mov	r2, r3
 8004530:	f7fb ff44 	bl	80003bc <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 8004534:	2300      	movs	r3, #0
 8004536:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_RXD1, &gpio_config);
 8004538:	f107 0308 	add.w	r3, r7, #8
 800453c:	483a      	ldr	r0, [pc, #232]	; (8004628 <low_level_init+0x138>)
 800453e:	2103      	movs	r1, #3
 8004540:	461a      	mov	r2, r3
 8004542:	f7fb ff3b 	bl	80003bc <XMC_GPIO_Init>

  gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE;
 8004546:	2300      	movs	r3, #0
 8004548:	743b      	strb	r3, [r7, #16]
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 800454a:	2388      	movs	r3, #136	; 0x88
 800454c:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_TXEN, &gpio_config);
 800454e:	f107 0308 	add.w	r3, r7, #8
 8004552:	4835      	ldr	r0, [pc, #212]	; (8004628 <low_level_init+0x138>)
 8004554:	2105      	movs	r1, #5
 8004556:	461a      	mov	r2, r3
 8004558:	f7fb ff30 	bl	80003bc <XMC_GPIO_Init>

  gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE;
 800455c:	2300      	movs	r3, #0
 800455e:	743b      	strb	r3, [r7, #16]
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8004560:	2388      	movs	r3, #136	; 0x88
 8004562:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_TXD0, &gpio_config);
 8004564:	f107 0308 	add.w	r3, r7, #8
 8004568:	482f      	ldr	r0, [pc, #188]	; (8004628 <low_level_init+0x138>)
 800456a:	2108      	movs	r1, #8
 800456c:	461a      	mov	r2, r3
 800456e:	f7fb ff25 	bl	80003bc <XMC_GPIO_Init>

  gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE;
 8004572:	2300      	movs	r3, #0
 8004574:	743b      	strb	r3, [r7, #16]
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8004576:	2388      	movs	r3, #136	; 0x88
 8004578:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_TXD1, &gpio_config);
 800457a:	f107 0308 	add.w	r3, r7, #8
 800457e:	482a      	ldr	r0, [pc, #168]	; (8004628 <low_level_init+0x138>)
 8004580:	2109      	movs	r1, #9
 8004582:	461a      	mov	r2, r3
 8004584:	f7fb ff1a 	bl	80003bc <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 8004588:	2300      	movs	r3, #0
 800458a:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_RMII_CLK, &gpio_config);
 800458c:	f107 0308 	add.w	r3, r7, #8
 8004590:	4824      	ldr	r0, [pc, #144]	; (8004624 <low_level_init+0x134>)
 8004592:	2108      	movs	r1, #8
 8004594:	461a      	mov	r2, r3
 8004596:	f7fb ff11 	bl	80003bc <XMC_GPIO_Init>

  gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE;
 800459a:	2300      	movs	r3, #0
 800459c:	743b      	strb	r3, [r7, #16]
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 800459e:	2388      	movs	r3, #136	; 0x88
 80045a0:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_MDC, &gpio_config);
 80045a2:	f107 0308 	add.w	r3, r7, #8
 80045a6:	4820      	ldr	r0, [pc, #128]	; (8004628 <low_level_init+0x138>)
 80045a8:	2107      	movs	r1, #7
 80045aa:	461a      	mov	r2, r3
 80045ac:	f7fb ff06 	bl	80003bc <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 80045b0:	2300      	movs	r3, #0
 80045b2:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_MDIO, &gpio_config);
 80045b4:	f107 0308 	add.w	r3, r7, #8
 80045b8:	481b      	ldr	r0, [pc, #108]	; (8004628 <low_level_init+0x138>)
 80045ba:	2100      	movs	r1, #0
 80045bc:	461a      	mov	r2, r3
 80045be:	f7fb fefd 	bl	80003bc <XMC_GPIO_Init>


  XMC_GPIO_SetHardwareControl(ETH_LWIP_0_MDIO, XMC_GPIO_HWCTRL_PERIPHERAL1);
 80045c2:	4819      	ldr	r0, [pc, #100]	; (8004628 <low_level_init+0x138>)
 80045c4:	2100      	movs	r1, #0
 80045c6:	2201      	movs	r2, #1
 80045c8:	f7fd fdc8 	bl	800215c <XMC_GPIO_SetHardwareControl>


  port_control.mode = XMC_ETH_MAC_PORT_CTRL_MODE_RMII;
 80045cc:	7dfb      	ldrb	r3, [r7, #23]
 80045ce:	f043 0304 	orr.w	r3, r3, #4
 80045d2:	75fb      	strb	r3, [r7, #23]
  port_control.rxd0 = (XMC_ETH_MAC_PORT_CTRL_RXD0_t)0U;
 80045d4:	7d3b      	ldrb	r3, [r7, #20]
 80045d6:	f36f 0301 	bfc	r3, #0, #2
 80045da:	753b      	strb	r3, [r7, #20]
  port_control.rxd1 = (XMC_ETH_MAC_PORT_CTRL_RXD1_t)0U;
 80045dc:	7d3b      	ldrb	r3, [r7, #20]
 80045de:	f36f 0383 	bfc	r3, #2, #2
 80045e2:	753b      	strb	r3, [r7, #20]
  port_control.clk_rmii = (XMC_ETH_MAC_PORT_CTRL_CLK_RMII_t)2U;
 80045e4:	7d7b      	ldrb	r3, [r7, #21]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f362 0301 	bfi	r3, r2, #0, #2
 80045ec:	757b      	strb	r3, [r7, #21]
  port_control.crs_dv = (XMC_ETH_MAC_PORT_CTRL_CRS_DV_t)2U;
 80045ee:	7d7b      	ldrb	r3, [r7, #21]
 80045f0:	2202      	movs	r2, #2
 80045f2:	f362 0383 	bfi	r3, r2, #2, #2
 80045f6:	757b      	strb	r3, [r7, #21]
  port_control.rxer = (XMC_ETH_MAC_PORT_CTRL_RXER_t)0U;
 80045f8:	7d7b      	ldrb	r3, [r7, #21]
 80045fa:	f36f 1387 	bfc	r3, #6, #2
 80045fe:	757b      	strb	r3, [r7, #21]
  port_control.mdio = (XMC_ETH_MAC_PORT_CTRL_MDIO_t)1U;
 8004600:	7dbb      	ldrb	r3, [r7, #22]
 8004602:	2201      	movs	r2, #1
 8004604:	f362 1387 	bfi	r3, r2, #6, #2
 8004608:	75bb      	strb	r3, [r7, #22]
  XMC_ETH_MAC_SetPortControl(&eth_mac, port_control);
 800460a:	4808      	ldr	r0, [pc, #32]	; (800462c <low_level_init+0x13c>)
 800460c:	6979      	ldr	r1, [r7, #20]
 800460e:	f7ff fd6d 	bl	80040ec <XMC_ETH_MAC_SetPortControl>

  (void)XMC_ETH_MAC_Init(&eth_mac);
 8004612:	4806      	ldr	r0, [pc, #24]	; (800462c <low_level_init+0x13c>)
 8004614:	f7fd faa0 	bl	8001b58 <XMC_ETH_MAC_Init>

  XMC_ETH_MAC_DisableJumboFrame(&eth_mac);
 8004618:	4804      	ldr	r0, [pc, #16]	; (800462c <low_level_init+0x13c>)
 800461a:	f7ff fd77 	bl	800410c <XMC_ETH_MAC_DisableJumboFrame>


}
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	48028f00 	.word	0x48028f00
 8004628:	48028200 	.word	0x48028200
 800462c:	1ffe8a40 	.word	0x1ffe8a40

08004630 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  struct pbuf *q;
  uint32_t framelen = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	613b      	str	r3, [r7, #16]
  uint8_t *buffer;
  
  if (p->tot_len > (u16_t)XMC_ETH_MAC_BUF_SIZE) {
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	891b      	ldrh	r3, [r3, #8]
 8004642:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <low_level_output+0x1e>
    return ERR_BUF;
 800464a:	23fe      	movs	r3, #254	; 0xfe
 800464c:	e040      	b.n	80046d0 <low_level_output+0xa0>
  }

  if (XMC_ETH_MAC_IsTxDescriptorOwnedByDma(&eth_mac))
 800464e:	4823      	ldr	r0, [pc, #140]	; (80046dc <low_level_output+0xac>)
 8004650:	f7ff fd9c 	bl	800418c <XMC_ETH_MAC_IsTxDescriptorOwnedByDma>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d004      	beq.n	8004664 <low_level_output+0x34>
  {
    XMC_ETH_MAC_ResumeTx(&eth_mac);
 800465a:	4820      	ldr	r0, [pc, #128]	; (80046dc <low_level_output+0xac>)
 800465c:	f7ff fe2a 	bl	80042b4 <XMC_ETH_MAC_ResumeTx>

    return ERR_BUF;
 8004660:	23fe      	movs	r3, #254	; 0xfe
 8004662:	e035      	b.n	80046d0 <low_level_output+0xa0>
  }
  else
  {
    buffer = XMC_ETH_MAC_GetTxBuffer(&eth_mac);
 8004664:	481d      	ldr	r0, [pc, #116]	; (80046dc <low_level_output+0xac>)
 8004666:	f7ff fe55 	bl	8004314 <XMC_ETH_MAC_GetTxBuffer>
 800466a:	60f8      	str	r0, [r7, #12]

#if ETH_PAD_SIZE
    pbuf_header(p, -ETH_PAD_SIZE);    /* Drop the padding word */
 800466c:	6838      	ldr	r0, [r7, #0]
 800466e:	f06f 0101 	mvn.w	r1, #1
 8004672:	f002 fda5 	bl	80071c0 <pbuf_header>
#endif

    for(q = p; q != NULL; q = q->next)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	617b      	str	r3, [r7, #20]
 800467a:	e017      	b.n	80046ac <low_level_output+0x7c>
    {
      /* Send the data from the pbuf to the interface, one pbuf at a
       time. The size of the data in each pbuf is kept in the ->len
       variable. */
      MEMCPY(buffer, q->payload, q->len);
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	895b      	ldrh	r3, [r3, #10]
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	4611      	mov	r1, r2
 8004688:	461a      	mov	r2, r3
 800468a:	f000 f90b 	bl	80048a4 <thumb2_memcpy>
      framelen += (uint32_t)q->len;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	895b      	ldrh	r3, [r3, #10]
 8004692:	461a      	mov	r2, r3
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	4413      	add	r3, r2
 8004698:	613b      	str	r3, [r7, #16]
      buffer += q->len;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	895b      	ldrh	r3, [r3, #10]
 800469e:	461a      	mov	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

#if ETH_PAD_SIZE
    pbuf_header(p, -ETH_PAD_SIZE);    /* Drop the padding word */
#endif

    for(q = p; q != NULL; q = q->next)
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e4      	bne.n	800467c <low_level_output+0x4c>
      framelen += (uint32_t)q->len;
      buffer += q->len;
    }

#if ETH_PAD_SIZE
    pbuf_header(p, ETH_PAD_SIZE);    /* Reclaim the padding word */
 80046b2:	6838      	ldr	r0, [r7, #0]
 80046b4:	2102      	movs	r1, #2
 80046b6:	f002 fd83 	bl	80071c0 <pbuf_header>
#endif

    XMC_ETH_MAC_SetTxBufferSize(&eth_mac, framelen);
 80046ba:	4808      	ldr	r0, [pc, #32]	; (80046dc <low_level_output+0xac>)
 80046bc:	6939      	ldr	r1, [r7, #16]
 80046be:	f7ff fe4d 	bl	800435c <XMC_ETH_MAC_SetTxBufferSize>

    XMC_ETH_MAC_ReturnTxDescriptor(&eth_mac);
 80046c2:	4806      	ldr	r0, [pc, #24]	; (80046dc <low_level_output+0xac>)
 80046c4:	f7fd fd10 	bl	80020e8 <XMC_ETH_MAC_ReturnTxDescriptor>
    XMC_ETH_MAC_ResumeTx(&eth_mac);
 80046c8:	4804      	ldr	r0, [pc, #16]	; (80046dc <low_level_output+0xac>)
 80046ca:	f7ff fdf3 	bl	80042b4 <XMC_ETH_MAC_ResumeTx>

    return ERR_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	b25b      	sxtb	r3, r3
  }
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	1ffe8a40 	.word	0x1ffe8a40

080046e0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
 */
static struct pbuf * low_level_input(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
  struct pbuf *p = NULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
  struct pbuf *q;
  uint32_t len;
  uint8_t *buffer;

  if (XMC_ETH_MAC_IsRxDescriptorOwnedByDma(&eth_mac) == false)
 80046ea:	482e      	ldr	r0, [pc, #184]	; (80047a4 <low_level_input+0xc4>)
 80046ec:	f7ff fd3a 	bl	8004164 <XMC_ETH_MAC_IsRxDescriptorOwnedByDma>
 80046f0:	4603      	mov	r3, r0
 80046f2:	f083 0301 	eor.w	r3, r3, #1
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d04d      	beq.n	8004798 <low_level_input+0xb8>
  {
    len = XMC_ETH_MAC_GetRxFrameSize(&eth_mac);
 80046fc:	4829      	ldr	r0, [pc, #164]	; (80047a4 <low_level_input+0xc4>)
 80046fe:	f7fd fb27 	bl	8001d50 <XMC_ETH_MAC_GetRxFrameSize>
 8004702:	6078      	str	r0, [r7, #4]
  
    if ((len > 0U) && (len <= (uint32_t)XMC_ETH_MAC_BUF_SIZE))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d040      	beq.n	800478c <low_level_input+0xac>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004710:	4293      	cmp	r3, r2
 8004712:	d83b      	bhi.n	800478c <low_level_input+0xac>
    {
#if ETH_PAD_SIZE
    len += ETH_PAD_SIZE;    /* allow room for Ethernet padding */
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3302      	adds	r3, #2
 8004718:	607b      	str	r3, [r7, #4]
#endif
  
      /* We allocate a pbuf chain of pbufs from the pool. */
      p = pbuf_alloc(PBUF_RAW, (u16_t)len, PBUF_POOL);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	b29b      	uxth	r3, r3
 800471e:	2003      	movs	r0, #3
 8004720:	4619      	mov	r1, r3
 8004722:	2203      	movs	r2, #3
 8004724:	f002 fbfa 	bl	8006f1c <pbuf_alloc>
 8004728:	60f8      	str	r0, [r7, #12]
    
      if (p != NULL)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d029      	beq.n	8004784 <low_level_input+0xa4>
      {
#if ETH_PAD_SIZE
        pbuf_header(p, -ETH_PAD_SIZE);  /* drop the padding word */
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f06f 0101 	mvn.w	r1, #1
 8004736:	f002 fd43 	bl	80071c0 <pbuf_header>
#endif
  
        buffer = XMC_ETH_MAC_GetRxBuffer(&eth_mac);
 800473a:	481a      	ldr	r0, [pc, #104]	; (80047a4 <low_level_input+0xc4>)
 800473c:	f7ff fdfc 	bl	8004338 <XMC_ETH_MAC_GetRxBuffer>
 8004740:	6038      	str	r0, [r7, #0]
  
        len = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	607b      	str	r3, [r7, #4]
        /* We iterate over the pbuf chain until we have read the entire
         * packet into the pbuf. */
        for (q = p; q != NULL; q = q->next)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	60bb      	str	r3, [r7, #8]
 800474a:	e014      	b.n	8004776 <low_level_input+0x96>
           * This does not necessarily have to be a memcpy, you can also preallocate
           * pbufs for a DMA-enabled MAC and after receiving truncate it to the
           * actually received size. In this case, ensure the tot_len member of the
           * pbuf is the sum of the chained pbuf len members.
           */
           MEMCPY(q->payload, &buffer[len], q->len);
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	6859      	ldr	r1, [r3, #4]
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	441a      	add	r2, r3
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	895b      	ldrh	r3, [r3, #10]
 800475a:	4608      	mov	r0, r1
 800475c:	4611      	mov	r1, r2
 800475e:	461a      	mov	r2, r3
 8004760:	f000 f8a0 	bl	80048a4 <thumb2_memcpy>
           len += q->len;
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	895b      	ldrh	r3, [r3, #10]
 8004768:	461a      	mov	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4413      	add	r3, r2
 800476e:	607b      	str	r3, [r7, #4]
        buffer = XMC_ETH_MAC_GetRxBuffer(&eth_mac);
  
        len = 0U;
        /* We iterate over the pbuf chain until we have read the entire
         * packet into the pbuf. */
        for (q = p; q != NULL; q = q->next)
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	60bb      	str	r3, [r7, #8]
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1e7      	bne.n	800474c <low_level_input+0x6c>
           */
           MEMCPY(q->payload, &buffer[len], q->len);
           len += q->len;
        }
#if ETH_PAD_SIZE
        pbuf_header(p, ETH_PAD_SIZE);    /* Reclaim the padding word */
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	2102      	movs	r1, #2
 8004780:	f002 fd1e 	bl	80071c0 <pbuf_header>
#endif
  
      }
      XMC_ETH_MAC_ReturnRxDescriptor(&eth_mac);
 8004784:	4807      	ldr	r0, [pc, #28]	; (80047a4 <low_level_input+0xc4>)
 8004786:	f7fd fc7f 	bl	8002088 <XMC_ETH_MAC_ReturnRxDescriptor>
 800478a:	e002      	b.n	8004792 <low_level_input+0xb2>
    }
    else
    {
      /* Discard frame */
      XMC_ETH_MAC_ReturnRxDescriptor(&eth_mac);
 800478c:	4805      	ldr	r0, [pc, #20]	; (80047a4 <low_level_input+0xc4>)
 800478e:	f7fd fc7b 	bl	8002088 <XMC_ETH_MAC_ReturnRxDescriptor>
    }
    XMC_ETH_MAC_ResumeRx(&eth_mac);
 8004792:	4804      	ldr	r0, [pc, #16]	; (80047a4 <low_level_input+0xc4>)
 8004794:	f7ff fda6 	bl	80042e4 <XMC_ETH_MAC_ResumeRx>
  }
  return p;  
 8004798:	68fb      	ldr	r3, [r7, #12]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	1ffe8a40 	.word	0x1ffe8a40

080047a8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void *arg)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80047b0:	2300      	movs	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]
  struct eth_hdr *ethhdr;
  struct netif *netif = (struct netif *)arg;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	613b      	str	r3, [r7, #16]


    p = low_level_input();
 80047b8:	f7ff ff92 	bl	80046e0 <low_level_input>
 80047bc:	6178      	str	r0, [r7, #20]

    while (p != NULL)
 80047be:	e024      	b.n	800480a <ethernetif_input+0x62>
    {
   	  ethhdr = p->payload;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	60fb      	str	r3, [r7, #12]
   	  switch (htons(ethhdr->type))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	89db      	ldrh	r3, [r3, #14]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	4618      	mov	r0, r3
 80047ce:	f001 ff27 	bl	8006620 <lwip_htons>
 80047d2:	4603      	mov	r3, r0
 80047d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d8:	d003      	beq.n	80047e2 <ethernetif_input+0x3a>
 80047da:	f640 0206 	movw	r2, #2054	; 0x806
 80047de:	4293      	cmp	r3, r2
 80047e0:	d10c      	bne.n	80047fc <ethernetif_input+0x54>
   	  {
   	    case ETHTYPE_IP:
   	    case ETHTYPE_ARP:
   	      /* full packet send to tcpip_thread to process */
          if (netif->input( p, netif) != ERR_OK)
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	6978      	ldr	r0, [r7, #20]
 80047e8:	6939      	ldr	r1, [r7, #16]
 80047ea:	4798      	blx	r3
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <ethernetif_input+0x52>
          {
            pbuf_free(p);
 80047f2:	6978      	ldr	r0, [r7, #20]
 80047f4:	f002 fd56 	bl	80072a4 <pbuf_free>
          }

          break;
 80047f8:	e004      	b.n	8004804 <ethernetif_input+0x5c>
 80047fa:	e003      	b.n	8004804 <ethernetif_input+0x5c>

   	    default:
   	      pbuf_free(p);
 80047fc:	6978      	ldr	r0, [r7, #20]
 80047fe:	f002 fd51 	bl	80072a4 <pbuf_free>
   	      break;
 8004802:	bf00      	nop
   	  }
      
      p = low_level_input();
 8004804:	f7ff ff6c 	bl	80046e0 <low_level_input>
 8004808:	6178      	str	r0, [r7, #20]
  struct netif *netif = (struct netif *)arg;


    p = low_level_input();

    while (p != NULL)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1d7      	bne.n	80047c0 <ethernetif_input+0x18>
      
      p = low_level_input();
    }


}
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop

08004818 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif* netif)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));


  netif->output = etharp_output;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a0c      	ldr	r2, [pc, #48]	; (8004854 <ethernetif_init+0x3c>)
 8004824:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a0b      	ldr	r2, [pc, #44]	; (8004858 <ethernetif_init+0x40>)
 800482a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7ff fe5f 	bl	80044f0 <low_level_init>

  sys_timeout(1000U, ethernetif_link_status, NULL);
 8004832:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004836:	4909      	ldr	r1, [pc, #36]	; (800485c <ethernetif_init+0x44>)
 8004838:	2200      	movs	r2, #0
 800483a:	f002 fef1 	bl	8007620 <sys_timeout>

  netif_set_link_callback(netif, ethernetif_link_callback);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	4907      	ldr	r1, [pc, #28]	; (8004860 <ethernetif_init+0x48>)
 8004842:	f002 fb5b 	bl	8006efc <netif_set_link_callback>


  return ERR_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	b25b      	sxtb	r3, r3
}
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	08005021 	.word	0x08005021
 8004858:	08004631 	.word	0x08004631
 800485c:	08004491 	.word	0x08004491
 8004860:	08004385 	.word	0x08004385

08004864 <ETH0_0_IRQHandler>:

void IRQ_Hdlr_108(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  XMC_ETH_MAC_ClearEventStatus(&eth_mac, XMC_ETH_MAC_EVENT_RECEIVE);
 8004868:	4803      	ldr	r0, [pc, #12]	; (8004878 <ETH0_0_IRQHandler+0x14>)
 800486a:	2140      	movs	r1, #64	; 0x40
 800486c:	f7fd fbde 	bl	800202c <XMC_ETH_MAC_ClearEventStatus>
    ethernetif_input(&xnetif);
 8004870:	4802      	ldr	r0, [pc, #8]	; (800487c <ETH0_0_IRQHandler+0x18>)
 8004872:	f7ff ff99 	bl	80047a8 <ethernetif_input>
}
 8004876:	bd80      	pop	{r7, pc}
 8004878:	1ffe8a40 	.word	0x1ffe8a40
 800487c:	1ffe8a70 	.word	0x1ffe8a70

08004880 <ETH_LWIP_Error>:
    ethernetif_input(&xnetif);
}

/*Weak function to be called incase of error*/
__WEAK void ETH_LWIP_Error (ETH_LWIP_ERROR_t error_code)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	4603      	mov	r3, r0
 8004888:	71fb      	strb	r3, [r7, #7]
  switch (error_code)
 800488a:	79fb      	ldrb	r3, [r7, #7]
 800488c:	2b03      	cmp	r3, #3
 800488e:	d004      	beq.n	800489a <ETH_LWIP_Error+0x1a>
 8004890:	2b04      	cmp	r3, #4
 8004892:	d003      	beq.n	800489c <ETH_LWIP_Error+0x1c>
 8004894:	2b02      	cmp	r3, #2
 8004896:	d002      	beq.n	800489e <ETH_LWIP_Error+0x1e>
 8004898:	e002      	b.n	80048a0 <ETH_LWIP_Error+0x20>
  {
    case ETH_LWIP_ERROR_PHY_DEVICE_ID:
       /* Wrong PHY address configured in the ETH_LWIP APP Network Interface.
        * Because the connect PHY does not match the configuration or the PHYADR is wrong*/
       break;
 800489a:	e002      	b.n	80048a2 <ETH_LWIP_Error+0x22>

   case ETH_LWIP_ERROR_PHY_TIMEOUT:
      /* PHY did not respond.*/
      break;
 800489c:	e001      	b.n	80048a2 <ETH_LWIP_Error+0x22>

   case ETH_LWIP_ERROR_PHY_ERROR:
     /*PHY register update failed*/
     break;
 800489e:	e000      	b.n	80048a2 <ETH_LWIP_Error+0x22>

   default:
     break;
 80048a0:	bf00      	nop
  }

  for (;;);
 80048a2:	e7fe      	b.n	80048a2 <ETH_LWIP_Error+0x22>

080048a4 <thumb2_memcpy>:
   stack to improve its performance.  It copies 4 bytes at a time and
   unrolls the loop to perform 4 of these copies per loop iteration.
*/
__attribute__((naked)) void thumb2_memcpy(void* pDest, const void* pSource, size_t length)
{
    __asm (
 80048a4:	0913      	lsrs	r3, r2, #4
 80048a6:	d011      	beq.n	80048cc <thumb2_memcpy+0x28>
 80048a8:	f851 cb04 	ldr.w	ip, [r1], #4
 80048ac:	f840 cb04 	str.w	ip, [r0], #4
 80048b0:	f851 cb04 	ldr.w	ip, [r1], #4
 80048b4:	f840 cb04 	str.w	ip, [r0], #4
 80048b8:	f851 cb04 	ldr.w	ip, [r1], #4
 80048bc:	f840 cb04 	str.w	ip, [r0], #4
 80048c0:	f851 cb04 	ldr.w	ip, [r1], #4
 80048c4:	f840 cb04 	str.w	ip, [r0], #4
 80048c8:	3b01      	subs	r3, #1
 80048ca:	d1ed      	bne.n	80048a8 <thumb2_memcpy+0x4>
 80048cc:	f012 030f 	ands.w	r3, r2, #15
 80048d0:	d005      	beq.n	80048de <thumb2_memcpy+0x3a>
 80048d2:	f811 cb01 	ldrb.w	ip, [r1], #1
 80048d6:	f800 cb01 	strb.w	ip, [r0], #1
 80048da:	3b01      	subs	r3, #1
 80048dc:	d1f9      	bne.n	80048d2 <thumb2_memcpy+0x2e>
 80048de:	4770      	bx	lr

080048e0 <sys_now>:
#include "include/arch/cc.h"
#include "../include/lwip/sys.h"


u32_t sys_now(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  return (u32_t)(SYSTIMER_GetTickCount() * 0.01F);
 80048e4:	f7fe fb18 	bl	8002f18 <SYSTIMER_GetTickCount>
 80048e8:	ee07 0a90 	vmov	s15, r0
 80048ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8004904 <sys_now+0x24>
 80048f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048fc:	ee17 3a90 	vmov	r3, s15

}
 8004900:	4618      	mov	r0, r3
 8004902:	bd80      	pop	{r7, pc}
 8004904:	3c23d70a 	.word	0x3c23d70a

08004908 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8004910:	4915      	ldr	r1, [pc, #84]	; (8004968 <etharp_free_entry+0x60>)
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	4613      	mov	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d013      	beq.n	800494c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8004924:	4910      	ldr	r1, [pc, #64]	; (8004968 <etharp_free_entry+0x60>)
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	4613      	mov	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	440b      	add	r3, r1
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f002 fcb5 	bl	80072a4 <pbuf_free>
    arp_table[i].q = NULL;
 800493a:	490b      	ldr	r1, [pc, #44]	; (8004968 <etharp_free_entry+0x60>)
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	4613      	mov	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	440b      	add	r3, r1
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800494c:	4906      	ldr	r1, [pc, #24]	; (8004968 <etharp_free_entry+0x60>)
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	4613      	mov	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	440b      	add	r3, r1
 800495a:	3310      	adds	r3, #16
 800495c:	2200      	movs	r2, #0
 800495e:	709a      	strb	r2, [r3, #2]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	1ffe8b4c 	.word	0x1ffe8b4c

0800496c <etharp_tmr>:
 * This function should be called every ETHARP_TMR_INTERVAL milliseconds (5 seconds),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004972:	2300      	movs	r3, #0
 8004974:	71fb      	strb	r3, [r7, #7]
 8004976:	e05e      	b.n	8004a36 <etharp_tmr+0xca>
    u8_t state = arp_table[i].state;
 8004978:	79fa      	ldrb	r2, [r7, #7]
 800497a:	4932      	ldr	r1, [pc, #200]	; (8004a44 <etharp_tmr+0xd8>)
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	3310      	adds	r3, #16
 8004988:	789b      	ldrb	r3, [r3, #2]
 800498a:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800498c:	79bb      	ldrb	r3, [r7, #6]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d04e      	beq.n	8004a30 <etharp_tmr+0xc4>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8004992:	79fa      	ldrb	r2, [r7, #7]
 8004994:	492b      	ldr	r1, [pc, #172]	; (8004a44 <etharp_tmr+0xd8>)
 8004996:	4613      	mov	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	440b      	add	r3, r1
 80049a0:	3310      	adds	r3, #16
 80049a2:	78db      	ldrb	r3, [r3, #3]
 80049a4:	3301      	adds	r3, #1
 80049a6:	b2d8      	uxtb	r0, r3
 80049a8:	4926      	ldr	r1, [pc, #152]	; (8004a44 <etharp_tmr+0xd8>)
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	440b      	add	r3, r1
 80049b4:	3310      	adds	r3, #16
 80049b6:	4602      	mov	r2, r0
 80049b8:	70da      	strb	r2, [r3, #3]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80049ba:	79fa      	ldrb	r2, [r7, #7]
 80049bc:	4921      	ldr	r1, [pc, #132]	; (8004a44 <etharp_tmr+0xd8>)
 80049be:	4613      	mov	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	3310      	adds	r3, #16
 80049ca:	78db      	ldrb	r3, [r3, #3]
 80049cc:	2bef      	cmp	r3, #239	; 0xef
 80049ce:	d815      	bhi.n	80049fc <etharp_tmr+0x90>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80049d0:	79fa      	ldrb	r2, [r7, #7]
 80049d2:	491c      	ldr	r1, [pc, #112]	; (8004a44 <etharp_tmr+0xd8>)
 80049d4:	4613      	mov	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	440b      	add	r3, r1
 80049de:	3310      	adds	r3, #16
 80049e0:	789b      	ldrb	r3, [r3, #2]
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d10f      	bne.n	8004a06 <etharp_tmr+0x9a>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80049e6:	79fa      	ldrb	r2, [r7, #7]
 80049e8:	4916      	ldr	r1, [pc, #88]	; (8004a44 <etharp_tmr+0xd8>)
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	440b      	add	r3, r1
 80049f4:	3310      	adds	r3, #16
 80049f6:	78db      	ldrb	r3, [r3, #3]
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d904      	bls.n	8004a06 <etharp_tmr+0x9a>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80049fc:	79fb      	ldrb	r3, [r7, #7]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff ff82 	bl	8004908 <etharp_free_entry>
 8004a04:	e014      	b.n	8004a30 <etharp_tmr+0xc4>
      }
      else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING) {
 8004a06:	79fa      	ldrb	r2, [r7, #7]
 8004a08:	490e      	ldr	r1, [pc, #56]	; (8004a44 <etharp_tmr+0xd8>)
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	440b      	add	r3, r1
 8004a14:	3310      	adds	r3, #16
 8004a16:	789b      	ldrb	r3, [r3, #2]
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	d109      	bne.n	8004a30 <etharp_tmr+0xc4>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8004a1c:	79fa      	ldrb	r2, [r7, #7]
 8004a1e:	4909      	ldr	r1, [pc, #36]	; (8004a44 <etharp_tmr+0xd8>)
 8004a20:	4613      	mov	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	440b      	add	r3, r1
 8004a2a:	3310      	adds	r3, #16
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	709a      	strb	r2, [r3, #2]
{
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004a30:	79fb      	ldrb	r3, [r7, #7]
 8004a32:	3301      	adds	r3, #1
 8004a34:	71fb      	strb	r3, [r7, #7]
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	2b09      	cmp	r3, #9
 8004a3a:	d99d      	bls.n	8004978 <etharp_tmr+0xc>
        /* resend an ARP query here? */
      }
#endif /* ARP_QUEUEING */
    }
  }
}
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	1ffe8b4c 	.word	0x1ffe8b4c

08004a48 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	460b      	mov	r3, r1
 8004a52:	70fb      	strb	r3, [r7, #3]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8004a54:	230a      	movs	r3, #10
 8004a56:	75fb      	strb	r3, [r7, #23]
 8004a58:	230a      	movs	r3, #10
 8004a5a:	75bb      	strb	r3, [r7, #22]
  s8_t empty = ARP_TABLE_SIZE;
 8004a5c:	230a      	movs	r3, #10
 8004a5e:	757b      	strb	r3, [r7, #21]
  u8_t i = 0, age_pending = 0, age_stable = 0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	753b      	strb	r3, [r7, #20]
 8004a64:	2300      	movs	r3, #0
 8004a66:	74fb      	strb	r3, [r7, #19]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	74bb      	strb	r3, [r7, #18]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8004a6c:	230a      	movs	r3, #10
 8004a6e:	747b      	strb	r3, [r7, #17]
  /* its age */
  u8_t age_queue = 0;
 8004a70:	2300      	movs	r3, #0
 8004a72:	743b      	strb	r3, [r7, #16]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004a74:	2300      	movs	r3, #0
 8004a76:	753b      	strb	r3, [r7, #20]
 8004a78:	e084      	b.n	8004b84 <etharp_find_entry+0x13c>
    u8_t state = arp_table[i].state;
 8004a7a:	7d3a      	ldrb	r2, [r7, #20]
 8004a7c:	496b      	ldr	r1, [pc, #428]	; (8004c2c <etharp_find_entry+0x1e4>)
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	440b      	add	r3, r1
 8004a88:	3310      	adds	r3, #16
 8004a8a:	789b      	ldrb	r3, [r3, #2]
 8004a8c:	73fb      	strb	r3, [r7, #15]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8004a8e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004a92:	2b0a      	cmp	r3, #10
 8004a94:	d105      	bne.n	8004aa2 <etharp_find_entry+0x5a>
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d102      	bne.n	8004aa2 <etharp_find_entry+0x5a>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8004a9c:	7d3b      	ldrb	r3, [r7, #20]
 8004a9e:	757b      	strb	r3, [r7, #21]
 8004aa0:	e06d      	b.n	8004b7e <etharp_find_entry+0x136>
    } else if (state != ETHARP_STATE_EMPTY) {
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d06a      	beq.n	8004b7e <etharp_find_entry+0x136>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00d      	beq.n	8004aca <etharp_find_entry+0x82>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6819      	ldr	r1, [r3, #0]
 8004ab2:	7d3a      	ldrb	r2, [r7, #20]
 8004ab4:	485d      	ldr	r0, [pc, #372]	; (8004c2c <etharp_find_entry+0x1e4>)
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4403      	add	r3, r0
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	4299      	cmp	r1, r3
 8004ac4:	d101      	bne.n	8004aca <etharp_find_entry+0x82>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8004ac6:	7d3b      	ldrb	r3, [r7, #20]
 8004ac8:	e0aa      	b.n	8004c20 <etharp_find_entry+0x1d8>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d13b      	bne.n	8004b48 <etharp_find_entry+0x100>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8004ad0:	7d3a      	ldrb	r2, [r7, #20]
 8004ad2:	4956      	ldr	r1, [pc, #344]	; (8004c2c <etharp_find_entry+0x1e4>)
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	440b      	add	r3, r1
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d018      	beq.n	8004b16 <etharp_find_entry+0xce>
          if (arp_table[i].ctime >= age_queue) {
 8004ae4:	7d3a      	ldrb	r2, [r7, #20]
 8004ae6:	4951      	ldr	r1, [pc, #324]	; (8004c2c <etharp_find_entry+0x1e4>)
 8004ae8:	4613      	mov	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	3310      	adds	r3, #16
 8004af4:	78db      	ldrb	r3, [r3, #3]
 8004af6:	7c3a      	ldrb	r2, [r7, #16]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d840      	bhi.n	8004b7e <etharp_find_entry+0x136>
            old_queue = i;
 8004afc:	7d3b      	ldrb	r3, [r7, #20]
 8004afe:	747b      	strb	r3, [r7, #17]
            age_queue = arp_table[i].ctime;
 8004b00:	7d3a      	ldrb	r2, [r7, #20]
 8004b02:	494a      	ldr	r1, [pc, #296]	; (8004c2c <etharp_find_entry+0x1e4>)
 8004b04:	4613      	mov	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	3310      	adds	r3, #16
 8004b10:	78db      	ldrb	r3, [r3, #3]
 8004b12:	743b      	strb	r3, [r7, #16]
 8004b14:	e033      	b.n	8004b7e <etharp_find_entry+0x136>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8004b16:	7d3a      	ldrb	r2, [r7, #20]
 8004b18:	4944      	ldr	r1, [pc, #272]	; (8004c2c <etharp_find_entry+0x1e4>)
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	440b      	add	r3, r1
 8004b24:	3310      	adds	r3, #16
 8004b26:	78db      	ldrb	r3, [r3, #3]
 8004b28:	7cfa      	ldrb	r2, [r7, #19]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d827      	bhi.n	8004b7e <etharp_find_entry+0x136>
            old_pending = i;
 8004b2e:	7d3b      	ldrb	r3, [r7, #20]
 8004b30:	75fb      	strb	r3, [r7, #23]
            age_pending = arp_table[i].ctime;
 8004b32:	7d3a      	ldrb	r2, [r7, #20]
 8004b34:	493d      	ldr	r1, [pc, #244]	; (8004c2c <etharp_find_entry+0x1e4>)
 8004b36:	4613      	mov	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	440b      	add	r3, r1
 8004b40:	3310      	adds	r3, #16
 8004b42:	78db      	ldrb	r3, [r3, #3]
 8004b44:	74fb      	strb	r3, [r7, #19]
 8004b46:	e01a      	b.n	8004b7e <etharp_find_entry+0x136>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d917      	bls.n	8004b7e <etharp_find_entry+0x136>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8004b4e:	7d3a      	ldrb	r2, [r7, #20]
 8004b50:	4936      	ldr	r1, [pc, #216]	; (8004c2c <etharp_find_entry+0x1e4>)
 8004b52:	4613      	mov	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	3310      	adds	r3, #16
 8004b5e:	78db      	ldrb	r3, [r3, #3]
 8004b60:	7cba      	ldrb	r2, [r7, #18]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d80b      	bhi.n	8004b7e <etharp_find_entry+0x136>
            old_stable = i;
 8004b66:	7d3b      	ldrb	r3, [r7, #20]
 8004b68:	75bb      	strb	r3, [r7, #22]
            age_stable = arp_table[i].ctime;
 8004b6a:	7d3a      	ldrb	r2, [r7, #20]
 8004b6c:	492f      	ldr	r1, [pc, #188]	; (8004c2c <etharp_find_entry+0x1e4>)
 8004b6e:	4613      	mov	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	440b      	add	r3, r1
 8004b78:	3310      	adds	r3, #16
 8004b7a:	78db      	ldrb	r3, [r3, #3]
 8004b7c:	74bb      	strb	r3, [r7, #18]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004b7e:	7d3b      	ldrb	r3, [r7, #20]
 8004b80:	3301      	adds	r3, #1
 8004b82:	753b      	strb	r3, [r7, #20]
 8004b84:	7d3b      	ldrb	r3, [r7, #20]
 8004b86:	2b09      	cmp	r3, #9
 8004b88:	f67f af77 	bls.w	8004a7a <etharp_find_entry+0x32>
    }
  }
  /* { we have no match } => try to create a new entry */
   
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d108      	bne.n	8004ba8 <etharp_find_entry+0x160>
 8004b96:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004b9a:	2b0a      	cmp	r3, #10
 8004b9c:	d106      	bne.n	8004bac <etharp_find_entry+0x164>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8004b9e:	78fb      	ldrb	r3, [r7, #3]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <etharp_find_entry+0x164>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8004ba8:	23ff      	movs	r3, #255	; 0xff
 8004baa:	e039      	b.n	8004c20 <etharp_find_entry+0x1d8>
   * 
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */ 

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8004bac:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8004bb0:	2b09      	cmp	r3, #9
 8004bb2:	dc02      	bgt.n	8004bba <etharp_find_entry+0x172>
    i = empty;
 8004bb4:	7d7b      	ldrb	r3, [r7, #21]
 8004bb6:	753b      	strb	r3, [r7, #20]
 8004bb8:	e01a      	b.n	8004bf0 <etharp_find_entry+0x1a8>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8004bba:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004bbe:	2b09      	cmp	r3, #9
 8004bc0:	dc02      	bgt.n	8004bc8 <etharp_find_entry+0x180>
      /* recycle oldest stable*/
      i = old_stable;
 8004bc2:	7dbb      	ldrb	r3, [r7, #22]
 8004bc4:	753b      	strb	r3, [r7, #20]
 8004bc6:	e00f      	b.n	8004be8 <etharp_find_entry+0x1a0>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8004bc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004bcc:	2b09      	cmp	r3, #9
 8004bce:	dc02      	bgt.n	8004bd6 <etharp_find_entry+0x18e>
      /* recycle oldest pending */
      i = old_pending;
 8004bd0:	7dfb      	ldrb	r3, [r7, #23]
 8004bd2:	753b      	strb	r3, [r7, #20]
 8004bd4:	e008      	b.n	8004be8 <etharp_find_entry+0x1a0>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8004bd6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8004bda:	2b09      	cmp	r3, #9
 8004bdc:	dc02      	bgt.n	8004be4 <etharp_find_entry+0x19c>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8004bde:	7c7b      	ldrb	r3, [r7, #17]
 8004be0:	753b      	strb	r3, [r7, #20]
 8004be2:	e001      	b.n	8004be8 <etharp_find_entry+0x1a0>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8004be4:	23ff      	movs	r3, #255	; 0xff
 8004be6:	e01b      	b.n	8004c20 <etharp_find_entry+0x1d8>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 8004be8:	7d3b      	ldrb	r3, [r7, #20]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff fe8c 	bl	8004908 <etharp_free_entry>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d009      	beq.n	8004c0a <etharp_find_entry+0x1c2>
    /* set IP address */
    ip_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8004bf6:	7d3a      	ldrb	r2, [r7, #20]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6819      	ldr	r1, [r3, #0]
 8004bfc:	480b      	ldr	r0, [pc, #44]	; (8004c2c <etharp_find_entry+0x1e4>)
 8004bfe:	4613      	mov	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4403      	add	r3, r0
 8004c08:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8004c0a:	7d3a      	ldrb	r2, [r7, #20]
 8004c0c:	4907      	ldr	r1, [pc, #28]	; (8004c2c <etharp_find_entry+0x1e4>)
 8004c0e:	4613      	mov	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	440b      	add	r3, r1
 8004c18:	3310      	adds	r3, #16
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	70da      	strb	r2, [r3, #3]
  return (err_t)i;
 8004c1e:	7d3b      	ldrb	r3, [r7, #20]
 8004c20:	b25b      	sxtb	r3, r3
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	1ffe8b4c 	.word	0x1ffe8b4c

08004c30 <etharp_send_ip>:
 * @params dst the destination MAC address to be copied into the ethernet header
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t
etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
 8004c3c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETHARP_HWADDR_LEN));
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	3302      	adds	r3, #2
 8004c48:	4618      	mov	r0, r3
 8004c4a:	6839      	ldr	r1, [r7, #0]
 8004c4c:	2206      	movs	r2, #6
 8004c4e:	f7ff fe29 	bl	80048a4 <thumb2_memcpy>
  ETHADDR16_COPY(&ethhdr->src, src);
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	3308      	adds	r3, #8
 8004c56:	4618      	mov	r0, r3
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	2206      	movs	r2, #6
 8004c5c:	f7ff fe22 	bl	80048a4 <thumb2_memcpy>
  ethhdr->type = PP_HTONS(ETHTYPE_IP);
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f042 0208 	orr.w	r2, r2, #8
 8004c68:	739a      	strb	r2, [r3, #14]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	73da      	strb	r2, [r3, #15]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	4798      	blx	r3
 8004c78:	4603      	mov	r3, r0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3718      	adds	r7, #24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop

08004c84 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, ip_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	70fb      	strb	r3, [r7, #3]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d012      	beq.n	8004cbe <etharp_update_arp_entry+0x3a>
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00e      	beq.n	8004cbe <etharp_update_arp_entry+0x3a>
      ip_addr_isbroadcast(ipaddr, netif) ||
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	68f9      	ldr	r1, [r7, #12]
 8004ca8:	f001 fb62 	bl	8006370 <ip4_addr_isbroadcast>
 8004cac:	4603      	mov	r3, r0
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d105      	bne.n	8004cbe <etharp_update_arp_entry+0x3a>
      ip_addr_isbroadcast(ipaddr, netif) ||
      ip_addr_ismulticast(ipaddr)) {
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
      ip_addr_isbroadcast(ipaddr, netif) ||
 8004cba:	2be0      	cmp	r3, #224	; 0xe0
 8004cbc:	d101      	bne.n	8004cc2 <etharp_update_arp_entry+0x3e>
      ip_addr_ismulticast(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8004cbe:	23f2      	movs	r3, #242	; 0xf2
 8004cc0:	e067      	b.n	8004d92 <etharp_update_arp_entry+0x10e>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags);
 8004cc2:	78fb      	ldrb	r3, [r7, #3]
 8004cc4:	68b8      	ldr	r0, [r7, #8]
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	f7ff febe 	bl	8004a48 <etharp_find_entry>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8004cd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	da01      	bge.n	8004cdc <etharp_update_arp_entry+0x58>
    return (err_t)i;
 8004cd8:	7dfb      	ldrb	r3, [r7, #23]
 8004cda:	e05a      	b.n	8004d92 <etharp_update_arp_entry+0x10e>
    arp_table[i].state = ETHARP_STATE_STATIC;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8004cdc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8004ce0:	492e      	ldr	r1, [pc, #184]	; (8004d9c <etharp_update_arp_entry+0x118>)
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	440b      	add	r3, r1
 8004cec:	3310      	adds	r3, #16
 8004cee:	2202      	movs	r2, #2
 8004cf0:	709a      	strb	r2, [r3, #2]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8004cf2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8004cf6:	4929      	ldr	r1, [pc, #164]	; (8004d9c <etharp_update_arp_entry+0x118>)
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	440b      	add	r3, r1
 8004d02:	3308      	adds	r3, #8
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  snmp_insert_arpidx_tree(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8004d08:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	3308      	adds	r3, #8
 8004d16:	4a21      	ldr	r2, [pc, #132]	; (8004d9c <etharp_update_arp_entry+0x118>)
 8004d18:	4413      	add	r3, r2
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	6879      	ldr	r1, [r7, #4]
 8004d20:	2206      	movs	r2, #6
 8004d22:	f7ff fdbf 	bl	80048a4 <thumb2_memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8004d26:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8004d2a:	491c      	ldr	r1, [pc, #112]	; (8004d9c <etharp_update_arp_entry+0x118>)
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	3310      	adds	r3, #16
 8004d38:	2200      	movs	r2, #0
 8004d3a:	70da      	strb	r2, [r3, #3]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8004d3c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8004d40:	4916      	ldr	r1, [pc, #88]	; (8004d9c <etharp_update_arp_entry+0x118>)
 8004d42:	4613      	mov	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d01e      	beq.n	8004d90 <etharp_update_arp_entry+0x10c>
    struct pbuf *p = arp_table[i].q;
 8004d52:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8004d56:	4911      	ldr	r1, [pc, #68]	; (8004d9c <etharp_update_arp_entry+0x118>)
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8004d66:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8004d6a:	490c      	ldr	r1, [pc, #48]	; (8004d9c <etharp_update_arp_entry+0x118>)
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	3327      	adds	r3, #39	; 0x27
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	6939      	ldr	r1, [r7, #16]
 8004d82:	461a      	mov	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f7ff ff53 	bl	8004c30 <etharp_send_ip>
    /* free the queued IP packet */
    pbuf_free(p);
 8004d8a:	6938      	ldr	r0, [r7, #16]
 8004d8c:	f002 fa8a 	bl	80072a4 <pbuf_free>
  }
  return ERR_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	b25b      	sxtb	r3, r3
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	1ffe8b4c 	.word	0x1ffe8b4c

08004da0 <etharp_cleanup_netif>:
 * Remove all ARP table entries of the specified netif.
 *
 * @param netif points to a network interface
 */
void etharp_cleanup_netif(struct netif *netif)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004da8:	2300      	movs	r3, #0
 8004daa:	73fb      	strb	r3, [r7, #15]
 8004dac:	e01f      	b.n	8004dee <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8004dae:	7bfa      	ldrb	r2, [r7, #15]
 8004db0:	4912      	ldr	r1, [pc, #72]	; (8004dfc <etharp_cleanup_netif+0x5c>)
 8004db2:	4613      	mov	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	440b      	add	r3, r1
 8004dbc:	3310      	adds	r3, #16
 8004dbe:	789b      	ldrb	r3, [r3, #2]
 8004dc0:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8004dc2:	7bbb      	ldrb	r3, [r7, #14]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00f      	beq.n	8004de8 <etharp_cleanup_netif+0x48>
 8004dc8:	7bfa      	ldrb	r2, [r7, #15]
 8004dca:	490c      	ldr	r1, [pc, #48]	; (8004dfc <etharp_cleanup_netif+0x5c>)
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	3308      	adds	r3, #8
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d103      	bne.n	8004de8 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff fd90 	bl	8004908 <etharp_free_entry>
 */
void etharp_cleanup_netif(struct netif *netif)
{
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
 8004dea:	3301      	adds	r3, #1
 8004dec:	73fb      	strb	r3, [r7, #15]
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
 8004df0:	2b09      	cmp	r3, #9
 8004df2:	d9dc      	bls.n	8004dae <etharp_cleanup_netif+0xe>
    u8_t state = arp_table[i].state;
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
      etharp_free_entry(i);
    }
  }
}
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	1ffe8b4c 	.word	0x1ffe8b4c

08004e00 <etharp_arp_input>:
 *
 * @see pbuf_free()
 */
static void
etharp_arp_input(struct netif *netif, struct eth_addr *ethaddr, struct pbuf *p)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08a      	sub	sp, #40	; 0x28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
  u8_t for_us;
#if LWIP_AUTOIP
  const u8_t * ethdst_hwaddr;
#endif /* LWIP_AUTOIP */

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <etharp_arp_input+0x16>
 8004e12:	be00      	bkpt	0x0000
 8004e14:	e0b3      	b.n	8004f7e <etharp_arp_input+0x17e>

  /* drop short ARP packets: we have to check for p->len instead of p->tot_len here
     since a struct etharp_hdr is pointed to p->payload, so it musn't be chained! */
  if (p->len < SIZEOF_ETHARP_PACKET) {
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	895b      	ldrh	r3, [r3, #10]
 8004e1a:	2b2b      	cmp	r3, #43	; 0x2b
 8004e1c:	d803      	bhi.n	8004e26 <etharp_arp_input+0x26>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, too short (%"S16_F"/%"S16_F")\n", p->tot_len,
      (s16_t)SIZEOF_ETHARP_PACKET));
    ETHARP_STATS_INC(etharp.lenerr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f002 fa40 	bl	80072a4 <pbuf_free>
    return;
 8004e24:	e0ab      	b.n	8004f7e <etharp_arp_input+0x17e>
  }

  ethhdr = (struct eth_hdr *)p->payload;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	623b      	str	r3, [r7, #32]
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	3310      	adds	r3, #16
 8004e30:	61fb      	str	r3, [r7, #28]
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e3c:	d10c      	bne.n	8004e58 <etharp_arp_input+0x58>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	791b      	ldrb	r3, [r3, #4]
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8004e42:	2b06      	cmp	r3, #6
 8004e44:	d108      	bne.n	8004e58 <etharp_arp_input+0x58>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
      (hdr->protolen != sizeof(ip_addr_t)) ||
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	795b      	ldrb	r3, [r3, #5]
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d104      	bne.n	8004e58 <etharp_arp_input+0x58>
      (hdr->protolen != sizeof(ip_addr_t)) ||
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	885b      	ldrh	r3, [r3, #2]
 8004e52:	b29b      	uxth	r3, r3
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
      (hdr->protolen != sizeof(ip_addr_t)) ||
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d003      	beq.n	8004e60 <etharp_arp_input+0x60>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, hdr->hwlen, hdr->proto, hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f002 fa23 	bl	80072a4 <pbuf_free>
    return;
 8004e5e:	e08e      	b.n	8004f7e <etharp_arp_input+0x17e>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	330e      	adds	r3, #14
 8004e64:	f107 0218 	add.w	r2, r7, #24
 8004e68:	4610      	mov	r0, r2
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	2204      	movs	r2, #4
 8004e6e:	f7ff fd19 	bl	80048a4 <thumb2_memcpy>
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	3318      	adds	r3, #24
 8004e76:	f107 0214 	add.w	r2, r7, #20
 8004e7a:	4610      	mov	r0, r2
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	2204      	movs	r2, #4
 8004e80:	f7ff fd10 	bl	80048a4 <thumb2_memcpy>

  /* this interface is not configured? */
  if (ip_addr_isany(&netif->ip_addr)) {
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	3304      	adds	r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <etharp_arp_input+0x94>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d103      	bne.n	8004e9c <etharp_arp_input+0x9c>
    for_us = 0;
 8004e94:	2300      	movs	r3, #0
 8004e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004e9a:	e009      	b.n	8004eb0 <etharp_arp_input+0xb0>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip_addr_cmp(&dipaddr, &(netif->ip_addr));
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	bf0c      	ite	eq
 8004ea6:	2301      	moveq	r3, #1
 8004ea8:	2300      	movne	r3, #0
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	f103 0208 	add.w	r2, r3, #8
 8004eb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <etharp_arp_input+0xc2>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <etharp_arp_input+0xc4>
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	f107 0118 	add.w	r1, r7, #24
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f7ff fedb 	bl	8004c84 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	88db      	ldrh	r3, [r3, #6]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ed8:	d003      	beq.n	8004ee2 <etharp_arp_input+0xe2>
 8004eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ede:	d04a      	beq.n	8004f76 <etharp_arp_input+0x176>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP unknown opcode type %"S16_F"\n", htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8004ee0:	e04a      	b.n	8004f78 <etharp_arp_input+0x178>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possiby send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
 8004ee2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d041      	beq.n	8004f6e <etharp_arp_input+0x16e>

      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: replying to ARP request for our IP address\n"));
      /* Re-use pbuf to send ARP reply.
         Since we are re-using an existing pbuf, we can't call etharp_raw since
         that would allocate a new pbuf. */
      hdr->opcode = htons(ARP_REPLY);
 8004eea:	2002      	movs	r0, #2
 8004eec:	f001 fb98 	bl	8006620 <lwip_htons>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	80da      	strh	r2, [r3, #6]

      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	f103 0218 	add.w	r2, r3, #24
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	330e      	adds	r3, #14
 8004f02:	4610      	mov	r0, r2
 8004f04:	4619      	mov	r1, r3
 8004f06:	2204      	movs	r2, #4
 8004f08:	f7ff fccc 	bl	80048a4 <thumb2_memcpy>
      IPADDR2_COPY(&hdr->sipaddr, &netif->ip_addr);
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	f103 020e 	add.w	r2, r3, #14
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3304      	adds	r3, #4
 8004f16:	4610      	mov	r0, r2
 8004f18:	4619      	mov	r1, r3
 8004f1a:	2204      	movs	r2, #4
 8004f1c:	f7ff fcc2 	bl	80048a4 <thumb2_memcpy>
       * 'sender IP address' MUST be sent using link-layer broadcast instead of
       * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
      ethdst_hwaddr = ip_addr_islinklocal(&netif->ip_addr) ? (u8_t*)(ethbroadcast.addr) : hdr->shwaddr.addr;
#endif /* LWIP_AUTOIP */

      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	f103 0212 	add.w	r2, r3, #18
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	3308      	adds	r3, #8
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	2206      	movs	r2, #6
 8004f30:	f7ff fcb8 	bl	80048a4 <thumb2_memcpy>
#if LWIP_AUTOIP
      ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
      ETHADDR16_COPY(&ethhdr->dest, &hdr->shwaddr);
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	1c9a      	adds	r2, r3, #2
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	3308      	adds	r3, #8
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	4619      	mov	r1, r3
 8004f40:	2206      	movs	r2, #6
 8004f42:	f7ff fcaf 	bl	80048a4 <thumb2_memcpy>
#endif /* LWIP_AUTOIP */
      ETHADDR16_COPY(&hdr->shwaddr, ethaddr);
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	3308      	adds	r3, #8
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	68b9      	ldr	r1, [r7, #8]
 8004f4e:	2206      	movs	r2, #6
 8004f50:	f7ff fca8 	bl	80048a4 <thumb2_memcpy>
      ETHADDR16_COPY(&ethhdr->src, ethaddr);
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	3308      	adds	r3, #8
 8004f58:	4618      	mov	r0, r3
 8004f5a:	68b9      	ldr	r1, [r7, #8]
 8004f5c:	2206      	movs	r2, #6
 8004f5e:	f7ff fca1 	bl	80048a4 <thumb2_memcpy>

      /* hwtype, hwaddr_len, proto, protolen and the type in the ethernet header
         are already correct, we tested that before */

      /* return ARP reply */
      netif->linkoutput(netif, p);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	4798      	blx	r3
 8004f6c:	e002      	b.n	8004f74 <etharp_arp_input+0x174>
    /* we are not configured? */
    } else if (ip_addr_isany(&netif->ip_addr)) {
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	3304      	adds	r3, #4
 8004f72:	2b00      	cmp	r3, #0
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP request was not for us.\n"));
    }
    break;
 8004f74:	e000      	b.n	8004f78 <etharp_arp_input+0x178>
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
 8004f76:	bf00      	nop
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP unknown opcode type %"S16_F"\n", htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
  }
  /* free ARP packet */
  pbuf_free(p);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f002 f993 	bl	80072a4 <pbuf_free>
}
 8004f7e:	3728      	adds	r7, #40	; 0x28
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8004f84:	b590      	push	{r4, r7, lr}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
 8004f92:	79fa      	ldrb	r2, [r7, #7]
 8004f94:	4921      	ldr	r1, [pc, #132]	; (800501c <etharp_output_to_arp_index+0x98>)
 8004f96:	4613      	mov	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	3310      	adds	r3, #16
 8004fa2:	789b      	ldrb	r3, [r3, #2]
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d123      	bne.n	8004ff0 <etharp_output_to_arp_index+0x6c>
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
 8004fa8:	79fa      	ldrb	r2, [r7, #7]
 8004faa:	491c      	ldr	r1, [pc, #112]	; (800501c <etharp_output_to_arp_index+0x98>)
 8004fac:	4613      	mov	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	3310      	adds	r3, #16
 8004fb8:	78db      	ldrb	r3, [r3, #3]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
 8004fba:	2be3      	cmp	r3, #227	; 0xe3
 8004fbc:	d918      	bls.n	8004ff0 <etharp_output_to_arp_index+0x6c>
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8004fbe:	79fa      	ldrb	r2, [r7, #7]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4a14      	ldr	r2, [pc, #80]	; (800501c <etharp_output_to_arp_index+0x98>)
 8004fca:	4413      	add	r3, r2
 8004fcc:	3304      	adds	r3, #4
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	f000 fa63 	bl	800549c <etharp_request>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d109      	bne.n	8004ff0 <etharp_output_to_arp_index+0x6c>
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
 8004fdc:	79fa      	ldrb	r2, [r7, #7]
 8004fde:	490f      	ldr	r1, [pc, #60]	; (800501c <etharp_output_to_arp_index+0x98>)
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	440b      	add	r3, r1
 8004fea:	3310      	adds	r3, #16
 8004fec:	2203      	movs	r2, #3
 8004fee:	709a      	strb	r2, [r3, #2]
    }
  }
  
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f103 0427 	add.w	r4, r3, #39	; 0x27
    &arp_table[arp_idx].ethaddr);
 8004ff6:	79fa      	ldrb	r2, [r7, #7]
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
    }
  }
  
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	3308      	adds	r3, #8
 8005002:	4a06      	ldr	r2, [pc, #24]	; (800501c <etharp_output_to_arp_index+0x98>)
 8005004:	4413      	add	r3, r2
 8005006:	3304      	adds	r3, #4
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	68b9      	ldr	r1, [r7, #8]
 800500c:	4622      	mov	r2, r4
 800500e:	f7ff fe0f 	bl	8004c30 <etharp_send_ip>
 8005012:	4603      	mov	r3, r0
    &arp_table[arp_idx].ethaddr);
}
 8005014:	4618      	mov	r0, r3
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	bd90      	pop	{r4, r7, pc}
 800501c:	1ffe8b4c 	.word	0x1ffe8b4c

08005020 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, ip_addr_t *ipaddr)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  struct eth_addr *dest;
  struct eth_addr mcastaddr;
  ip_addr_t *dst_addr = ipaddr;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("netif != NULL", netif != NULL);
  LWIP_ASSERT("q != NULL", q != NULL);
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);

  /* make room for Ethernet header - should not fail */
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
 8005030:	68b8      	ldr	r0, [r7, #8]
 8005032:	2110      	movs	r1, #16
 8005034:	f002 f8c4 	bl	80071c0 <pbuf_header>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <etharp_output+0x22>
    /* bail out */
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_output: could not allocate room for header.\n"));
    LINK_STATS_INC(link.lenerr);
    return ERR_BUF;
 800503e:	23fe      	movs	r3, #254	; 0xfe
 8005040:	e0ab      	b.n	800519a <etharp_output+0x17a>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip_addr_isbroadcast(ipaddr, netif)) {
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4618      	mov	r0, r3
 8005048:	68f9      	ldr	r1, [r7, #12]
 800504a:	f001 f991 	bl	8006370 <ip4_addr_isbroadcast>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <etharp_output+0x3a>
    /* broadcast on Ethernet also */
    dest = (struct eth_addr *)&ethbroadcast;
 8005054:	4b53      	ldr	r3, [pc, #332]	; (80051a4 <etharp_output+0x184>)
 8005056:	61fb      	str	r3, [r7, #28]
 8005058:	e096      	b.n	8005188 <etharp_output+0x168>
  /* multicast destination IP address? */
  } else if (ip_addr_ismulticast(ipaddr)) {
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005062:	2be0      	cmp	r3, #224	; 0xe0
 8005064:	d116      	bne.n	8005094 <etharp_output+0x74>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
 8005066:	2301      	movs	r3, #1
 8005068:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
 800506a:	2300      	movs	r3, #0
 800506c:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_MULTICAST_ADDR_2;
 800506e:	235e      	movs	r3, #94	; 0x5e
 8005070:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3301      	adds	r3, #1
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800507c:	b2db      	uxtb	r3, r3
 800507e:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	789b      	ldrb	r3, [r3, #2]
 8005084:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	78db      	ldrb	r3, [r3, #3]
 800508a:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800508c:	f107 0310 	add.w	r3, r7, #16
 8005090:	61fb      	str	r3, [r7, #28]
 8005092:	e079      	b.n	8005188 <etharp_output+0x168>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	405a      	eors	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	4013      	ands	r3, r2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d014      	beq.n	80050d2 <etharp_output+0xb2>
        !ip_addr_islinklocal(ipaddr)) {
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	b29b      	uxth	r3, r3
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
 80050ae:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d00d      	beq.n	80050d2 <etharp_output+0xb2>
         router for forwarding". */
      if (!ip_addr_islinklocal(&iphdr->src))
#endif /* LWIP_AUTOIP */
      {
        /* interface has default gateway? */
        if (!ip_addr_isany(&netif->gw)) {
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	330c      	adds	r3, #12
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d007      	beq.n	80050ce <etharp_output+0xae>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <etharp_output+0xae>
          /* send to hardware address of default gateway IP address */
          dst_addr = &(netif->gw);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	330c      	adds	r3, #12
 80050ca:	61bb      	str	r3, [r7, #24]
 80050cc:	e001      	b.n	80050d2 <etharp_output+0xb2>
        /* no default gateway available */
        } else {
          /* no route to destination error (default gateway missing) */
          return ERR_RTE;
 80050ce:	23fc      	movs	r3, #252	; 0xfc
 80050d0:	e063      	b.n	800519a <etharp_output+0x17a>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80050d2:	4b35      	ldr	r3, [pc, #212]	; (80051a8 <etharp_output+0x188>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	4619      	mov	r1, r3
 80050d8:	4a34      	ldr	r2, [pc, #208]	; (80051ac <etharp_output+0x18c>)
 80050da:	460b      	mov	r3, r1
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	440b      	add	r3, r1
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	3310      	adds	r3, #16
 80050e6:	789b      	ldrb	r3, [r3, #2]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d916      	bls.n	800511a <etharp_output+0xfa>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	4b2d      	ldr	r3, [pc, #180]	; (80051a8 <etharp_output+0x188>)
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	4618      	mov	r0, r3
 80050f6:	492d      	ldr	r1, [pc, #180]	; (80051ac <etharp_output+0x18c>)
 80050f8:	4603      	mov	r3, r0
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4403      	add	r3, r0
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	440b      	add	r3, r1
 8005102:	685b      	ldr	r3, [r3, #4]
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8005104:	429a      	cmp	r2, r3
 8005106:	d108      	bne.n	800511a <etharp_output+0xfa>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8005108:	4b27      	ldr	r3, [pc, #156]	; (80051a8 <etharp_output+0x188>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	68b9      	ldr	r1, [r7, #8]
 8005110:	461a      	mov	r2, r3
 8005112:	f7ff ff37 	bl	8004f84 <etharp_output_to_arp_index>
 8005116:	4603      	mov	r3, r0
 8005118:	e03f      	b.n	800519a <etharp_output+0x17a>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800511a:	2300      	movs	r3, #0
 800511c:	75fb      	strb	r3, [r7, #23]
 800511e:	e028      	b.n	8005172 <etharp_output+0x152>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8005120:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8005124:	4921      	ldr	r1, [pc, #132]	; (80051ac <etharp_output+0x18c>)
 8005126:	4613      	mov	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	440b      	add	r3, r1
 8005130:	3310      	adds	r3, #16
 8005132:	789b      	ldrb	r3, [r3, #2]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d917      	bls.n	8005168 <etharp_output+0x148>
          (ip_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	6819      	ldr	r1, [r3, #0]
 800513c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8005140:	481a      	ldr	r0, [pc, #104]	; (80051ac <etharp_output+0x18c>)
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4403      	add	r3, r0
 800514c:	685b      	ldr	r3, [r3, #4]
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800514e:	4299      	cmp	r1, r3
 8005150:	d10a      	bne.n	8005168 <etharp_output+0x148>
          (ip_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8005152:	7dfa      	ldrb	r2, [r7, #23]
 8005154:	4b14      	ldr	r3, [pc, #80]	; (80051a8 <etharp_output+0x188>)
 8005156:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8005158:	7dfb      	ldrb	r3, [r7, #23]
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	68b9      	ldr	r1, [r7, #8]
 800515e:	461a      	mov	r2, r3
 8005160:	f7ff ff10 	bl	8004f84 <etharp_output_to_arp_index>
 8005164:	4603      	mov	r3, r0
 8005166:	e018      	b.n	800519a <etharp_output+0x17a>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8005168:	7dfb      	ldrb	r3, [r7, #23]
 800516a:	b2db      	uxtb	r3, r3
 800516c:	3301      	adds	r3, #1
 800516e:	b2db      	uxtb	r3, r3
 8005170:	75fb      	strb	r3, [r7, #23]
 8005172:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005176:	2b09      	cmp	r3, #9
 8005178:	ddd2      	ble.n	8005120 <etharp_output+0x100>
        return etharp_output_to_arp_index(netif, q, i);
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	69b9      	ldr	r1, [r7, #24]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	f000 f816 	bl	80051b0 <etharp_query>
 8005184:	4603      	mov	r3, r0
 8005186:	e008      	b.n	800519a <etharp_output+0x17a>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	3327      	adds	r3, #39	; 0x27
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	461a      	mov	r2, r3
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	f7ff fd4c 	bl	8004c30 <etharp_send_ip>
 8005198:	4603      	mov	r3, r0
 800519a:	b25b      	sxtb	r3, r3
}
 800519c:	4618      	mov	r0, r3
 800519e:	3720      	adds	r7, #32
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	08008ed0 	.word	0x08008ed0
 80051a8:	1ffe8c14 	.word	0x1ffe8c14
 80051ac:	1ffe8b4c 	.word	0x1ffe8b4c

080051b0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, ip_addr_t *ipaddr, struct pbuf *q)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b08a      	sub	sp, #40	; 0x28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	3327      	adds	r3, #39	; 0x27
 80051c0:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_MEM;
 80051c2:	23ff      	movs	r3, #255	; 0xff
 80051c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4618      	mov	r0, r3
 80051ce:	68f9      	ldr	r1, [r7, #12]
 80051d0:	f001 f8ce 	bl	8006370 <ip4_addr_isbroadcast>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10c      	bne.n	80051f4 <etharp_query+0x44>
      ip_addr_ismulticast(ipaddr) ||
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
 80051e2:	2be0      	cmp	r3, #224	; 0xe0
 80051e4:	d006      	beq.n	80051f4 <etharp_query+0x44>
      ip_addr_ismulticast(ipaddr) ||
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <etharp_query+0x44>
      ip_addr_isany(ipaddr)) {
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <etharp_query+0x48>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80051f4:	23f2      	movs	r3, #242	; 0xf2
 80051f6:	e0cb      	b.n	8005390 <etharp_query+0x1e0>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD);
 80051f8:	68b8      	ldr	r0, [r7, #8]
 80051fa:	2101      	movs	r1, #1
 80051fc:	f7ff fc24 	bl	8004a48 <etharp_find_entry>
 8005200:	4603      	mov	r3, r0
 8005202:	75fb      	strb	r3, [r7, #23]

  /* could not find or create entry? */
  if (i < 0) {
 8005204:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005208:	2b00      	cmp	r3, #0
 800520a:	da01      	bge.n	8005210 <etharp_query+0x60>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800520c:	7dfb      	ldrb	r3, [r7, #23]
 800520e:	e0bf      	b.n	8005390 <etharp_query+0x1e0>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8005210:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8005214:	4961      	ldr	r1, [pc, #388]	; (800539c <etharp_query+0x1ec>)
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	440b      	add	r3, r1
 8005220:	3310      	adds	r3, #16
 8005222:	789b      	ldrb	r3, [r3, #2]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10a      	bne.n	800523e <etharp_query+0x8e>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8005228:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800522c:	495b      	ldr	r1, [pc, #364]	; (800539c <etharp_query+0x1ec>)
 800522e:	4613      	mov	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	440b      	add	r3, r1
 8005238:	3310      	adds	r3, #16
 800523a:	2201      	movs	r2, #1
 800523c:	709a      	strb	r2, [r3, #2]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a pending entry? or an implicit query request? */
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
 800523e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8005242:	4956      	ldr	r1, [pc, #344]	; (800539c <etharp_query+0x1ec>)
 8005244:	4613      	mov	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	440b      	add	r3, r1
 800524e:	3310      	adds	r3, #16
 8005250:	789b      	ldrb	r3, [r3, #2]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d002      	beq.n	800525c <etharp_query+0xac>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10c      	bne.n	8005276 <etharp_query+0xc6>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	68b9      	ldr	r1, [r7, #8]
 8005260:	f000 f91c 	bl	800549c <etharp_request>
 8005264:	4603      	mov	r3, r0
 8005266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d102      	bne.n	8005276 <etharp_query+0xc6>
      return result;
 8005270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005274:	e08c      	b.n	8005390 <etharp_query+0x1e0>
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8005276:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800527a:	4948      	ldr	r1, [pc, #288]	; (800539c <etharp_query+0x1ec>)
 800527c:	4613      	mov	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	3310      	adds	r3, #16
 8005288:	789b      	ldrb	r3, [r3, #2]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d915      	bls.n	80052ba <etharp_query+0x10a>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800528e:	7dfa      	ldrb	r2, [r7, #23]
 8005290:	4b43      	ldr	r3, [pc, #268]	; (80053a0 <etharp_query+0x1f0>)
 8005292:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
 8005294:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8005298:	4613      	mov	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	3308      	adds	r3, #8
 80052a2:	4a3e      	ldr	r2, [pc, #248]	; (800539c <etharp_query+0x1ec>)
 80052a4:	4413      	add	r3, r2
 80052a6:	3304      	adds	r3, #4
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	6879      	ldr	r1, [r7, #4]
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	f7ff fcbf 	bl	8004c30 <etharp_send_ip>
 80052b2:	4603      	mov	r3, r0
 80052b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80052b8:	e068      	b.n	800538c <etharp_query+0x1dc>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80052ba:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80052be:	4937      	ldr	r1, [pc, #220]	; (800539c <etharp_query+0x1ec>)
 80052c0:	4613      	mov	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4413      	add	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	440b      	add	r3, r1
 80052ca:	3310      	adds	r3, #16
 80052cc:	789b      	ldrb	r3, [r3, #2]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d15c      	bne.n	800538c <etharp_query+0x1dc>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	61fb      	str	r3, [r7, #28]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	623b      	str	r3, [r7, #32]
    while (p) {
 80052da:	e009      	b.n	80052f0 <etharp_query+0x140>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
      if(p->type != PBUF_ROM) {
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	7b1b      	ldrb	r3, [r3, #12]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d002      	beq.n	80052ea <etharp_query+0x13a>
        copy_needed = 1;
 80052e4:	2301      	movs	r3, #1
 80052e6:	61fb      	str	r3, [r7, #28]
        break;
 80052e8:	e005      	b.n	80052f6 <etharp_query+0x146>
      }
      p = p->next;
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	623b      	str	r3, [r7, #32]
    int copy_needed = 0;
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
    while (p) {
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1f2      	bne.n	80052dc <etharp_query+0x12c>
        copy_needed = 1;
        break;
      }
      p = p->next;
    }
    if(copy_needed) {
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d017      	beq.n	800532c <etharp_query+0x17c>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	891b      	ldrh	r3, [r3, #8]
 8005300:	2003      	movs	r0, #3
 8005302:	4619      	mov	r1, r3
 8005304:	2200      	movs	r2, #0
 8005306:	f001 fe09 	bl	8006f1c <pbuf_alloc>
 800530a:	6238      	str	r0, [r7, #32]
      if(p != NULL) {
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d011      	beq.n	8005336 <etharp_query+0x186>
        if (pbuf_copy(p, q) != ERR_OK) {
 8005312:	6a38      	ldr	r0, [r7, #32]
 8005314:	6879      	ldr	r1, [r7, #4]
 8005316:	f002 f85b 	bl	80073d0 <pbuf_copy>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00a      	beq.n	8005336 <etharp_query+0x186>
          pbuf_free(p);
 8005320:	6a38      	ldr	r0, [r7, #32]
 8005322:	f001 ffbf 	bl	80072a4 <pbuf_free>
          p = NULL;
 8005326:	2300      	movs	r3, #0
 8005328:	623b      	str	r3, [r7, #32]
 800532a:	e004      	b.n	8005336 <etharp_query+0x186>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	623b      	str	r3, [r7, #32]
      pbuf_ref(p);
 8005330:	6a38      	ldr	r0, [r7, #32]
 8005332:	f001 fffb 	bl	800732c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d024      	beq.n	8005386 <etharp_query+0x1d6>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800533c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8005340:	4916      	ldr	r1, [pc, #88]	; (800539c <etharp_query+0x1ec>)
 8005342:	4613      	mov	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	440b      	add	r3, r1
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00b      	beq.n	800536a <etharp_query+0x1ba>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8005352:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8005356:	4911      	ldr	r1, [pc, #68]	; (800539c <etharp_query+0x1ec>)
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	440b      	add	r3, r1
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4618      	mov	r0, r3
 8005366:	f001 ff9d 	bl	80072a4 <pbuf_free>
      }
      arp_table[i].q = p;
 800536a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800536e:	490b      	ldr	r1, [pc, #44]	; (800539c <etharp_query+0x1ec>)
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	440b      	add	r3, r1
 800537a:	6a3a      	ldr	r2, [r7, #32]
 800537c:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800537e:	2300      	movs	r3, #0
 8005380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005384:	e002      	b.n	800538c <etharp_query+0x1dc>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8005386:	23ff      	movs	r3, #255	; 0xff
 8005388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800538c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005390:	b25b      	sxtb	r3, r3
}
 8005392:	4618      	mov	r0, r3
 8005394:	3728      	adds	r7, #40	; 0x28
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	1ffe8b4c 	.word	0x1ffe8b4c
 80053a0:	1ffe8c14 	.word	0x1ffe8c14

080053a4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	77fb      	strb	r3, [r7, #31]
#endif /* LWIP_AUTOIP */

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
 80053b6:	2003      	movs	r0, #3
 80053b8:	212c      	movs	r1, #44	; 0x2c
 80053ba:	2200      	movs	r2, #0
 80053bc:	f001 fdae 	bl	8006f1c <pbuf_alloc>
 80053c0:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <etharp_raw+0x28>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80053c8:	23ff      	movs	r3, #255	; 0xff
 80053ca:	e061      	b.n	8005490 <etharp_raw+0xec>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_PACKET));

  ethhdr = (struct eth_hdr *)p->payload;
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	617b      	str	r3, [r7, #20]
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	3310      	adds	r3, #16
 80053d6:	613b      	str	r3, [r7, #16]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = htons(opcode);
 80053d8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80053da:	4618      	mov	r0, r3
 80053dc:	f001 f920 	bl	8006620 <lwip_htons>
 80053e0:	4603      	mov	r3, r0
 80053e2:	461a      	mov	r2, r3
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	80da      	strh	r2, [r3, #6]
   * 'sender IP address' MUST be sent using link-layer broadcast instead of
   * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
  ethdst_hwaddr = ip_addr_islinklocal(ipsrc_addr) ? (u8_t*)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	3308      	adds	r3, #8
 80053ec:	4618      	mov	r0, r3
 80053ee:	6839      	ldr	r1, [r7, #0]
 80053f0:	2206      	movs	r2, #6
 80053f2:	f7ff fa57 	bl	80048a4 <thumb2_memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	3312      	adds	r3, #18
 80053fa:	4618      	mov	r0, r3
 80053fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053fe:	2206      	movs	r2, #6
 8005400:	f7ff fa50 	bl	80048a4 <thumb2_memcpy>
  /* Write the Ethernet MAC-Addresses */
#if LWIP_AUTOIP
  ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	3302      	adds	r3, #2
 8005408:	4618      	mov	r0, r3
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	2206      	movs	r2, #6
 800540e:	f7ff fa49 	bl	80048a4 <thumb2_memcpy>
#endif /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	3308      	adds	r3, #8
 8005416:	4618      	mov	r0, r3
 8005418:	68b9      	ldr	r1, [r7, #8]
 800541a:	2206      	movs	r2, #6
 800541c:	f7ff fa42 	bl	80048a4 <thumb2_memcpy>
  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing. */ 
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	330e      	adds	r3, #14
 8005424:	4618      	mov	r0, r3
 8005426:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005428:	2204      	movs	r2, #4
 800542a:	f7ff fa3b 	bl	80048a4 <thumb2_memcpy>
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	3318      	adds	r3, #24
 8005432:	4618      	mov	r0, r3
 8005434:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005436:	2204      	movs	r2, #4
 8005438:	f7ff fa34 	bl	80048a4 <thumb2_memcpy>

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	2200      	movs	r2, #0
 8005440:	701a      	strb	r2, [r3, #0]
 8005442:	2200      	movs	r2, #0
 8005444:	f042 0201 	orr.w	r2, r2, #1
 8005448:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	2200      	movs	r2, #0
 800544e:	f042 0208 	orr.w	r2, r2, #8
 8005452:	709a      	strb	r2, [r3, #2]
 8005454:	2200      	movs	r2, #0
 8005456:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETHARP_HWADDR_LEN;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	2206      	movs	r2, #6
 800545c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip_addr_t);
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	2204      	movs	r2, #4
 8005462:	715a      	strb	r2, [r3, #5]

  ethhdr->type = PP_HTONS(ETHTYPE_ARP);
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2200      	movs	r2, #0
 8005468:	f042 0208 	orr.w	r2, r2, #8
 800546c:	739a      	strb	r2, [r3, #14]
 800546e:	2200      	movs	r2, #0
 8005470:	f042 0206 	orr.w	r2, r2, #6
 8005474:	73da      	strb	r2, [r3, #15]
  /* send ARP query */
  result = netif->linkoutput(netif, p);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	69b9      	ldr	r1, [r7, #24]
 800547e:	4798      	blx	r3
 8005480:	4603      	mov	r3, r0
 8005482:	77fb      	strb	r3, [r7, #31]
  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8005484:	69b8      	ldr	r0, [r7, #24]
 8005486:	f001 ff0d 	bl	80072a4 <pbuf_free>
  p = NULL;
 800548a:	2300      	movs	r3, #0
 800548c:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800548e:	7ffb      	ldrb	r3, [r7, #31]
 8005490:	b25b      	sxtb	r3, r3
}
 8005492:	4618      	mov	r0, r3
 8005494:	3720      	adds	r7, #32
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop

0800549c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
 800549c:	b590      	push	{r4, r7, lr}
 800549e:	b087      	sub	sp, #28
 80054a0:	af04      	add	r7, sp, #16
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f103 0227 	add.w	r2, r3, #39	; 0x27
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f103 0427 	add.w	r4, r3, #39	; 0x27
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	3304      	adds	r3, #4
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	4b08      	ldr	r3, [pc, #32]	; (80054dc <etharp_request+0x40>)
 80054ba:	9301      	str	r3, [sp, #4]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	9302      	str	r3, [sp, #8]
 80054c0:	2301      	movs	r3, #1
 80054c2:	9303      	str	r3, [sp, #12]
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	4611      	mov	r1, r2
 80054c8:	4a05      	ldr	r2, [pc, #20]	; (80054e0 <etharp_request+0x44>)
 80054ca:	4623      	mov	r3, r4
 80054cc:	f7ff ff6a 	bl	80053a4 <etharp_raw>
 80054d0:	4603      	mov	r3, r0
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
                    ipaddr, ARP_REQUEST);
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd90      	pop	{r4, r7, pc}
 80054da:	bf00      	nop
 80054dc:	08008ed8 	.word	0x08008ed8
 80054e0:	08008ed0 	.word	0x08008ed0

080054e4 <ethernet_input>:
 * @param p the recevied packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 80054ee:	2310      	movs	r3, #16
 80054f0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	895b      	ldrh	r3, [r3, #10]
 80054f6:	2b10      	cmp	r3, #16
 80054f8:	d800      	bhi.n	80054fc <ethernet_input+0x18>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    goto free_and_return;
 80054fa:	e066      	b.n	80055ca <ethernet_input+0xe6>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0], (unsigned)ethhdr->src.addr[1], (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3], (unsigned)ethhdr->src.addr[4], (unsigned)ethhdr->src.addr[5],
     (unsigned)htons(ethhdr->type)));

  type = ethhdr->type;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	7b9a      	ldrb	r2, [r3, #14]
 8005506:	7bdb      	ldrb	r3, [r3, #15]
 8005508:	021b      	lsls	r3, r3, #8
 800550a:	4313      	orrs	r3, r2
 800550c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	789b      	ldrb	r3, [r3, #2]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d024      	beq.n	8005564 <ethernet_input+0x80>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	789b      	ldrb	r3, [r3, #2]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d10f      	bne.n	8005542 <ethernet_input+0x5e>
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	78db      	ldrb	r3, [r3, #3]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d11c      	bne.n	8005564 <ethernet_input+0x80>
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	791b      	ldrb	r3, [r3, #4]
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
 800552e:	2b5e      	cmp	r3, #94	; 0x5e
 8005530:	d118      	bne.n	8005564 <ethernet_input+0x80>
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	7b5b      	ldrb	r3, [r3, #13]
 8005536:	f043 0310 	orr.w	r3, r3, #16
 800553a:	b2da      	uxtb	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	735a      	strb	r2, [r3, #13]
 8005540:	e010      	b.n	8005564 <ethernet_input+0x80>
      }
    } else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	3302      	adds	r3, #2
 8005546:	4618      	mov	r0, r3
 8005548:	4924      	ldr	r1, [pc, #144]	; (80055dc <ethernet_input+0xf8>)
 800554a:	2206      	movs	r2, #6
 800554c:	f003 face 	bl	8008aec <memcmp>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d106      	bne.n	8005564 <ethernet_input+0x80>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	7b5b      	ldrb	r3, [r3, #13]
 800555a:	f043 0308 	orr.w	r3, r3, #8
 800555e:	b2da      	uxtb	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8005564:	89fb      	ldrh	r3, [r7, #14]
 8005566:	2b08      	cmp	r3, #8
 8005568:	d003      	beq.n	8005572 <ethernet_input+0x8e>
 800556a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800556e:	d01a      	beq.n	80055a6 <ethernet_input+0xc2>
#endif /* PPPOE_SUPPORT */

    default:
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      goto free_and_return;
 8005570:	e02b      	b.n	80055ca <ethernet_input+0xe6>

  switch (type) {
#if LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005578:	f003 0320 	and.w	r3, r3, #32
 800557c:	2b00      	cmp	r3, #0
 800557e:	d100      	bne.n	8005582 <ethernet_input+0x9e>
        goto free_and_return;
 8005580:	e023      	b.n	80055ca <ethernet_input+0xe6>
#if ETHARP_TRUST_IP_MAC
      /* update ARP table */
      etharp_ip_input(netif, p);
#endif /* ETHARP_TRUST_IP_MAC */
      /* skip Ethernet header */
      if(pbuf_header(p, -ip_hdr_offset)) {
 8005582:	8afb      	ldrh	r3, [r7, #22]
 8005584:	425b      	negs	r3, r3
 8005586:	b29b      	uxth	r3, r3
 8005588:	b29b      	uxth	r3, r3
 800558a:	b21b      	sxth	r3, r3
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	4619      	mov	r1, r3
 8005590:	f001 fe16 	bl	80071c0 <pbuf_header>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d000      	beq.n	800559c <ethernet_input+0xb8>
        LWIP_ASSERT("Can't move over header in packet", 0);
        goto free_and_return;
 800559a:	e016      	b.n	80055ca <ethernet_input+0xe6>
      } else {
        /* pass to IP layer */
        ip_input(p, netif);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	6839      	ldr	r1, [r7, #0]
 80055a0:	f000 fcce 	bl	8005f40 <ip_input>
      }
      break;
 80055a4:	e00f      	b.n	80055c6 <ethernet_input+0xe2>
      
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80055ac:	f003 0320 	and.w	r3, r3, #32
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d100      	bne.n	80055b6 <ethernet_input+0xd2>
        goto free_and_return;
 80055b4:	e009      	b.n	80055ca <ethernet_input+0xe6>
      }
      /* pass p to ARP module */
      etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	3327      	adds	r3, #39	; 0x27
 80055ba:	6838      	ldr	r0, [r7, #0]
 80055bc:	4619      	mov	r1, r3
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	f7ff fc1e 	bl	8004e00 <etharp_arp_input>
      break;
 80055c4:	bf00      	nop
      goto free_and_return;
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	e003      	b.n	80055d2 <ethernet_input+0xee>

free_and_return:
  pbuf_free(p);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f001 fe6a 	bl	80072a4 <pbuf_free>
  return ERR_OK;
 80055d0:	2300      	movs	r3, #0
 80055d2:	b25b      	sxtb	r3, r3
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	08008ed0 	.word	0x08008ed0

080055e0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the ip header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b08c      	sub	sp, #48	; 0x30
 80055e4:	af04      	add	r7, sp, #16
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]

  ICMP_STATS_INC(icmp.recv);
  snmp_inc_icmpinmsgs();


  iphdr = (struct ip_hdr *)p->payload;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	61fb      	str	r3, [r7, #28]
  hlen = IPH_HL(iphdr) * 4;
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	b29b      	uxth	r3, r3
 8005600:	82fb      	strh	r3, [r7, #22]
  if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t)*2)) {
 8005602:	8afb      	ldrh	r3, [r7, #22]
 8005604:	425b      	negs	r3, r3
 8005606:	b29b      	uxth	r3, r3
 8005608:	b29b      	uxth	r3, r3
 800560a:	b21b      	sxth	r3, r3
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	4619      	mov	r1, r3
 8005610:	f001 fdd6 	bl	80071c0 <pbuf_header>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	f040 80b7 	bne.w	800578a <icmp_input+0x1aa>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	891b      	ldrh	r3, [r3, #8]
 8005620:	2b03      	cmp	r3, #3
 8005622:	f240 80b2 	bls.w	800578a <icmp_input+0x1aa>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	757b      	strb	r3, [r7, #21]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800562e:	7d7b      	ldrb	r3, [r7, #21]
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 80a5 	beq.w	8005780 <icmp_input+0x1a0>
 8005636:	2b08      	cmp	r3, #8
 8005638:	f040 80a3 	bne.w	8005782 <icmp_input+0x1a2>
       (as obviously, an echo request has been sent, too). */
    break; 
  case ICMP_ECHO:
#if !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
    {
      int accepted = 1;
 800563c:	2301      	movs	r3, #1
 800563e:	61bb      	str	r3, [r7, #24]
#if !LWIP_MULTICAST_PING
      /* multicast destination address? */
      if (ip_addr_ismulticast(&current_iphdr_dest)) {
 8005640:	4b57      	ldr	r3, [pc, #348]	; (80057a0 <icmp_input+0x1c0>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005648:	2be0      	cmp	r3, #224	; 0xe0
 800564a:	d101      	bne.n	8005650 <icmp_input+0x70>
        accepted = 0;
 800564c:	2300      	movs	r3, #0
 800564e:	61bb      	str	r3, [r7, #24]
      }
#endif /* LWIP_MULTICAST_PING */
#if !LWIP_BROADCAST_PING
      /* broadcast destination address? */
      if (ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
 8005650:	4b53      	ldr	r3, [pc, #332]	; (80057a0 <icmp_input+0x1c0>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4618      	mov	r0, r3
 8005656:	6839      	ldr	r1, [r7, #0]
 8005658:	f000 fe8a 	bl	8006370 <ip4_addr_isbroadcast>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <icmp_input+0x86>
        accepted = 0;
 8005662:	2300      	movs	r3, #0
 8005664:	61bb      	str	r3, [r7, #24]
      }
#endif /* LWIP_BROADCAST_PING */
      /* broadcast or multicast destination address not acceptd? */
      if (!accepted) {
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d103      	bne.n	8005674 <icmp_input+0x94>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast or broadcast pings\n"));
        ICMP_STATS_INC(icmp.err);
        pbuf_free(p);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f001 fe19 	bl	80072a4 <pbuf_free>
        return;
 8005672:	e092      	b.n	800579a <icmp_input+0x1ba>
      }
    }
#endif /* !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	891b      	ldrh	r3, [r3, #8]
 8005678:	2b07      	cmp	r3, #7
 800567a:	d800      	bhi.n	800567e <icmp_input+0x9e>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
 800567c:	e085      	b.n	800578a <icmp_input+0x1aa>
    }
    if (inet_chksum_pbuf(p) != 0) {
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fbd6 	bl	8005e30 <inet_chksum_pbuf>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <icmp_input+0xb2>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
      pbuf_free(p);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f001 fe0a 	bl	80072a4 <pbuf_free>
      ICMP_STATS_INC(icmp.chkerr);
      snmp_inc_icmpinerrors();
      return;
 8005690:	e083      	b.n	800579a <icmp_input+0x1ba>
    }
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	2124      	movs	r1, #36	; 0x24
 8005696:	f001 fd93 	bl	80071c0 <pbuf_header>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d033      	beq.n	8005708 <icmp_input+0x128>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* switch p->payload to ip header */
      if (pbuf_header(p, hlen)) {
 80056a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	4619      	mov	r1, r3
 80056a8:	f001 fd8a 	bl	80071c0 <pbuf_header>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d000      	beq.n	80056b4 <icmp_input+0xd4>
        LWIP_ASSERT("icmp_input: moving p->payload to ip header failed\n", 0);
        goto memerr;
 80056b2:	e06e      	b.n	8005792 <icmp_input+0x1b2>
      }
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	891b      	ldrh	r3, [r3, #8]
 80056b8:	2002      	movs	r0, #2
 80056ba:	4619      	mov	r1, r3
 80056bc:	2200      	movs	r2, #0
 80056be:	f001 fc2d 	bl	8006f1c <pbuf_alloc>
 80056c2:	6138      	str	r0, [r7, #16]
      if (r == NULL) {
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d100      	bne.n	80056cc <icmp_input+0xec>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto memerr;
 80056ca:	e062      	b.n	8005792 <icmp_input+0x1b2>
      }
      LWIP_ASSERT("check that first pbuf can hold struct the ICMP header",
                  (r->len >= hlen + sizeof(struct icmp_echo_hdr)));
      /* copy the whole packet including ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 80056cc:	6938      	ldr	r0, [r7, #16]
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	f001 fe7e 	bl	80073d0 <pbuf_copy>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d000      	beq.n	80056dc <icmp_input+0xfc>
        LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
        goto memerr;
 80056da:	e05a      	b.n	8005792 <icmp_input+0x1b2>
      }
      iphdr = (struct ip_hdr *)r->payload;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	61fb      	str	r3, [r7, #28]
      /* switch r->payload back to icmp header */
      if (pbuf_header(r, -hlen)) {
 80056e2:	8afb      	ldrh	r3, [r7, #22]
 80056e4:	425b      	negs	r3, r3
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	b21b      	sxth	r3, r3
 80056ec:	6938      	ldr	r0, [r7, #16]
 80056ee:	4619      	mov	r1, r3
 80056f0:	f001 fd66 	bl	80071c0 <pbuf_header>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d000      	beq.n	80056fc <icmp_input+0x11c>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
 80056fa:	e04a      	b.n	8005792 <icmp_input+0x1b2>
      }
      /* free the original p */
      pbuf_free(p);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f001 fdd1 	bl	80072a4 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	607b      	str	r3, [r7, #4]
 8005706:	e008      	b.n	800571a <icmp_input+0x13a>
    } else {
      /* restore p->payload to point to icmp header */
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f06f 0123 	mvn.w	r1, #35	; 0x23
 800570e:	f001 fd57 	bl	80071c0 <pbuf_header>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d000      	beq.n	800571a <icmp_input+0x13a>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
 8005718:	e03b      	b.n	8005792 <icmp_input+0x1b2>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	60fb      	str	r3, [r7, #12]
    ip_addr_copy(iphdr->src, *ip_current_dest_addr());
 8005720:	4b1f      	ldr	r3, [pc, #124]	; (80057a0 <icmp_input+0x1c0>)
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	60da      	str	r2, [r3, #12]
    ip_addr_copy(iphdr->dest, *ip_current_src_addr());
 8005728:	4b1e      	ldr	r3, [pc, #120]	; (80057a4 <icmp_input+0x1c4>)
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	611a      	str	r2, [r3, #16]
    ICMPH_TYPE_SET(iecho, ICMP_ER);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	701a      	strb	r2, [r3, #0]
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
    } else {
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
    }
#else /* CHECKSUM_GEN_ICMP */
    iecho->chksum = 0;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	709a      	strb	r2, [r3, #2]
 800573c:	2200      	movs	r2, #0
 800573e:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

    /* Set the correct TTL and recalculate the header checksum. */
    IPH_TTL_SET(iphdr, ICMP_TTL);
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	22ff      	movs	r2, #255	; 0xff
 8005744:	721a      	strb	r2, [r3, #8]
    IPH_CHKSUM_SET(iphdr, 0);
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	2200      	movs	r2, #0
 800574a:	729a      	strb	r2, [r3, #10]
 800574c:	2200      	movs	r2, #0
 800574e:	72da      	strb	r2, [r3, #11]
    /* increase number of messages attempted to send */
    snmp_inc_icmpoutmsgs();
    /* increase number of echo replies attempted to send */
    snmp_inc_icmpoutechoreps();

    if(pbuf_header(p, hlen)) {
 8005750:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	4619      	mov	r1, r3
 8005758:	f001 fd32 	bl	80071c0 <pbuf_header>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10d      	bne.n	800577e <icmp_input+0x19e>
      LWIP_ASSERT("Can't move over header in packet", 0);
    } else {
      err_t ret;
      /* send an ICMP packet, src addr is the dest addr of the curren packet */
      ret = ip_output_if(p, ip_current_dest_addr(), IP_HDRINCL,
 8005762:	2300      	movs	r3, #0
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	2301      	movs	r3, #1
 8005768:	9301      	str	r3, [sp, #4]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	9302      	str	r3, [sp, #8]
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	490b      	ldr	r1, [pc, #44]	; (80057a0 <icmp_input+0x1c0>)
 8005772:	2200      	movs	r2, #0
 8005774:	23ff      	movs	r3, #255	; 0xff
 8005776:	f000 fd07 	bl	8006188 <ip_output_if>
 800577a:	4603      	mov	r3, r0
 800577c:	72fb      	strb	r3, [r7, #11]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %c.\n", ret));
      }
    }
    break;
 800577e:	e000      	b.n	8005782 <icmp_input+0x1a2>
#endif /* LWIP_DEBUG */
  switch (type) {
  case ICMP_ER:
    /* This is OK, echo reply might have been parsed by a raw PCB
       (as obviously, an echo request has been sent, too). */
    break; 
 8005780:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n", 
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f001 fd8e 	bl	80072a4 <pbuf_free>
  return;
 8005788:	e007      	b.n	800579a <icmp_input+0x1ba>
lenerr:
  pbuf_free(p);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f001 fd8a 	bl	80072a4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  snmp_inc_icmpinerrors();
  return;
 8005790:	e003      	b.n	800579a <icmp_input+0x1ba>
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
memerr:
  pbuf_free(p);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f001 fd86 	bl	80072a4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  snmp_inc_icmpinerrors();
  return;
 8005798:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
}
 800579a:	3720      	adds	r7, #32
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	1ffef128 	.word	0x1ffef128
 80057a4:	1ffef120 	.word	0x1ffef120

080057a8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	460b      	mov	r3, r1
 80057b2:	70fb      	strb	r3, [r7, #3]
  icmp_send_response(p, ICMP_DUR, t);
 80057b4:	78fb      	ldrb	r3, [r7, #3]
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	2103      	movs	r1, #3
 80057ba:	461a      	mov	r2, r3
 80057bc:	f000 f804 	bl	80057c8 <icmp_send_response>
}
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop

080057c8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b088      	sub	sp, #32
 80057cc:	af02      	add	r7, sp, #8
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	460b      	mov	r3, r1
 80057d2:	70fb      	strb	r3, [r7, #3]
 80057d4:	4613      	mov	r3, r2
 80057d6:	70bb      	strb	r3, [r7, #2]
  /* we can use the echo header here */
  struct icmp_echo_hdr *icmphdr;
  ip_addr_t iphdr_src;

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80057d8:	2001      	movs	r0, #1
 80057da:	2124      	movs	r1, #36	; 0x24
 80057dc:	2200      	movs	r2, #0
 80057de:	f001 fb9d 	bl	8006f1c <pbuf_alloc>
 80057e2:	6178      	str	r0, [r7, #20]
                 PBUF_RAM);
  if (q == NULL) {
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d040      	beq.n	800586c <icmp_send_response+0xa4>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	613b      	str	r3, [r7, #16]
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->src));
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	60fb      	str	r3, [r7, #12]
  icmphdr->type = type;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	78fa      	ldrb	r2, [r7, #3]
 80057fa:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	78ba      	ldrb	r2, [r7, #2]
 8005800:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	711a      	strb	r2, [r3, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	719a      	strb	r2, [r3, #6]
 8005812:	2200      	movs	r2, #0
 8005814:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f103 0208 	add.w	r2, r3, #8
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	4610      	mov	r0, r2
 8005824:	4619      	mov	r1, r3
 8005826:	221c      	movs	r2, #28
 8005828:	f7ff f83c 	bl	80048a4 <thumb2_memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  /* calculate checksum */
  icmphdr->chksum = 0;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	709a      	strb	r2, [r3, #2]
 8005832:	2200      	movs	r2, #0
 8005834:	70da      	strb	r2, [r3, #3]
  icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	895b      	ldrh	r3, [r3, #10]
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	4619      	mov	r1, r3
 800583e:	f000 fae5 	bl	8005e0c <inet_chksum>
 8005842:	4603      	mov	r3, r0
 8005844:	461a      	mov	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	805a      	strh	r2, [r3, #2]
  ICMP_STATS_INC(icmp.xmit);
  /* increase number of messages attempted to send */
  snmp_inc_icmpoutmsgs();
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	60bb      	str	r3, [r7, #8]
  ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
 8005850:	f107 0208 	add.w	r2, r7, #8
 8005854:	2300      	movs	r3, #0
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	2301      	movs	r3, #1
 800585a:	9301      	str	r3, [sp, #4]
 800585c:	6978      	ldr	r0, [r7, #20]
 800585e:	2100      	movs	r1, #0
 8005860:	23ff      	movs	r3, #255	; 0xff
 8005862:	f000 fd5f 	bl	8006324 <ip_output>
  pbuf_free(q);
 8005866:	6978      	ldr	r0, [r7, #20]
 8005868:	f001 fd1c 	bl	80072a4 <pbuf_free>
}
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop

08005874 <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
 8005878:	4b04      	ldr	r3, [pc, #16]	; (800588c <igmp_init+0x18>)
 800587a:	4a05      	ldr	r2, [pc, #20]	; (8005890 <igmp_init+0x1c>)
 800587c:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
 800587e:	4b05      	ldr	r3, [pc, #20]	; (8005894 <igmp_init+0x20>)
 8005880:	4a05      	ldr	r2, [pc, #20]	; (8005898 <igmp_init+0x24>)
 8005882:	601a      	str	r2, [r3, #0]
}
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	1ffe8c1c 	.word	0x1ffe8c1c
 8005890:	010000e0 	.word	0x010000e0
 8005894:	1ffe8c20 	.word	0x1ffe8c20
 8005898:	020000e0 	.word	0x020000e0

0800589c <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  struct igmp_group* group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", netif));

  group = igmp_lookup_group(netif, &allsystems);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	4911      	ldr	r1, [pc, #68]	; (80058ec <igmp_start+0x50>)
 80058a8:	f000 f864 	bl	8005974 <igmp_lookup_group>
 80058ac:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d014      	beq.n	80058de <igmp_start+0x42>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2202      	movs	r2, #2
 80058b8:	735a      	strb	r2, [r3, #13]
    group->use++;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	7c1b      	ldrb	r3, [r3, #16]
 80058be:	3301      	adds	r3, #1
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	741a      	strb	r2, [r3, #16]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d005      	beq.n	80058da <igmp_start+0x3e>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip_addr_debug_print(IGMP_DEBUG, &allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", netif));
      netif->igmp_mac_filter(netif, &allsystems, IGMP_ADD_MAC_FILTER);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	4905      	ldr	r1, [pc, #20]	; (80058ec <igmp_start+0x50>)
 80058d6:	2201      	movs	r2, #1
 80058d8:	4798      	blx	r3
    }

    return ERR_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	e000      	b.n	80058e0 <igmp_start+0x44>
  }

  return ERR_MEM;
 80058de:	23ff      	movs	r3, #255	; 0xff
 80058e0:	b25b      	sxtb	r3, r3
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	1ffe8c1c 	.word	0x1ffe8c1c

080058f0 <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  struct igmp_group *group = igmp_group_list;
 80058f8:	4b0a      	ldr	r3, [pc, #40]	; (8005924 <igmp_report_groups+0x34>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", netif));

  while (group != NULL) {
 80058fe:	e00b      	b.n	8005918 <igmp_report_groups+0x28>
    if (group->netif == netif) {
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	429a      	cmp	r2, r3
 8005908:	d103      	bne.n	8005912 <igmp_report_groups+0x22>
      igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	2105      	movs	r1, #5
 800590e:	f000 f977 	bl	8005c00 <igmp_delaying_member>
    }
    group = group->next;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	60fb      	str	r3, [r7, #12]
{
  struct igmp_group *group = igmp_group_list;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", netif));

  while (group != NULL) {
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1f0      	bne.n	8005900 <igmp_report_groups+0x10>
    if (group->netif == netif) {
      igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
    }
    group = group->next;
  }
}
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	1ffe8c18 	.word	0x1ffe8c18

08005928 <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, ip_addr_t *addr)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  struct igmp_group *group = igmp_group_list;
 8005932:	4b0f      	ldr	r3, [pc, #60]	; (8005970 <igmp_lookfor_group+0x48>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60fb      	str	r3, [r7, #12]

  while (group != NULL) {
 8005938:	e00f      	b.n	800595a <igmp_lookfor_group+0x32>
    if ((group->netif == ifp) && (ip_addr_cmp(&(group->group_address), addr))) {
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	429a      	cmp	r2, r3
 8005942:	d107      	bne.n	8005954 <igmp_lookfor_group+0x2c>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	429a      	cmp	r2, r3
 800594e:	d101      	bne.n	8005954 <igmp_lookfor_group+0x2c>
      return group;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	e006      	b.n	8005962 <igmp_lookfor_group+0x3a>
    }
    group = group->next;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	60fb      	str	r3, [r7, #12]
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, ip_addr_t *addr)
{
  struct igmp_group *group = igmp_group_list;

  while (group != NULL) {
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1ec      	bne.n	800593a <igmp_lookfor_group+0x12>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	1ffe8c18 	.word	0x1ffe8c18

08005974 <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
struct igmp_group *
igmp_lookup_group(struct netif *ifp, ip_addr_t *addr)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  struct igmp_group *group = igmp_group_list;
 800597e:	4b1c      	ldr	r3, [pc, #112]	; (80059f0 <igmp_lookup_group+0x7c>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	60fb      	str	r3, [r7, #12]
  
  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	6839      	ldr	r1, [r7, #0]
 8005988:	f7ff ffce 	bl	8005928 <igmp_lookfor_group>
 800598c:	60f8      	str	r0, [r7, #12]
  if (group != NULL) {
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <igmp_lookup_group+0x24>
    /* Group already exists. */
    return group;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	e026      	b.n	80059e6 <igmp_lookup_group+0x72>
  }

  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
 8005998:	2002      	movs	r0, #2
 800599a:	f001 f901 	bl	8006ba0 <memp_malloc>
 800599e:	60f8      	str	r0, [r7, #12]
  if (group != NULL) {
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d01e      	beq.n	80059e4 <igmp_lookup_group+0x70>
    group->netif              = ifp;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	605a      	str	r2, [r3, #4]
    ip_addr_set(&(group->group_address), addr);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <igmp_lookup_group+0x44>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	e000      	b.n	80059ba <igmp_lookup_group+0x46>
 80059b8:	2300      	movs	r3, #0
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	6093      	str	r3, [r2, #8]
    group->timer              = 0; /* Not running */
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	81da      	strh	r2, [r3, #14]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	735a      	strb	r2, [r3, #13]
    group->last_reporter_flag = 0;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	731a      	strb	r2, [r3, #12]
    group->use                = 0;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	741a      	strb	r2, [r3, #16]
    group->next               = igmp_group_list;
 80059d6:	4b06      	ldr	r3, [pc, #24]	; (80059f0 <igmp_lookup_group+0x7c>)
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	601a      	str	r2, [r3, #0]
    
    igmp_group_list = group;
 80059de:	4a04      	ldr	r2, [pc, #16]	; (80059f0 <igmp_lookup_group+0x7c>)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6013      	str	r3, [r2, #0]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group?"":"impossible to ")));
  ip_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", ifp));

  return group;
 80059e4:	68fb      	ldr	r3, [r7, #12]
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	1ffe8c18 	.word	0x1ffe8c18

080059f4 <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, ip_addr_t *dest)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08a      	sub	sp, #40	; 0x28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  struct igmp_group* groupref;

  IGMP_STATS_INC(igmp.recv);

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */    
  iphdr = (struct ip_hdr *)p->payload;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	61fb      	str	r3, [r7, #28]
  if (pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4)) || (p->len < IGMP_MINLEN)) {
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	f003 030f 	and.w	r3, r3, #15
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	425b      	negs	r3, r3
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	b21b      	sxth	r3, r3
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	4619      	mov	r1, r3
 8005a22:	f001 fbcd 	bl	80071c0 <pbuf_header>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d103      	bne.n	8005a34 <igmp_input+0x40>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	895b      	ldrh	r3, [r3, #10]
 8005a30:	2b07      	cmp	r3, #7
 8005a32:	d803      	bhi.n	8005a3c <igmp_input+0x48>
    pbuf_free(p);
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f001 fc35 	bl	80072a4 <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
 8005a3a:	e088      	b.n	8005b4e <igmp_input+0x15a>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip_addr_debug_print(IGMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	61bb      	str	r3, [r7, #24]
  if (inet_chksum(igmp, p->len)) {
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	895b      	ldrh	r3, [r3, #10]
 8005a46:	69b8      	ldr	r0, [r7, #24]
 8005a48:	4619      	mov	r1, r3
 8005a4a:	f000 f9df 	bl	8005e0c <inet_chksum>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <igmp_input+0x68>
    pbuf_free(p);
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f001 fc25 	bl	80072a4 <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
 8005a5a:	e078      	b.n	8005b4e <igmp_input+0x15a>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
 8005a5c:	68b8      	ldr	r0, [r7, #8]
 8005a5e:	6879      	ldr	r1, [r7, #4]
 8005a60:	f7ff ff62 	bl	8005928 <igmp_lookfor_group>
 8005a64:	6278      	str	r0, [r7, #36]	; 0x24
  
  /* If group can be found or create... */
  if (!group) {
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d103      	bne.n	8005a74 <igmp_input+0x80>
    pbuf_free(p);
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f001 fc19 	bl	80072a4 <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
 8005a72:	e06c      	b.n	8005b4e <igmp_input+0x15a>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	2b11      	cmp	r3, #17
 8005a7a:	d002      	beq.n	8005a82 <igmp_input+0x8e>
 8005a7c:	2b16      	cmp	r3, #22
 8005a7e:	d053      	beq.n	8005b28 <igmp_input+0x134>
   }
   default: {
     LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
       igmp->igmp_msgtype, group->group_state, &group, group->netif));
     IGMP_STATS_INC(igmp.proterr);
     break;
 8005a80:	e061      	b.n	8005b46 <igmp_input+0x152>

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
   case IGMP_MEMB_QUERY: {
     /* IGMP_MEMB_QUERY to the "all systems" address ? */
     if ((ip_addr_cmp(dest, &allsystems)) && ip_addr_isany(&igmp->igmp_group_address)) {
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	4b33      	ldr	r3, [pc, #204]	; (8005b54 <igmp_input+0x160>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d12a      	bne.n	8005ae4 <igmp_input+0xf0>
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	3304      	adds	r3, #4
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <igmp_input+0xaa>
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d122      	bne.n	8005ae4 <igmp_input+0xf0>
       /* THIS IS THE GENERAL QUERY */
       LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: General IGMP_MEMB_QUERY on \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));

       if (igmp->igmp_maxresp == 0) {
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	785b      	ldrb	r3, [r3, #1]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d102      	bne.n	8005aac <igmp_input+0xb8>
         IGMP_STATS_INC(igmp.rx_v1);
         LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: got an all hosts query with time== 0 - this is V1 and not implemented - treat as v2\n"));
         igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	220a      	movs	r2, #10
 8005aaa:	705a      	strb	r2, [r3, #1]
       } else {
         IGMP_STATS_INC(igmp.rx_general);
       }

       groupref = igmp_group_list;
 8005aac:	4b2a      	ldr	r3, [pc, #168]	; (8005b58 <igmp_input+0x164>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	623b      	str	r3, [r7, #32]
       while (groupref) {
 8005ab2:	e013      	b.n	8005adc <igmp_input+0xe8>
         /* Do not send messages on the all systems group address! */
         if ((groupref->netif == inp) && (!(ip_addr_cmp(&(groupref->group_address), &allsystems)))) {
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d10b      	bne.n	8005ad6 <igmp_input+0xe2>
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	689a      	ldr	r2, [r3, #8]
 8005ac2:	4b24      	ldr	r3, [pc, #144]	; (8005b54 <igmp_input+0x160>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d005      	beq.n	8005ad6 <igmp_input+0xe2>
           igmp_delaying_member(groupref, igmp->igmp_maxresp);
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	785b      	ldrb	r3, [r3, #1]
 8005ace:	6a38      	ldr	r0, [r7, #32]
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	f000 f895 	bl	8005c00 <igmp_delaying_member>
         }
         groupref = groupref->next;
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	623b      	str	r3, [r7, #32]
       } else {
         IGMP_STATS_INC(igmp.rx_general);
       }

       groupref = igmp_group_list;
       while (groupref) {
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1e8      	bne.n	8005ab4 <igmp_input+0xc0>

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
   case IGMP_MEMB_QUERY: {
     /* IGMP_MEMB_QUERY to the "all systems" address ? */
     if ((ip_addr_cmp(dest, &allsystems)) && ip_addr_isany(&igmp->igmp_group_address)) {
 8005ae2:	e020      	b.n	8005b26 <igmp_input+0x132>
         }
         groupref = groupref->next;
       }
     } else {
       /* IGMP_MEMB_QUERY to a specific group ? */
       if (!ip_addr_isany(&igmp->igmp_group_address)) {
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d01c      	beq.n	8005b26 <igmp_input+0x132>
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d018      	beq.n	8005b26 <igmp_input+0x132>
         LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_MEMB_QUERY to a specific group "));
         ip_addr_debug_print(IGMP_DEBUG, &igmp->igmp_group_address);
         if (ip_addr_cmp(dest, &allsystems)) {
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	4b16      	ldr	r3, [pc, #88]	; (8005b54 <igmp_input+0x160>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d109      	bne.n	8005b14 <igmp_input+0x120>
           ip_addr_t groupaddr;
           LWIP_DEBUGF(IGMP_DEBUG, (" using \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
           /* we first need to re-look for the group since we used dest last time */
           ip_addr_copy(groupaddr, igmp->igmp_group_address);
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	617b      	str	r3, [r7, #20]
           group = igmp_lookfor_group(inp, &groupaddr);
 8005b06:	f107 0314 	add.w	r3, r7, #20
 8005b0a:	68b8      	ldr	r0, [r7, #8]
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	f7ff ff0b 	bl	8005928 <igmp_lookfor_group>
 8005b12:	6278      	str	r0, [r7, #36]	; 0x24
         } else {
           LWIP_DEBUGF(IGMP_DEBUG, (" with the group address as destination [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
         }

         if (group != NULL) {
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d005      	beq.n	8005b26 <igmp_input+0x132>
           IGMP_STATS_INC(igmp.rx_group);
           igmp_delaying_member(group, igmp->igmp_maxresp);
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	785b      	ldrb	r3, [r3, #1]
 8005b1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b20:	4619      	mov	r1, r3
 8005b22:	f000 f86d 	bl	8005c00 <igmp_delaying_member>
         }
       } else {
         IGMP_STATS_INC(igmp.proterr);
       }
     }
     break;
 8005b26:	e00e      	b.n	8005b46 <igmp_input+0x152>
   }
   case IGMP_V2_MEMB_REPORT: {
     LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_V2_MEMB_REPORT\n"));
     IGMP_STATS_INC(igmp.rx_report);
     if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	7b5b      	ldrb	r3, [r3, #13]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d109      	bne.n	8005b44 <igmp_input+0x150>
       /* This is on a specific group we have already looked up */
       group->timer = 0; /* stopped */
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	2200      	movs	r2, #0
 8005b34:	81da      	strh	r2, [r3, #14]
       group->group_state = IGMP_GROUP_IDLE_MEMBER;
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	2202      	movs	r2, #2
 8005b3a:	735a      	strb	r2, [r3, #13]
       group->last_reporter_flag = 0;
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	2200      	movs	r2, #0
 8005b40:	731a      	strb	r2, [r3, #12]
     }
     break;
 8005b42:	e7ff      	b.n	8005b44 <igmp_input+0x150>
 8005b44:	bf00      	nop
     IGMP_STATS_INC(igmp.proterr);
     break;
   }
  }

  pbuf_free(p);
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f001 fbac 	bl	80072a4 <pbuf_free>
  return;
 8005b4c:	bf00      	nop
}
 8005b4e:	3728      	adds	r7, #40	; 0x28
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	1ffe8c1c 	.word	0x1ffe8c1c
 8005b58:	1ffe8c18 	.word	0x1ffe8c18

08005b5c <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
  struct igmp_group *group = igmp_group_list;
 8005b62:	4b0f      	ldr	r3, [pc, #60]	; (8005ba0 <igmp_tmr+0x44>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	607b      	str	r3, [r7, #4]

  while (group != NULL) {
 8005b68:	e013      	b.n	8005b92 <igmp_tmr+0x36>
    if (group->timer > 0) {
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	89db      	ldrh	r3, [r3, #14]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00c      	beq.n	8005b8c <igmp_tmr+0x30>
      group->timer--;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	89db      	ldrh	r3, [r3, #14]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	81da      	strh	r2, [r3, #14]
      if (group->timer == 0) {
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	89db      	ldrh	r3, [r3, #14]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d102      	bne.n	8005b8c <igmp_tmr+0x30>
        igmp_timeout(group);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f80c 	bl	8005ba4 <igmp_timeout>
      }
    }
    group = group->next;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	607b      	str	r3, [r7, #4]
void
igmp_tmr(void)
{
  struct igmp_group *group = igmp_group_list;

  while (group != NULL) {
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e8      	bne.n	8005b6a <igmp_tmr+0xe>
        igmp_timeout(group);
      }
    }
    group = group->next;
  }
}
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	1ffe8c18 	.word	0x1ffe8c18

08005ba4 <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct igmp_group *group)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group */
  if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	7b5b      	ldrb	r3, [r3, #13]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d103      	bne.n	8005bbc <igmp_timeout+0x18>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip_addr_debug_print(IGMP_DEBUG, &(group->group_address));
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", group->netif));

    IGMP_STATS_INC(igmp.tx_report);
    igmp_send(group, IGMP_V2_MEMB_REPORT);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	2116      	movs	r1, #22
 8005bb8:	f000 f868 	bl	8005c8c <igmp_send>
  }
}
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop

08005bc4 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	70fb      	strb	r3, [r7, #3]
  /* ensure the input value is > 0 */
  if (max_time == 0) {
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <igmp_start_timer+0x16>
    max_time = 1;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	70fb      	strb	r3, [r7, #3]
  }
  /* ensure the random value is > 0 */
  group->timer = (LWIP_RAND() % (max_time - 1)) + 1;
 8005bda:	f002 ffab 	bl	8008b34 <rand>
 8005bde:	4603      	mov	r3, r0
 8005be0:	78fa      	ldrb	r2, [r7, #3]
 8005be2:	3a01      	subs	r2, #1
 8005be4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005be8:	fb02 f201 	mul.w	r2, r2, r1
 8005bec:	1a9b      	subs	r3, r3, r2
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	81da      	strh	r2, [r3, #14]
}
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop

08005c00 <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	460b      	mov	r3, r1
 8005c0a:	70fb      	strb	r3, [r7, #3]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	7b5b      	ldrb	r3, [r3, #13]
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d00d      	beq.n	8005c30 <igmp_delaying_member+0x30>
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	7b5b      	ldrb	r3, [r3, #13]
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d111      	bne.n	8005c40 <igmp_delaying_member+0x40>
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
      ((group->timer == 0) || (maxresp < group->timer)))) {
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	89db      	ldrh	r3, [r3, #14]
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d005      	beq.n	8005c30 <igmp_delaying_member+0x30>
      ((group->timer == 0) || (maxresp < group->timer)))) {
 8005c24:	78fb      	ldrb	r3, [r7, #3]
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	89db      	ldrh	r3, [r3, #14]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d207      	bcs.n	8005c40 <igmp_delaying_member+0x40>
    igmp_start_timer(group, maxresp);
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	4619      	mov	r1, r3
 8005c36:	f7ff ffc5 	bl	8005bc4 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	735a      	strb	r2, [r3, #13]
  }
}
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop

08005c48 <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest, struct netif *netif)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b08c      	sub	sp, #48	; 0x30
 8005c4c:	af06      	add	r7, sp, #24
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
 8005c54:	603b      	str	r3, [r7, #0]
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
 8005c56:	f240 4394 	movw	r3, #1172	; 0x494
 8005c5a:	82bb      	strh	r3, [r7, #20]
  ra[1] = 0x0000; /* Router shall examine packet */
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	82fb      	strh	r3, [r7, #22]
  IGMP_STATS_INC(igmp.xmit);
  return ip_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
 8005c60:	2300      	movs	r3, #0
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	2302      	movs	r3, #2
 8005c66:	9301      	str	r3, [sp, #4]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	9302      	str	r3, [sp, #8]
 8005c6c:	f107 0314 	add.w	r3, r7, #20
 8005c70:	9303      	str	r3, [sp, #12]
 8005c72:	2304      	movs	r3, #4
 8005c74:	9304      	str	r3, [sp, #16]
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	68b9      	ldr	r1, [r7, #8]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f000 faa3 	bl	80061c8 <ip_output_if_opt>
 8005c82:	4603      	mov	r3, r0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct igmp_group *group, u8_t type)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	460b      	mov	r3, r1
 8005c96:	70fb      	strb	r3, [r7, #3]
  struct pbuf*     p    = NULL;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	613b      	str	r3, [r7, #16]
  struct igmp_msg* igmp = NULL;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60fb      	str	r3, [r7, #12]
  ip_addr_t   src  = *IP_ADDR_ANY;
 8005ca0:	4b29      	ldr	r3, [pc, #164]	; (8005d48 <igmp_send+0xbc>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	60bb      	str	r3, [r7, #8]
  ip_addr_t*  dest = NULL;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	617b      	str	r3, [r7, #20]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
 8005caa:	2000      	movs	r0, #0
 8005cac:	2108      	movs	r1, #8
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f001 f934 	bl	8006f1c <pbuf_alloc>
 8005cb4:	6138      	str	r0, [r7, #16]
  
  if (p) {
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d042      	beq.n	8005d42 <igmp_send+0xb6>
    igmp = (struct igmp_msg *)p->payload;
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
               (p->len >= sizeof(struct igmp_msg)));
    ip_addr_copy(src, group->netif->ip_addr);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	60bb      	str	r3, [r7, #8]
     
    if (type == IGMP_V2_MEMB_REPORT) {
 8005cca:	78fb      	ldrb	r3, [r7, #3]
 8005ccc:	2b16      	cmp	r3, #22
 8005cce:	d10a      	bne.n	8005ce6 <igmp_send+0x5a>
      dest = &(group->group_address);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3308      	adds	r3, #8
 8005cd4:	617b      	str	r3, [r7, #20]
      ip_addr_copy(igmp->igmp_group_address, group->group_address);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	605a      	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	731a      	strb	r2, [r3, #12]
 8005ce4:	e008      	b.n	8005cf8 <igmp_send+0x6c>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
 8005ce6:	78fb      	ldrb	r3, [r7, #3]
 8005ce8:	2b17      	cmp	r3, #23
 8005cea:	d105      	bne.n	8005cf8 <igmp_send+0x6c>
        dest = &allrouters;
 8005cec:	4b17      	ldr	r3, [pc, #92]	; (8005d4c <igmp_send+0xc0>)
 8005cee:	617b      	str	r3, [r7, #20]
        ip_addr_copy(igmp->igmp_group_address, group->group_address);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	605a      	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	2b16      	cmp	r3, #22
 8005cfc:	d002      	beq.n	8005d04 <igmp_send+0x78>
 8005cfe:	78fb      	ldrb	r3, [r7, #3]
 8005d00:	2b17      	cmp	r3, #23
 8005d02:	d11b      	bne.n	8005d3c <igmp_send+0xb0>
      igmp->igmp_msgtype  = type;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	78fa      	ldrb	r2, [r7, #3]
 8005d08:	701a      	strb	r2, [r3, #0]
      igmp->igmp_maxresp  = 0;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	705a      	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	709a      	strb	r2, [r3, #2]
 8005d16:	2200      	movs	r2, #0
 8005d18:	70da      	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	2108      	movs	r1, #8
 8005d1e:	f000 f875 	bl	8005e0c <inet_chksum>
 8005d22:	4603      	mov	r3, r0
 8005d24:	461a      	mov	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	805a      	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, group->netif);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f107 0208 	add.w	r2, r7, #8
 8005d32:	6938      	ldr	r0, [r7, #16]
 8005d34:	4611      	mov	r1, r2
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	f7ff ff86 	bl	8005c48 <igmp_ip_output_if>
    }

    pbuf_free(p);
 8005d3c:	6938      	ldr	r0, [r7, #16]
 8005d3e:	f001 fab1 	bl	80072a4 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
 8005d42:	3718      	adds	r7, #24
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	08008ee0 	.word	0x08008ee0
 8005d4c:	1ffe8c20 	.word	0x1ffe8c20

08005d50 <lwip_standard_chksum>:
 * @return host order (!) lwip checksum (non-inverted Internet sum) 
 */

static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b089      	sub	sp, #36	; 0x24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  u8_t *pb = (u8_t *)dataptr;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	61fb      	str	r3, [r7, #28]
  u16_t *ps, t = 0;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8005d62:	2300      	movs	r3, #0
 8005d64:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00d      	beq.n	8005d90 <lwip_standard_chksum+0x40>
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	dd0a      	ble.n	8005d90 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8005d7a:	f107 030e 	add.w	r3, r7, #14
 8005d7e:	3301      	adds	r3, #1
 8005d80:	69fa      	ldr	r2, [r7, #28]
 8005d82:	1c51      	adds	r1, r2, #1
 8005d84:	61f9      	str	r1, [r7, #28]
 8005d86:	7812      	ldrb	r2, [r2, #0]
 8005d88:	701a      	strb	r2, [r3, #0]
    len--;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8005d94:	e00a      	b.n	8005dac <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	1c9a      	adds	r2, r3, #2
 8005d9a:	61ba      	str	r2, [r7, #24]
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	4413      	add	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]
    len -= 2;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	3b02      	subs	r3, #2
 8005daa:	603b      	str	r3, [r7, #0]
    len--;
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
  while (len > 1) {
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	dcf1      	bgt.n	8005d96 <lwip_standard_chksum+0x46>
    sum += *ps++;
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	dd04      	ble.n	8005dc2 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(u8_t *)ps;
 8005db8:	f107 030e 	add.w	r3, r7, #14
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	7812      	ldrb	r2, [r2, #0]
 8005dc0:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8005dc2:	89fb      	ldrh	r3, [r7, #14]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	4413      	add	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  sum = FOLD_U32T(sum);
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	0c1a      	lsrs	r2, r3, #16
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	4413      	add	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	0c1a      	lsrs	r2, r3, #16
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	4413      	add	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d008      	beq.n	8005dfc <lwip_standard_chksum+0xac>
    sum = SWAP_BYTES_IN_WORD(sum);
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	021b      	lsls	r3, r3, #8
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005df6:	0a1b      	lsrs	r3, r3, #8
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	b29b      	uxth	r3, r3
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3724      	adds	r7, #36	; 0x24
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(void *dataptr, u16_t len)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	460b      	mov	r3, r1
 8005e16:	807b      	strh	r3, [r7, #2]
  return ~LWIP_CHKSUM(dataptr, len);
 8005e18:	887b      	ldrh	r3, [r7, #2]
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	f7ff ff97 	bl	8005d50 <lwip_standard_chksum>
 8005e22:	4603      	mov	r3, r0
 8005e24:	43db      	mvns	r3, r3
 8005e26:	b29b      	uxth	r3, r3
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	617b      	str	r3, [r7, #20]
  swapped = 0;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	73fb      	strb	r3, [r7, #15]
  for(q = p; q != NULL; q = q->next) {
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	613b      	str	r3, [r7, #16]
 8005e44:	e029      	b.n	8005e9a <inet_chksum_pbuf+0x6a>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	895b      	ldrh	r3, [r3, #10]
 8005e4e:	4610      	mov	r0, r2
 8005e50:	4619      	mov	r1, r3
 8005e52:	f7ff ff7d 	bl	8005d50 <lwip_standard_chksum>
 8005e56:	4603      	mov	r3, r0
 8005e58:	461a      	mov	r2, r3
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	0c1a      	lsrs	r2, r3, #16
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	4413      	add	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	895b      	ldrh	r3, [r3, #10]
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00c      	beq.n	8005e94 <inet_chksum_pbuf+0x64>
      swapped = 1 - swapped;
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
 8005e7c:	f1c3 0301 	rsb	r3, r3, #1
 8005e80:	73fb      	strb	r3, [r7, #15]
      acc = SWAP_BYTES_IN_WORD(acc);
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	021b      	lsls	r3, r3, #8
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005e8e:	0a1b      	lsrs	r3, r3, #8
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	613b      	str	r3, [r7, #16]
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1d2      	bne.n	8005e46 <inet_chksum_pbuf+0x16>
      swapped = 1 - swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d008      	beq.n	8005eb8 <inet_chksum_pbuf+0x88>
    acc = SWAP_BYTES_IN_WORD(acc);
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	021b      	lsls	r3, r3, #8
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005eb2:	0a1b      	lsrs	r3, r3, #8
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	b29b      	uxth	r3, r3
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3718      	adds	r7, #24
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <ip_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip_route(ip_addr_t *dest)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8005ed0:	4b19      	ldr	r3, [pc, #100]	; (8005f38 <ip_route+0x70>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	60fb      	str	r3, [r7, #12]
 8005ed6:	e015      	b.n	8005f04 <ip_route+0x3c>
    /* network mask matches? */
    if (netif_is_up(netif)) {
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00b      	beq.n	8005efe <ip_route+0x36>
      if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	405a      	eors	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <ip_route+0x36>
        /* return netif on which to forward IP packet */
        return netif;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	e015      	b.n	8005f2a <ip_route+0x62>
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1e6      	bne.n	8005ed8 <ip_route+0x10>
        /* return netif on which to forward IP packet */
        return netif;
      }
    }
  }
  if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
 8005f0a:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <ip_route+0x74>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d007      	beq.n	8005f22 <ip_route+0x5a>
 8005f12:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <ip_route+0x74>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <ip_route+0x5e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    snmp_inc_ipoutnoroutes();
    return NULL;
 8005f22:	2300      	movs	r3, #0
 8005f24:	e001      	b.n	8005f2a <ip_route+0x62>
  }
  /* no matching netif found, use default netif */
  return netif_default;
 8005f26:	4b05      	ldr	r3, [pc, #20]	; (8005f3c <ip_route+0x74>)
 8005f28:	681b      	ldr	r3, [r3, #0]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	1ffef784 	.word	0x1ffef784
 8005f3c:	1ffef788 	.word	0x1ffef788

08005f40 <ip_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  snmp_inc_ipinreceives();

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	60fb      	str	r3, [r7, #12]
  if (IPH_V(iphdr) != 4) {
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	091b      	lsrs	r3, r3, #4
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b04      	cmp	r3, #4
 8005f5a:	d004      	beq.n	8005f66 <ip_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
    ip_debug_print(p);
    pbuf_free(p);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f001 f9a1 	bl	80072a4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	e100      	b.n	8006168 <ip_input+0x228>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	f003 030f 	and.w	r3, r3, #15
 8005f70:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8005f72:	897b      	ldrh	r3, [r7, #10]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	885b      	ldrh	r3, [r3, #2]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f000 fb64 	bl	800664c <lwip_ntohs>
 8005f84:	4603      	mov	r3, r0
 8005f86:	813b      	strh	r3, [r7, #8]

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	895b      	ldrh	r3, [r3, #10]
 8005f8c:	897a      	ldrh	r2, [r7, #10]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d804      	bhi.n	8005f9c <ip_input+0x5c>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	891b      	ldrh	r3, [r3, #8]
 8005f96:	893a      	ldrh	r2, [r7, #8]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d904      	bls.n	8005fa6 <ip_input+0x66>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f001 f981 	bl	80072a4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    snmp_inc_ipindiscards();
    return ERR_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	e0e0      	b.n	8006168 <ip_input+0x228>
  }
#endif

  /* Trim pbuf. This should have been done at the netif layer,
   * but we'll do it anyway just to be sure that its done. */
  pbuf_realloc(p, iphdr_len);
 8005fa6:	893b      	ldrh	r3, [r7, #8]
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	4619      	mov	r1, r3
 8005fac:	f001 f8b0 	bl	8007110 <pbuf_realloc>

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy(current_iphdr_dest, iphdr->dest);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	4a6f      	ldr	r2, [pc, #444]	; (8006174 <ip_input+0x234>)
 8005fb6:	6013      	str	r3, [r2, #0]
  ip_addr_copy(current_iphdr_src, iphdr->src);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	4a6e      	ldr	r2, [pc, #440]	; (8006178 <ip_input+0x238>)
 8005fbe:	6013      	str	r3, [r2, #0]

  /* match packet against an interface, i.e. is this packet for us? */
#if LWIP_IGMP
  if (ip_addr_ismulticast(&current_iphdr_dest)) {
 8005fc0:	4b6c      	ldr	r3, [pc, #432]	; (8006174 <ip_input+0x234>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fc8:	2be0      	cmp	r3, #224	; 0xe0
 8005fca:	d113      	bne.n	8005ff4 <ip_input+0xb4>
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, &current_iphdr_dest))) {
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	b25b      	sxtb	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	da09      	bge.n	8005fee <ip_input+0xae>
 8005fda:	6838      	ldr	r0, [r7, #0]
 8005fdc:	4965      	ldr	r1, [pc, #404]	; (8006174 <ip_input+0x234>)
 8005fde:	f7ff fca3 	bl	8005928 <igmp_lookfor_group>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <ip_input+0xae>
      netif = inp;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	617b      	str	r3, [r7, #20]
 8005fec:	e03a      	b.n	8006064 <ip_input+0x124>
    } else {
      netif = NULL;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	617b      	str	r3, [r7, #20]
 8005ff2:	e037      	b.n	8006064 <ip_input+0x124>
#endif /* LWIP_IGMP */
  {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	613b      	str	r3, [r7, #16]
    netif = inp;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	617b      	str	r3, [r7, #20]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&netif->ip_addr) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d016      	beq.n	8006038 <ip_input+0xf8>
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	3304      	adds	r3, #4
 800600e:	2b00      	cmp	r3, #0
 8006010:	d012      	beq.n	8006038 <ip_input+0xf8>
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00e      	beq.n	8006038 <ip_input+0xf8>
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
 800601a:	4b56      	ldr	r3, [pc, #344]	; (8006174 <ip_input+0x234>)
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	429a      	cmp	r2, r3
 8006024:	d01e      	beq.n	8006064 <ip_input+0x124>
            /* or broadcast on this interface network address? */
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
 8006026:	4b53      	ldr	r3, [pc, #332]	; (8006174 <ip_input+0x234>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4618      	mov	r0, r3
 800602c:	6979      	ldr	r1, [r7, #20]
 800602e:	f000 f99f 	bl	8006370 <ip4_addr_isbroadcast>
 8006032:	4603      	mov	r3, r0
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
 8006034:	2b00      	cmp	r3, #0
 8006036:	d115      	bne.n	8006064 <ip_input+0x124>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d005      	beq.n	800604a <ip_input+0x10a>
        first = 0;
 800603e:	2300      	movs	r3, #0
 8006040:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 8006042:	4b4e      	ldr	r3, [pc, #312]	; (800617c <ip_input+0x23c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	e002      	b.n	8006050 <ip_input+0x110>
      } else {
        netif = netif->next;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	617b      	str	r3, [r7, #20]
      }
      if (netif == inp) {
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	429a      	cmp	r2, r3
 8006056:	d102      	bne.n	800605e <ip_input+0x11e>
        netif = netif->next;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	617b      	str	r3, [r7, #20]
      }
    } while(netif != NULL);
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1cb      	bne.n	8005ffc <ip_input+0xbc>
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
 8006064:	4b44      	ldr	r3, [pc, #272]	; (8006178 <ip_input+0x238>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4618      	mov	r0, r3
 800606a:	6839      	ldr	r1, [r7, #0]
 800606c:	f000 f980 	bl	8006370 <ip4_addr_isbroadcast>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d105      	bne.n	8006082 <ip_input+0x142>
         (ip_addr_ismulticast(&current_iphdr_src))) {
 8006076:	4b40      	ldr	r3, [pc, #256]	; (8006178 <ip_input+0x238>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
 800607e:	2be0      	cmp	r3, #224	; 0xe0
 8006080:	d104      	bne.n	800608c <ip_input+0x14c>
         (ip_addr_ismulticast(&current_iphdr_src))) {
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f001 f90e 	bl	80072a4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
      return ERR_OK;
 8006088:	2300      	movs	r3, #0
 800608a:	e06d      	b.n	8006168 <ip_input+0x228>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d104      	bne.n	800609c <ip_input+0x15c>
#endif /* IP_FORWARD */
    {
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
    }
    pbuf_free(p);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f001 f906 	bl	80072a4 <pbuf_free>
    return ERR_OK;
 8006098:	2300      	movs	r3, #0
 800609a:	e065      	b.n	8006168 <ip_input+0x228>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	88db      	ldrh	r3, [r3, #6]
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	461a      	mov	r2, r3
 80060a4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80060a8:	4013      	ands	r3, r2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d004      	beq.n	80060b8 <ip_input+0x178>
    if (p == NULL) {
      return ERR_OK;
    }
    iphdr = (struct ip_hdr *)p->payload;
#else /* IP_REASSEMBLY == 0, no packet fragment reassembly code present */
    pbuf_free(p);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f001 f8f8 	bl	80072a4 <pbuf_free>
      ntohs(IPH_OFFSET(iphdr))));
    IP_STATS_INC(ip.opterr);
    IP_STATS_INC(ip.drop);
    /* unsupported protocol feature */
    snmp_inc_ipinunknownprotos();
    return ERR_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	e057      	b.n	8006168 <ip_input+0x228>

#if IP_OPTIONS_ALLOWED == 0 /* no support for IP options in the IP header? */

#if LWIP_IGMP
  /* there is an extra "router alert" option in IGMP messages which we allow for but do not police */
  if((iphdr_hlen > IP_HLEN) &&  (IPH_PROTO(iphdr) != IP_PROTO_IGMP)) {
 80060b8:	897b      	ldrh	r3, [r7, #10]
 80060ba:	2b14      	cmp	r3, #20
 80060bc:	d908      	bls.n	80060d0 <ip_input+0x190>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	7a5b      	ldrb	r3, [r3, #9]
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d004      	beq.n	80060d0 <ip_input+0x190>
#else
  if (iphdr_hlen > IP_HLEN) {
#endif /* LWIP_IGMP */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since there were IP options (while IP_OPTIONS_ALLOWED == 0).\n"));
    pbuf_free(p);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f001 f8ec 	bl	80072a4 <pbuf_free>
    IP_STATS_INC(ip.opterr);
    IP_STATS_INC(ip.drop);
    /* unsupported protocol feature */
    snmp_inc_ipinunknownprotos();
    return ERR_OK;
 80060cc:	2300      	movs	r3, #0
 80060ce:	e04b      	b.n	8006168 <ip_input+0x228>
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
  ip_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  current_netif = inp;
 80060d0:	4a2b      	ldr	r2, [pc, #172]	; (8006180 <ip_input+0x240>)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	6013      	str	r3, [r2, #0]
  current_header = iphdr;
 80060d6:	4a2b      	ldr	r2, [pc, #172]	; (8006184 <ip_input+0x244>)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6013      	str	r3, [r2, #0]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	6839      	ldr	r1, [r7, #0]
 80060e0:	f001 fa02 	bl	80074e8 <raw_input>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d131      	bne.n	800614e <ip_input+0x20e>
#endif /* LWIP_RAW */
  {
    switch (IPH_PROTO(iphdr)) {
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	7a5b      	ldrb	r3, [r3, #9]
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d00e      	beq.n	8006110 <ip_input+0x1d0>
 80060f2:	2b11      	cmp	r3, #17
 80060f4:	d002      	beq.n	80060fc <ip_input+0x1bc>
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d005      	beq.n	8006106 <ip_input+0x1c6>
 80060fa:	e00f      	b.n	800611c <ip_input+0x1dc>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      snmp_inc_ipindelivers();
      udp_input(p, inp);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	6839      	ldr	r1, [r7, #0]
 8006100:	f001 fb82 	bl	8007808 <udp_input>
      break;
 8006104:	e023      	b.n	800614e <ip_input+0x20e>
      break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      snmp_inc_ipindelivers();
      icmp_input(p, inp);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	f7ff fa69 	bl	80055e0 <icmp_input>
      break;
 800610e:	e01e      	b.n	800614e <ip_input+0x20e>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
    case IP_PROTO_IGMP:
      igmp_input(p, inp, &current_iphdr_dest);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	6839      	ldr	r1, [r7, #0]
 8006114:	4a17      	ldr	r2, [pc, #92]	; (8006174 <ip_input+0x234>)
 8006116:	f7ff fc6d 	bl	80059f4 <igmp_input>
      break;
 800611a:	e018      	b.n	800614e <ip_input+0x20e>
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
 800611c:	4b15      	ldr	r3, [pc, #84]	; (8006174 <ip_input+0x234>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4618      	mov	r0, r3
 8006122:	6839      	ldr	r1, [r7, #0]
 8006124:	f000 f924 	bl	8006370 <ip4_addr_isbroadcast>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10c      	bne.n	8006148 <ip_input+0x208>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
 800612e:	4b11      	ldr	r3, [pc, #68]	; (8006174 <ip_input+0x234>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
 8006136:	2be0      	cmp	r3, #224	; 0xe0
 8006138:	d006      	beq.n	8006148 <ip_input+0x208>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        p->payload = iphdr;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	2102      	movs	r1, #2
 8006144:	f7ff fb30 	bl	80057a8 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f001 f8ab 	bl	80072a4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      snmp_inc_ipinunknownprotos();
    }
  }

  current_netif = NULL;
 800614e:	4b0c      	ldr	r3, [pc, #48]	; (8006180 <ip_input+0x240>)
 8006150:	2200      	movs	r2, #0
 8006152:	601a      	str	r2, [r3, #0]
  current_header = NULL;
 8006154:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <ip_input+0x244>)
 8006156:	2200      	movs	r2, #0
 8006158:	601a      	str	r2, [r3, #0]
  ip_addr_set_any(&current_iphdr_src);
 800615a:	4b07      	ldr	r3, [pc, #28]	; (8006178 <ip_input+0x238>)
 800615c:	2200      	movs	r2, #0
 800615e:	601a      	str	r2, [r3, #0]
  ip_addr_set_any(&current_iphdr_dest);
 8006160:	4b04      	ldr	r3, [pc, #16]	; (8006174 <ip_input+0x234>)
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]

  return ERR_OK;
 8006166:	2300      	movs	r3, #0
 8006168:	b25b      	sxtb	r3, r3
}
 800616a:	4618      	mov	r0, r3
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	1ffef128 	.word	0x1ffef128
 8006178:	1ffef120 	.word	0x1ffef120
 800617c:	1ffef784 	.word	0x1ffef784
 8006180:	1ffef124 	.word	0x1ffef124
 8006184:	1ffef12c 	.word	0x1ffef12c

08006188 <ip_output_if>:
 */
err_t
ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8006188:	b590      	push	{r4, r7, lr}
 800618a:	b08b      	sub	sp, #44	; 0x2c
 800618c:	af06      	add	r7, sp, #24
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
 8006194:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 8006196:	78fc      	ldrb	r4, [r7, #3]
 8006198:	f897 3020 	ldrb.w	r3, [r7, #32]
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80061a2:	9301      	str	r3, [sp, #4]
 80061a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a6:	9302      	str	r3, [sp, #8]
 80061a8:	2300      	movs	r3, #0
 80061aa:	9303      	str	r3, [sp, #12]
 80061ac:	2300      	movs	r3, #0
 80061ae:	9304      	str	r3, [sp, #16]
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	68b9      	ldr	r1, [r7, #8]
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	4623      	mov	r3, r4
 80061b8:	f000 f806 	bl	80061c8 <ip_output_if_opt>
 80061bc:	4603      	mov	r3, r0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd90      	pop	{r4, r7, pc}
 80061c6:	bf00      	nop

080061c8 <ip_output_if_opt>:
 * @ param optlen length of ip_options
 */
err_t ip_output_if_opt(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b088      	sub	sp, #32
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
 80061d4:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  snmp_inc_ipoutrequests();

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 808b 	beq.w	80062f4 <ip_output_if_opt+0x12c>
    u16_t ip_hlen = IP_HLEN;
 80061de:	2314      	movs	r3, #20
 80061e0:	83fb      	strh	r3, [r7, #30]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
 80061e2:	2300      	movs	r3, #0
 80061e4:	83bb      	strh	r3, [r7, #28]
    if (optlen != 0) {
 80061e6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d02c      	beq.n	8006246 <ip_output_if_opt+0x7e>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      /* round up to a multiple of 4 */
      optlen_aligned = ((optlen + 3) & ~3);
 80061ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061ee:	3303      	adds	r3, #3
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	f023 0303 	bic.w	r3, r3, #3
 80061f6:	83bb      	strh	r3, [r7, #28]
      ip_hlen += optlen_aligned;
 80061f8:	8bfa      	ldrh	r2, [r7, #30]
 80061fa:	8bbb      	ldrh	r3, [r7, #28]
 80061fc:	4413      	add	r3, r2
 80061fe:	83fb      	strh	r3, [r7, #30]
      /* First write in the IP options */
      if (pbuf_header(p, optlen_aligned)) {
 8006200:	8bbb      	ldrh	r3, [r7, #28]
 8006202:	b21b      	sxth	r3, r3
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	4619      	mov	r1, r3
 8006208:	f000 ffda 	bl	80071c0 <pbuf_header>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <ip_output_if_opt+0x4e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
        snmp_inc_ipoutdiscards();
        return ERR_BUF;
 8006212:	23fe      	movs	r3, #254	; 0xfe
 8006214:	e07e      	b.n	8006314 <ip_output_if_opt+0x14c>
      }
      MEMCPY(p->payload, ip_options, optlen);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800621c:	4610      	mov	r0, r2
 800621e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006220:	461a      	mov	r2, r3
 8006222:	f7fe fb3f 	bl	80048a4 <thumb2_memcpy>
      if (optlen < optlen_aligned) {
 8006226:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8006228:	8bbb      	ldrh	r3, [r7, #28]
 800622a:	429a      	cmp	r2, r3
 800622c:	d20b      	bcs.n	8006246 <ip_output_if_opt+0x7e>
        /* zero the remaining bytes */
        memset(((char*)p->payload) + optlen, 0, optlen_aligned - optlen);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006234:	18d1      	adds	r1, r2, r3
 8006236:	8bba      	ldrh	r2, [r7, #28]
 8006238:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	4608      	mov	r0, r1
 800623e:	2100      	movs	r1, #0
 8006240:	461a      	mov	r2, r3
 8006242:	f002 fc6e 	bl	8008b22 <memset>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	2114      	movs	r1, #20
 800624a:	f000 ffb9 	bl	80071c0 <pbuf_header>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <ip_output_if_opt+0x90>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
 8006254:	23fe      	movs	r3, #254	; 0xfe
 8006256:	e05d      	b.n	8006314 <ip_output_if_opt+0x14c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	78fa      	ldrb	r2, [r7, #3]
 8006262:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800626a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip_addr_copy(iphdr->dest, *dest);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8006274:	8bfb      	ldrh	r3, [r7, #30]
 8006276:	089b      	lsrs	r3, r3, #2
 8006278:	b29b      	uxth	r3, r3
 800627a:	b2db      	uxtb	r3, r3
 800627c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006280:	b2da      	uxtb	r2, r3
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800628c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	891b      	ldrh	r3, [r3, #8]
 8006292:	4618      	mov	r0, r3
 8006294:	f000 f9c4 	bl	8006620 <lwip_htons>
 8006298:	4603      	mov	r3, r0
 800629a:	461a      	mov	r2, r3
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	2200      	movs	r2, #0
 80062a4:	719a      	strb	r2, [r3, #6]
 80062a6:	2200      	movs	r2, #0
 80062a8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, htons(ip_id));
 80062aa:	4b1d      	ldr	r3, [pc, #116]	; (8006320 <ip_output_if_opt+0x158>)
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 f9b6 	bl	8006620 <lwip_htons>
 80062b4:	4603      	mov	r3, r0
 80062b6:	461a      	mov	r2, r3
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80062bc:	4b18      	ldr	r3, [pc, #96]	; (8006320 <ip_output_if_opt+0x158>)
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	3301      	adds	r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	4b16      	ldr	r3, [pc, #88]	; (8006320 <ip_output_if_opt+0x158>)
 80062c6:	801a      	strh	r2, [r3, #0]

    if (ip_addr_isany(src)) {
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <ip_output_if_opt+0x10e>
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d104      	bne.n	80062e0 <ip_output_if_opt+0x118>
      ip_addr_copy(iphdr->src, netif->ip_addr);
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	60da      	str	r2, [r3, #12]
 80062de:	e003      	b.n	80062e8 <ip_output_if_opt+0x120>
    } else {
      /* src cannot be NULL here */
      ip_addr_copy(iphdr->src, *src);
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	60da      	str	r2, [r3, #12]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
    chk_sum = (chk_sum >> 16) + chk_sum;
    chk_sum = ~chk_sum;
    iphdr->_chksum = chk_sum; /* network order */
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	2200      	movs	r2, #0
 80062ec:	729a      	strb	r2, [r3, #10]
 80062ee:	2200      	movs	r2, #0
 80062f0:	72da      	strb	r2, [r3, #11]
 80062f2:	e008      	b.n	8006306 <ip_output_if_opt+0x13e>
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, ip_hlen));
#endif
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	61bb      	str	r3, [r7, #24]
    ip_addr_copy(dest_addr, iphdr->dest);
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8006300:	f107 0314 	add.w	r3, r7, #20
 8006304:	607b      	str	r3, [r7, #4]
    return ip_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
  return netif->output(netif, p, dest);
 8006306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800630c:	68f9      	ldr	r1, [r7, #12]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	4798      	blx	r3
 8006312:	4603      	mov	r3, r0
 8006314:	b25b      	sxtb	r3, r3
}
 8006316:	4618      	mov	r0, r3
 8006318:	3720      	adds	r7, #32
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	1ffe8c24 	.word	0x1ffe8c24

08006324 <ip_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
 8006324:	b590      	push	{r4, r7, lr}
 8006326:	b08b      	sub	sp, #44	; 0x2c
 8006328:	af04      	add	r7, sp, #16
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
 8006330:	70fb      	strb	r3, [r7, #3]

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  if ((netif = ip_route(dest)) == NULL) {
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7ff fdc8 	bl	8005ec8 <ip_route>
 8006338:	6178      	str	r0, [r7, #20]
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <ip_output+0x20>
    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    return ERR_RTE;
 8006340:	23fc      	movs	r3, #252	; 0xfc
 8006342:	e00f      	b.n	8006364 <ip_output+0x40>
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
 8006344:	78fc      	ldrb	r4, [r7, #3]
 8006346:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006350:	9301      	str	r3, [sp, #4]
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	9302      	str	r3, [sp, #8]
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	68b9      	ldr	r1, [r7, #8]
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	4623      	mov	r3, r4
 800635e:	f7ff ff13 	bl	8006188 <ip_output_if>
 8006362:	4603      	mov	r3, r0
 8006364:	b25b      	sxtb	r3, r3
}
 8006366:	4618      	mov	r0, r3
 8006368:	371c      	adds	r7, #28
 800636a:	46bd      	mov	sp, r7
 800636c:	bd90      	pop	{r4, r7, pc}
 800636e:	bf00      	nop

08006370 <ip4_addr_isbroadcast>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast(u32_t addr, const struct netif *netif)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  ip_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006384:	d002      	beq.n	800638c <ip4_addr_isbroadcast+0x1c>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d101      	bne.n	8006390 <ip4_addr_isbroadcast+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800638c:	2301      	movs	r3, #1
 800638e:	e025      	b.n	80063dc <ip4_addr_isbroadcast+0x6c>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <ip4_addr_isbroadcast+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800639e:	2300      	movs	r3, #0
 80063a0:	e01c      	b.n	80063dc <ip4_addr_isbroadcast+0x6c>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d101      	bne.n	80063b0 <ip4_addr_isbroadcast+0x40>
    return 0;
 80063ac:	2300      	movs	r3, #0
 80063ae:	e015      	b.n	80063dc <ip4_addr_isbroadcast+0x6c>
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	405a      	eors	r2, r3
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	4013      	ands	r3, r2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10b      	bne.n	80063da <ip4_addr_isbroadcast+0x6a>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	43da      	mvns	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	43db      	mvns	r3, r3
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
    return 0;
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d101      	bne.n	80063da <ip4_addr_isbroadcast+0x6a>
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
    /* => network broadcast address */
    return 1;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e000      	b.n	80063dc <ip4_addr_isbroadcast+0x6c>
  } else {
    return 0;
 80063da:	2300      	movs	r3, #0
  }
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <ipaddr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ipaddr_aton(const char *cp, ip_addr_t *addr)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b08a      	sub	sp, #40	; 0x28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 80063f2:	f107 030c 	add.w	r3, r7, #12
 80063f6:	61fb      	str	r3, [r7, #28]

  c = *cp;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c))
 8006400:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006404:	2b2f      	cmp	r3, #47	; 0x2f
 8006406:	d903      	bls.n	8006410 <ipaddr_aton+0x28>
 8006408:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800640c:	2b39      	cmp	r3, #57	; 0x39
 800640e:	d901      	bls.n	8006414 <ipaddr_aton+0x2c>
      return (0);
 8006410:	2300      	movs	r3, #0
 8006412:	e100      	b.n	8006616 <ipaddr_aton+0x22e>
    val = 0;
 8006414:	2300      	movs	r3, #0
 8006416:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8006418:	230a      	movs	r3, #10
 800641a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 800641e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006422:	2b30      	cmp	r3, #48	; 0x30
 8006424:	d11c      	bne.n	8006460 <ipaddr_aton+0x78>
      c = *++cp;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	3301      	adds	r3, #1
 800642a:	607b      	str	r3, [r7, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8006434:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006438:	2b78      	cmp	r3, #120	; 0x78
 800643a:	d003      	beq.n	8006444 <ipaddr_aton+0x5c>
 800643c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006440:	2b58      	cmp	r3, #88	; 0x58
 8006442:	d10a      	bne.n	800645a <ipaddr_aton+0x72>
        base = 16;
 8006444:	2310      	movs	r3, #16
 8006446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	3301      	adds	r3, #1
 800644e:	607b      	str	r3, [r7, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006458:	e002      	b.n	8006460 <ipaddr_aton+0x78>
      } else
        base = 8;
 800645a:	2308      	movs	r3, #8
 800645c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    for (;;) {
      if (isdigit(c)) {
 8006460:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006464:	2b2f      	cmp	r3, #47	; 0x2f
 8006466:	d915      	bls.n	8006494 <ipaddr_aton+0xac>
 8006468:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800646c:	2b39      	cmp	r3, #57	; 0x39
 800646e:	d811      	bhi.n	8006494 <ipaddr_aton+0xac>
        val = (val * base) + (int)(c - '0');
 8006470:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006476:	fb02 f203 	mul.w	r2, r2, r3
 800647a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800647e:	4413      	add	r3, r2
 8006480:	3b30      	subs	r3, #48	; 0x30
 8006482:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3301      	adds	r3, #1
 8006488:	607b      	str	r3, [r7, #4]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006492:	e036      	b.n	8006502 <ipaddr_aton+0x11a>
      } else if (base == 16 && isxdigit(c)) {
 8006494:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006498:	2b10      	cmp	r3, #16
 800649a:	d133      	bne.n	8006504 <ipaddr_aton+0x11c>
 800649c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80064a0:	2b2f      	cmp	r3, #47	; 0x2f
 80064a2:	d903      	bls.n	80064ac <ipaddr_aton+0xc4>
 80064a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80064a8:	2b39      	cmp	r3, #57	; 0x39
 80064aa:	d90f      	bls.n	80064cc <ipaddr_aton+0xe4>
 80064ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80064b0:	2b60      	cmp	r3, #96	; 0x60
 80064b2:	d903      	bls.n	80064bc <ipaddr_aton+0xd4>
 80064b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80064b8:	2b66      	cmp	r3, #102	; 0x66
 80064ba:	d907      	bls.n	80064cc <ipaddr_aton+0xe4>
 80064bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80064c0:	2b40      	cmp	r3, #64	; 0x40
 80064c2:	d91f      	bls.n	8006504 <ipaddr_aton+0x11c>
 80064c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80064c8:	2b46      	cmp	r3, #70	; 0x46
 80064ca:	d81b      	bhi.n	8006504 <ipaddr_aton+0x11c>
        val = (val << 4) | (int)(c + 10 - (islower(c) ? 'a' : 'A'));
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	011b      	lsls	r3, r3, #4
 80064d0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80064d4:	f102 010a 	add.w	r1, r2, #10
 80064d8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80064dc:	2a60      	cmp	r2, #96	; 0x60
 80064de:	d905      	bls.n	80064ec <ipaddr_aton+0x104>
 80064e0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80064e4:	2a7a      	cmp	r2, #122	; 0x7a
 80064e6:	d801      	bhi.n	80064ec <ipaddr_aton+0x104>
 80064e8:	2261      	movs	r2, #97	; 0x61
 80064ea:	e000      	b.n	80064ee <ipaddr_aton+0x106>
 80064ec:	2241      	movs	r2, #65	; 0x41
 80064ee:	1a8a      	subs	r2, r1, r2
 80064f0:	4313      	orrs	r3, r2
 80064f2:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	3301      	adds	r3, #1
 80064f8:	607b      	str	r3, [r7, #4]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      } else
        break;
    }
 8006502:	e7ad      	b.n	8006460 <ipaddr_aton+0x78>
    if (c == '.') {
 8006504:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006508:	2b2e      	cmp	r3, #46	; 0x2e
 800650a:	d114      	bne.n	8006536 <ipaddr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 800650c:	f107 030c 	add.w	r3, r7, #12
 8006510:	330c      	adds	r3, #12
 8006512:	69fa      	ldr	r2, [r7, #28]
 8006514:	429a      	cmp	r2, r3
 8006516:	d301      	bcc.n	800651c <ipaddr_aton+0x134>
        return (0);
 8006518:	2300      	movs	r3, #0
 800651a:	e07c      	b.n	8006616 <ipaddr_aton+0x22e>
      }
      *pp++ = val;
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	1d1a      	adds	r2, r3, #4
 8006520:	61fa      	str	r2, [r7, #28]
 8006522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006524:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	3301      	adds	r3, #1
 800652a:	607b      	str	r3, [r7, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006534:	e005      	b.n	8006542 <ipaddr_aton+0x15a>
    } else
      break;
 8006536:	bf00      	nop
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 8006538:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800653c:	2b00      	cmp	r3, #0
 800653e:	d01b      	beq.n	8006578 <ipaddr_aton+0x190>
 8006540:	e000      	b.n	8006544 <ipaddr_aton+0x15c>
      }
      *pp++ = val;
      c = *++cp;
    } else
      break;
  }
 8006542:	e75d      	b.n	8006400 <ipaddr_aton+0x18>
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 8006544:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006548:	2b20      	cmp	r3, #32
 800654a:	d015      	beq.n	8006578 <ipaddr_aton+0x190>
 800654c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006550:	2b0c      	cmp	r3, #12
 8006552:	d011      	beq.n	8006578 <ipaddr_aton+0x190>
 8006554:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006558:	2b0a      	cmp	r3, #10
 800655a:	d00d      	beq.n	8006578 <ipaddr_aton+0x190>
 800655c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006560:	2b0d      	cmp	r3, #13
 8006562:	d009      	beq.n	8006578 <ipaddr_aton+0x190>
 8006564:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006568:	2b09      	cmp	r3, #9
 800656a:	d005      	beq.n	8006578 <ipaddr_aton+0x190>
 800656c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006570:	2b0b      	cmp	r3, #11
 8006572:	d001      	beq.n	8006578 <ipaddr_aton+0x190>
    return (0);
 8006574:	2300      	movs	r3, #0
 8006576:	e04e      	b.n	8006616 <ipaddr_aton+0x22e>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8006578:	69fa      	ldr	r2, [r7, #28]
 800657a:	f107 030c 	add.w	r3, r7, #12
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	109b      	asrs	r3, r3, #2
 8006582:	3301      	adds	r3, #1
 8006584:	2b04      	cmp	r3, #4
 8006586:	d83b      	bhi.n	8006600 <ipaddr_aton+0x218>
 8006588:	a201      	add	r2, pc, #4	; (adr r2, 8006590 <ipaddr_aton+0x1a8>)
 800658a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658e:	bf00      	nop
 8006590:	080065a5 	.word	0x080065a5
 8006594:	08006601 	.word	0x08006601
 8006598:	080065a9 	.word	0x080065a9
 800659c:	080065c1 	.word	0x080065c1
 80065a0:	080065df 	.word	0x080065df

  case 0:
    return (0);       /* initial nondigit */
 80065a4:	2300      	movs	r3, #0
 80065a6:	e036      	b.n	8006616 <ipaddr_aton+0x22e>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065ae:	d301      	bcc.n	80065b4 <ipaddr_aton+0x1cc>
      return (0);
 80065b0:	2300      	movs	r3, #0
 80065b2:	e030      	b.n	8006616 <ipaddr_aton+0x22e>
    }
    val |= parts[0] << 24;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	061b      	lsls	r3, r3, #24
 80065b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ba:	4313      	orrs	r3, r2
 80065bc:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80065be:	e020      	b.n	8006602 <ipaddr_aton+0x21a>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065c6:	d301      	bcc.n	80065cc <ipaddr_aton+0x1e4>
      return (0);
 80065c8:	2300      	movs	r3, #0
 80065ca:	e024      	b.n	8006616 <ipaddr_aton+0x22e>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	061a      	lsls	r2, r3, #24
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	041b      	lsls	r3, r3, #16
 80065d4:	4313      	orrs	r3, r2
 80065d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d8:	4313      	orrs	r3, r2
 80065da:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80065dc:	e011      	b.n	8006602 <ipaddr_aton+0x21a>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	2bff      	cmp	r3, #255	; 0xff
 80065e2:	d901      	bls.n	80065e8 <ipaddr_aton+0x200>
      return (0);
 80065e4:	2300      	movs	r3, #0
 80065e6:	e016      	b.n	8006616 <ipaddr_aton+0x22e>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	061a      	lsls	r2, r3, #24
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	041b      	lsls	r3, r3, #16
 80065f0:	431a      	orrs	r2, r3
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	021b      	lsls	r3, r3, #8
 80065f6:	4313      	orrs	r3, r2
 80065f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065fa:	4313      	orrs	r3, r2
 80065fc:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80065fe:	e000      	b.n	8006602 <ipaddr_aton+0x21a>
  default:
    LWIP_ASSERT("unhandled", 0);
    break;
 8006600:	bf00      	nop
  }
  if (addr) {
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d005      	beq.n	8006614 <ipaddr_aton+0x22c>
    ip4_addr_set_u32(addr, htonl(val));
 8006608:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800660a:	f000 f82d 	bl	8006668 <lwip_htonl>
 800660e:	4602      	mov	r2, r0
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	601a      	str	r2, [r3, #0]
  }
  return (1);
 8006614:	2301      	movs	r3, #1
}
 8006616:	4618      	mov	r0, r3
 8006618:	3728      	adds	r7, #40	; 0x28
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop

08006620 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	4603      	mov	r3, r0
 8006628:	80fb      	strh	r3, [r7, #6]
  return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
 800662a:	88fb      	ldrh	r3, [r7, #6]
 800662c:	021b      	lsls	r3, r3, #8
 800662e:	b29a      	uxth	r2, r3
 8006630:	88fb      	ldrh	r3, [r7, #6]
 8006632:	0a1b      	lsrs	r3, r3, #8
 8006634:	b29b      	uxth	r3, r3
 8006636:	b29b      	uxth	r3, r3
 8006638:	4313      	orrs	r3, r2
 800663a:	b29b      	uxth	r3, r3
 800663c:	b29b      	uxth	r3, r3
}
 800663e:	4618      	mov	r0, r3
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop

0800664c <lwip_ntohs>:
 * @param n u16_t in network byte order
 * @return n in host byte order
 */
u16_t
lwip_ntohs(u16_t n)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	4603      	mov	r3, r0
 8006654:	80fb      	strh	r3, [r7, #6]
  return lwip_htons(n);
 8006656:	88fb      	ldrh	r3, [r7, #6]
 8006658:	4618      	mov	r0, r3
 800665a:	f7ff ffe1 	bl	8006620 <lwip_htons>
 800665e:	4603      	mov	r3, r0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  return ((n & 0xff) << 24) |
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	061a      	lsls	r2, r3, #24
    ((n & 0xff00) << 8) |
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800667a:	021b      	lsls	r3, r3, #8
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return ((n & 0xff) << 24) |
 800667c:	431a      	orrs	r2, r3
    ((n & 0xff00) << 8) |
    ((n & 0xff0000UL) >> 8) |
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006684:	0a1b      	lsrs	r3, r3, #8
 */
u32_t
lwip_htonl(u32_t n)
{
  return ((n & 0xff) << 24) |
    ((n & 0xff00) << 8) |
 8006686:	431a      	orrs	r2, r3
    ((n & 0xff0000UL) >> 8) |
    ((n & 0xff000000UL) >> 24);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	0e1b      	lsrs	r3, r3, #24
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return ((n & 0xff) << 24) |
 800668c:	4313      	orrs	r3, r2
    ((n & 0xff00) << 8) |
    ((n & 0xff0000UL) >> 8) |
    ((n & 0xff000000UL) >> 24);
}
 800668e:	4618      	mov	r0, r3
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop

0800669c <lwip_init>:
/**
 * Perform Sanity check of user-configurable values, and initialize all modules.
 */
void
lwip_init(void)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	af00      	add	r7, sp, #0
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80066a0:	f000 f86a 	bl	8006778 <mem_init>
  memp_init();
 80066a4:	f000 fa30 	bl	8006b08 <memp_init>
  pbuf_init();
  netif_init();
 80066a8:	f000 faba 	bl	8006c20 <netif_init>
#endif /* LWIP_ARP */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80066ac:	f001 f86c 	bl	8007788 <udp_init>
#endif /* LWIP_SNMP */
#if LWIP_AUTOIP
  autoip_init();
#endif /* LWIP_AUTOIP */
#if LWIP_IGMP
  igmp_init();
 80066b0:	f7ff f8e0 	bl	8005874 <igmp_init>
#if LWIP_DNS
  dns_init();
#endif /* LWIP_DNS */

#if LWIP_TIMERS
  sys_timeouts_init();
 80066b4:	f000 ff9a 	bl	80075ec <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop

080066bc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

  nmem = (struct mem *)(void *)&ram[mem->next];
 80066c4:	4b29      	ldr	r3, [pc, #164]	; (800676c <plug_holes+0xb0>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	8812      	ldrh	r2, [r2, #0]
 80066cc:	4413      	add	r3, r2
 80066ce:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d01f      	beq.n	8006718 <plug_holes+0x5c>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	791b      	ldrb	r3, [r3, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d11b      	bne.n	8006718 <plug_holes+0x5c>
 80066e0:	4b23      	ldr	r3, [pc, #140]	; (8006770 <plug_holes+0xb4>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d016      	beq.n	8006718 <plug_holes+0x5c>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80066ea:	4b22      	ldr	r3, [pc, #136]	; (8006774 <plug_holes+0xb8>)
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d102      	bne.n	80066fa <plug_holes+0x3e>
      lfree = mem;
 80066f4:	4a1f      	ldr	r2, [pc, #124]	; (8006774 <plug_holes+0xb8>)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	881a      	ldrh	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8006702:	4b1a      	ldr	r3, [pc, #104]	; (800676c <plug_holes+0xb0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	8812      	ldrh	r2, [r2, #0]
 800670a:	4413      	add	r3, r2
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	4917      	ldr	r1, [pc, #92]	; (800676c <plug_holes+0xb0>)
 8006710:	6809      	ldr	r1, [r1, #0]
 8006712:	1a52      	subs	r2, r2, r1
 8006714:	b292      	uxth	r2, r2
 8006716:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8006718:	4b14      	ldr	r3, [pc, #80]	; (800676c <plug_holes+0xb0>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	8852      	ldrh	r2, [r2, #2]
 8006720:	4413      	add	r3, r2
 8006722:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	429a      	cmp	r2, r3
 800672a:	d01a      	beq.n	8006762 <plug_holes+0xa6>
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	791b      	ldrb	r3, [r3, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d116      	bne.n	8006762 <plug_holes+0xa6>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006734:	4b0f      	ldr	r3, [pc, #60]	; (8006774 <plug_holes+0xb8>)
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	429a      	cmp	r2, r3
 800673c:	d102      	bne.n	8006744 <plug_holes+0x88>
      lfree = pmem;
 800673e:	4a0d      	ldr	r2, [pc, #52]	; (8006774 <plug_holes+0xb8>)
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	881a      	ldrh	r2, [r3, #0]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800674c:	4b07      	ldr	r3, [pc, #28]	; (800676c <plug_holes+0xb0>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	8812      	ldrh	r2, [r2, #0]
 8006754:	4413      	add	r3, r2
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	4904      	ldr	r1, [pc, #16]	; (800676c <plug_holes+0xb0>)
 800675a:	6809      	ldr	r1, [r1, #0]
 800675c:	1a52      	subs	r2, r2, r1
 800675e:	b292      	uxth	r2, r2
 8006760:	805a      	strh	r2, [r3, #2]
  }
}
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	1ffe8c28 	.word	0x1ffe8c28
 8006770:	1ffe8c2c 	.word	0x1ffe8c2c
 8006774:	1ffe8c30 	.word	0x1ffe8c30

08006778 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800677e:	4b18      	ldr	r3, [pc, #96]	; (80067e0 <mem_init+0x68>)
 8006780:	3303      	adds	r3, #3
 8006782:	f023 0303 	bic.w	r3, r3, #3
 8006786:	461a      	mov	r2, r3
 8006788:	4b16      	ldr	r3, [pc, #88]	; (80067e4 <mem_init+0x6c>)
 800678a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800678c:	4b15      	ldr	r3, [pc, #84]	; (80067e4 <mem_init+0x6c>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006798:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80067a6:	4b0f      	ldr	r3, [pc, #60]	; (80067e4 <mem_init+0x6c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80067ae:	4a0e      	ldr	r2, [pc, #56]	; (80067e8 <mem_init+0x70>)
 80067b0:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80067b2:	4b0d      	ldr	r3, [pc, #52]	; (80067e8 <mem_init+0x70>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2201      	movs	r2, #1
 80067b8:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80067ba:	4b0b      	ldr	r3, [pc, #44]	; (80067e8 <mem_init+0x70>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80067c2:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80067c4:	4b08      	ldr	r3, [pc, #32]	; (80067e8 <mem_init+0x70>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80067cc:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80067ce:	4b05      	ldr	r3, [pc, #20]	; (80067e4 <mem_init+0x6c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a06      	ldr	r2, [pc, #24]	; (80067ec <mem_init+0x74>)
 80067d4:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if(sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr
 80067e0:	1ffef130 	.word	0x1ffef130
 80067e4:	1ffe8c28 	.word	0x1ffe8c28
 80067e8:	1ffe8c2c 	.word	0x1ffe8c2c
 80067ec:	1ffe8c30 	.word	0x1ffe8c30

080067f0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d100      	bne.n	8006800 <mem_free+0x10>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
 80067fe:	e01b      	b.n	8006838 <mem_free+0x48>
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006800:	4b0f      	ldr	r3, [pc, #60]	; (8006840 <mem_free+0x50>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	429a      	cmp	r2, r3
 8006808:	d304      	bcc.n	8006814 <mem_free+0x24>
 800680a:	4b0e      	ldr	r3, [pc, #56]	; (8006844 <mem_free+0x54>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	429a      	cmp	r2, r3
 8006812:	d300      	bcc.n	8006816 <mem_free+0x26>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return;
 8006814:	e010      	b.n	8006838 <mem_free+0x48>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3b08      	subs	r3, #8
 800681a:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006822:	4b09      	ldr	r3, [pc, #36]	; (8006848 <mem_free+0x58>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	429a      	cmp	r2, r3
 800682a:	d202      	bcs.n	8006832 <mem_free+0x42>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800682c:	4a06      	ldr	r2, [pc, #24]	; (8006848 <mem_free+0x58>)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f7ff ff42 	bl	80066bc <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	1ffe8c28 	.word	0x1ffe8c28
 8006844:	1ffe8c2c 	.word	0x1ffe8c2c
 8006848:	1ffe8c30 	.word	0x1ffe8c30

0800684c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800684c:	b480      	push	{r7}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	460b      	mov	r3, r1
 8006856:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8006858:	887b      	ldrh	r3, [r7, #2]
 800685a:	3303      	adds	r3, #3
 800685c:	b29b      	uxth	r3, r3
 800685e:	f023 0303 	bic.w	r3, r3, #3
 8006862:	807b      	strh	r3, [r7, #2]

  if(newsize < MIN_SIZE_ALIGNED) {
 8006864:	887b      	ldrh	r3, [r7, #2]
 8006866:	2b0b      	cmp	r3, #11
 8006868:	d801      	bhi.n	800686e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800686a:	230c      	movs	r3, #12
 800686c:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800686e:	887b      	ldrh	r3, [r7, #2]
 8006870:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006874:	d901      	bls.n	800687a <mem_trim+0x2e>
    return NULL;
 8006876:	2300      	movs	r3, #0
 8006878:	e096      	b.n	80069a8 <mem_trim+0x15c>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800687a:	4b4e      	ldr	r3, [pc, #312]	; (80069b4 <mem_trim+0x168>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	429a      	cmp	r2, r3
 8006882:	d304      	bcc.n	800688e <mem_trim+0x42>
 8006884:	4b4c      	ldr	r3, [pc, #304]	; (80069b8 <mem_trim+0x16c>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	429a      	cmp	r2, r3
 800688c:	d301      	bcc.n	8006892 <mem_trim+0x46>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	e08a      	b.n	80069a8 <mem_trim+0x15c>
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	3b08      	subs	r3, #8
 8006896:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	4a46      	ldr	r2, [pc, #280]	; (80069b4 <mem_trim+0x168>)
 800689c:	6812      	ldr	r2, [r2, #0]
 800689e:	1a9b      	subs	r3, r3, r2
 80068a0:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	881a      	ldrh	r2, [r3, #0]
 80068a6:	8a7b      	ldrh	r3, [r7, #18]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	3b08      	subs	r3, #8
 80068ae:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
 80068b0:	887a      	ldrh	r2, [r7, #2]
 80068b2:	8a3b      	ldrh	r3, [r7, #16]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d901      	bls.n	80068bc <mem_trim+0x70>
    /* not supported */
    return NULL;
 80068b8:	2300      	movs	r3, #0
 80068ba:	e075      	b.n	80069a8 <mem_trim+0x15c>
  }
  if (newsize == size) {
 80068bc:	887a      	ldrh	r2, [r7, #2]
 80068be:	8a3b      	ldrh	r3, [r7, #16]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d101      	bne.n	80068c8 <mem_trim+0x7c>
    /* No change in size, simply return */
    return rmem;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	e06f      	b.n	80069a8 <mem_trim+0x15c>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 80068c8:	4b3a      	ldr	r3, [pc, #232]	; (80069b4 <mem_trim+0x168>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	8812      	ldrh	r2, [r2, #0]
 80068d0:	4413      	add	r3, r2
 80068d2:	60fb      	str	r3, [r7, #12]
  if(mem2->used == 0) {
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	791b      	ldrb	r3, [r3, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d132      	bne.n	8006942 <mem_trim+0xf6>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	817b      	strh	r3, [r7, #10]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80068e2:	8a7a      	ldrh	r2, [r7, #18]
 80068e4:	887b      	ldrh	r3, [r7, #2]
 80068e6:	4413      	add	r3, r2
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	3308      	adds	r3, #8
 80068ec:	813b      	strh	r3, [r7, #8]
    if (lfree == mem2) {
 80068ee:	4b33      	ldr	r3, [pc, #204]	; (80069bc <mem_trim+0x170>)
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d105      	bne.n	8006904 <mem_trim+0xb8>
      lfree = (struct mem *)(void *)&ram[ptr2];
 80068f8:	4b2e      	ldr	r3, [pc, #184]	; (80069b4 <mem_trim+0x168>)
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	893b      	ldrh	r3, [r7, #8]
 80068fe:	4413      	add	r3, r2
 8006900:	4a2e      	ldr	r2, [pc, #184]	; (80069bc <mem_trim+0x170>)
 8006902:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8006904:	4b2b      	ldr	r3, [pc, #172]	; (80069b4 <mem_trim+0x168>)
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	893b      	ldrh	r3, [r7, #8]
 800690a:	4413      	add	r3, r2
 800690c:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	897a      	ldrh	r2, [r7, #10]
 8006918:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8a7a      	ldrh	r2, [r7, #18]
 800691e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	893a      	ldrh	r2, [r7, #8]
 8006924:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	881b      	ldrh	r3, [r3, #0]
 800692a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800692e:	d007      	beq.n	8006940 <mem_trim+0xf4>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006930:	4b20      	ldr	r3, [pc, #128]	; (80069b4 <mem_trim+0x168>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	8812      	ldrh	r2, [r2, #0]
 8006938:	4413      	add	r3, r2
 800693a:	893a      	ldrh	r2, [r7, #8]
 800693c:	805a      	strh	r2, [r3, #2]
 800693e:	e032      	b.n	80069a6 <mem_trim+0x15a>
 8006940:	e031      	b.n	80069a6 <mem_trim+0x15a>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006942:	887b      	ldrh	r3, [r7, #2]
 8006944:	f103 0214 	add.w	r2, r3, #20
 8006948:	8a3b      	ldrh	r3, [r7, #16]
 800694a:	429a      	cmp	r2, r3
 800694c:	d82b      	bhi.n	80069a6 <mem_trim+0x15a>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800694e:	8a7a      	ldrh	r2, [r7, #18]
 8006950:	887b      	ldrh	r3, [r7, #2]
 8006952:	4413      	add	r3, r2
 8006954:	b29b      	uxth	r3, r3
 8006956:	3308      	adds	r3, #8
 8006958:	813b      	strh	r3, [r7, #8]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800695a:	4b16      	ldr	r3, [pc, #88]	; (80069b4 <mem_trim+0x168>)
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	893b      	ldrh	r3, [r7, #8]
 8006960:	4413      	add	r3, r2
 8006962:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8006964:	4b15      	ldr	r3, [pc, #84]	; (80069bc <mem_trim+0x170>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	429a      	cmp	r2, r3
 800696c:	d202      	bcs.n	8006974 <mem_trim+0x128>
      lfree = mem2;
 800696e:	4a13      	ldr	r2, [pc, #76]	; (80069bc <mem_trim+0x170>)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	881a      	ldrh	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8a7a      	ldrh	r2, [r7, #18]
 8006986:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	893a      	ldrh	r2, [r7, #8]
 800698c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006996:	d006      	beq.n	80069a6 <mem_trim+0x15a>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006998:	4b06      	ldr	r3, [pc, #24]	; (80069b4 <mem_trim+0x168>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	8812      	ldrh	r2, [r2, #0]
 80069a0:	4413      	add	r3, r2
 80069a2:	893a      	ldrh	r2, [r7, #8]
 80069a4:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80069a6:	687b      	ldr	r3, [r7, #4]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	371c      	adds	r7, #28
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	1ffe8c28 	.word	0x1ffe8c28
 80069b8:	1ffe8c2c 	.word	0x1ffe8c2c
 80069bc:	1ffe8c30 	.word	0x1ffe8c30

080069c0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b089      	sub	sp, #36	; 0x24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	4603      	mov	r3, r0
 80069c8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80069ca:	88fb      	ldrh	r3, [r7, #6]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d101      	bne.n	80069d4 <mem_malloc+0x14>
    return NULL;
 80069d0:	2300      	movs	r3, #0
 80069d2:	e08c      	b.n	8006aee <mem_malloc+0x12e>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80069d4:	88fb      	ldrh	r3, [r7, #6]
 80069d6:	3303      	adds	r3, #3
 80069d8:	b29b      	uxth	r3, r3
 80069da:	f023 0303 	bic.w	r3, r3, #3
 80069de:	80fb      	strh	r3, [r7, #6]

  if(size < MIN_SIZE_ALIGNED) {
 80069e0:	88fb      	ldrh	r3, [r7, #6]
 80069e2:	2b0b      	cmp	r3, #11
 80069e4:	d801      	bhi.n	80069ea <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80069e6:	230c      	movs	r3, #12
 80069e8:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 80069ea:	88fb      	ldrh	r3, [r7, #6]
 80069ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80069f0:	d901      	bls.n	80069f6 <mem_malloc+0x36>
    return NULL;
 80069f2:	2300      	movs	r3, #0
 80069f4:	e07b      	b.n	8006aee <mem_malloc+0x12e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80069f6:	4b41      	ldr	r3, [pc, #260]	; (8006afc <mem_malloc+0x13c>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	4b40      	ldr	r3, [pc, #256]	; (8006b00 <mem_malloc+0x140>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	83fb      	strh	r3, [r7, #30]
 8006a04:	e06c      	b.n	8006ae0 <mem_malloc+0x120>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8006a06:	4b3e      	ldr	r3, [pc, #248]	; (8006b00 <mem_malloc+0x140>)
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	8bfb      	ldrh	r3, [r7, #30]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	791b      	ldrb	r3, [r3, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d15d      	bne.n	8006ad4 <mem_malloc+0x114>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	8bfb      	ldrh	r3, [r7, #30]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	f1a3 0208 	sub.w	r2, r3, #8
 8006a26:	88fb      	ldrh	r3, [r7, #6]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d353      	bcc.n	8006ad4 <mem_malloc+0x114>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	461a      	mov	r2, r3
 8006a32:	8bfb      	ldrh	r3, [r7, #30]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	f1a3 0208 	sub.w	r2, r3, #8
 8006a3a:	88fb      	ldrh	r3, [r7, #6]
 8006a3c:	3314      	adds	r3, #20
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d327      	bcc.n	8006a92 <mem_malloc+0xd2>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8006a42:	8bfa      	ldrh	r2, [r7, #30]
 8006a44:	88fb      	ldrh	r3, [r7, #6]
 8006a46:	4413      	add	r3, r2
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	3308      	adds	r3, #8
 8006a4c:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8006a4e:	4b2c      	ldr	r3, [pc, #176]	; (8006b00 <mem_malloc+0x140>)
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	8a7b      	ldrh	r3, [r7, #18]
 8006a54:	4413      	add	r3, r2
 8006a56:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	881a      	ldrh	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	8bfa      	ldrh	r2, [r7, #30]
 8006a6a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	8a7a      	ldrh	r2, [r7, #18]
 8006a70:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	2201      	movs	r2, #1
 8006a76:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006a80:	d00a      	beq.n	8006a98 <mem_malloc+0xd8>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006a82:	4b1f      	ldr	r3, [pc, #124]	; (8006b00 <mem_malloc+0x140>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	8812      	ldrh	r2, [r2, #0]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	8a7a      	ldrh	r2, [r7, #18]
 8006a8e:	805a      	strh	r2, [r3, #2]
 8006a90:	e002      	b.n	8006a98 <mem_malloc+0xd8>
           * take care of this).
           * -> near fit or excact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	2201      	movs	r2, #1
 8006a96:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006a98:	4b18      	ldr	r3, [pc, #96]	; (8006afc <mem_malloc+0x13c>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d115      	bne.n	8006ace <mem_malloc+0x10e>
          struct mem *cur = lfree;
 8006aa2:	4b16      	ldr	r3, [pc, #88]	; (8006afc <mem_malloc+0x13c>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006aa8:	e005      	b.n	8006ab6 <mem_malloc+0xf6>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8006aaa:	4b15      	ldr	r3, [pc, #84]	; (8006b00 <mem_malloc+0x140>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	69ba      	ldr	r2, [r7, #24]
 8006ab0:	8812      	ldrh	r2, [r2, #0]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	61bb      	str	r3, [r7, #24]
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	791b      	ldrb	r3, [r3, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d004      	beq.n	8006ac8 <mem_malloc+0x108>
 8006abe:	4b11      	ldr	r3, [pc, #68]	; (8006b04 <mem_malloc+0x144>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d1f0      	bne.n	8006aaa <mem_malloc+0xea>
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
          }
          lfree = cur;
 8006ac8:	4a0c      	ldr	r2, [pc, #48]	; (8006afc <mem_malloc+0x13c>)
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	6013      	str	r3, [r2, #0]
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	3308      	adds	r3, #8
 8006ad2:	e00c      	b.n	8006aee <mem_malloc+0x12e>

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8006ad4:	4b0a      	ldr	r3, [pc, #40]	; (8006b00 <mem_malloc+0x140>)
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	8bfb      	ldrh	r3, [r7, #30]
 8006ada:	4413      	add	r3, r2
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	83fb      	strh	r3, [r7, #30]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8006ae0:	8bfa      	ldrh	r2, [r7, #30]
 8006ae2:	88fb      	ldrh	r3, [r7, #6]
 8006ae4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	db8c      	blt.n	8006a06 <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3724      	adds	r7, #36	; 0x24
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	1ffe8c30 	.word	0x1ffe8c30
 8006b00:	1ffe8c28 	.word	0x1ffe8c28
 8006b04:	1ffe8c2c 	.word	0x1ffe8c2c

08006b08 <memp_init>:
 * 
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
  struct memp *memp;
  u16_t i, j;

  for (i = 0; i < MEMP_MAX; ++i) {
 8006b0e:	2300      	movs	r3, #0
 8006b10:	807b      	strh	r3, [r7, #2]
 8006b12:	e002      	b.n	8006b1a <memp_init+0x12>
 8006b14:	887b      	ldrh	r3, [r7, #2]
 8006b16:	3301      	adds	r3, #1
 8006b18:	807b      	strh	r3, [r7, #2]
 8006b1a:	887b      	ldrh	r3, [r7, #2]
 8006b1c:	2b05      	cmp	r3, #5
 8006b1e:	d9f9      	bls.n	8006b14 <memp_init+0xc>
    MEMP_STATS_AVAIL(err, i, 0);
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
  }

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
 8006b20:	4b1b      	ldr	r3, [pc, #108]	; (8006b90 <memp_init+0x88>)
 8006b22:	3303      	adds	r3, #3
 8006b24:	f023 0303 	bic.w	r3, r3, #3
 8006b28:	607b      	str	r3, [r7, #4]
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	807b      	strh	r3, [r7, #2]
 8006b2e:	e027      	b.n	8006b80 <memp_init+0x78>
    memp_tab[i] = NULL;
 8006b30:	887b      	ldrh	r3, [r7, #2]
 8006b32:	4a18      	ldr	r2, [pc, #96]	; (8006b94 <memp_init+0x8c>)
 8006b34:	2100      	movs	r1, #0
 8006b36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	803b      	strh	r3, [r7, #0]
 8006b3e:	e015      	b.n	8006b6c <memp_init+0x64>
      memp->next = memp_tab[i];
 8006b40:	887b      	ldrh	r3, [r7, #2]
 8006b42:	4a14      	ldr	r2, [pc, #80]	; (8006b94 <memp_init+0x8c>)
 8006b44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	601a      	str	r2, [r3, #0]
      memp_tab[i] = memp;
 8006b4c:	887b      	ldrh	r3, [r7, #2]
 8006b4e:	4911      	ldr	r1, [pc, #68]	; (8006b94 <memp_init+0x8c>)
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
 8006b56:	887b      	ldrh	r3, [r7, #2]
 8006b58:	4a0f      	ldr	r2, [pc, #60]	; (8006b98 <memp_init+0x90>)
 8006b5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4413      	add	r3, r2
 8006b64:	607b      	str	r3, [r7, #4]
    memp_tab[i] = NULL;
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
 8006b66:	883b      	ldrh	r3, [r7, #0]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	803b      	strh	r3, [r7, #0]
 8006b6c:	887b      	ldrh	r3, [r7, #2]
 8006b6e:	4a0b      	ldr	r2, [pc, #44]	; (8006b9c <memp_init+0x94>)
 8006b70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b74:	883a      	ldrh	r2, [r7, #0]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d3e2      	bcc.n	8006b40 <memp_init+0x38>

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
 8006b7a:	887b      	ldrh	r3, [r7, #2]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	807b      	strh	r3, [r7, #2]
 8006b80:	887b      	ldrh	r3, [r7, #2]
 8006b82:	2b05      	cmp	r3, #5
 8006b84:	d9d4      	bls.n	8006b30 <memp_init+0x28>
#if MEMP_OVERFLOW_CHECK
  memp_overflow_init();
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK */
}
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr
 8006b90:	1ffe8c4c 	.word	0x1ffe8c4c
 8006b94:	1ffe8c34 	.word	0x1ffe8c34
 8006b98:	08008ee4 	.word	0x08008ee4
 8006b9c:	08008ef0 	.word	0x08008ef0

08006ba0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	71fb      	strb	r3, [r7, #7]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);
 
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006baa:	79fb      	ldrb	r3, [r7, #7]
 8006bac:	2b05      	cmp	r3, #5
 8006bae:	d902      	bls.n	8006bb6 <memp_malloc+0x16>
 8006bb0:	be00      	bkpt	0x0000
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	e00e      	b.n	8006bd4 <memp_malloc+0x34>
  SYS_ARCH_PROTECT(old_level);
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

  memp = memp_tab[type];
 8006bb6:	79fb      	ldrb	r3, [r7, #7]
 8006bb8:	4a09      	ldr	r2, [pc, #36]	; (8006be0 <memp_malloc+0x40>)
 8006bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bbe:	60fb      	str	r3, [r7, #12]
  
  if (memp != NULL) {
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d005      	beq.n	8006bd2 <memp_malloc+0x32>
    memp_tab[type] = memp->next;
 8006bc6:	79fb      	ldrb	r3, [r7, #7]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	6812      	ldr	r2, [r2, #0]
 8006bcc:	4904      	ldr	r1, [pc, #16]	; (8006be0 <memp_malloc+0x40>)
 8006bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    MEMP_STATS_INC(err, type);
  }

  SYS_ARCH_UNPROTECT(old_level);

  return memp;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	1ffe8c34 	.word	0x1ffe8c34

08006be4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	4603      	mov	r3, r0
 8006bec:	6039      	str	r1, [r7, #0]
 8006bee:	71fb      	strb	r3, [r7, #7]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d100      	bne.n	8006bf8 <memp_free+0x14>
    return;
 8006bf6:	e00c      	b.n	8006c12 <memp_free+0x2e>
  }
  LWIP_ASSERT("memp_free: mem properly aligned",
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
#endif /* MEMP_OVERFLOW_CHECK */

  MEMP_STATS_DEC(used, type); 
  
  memp->next = memp_tab[type]; 
 8006bfc:	79fb      	ldrb	r3, [r7, #7]
 8006bfe:	4a07      	ldr	r2, [pc, #28]	; (8006c1c <memp_free+0x38>)
 8006c00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	601a      	str	r2, [r3, #0]
  memp_tab[type] = memp;
 8006c08:	79fb      	ldrb	r3, [r7, #7]
 8006c0a:	4904      	ldr	r1, [pc, #16]	; (8006c1c <memp_free+0x38>)
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity());
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
}
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	1ffe8c34 	.word	0x1ffe8c34

08006c20 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006c20:	b480      	push	{r7}
 8006c22:	af00      	add	r7, sp, #0
  netif_add(&loop_netif, &loop_ipaddr, &loop_netmask, &loop_gw, NULL, netif_loopif_init, tcpip_input);
#endif /* NO_SYS */
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <netif_add>:
 * @return netif, or NULL if failed.
 */
struct netif *
netif_add(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
  ip_addr_t *gw, void *state, netif_init_fn init, netif_input_fn input)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
 8006c38:	603b      	str	r3, [r7, #0]

  LWIP_ASSERT("No init function given", init != NULL);

  /* reset new interface configuration state */
  ip_addr_set_zero(&netif->ip_addr);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero(&netif->netmask);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero(&netif->gw);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	60da      	str	r2, [r3, #12]
  netif->flags = 0;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_AUTOIP */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	635a      	str	r2, [r3, #52]	; 0x34
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 8006c66:	4b18      	ldr	r3, [pc, #96]	; (8006cc8 <netif_add+0x9c>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	b2d1      	uxtb	r1, r2
 8006c6e:	4a16      	ldr	r2, [pc, #88]	; (8006cc8 <netif_add+0x9c>)
 8006c70:	7011      	strb	r1, [r2, #0]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
  netif->input = input;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6a3a      	ldr	r2, [r7, #32]
 8006c7c:	611a      	str	r2, [r3, #16]
  NETIF_SET_HWADDRHINT(netif, NULL);
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

  netif_set_addr(netif, ipaddr, netmask, gw);
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	68b9      	ldr	r1, [r7, #8]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	f000 f823 	bl	8006cd0 <netif_set_addr>

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	4798      	blx	r3
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <netif_add+0x6e>
    return NULL;
 8006c96:	2300      	movs	r3, #0
 8006c98:	e011      	b.n	8006cbe <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006c9a:	4b0c      	ldr	r3, [pc, #48]	; (8006ccc <netif_add+0xa0>)
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006ca2:	4a0a      	ldr	r2, [pc, #40]	; (8006ccc <netif_add+0xa0>)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6013      	str	r3, [r2, #0]
  snmp_inc_iflist();

#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	b25b      	sxtb	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	da02      	bge.n	8006cbc <netif_add+0x90>
    igmp_start(netif);
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f7fe fdf0 	bl	800589c <igmp_start>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
  ip_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip_addr_debug_print(NETIF_DEBUG, gw);
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	1ffef060 	.word	0x1ffef060
 8006ccc:	1ffef784 	.word	0x1ffef784

08006cd0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
    ip_addr_t *gw)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
 8006cdc:	603b      	str	r3, [r7, #0]
  netif_set_ipaddr(netif, ipaddr);
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	68b9      	ldr	r1, [r7, #8]
 8006ce2:	f000 f80b 	bl	8006cfc <netif_set_ipaddr>
  netif_set_netmask(netif, netmask);
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	6879      	ldr	r1, [r7, #4]
 8006cea:	f000 f82f 	bl	8006d4c <netif_set_netmask>
  netif_set_gw(netif, gw);
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	6839      	ldr	r1, [r7, #0]
 8006cf2:	f000 f817 	bl	8006d24 <netif_set_gw>
}
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  }
#endif
  snmp_delete_ipaddridx_tree(netif);
  snmp_delete_iprteidx_tree(0,netif);
  /* set new IP address to netif */
  ip_addr_set(&(netif->ip_addr), ipaddr);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d002      	beq.n	8006d12 <netif_set_ipaddr+0x16>
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	e000      	b.n	8006d14 <netif_set_ipaddr+0x18>
 8006d12:	2300      	movs	r3, #0
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	6053      	str	r3, [r2, #4]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->ip_addr),
    ip4_addr2_16(&netif->ip_addr),
    ip4_addr3_16(&netif->ip_addr),
    ip4_addr4_16(&netif->ip_addr)));
}
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop

08006d24 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, ip_addr_t *gw)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  ip_addr_set(&(netif->gw), gw);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d002      	beq.n	8006d3a <netif_set_gw+0x16>
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	e000      	b.n	8006d3c <netif_set_gw+0x18>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->gw),
    ip4_addr2_16(&netif->gw),
    ip4_addr3_16(&netif->gw),
    ip4_addr4_16(&netif->gw)));
}
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop

08006d4c <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  snmp_delete_iprteidx_tree(0, netif);
  /* set new netmask to netif */
  ip_addr_set(&(netif->netmask), netmask);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <netif_set_netmask+0x16>
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	e000      	b.n	8006d64 <netif_set_netmask+0x18>
 8006d62:	2300      	movs	r3, #0
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->netmask),
    ip4_addr2_16(&netif->netmask),
    ip4_addr3_16(&netif->netmask),
    ip4_addr4_16(&netif->netmask)));
}
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop

08006d74 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
    snmp_delete_iprteidx_tree(1, netif);
  } else {
    /* install default route */
    snmp_insert_iprteidx_tree(1, netif);
  }
  netif_default = netif;
 8006d7c:	4a03      	ldr	r2, [pc, #12]	; (8006d8c <netif_set_default+0x18>)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr
 8006d8c:	1ffef788 	.word	0x1ffef788

08006d90 <netif_set_up>:
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_up(struct netif *netif)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d126      	bne.n	8006df4 <netif_set_up+0x64>
    netif->flags |= NETIF_FLAG_UP;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006dac:	f043 0301 	orr.w	r3, r3, #1
 8006db0:	b2da      	uxtb	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    snmp_get_sysuptime(&netif->ts);
#endif /* LWIP_SNMP */

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006dbe:	f003 0310 	and.w	r3, r3, #16
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d016      	beq.n	8006df4 <netif_set_up+0x64>
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006dcc:	f003 0320 	and.w	r3, r3, #32
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d005      	beq.n	8006de0 <netif_set_up+0x50>
        etharp_gratuitous(netif);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	3304      	adds	r3, #4
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	4619      	mov	r1, r3
 8006ddc:	f7fe fb5e 	bl	800549c <etharp_request>
      }
#endif /* LWIP_ARP */

#if LWIP_IGMP
      /* resend IGMP memberships */
      if (netif->flags & NETIF_FLAG_IGMP) {
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	b25b      	sxtb	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	da02      	bge.n	8006df4 <netif_set_up+0x64>
        igmp_report_groups( netif);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7fe fd7e 	bl	80058f0 <igmp_report_groups>
      }
#endif /* LWIP_IGMP */
    }
  }
}
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop

08006dfc <netif_set_down>:
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_down(struct netif *netif)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d012      	beq.n	8006e38 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006e18:	f023 0301 	bic.w	r3, r3, #1
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#if LWIP_SNMP
    snmp_get_sysuptime(&netif->ts);
#endif

#if LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006e2a:	f003 0320 	and.w	r3, r3, #32
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7fd ffb4 	bl	8004da0 <etharp_cleanup_netif>
    }
#endif /* LWIP_ARP */
    NETIF_STATUS_CALLBACK(netif);
  }
}
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop

08006e40 <netif_set_link_up>:

/**
 * Called by a driver when its link goes up
 */
void netif_set_link_up(struct netif *netif )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006e4e:	f003 0310 	and.w	r3, r3, #16
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d12e      	bne.n	8006eb4 <netif_set_link_up+0x74>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006e5c:	f043 0310 	orr.w	r3, r3, #16
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    if (netif->autoip) {
      autoip_network_changed(netif);
    }
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d016      	beq.n	8006ea4 <netif_set_link_up+0x64>
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & NETIF_FLAG_ETHARP) {
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006e7c:	f003 0320 	and.w	r3, r3, #32
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d005      	beq.n	8006e90 <netif_set_link_up+0x50>
        etharp_gratuitous(netif);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	3304      	adds	r3, #4
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	f7fe fb06 	bl	800549c <etharp_request>
      }
#endif /* LWIP_ARP */

#if LWIP_IGMP
      /* resend IGMP memberships */
      if (netif->flags & NETIF_FLAG_IGMP) {
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	b25b      	sxtb	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	da02      	bge.n	8006ea4 <netif_set_link_up+0x64>
        igmp_report_groups( netif);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7fe fd26 	bl	80058f0 <igmp_report_groups>
      }
#endif /* LWIP_IGMP */
    }
    NETIF_LINK_CALLBACK(netif);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	69db      	ldr	r3, [r3, #28]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <netif_set_link_up+0x74>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	69db      	ldr	r3, [r3, #28]
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	4798      	blx	r3
  }
}
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop

08006ebc <netif_set_link_down>:

/**
 * Called by a driver when its link goes down
 */
void netif_set_link_down(struct netif *netif )
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006eca:	f003 0310 	and.w	r3, r3, #16
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d010      	beq.n	8006ef4 <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006ed8:	f023 0310 	bic.w	r3, r3, #16
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <netif_set_link_down+0x38>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	69db      	ldr	r3, [r3, #28]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	4798      	blx	r3
  }
}
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop

08006efc <netif_set_link_callback>:
#if LWIP_NETIF_LINK_CALLBACK
/**
 * Set callback to be called when link is brought up/down
 */
void netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  if (netif) {
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d002      	beq.n	8006f12 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	61da      	str	r2, [r3, #28]
  }
}
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b088      	sub	sp, #32
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	4603      	mov	r3, r0
 8006f24:	71fb      	strb	r3, [r7, #7]
 8006f26:	460b      	mov	r3, r1
 8006f28:	80bb      	strh	r3, [r7, #4]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8006f2e:	79fb      	ldrb	r3, [r7, #7]
 8006f30:	2b03      	cmp	r3, #3
 8006f32:	d817      	bhi.n	8006f64 <pbuf_alloc+0x48>
 8006f34:	a201      	add	r2, pc, #4	; (adr r2, 8006f3c <pbuf_alloc+0x20>)
 8006f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3a:	bf00      	nop
 8006f3c:	08006f4d 	.word	0x08006f4d
 8006f40:	08006f53 	.word	0x08006f53
 8006f44:	08006f59 	.word	0x08006f59
 8006f48:	08006f5f 	.word	0x08006f5f
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8006f4c:	2338      	movs	r3, #56	; 0x38
 8006f4e:	82fb      	strh	r3, [r7, #22]
    break;
 8006f50:	e00a      	b.n	8006f68 <pbuf_alloc+0x4c>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8006f52:	2324      	movs	r3, #36	; 0x24
 8006f54:	82fb      	strh	r3, [r7, #22]
    break;
 8006f56:	e007      	b.n	8006f68 <pbuf_alloc+0x4c>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_HLEN;
 8006f58:	2310      	movs	r3, #16
 8006f5a:	82fb      	strh	r3, [r7, #22]
    break;
 8006f5c:	e004      	b.n	8006f68 <pbuf_alloc+0x4c>
  case PBUF_RAW:
    offset = 0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	82fb      	strh	r3, [r7, #22]
    break;
 8006f62:	e001      	b.n	8006f68 <pbuf_alloc+0x4c>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
    return NULL;
 8006f64:	2300      	movs	r3, #0
 8006f66:	e0cf      	b.n	8007108 <pbuf_alloc+0x1ec>
  }

  switch (type) {
 8006f68:	79bb      	ldrb	r3, [r7, #6]
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	f200 80c3 	bhi.w	80070f6 <pbuf_alloc+0x1da>
 8006f70:	a201      	add	r2, pc, #4	; (adr r2, 8006f78 <pbuf_alloc+0x5c>)
 8006f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f76:	bf00      	nop
 8006f78:	08007065 	.word	0x08007065
 8006f7c:	080070c3 	.word	0x080070c3
 8006f80:	080070c3 	.word	0x080070c3
 8006f84:	08006f89 	.word	0x08006f89
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006f88:	2005      	movs	r0, #5
 8006f8a:	f7ff fe09 	bl	8006ba0 <memp_malloc>
 8006f8e:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <pbuf_alloc+0x7e>
      PBUF_POOL_IS_EMPTY();
      return NULL;
 8006f96:	2300      	movs	r3, #0
 8006f98:	e0b6      	b.n	8007108 <pbuf_alloc+0x1ec>
    }
    p->type = type;
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	79ba      	ldrb	r2, [r7, #6]
 8006f9e:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8006fa6:	8afb      	ldrh	r3, [r7, #22]
 8006fa8:	3310      	adds	r3, #16
 8006faa:	69fa      	ldr	r2, [r7, #28]
 8006fac:	4413      	add	r3, r2
 8006fae:	3303      	adds	r3, #3
 8006fb0:	f023 0303 	bic.w	r3, r3, #3
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	88ba      	ldrh	r2, [r7, #4]
 8006fbe:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006fc0:	8afb      	ldrh	r3, [r7, #22]
 8006fc2:	3303      	adds	r3, #3
 8006fc4:	f023 0303 	bic.w	r3, r3, #3
 8006fc8:	f5c3 62c0 	rsb	r2, r3, #1536	; 0x600
 8006fcc:	88bb      	ldrh	r3, [r7, #4]
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	bfa8      	it	ge
 8006fd2:	4613      	movge	r3, r2
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	815a      	strh	r2, [r3, #10]
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8006fe4:	88bb      	ldrh	r3, [r7, #4]
 8006fe6:	69fa      	ldr	r2, [r7, #28]
 8006fe8:	8952      	ldrh	r2, [r2, #10]
 8006fea:	1a9b      	subs	r3, r3, r2
 8006fec:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8006fee:	e035      	b.n	800705c <pbuf_alloc+0x140>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006ff0:	2005      	movs	r0, #5
 8006ff2:	f7ff fdd5 	bl	8006ba0 <memp_malloc>
 8006ff6:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d104      	bne.n	8007008 <pbuf_alloc+0xec>
        PBUF_POOL_IS_EMPTY();
        /* free chain so far allocated */
        pbuf_free(p);
 8006ffe:	69f8      	ldr	r0, [r7, #28]
 8007000:	f000 f950 	bl	80072a4 <pbuf_free>
        /* bail out unsuccesfully */
        return NULL;
 8007004:	2300      	movs	r3, #0
 8007006:	e07f      	b.n	8007108 <pbuf_alloc+0x1ec>
      }
      q->type = type;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	79ba      	ldrb	r2, [r7, #6]
 800700c:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	b29a      	uxth	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	b29b      	uxth	r3, r3
 800702c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007030:	bf28      	it	cs
 8007032:	f44f 63c0 	movcs.w	r3, #1536	; 0x600
 8007036:	b29a      	uxth	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f103 0210 	add.w	r2, r3, #16
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2201      	movs	r2, #1
 800704a:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	895b      	ldrh	r3, [r3, #10]
 8007050:	461a      	mov	r2, r3
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	1a9b      	subs	r3, r3, r2
 8007056:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	61bb      	str	r3, [r7, #24]
    /* remember first pbuf for linkage in next iteration */
    r = p;
    /* remaining length to be allocated */
    rem_len = length - p->len;
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	2b00      	cmp	r3, #0
 8007060:	dcc6      	bgt.n	8006ff0 <pbuf_alloc+0xd4>
      r = q;
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8007062:	e04a      	b.n	80070fa <pbuf_alloc+0x1de>
  case PBUF_RAM:
    /* If pbuf is to be allocated in RAM, allocate memory for it. */
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007064:	8afb      	ldrh	r3, [r7, #22]
 8007066:	3313      	adds	r3, #19
 8007068:	b29b      	uxth	r3, r3
 800706a:	f023 0303 	bic.w	r3, r3, #3
 800706e:	b29a      	uxth	r2, r3
 8007070:	88bb      	ldrh	r3, [r7, #4]
 8007072:	3303      	adds	r3, #3
 8007074:	b29b      	uxth	r3, r3
 8007076:	f023 0303 	bic.w	r3, r3, #3
 800707a:	b29b      	uxth	r3, r3
 800707c:	4413      	add	r3, r2
 800707e:	b29b      	uxth	r3, r3
 8007080:	4618      	mov	r0, r3
 8007082:	f7ff fc9d 	bl	80069c0 <mem_malloc>
 8007086:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <pbuf_alloc+0x176>
      return NULL;
 800708e:	2300      	movs	r3, #0
 8007090:	e03a      	b.n	8007108 <pbuf_alloc+0x1ec>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8007092:	8afb      	ldrh	r3, [r7, #22]
 8007094:	3310      	adds	r3, #16
 8007096:	69fa      	ldr	r2, [r7, #28]
 8007098:	4413      	add	r3, r2
 800709a:	3303      	adds	r3, #3
 800709c:	f023 0303 	bic.w	r3, r3, #3
 80070a0:	461a      	mov	r2, r3
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	88ba      	ldrh	r2, [r7, #4]
 80070aa:	811a      	strh	r2, [r3, #8]
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	891a      	ldrh	r2, [r3, #8]
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	2200      	movs	r2, #0
 80070b8:	601a      	str	r2, [r3, #0]
    p->type = type;
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	79ba      	ldrb	r2, [r7, #6]
 80070be:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 80070c0:	e01b      	b.n	80070fa <pbuf_alloc+0x1de>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80070c2:	2004      	movs	r0, #4
 80070c4:	f7ff fd6c 	bl	8006ba0 <memp_malloc>
 80070c8:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <pbuf_alloc+0x1b8>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 80070d0:	2300      	movs	r3, #0
 80070d2:	e019      	b.n	8007108 <pbuf_alloc+0x1ec>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	2200      	movs	r2, #0
 80070d8:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	88ba      	ldrh	r2, [r7, #4]
 80070de:	811a      	strh	r2, [r3, #8]
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	891a      	ldrh	r2, [r3, #8]
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	2200      	movs	r2, #0
 80070ec:	601a      	str	r2, [r3, #0]
    p->type = type;
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	79ba      	ldrb	r2, [r7, #6]
 80070f2:	731a      	strb	r2, [r3, #12]
    break;
 80070f4:	e001      	b.n	80070fa <pbuf_alloc+0x1de>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
 80070f6:	2300      	movs	r3, #0
 80070f8:	e006      	b.n	8007108 <pbuf_alloc+0x1ec>
  }
  /* set reference count */
  p->ref = 1;
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	2201      	movs	r2, #1
 80070fe:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	2200      	movs	r2, #0
 8007104:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007106:	69fb      	ldr	r3, [r7, #28]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3720      	adds	r7, #32
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	460b      	mov	r3, r1
 800711a:	807b      	strh	r3, [r7, #2]
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	891b      	ldrh	r3, [r3, #8]
 8007120:	887a      	ldrh	r2, [r7, #2]
 8007122:	429a      	cmp	r2, r3
 8007124:	d300      	bcc.n	8007128 <pbuf_realloc+0x18>
    /* enlarging not yet supported */
    return;
 8007126:	e048      	b.n	80071ba <pbuf_realloc+0xaa>
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8007128:	887b      	ldrh	r3, [r7, #2]
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	8912      	ldrh	r2, [r2, #8]
 800712e:	1a9b      	subs	r3, r3, r2
 8007130:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007132:	887b      	ldrh	r3, [r7, #2]
 8007134:	827b      	strh	r3, [r7, #18]
  q = p;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800713a:	e00f      	b.n	800715c <pbuf_realloc+0x4c>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	895b      	ldrh	r3, [r3, #10]
 8007140:	8a7a      	ldrh	r2, [r7, #18]
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
    q->tot_len += (u16_t)grow;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	891a      	ldrh	r2, [r3, #8]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	b29b      	uxth	r3, r3
 800714e:	4413      	add	r3, r2
 8007150:	b29a      	uxth	r2, r3
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	617b      	str	r3, [r7, #20]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  q = p;
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	895b      	ldrh	r3, [r3, #10]
 8007160:	8a7a      	ldrh	r2, [r7, #18]
 8007162:	429a      	cmp	r2, r3
 8007164:	d8ea      	bhi.n	800713c <pbuf_realloc+0x2c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)) {
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	7b1b      	ldrb	r3, [r3, #12]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d112      	bne.n	8007194 <pbuf_realloc+0x84>
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	895b      	ldrh	r3, [r3, #10]
 8007172:	8a7a      	ldrh	r2, [r7, #18]
 8007174:	429a      	cmp	r2, r3
 8007176:	d00d      	beq.n	8007194 <pbuf_realloc+0x84>
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	461a      	mov	r2, r3
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	b29a      	uxth	r2, r3
 8007184:	8a7b      	ldrh	r3, [r7, #18]
 8007186:	4413      	add	r3, r2
 8007188:	b29b      	uxth	r3, r3
 800718a:	6978      	ldr	r0, [r7, #20]
 800718c:	4619      	mov	r1, r3
 800718e:	f7ff fb5d 	bl	800684c <mem_trim>
 8007192:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	8a7a      	ldrh	r2, [r7, #18]
 8007198:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	895a      	ldrh	r2, [r3, #10]
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d004      	beq.n	80071b4 <pbuf_realloc+0xa4>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 f878 	bl	80072a4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	2200      	movs	r2, #0
 80071b8:	601a      	str	r2, [r3, #0]

}
 80071ba:	3718      	adds	r7, #24
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	460b      	mov	r3, r1
 80071ca:	807b      	strh	r3, [r7, #2]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
 80071cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d002      	beq.n	80071da <pbuf_header+0x1a>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <pbuf_header+0x1e>
    return 0;
 80071da:	2300      	movs	r3, #0
 80071dc:	e05b      	b.n	8007296 <pbuf_header+0xd6>
  }
 
  if (header_size_increment < 0){
 80071de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	da0a      	bge.n	80071fc <pbuf_header+0x3c>
    increment_magnitude = -header_size_increment;
 80071e6:	887b      	ldrh	r3, [r7, #2]
 80071e8:	425b      	negs	r3, r3
 80071ea:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	895b      	ldrh	r3, [r3, #10]
 80071f0:	89fa      	ldrh	r2, [r7, #14]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d904      	bls.n	8007200 <pbuf_header+0x40>
 80071f6:	be00      	bkpt	0x0000
 80071f8:	2301      	movs	r3, #1
 80071fa:	e04c      	b.n	8007296 <pbuf_header+0xd6>
  } else {
    increment_magnitude = header_size_increment;
 80071fc:	887b      	ldrh	r3, [r7, #2]
 80071fe:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	7b1b      	ldrb	r3, [r3, #12]
 8007204:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800720c:	89bb      	ldrh	r3, [r7, #12]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d002      	beq.n	8007218 <pbuf_header+0x58>
 8007212:	89bb      	ldrh	r3, [r7, #12]
 8007214:	2b03      	cmp	r3, #3
 8007216:	d113      	bne.n	8007240 <pbuf_header+0x80>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007220:	425b      	negs	r3, r3
 8007222:	441a      	add	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	3310      	adds	r3, #16
 8007230:	429a      	cmp	r2, r3
 8007232:	d204      	bcs.n	800723e <pbuf_header+0x7e>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)(p + 1)));
      /* restore old payload pointer */
      p->payload = payload;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	605a      	str	r2, [r3, #4]
      /* bail out unsuccesfully */
      return 1;
 800723a:	2301      	movs	r3, #1
 800723c:	e02b      	b.n	8007296 <pbuf_header+0xd6>
  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800723e:	e01b      	b.n	8007278 <pbuf_header+0xb8>
      p->payload = payload;
      /* bail out unsuccesfully */
      return 1;
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8007240:	89bb      	ldrh	r3, [r7, #12]
 8007242:	2b02      	cmp	r3, #2
 8007244:	d002      	beq.n	800724c <pbuf_header+0x8c>
 8007246:	89bb      	ldrh	r3, [r7, #12]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d113      	bne.n	8007274 <pbuf_header+0xb4>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800724c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007250:	2b00      	cmp	r3, #0
 8007252:	da0d      	bge.n	8007270 <pbuf_header+0xb0>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	895b      	ldrh	r3, [r3, #10]
 8007258:	89fa      	ldrh	r2, [r7, #14]
 800725a:	429a      	cmp	r2, r3
 800725c:	d808      	bhi.n	8007270 <pbuf_header+0xb0>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007266:	425b      	negs	r3, r3
 8007268:	441a      	add	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	605a      	str	r2, [r3, #4]
      return 1;
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800726e:	e003      	b.n	8007278 <pbuf_header+0xb8>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccesfully */
      return 1;
 8007270:	2301      	movs	r3, #1
 8007272:	e010      	b.n	8007296 <pbuf_header+0xd6>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
 8007274:	2301      	movs	r3, #1
 8007276:	e00e      	b.n	8007296 <pbuf_header+0xd6>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	895a      	ldrh	r2, [r3, #10]
 800727c:	887b      	ldrh	r3, [r7, #2]
 800727e:	4413      	add	r3, r2
 8007280:	b29a      	uxth	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	891a      	ldrh	r2, [r3, #8]
 800728a:	887b      	ldrh	r3, [r7, #2]
 800728c:	4413      	add	r3, r2
 800728e:	b29a      	uxth	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop

080072a4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <pbuf_free+0x12>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80072b2:	2300      	movs	r3, #0
 80072b4:	e036      	b.n	8007324 <pbuf_free+0x80>

  LWIP_ASSERT("pbuf_free: sane type",
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 80072b6:	2300      	movs	r3, #0
 80072b8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80072ba:	e02f      	b.n	800731c <pbuf_free+0x78>
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	89db      	ldrh	r3, [r3, #14]
 80072c0:	3b01      	subs	r3, #1
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	81da      	strh	r2, [r3, #14]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	89db      	ldrh	r3, [r3, #14]
 80072cc:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80072ce:	8abb      	ldrh	r3, [r7, #20]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d121      	bne.n	8007318 <pbuf_free+0x74>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	7b1b      	ldrb	r3, [r3, #12]
 80072de:	81fb      	strh	r3, [r7, #14]
        pc->custom_free_function(p);
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 80072e0:	89fb      	ldrh	r3, [r7, #14]
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	d104      	bne.n	80072f0 <pbuf_free+0x4c>
          memp_free(MEMP_PBUF_POOL, p);
 80072e6:	2005      	movs	r0, #5
 80072e8:	6879      	ldr	r1, [r7, #4]
 80072ea:	f7ff fc7b 	bl	8006be4 <memp_free>
 80072ee:	e00d      	b.n	800730c <pbuf_free+0x68>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80072f0:	89fb      	ldrh	r3, [r7, #14]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d002      	beq.n	80072fc <pbuf_free+0x58>
 80072f6:	89fb      	ldrh	r3, [r7, #14]
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d104      	bne.n	8007306 <pbuf_free+0x62>
          memp_free(MEMP_PBUF, p);
 80072fc:	2004      	movs	r0, #4
 80072fe:	6879      	ldr	r1, [r7, #4]
 8007300:	f7ff fc70 	bl	8006be4 <memp_free>
 8007304:	e002      	b.n	800730c <pbuf_free+0x68>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f7ff fa72 	bl	80067f0 <mem_free>
        }
      }
      count++;
 800730c:	7dfb      	ldrb	r3, [r7, #23]
 800730e:	3301      	adds	r3, #1
 8007310:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	607b      	str	r3, [r7, #4]
 8007316:	e001      	b.n	800731c <pbuf_free+0x78>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8007318:	2300      	movs	r3, #0
 800731a:	607b      	str	r3, [r7, #4]
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1cc      	bne.n	80072bc <pbuf_free+0x18>
      p = NULL;
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007322:	7dfb      	ldrb	r3, [r7, #23]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3718      	adds	r7, #24
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  SYS_ARCH_DECL_PROTECT(old_level);
  /* pbuf given? */
  if (p != NULL) {
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d005      	beq.n	8007346 <pbuf_ref+0x1a>
    SYS_ARCH_PROTECT(old_level);
    ++(p->ref);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	89db      	ldrh	r3, [r3, #14]
 800733e:	3301      	adds	r3, #1
 8007340:	b29a      	uxth	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	81da      	strh	r2, [r3, #14]
    SYS_ARCH_UNPROTECT(old_level);
  }
}
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <pbuf_cat>:
 * @see pbuf_chain()
 */

void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <pbuf_cat+0x16>
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <pbuf_cat+0x1a>
 8007366:	be00      	bkpt	0x0000
 8007368:	e01c      	b.n	80073a4 <pbuf_cat+0x54>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	60fb      	str	r3, [r7, #12]
 800736e:	e00a      	b.n	8007386 <pbuf_cat+0x36>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	891a      	ldrh	r2, [r3, #8]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	891b      	ldrh	r3, [r3, #8]
 8007378:	4413      	add	r3, r2
 800737a:	b29a      	uxth	r2, r3
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	811a      	strh	r2, [r3, #8]

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	60fb      	str	r3, [r7, #12]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1f0      	bne.n	8007370 <pbuf_cat+0x20>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	891a      	ldrh	r2, [r3, #8]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	891b      	ldrh	r3, [r3, #8]
 8007396:	4413      	add	r3, r2
 8007398:	b29a      	uxth	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80073a4:	3714      	adds	r7, #20
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop

080073b0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	f7ff ffc7 	bl	8007350 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80073c2:	6838      	ldr	r0, [r7, #0]
 80073c4:	f7ff ffb2 	bl	800732c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop

080073d0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, struct pbuf *p_from)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 80073da:	2300      	movs	r3, #0
 80073dc:	81fb      	strh	r3, [r7, #14]
 80073de:	2300      	movs	r3, #0
 80073e0:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (void*)p_to, (void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d008      	beq.n	80073fa <pbuf_copy+0x2a>
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d005      	beq.n	80073fa <pbuf_copy+0x2a>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	891a      	ldrh	r2, [r3, #8]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	891b      	ldrh	r3, [r3, #8]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d202      	bcs.n	8007400 <pbuf_copy+0x30>
 80073fa:	be00      	bkpt	0x0000
 80073fc:	23f2      	movs	r3, #242	; 0xf2
 80073fe:	e06d      	b.n	80074dc <pbuf_copy+0x10c>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	895b      	ldrh	r3, [r3, #10]
 8007404:	461a      	mov	r2, r3
 8007406:	89fb      	ldrh	r3, [r7, #14]
 8007408:	1ad2      	subs	r2, r2, r3
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	895b      	ldrh	r3, [r3, #10]
 800740e:	4619      	mov	r1, r3
 8007410:	89bb      	ldrh	r3, [r7, #12]
 8007412:	1acb      	subs	r3, r1, r3
 8007414:	429a      	cmp	r2, r3
 8007416:	db05      	blt.n	8007424 <pbuf_copy+0x54>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	895a      	ldrh	r2, [r3, #10]
 800741c:	89bb      	ldrh	r3, [r7, #12]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	817b      	strh	r3, [r7, #10]
 8007422:	e004      	b.n	800742e <pbuf_copy+0x5e>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	895a      	ldrh	r2, [r3, #10]
 8007428:	89fb      	ldrh	r3, [r7, #14]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685a      	ldr	r2, [r3, #4]
 8007432:	89fb      	ldrh	r3, [r7, #14]
 8007434:	18d1      	adds	r1, r2, r3
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	685a      	ldr	r2, [r3, #4]
 800743a:	89bb      	ldrh	r3, [r7, #12]
 800743c:	441a      	add	r2, r3
 800743e:	897b      	ldrh	r3, [r7, #10]
 8007440:	4608      	mov	r0, r1
 8007442:	4611      	mov	r1, r2
 8007444:	461a      	mov	r2, r3
 8007446:	f7fd fa2d 	bl	80048a4 <thumb2_memcpy>
    offset_to += len;
 800744a:	89fa      	ldrh	r2, [r7, #14]
 800744c:	897b      	ldrh	r3, [r7, #10]
 800744e:	4413      	add	r3, r2
 8007450:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8007452:	89ba      	ldrh	r2, [r7, #12]
 8007454:	897b      	ldrh	r3, [r7, #10]
 8007456:	4413      	add	r3, r2
 8007458:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	895b      	ldrh	r3, [r3, #10]
 800745e:	89ba      	ldrh	r2, [r7, #12]
 8007460:	429a      	cmp	r2, r3
 8007462:	d304      	bcc.n	800746e <pbuf_copy+0x9e>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007464:	2300      	movs	r3, #0
 8007466:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	895b      	ldrh	r3, [r3, #10]
 8007472:	89fa      	ldrh	r2, [r7, #14]
 8007474:	429a      	cmp	r2, r3
 8007476:	d10d      	bne.n	8007494 <pbuf_copy+0xc4>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007478:	2300      	movs	r3, #0
 800747a:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d105      	bne.n	8007494 <pbuf_copy+0xc4>
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d002      	beq.n	8007494 <pbuf_copy+0xc4>
 800748e:	be00      	bkpt	0x0000
 8007490:	23f2      	movs	r3, #242	; 0xf2
 8007492:	e023      	b.n	80074dc <pbuf_copy+0x10c>
    }

    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00c      	beq.n	80074b4 <pbuf_copy+0xe4>
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	895a      	ldrh	r2, [r3, #10]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	891b      	ldrh	r3, [r3, #8]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d106      	bne.n	80074b4 <pbuf_copy+0xe4>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d002      	beq.n	80074b4 <pbuf_copy+0xe4>
 80074ae:	be00      	bkpt	0x0000
 80074b0:	23fa      	movs	r3, #250	; 0xfa
 80074b2:	e013      	b.n	80074dc <pbuf_copy+0x10c>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00c      	beq.n	80074d4 <pbuf_copy+0x104>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	895a      	ldrh	r2, [r3, #10]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	891b      	ldrh	r3, [r3, #8]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d106      	bne.n	80074d4 <pbuf_copy+0x104>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d002      	beq.n	80074d4 <pbuf_copy+0x104>
 80074ce:	be00      	bkpt	0x0000
 80074d0:	23fa      	movs	r3, #250	; 0xfa
 80074d2:	e003      	b.n	80074dc <pbuf_copy+0x10c>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d192      	bne.n	8007400 <pbuf_copy+0x30>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	b25b      	sxtb	r3, r3
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop

080074e8 <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
 80074e8:	b590      	push	{r4, r7, lr}
 80074ea:	b089      	sub	sp, #36	; 0x24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  struct raw_pcb *pcb, *prev;
  struct ip_hdr *iphdr;
  s16_t proto;
  u8_t eaten = 0;
 80074f2:	2300      	movs	r3, #0
 80074f4:	75fb      	strb	r3, [r7, #23]

  LWIP_UNUSED_ARG(inp);

  iphdr = (struct ip_hdr *)p->payload;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	613b      	str	r3, [r7, #16]
  proto = IPH_PROTO(iphdr);
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	7a5b      	ldrb	r3, [r3, #9]
 8007500:	81fb      	strh	r3, [r7, #14]

  prev = NULL;
 8007502:	2300      	movs	r3, #0
 8007504:	61bb      	str	r3, [r7, #24]
  pcb = raw_pcbs;
 8007506:	4b25      	ldr	r3, [pc, #148]	; (800759c <raw_input+0xb4>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	61fb      	str	r3, [r7, #28]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
 800750c:	e03a      	b.n	8007584 <raw_input+0x9c>
    if ((pcb->protocol == proto) &&
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	7c1b      	ldrb	r3, [r3, #16]
 8007512:	461a      	mov	r2, r3
 8007514:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007518:	429a      	cmp	r2, r3
 800751a:	d12e      	bne.n	800757a <raw_input+0x92>
        (ip_addr_isany(&pcb->local_ip) ||
 800751c:	69fb      	ldr	r3, [r7, #28]
  prev = NULL;
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
    if ((pcb->protocol == proto) &&
 800751e:	2b00      	cmp	r3, #0
 8007520:	d009      	beq.n	8007536 <raw_input+0x4e>
        (ip_addr_isany(&pcb->local_ip) ||
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d005      	beq.n	8007536 <raw_input+0x4e>
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest))) {
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	4b1c      	ldr	r3, [pc, #112]	; (80075a0 <raw_input+0xb8>)
 8007530:	681b      	ldr	r3, [r3, #0]
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
    if ((pcb->protocol == proto) &&
        (ip_addr_isany(&pcb->local_ip) ||
 8007532:	429a      	cmp	r2, r3
 8007534:	d121      	bne.n	800757a <raw_input+0x92>
      /* broadcast filter? */
      if (ip_get_option(pcb, SOF_BROADCAST) || !ip_addr_isbroadcast(&current_iphdr_dest, inp))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        /* receive callback function available? */
        if (pcb->recv != NULL) {
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d01d      	beq.n	800757a <raw_input+0x92>
          /* the receive callback function did not eat the packet? */
          if (pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr()) != 0) {
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	695c      	ldr	r4, [r3, #20]
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	4618      	mov	r0, r3
 8007548:	69f9      	ldr	r1, [r7, #28]
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	4b15      	ldr	r3, [pc, #84]	; (80075a4 <raw_input+0xbc>)
 800754e:	47a0      	blx	r4
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d011      	beq.n	800757a <raw_input+0x92>
            /* receive function ate the packet */
            p = NULL;
 8007556:	2300      	movs	r3, #0
 8007558:	607b      	str	r3, [r7, #4]
            eaten = 1;
 800755a:	2301      	movs	r3, #1
 800755c:	75fb      	strb	r3, [r7, #23]
            if (prev != NULL) {
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00a      	beq.n	800757a <raw_input+0x92>
            /* move the pcb to the front of raw_pcbs so that is
               found faster next time */
              prev->next = pcb->next;
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	68da      	ldr	r2, [r3, #12]
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	60da      	str	r2, [r3, #12]
              pcb->next = raw_pcbs;
 800756c:	4b0b      	ldr	r3, [pc, #44]	; (800759c <raw_input+0xb4>)
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	60da      	str	r2, [r3, #12]
              raw_pcbs = pcb;
 8007574:	4a09      	ldr	r2, [pc, #36]	; (800759c <raw_input+0xb4>)
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	6013      	str	r3, [r2, #0]
        }
        /* no receive callback function was set for this raw PCB */
      }
      /* drop the packet */
    }
    prev = pcb;
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	61bb      	str	r3, [r7, #24]
    pcb = pcb->next;
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	61fb      	str	r3, [r7, #28]

  prev = NULL;
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
 8007584:	7dfb      	ldrb	r3, [r7, #23]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d102      	bne.n	8007590 <raw_input+0xa8>
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1be      	bne.n	800750e <raw_input+0x26>
      /* drop the packet */
    }
    prev = pcb;
    pcb = pcb->next;
  }
  return eaten;
 8007590:	7dfb      	ldrb	r3, [r7, #23]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3724      	adds	r7, #36	; 0x24
 8007596:	46bd      	mov	sp, r7
 8007598:	bd90      	pop	{r4, r7, pc}
 800759a:	bf00      	nop
 800759c:	1ffef064 	.word	0x1ffef064
 80075a0:	1ffef128 	.word	0x1ffef128
 80075a4:	1ffef120 	.word	0x1ffef120

080075a8 <arp_timer>:
 *
 * @param arg unused argument
 */
static void
arp_timer(void *arg)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: etharp_tmr()\n"));
  etharp_tmr();
 80075b0:	f7fd f9dc 	bl	800496c <etharp_tmr>
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 80075b4:	f241 3088 	movw	r0, #5000	; 0x1388
 80075b8:	4903      	ldr	r1, [pc, #12]	; (80075c8 <arp_timer+0x20>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	f000 f830 	bl	8007620 <sys_timeout>
}
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	080075a9 	.word	0x080075a9

080075cc <igmp_timer>:
 *
 * @param arg unused argument
 */
static void
igmp_timer(void *arg)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: igmp_tmr()\n"));
  igmp_tmr();
 80075d4:	f7fe fac2 	bl	8005b5c <igmp_tmr>
  sys_timeout(IGMP_TMR_INTERVAL, igmp_timer, NULL);
 80075d8:	2064      	movs	r0, #100	; 0x64
 80075da:	4903      	ldr	r1, [pc, #12]	; (80075e8 <igmp_timer+0x1c>)
 80075dc:	2200      	movs	r2, #0
 80075de:	f000 f81f 	bl	8007620 <sys_timeout>
}
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	080075cd 	.word	0x080075cd

080075ec <sys_timeouts_init>:
}
#endif /* LWIP_DNS */

/** Initialize this module */
void sys_timeouts_init(void)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	af00      	add	r7, sp, #0
#if IP_REASSEMBLY
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
#endif /* IP_REASSEMBLY */
#if LWIP_ARP
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 80075f0:	f241 3088 	movw	r0, #5000	; 0x1388
 80075f4:	4907      	ldr	r1, [pc, #28]	; (8007614 <sys_timeouts_init+0x28>)
 80075f6:	2200      	movs	r2, #0
 80075f8:	f000 f812 	bl	8007620 <sys_timeout>
#endif /* LWIP_DHCP */
#if LWIP_AUTOIP
  sys_timeout(AUTOIP_TMR_INTERVAL, autoip_timer, NULL);
#endif /* LWIP_AUTOIP */
#if LWIP_IGMP
  sys_timeout(IGMP_TMR_INTERVAL, igmp_timer, NULL);
 80075fc:	2064      	movs	r0, #100	; 0x64
 80075fe:	4906      	ldr	r1, [pc, #24]	; (8007618 <sys_timeouts_init+0x2c>)
 8007600:	2200      	movs	r2, #0
 8007602:	f000 f80d 	bl	8007620 <sys_timeout>
  sys_timeout(DNS_TMR_INTERVAL, dns_timer, NULL);
#endif /* LWIP_DNS */

#if NO_SYS
  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = (u16_t)sys_now();
 8007606:	f7fd f96b 	bl	80048e0 <sys_now>
 800760a:	4603      	mov	r3, r0
 800760c:	b29a      	uxth	r2, r3
 800760e:	4b03      	ldr	r3, [pc, #12]	; (800761c <sys_timeouts_init+0x30>)
 8007610:	801a      	strh	r2, [r3, #0]
#endif
}
 8007612:	bd80      	pop	{r7, pc}
 8007614:	080075a9 	.word	0x080075a9
 8007618:	080075cd 	.word	0x080075cd
 800761c:	1ffef06c 	.word	0x1ffef06c

08007620 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b086      	sub	sp, #24
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800762c:	2003      	movs	r0, #3
 800762e:	f7ff fab7 	bl	8006ba0 <memp_malloc>
 8007632:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d100      	bne.n	800763c <sys_timeout+0x1c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
 800763a:	e05a      	b.n	80076f2 <sys_timeout+0xd2>
  }
  timeout->next = NULL;
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	2200      	movs	r2, #0
 8007640:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	60da      	str	r2, [r3, #12]
  timeout->time = msecs;
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8007654:	4b28      	ldr	r3, [pc, #160]	; (80076f8 <sys_timeout+0xd8>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d103      	bne.n	8007664 <sys_timeout+0x44>
    next_timeout = timeout;
 800765c:	4a26      	ldr	r2, [pc, #152]	; (80076f8 <sys_timeout+0xd8>)
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	6013      	str	r3, [r2, #0]
    return;
 8007662:	e046      	b.n	80076f2 <sys_timeout+0xd2>
  }

  if (next_timeout->time > msecs) {
 8007664:	4b24      	ldr	r3, [pc, #144]	; (80076f8 <sys_timeout+0xd8>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	685a      	ldr	r2, [r3, #4]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	429a      	cmp	r2, r3
 800766e:	d90f      	bls.n	8007690 <sys_timeout+0x70>
    next_timeout->time -= msecs;
 8007670:	4b21      	ldr	r3, [pc, #132]	; (80076f8 <sys_timeout+0xd8>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a20      	ldr	r2, [pc, #128]	; (80076f8 <sys_timeout+0xd8>)
 8007676:	6812      	ldr	r2, [r2, #0]
 8007678:	6851      	ldr	r1, [r2, #4]
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	1a8a      	subs	r2, r1, r2
 800767e:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8007680:	4b1d      	ldr	r3, [pc, #116]	; (80076f8 <sys_timeout+0xd8>)
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8007688:	4a1b      	ldr	r2, [pc, #108]	; (80076f8 <sys_timeout+0xd8>)
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	6013      	str	r3, [r2, #0]
 800768e:	e030      	b.n	80076f2 <sys_timeout+0xd2>
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
 8007690:	4b19      	ldr	r3, [pc, #100]	; (80076f8 <sys_timeout+0xd8>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	617b      	str	r3, [r7, #20]
 8007696:	e029      	b.n	80076ec <sys_timeout+0xcc>
      timeout->time -= t->time;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	1ad2      	subs	r2, r2, r3
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d006      	beq.n	80076bc <sys_timeout+0x9c>
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d914      	bls.n	80076e6 <sys_timeout+0xc6>
        if (t->next != NULL) {
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d008      	beq.n	80076d6 <sys_timeout+0xb6>
          t->next->time -= timeout->time;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	6812      	ldr	r2, [r2, #0]
 80076cc:	6851      	ldr	r1, [r2, #4]
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	6852      	ldr	r2, [r2, #4]
 80076d2:	1a8a      	subs	r2, r1, r2
 80076d4:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	693a      	ldr	r2, [r7, #16]
 80076e2:	601a      	str	r2, [r3, #0]
        break;
 80076e4:	e005      	b.n	80076f2 <sys_timeout+0xd2>
  if (next_timeout->time > msecs) {
    next_timeout->time -= msecs;
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1d2      	bne.n	8007698 <sys_timeout+0x78>
        t->next = timeout;
        break;
      }
    }
  }
}
 80076f2:	3718      	adds	r7, #24
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	1ffef068 	.word	0x1ffef068

080076fc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8007702:	4b1f      	ldr	r3, [pc, #124]	; (8007780 <sys_check_timeouts+0x84>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d037      	beq.n	800777a <sys_check_timeouts+0x7e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u16_t now;

    now = (u16_t)sys_now();
 800770a:	f7fd f8e9 	bl	80048e0 <sys_now>
 800770e:	4603      	mov	r3, r0
 8007710:	827b      	strh	r3, [r7, #18]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8007712:	4b1c      	ldr	r3, [pc, #112]	; (8007784 <sys_check_timeouts+0x88>)
 8007714:	881b      	ldrh	r3, [r3, #0]
 8007716:	8a7a      	ldrh	r2, [r7, #18]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	82fb      	strh	r3, [r7, #22]
    do
    {
#if PBUF_POOL_FREE_OOSEQ
      PBUF_CHECK_FREE_OOSEQ();
#endif /* PBUF_POOL_FREE_OOSEQ */
      had_one = 0;
 800771c:	2300      	movs	r3, #0
 800771e:	757b      	strb	r3, [r7, #21]
      tmptimeout = next_timeout;
 8007720:	4b17      	ldr	r3, [pc, #92]	; (8007780 <sys_check_timeouts+0x84>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	60fb      	str	r3, [r7, #12]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d023      	beq.n	8007774 <sys_check_timeouts+0x78>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	685a      	ldr	r2, [r3, #4]
 8007730:	8afb      	ldrh	r3, [r7, #22]
 8007732:	429a      	cmp	r2, r3
 8007734:	d81e      	bhi.n	8007774 <sys_check_timeouts+0x78>
        /* timeout has expired */
        had_one = 1;
 8007736:	2301      	movs	r3, #1
 8007738:	757b      	strb	r3, [r7, #21]
        timeouts_last_time = now;
 800773a:	4a12      	ldr	r2, [pc, #72]	; (8007784 <sys_check_timeouts+0x88>)
 800773c:	8a7b      	ldrh	r3, [r7, #18]
 800773e:	8013      	strh	r3, [r2, #0]
        diff -= tmptimeout->time;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	b29b      	uxth	r3, r3
 8007746:	8afa      	ldrh	r2, [r7, #22]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	82fb      	strh	r3, [r7, #22]
        next_timeout = tmptimeout->next;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a0b      	ldr	r2, [pc, #44]	; (8007780 <sys_check_timeouts+0x84>)
 8007752:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	60bb      	str	r3, [r7, #8]
        arg = tmptimeout->arg;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	607b      	str	r3, [r7, #4]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8007760:	2003      	movs	r0, #3
 8007762:	68f9      	ldr	r1, [r7, #12]
 8007764:	f7ff fa3e 	bl	8006be4 <memp_free>
        if (handler != NULL) {
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d002      	beq.n	8007774 <sys_check_timeouts+0x78>
          handler(arg);
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	4798      	blx	r3
        }
      }
    /* repeat until all expired timers have been called */
    }while(had_one);
 8007774:	7d7b      	ldrb	r3, [r7, #21]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1d0      	bne.n	800771c <sys_check_timeouts+0x20>
  }
}
 800777a:	3718      	adds	r7, #24
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	1ffef068 	.word	0x1ffef068
 8007784:	1ffef06c 	.word	0x1ffef06c

08007788 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8007788:	b480      	push	{r7}
 800778a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800779a:	2300      	movs	r3, #0
 800779c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;
  
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800779e:	4b18      	ldr	r3, [pc, #96]	; (8007800 <udp_new_port+0x6c>)
 80077a0:	881b      	ldrh	r3, [r3, #0]
 80077a2:	1c5a      	adds	r2, r3, #1
 80077a4:	b291      	uxth	r1, r2
 80077a6:	4a16      	ldr	r2, [pc, #88]	; (8007800 <udp_new_port+0x6c>)
 80077a8:	8011      	strh	r1, [r2, #0]
 80077aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d103      	bne.n	80077ba <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80077b2:	4b13      	ldr	r3, [pc, #76]	; (8007800 <udp_new_port+0x6c>)
 80077b4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80077b8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80077ba:	4b12      	ldr	r3, [pc, #72]	; (8007804 <udp_new_port+0x70>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	603b      	str	r3, [r7, #0]
 80077c0:	e012      	b.n	80077e8 <udp_new_port+0x54>
    if (pcb->local_port == udp_port) {
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	8a5a      	ldrh	r2, [r3, #18]
 80077c6:	4b0e      	ldr	r3, [pc, #56]	; (8007800 <udp_new_port+0x6c>)
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d109      	bne.n	80077e2 <udp_new_port+0x4e>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80077ce:	88fb      	ldrh	r3, [r7, #6]
 80077d0:	3301      	adds	r3, #1
 80077d2:	80fb      	strh	r3, [r7, #6]
 80077d4:	88fb      	ldrh	r3, [r7, #6]
 80077d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077da:	d301      	bcc.n	80077e0 <udp_new_port+0x4c>
        return 0;
 80077dc:	2300      	movs	r3, #0
 80077de:	e008      	b.n	80077f2 <udp_new_port+0x5e>
      }
      goto again;
 80077e0:	e7dd      	b.n	800779e <udp_new_port+0xa>
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	603b      	str	r3, [r7, #0]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1e9      	bne.n	80077c2 <udp_new_port+0x2e>
        return 0;
      }
      goto again;
    }
  }
  return udp_port;
 80077ee:	4b04      	ldr	r3, [pc, #16]	; (8007800 <udp_new_port+0x6c>)
 80077f0:	881b      	ldrh	r3, [r3, #0]
  if (ipcb != NULL) {
    return 0;
  }
  return udp_port;
#endif
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	1ffe8aa8 	.word	0x1ffe8aa8
 8007804:	1ffef78c 	.word	0x1ffef78c

08007808 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8007808:	b590      	push	{r4, r7, lr}
 800780a:	b08d      	sub	sp, #52	; 0x34
 800780c:	af02      	add	r7, sp, #8
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]

  PERF_START;

  UDP_STATS_INC(udp.recv);

  iphdr = (struct ip_hdr *)p->payload;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	617b      	str	r3, [r7, #20]

  /* Check minimum length (IP header + UDP header)
   * and move payload pointer to UDP header */
  if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	891b      	ldrh	r3, [r3, #8]
 800781c:	461a      	mov	r2, r3
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	f003 030f 	and.w	r3, r3, #15
 8007826:	3302      	adds	r3, #2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	429a      	cmp	r2, r3
 800782c:	db12      	blt.n	8007854 <udp_input+0x4c>
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	b29b      	uxth	r3, r3
 8007834:	f003 030f 	and.w	r3, r3, #15
 8007838:	b29b      	uxth	r3, r3
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	b29b      	uxth	r3, r3
 800783e:	425b      	negs	r3, r3
 8007840:	b29b      	uxth	r3, r3
 8007842:	b29b      	uxth	r3, r3
 8007844:	b21b      	sxth	r3, r3
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	4619      	mov	r1, r3
 800784a:	f7ff fcb9 	bl	80071c0 <pbuf_header>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d003      	beq.n	800785c <udp_input+0x54>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    snmp_inc_udpinerrors();
    pbuf_free(p);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f7ff fd25 	bl	80072a4 <pbuf_free>
    goto end;
 800785a:	e0e2      	b.n	8007a22 <udp_input+0x21a>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	613b      	str	r3, [r7, #16]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
 8007862:	4b71      	ldr	r3, [pc, #452]	; (8007a28 <udp_input+0x220>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4618      	mov	r0, r3
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	f7fe fd81 	bl	8006370 <ip4_addr_isbroadcast>
 800786e:	4603      	mov	r3, r0
 8007870:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = ntohs(udphdr->src);
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	b29b      	uxth	r3, r3
 8007878:	4618      	mov	r0, r3
 800787a:	f7fe fee7 	bl	800664c <lwip_ntohs>
 800787e:	4603      	mov	r3, r0
 8007880:	81bb      	strh	r3, [r7, #12]
  dest = ntohs(udphdr->dest);
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	885b      	ldrh	r3, [r3, #2]
 8007886:	b29b      	uxth	r3, r3
 8007888:	4618      	mov	r0, r3
 800788a:	f7fe fedf 	bl	800664c <lwip_ntohs>
 800788e:	4603      	mov	r3, r0
 8007890:	817b      	strh	r3, [r7, #10]
      }
    }
  } else
#endif /* LWIP_DHCP */
  {
    prev = NULL;
 8007892:	2300      	movs	r3, #0
 8007894:	623b      	str	r3, [r7, #32]
    local_match = 0;
 8007896:	2300      	movs	r3, #0
 8007898:	76fb      	strb	r3, [r7, #27]
    uncon_pcb = NULL;
 800789a:	2300      	movs	r3, #0
 800789c:	61fb      	str	r3, [r7, #28]
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800789e:	4b63      	ldr	r3, [pc, #396]	; (8007a2c <udp_input+0x224>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	627b      	str	r3, [r7, #36]	; 0x24
 80078a4:	e067      	b.n	8007976 <udp_input+0x16e>
      local_match = 0;
 80078a6:	2300      	movs	r3, #0
 80078a8:	76fb      	strb	r3, [r7, #27]
                   ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip), pcb->local_port,
                   ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	8a5b      	ldrh	r3, [r3, #18]
 80078ae:	897a      	ldrh	r2, [r7, #10]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d136      	bne.n	8007922 <udp_input+0x11a>
        if (
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d106      	bne.n	80078c8 <udp_input+0xc0>
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d023      	beq.n	8007908 <udp_input+0x100>
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d01f      	beq.n	8007908 <udp_input+0x100>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	4b56      	ldr	r3, [pc, #344]	; (8007a28 <udp_input+0x220>)
 80078ce:	681b      	ldr	r3, [r3, #0]
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
        if (
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d019      	beq.n	8007908 <udp_input+0x100>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
#if LWIP_IGMP
           ip_addr_ismulticast(&current_iphdr_dest) ||
 80078d4:	4b54      	ldr	r3, [pc, #336]	; (8007a28 <udp_input+0x220>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
        if (
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
 80078dc:	2be0      	cmp	r3, #224	; 0xe0
 80078de:	d013      	beq.n	8007908 <udp_input+0x100>
#if LWIP_IGMP
           ip_addr_ismulticast(&current_iphdr_dest) ||
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d01d      	beq.n	8007922 <udp_input+0x11a>
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
             (ip_addr_isany(&pcb->local_ip) ||
 80078e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
#if IP_SOF_BROADCAST_RECV
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00d      	beq.n	8007908 <udp_input+0x100>
             (ip_addr_isany(&pcb->local_ip) ||
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d009      	beq.n	8007908 <udp_input+0x100>
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	4b4b      	ldr	r3, [pc, #300]	; (8007a28 <udp_input+0x220>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	405a      	eors	r2, r3
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	4013      	ands	r3, r2
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
             (ip_addr_isany(&pcb->local_ip) ||
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10c      	bne.n	8007922 <udp_input+0x11a>
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#endif /* IP_SOF_BROADCAST_RECV */ 
          local_match = 1;
 8007908:	2301      	movs	r3, #1
 800790a:	76fb      	strb	r3, [r7, #27]
          if ((uncon_pcb == NULL) && 
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d107      	bne.n	8007922 <udp_input+0x11a>
              ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
 8007912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007914:	7c1b      	ldrb	r3, [r3, #16]
 8007916:	f003 0304 	and.w	r3, r3, #4
            (broadcast &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#endif /* IP_SOF_BROADCAST_RECV */ 
          local_match = 1;
          if ((uncon_pcb == NULL) && 
 800791a:	2b00      	cmp	r3, #0
 800791c:	d101      	bne.n	8007922 <udp_input+0x11a>
              ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
            /* the first unconnected matching PCB */
            uncon_pcb = pcb;
 800791e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007920:	61fb      	str	r3, [r7, #28]
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
 8007922:	7efb      	ldrb	r3, [r7, #27]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d021      	beq.n	800796c <udp_input+0x164>
          (pcb->remote_port == src) &&
 8007928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792a:	8a9b      	ldrh	r3, [r3, #20]
            uncon_pcb = pcb;
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
 800792c:	89ba      	ldrh	r2, [r7, #12]
 800792e:	429a      	cmp	r2, r3
 8007930:	d11c      	bne.n	800796c <udp_input+0x164>
          (pcb->remote_port == src) &&
          (ip_addr_isany(&pcb->remote_ip) ||
 8007932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007934:	3304      	adds	r3, #4
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
 8007936:	2b00      	cmp	r3, #0
 8007938:	d009      	beq.n	800794e <udp_input+0x146>
          (ip_addr_isany(&pcb->remote_ip) ||
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d005      	beq.n	800794e <udp_input+0x146>
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
 8007942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	4b3a      	ldr	r3, [pc, #232]	; (8007a30 <udp_input+0x228>)
 8007948:	681b      	ldr	r3, [r3, #0]
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
          (ip_addr_isany(&pcb->remote_ip) ||
 800794a:	429a      	cmp	r2, r3
 800794c:	d10e      	bne.n	800796c <udp_input+0x164>
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00a      	beq.n	800796a <udp_input+0x162>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	68da      	ldr	r2, [r3, #12]
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800795c:	4b33      	ldr	r3, [pc, #204]	; (8007a2c <udp_input+0x224>)
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007962:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8007964:	4a31      	ldr	r2, [pc, #196]	; (8007a2c <udp_input+0x224>)
 8007966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007968:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800796a:	e007      	b.n	800797c <udp_input+0x174>
      }
      prev = pcb;
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	623b      	str	r3, [r7, #32]
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	627b      	str	r3, [r7, #36]	; 0x24
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	2b00      	cmp	r3, #0
 800797a:	d194      	bne.n	80078a6 <udp_input+0x9e>
        break;
      }
      prev = pcb;
    }
    /* no fully matching pcb found? then look for an unconnected pcb */
    if (pcb == NULL) {
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	2b00      	cmp	r3, #0
 8007980:	d101      	bne.n	8007986 <udp_input+0x17e>
      pcb = uncon_pcb;
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	2b00      	cmp	r3, #0
 800798a:	d105      	bne.n	8007998 <udp_input+0x190>
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	685a      	ldr	r2, [r3, #4]
 8007990:	4b25      	ldr	r3, [pc, #148]	; (8007a28 <udp_input+0x220>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	429a      	cmp	r2, r3
 8007996:	d141      	bne.n	8007a1c <udp_input+0x214>
          goto end;
        }
      }
#endif /* CHECKSUM_CHECK_UDP */
    }
    if(pbuf_header(p, -UDP_HLEN)) {
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f06f 0107 	mvn.w	r1, #7
 800799e:	f7ff fc0f 	bl	80071c0 <pbuf_header>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d003      	beq.n	80079b0 <udp_input+0x1a8>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7ff fc7b 	bl	80072a4 <pbuf_free>
      goto end;
 80079ae:	e038      	b.n	8007a22 <udp_input+0x21a>
    }
    if (pcb != NULL) {
 80079b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d013      	beq.n	80079de <udp_input+0x1d6>
          pbuf_header(p, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00b      	beq.n	80079d6 <udp_input+0x1ce>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80079be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c0:	69dc      	ldr	r4, [r3, #28]
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	6a1a      	ldr	r2, [r3, #32]
 80079c6:	89bb      	ldrh	r3, [r7, #12]
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	4610      	mov	r0, r2
 80079cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	4b17      	ldr	r3, [pc, #92]	; (8007a30 <udp_input+0x228>)
 80079d2:	47a0      	blx	r4
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
      goto end;
    }
    if (pcb != NULL) {
 80079d4:	e025      	b.n	8007a22 <udp_input+0x21a>
      if (pcb->recv != NULL) {
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
      } else {
        /* no recv function registered? then we have to free the pbuf! */
        pbuf_free(p);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7ff fc64 	bl	80072a4 <pbuf_free>
        goto end;
 80079dc:	e021      	b.n	8007a22 <udp_input+0x21a>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
 80079de:	7bfb      	ldrb	r3, [r7, #15]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d117      	bne.n	8007a14 <udp_input+0x20c>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
 80079e4:	4b10      	ldr	r3, [pc, #64]	; (8007a28 <udp_input+0x220>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
 80079ec:	2be0      	cmp	r3, #224	; 0xe0
 80079ee:	d011      	beq.n	8007a14 <udp_input+0x20c>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        /* move payload pointer back to ip header */
        pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	f003 030f 	and.w	r3, r3, #15
 80079f8:	3302      	adds	r3, #2
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	b21b      	sxth	r3, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	4619      	mov	r1, r3
 8007a08:	f7ff fbda 	bl	80071c0 <pbuf_header>
        LWIP_ASSERT("p->payload == iphdr", (p->payload == iphdr));
        icmp_dest_unreach(p, ICMP_DUR_PORT);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	2103      	movs	r1, #3
 8007a10:	f7fd feca 	bl	80057a8 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      UDP_STATS_INC(udp.proterr);
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpnoports();
      pbuf_free(p);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7ff fc45 	bl	80072a4 <pbuf_free>
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
      goto end;
    }
    if (pcb != NULL) {
 8007a1a:	e002      	b.n	8007a22 <udp_input+0x21a>
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpnoports();
      pbuf_free(p);
    }
  } else {
    pbuf_free(p);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7ff fc41 	bl	80072a4 <pbuf_free>
  }
end:
  PERF_STOP("udp_input");
}
 8007a22:	372c      	adds	r7, #44	; 0x2c
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd90      	pop	{r4, r7, pc}
 8007a28:	1ffef128 	.word	0x1ffef128
 8007a2c:	1ffef78c 	.word	0x1ffef78c
 8007a30:	1ffef120 	.word	0x1ffef120

08007a34 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8007a34:	b590      	push	{r4, r7, lr}
 8007a36:	b08d      	sub	sp, #52	; 0x34
 8007a38:	af04      	add	r7, sp, #16
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
 8007a40:	807b      	strh	r3, [r7, #2]
    return ERR_VAL;
  }
#endif /* IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	8a5b      	ldrh	r3, [r3, #18]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10f      	bne.n	8007a6a <udp_sendto_if+0x36>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8a5b      	ldrh	r3, [r3, #18]
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	4611      	mov	r1, r2
 8007a54:	461a      	mov	r2, r3
 8007a56:	f000 f899 	bl	8007b8c <udp_bind>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 8007a5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <udp_sendto_if+0x36>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
 8007a68:	e08a      	b.n	8007b80 <udp_sendto_if+0x14c>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 8007a6a:	68b8      	ldr	r0, [r7, #8]
 8007a6c:	2108      	movs	r1, #8
 8007a6e:	f7ff fba7 	bl	80071c0 <pbuf_header>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d013      	beq.n	8007aa0 <udp_sendto_if+0x6c>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8007a78:	2001      	movs	r0, #1
 8007a7a:	2108      	movs	r1, #8
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f7ff fa4d 	bl	8006f1c <pbuf_alloc>
 8007a82:	61b8      	str	r0, [r7, #24]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <udp_sendto_if+0x5a>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8007a8a:	23ff      	movs	r3, #255	; 0xff
 8007a8c:	e078      	b.n	8007b80 <udp_sendto_if+0x14c>
    }
    if (p->tot_len != 0) {
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	891b      	ldrh	r3, [r3, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d006      	beq.n	8007aa4 <udp_sendto_if+0x70>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8007a96:	69b8      	ldr	r0, [r7, #24]
 8007a98:	68b9      	ldr	r1, [r7, #8]
 8007a9a:	f7ff fc89 	bl	80073b0 <pbuf_chain>
 8007a9e:	e001      	b.n	8007aa4 <udp_sendto_if+0x70>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	61bb      	str	r3, [r7, #24]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	613b      	str	r3, [r7, #16]
  udphdr->src = htons(pcb->local_port);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	8a5b      	ldrh	r3, [r3, #18]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fe fdb6 	bl	8006620 <lwip_htons>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	801a      	strh	r2, [r3, #0]
  udphdr->dest = htons(dst_port);
 8007abc:	887b      	ldrh	r3, [r7, #2]
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fe fdae 	bl	8006620 <lwip_htons>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000; 
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	719a      	strb	r2, [r3, #6]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	71da      	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if LWIP_IGMP
  if (ip_addr_ismulticast(dst_ip) && ((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0)) {
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ade:	2be0      	cmp	r3, #224	; 0xe0
 8007ae0:	d10c      	bne.n	8007afc <udp_sendto_if+0xc8>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	7c1b      	ldrb	r3, [r3, #16]
 8007ae6:	f003 0308 	and.w	r3, r3, #8
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d006      	beq.n	8007afc <udp_sendto_if+0xc8>
    q->flags |= PBUF_FLAG_MCASTLOOP;
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	7b5b      	ldrb	r3, [r3, #13]
 8007af2:	f043 0304 	orr.w	r3, r3, #4
 8007af6:	b2da      	uxtb	r2, r3
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	735a      	strb	r2, [r3, #13]
  }
#endif /* LWIP_IGMP */


  /* PCB local address is IP_ANY_ADDR? */
  if (ip_addr_isany(&pcb->local_ip)) {
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <udp_sendto_if+0xd6>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d103      	bne.n	8007b12 <udp_sendto_if+0xde>
    /* use outgoing network interface IP address as source address */
    src_ip = &(netif->ip_addr);
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0c:	3304      	adds	r3, #4
 8007b0e:	61fb      	str	r3, [r7, #28]
 8007b10:	e012      	b.n	8007b38 <udp_sendto_if+0x104>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d00a      	beq.n	8007b34 <udp_sendto_if+0x100>
      /* local_ip doesn't match, drop the packet */
      if (q != p) {
 8007b1e:	69ba      	ldr	r2, [r7, #24]
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d004      	beq.n	8007b30 <udp_sendto_if+0xfc>
        /* free the header pbuf */
        pbuf_free(q);
 8007b26:	69b8      	ldr	r0, [r7, #24]
 8007b28:	f7ff fbbc 	bl	80072a4 <pbuf_free>
        q = NULL;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	61bb      	str	r3, [r7, #24]
        /* p is still referenced by the caller, and will live on */
      }
      return ERR_VAL;
 8007b30:	23fa      	movs	r3, #250	; 0xfa
 8007b32:	e025      	b.n	8007b80 <udp_sendto_if+0x14c>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &(pcb->local_ip);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	61fb      	str	r3, [r7, #28]
    NETIF_SET_HWADDRHINT(netif, NULL);
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = htons(q->tot_len);
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	891b      	ldrh	r3, [r3, #8]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fe fd6f 	bl	8006620 <lwip_htons>
 8007b42:	4603      	mov	r3, r0
 8007b44:	461a      	mov	r2, r3
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	809a      	strh	r2, [r3, #4]
#endif /* CHECKSUM_GEN_UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));
    /* output to IP */
    NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
    err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	7a9c      	ldrb	r4, [r3, #10]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	7a5b      	ldrb	r3, [r3, #9]
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	2311      	movs	r3, #17
 8007b56:	9301      	str	r3, [sp, #4]
 8007b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5a:	9302      	str	r3, [sp, #8]
 8007b5c:	69b8      	ldr	r0, [r7, #24]
 8007b5e:	69f9      	ldr	r1, [r7, #28]
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	4623      	mov	r3, r4
 8007b64:	f7fe fb10 	bl	8006188 <ip_output_if>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	75fb      	strb	r3, [r7, #23]
  }
  /* TODO: must this be increased even if error occured? */
  snmp_inc_udpoutdatagrams();

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8007b6c:	69ba      	ldr	r2, [r7, #24]
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d004      	beq.n	8007b7e <udp_sendto_if+0x14a>
    /* free the header pbuf */
    pbuf_free(q);
 8007b74:	69b8      	ldr	r0, [r7, #24]
 8007b76:	f7ff fb95 	bl	80072a4 <pbuf_free>
    q = NULL;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	61bb      	str	r3, [r7, #24]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8007b7e:	7dfb      	ldrb	r3, [r7, #23]
 8007b80:	b25b      	sxtb	r3, r3
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3724      	adds	r7, #36	; 0x24
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd90      	pop	{r4, r7, pc}
 8007b8a:	bf00      	nop

08007b8c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	4613      	mov	r3, r2
 8007b98:	80fb      	strh	r3, [r7, #6]

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8007b9e:	4b2a      	ldr	r3, [pc, #168]	; (8007c48 <udp_bind+0xbc>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	617b      	str	r3, [r7, #20]
 8007ba4:	e024      	b.n	8007bf0 <udp_bind+0x64>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d102      	bne.n	8007bb4 <udp_bind+0x28>
      /* pcb may occur at most once in active list */
      LWIP_ASSERT("rebind == 0", rebind == 0);
      /* pcb already in list, just rebind */
      rebind = 1;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	74fb      	strb	r3, [r7, #19]
 8007bb2:	e01a      	b.n	8007bea <udp_bind+0x5e>
             !ip_get_option(ipcb, SOF_REUSEADDR)) {
#else /* SO_REUSE */
    /* port matches that of PCB in list and REUSEADDR not set -> reject */
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	8a5b      	ldrh	r3, [r3, #18]
 8007bb8:	88fa      	ldrh	r2, [r7, #6]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d115      	bne.n	8007bea <udp_bind+0x5e>
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
 8007bbe:	697b      	ldr	r3, [r7, #20]
             !ip_get_option(ipcb, SOF_REUSEADDR)) {
#else /* SO_REUSE */
    /* port matches that of PCB in list and REUSEADDR not set -> reject */
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d010      	beq.n	8007be6 <udp_bind+0x5a>
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00c      	beq.n	8007be6 <udp_bind+0x5a>
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d009      	beq.n	8007be6 <udp_bind+0x5a>
           ip_addr_isany(ipaddr) ||
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d005      	beq.n	8007be6 <udp_bind+0x5a>
           ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	681b      	ldr	r3, [r3, #0]
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
           ip_addr_isany(ipaddr) ||
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d101      	bne.n	8007bea <udp_bind+0x5e>
           ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
        /* other PCB already binds to this local IP and port */
        LWIP_DEBUGF(UDP_DEBUG,
                    ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
        return ERR_USE;
 8007be6:	23f8      	movs	r3, #248	; 0xf8
 8007be8:	e028      	b.n	8007c3c <udp_bind+0xb0>
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	617b      	str	r3, [r7, #20]
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1d7      	bne.n	8007ba6 <udp_bind+0x1a>
        return ERR_USE;
      }
    }
  }

  ip_addr_set(&pcb->local_ip, ipaddr);
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d002      	beq.n	8007c02 <udp_bind+0x76>
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	e000      	b.n	8007c04 <udp_bind+0x78>
 8007c02:	2300      	movs	r3, #0
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	6013      	str	r3, [r2, #0]

  /* no port specified? */
  if (port == 0) {
 8007c08:	88fb      	ldrh	r3, [r7, #6]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d108      	bne.n	8007c20 <udp_bind+0x94>
    port = udp_new_port();
 8007c0e:	f7ff fdc1 	bl	8007794 <udp_new_port>
 8007c12:	4603      	mov	r3, r0
 8007c14:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8007c16:	88fb      	ldrh	r3, [r7, #6]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d101      	bne.n	8007c20 <udp_bind+0x94>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8007c1c:	23f8      	movs	r3, #248	; 0xf8
 8007c1e:	e00d      	b.n	8007c3c <udp_bind+0xb0>
    }
  }
  pcb->local_port = port;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	88fa      	ldrh	r2, [r7, #6]
 8007c24:	825a      	strh	r2, [r3, #18]
  snmp_insert_udpidx_tree(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8007c26:	7cfb      	ldrb	r3, [r7, #19]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d106      	bne.n	8007c3a <udp_bind+0xae>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8007c2c:	4b06      	ldr	r3, [pc, #24]	; (8007c48 <udp_bind+0xbc>)
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8007c34:	4a04      	ldr	r2, [pc, #16]	; (8007c48 <udp_bind+0xbc>)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
              ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));
  return ERR_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	b25b      	sxtb	r3, r3
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3718      	adds	r7, #24
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	1ffef78c 	.word	0x1ffef78c

08007c4c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8007c52:	2001      	movs	r0, #1
 8007c54:	f7fe ffa4 	bl	8006ba0 <memp_malloc>
 8007c58:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d007      	beq.n	8007c70 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	2100      	movs	r1, #0
 8007c64:	2224      	movs	r2, #36	; 0x24
 8007c66:	f000 ff5c 	bl	8008b22 <memset>
    pcb->ttl = UDP_TTL;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	22ff      	movs	r2, #255	; 0xff
 8007c6e:	729a      	strb	r2, [r3, #10]
  }
  return pcb;
 8007c70:	687b      	ldr	r3, [r7, #4]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3708      	adds	r7, #8
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop

08007c7c <ETH_LWIP_Init>:
  }
  return status;
}
#else
ETH_LWIP_STATUS_t ETH_LWIP_Init(ETH_LWIP_t* handle)
{
 8007c7c:	b590      	push	{r4, r7, lr}
 8007c7e:	b08b      	sub	sp, #44	; 0x2c
 8007c80:	af04      	add	r7, sp, #16
 8007c82:	6078      	str	r0, [r7, #4]
  ETH_LWIP_STATUS_t status = ETH_LWIP_STATUS_SUCCESS;
 8007c84:	2300      	movs	r3, #0
 8007c86:	75fb      	strb	r3, [r7, #23]

  struct ip_addr ipaddr;
  struct ip_addr netmask;
  struct ip_addr gw;

  if (handle->initialized == false)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	7a1b      	ldrb	r3, [r3, #8]
 8007c8c:	f083 0301 	eor.w	r3, r3, #1
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d032      	beq.n	8007cfc <ETH_LWIP_Init+0x80>
#if ((LWIP_DHCP == 1) || (LWIP_AUTOIP == 1))
    ipaddr.addr = 0;
    netmask.addr = 0;
    gw.addr = 0;
#else
    IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 8007c96:	4b1c      	ldr	r3, [pc, #112]	; (8007d08 <ETH_LWIP_Init+0x8c>)
 8007c98:	613b      	str	r3, [r7, #16]
    IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1 , NETMASK_ADDR2, NETMASK_ADDR3);
 8007c9a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007c9e:	60fb      	str	r3, [r7, #12]
    IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 8007ca0:	4b1a      	ldr	r3, [pc, #104]	; (8007d0c <ETH_LWIP_Init+0x90>)
 8007ca2:	60bb      	str	r3, [r7, #8]
#endif
    /*Initialize SYSTIMER APP*/
    status = (ETH_LWIP_STATUS_t)SYSTIMER_Init(&ETH_SYSTIMER_NAME);
 8007ca4:	481a      	ldr	r0, [pc, #104]	; (8007d10 <ETH_LWIP_Init+0x94>)
 8007ca6:	f7fb f821 	bl	8002cec <SYSTIMER_Init>
 8007caa:	4603      	mov	r3, r0
 8007cac:	75fb      	strb	r3, [r7, #23]

    lwip_init();
 8007cae:	f7fe fcf5 	bl	800669c <lwip_init>

    /* Adds network interface to the netif_list */
    (void)netif_add(&xnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007cb2:	f107 0110 	add.w	r1, r7, #16
 8007cb6:	f107 020c 	add.w	r2, r7, #12
 8007cba:	f107 0408 	add.w	r4, r7, #8
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	4b14      	ldr	r3, [pc, #80]	; (8007d14 <ETH_LWIP_Init+0x98>)
 8007cc4:	9301      	str	r3, [sp, #4]
 8007cc6:	4b14      	ldr	r3, [pc, #80]	; (8007d18 <ETH_LWIP_Init+0x9c>)
 8007cc8:	9302      	str	r3, [sp, #8]
 8007cca:	4814      	ldr	r0, [pc, #80]	; (8007d1c <ETH_LWIP_Init+0xa0>)
 8007ccc:	4623      	mov	r3, r4
 8007cce:	f7fe ffad 	bl	8006c2c <netif_add>

    /*  Registers the default network interface.*/
    netif_set_default(&xnetif);
 8007cd2:	4812      	ldr	r0, [pc, #72]	; (8007d1c <ETH_LWIP_Init+0xa0>)
 8007cd4:	f7ff f84e 	bl	8006d74 <netif_set_default>
    /* Initialize interface status change callback */
    netif_set_status_callback(&xnetif, ETH_NETIF_STATUS_CB_FUNCTION);
#endif

    /* device capabilities */
    xnetif.flags |= NETIF_FLAG_ETHARP;
 8007cd8:	4b10      	ldr	r3, [pc, #64]	; (8007d1c <ETH_LWIP_Init+0xa0>)
 8007cda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007cde:	f043 0320 	orr.w	r3, r3, #32
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	4b0d      	ldr	r3, [pc, #52]	; (8007d1c <ETH_LWIP_Init+0xa0>)
 8007ce6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#if LWIP_DHCP == 1
    /* Enable DHCP flag if DHCP is configured*/
    xnetif.flags |= NETIF_FLAG_DHCP;
#endif

    handle->initialized = true;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	721a      	strb	r2, [r3, #8]
    handle->eth_mac = &eth_mac;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a0b      	ldr	r2, [pc, #44]	; (8007d20 <ETH_LWIP_Init+0xa4>)
 8007cf4:	601a      	str	r2, [r3, #0]
    handle->xnetif = &xnetif;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a08      	ldr	r2, [pc, #32]	; (8007d1c <ETH_LWIP_Init+0xa0>)
 8007cfa:	605a      	str	r2, [r3, #4]
  }
  return status;
 8007cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	371c      	adds	r7, #28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd90      	pop	{r4, r7, pc}
 8007d06:	bf00      	nop
 8007d08:	190a0a0a 	.word	0x190a0a0a
 8007d0c:	4b0a0a0a 	.word	0x4b0a0a0a
 8007d10:	1ffe8b20 	.word	0x1ffe8b20
 8007d14:	08004819 	.word	0x08004819
 8007d18:	080054e5 	.word	0x080054e5
 8007d1c:	1ffe8a70 	.word	0x1ffe8a70
 8007d20:	1ffe8a40 	.word	0x1ffe8a40

08007d24 <XMC_ETH_PHY_IsDeviceIdValid>:
 * API IMPLEMENTATION
 *******************************************************************************/

 /* Check if the device identifier is valid */
static int32_t XMC_ETH_PHY_IsDeviceIdValid(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	70fb      	strb	r3, [r7, #3]
  uint16_t phy_id1;
  uint16_t phy_id2;
  XMC_ETH_PHY_STATUS_t status;

  /* Check Device Identification. */
  if ((XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR1, &phy_id1) == XMC_ETH_MAC_STATUS_OK) &&
 8007d30:	78fa      	ldrb	r2, [r7, #3]
 8007d32:	f107 030c 	add.w	r3, r7, #12
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	4611      	mov	r1, r2
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	f7fa f8a2 	bl	8001e84 <XMC_ETH_MAC_ReadPhy>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d11b      	bne.n	8007d7e <XMC_ETH_PHY_IsDeviceIdValid+0x5a>
      (XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR2, &phy_id2) == XMC_ETH_MAC_STATUS_OK))
 8007d46:	78fa      	ldrb	r2, [r7, #3]
 8007d48:	f107 030a 	add.w	r3, r7, #10
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	4611      	mov	r1, r2
 8007d50:	2203      	movs	r2, #3
 8007d52:	f7fa f897 	bl	8001e84 <XMC_ETH_MAC_ReadPhy>
 8007d56:	4603      	mov	r3, r0
  uint16_t phy_id1;
  uint16_t phy_id2;
  XMC_ETH_PHY_STATUS_t status;

  /* Check Device Identification. */
  if ((XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR1, &phy_id1) == XMC_ETH_MAC_STATUS_OK) &&
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d110      	bne.n	8007d7e <XMC_ETH_PHY_IsDeviceIdValid+0x5a>
      (XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR2, &phy_id2) == XMC_ETH_MAC_STATUS_OK))
  {
    if ((phy_id1 == PHY_ID1) && ((phy_id2 & (uint16_t)0xfff0) == PHY_ID2))
 8007d5c:	89bb      	ldrh	r3, [r7, #12]
 8007d5e:	2b22      	cmp	r3, #34	; 0x22
 8007d60:	d10a      	bne.n	8007d78 <XMC_ETH_PHY_IsDeviceIdValid+0x54>
 8007d62:	897b      	ldrh	r3, [r7, #10]
 8007d64:	461a      	mov	r2, r3
 8007d66:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	f5b3 5fab 	cmp.w	r3, #5472	; 0x1560
 8007d70:	d102      	bne.n	8007d78 <XMC_ETH_PHY_IsDeviceIdValid+0x54>
    {
      status = XMC_ETH_PHY_STATUS_OK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	73fb      	strb	r3, [r7, #15]

  /* Check Device Identification. */
  if ((XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR1, &phy_id1) == XMC_ETH_MAC_STATUS_OK) &&
      (XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR2, &phy_id2) == XMC_ETH_MAC_STATUS_OK))
  {
    if ((phy_id1 == PHY_ID1) && ((phy_id2 & (uint16_t)0xfff0) == PHY_ID2))
 8007d76:	e004      	b.n	8007d82 <XMC_ETH_PHY_IsDeviceIdValid+0x5e>
    {
      status = XMC_ETH_PHY_STATUS_OK;
    }
    else
    {
      status = XMC_ETH_PHY_STATUS_ERROR_DEVICE_ID;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	73fb      	strb	r3, [r7, #15]

  /* Check Device Identification. */
  if ((XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR1, &phy_id1) == XMC_ETH_MAC_STATUS_OK) &&
      (XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR2, &phy_id2) == XMC_ETH_MAC_STATUS_OK))
  {
    if ((phy_id1 == PHY_ID1) && ((phy_id2 & (uint16_t)0xfff0) == PHY_ID2))
 8007d7c:	e001      	b.n	8007d82 <XMC_ETH_PHY_IsDeviceIdValid+0x5e>
      status = XMC_ETH_PHY_STATUS_ERROR_DEVICE_ID;
    }
  }
  else
  {
    status = XMC_ETH_PHY_STATUS_ERROR_TIMEOUT;
 8007d7e:	2304      	movs	r3, #4
 8007d80:	73fb      	strb	r3, [r7, #15]
  }

  return (int32_t)status;
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <XMC_ETH_PHY_Init>:

/* PHY initialize */
int32_t XMC_ETH_PHY_Init(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr, const XMC_ETH_PHY_CONFIG_t *const config)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	460b      	mov	r3, r1
 8007d96:	607a      	str	r2, [r7, #4]
 8007d98:	72fb      	strb	r3, [r7, #11]
  int32_t status;
  uint16_t reg_bmcr;

  status = XMC_ETH_PHY_IsDeviceIdValid(eth_mac, phy_addr);
 8007d9a:	7afb      	ldrb	r3, [r7, #11]
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	f7ff ffc0 	bl	8007d24 <XMC_ETH_PHY_IsDeviceIdValid>
 8007da4:	6178      	str	r0, [r7, #20]

  if (status == (int32_t)XMC_ETH_PHY_STATUS_OK)
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d135      	bne.n	8007e18 <XMC_ETH_PHY_Init+0x8c>
  {
    status = XMC_ETH_PHY_Reset(eth_mac, phy_addr);
 8007dac:	7afb      	ldrb	r3, [r7, #11]
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	4619      	mov	r1, r3
 8007db2:	f000 f837 	bl	8007e24 <XMC_ETH_PHY_Reset>
 8007db6:	6178      	str	r0, [r7, #20]
    
    if (status == (int32_t)XMC_ETH_PHY_STATUS_OK)
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d12c      	bne.n	8007e18 <XMC_ETH_PHY_Init+0x8c>
    {
      reg_bmcr = 0U;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	827b      	strh	r3, [r7, #18]
      if (config->speed == XMC_ETH_LINK_SPEED_100M)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	885b      	ldrh	r3, [r3, #2]
 8007dc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dca:	d103      	bne.n	8007dd4 <XMC_ETH_PHY_Init+0x48>
      {
        reg_bmcr |= BMCR_SPEED_SEL;
 8007dcc:	8a7b      	ldrh	r3, [r7, #18]
 8007dce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007dd2:	827b      	strh	r3, [r7, #18]
      }

      if (config->duplex == XMC_ETH_LINK_DUPLEX_FULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	889b      	ldrh	r3, [r3, #4]
 8007dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ddc:	d103      	bne.n	8007de6 <XMC_ETH_PHY_Init+0x5a>
      {
        reg_bmcr |= BMCR_DUPLEX;
 8007dde:	8a7b      	ldrh	r3, [r7, #18]
 8007de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007de4:	827b      	strh	r3, [r7, #18]
      }

      if (config->enable_auto_negotiate == true)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	799b      	ldrb	r3, [r3, #6]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d003      	beq.n	8007df6 <XMC_ETH_PHY_Init+0x6a>
      {
        reg_bmcr |= BMCR_ANEG_EN;
 8007dee:	8a7b      	ldrh	r3, [r7, #18]
 8007df0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007df4:	827b      	strh	r3, [r7, #18]
      }

      if (config->enable_loop_back == true)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	79db      	ldrb	r3, [r3, #7]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <XMC_ETH_PHY_Init+0x7a>
      {
        reg_bmcr |= BMCR_LOOPBACK;
 8007dfe:	8a7b      	ldrh	r3, [r7, #18]
 8007e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e04:	827b      	strh	r3, [r7, #18]
      }

      status = (int32_t)XMC_ETH_MAC_WritePhy(eth_mac, phy_addr, REG_BMCR, reg_bmcr);
 8007e06:	7afa      	ldrb	r2, [r7, #11]
 8007e08:	8a7b      	ldrh	r3, [r7, #18]
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	4611      	mov	r1, r2
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f7fa f872 	bl	8001ef8 <XMC_ETH_MAC_WritePhy>
 8007e14:	4603      	mov	r3, r0
 8007e16:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8007e18:	697b      	ldr	r3, [r7, #20]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3718      	adds	r7, #24
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop

08007e24 <XMC_ETH_PHY_Reset>:

/* Reset */
int32_t XMC_ETH_PHY_Reset(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	70fb      	strb	r3, [r7, #3]
  int32_t status;
  uint16_t reg_bmcr;

  /* Reset PHY*/
  status = (int32_t)XMC_ETH_MAC_WritePhy(eth_mac, phy_addr, REG_BMCR, BMCR_RESET);
 8007e30:	78fb      	ldrb	r3, [r7, #3]
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	4619      	mov	r1, r3
 8007e36:	2200      	movs	r2, #0
 8007e38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e3c:	f7fa f85c 	bl	8001ef8 <XMC_ETH_MAC_WritePhy>
 8007e40:	4603      	mov	r3, r0
 8007e42:	60fb      	str	r3, [r7, #12]
  if (status == (int32_t)XMC_ETH_PHY_STATUS_OK)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10e      	bne.n	8007e68 <XMC_ETH_PHY_Reset+0x44>
  {      
    /* Wait for the reset to complete */
    do 
    {
      status = XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_BMCR, &reg_bmcr);
 8007e4a:	78fa      	ldrb	r2, [r7, #3]
 8007e4c:	f107 030a 	add.w	r3, r7, #10
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	4611      	mov	r1, r2
 8007e54:	2200      	movs	r2, #0
 8007e56:	f7fa f815 	bl	8001e84 <XMC_ETH_MAC_ReadPhy>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	60fb      	str	r3, [r7, #12]
    } while ((reg_bmcr & BMCR_RESET) != 0);
 8007e5e:	897b      	ldrh	r3, [r7, #10]
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	b21b      	sxth	r3, r3
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	dbf0      	blt.n	8007e4a <XMC_ETH_PHY_Reset+0x26>
  }
    
  return status;
 8007e68:	68fb      	ldr	r3, [r7, #12]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop

08007e74 <XMC_ETH_PHY_GetLinkStatus>:
  return status;
}

/* Get link status */
XMC_ETH_LINK_STATUS_t XMC_ETH_PHY_GetLinkStatus(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	70fb      	strb	r3, [r7, #3]
  uint16_t val;

  XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_BMSR, &val);
 8007e80:	78fa      	ldrb	r2, [r7, #3]
 8007e82:	f107 030e 	add.w	r3, r7, #14
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	4611      	mov	r1, r2
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f7f9 fffa 	bl	8001e84 <XMC_ETH_MAC_ReadPhy>

  return (XMC_ETH_LINK_STATUS_t)((val & BMSR_LINK_STAT) ? XMC_ETH_LINK_STATUS_UP : XMC_ETH_LINK_STATUS_DOWN);
 8007e90:	89fb      	ldrh	r3, [r7, #14]
 8007e92:	f003 0304 	and.w	r3, r3, #4
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d001      	beq.n	8007e9e <XMC_ETH_PHY_GetLinkStatus+0x2a>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e000      	b.n	8007ea0 <XMC_ETH_PHY_GetLinkStatus+0x2c>
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <XMC_ETH_PHY_GetLinkSpeed>:

/* Get link speed */
XMC_ETH_LINK_SPEED_t XMC_ETH_PHY_GetLinkSpeed(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	70fb      	strb	r3, [r7, #3]
  uint16_t val;

  XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYCTRL1, &val);
 8007eb4:	78fa      	ldrb	r2, [r7, #3]
 8007eb6:	f107 030e 	add.w	r3, r7, #14
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	4611      	mov	r1, r2
 8007ebe:	221e      	movs	r2, #30
 8007ec0:	f7f9 ffe0 	bl	8001e84 <XMC_ETH_MAC_ReadPhy>

  return (XMC_ETH_LINK_SPEED_t)(((val & PHYCTRL1_OPMODE_SPEED) - 1U) ? XMC_ETH_LINK_SPEED_100M : XMC_ETH_LINK_SPEED_10M);
 8007ec4:	89fb      	ldrh	r3, [r7, #14]
 8007ec6:	f003 0303 	and.w	r3, r3, #3
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d002      	beq.n	8007ed4 <XMC_ETH_PHY_GetLinkSpeed+0x2c>
 8007ece:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007ed2:	e000      	b.n	8007ed6 <XMC_ETH_PHY_GetLinkSpeed+0x2e>
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop

08007ee0 <XMC_ETH_PHY_GetLinkDuplex>:

/* Get link duplex settings */
XMC_ETH_LINK_DUPLEX_t XMC_ETH_PHY_GetLinkDuplex(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	460b      	mov	r3, r1
 8007eea:	70fb      	strb	r3, [r7, #3]
  uint16_t val;

  XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYCTRL1, &val);
 8007eec:	78fa      	ldrb	r2, [r7, #3]
 8007eee:	f107 030e 	add.w	r3, r7, #14
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	4611      	mov	r1, r2
 8007ef6:	221e      	movs	r2, #30
 8007ef8:	f7f9 ffc4 	bl	8001e84 <XMC_ETH_MAC_ReadPhy>

  return (XMC_ETH_LINK_DUPLEX_t)((val & PHYCTRL1_OPMODE_DUPLEX) ? XMC_ETH_LINK_DUPLEX_FULL : XMC_ETH_LINK_DUPLEX_HALF);
 8007efc:	89fb      	ldrh	r3, [r7, #14]
 8007efe:	f003 0304 	and.w	r3, r3, #4
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d002      	beq.n	8007f0c <XMC_ETH_PHY_GetLinkDuplex+0x2c>
 8007f06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f0a:	e000      	b.n	8007f0e <XMC_ETH_PHY_GetLinkDuplex+0x2e>
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop

08007f18 <XMC_ETH_PHY_IsAutonegotiationCompleted>:

bool XMC_ETH_PHY_IsAutonegotiationCompleted(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	460b      	mov	r3, r1
 8007f22:	70fb      	strb	r3, [r7, #3]
  uint16_t val;

  XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_BMSR, &val);
 8007f24:	78fa      	ldrb	r2, [r7, #3]
 8007f26:	f107 030e 	add.w	r3, r7, #14
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	4611      	mov	r1, r2
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f7f9 ffa8 	bl	8001e84 <XMC_ETH_MAC_ReadPhy>
  return ((val & BMSR_ANEG_COMPL) == BMSR_ANEG_COMPL);
 8007f34:	89fb      	ldrh	r3, [r7, #14]
 8007f36:	f003 0320 	and.w	r3, r3, #32
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	bf14      	ite	ne
 8007f3e:	2301      	movne	r3, #1
 8007f40:	2300      	moveq	r3, #0
 8007f42:	b2db      	uxtb	r3, r3
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6819      	ldr	r1, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	7c1a      	ldrb	r2, [r3, #16]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	3304      	adds	r3, #4
 8007f60:	4608      	mov	r0, r1
 8007f62:	4611      	mov	r1, r2
 8007f64:	461a      	mov	r2, r3
 8007f66:	f7f8 fa29 	bl	80003bc <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6819      	ldr	r1, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	7c1a      	ldrb	r2, [r3, #16]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	7c5b      	ldrb	r3, [r3, #17]
 8007f76:	4608      	mov	r0, r1
 8007f78:	4611      	mov	r1, r2
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	f7fa f8ee 	bl	800215c <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop

08007f8c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f003 0307 	and.w	r3, r3, #7
 8007f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007f9c:	4b0c      	ldr	r3, [pc, #48]	; (8007fd0 <NVIC_SetPriorityGrouping+0x44>)
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007fa8:	4013      	ands	r3, r2
 8007faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8007fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fbc:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8007fbe:	4a04      	ldr	r2, [pc, #16]	; (8007fd0 <NVIC_SetPriorityGrouping+0x44>)
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	60d3      	str	r3, [r2, #12]
}
 8007fc4:	3714      	adds	r7, #20
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	e000ed00 	.word	0xe000ed00

08007fd4 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8007fda:	2001      	movs	r0, #1
 8007fdc:	f7ff ffd6 	bl	8007f8c <NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007fe0:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8007fe2:	4b21      	ldr	r3, [pc, #132]	; (8008068 <SystemCoreSetup+0x94>)
 8007fe4:	4a21      	ldr	r2, [pc, #132]	; (800806c <SystemCoreSetup+0x98>)
 8007fe6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007fe8:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8007fec:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8007fee:	4a1e      	ldr	r2, [pc, #120]	; (8008068 <SystemCoreSetup+0x94>)
 8007ff0:	4b1d      	ldr	r3, [pc, #116]	; (8008068 <SystemCoreSetup+0x94>)
 8007ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ff6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ffa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8007ffe:	4b1c      	ldr	r3, [pc, #112]	; (8008070 <SystemCoreSetup+0x9c>)
 8008000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008004:	3314      	adds	r3, #20
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f023 030f 	bic.w	r3, r3, #15
 8008010:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f043 0304 	orr.w	r3, r3, #4
 8008018:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 800801a:	4b15      	ldr	r3, [pc, #84]	; (8008070 <SystemCoreSetup+0x9c>)
 800801c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008020:	3314      	adds	r3, #20
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8008026:	4a10      	ldr	r2, [pc, #64]	; (8008068 <SystemCoreSetup+0x94>)
 8008028:	4b0f      	ldr	r3, [pc, #60]	; (8008068 <SystemCoreSetup+0x94>)
 800802a:	695b      	ldr	r3, [r3, #20]
 800802c:	f023 0310 	bic.w	r3, r3, #16
 8008030:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8008032:	4a0d      	ldr	r2, [pc, #52]	; (8008068 <SystemCoreSetup+0x94>)
 8008034:	4b0c      	ldr	r3, [pc, #48]	; (8008068 <SystemCoreSetup+0x94>)
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	f023 0308 	bic.w	r3, r3, #8
 800803c:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800803e:	4a0a      	ldr	r2, [pc, #40]	; (8008068 <SystemCoreSetup+0x94>)
 8008040:	4b09      	ldr	r3, [pc, #36]	; (8008068 <SystemCoreSetup+0x94>)
 8008042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008048:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 800804a:	4a07      	ldr	r2, [pc, #28]	; (8008068 <SystemCoreSetup+0x94>)
 800804c:	4b06      	ldr	r3, [pc, #24]	; (8008068 <SystemCoreSetup+0x94>)
 800804e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008050:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008054:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8008056:	4a04      	ldr	r2, [pc, #16]	; (8008068 <SystemCoreSetup+0x94>)
 8008058:	4b03      	ldr	r3, [pc, #12]	; (8008068 <SystemCoreSetup+0x94>)
 800805a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008060:	6253      	str	r3, [r2, #36]	; 0x24
}
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	e000ed00 	.word	0xe000ed00
 800806c:	08000000 	.word	0x08000000
 8008070:	58001000 	.word	0x58001000

08008074 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 800807c:	2300      	movs	r3, #0
 800807e:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	701a      	strb	r2, [r3, #0]

  return (status);
 8008086:	7bfb      	ldrb	r3, [r7, #15]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3714      	adds	r7, #20
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8008094:	b480      	push	{r7}
 8008096:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8008098:	4b02      	ldr	r3, [pc, #8]	; (80080a4 <OSCHP_GetFrequency+0x10>)
}
 800809a:	4618      	mov	r0, r3
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	00b71b00 	.word	0x00b71b00

080080a8 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80080a8:	b5b0      	push	{r4, r5, r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 80080ae:	4b12      	ldr	r3, [pc, #72]	; (80080f8 <SystemCoreClockSetup+0x50>)
 80080b0:	1d3c      	adds	r4, r7, #4
 80080b2:	461d      	mov	r5, r3
 80080b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080b8:	682b      	ldr	r3, [r5, #0]
 80080ba:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 80080bc:	1d3b      	adds	r3, r7, #4
 80080be:	4618      	mov	r0, r3
 80080c0:	f7f8 fa4a 	bl	8000558 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 80080c4:	2000      	movs	r0, #0
 80080c6:	f7f8 fb63 	bl	8000790 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 80080ca:	2000      	movs	r0, #0
 80080cc:	f7f8 fb18 	bl	8000700 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 80080d0:	2004      	movs	r0, #4
 80080d2:	f7f8 fbe9 	bl	80008a8 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 80080d6:	2001      	movs	r0, #1
 80080d8:	2120      	movs	r1, #32
 80080da:	f7f8 fc71 	bl	80009c0 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 80080de:	2000      	movs	r0, #0
 80080e0:	f7f8 fb22 	bl	8000728 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 80080e4:	2001      	movs	r0, #1
 80080e6:	f7f8 fc07 	bl	80008f8 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 80080ea:	2001      	movs	r0, #1
 80080ec:	f7f8 fbf0 	bl	80008d0 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 80080f0:	3718      	adds	r7, #24
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bdb0      	pop	{r4, r5, r7, pc}
 80080f6:	bf00      	nop
 80080f8:	08008f10 	.word	0x08008f10

080080fc <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8008102:	2300      	movs	r3, #0
 8008104:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8008106:	4835      	ldr	r0, [pc, #212]	; (80081dc <DAVE_Init+0xe0>)
 8008108:	f7ff ffb4 	bl	8008074 <CLOCK_XMC4_Init>
 800810c:	4603      	mov	r3, r0
 800810e:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8008110:	79fb      	ldrb	r3, [r7, #7]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d104      	bne.n	8008120 <DAVE_Init+0x24>
  {
	 /**  Initialization of ETH_LWIP APP instance ETH_LWIP_0 */
	 init_status = (DAVE_STATUS_t)ETH_LWIP_Init(&ETH_LWIP_0); 
 8008116:	4832      	ldr	r0, [pc, #200]	; (80081e0 <DAVE_Init+0xe4>)
 8008118:	f7ff fdb0 	bl	8007c7c <ETH_LWIP_Init>
 800811c:	4603      	mov	r3, r0
 800811e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008120:	79fb      	ldrb	r3, [r7, #7]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d104      	bne.n	8008130 <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED_INDICATOR */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_INDICATOR); 
 8008126:	482f      	ldr	r0, [pc, #188]	; (80081e4 <DAVE_Init+0xe8>)
 8008128:	f7ff ff10 	bl	8007f4c <DIGITAL_IO_Init>
 800812c:	4603      	mov	r3, r0
 800812e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008130:	79fb      	ldrb	r3, [r7, #7]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d104      	bne.n	8008140 <DAVE_Init+0x44>
  {
	 /**  Initialization of SPI_MASTER APP instance SPI_MASTER_ADC */
	 init_status = (DAVE_STATUS_t)SPI_MASTER_Init(&SPI_MASTER_ADC); 
 8008136:	482c      	ldr	r0, [pc, #176]	; (80081e8 <DAVE_Init+0xec>)
 8008138:	f7fa ff62 	bl	8003000 <SPI_MASTER_Init>
 800813c:	4603      	mov	r3, r0
 800813e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008140:	79fb      	ldrb	r3, [r7, #7]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d104      	bne.n	8008150 <DAVE_Init+0x54>
  {
	 /**  Initialization of TIMER APP instance TIMER_TC */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_TC); 
 8008146:	4829      	ldr	r0, [pc, #164]	; (80081ec <DAVE_Init+0xf0>)
 8008148:	f7fa fa9a 	bl	8002680 <TIMER_Init>
 800814c:	4603      	mov	r3, r0
 800814e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008150:	79fb      	ldrb	r3, [r7, #7]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d104      	bne.n	8008160 <DAVE_Init+0x64>
  {
	 /**  Initialization of TIMER APP instance TIMER_TIMESTAMP */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_TIMESTAMP); 
 8008156:	4826      	ldr	r0, [pc, #152]	; (80081f0 <DAVE_Init+0xf4>)
 8008158:	f7fa fa92 	bl	8002680 <TIMER_Init>
 800815c:	4603      	mov	r3, r0
 800815e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008160:	79fb      	ldrb	r3, [r7, #7]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d104      	bne.n	8008170 <DAVE_Init+0x74>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance PIN_INTERRUPT_ADC0 */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&PIN_INTERRUPT_ADC0); 
 8008166:	4823      	ldr	r0, [pc, #140]	; (80081f4 <DAVE_Init+0xf8>)
 8008168:	f7fb fd0c 	bl	8003b84 <PIN_INTERRUPT_Init>
 800816c:	4603      	mov	r3, r0
 800816e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008170:	79fb      	ldrb	r3, [r7, #7]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d104      	bne.n	8008180 <DAVE_Init+0x84>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance PIN_INTERRUPT_ADC1 */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&PIN_INTERRUPT_ADC1); 
 8008176:	4820      	ldr	r0, [pc, #128]	; (80081f8 <DAVE_Init+0xfc>)
 8008178:	f7fb fd04 	bl	8003b84 <PIN_INTERRUPT_Init>
 800817c:	4603      	mov	r3, r0
 800817e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008180:	79fb      	ldrb	r3, [r7, #7]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d104      	bne.n	8008190 <DAVE_Init+0x94>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_TC */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_TC); 
 8008186:	481d      	ldr	r0, [pc, #116]	; (80081fc <DAVE_Init+0x100>)
 8008188:	f7fb fddc 	bl	8003d44 <INTERRUPT_Init>
 800818c:	4603      	mov	r3, r0
 800818e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008190:	79fb      	ldrb	r3, [r7, #7]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d104      	bne.n	80081a0 <DAVE_Init+0xa4>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_TIMESTAMP */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_TIMESTAMP); 
 8008196:	481a      	ldr	r0, [pc, #104]	; (8008200 <DAVE_Init+0x104>)
 8008198:	f7fb fdd4 	bl	8003d44 <INTERRUPT_Init>
 800819c:	4603      	mov	r3, r0
 800819e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80081a0:	79fb      	ldrb	r3, [r7, #7]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d104      	bne.n	80081b0 <DAVE_Init+0xb4>
  {
	 /**  Initialization of SPI_MASTER APP instance SPI_MASTER_TC */
	 init_status = (DAVE_STATUS_t)SPI_MASTER_Init(&SPI_MASTER_TC); 
 80081a6:	4817      	ldr	r0, [pc, #92]	; (8008204 <DAVE_Init+0x108>)
 80081a8:	f7fa ff2a 	bl	8003000 <SPI_MASTER_Init>
 80081ac:	4603      	mov	r3, r0
 80081ae:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80081b0:	79fb      	ldrb	r3, [r7, #7]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d104      	bne.n	80081c0 <DAVE_Init+0xc4>
  {
	 /**  Initialization of TIMER APP instance TIMER_ETH */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_ETH); 
 80081b6:	4814      	ldr	r0, [pc, #80]	; (8008208 <DAVE_Init+0x10c>)
 80081b8:	f7fa fa62 	bl	8002680 <TIMER_Init>
 80081bc:	4603      	mov	r3, r0
 80081be:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80081c0:	79fb      	ldrb	r3, [r7, #7]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d104      	bne.n	80081d0 <DAVE_Init+0xd4>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_ETH */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_ETH); 
 80081c6:	4811      	ldr	r0, [pc, #68]	; (800820c <DAVE_Init+0x110>)
 80081c8:	f7fb fdbc 	bl	8003d44 <INTERRUPT_Init>
 80081cc:	4603      	mov	r3, r0
 80081ce:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 80081d0:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80081d2:	4618      	mov	r0, r3
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	1ffef07c 	.word	0x1ffef07c
 80081e0:	1ffef070 	.word	0x1ffef070
 80081e4:	08008efc 	.word	0x08008efc
 80081e8:	1ffe8930 	.word	0x1ffe8930
 80081ec:	1ffe8808 	.word	0x1ffe8808
 80081f0:	1ffe8838 	.word	0x1ffe8838
 80081f4:	08008e74 	.word	0x08008e74
 80081f8:	08008e98 	.word	0x08008e98
 80081fc:	08008ebc 	.word	0x08008ebc
 8008200:	08008ec0 	.word	0x08008ec0
 8008204:	1ffe89ec 	.word	0x1ffe89ec
 8008208:	1ffe8868 	.word	0x1ffe8868
 800820c:	08008ec4 	.word	0x08008ec4

08008210 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	4603      	mov	r3, r0
 8008218:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800821a:	4908      	ldr	r1, [pc, #32]	; (800823c <NVIC_EnableIRQ+0x2c>)
 800821c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008220:	095b      	lsrs	r3, r3, #5
 8008222:	79fa      	ldrb	r2, [r7, #7]
 8008224:	f002 021f 	and.w	r2, r2, #31
 8008228:	2001      	movs	r0, #1
 800822a:	fa00 f202 	lsl.w	r2, r0, r2
 800822e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	e000e100 	.word	0xe000e100

08008240 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	460b      	mov	r3, r1
 800824a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 800824c:	78fb      	ldrb	r3, [r7, #3]
 800824e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8008252:	409a      	lsls	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	605a      	str	r2, [r3, #4]
}
 8008258:	370c      	adds	r7, #12
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop

08008264 <DIGITAL_IO_ToggleOutput>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
  XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	7c1b      	ldrb	r3, [r3, #16]
 8008274:	4610      	mov	r0, r2
 8008276:	4619      	mov	r1, r3
 8008278:	f7ff ffe2 	bl	8008240 <XMC_GPIO_ToggleOutput>
}
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop

08008284 <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	460b      	mov	r3, r1
 800828e:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008294:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
 8008298:	78fb      	ldrb	r3, [r7, #3]
 800829a:	3b01      	subs	r3, #1
 800829c:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 800829e:	431a      	orrs	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop

080082b0 <XMC_SPI_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSelect()
 */
__STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	460b      	mov	r3, r1
 80082ba:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetFrameLength(channel, frame_length);
 80082bc:	78fb      	ldrb	r3, [r7, #3]
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	4619      	mov	r1, r3
 80082c2:	f7ff ffdf 	bl	8008284 <XMC_USIC_CH_SetFrameLength>
}
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <SPI_MASTER_IsRxBusy>:
 *    return 1U;
 * }
 * @endcode<BR>
 */
__STATIC_INLINE bool SPI_MASTER_IsRxBusy(const SPI_MASTER_t* const handle)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("SPI_MASTER_IsTxBusy:handle NULL", (handle != NULL))
  return (handle->runtime->rx_busy);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	7fdb      	ldrb	r3, [r3, #31]
 80082da:	b2db      	uxtb	r3, r3
}
 80082dc:	4618      	mov	r0, r3
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <SPI_MASTER_EnableSlaveSelectSignal>:
 * }
 * @endcode<BR>
 *
 */
__STATIC_INLINE void SPI_MASTER_EnableSlaveSelectSignal(const SPI_MASTER_t* handle, const SPI_MASTER_SS_SIGNAL_t slave)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
                                                                               (slave == SPI_MASTER_SS_SIGNAL_4) ||
                                                                               (slave == SPI_MASTER_SS_SIGNAL_5) ||
                                                                               (slave == SPI_MASTER_SS_SIGNAL_6) ||
                                                                               (slave == SPI_MASTER_SS_SIGNAL_7))
                                                                              );
    XMC_SPI_CH_EnableSlaveSelect(handle->channel, handle->config->slave_select_pin_config[slave]->slave_select_ch);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6819      	ldr	r1, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	78fa      	ldrb	r2, [r7, #3]
 80082fe:	3214      	adds	r2, #20
 8008300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	4608      	mov	r0, r1
 8008308:	4619      	mov	r1, r3
 800830a:	f7f9 ff7d 	bl	8002208 <XMC_SPI_CH_EnableSlaveSelect>
}
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <PIN_INTERRUPT_Enable>:
 *    return (1);
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void PIN_INTERRUPT_Enable(const PIN_INTERRUPT_t *const handle)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_Enable: Handler null pointer", handle != NULL);
  NVIC_EnableIRQ(handle->IRQn);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	7f1b      	ldrb	r3, [r3, #28]
 8008320:	b25b      	sxtb	r3, r3
 8008322:	4618      	mov	r0, r3
 8008324:	f7ff ff74 	bl	8008210 <NVIC_EnableIRQ>
}
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop

08008330 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	b25b      	sxtb	r3, r3
 800833e:	4618      	mov	r0, r3
 8008340:	f7ff ff66 	bl	8008210 <NVIC_EnableIRQ>
}
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop

0800834c <local_udp_init>:
struct pbuf* p;
ip_addr_t dst_ip;
struct netif* netif;
//extern struct netif xnetif;

void local_udp_init() {
 800834c:	b580      	push	{r7, lr}
 800834e:	af00      	add	r7, sp, #0
	pcb = udp_new();
 8008350:	f7ff fc7c 	bl	8007c4c <udp_new>
 8008354:	4602      	mov	r2, r0
 8008356:	4b0d      	ldr	r3, [pc, #52]	; (800838c <local_udp_init+0x40>)
 8008358:	601a      	str	r2, [r3, #0]
	// our IP is set in the ETH DAVE app, we just want to bind to a port to send from
	udp_bind(pcb, IP_ADDR_ANY, SRC_PORT);
 800835a:	4b0c      	ldr	r3, [pc, #48]	; (800838c <local_udp_init+0x40>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4618      	mov	r0, r3
 8008360:	490b      	ldr	r1, [pc, #44]	; (8008390 <local_udp_init+0x44>)
 8008362:	f641 7290 	movw	r2, #8080	; 0x1f90
 8008366:	f7ff fc11 	bl	8007b8c <udp_bind>

	// we don't check this for errors rn since it should never fail
	ipaddr_aton(DST_IP, &dst_ip);
 800836a:	480a      	ldr	r0, [pc, #40]	; (8008394 <local_udp_init+0x48>)
 800836c:	490a      	ldr	r1, [pc, #40]	; (8008398 <local_udp_init+0x4c>)
 800836e:	f7fe f83b 	bl	80063e8 <ipaddr_aton>

	// allocate buffer at least the size of the largest packet we'll send
	if(sizeof(ADC_data_t) + sizeof(header_t) > sizeof(thermocouple_packet_t)) {
		p = pbuf_alloc(PBUF_TRANSPORT, sizeof(ADC_data_t) + sizeof(header_t), PBUF_RAM);
	} else {
		p = pbuf_alloc(PBUF_TRANSPORT, sizeof(thermocouple_packet_t), PBUF_RAM);
 8008372:	2000      	movs	r0, #0
 8008374:	211c      	movs	r1, #28
 8008376:	2200      	movs	r2, #0
 8008378:	f7fe fdd0 	bl	8006f1c <pbuf_alloc>
 800837c:	4602      	mov	r2, r0
 800837e:	4b07      	ldr	r3, [pc, #28]	; (800839c <local_udp_init+0x50>)
 8008380:	601a      	str	r2, [r3, #0]
	}

	// set the interface to send on
	// NOTE: all interfaces will appear "down" because we aren't using DHCP and it can't reach out the the default gateway
	netif = ETH_LWIP_0.xnetif;
 8008382:	4b07      	ldr	r3, [pc, #28]	; (80083a0 <local_udp_init+0x54>)
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	4a07      	ldr	r2, [pc, #28]	; (80083a4 <local_udp_init+0x58>)
 8008388:	6013      	str	r3, [r2, #0]

//	xnetif.flags |= NETIF_FLAG_UP | NETIF_FLAG_LINK_UP | NETIF_FLAG_ETHERNET | NETIF_FLAG_ETHARP;
}
 800838a:	bd80      	pop	{r7, pc}
 800838c:	1ffef7f8 	.word	0x1ffef7f8
 8008390:	08008ee0 	.word	0x08008ee0
 8008394:	08008f24 	.word	0x08008f24
 8008398:	1ffef7b8 	.word	0x1ffef7b8
 800839c:	1ffef794 	.word	0x1ffef794
 80083a0:	1ffef070 	.word	0x1ffef070
 80083a4:	1ffef790 	.word	0x1ffef790

080083a8 <send_data>:

void send_data(void* data, uint16_t size, uint16_t port) {
 80083a8:	b590      	push	{r4, r7, lr}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af02      	add	r7, sp, #8
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	807b      	strh	r3, [r7, #2]
 80083b4:	4613      	mov	r3, r2
 80083b6:	803b      	strh	r3, [r7, #0]
	memcpy(p->payload, data, size);
 80083b8:	4b10      	ldr	r3, [pc, #64]	; (80083fc <send_data+0x54>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	887b      	ldrh	r3, [r7, #2]
 80083c0:	4610      	mov	r0, r2
 80083c2:	6879      	ldr	r1, [r7, #4]
 80083c4:	461a      	mov	r2, r3
 80083c6:	f000 fba1 	bl	8008b0c <memcpy>
	p->len = p->tot_len = size;
 80083ca:	4b0c      	ldr	r3, [pc, #48]	; (80083fc <send_data+0x54>)
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	4b0b      	ldr	r3, [pc, #44]	; (80083fc <send_data+0x54>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	8879      	ldrh	r1, [r7, #2]
 80083d4:	8119      	strh	r1, [r3, #8]
 80083d6:	891b      	ldrh	r3, [r3, #8]
 80083d8:	8153      	strh	r3, [r2, #10]

	udp_sendto_if(pcb, p, &dst_ip, port, netif);
 80083da:	4b09      	ldr	r3, [pc, #36]	; (8008400 <send_data+0x58>)
 80083dc:	6819      	ldr	r1, [r3, #0]
 80083de:	4b07      	ldr	r3, [pc, #28]	; (80083fc <send_data+0x54>)
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	4b08      	ldr	r3, [pc, #32]	; (8008404 <send_data+0x5c>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	883c      	ldrh	r4, [r7, #0]
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	4608      	mov	r0, r1
 80083ec:	4611      	mov	r1, r2
 80083ee:	4a06      	ldr	r2, [pc, #24]	; (8008408 <send_data+0x60>)
 80083f0:	4623      	mov	r3, r4
 80083f2:	f7ff fb1f 	bl	8007a34 <udp_sendto_if>
}
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd90      	pop	{r4, r7, pc}
 80083fc:	1ffef794 	.word	0x1ffef794
 8008400:	1ffef7f8 	.word	0x1ffef7f8
 8008404:	1ffef790 	.word	0x1ffef790
 8008408:	1ffef7b8 	.word	0x1ffef7b8

0800840c <main>:
* <b>Details of function</b><br>
* This routine is the application entry point. It is invoked by the device startup code. It is responsible for
* invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder for user application
* code.
*/
int main(void) {
 800840c:	b590      	push	{r4, r7, lr}
 800840e:	b091      	sub	sp, #68	; 0x44
 8008410:	af00      	add	r7, sp, #0
	DAVE_STATUS_t status;
	uint32_t timer_systimer_lwip; 				// Timer for Ethernet Checkouts???
	uint8_t null[18] = {0x00}; 					// Null packet to "send" during ADC Transfers
 8008412:	f107 0310 	add.w	r3, r7, #16
 8008416:	2200      	movs	r2, #0
 8008418:	601a      	str	r2, [r3, #0]
 800841a:	3304      	adds	r3, #4
 800841c:	2200      	movs	r2, #0
 800841e:	601a      	str	r2, [r3, #0]
 8008420:	3304      	adds	r3, #4
 8008422:	2200      	movs	r2, #0
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	3304      	adds	r3, #4
 8008428:	2200      	movs	r2, #0
 800842a:	601a      	str	r2, [r3, #0]
 800842c:	3304      	adds	r3, #4
 800842e:	2200      	movs	r2, #0
 8008430:	801a      	strh	r2, [r3, #0]
 8008432:	3302      	adds	r3, #2

	// DAVE STARTUP
	status = DAVE_Init(); /* Initialization of DAVE APPs  */
 8008434:	f7ff fe62 	bl	80080fc <DAVE_Init>
 8008438:	4603      	mov	r3, r0
 800843a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	if(status != DAVE_STATUS_SUCCESS) {
 800843e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008442:	2b00      	cmp	r3, #0
 8008444:	d000      	beq.n	8008448 <main+0x3c>
		/* Placeholder for error handler code.
		* The while loop below can be replaced with an user error handler. */
		XMC_DEBUG("DAVE APPs initialization failed\n");
		while(1) {};
 8008446:	e7fe      	b.n	8008446 <main+0x3a>
	}

	// Initialize UDP interface
	local_udp_init();
 8008448:	f7ff ff80 	bl	800834c <local_udp_init>

	//Initialize ADCs
	//Unlock / Config
	// ADC0
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_ADC,  SPI_MASTER_SS_SIGNAL_0); // Change slave
 800844c:	4886      	ldr	r0, [pc, #536]	; (8008668 <main+0x25c>)
 800844e:	2100      	movs	r1, #0
 8008450:	f7ff ff4a 	bl	80082e8 <SPI_MASTER_EnableSlaveSelectSignal>
	for(int i = 0; i < 9000; i++) {}; // Dumb Delay (Remove?)
 8008454:	2300      	movs	r3, #0
 8008456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008458:	e002      	b.n	8008460 <main+0x54>
 800845a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800845c:	3301      	adds	r3, #1
 800845e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008462:	f242 3227 	movw	r2, #8999	; 0x2327
 8008466:	4293      	cmp	r3, r2
 8008468:	ddf7      	ble.n	800845a <main+0x4e>
	adc_register_config();
 800846a:	f000 f995 	bl	8008798 <adc_register_config>

	// ADC 1
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_ADC,  SPI_MASTER_SS_SIGNAL_1); // Change slave
 800846e:	487e      	ldr	r0, [pc, #504]	; (8008668 <main+0x25c>)
 8008470:	2101      	movs	r1, #1
 8008472:	f7ff ff39 	bl	80082e8 <SPI_MASTER_EnableSlaveSelectSignal>
	for(int i = 0; i < 9000; i++) {}; // Dumb Delay (Remove?)
 8008476:	2300      	movs	r3, #0
 8008478:	63bb      	str	r3, [r7, #56]	; 0x38
 800847a:	e002      	b.n	8008482 <main+0x76>
 800847c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847e:	3301      	adds	r3, #1
 8008480:	63bb      	str	r3, [r7, #56]	; 0x38
 8008482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008484:	f242 3227 	movw	r2, #8999	; 0x2327
 8008488:	4293      	cmp	r3, r2
 800848a:	ddf7      	ble.n	800847c <main+0x70>
	adc_register_config();
 800848c:	f000 f984 	bl	8008798 <adc_register_config>

	// Turn on ADCs
	// ADC0
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_ADC,  SPI_MASTER_SS_SIGNAL_0); // Change slave
 8008490:	4875      	ldr	r0, [pc, #468]	; (8008668 <main+0x25c>)
 8008492:	2100      	movs	r1, #0
 8008494:	f7ff ff28 	bl	80082e8 <SPI_MASTER_EnableSlaveSelectSignal>
	for(int i = 0; i < 9000; i++) {}; // Dumb Delay (Remove?)
 8008498:	2300      	movs	r3, #0
 800849a:	637b      	str	r3, [r7, #52]	; 0x34
 800849c:	e002      	b.n	80084a4 <main+0x98>
 800849e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a0:	3301      	adds	r3, #1
 80084a2:	637b      	str	r3, [r7, #52]	; 0x34
 80084a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a6:	f242 3227 	movw	r2, #8999	; 0x2327
 80084aa:	4293      	cmp	r3, r2
 80084ac:	ddf7      	ble.n	800849e <main+0x92>
	xmc_ADC_setup();
 80084ae:	f000 fa81 	bl	80089b4 <xmc_ADC_setup>

	// ADC 1
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_ADC,  SPI_MASTER_SS_SIGNAL_1); // Change slave
 80084b2:	486d      	ldr	r0, [pc, #436]	; (8008668 <main+0x25c>)
 80084b4:	2101      	movs	r1, #1
 80084b6:	f7ff ff17 	bl	80082e8 <SPI_MASTER_EnableSlaveSelectSignal>
	for (int i = 0; i < 9000; i++) {}; // Dumb Delay (Remove?)
 80084ba:	2300      	movs	r3, #0
 80084bc:	633b      	str	r3, [r7, #48]	; 0x30
 80084be:	e002      	b.n	80084c6 <main+0xba>
 80084c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c2:	3301      	adds	r3, #1
 80084c4:	633b      	str	r3, [r7, #48]	; 0x30
 80084c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c8:	f242 3227 	movw	r2, #8999	; 0x2327
 80084cc:	4293      	cmp	r3, r2
 80084ce:	ddf7      	ble.n	80084c0 <main+0xb4>
	xmc_ADC_setup();
 80084d0:	f000 fa70 	bl	80089b4 <xmc_ADC_setup>

	// RETURN TO ADC0
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_ADC,  SPI_MASTER_SS_SIGNAL_0); // Change slave
 80084d4:	4864      	ldr	r0, [pc, #400]	; (8008668 <main+0x25c>)
 80084d6:	2100      	movs	r1, #0
 80084d8:	f7ff ff06 	bl	80082e8 <SPI_MASTER_EnableSlaveSelectSignal>
	for(int i = 0; i < 9000; i++) {}; // Dumb Delay (Remove?)
 80084dc:	2300      	movs	r3, #0
 80084de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084e0:	e002      	b.n	80084e8 <main+0xdc>
 80084e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e4:	3301      	adds	r3, #1
 80084e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ea:	f242 3227 	movw	r2, #8999	; 0x2327
 80084ee:	4293      	cmp	r3, r2
 80084f0:	ddf7      	ble.n	80084e2 <main+0xd6>


	// Initialize and start lwip system timer
	// don't need for UDP (no packets timeout, don't need to ask lwip to check)
	timer_systimer_lwip = SYSTIMER_CreateTimer(10000, SYSTIMER_MODE_PERIODIC, (SYSTIMER_CALLBACK_t)sys_check_timeouts, 0); // WAS  //1000000
 80084f2:	f242 7010 	movw	r0, #10000	; 0x2710
 80084f6:	2101      	movs	r1, #1
 80084f8:	4a5c      	ldr	r2, [pc, #368]	; (800866c <main+0x260>)
 80084fa:	2300      	movs	r3, #0
 80084fc:	f7fa fc2e 	bl	8002d5c <SYSTIMER_CreateTimer>
 8008500:	6278      	str	r0, [r7, #36]	; 0x24
	SYSTIMER_StartTimer(timer_systimer_lwip);
 8008502:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008504:	f7fa fcc8 	bl	8002e98 <SYSTIMER_StartTimer>

	// Enable interrupts once configuration complete
	PIN_INTERRUPT_Enable(&PIN_INTERRUPT_ADC0); 	// ADC0 DRDY Interrupt
 8008508:	4859      	ldr	r0, [pc, #356]	; (8008670 <main+0x264>)
 800850a:	f7ff ff03 	bl	8008314 <PIN_INTERRUPT_Enable>
	PIN_INTERRUPT_Enable(&PIN_INTERRUPT_ADC1); 	// ADC1 DRDY Interrupt
 800850e:	4859      	ldr	r0, [pc, #356]	; (8008674 <main+0x268>)
 8008510:	f7ff ff00 	bl	8008314 <PIN_INTERRUPT_Enable>
	INTERRUPT_Enable(&INTERRUPT_TC);			// Thermocouple Timer Interrupt
 8008514:	4858      	ldr	r0, [pc, #352]	; (8008678 <main+0x26c>)
 8008516:	f7ff ff0b 	bl	8008330 <INTERRUPT_Enable>
	INTERRUPT_Enable(&INTERRUPT_TIMESTAMP);		// Millisecond Timestamping Interrupt Enabled
 800851a:	4858      	ldr	r0, [pc, #352]	; (800867c <main+0x270>)
 800851c:	f7ff ff08 	bl	8008330 <INTERRUPT_Enable>

//	INTERRUPT_Enable(&INTERRUPT_ETH);			// Ethernet Timer Interrupt -- NOT INTENDED FOR FINAL CODE XXXXXXXXXXXXXXXXXXXXXXXXXX

	enum XMC_SPI_CH_SLAVE_SELECT slave_select[NUM_TC] = {SPI_MASTER_SS_SIGNAL_0, SPI_MASTER_SS_SIGNAL_1, SPI_MASTER_SS_SIGNAL_2, SPI_MASTER_SS_SIGNAL_3};
 8008520:	4b57      	ldr	r3, [pc, #348]	; (8008680 <main+0x274>)
 8008522:	463c      	mov	r4, r7
 8008524:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008526:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t tc_index = 0;
 800852a:	2300      	movs	r3, #0
 800852c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	while(1) {
		// Thermocouple SPI Transfers
		if(read_tc == 1){ // Does timer say we should transfer?
 8008530:	4b54      	ldr	r3, [pc, #336]	; (8008684 <main+0x278>)
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d13f      	bne.n	80085b8 <main+0x1ac>
			if (!SPI_MASTER_IsRxBusy(&SPI_MASTER_TC)) { // Check if SPI is not busy
 8008538:	4853      	ldr	r0, [pc, #332]	; (8008688 <main+0x27c>)
 800853a:	f7ff fec7 	bl	80082cc <SPI_MASTER_IsRxBusy>
 800853e:	4603      	mov	r3, r0
 8008540:	f083 0301 	eor.w	r3, r3, #1
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	d036      	beq.n	80085b8 <main+0x1ac>
				SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_TC, slave_select[tc_index]);
 800854a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008554:	4413      	add	r3, r2
 8008556:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800855a:	b2db      	uxtb	r3, r3
 800855c:	484a      	ldr	r0, [pc, #296]	; (8008688 <main+0x27c>)
 800855e:	4619      	mov	r1, r3
 8008560:	f7ff fec2 	bl	80082e8 <SPI_MASTER_EnableSlaveSelectSignal>
				SPI_MASTER_Receive(&SPI_MASTER_TC, (uint8_t*)&(TC_buff.data[tc_index]), sizeof(uint32_t));
 8008564:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008568:	3302      	adds	r3, #2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4a47      	ldr	r2, [pc, #284]	; (800868c <main+0x280>)
 800856e:	4413      	add	r3, r2
 8008570:	3304      	adds	r3, #4
 8008572:	4845      	ldr	r0, [pc, #276]	; (8008688 <main+0x27c>)
 8008574:	4619      	mov	r1, r3
 8008576:	2204      	movs	r2, #4
 8008578:	f7fa fd6c 	bl	8003054 <SPI_MASTER_Receive>

				tc_index++;
 800857c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008580:	3301      	adds	r3, #1
 8008582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

				if(tc_index == NUM_TC) {
 8008586:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800858a:	2b04      	cmp	r3, #4
 800858c:	d114      	bne.n	80085b8 <main+0x1ac>
					tc_index = 0;
 800858e:	2300      	movs	r3, #0
 8008590:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					read_tc = 0;
 8008594:	4b3b      	ldr	r3, [pc, #236]	; (8008684 <main+0x278>)
 8008596:	2200      	movs	r2, #0
 8008598:	701a      	strb	r2, [r3, #0]

					// Send out TC packet
					TC_buff.header.seq_num = sequence_number;
 800859a:	4b3d      	ldr	r3, [pc, #244]	; (8008690 <main+0x284>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a3b      	ldr	r2, [pc, #236]	; (800868c <main+0x280>)
 80085a0:	6093      	str	r3, [r2, #8]
					sequence_number++;
 80085a2:	4b3b      	ldr	r3, [pc, #236]	; (8008690 <main+0x284>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	3301      	adds	r3, #1
 80085a8:	4a39      	ldr	r2, [pc, #228]	; (8008690 <main+0x284>)
 80085aa:	6013      	str	r3, [r2, #0]
					send_data((void*)&TC_buff, sizeof(thermocouple_packet_t), TC_PORT);
 80085ac:	4837      	ldr	r0, [pc, #220]	; (800868c <main+0x280>)
 80085ae:	211c      	movs	r1, #28
 80085b0:	f641 7292 	movw	r2, #8082	; 0x1f92
 80085b4:	f7ff fef8 	bl	80083a8 <send_data>
		// ADC SPI Transfers
		// NEED TO SET SOME SORT OF PRIORITY HERE, WHERE WE NEED TO HAVE ADC1 HAPPEN, EVEN IF ADC1 IS READY -- NOT SURE IF THIS IS A REAL PROBLEM ONCE WE ACTUALLY HAVE INTERRUPTS INSTEAD OF READ0 and READ1 AUTO-SET TO 1 AT BEGINNING OF LOOP
		// NOTE: I HAD TO MAKE THE FIFO IN THE DAVE APP 32, NOT 16, BECAUSE 16 WOULD NOT HOLD ENOUGH DATA AND THE SPI TRANSFER WOULD SPLIT

		// ADC0 SPI Transfers
		if (read_adc0) { // Flag set
 80085b8:	4b36      	ldr	r3, [pc, #216]	; (8008694 <main+0x288>)
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d026      	beq.n	800860e <main+0x202>
			if (!SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)) { // SPI not already in transaction
 80085c0:	4829      	ldr	r0, [pc, #164]	; (8008668 <main+0x25c>)
 80085c2:	f7ff fe83 	bl	80082cc <SPI_MASTER_IsRxBusy>
 80085c6:	4603      	mov	r3, r0
 80085c8:	f083 0301 	eor.w	r3, r3, #1
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d01d      	beq.n	800860e <main+0x202>
				SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_ADC, SPI_MASTER_SS_SIGNAL_0); // Change to ADC0
 80085d2:	4825      	ldr	r0, [pc, #148]	; (8008668 <main+0x25c>)
 80085d4:	2100      	movs	r1, #0
 80085d6:	f7ff fe87 	bl	80082e8 <SPI_MASTER_EnableSlaveSelectSignal>
				SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, (uint8_t*)&ADC0_buff.data, sizeof(ADC_data_t) + 3);
 80085da:	f107 0310 	add.w	r3, r7, #16
 80085de:	4822      	ldr	r0, [pc, #136]	; (8008668 <main+0x25c>)
 80085e0:	4619      	mov	r1, r3
 80085e2:	4a2d      	ldr	r2, [pc, #180]	; (8008698 <main+0x28c>)
 80085e4:	2312      	movs	r3, #18
 80085e6:	f7fa fe79 	bl	80032dc <SPI_MASTER_Transfer>
				read_adc0 = 0; // Reset Flag
 80085ea:	4b2a      	ldr	r3, [pc, #168]	; (8008694 <main+0x288>)
 80085ec:	2200      	movs	r2, #0
 80085ee:	701a      	strb	r2, [r3, #0]

				// send out ADC0 packet
				ADC0_buff.header.seq_num = sequence_number;
 80085f0:	4b27      	ldr	r3, [pc, #156]	; (8008690 <main+0x284>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a29      	ldr	r2, [pc, #164]	; (800869c <main+0x290>)
 80085f6:	6093      	str	r3, [r2, #8]
				sequence_number++;
 80085f8:	4b25      	ldr	r3, [pc, #148]	; (8008690 <main+0x284>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	3301      	adds	r3, #1
 80085fe:	4a24      	ldr	r2, [pc, #144]	; (8008690 <main+0x284>)
 8008600:	6013      	str	r3, [r2, #0]
				// be careful not to send zeros
				send_data((void*)&ADC0_buff, sizeof(ADC_packet_t) + sizeof(header_t), ADC0_PORT);
 8008602:	4826      	ldr	r0, [pc, #152]	; (800869c <main+0x290>)
 8008604:	212a      	movs	r1, #42	; 0x2a
 8008606:	f641 7290 	movw	r2, #8080	; 0x1f90
 800860a:	f7ff fecd 	bl	80083a8 <send_data>
			}
		}

		// ADC1 SPI Transfers
		if (read_adc1) {
 800860e:	4b24      	ldr	r3, [pc, #144]	; (80086a0 <main+0x294>)
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d026      	beq.n	8008664 <main+0x258>
			if (!SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)) { // SPI not already in transaction
 8008616:	4814      	ldr	r0, [pc, #80]	; (8008668 <main+0x25c>)
 8008618:	f7ff fe58 	bl	80082cc <SPI_MASTER_IsRxBusy>
 800861c:	4603      	mov	r3, r0
 800861e:	f083 0301 	eor.w	r3, r3, #1
 8008622:	b2db      	uxtb	r3, r3
 8008624:	2b00      	cmp	r3, #0
 8008626:	d01d      	beq.n	8008664 <main+0x258>
				SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_ADC, SPI_MASTER_SS_SIGNAL_1); // Change to ADC1
 8008628:	480f      	ldr	r0, [pc, #60]	; (8008668 <main+0x25c>)
 800862a:	2101      	movs	r1, #1
 800862c:	f7ff fe5c 	bl	80082e8 <SPI_MASTER_EnableSlaveSelectSignal>
				SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, (uint8_t*)&ADC0_buff.data, sizeof(ADC_data_t) + 3);
 8008630:	f107 0310 	add.w	r3, r7, #16
 8008634:	480c      	ldr	r0, [pc, #48]	; (8008668 <main+0x25c>)
 8008636:	4619      	mov	r1, r3
 8008638:	4a17      	ldr	r2, [pc, #92]	; (8008698 <main+0x28c>)
 800863a:	2312      	movs	r3, #18
 800863c:	f7fa fe4e 	bl	80032dc <SPI_MASTER_Transfer>
				read_adc1 = 0; // Reset Flag
 8008640:	4b17      	ldr	r3, [pc, #92]	; (80086a0 <main+0x294>)
 8008642:	2200      	movs	r2, #0
 8008644:	701a      	strb	r2, [r3, #0]

				// send out ADC0 packet
				ADC1_buff.header.seq_num = sequence_number;
 8008646:	4b12      	ldr	r3, [pc, #72]	; (8008690 <main+0x284>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a16      	ldr	r2, [pc, #88]	; (80086a4 <main+0x298>)
 800864c:	6093      	str	r3, [r2, #8]
				sequence_number++;
 800864e:	4b10      	ldr	r3, [pc, #64]	; (8008690 <main+0x284>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	3301      	adds	r3, #1
 8008654:	4a0e      	ldr	r2, [pc, #56]	; (8008690 <main+0x284>)
 8008656:	6013      	str	r3, [r2, #0]
				// be careful not to send zeros
				send_data((void*)&ADC1_buff, sizeof(ADC_packet_t) + sizeof(header_t), ADC1_PORT);
 8008658:	4812      	ldr	r0, [pc, #72]	; (80086a4 <main+0x298>)
 800865a:	212a      	movs	r1, #42	; 0x2a
 800865c:	f641 7291 	movw	r2, #8081	; 0x1f91
 8008660:	f7ff fea2 	bl	80083a8 <send_data>
			}
		}
	} // End While Loop
 8008664:	e764      	b.n	8008530 <main+0x124>
 8008666:	bf00      	nop
 8008668:	1ffe8930 	.word	0x1ffe8930
 800866c:	080076fd 	.word	0x080076fd
 8008670:	08008e74 	.word	0x08008e74
 8008674:	08008e98 	.word	0x08008e98
 8008678:	08008ebc 	.word	0x08008ebc
 800867c:	08008ec0 	.word	0x08008ec0
 8008680:	08008f30 	.word	0x08008f30
 8008684:	1ffef088 	.word	0x1ffef088
 8008688:	1ffe89ec 	.word	0x1ffe89ec
 800868c:	1ffef7bc 	.word	0x1ffef7bc
 8008690:	1ffef080 	.word	0x1ffef080
 8008694:	1ffef089 	.word	0x1ffef089
 8008698:	1ffef7e4 	.word	0x1ffef7e4
 800869c:	1ffef7d8 	.word	0x1ffef7d8
 80086a0:	1ffef08a 	.word	0x1ffef08a
 80086a4:	1ffef798 	.word	0x1ffef798

080086a8 <CCU43_0_IRQHandler>:


// INTERRUPTS /////////////////////////////////////////////////////////////////////////////////////

	// Timer configured with 1000us period = 1ms
		void TimeStampIRQ(void) {
 80086a8:	b580      	push	{r7, lr}
 80086aa:	af00      	add	r7, sp, #0
			TIMER_ClearEvent(&TIMER_TIMESTAMP); // Clear Event Flag
 80086ac:	4804      	ldr	r0, [pc, #16]	; (80086c0 <CCU43_0_IRQHandler+0x18>)
 80086ae:	f7fa f805 	bl	80026bc <TIMER_ClearEvent>
			millisec++; 						// New device uptime
 80086b2:	4b04      	ldr	r3, [pc, #16]	; (80086c4 <CCU43_0_IRQHandler+0x1c>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	3301      	adds	r3, #1
 80086b8:	4a02      	ldr	r2, [pc, #8]	; (80086c4 <CCU43_0_IRQHandler+0x1c>)
 80086ba:	6013      	str	r3, [r2, #0]
			return;
 80086bc:	bf00      	nop
		}
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	1ffe8838 	.word	0x1ffe8838
 80086c4:	1ffef084 	.word	0x1ffef084

080086c8 <CCU43_3_IRQHandler>:

	// Thermocouple trigger -- Timer configured with 100000us period = 100ms = 10Hz
		void TCIRQ(void) {
 80086c8:	b580      	push	{r7, lr}
 80086ca:	af00      	add	r7, sp, #0
			TIMER_ClearEvent(&TIMER_TC);		// Clear Event Flag
 80086cc:	480a      	ldr	r0, [pc, #40]	; (80086f8 <CCU43_3_IRQHandler+0x30>)
 80086ce:	f7f9 fff5 	bl	80026bc <TIMER_ClearEvent>
//			TC_us = TIMER_GetTime(&TIMER_TIMESTAMP) / 100; // Get microseconds from timer -- DAVE TIMER APP returns (us * 100);
//			TC_ms = millisec;	// Grab milliseconds for capture time
			TC_buff.header.ms = millisec;
 80086d2:	4b0a      	ldr	r3, [pc, #40]	; (80086fc <CCU43_3_IRQHandler+0x34>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a0a      	ldr	r2, [pc, #40]	; (8008700 <CCU43_3_IRQHandler+0x38>)
 80086d8:	6013      	str	r3, [r2, #0]
			TC_buff.header.us = TIMER_GetTime(&TIMER_TIMESTAMP) / 100;
 80086da:	480a      	ldr	r0, [pc, #40]	; (8008704 <CCU43_3_IRQHandler+0x3c>)
 80086dc:	f7fa f800 	bl	80026e0 <TIMER_GetTime>
 80086e0:	4602      	mov	r2, r0
 80086e2:	4b09      	ldr	r3, [pc, #36]	; (8008708 <CCU43_3_IRQHandler+0x40>)
 80086e4:	fba3 2302 	umull	r2, r3, r3, r2
 80086e8:	095b      	lsrs	r3, r3, #5
 80086ea:	4a05      	ldr	r2, [pc, #20]	; (8008700 <CCU43_3_IRQHandler+0x38>)
 80086ec:	6053      	str	r3, [r2, #4]
			read_tc = 1;		// Set flag to read Thermocouples
 80086ee:	4b07      	ldr	r3, [pc, #28]	; (800870c <CCU43_3_IRQHandler+0x44>)
 80086f0:	2201      	movs	r2, #1
 80086f2:	701a      	strb	r2, [r3, #0]
		}
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	1ffe8808 	.word	0x1ffe8808
 80086fc:	1ffef084 	.word	0x1ffef084
 8008700:	1ffef7bc 	.word	0x1ffef7bc
 8008704:	1ffe8838 	.word	0x1ffe8838
 8008708:	51eb851f 	.word	0x51eb851f
 800870c:	1ffef088 	.word	0x1ffef088

08008710 <ERU0_3_IRQHandler>:


	// Data Ready Interrupt for ADC0
		void ADC0_DRDY_INT(){
 8008710:	b580      	push	{r7, lr}
 8008712:	af00      	add	r7, sp, #0
//			ADC0_us = TIMER_GetTime(&TIMER_TIMESTAMP) / 100; // Get microseconds from timer -- DAVE TIMER APP returns (us * 100);
//			ADC0_ms = millisec;	// Grab milliseconds for capture time
			ADC0_buff.header.ms = millisec;
 8008714:	4b08      	ldr	r3, [pc, #32]	; (8008738 <ERU0_3_IRQHandler+0x28>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a08      	ldr	r2, [pc, #32]	; (800873c <ERU0_3_IRQHandler+0x2c>)
 800871a:	6013      	str	r3, [r2, #0]
			ADC0_buff.header.us = TIMER_GetTime(&TIMER_TIMESTAMP) / 100;
 800871c:	4808      	ldr	r0, [pc, #32]	; (8008740 <ERU0_3_IRQHandler+0x30>)
 800871e:	f7f9 ffdf 	bl	80026e0 <TIMER_GetTime>
 8008722:	4602      	mov	r2, r0
 8008724:	4b07      	ldr	r3, [pc, #28]	; (8008744 <ERU0_3_IRQHandler+0x34>)
 8008726:	fba3 2302 	umull	r2, r3, r3, r2
 800872a:	095b      	lsrs	r3, r3, #5
 800872c:	4a03      	ldr	r2, [pc, #12]	; (800873c <ERU0_3_IRQHandler+0x2c>)
 800872e:	6053      	str	r3, [r2, #4]
			read_adc0 = 1; // Set flag to read ADC0
 8008730:	4b05      	ldr	r3, [pc, #20]	; (8008748 <ERU0_3_IRQHandler+0x38>)
 8008732:	2201      	movs	r2, #1
 8008734:	701a      	strb	r2, [r3, #0]
		}
 8008736:	bd80      	pop	{r7, pc}
 8008738:	1ffef084 	.word	0x1ffef084
 800873c:	1ffef7d8 	.word	0x1ffef7d8
 8008740:	1ffe8838 	.word	0x1ffe8838
 8008744:	51eb851f 	.word	0x51eb851f
 8008748:	1ffef089 	.word	0x1ffef089

0800874c <ERU0_2_IRQHandler>:

	// Data Ready Interrupt for ADC1
		void ADC1_DRDY_INT(){
 800874c:	b580      	push	{r7, lr}
 800874e:	af00      	add	r7, sp, #0
//			ADC1_us = TIMER_GetTime(&TIMER_TIMESTAMP) / 100; // Get microseconds from timer -- DAVE TIMER APP returns (us * 100);
//			ADC1_ms = millisec;	// Grab milliseconds for capture time
			ADC1_buff.header.ms = millisec;
 8008750:	4b08      	ldr	r3, [pc, #32]	; (8008774 <ERU0_2_IRQHandler+0x28>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a08      	ldr	r2, [pc, #32]	; (8008778 <ERU0_2_IRQHandler+0x2c>)
 8008756:	6013      	str	r3, [r2, #0]
			ADC1_buff.header.us = TIMER_GetTime(&TIMER_TIMESTAMP) / 100;
 8008758:	4808      	ldr	r0, [pc, #32]	; (800877c <ERU0_2_IRQHandler+0x30>)
 800875a:	f7f9 ffc1 	bl	80026e0 <TIMER_GetTime>
 800875e:	4602      	mov	r2, r0
 8008760:	4b07      	ldr	r3, [pc, #28]	; (8008780 <ERU0_2_IRQHandler+0x34>)
 8008762:	fba3 2302 	umull	r2, r3, r3, r2
 8008766:	095b      	lsrs	r3, r3, #5
 8008768:	4a03      	ldr	r2, [pc, #12]	; (8008778 <ERU0_2_IRQHandler+0x2c>)
 800876a:	6053      	str	r3, [r2, #4]
			read_adc1 = 1; // Set flag to read ADC1
 800876c:	4b05      	ldr	r3, [pc, #20]	; (8008784 <ERU0_2_IRQHandler+0x38>)
 800876e:	2201      	movs	r2, #1
 8008770:	701a      	strb	r2, [r3, #0]
		}
 8008772:	bd80      	pop	{r7, pc}
 8008774:	1ffef084 	.word	0x1ffef084
 8008778:	1ffef798 	.word	0x1ffef798
 800877c:	1ffe8838 	.word	0x1ffe8838
 8008780:	51eb851f 	.word	0x51eb851f
 8008784:	1ffef08a 	.word	0x1ffef08a

08008788 <CCU43_1_IRQHandler>:

	// Ethernet Timer (NOT USED IN FINAL PRODUCT)
		void ETHIRQ(){
 8008788:	b580      	push	{r7, lr}
 800878a:	af00      	add	r7, sp, #0
//			tx_flag = 1;
			DIGITAL_IO_ToggleOutput(&LED_INDICATOR); // LED Toggle for speed check on scope
 800878c:	4801      	ldr	r0, [pc, #4]	; (8008794 <CCU43_1_IRQHandler+0xc>)
 800878e:	f7ff fd69 	bl	8008264 <DIGITAL_IO_ToggleOutput>
		}
 8008792:	bd80      	pop	{r7, pc}
 8008794:	08008efc 	.word	0x08008efc

08008798 <adc_register_config>:


// FUNCIONS ///////////////////////////////////////////////////////////////////////////////////////

void adc_register_config(){
 8008798:	b580      	push	{r7, lr}
 800879a:	b08a      	sub	sp, #40	; 0x28
 800879c:	af00      	add	r7, sp, #0
	// Register Configurations
		uint8_t unlock[3] = {0x06, 0x55, 0x0}; 				// Unlocks ADC
 800879e:	4a75      	ldr	r2, [pc, #468]	; (8008974 <adc_register_config+0x1dc>)
 80087a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087a4:	8811      	ldrh	r1, [r2, #0]
 80087a6:	7892      	ldrb	r2, [r2, #2]
 80087a8:	8019      	strh	r1, [r3, #0]
 80087aa:	709a      	strb	r2, [r3, #2]
		uint8_t null[18] = {0x00};							// Sends null for reads
 80087ac:	f107 0310 	add.w	r3, r7, #16
 80087b0:	2200      	movs	r2, #0
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	3304      	adds	r3, #4
 80087b6:	2200      	movs	r2, #0
 80087b8:	601a      	str	r2, [r3, #0]
 80087ba:	3304      	adds	r3, #4
 80087bc:	2200      	movs	r2, #0
 80087be:	601a      	str	r2, [r3, #0]
 80087c0:	3304      	adds	r3, #4
 80087c2:	2200      	movs	r2, #0
 80087c4:	601a      	str	r2, [r3, #0]
 80087c6:	3304      	adds	r3, #4
 80087c8:	2200      	movs	r2, #0
 80087ca:	801a      	strh	r2, [r3, #0]
 80087cc:	3302      	adds	r3, #2
		uint8_t write_A_SYS_CFG[3] = {0x4B, 0x68, 0x00};	// b(01101000) -- Neg Charge Pump Powered Down | High-Res | 2.442 Internal Reference | Internal Voltage Enabled | 5/95% Comparator Threshold
 80087ce:	4a6a      	ldr	r2, [pc, #424]	; (8008978 <adc_register_config+0x1e0>)
 80087d0:	f107 030c 	add.w	r3, r7, #12
 80087d4:	8811      	ldrh	r1, [r2, #0]
 80087d6:	7892      	ldrb	r2, [r2, #2]
 80087d8:	8019      	strh	r1, [r3, #0]
 80087da:	709a      	strb	r2, [r3, #2]
		uint8_t write_D_SYS_CFG[3] = {0x4C, 0x3C, 0x00};	// b(00111100) -- Watchdog Disabled | No CRC | 12ns delay for DONE (not used) | 12ns delay for Hi-Z on DOUT | Fixed Frame Size (6 frames) | CRC disabled
 80087dc:	4a67      	ldr	r2, [pc, #412]	; (800897c <adc_register_config+0x1e4>)
 80087de:	f107 0308 	add.w	r3, r7, #8
 80087e2:	8811      	ldrh	r1, [r2, #0]
 80087e4:	7892      	ldrb	r2, [r2, #2]
 80087e6:	8019      	strh	r1, [r3, #0]
 80087e8:	709a      	strb	r2, [r3, #2]
		uint8_t write_CLK1[3] = {0x4D, 0x02, 0x00};			// b(00000010) -- XTAL CLK Source | CLKIN /2
 80087ea:	4a65      	ldr	r2, [pc, #404]	; (8008980 <adc_register_config+0x1e8>)
 80087ec:	1d3b      	adds	r3, r7, #4
 80087ee:	8811      	ldrh	r1, [r2, #0]
 80087f0:	7892      	ldrb	r2, [r2, #2]
 80087f2:	8019      	strh	r1, [r3, #0]
 80087f4:	709a      	strb	r2, [r3, #2]
		uint8_t write_CLK2_43kHz[3] = {0x4E, 0x4E, 0x00};	// b(01001110) -- ICLK / 4 | OSR = fMOD / 48
 80087f6:	4a63      	ldr	r2, [pc, #396]	; (8008984 <adc_register_config+0x1ec>)
 80087f8:	463b      	mov	r3, r7
 80087fa:	8811      	ldrh	r1, [r2, #0]
 80087fc:	7892      	ldrb	r2, [r2, #2]
 80087fe:	8019      	strh	r1, [r3, #0]
 8008800:	709a      	strb	r2, [r3, #2]
		// NOTE -- write_CLK2_43kHz gives a final sample rate of 42.667kHz
		// NOTE -- write_CLK2_8kHz gives a final sample rate of 8kHz


	// Clear configArray for debug
		for (uint8_t i = 0; i<  56; i++){
 8008802:	2300      	movs	r3, #0
 8008804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008808:	e009      	b.n	800881e <adc_register_config+0x86>
			configArray[i] = 0x00;
 800880a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800880e:	4a5e      	ldr	r2, [pc, #376]	; (8008988 <adc_register_config+0x1f0>)
 8008810:	2100      	movs	r1, #0
 8008812:	54d1      	strb	r1, [r2, r3]
		// NOTE -- write_CLK2_43kHz gives a final sample rate of 42.667kHz
		// NOTE -- write_CLK2_8kHz gives a final sample rate of 8kHz


	// Clear configArray for debug
		for (uint8_t i = 0; i<  56; i++){
 8008814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008818:	3301      	adds	r3, #1
 800881a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800881e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008822:	2b37      	cmp	r3, #55	; 0x37
 8008824:	d9f1      	bls.n	800880a <adc_register_config+0x72>
			configArray[i] = 0x00;
		}

	// Transfer Null
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, configArray, 3U);
 8008826:	f107 0310 	add.w	r3, r7, #16
 800882a:	4858      	ldr	r0, [pc, #352]	; (800898c <adc_register_config+0x1f4>)
 800882c:	4619      	mov	r1, r3
 800882e:	4a56      	ldr	r2, [pc, #344]	; (8008988 <adc_register_config+0x1f0>)
 8008830:	2303      	movs	r3, #3
 8008832:	f7fa fd53 	bl	80032dc <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8008836:	bf00      	nop
 8008838:	4854      	ldr	r0, [pc, #336]	; (800898c <adc_register_config+0x1f4>)
 800883a:	f7ff fd47 	bl	80082cc <SPI_MASTER_IsRxBusy>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1f9      	bne.n	8008838 <adc_register_config+0xa0>

	//  Unlock ADC for configuration
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, unlock, configArray, 3U);
 8008844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008848:	4850      	ldr	r0, [pc, #320]	; (800898c <adc_register_config+0x1f4>)
 800884a:	4619      	mov	r1, r3
 800884c:	4a4e      	ldr	r2, [pc, #312]	; (8008988 <adc_register_config+0x1f0>)
 800884e:	2303      	movs	r3, #3
 8008850:	f7fa fd44 	bl	80032dc <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8008854:	bf00      	nop
 8008856:	484d      	ldr	r0, [pc, #308]	; (800898c <adc_register_config+0x1f4>)
 8008858:	f7ff fd38 	bl	80082cc <SPI_MASTER_IsRxBusy>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1f9      	bne.n	8008856 <adc_register_config+0xbe>

	// Transfer Null
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, configArray+3, 3U);
 8008862:	f107 0310 	add.w	r3, r7, #16
 8008866:	4849      	ldr	r0, [pc, #292]	; (800898c <adc_register_config+0x1f4>)
 8008868:	4619      	mov	r1, r3
 800886a:	4a49      	ldr	r2, [pc, #292]	; (8008990 <adc_register_config+0x1f8>)
 800886c:	2303      	movs	r3, #3
 800886e:	f7fa fd35 	bl	80032dc <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8008872:	bf00      	nop
 8008874:	4845      	ldr	r0, [pc, #276]	; (800898c <adc_register_config+0x1f4>)
 8008876:	f7ff fd29 	bl	80082cc <SPI_MASTER_IsRxBusy>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1f9      	bne.n	8008874 <adc_register_config+0xdc>

	// Write to A_SYS_CFG (See Above)
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, write_A_SYS_CFG, configArray+6, 3U);
 8008880:	f107 030c 	add.w	r3, r7, #12
 8008884:	4841      	ldr	r0, [pc, #260]	; (800898c <adc_register_config+0x1f4>)
 8008886:	4619      	mov	r1, r3
 8008888:	4a42      	ldr	r2, [pc, #264]	; (8008994 <adc_register_config+0x1fc>)
 800888a:	2303      	movs	r3, #3
 800888c:	f7fa fd26 	bl	80032dc <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8008890:	bf00      	nop
 8008892:	483e      	ldr	r0, [pc, #248]	; (800898c <adc_register_config+0x1f4>)
 8008894:	f7ff fd1a 	bl	80082cc <SPI_MASTER_IsRxBusy>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1f9      	bne.n	8008892 <adc_register_config+0xfa>
		// Transfer Null
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, configArray+9, 3U);
 800889e:	f107 0310 	add.w	r3, r7, #16
 80088a2:	483a      	ldr	r0, [pc, #232]	; (800898c <adc_register_config+0x1f4>)
 80088a4:	4619      	mov	r1, r3
 80088a6:	4a3c      	ldr	r2, [pc, #240]	; (8008998 <adc_register_config+0x200>)
 80088a8:	2303      	movs	r3, #3
 80088aa:	f7fa fd17 	bl	80032dc <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 80088ae:	bf00      	nop
 80088b0:	4836      	ldr	r0, [pc, #216]	; (800898c <adc_register_config+0x1f4>)
 80088b2:	f7ff fd0b 	bl	80082cc <SPI_MASTER_IsRxBusy>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1f9      	bne.n	80088b0 <adc_register_config+0x118>

	// Write to D_SYS_CFG (See Above)
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, write_D_SYS_CFG, configArray+12, 3U);
 80088bc:	f107 0308 	add.w	r3, r7, #8
 80088c0:	4832      	ldr	r0, [pc, #200]	; (800898c <adc_register_config+0x1f4>)
 80088c2:	4619      	mov	r1, r3
 80088c4:	4a35      	ldr	r2, [pc, #212]	; (800899c <adc_register_config+0x204>)
 80088c6:	2303      	movs	r3, #3
 80088c8:	f7fa fd08 	bl	80032dc <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 80088cc:	bf00      	nop
 80088ce:	482f      	ldr	r0, [pc, #188]	; (800898c <adc_register_config+0x1f4>)
 80088d0:	f7ff fcfc 	bl	80082cc <SPI_MASTER_IsRxBusy>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d1f9      	bne.n	80088ce <adc_register_config+0x136>

	// Transfer Null
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, configArray+15, 3U);
 80088da:	f107 0310 	add.w	r3, r7, #16
 80088de:	482b      	ldr	r0, [pc, #172]	; (800898c <adc_register_config+0x1f4>)
 80088e0:	4619      	mov	r1, r3
 80088e2:	4a2f      	ldr	r2, [pc, #188]	; (80089a0 <adc_register_config+0x208>)
 80088e4:	2303      	movs	r3, #3
 80088e6:	f7fa fcf9 	bl	80032dc <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 80088ea:	bf00      	nop
 80088ec:	4827      	ldr	r0, [pc, #156]	; (800898c <adc_register_config+0x1f4>)
 80088ee:	f7ff fced 	bl	80082cc <SPI_MASTER_IsRxBusy>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d1f9      	bne.n	80088ec <adc_register_config+0x154>

	// Write to CLK1 (See Above)
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, write_CLK1, configArray+18, 3U);
 80088f8:	1d3b      	adds	r3, r7, #4
 80088fa:	4824      	ldr	r0, [pc, #144]	; (800898c <adc_register_config+0x1f4>)
 80088fc:	4619      	mov	r1, r3
 80088fe:	4a29      	ldr	r2, [pc, #164]	; (80089a4 <adc_register_config+0x20c>)
 8008900:	2303      	movs	r3, #3
 8008902:	f7fa fceb 	bl	80032dc <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8008906:	bf00      	nop
 8008908:	4820      	ldr	r0, [pc, #128]	; (800898c <adc_register_config+0x1f4>)
 800890a:	f7ff fcdf 	bl	80082cc <SPI_MASTER_IsRxBusy>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1f9      	bne.n	8008908 <adc_register_config+0x170>

	// Transfer Null
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, configArray+21, 3U);
 8008914:	f107 0310 	add.w	r3, r7, #16
 8008918:	481c      	ldr	r0, [pc, #112]	; (800898c <adc_register_config+0x1f4>)
 800891a:	4619      	mov	r1, r3
 800891c:	4a22      	ldr	r2, [pc, #136]	; (80089a8 <adc_register_config+0x210>)
 800891e:	2303      	movs	r3, #3
 8008920:	f7fa fcdc 	bl	80032dc <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8008924:	bf00      	nop
 8008926:	4819      	ldr	r0, [pc, #100]	; (800898c <adc_register_config+0x1f4>)
 8008928:	f7ff fcd0 	bl	80082cc <SPI_MASTER_IsRxBusy>
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1f9      	bne.n	8008926 <adc_register_config+0x18e>

	// Write to CLK2 (See Above)
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, write_CLK2_43kHz, configArray+24, 3U);
 8008932:	463b      	mov	r3, r7
 8008934:	4815      	ldr	r0, [pc, #84]	; (800898c <adc_register_config+0x1f4>)
 8008936:	4619      	mov	r1, r3
 8008938:	4a1c      	ldr	r2, [pc, #112]	; (80089ac <adc_register_config+0x214>)
 800893a:	2303      	movs	r3, #3
 800893c:	f7fa fcce 	bl	80032dc <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8008940:	bf00      	nop
 8008942:	4812      	ldr	r0, [pc, #72]	; (800898c <adc_register_config+0x1f4>)
 8008944:	f7ff fcc2 	bl	80082cc <SPI_MASTER_IsRxBusy>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1f9      	bne.n	8008942 <adc_register_config+0x1aa>

	// Transfer Null
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, configArray+27, 3U);
 800894e:	f107 0310 	add.w	r3, r7, #16
 8008952:	480e      	ldr	r0, [pc, #56]	; (800898c <adc_register_config+0x1f4>)
 8008954:	4619      	mov	r1, r3
 8008956:	4a16      	ldr	r2, [pc, #88]	; (80089b0 <adc_register_config+0x218>)
 8008958:	2303      	movs	r3, #3
 800895a:	f7fa fcbf 	bl	80032dc <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 800895e:	bf00      	nop
 8008960:	480a      	ldr	r0, [pc, #40]	; (800898c <adc_register_config+0x1f4>)
 8008962:	f7ff fcb3 	bl	80082cc <SPI_MASTER_IsRxBusy>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1f9      	bne.n	8008960 <adc_register_config+0x1c8>

}
 800896c:	3728      	adds	r7, #40	; 0x28
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	08008f40 	.word	0x08008f40
 8008978:	08008f44 	.word	0x08008f44
 800897c:	08008f48 	.word	0x08008f48
 8008980:	08008f4c 	.word	0x08008f4c
 8008984:	08008f50 	.word	0x08008f50
 8008988:	1ffef08c 	.word	0x1ffef08c
 800898c:	1ffe8930 	.word	0x1ffe8930
 8008990:	1ffef08f 	.word	0x1ffef08f
 8008994:	1ffef092 	.word	0x1ffef092
 8008998:	1ffef095 	.word	0x1ffef095
 800899c:	1ffef098 	.word	0x1ffef098
 80089a0:	1ffef09b 	.word	0x1ffef09b
 80089a4:	1ffef09e 	.word	0x1ffef09e
 80089a8:	1ffef0a1 	.word	0x1ffef0a1
 80089ac:	1ffef0a4 	.word	0x1ffef0a4
 80089b0:	1ffef0a7 	.word	0x1ffef0a7

080089b4 <xmc_ADC_setup>:

void xmc_ADC_setup(){
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b088      	sub	sp, #32
 80089b8:	af00      	add	r7, sp, #0
	uint8_t null[18] = {0x00};						// Sends null for reads
 80089ba:	f107 030c 	add.w	r3, r7, #12
 80089be:	2200      	movs	r2, #0
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	3304      	adds	r3, #4
 80089c4:	2200      	movs	r2, #0
 80089c6:	601a      	str	r2, [r3, #0]
 80089c8:	3304      	adds	r3, #4
 80089ca:	2200      	movs	r2, #0
 80089cc:	601a      	str	r2, [r3, #0]
 80089ce:	3304      	adds	r3, #4
 80089d0:	2200      	movs	r2, #0
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	3304      	adds	r3, #4
 80089d6:	2200      	movs	r2, #0
 80089d8:	801a      	strh	r2, [r3, #0]
 80089da:	3302      	adds	r3, #2
	uint8_t write_ADC_ENA[3] = {0x4F, 0x0F, 0x00};	// b(00001111) -- Enables all ADC channels (note: no option to enable certain channels, all or nothing)
 80089dc:	4a27      	ldr	r2, [pc, #156]	; (8008a7c <xmc_ADC_setup+0xc8>)
 80089de:	f107 0308 	add.w	r3, r7, #8
 80089e2:	8811      	ldrh	r1, [r2, #0]
 80089e4:	7892      	ldrb	r2, [r2, #2]
 80089e6:	8019      	strh	r1, [r3, #0]
 80089e8:	709a      	strb	r2, [r3, #2]
	uint8_t wakeup[3] = {0x00, 0x33, 0x00};			// b(00110011) -- Bring ADC out of standby (start collection)
 80089ea:	2300      	movs	r3, #0
 80089ec:	713b      	strb	r3, [r7, #4]
 80089ee:	2333      	movs	r3, #51	; 0x33
 80089f0:	717b      	strb	r3, [r7, #5]
 80089f2:	2300      	movs	r3, #0
 80089f4:	71bb      	strb	r3, [r7, #6]

	// Write to ADC_ENA (See Above)
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, write_ADC_ENA, configArray, 3U);
 80089f6:	f107 0308 	add.w	r3, r7, #8
 80089fa:	4821      	ldr	r0, [pc, #132]	; (8008a80 <xmc_ADC_setup+0xcc>)
 80089fc:	4619      	mov	r1, r3
 80089fe:	4a21      	ldr	r2, [pc, #132]	; (8008a84 <xmc_ADC_setup+0xd0>)
 8008a00:	2303      	movs	r3, #3
 8008a02:	f7fa fc6b 	bl	80032dc <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8008a06:	bf00      	nop
 8008a08:	481d      	ldr	r0, [pc, #116]	; (8008a80 <xmc_ADC_setup+0xcc>)
 8008a0a:	f7ff fc5f 	bl	80082cc <SPI_MASTER_IsRxBusy>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d1f9      	bne.n	8008a08 <xmc_ADC_setup+0x54>

	// Transfer Null
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, configArray+30, 3U);
 8008a14:	f107 030c 	add.w	r3, r7, #12
 8008a18:	4819      	ldr	r0, [pc, #100]	; (8008a80 <xmc_ADC_setup+0xcc>)
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	4a1a      	ldr	r2, [pc, #104]	; (8008a88 <xmc_ADC_setup+0xd4>)
 8008a1e:	2303      	movs	r3, #3
 8008a20:	f7fa fc5c 	bl	80032dc <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8008a24:	bf00      	nop
 8008a26:	4816      	ldr	r0, [pc, #88]	; (8008a80 <xmc_ADC_setup+0xcc>)
 8008a28:	f7ff fc50 	bl	80082cc <SPI_MASTER_IsRxBusy>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1f9      	bne.n	8008a26 <xmc_ADC_setup+0x72>

	// Wakeup ADC and start conversions
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, wakeup, configArray, 3U);
 8008a32:	1d3b      	adds	r3, r7, #4
 8008a34:	4812      	ldr	r0, [pc, #72]	; (8008a80 <xmc_ADC_setup+0xcc>)
 8008a36:	4619      	mov	r1, r3
 8008a38:	4a12      	ldr	r2, [pc, #72]	; (8008a84 <xmc_ADC_setup+0xd0>)
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	f7fa fc4e 	bl	80032dc <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8008a40:	bf00      	nop
 8008a42:	480f      	ldr	r0, [pc, #60]	; (8008a80 <xmc_ADC_setup+0xcc>)
 8008a44:	f7ff fc42 	bl	80082cc <SPI_MASTER_IsRxBusy>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1f9      	bne.n	8008a42 <xmc_ADC_setup+0x8e>

	// Transfer Null
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, configArray+33, 3U);
 8008a4e:	f107 030c 	add.w	r3, r7, #12
 8008a52:	480b      	ldr	r0, [pc, #44]	; (8008a80 <xmc_ADC_setup+0xcc>)
 8008a54:	4619      	mov	r1, r3
 8008a56:	4a0d      	ldr	r2, [pc, #52]	; (8008a8c <xmc_ADC_setup+0xd8>)
 8008a58:	2303      	movs	r3, #3
 8008a5a:	f7fa fc3f 	bl	80032dc <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8008a5e:	bf00      	nop
 8008a60:	4807      	ldr	r0, [pc, #28]	; (8008a80 <xmc_ADC_setup+0xcc>)
 8008a62:	f7ff fc33 	bl	80082cc <SPI_MASTER_IsRxBusy>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1f9      	bne.n	8008a60 <xmc_ADC_setup+0xac>

	// Set to "infinite" frame length
		XMC_SPI_CH_SetFrameLength(XMC_SPI2_CH0, 64); // When set to 64, frame does not end based on DAVE App Configuration -- this allows us to grab all 144 bits of data out of the ADC during data collection
 8008a6c:	4808      	ldr	r0, [pc, #32]	; (8008a90 <xmc_ADC_setup+0xdc>)
 8008a6e:	2140      	movs	r1, #64	; 0x40
 8008a70:	f7ff fc1e 	bl	80082b0 <XMC_SPI_CH_SetFrameLength>

}
 8008a74:	3720      	adds	r7, #32
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	08008f54 	.word	0x08008f54
 8008a80:	1ffe8930 	.word	0x1ffe8930
 8008a84:	1ffef08c 	.word	0x1ffef08c
 8008a88:	1ffef0aa 	.word	0x1ffef0aa
 8008a8c:	1ffef0ad 	.word	0x1ffef0ad
 8008a90:	48024000 	.word	0x48024000

08008a94 <__errno>:
 8008a94:	4b01      	ldr	r3, [pc, #4]	; (8008a9c <__errno+0x8>)
 8008a96:	6818      	ldr	r0, [r3, #0]
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	1ffe8b0c 	.word	0x1ffe8b0c

08008aa0 <__libc_init_array>:
 8008aa0:	b570      	push	{r4, r5, r6, lr}
 8008aa2:	4b0e      	ldr	r3, [pc, #56]	; (8008adc <__libc_init_array+0x3c>)
 8008aa4:	4c0e      	ldr	r4, [pc, #56]	; (8008ae0 <__libc_init_array+0x40>)
 8008aa6:	1ae4      	subs	r4, r4, r3
 8008aa8:	10a4      	asrs	r4, r4, #2
 8008aaa:	2500      	movs	r5, #0
 8008aac:	461e      	mov	r6, r3
 8008aae:	42a5      	cmp	r5, r4
 8008ab0:	d004      	beq.n	8008abc <__libc_init_array+0x1c>
 8008ab2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ab6:	4798      	blx	r3
 8008ab8:	3501      	adds	r5, #1
 8008aba:	e7f8      	b.n	8008aae <__libc_init_array+0xe>
 8008abc:	f7f9 fd4a 	bl	8002554 <_init>
 8008ac0:	4c08      	ldr	r4, [pc, #32]	; (8008ae4 <__libc_init_array+0x44>)
 8008ac2:	4b09      	ldr	r3, [pc, #36]	; (8008ae8 <__libc_init_array+0x48>)
 8008ac4:	1ae4      	subs	r4, r4, r3
 8008ac6:	10a4      	asrs	r4, r4, #2
 8008ac8:	2500      	movs	r5, #0
 8008aca:	461e      	mov	r6, r3
 8008acc:	42a5      	cmp	r5, r4
 8008ace:	d004      	beq.n	8008ada <__libc_init_array+0x3a>
 8008ad0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ad4:	4798      	blx	r3
 8008ad6:	3501      	adds	r5, #1
 8008ad8:	e7f8      	b.n	8008acc <__libc_init_array+0x2c>
 8008ada:	bd70      	pop	{r4, r5, r6, pc}
 8008adc:	1ffe8b10 	.word	0x1ffe8b10
 8008ae0:	1ffe8b10 	.word	0x1ffe8b10
 8008ae4:	1ffe8b10 	.word	0x1ffe8b10
 8008ae8:	1ffe8b10 	.word	0x1ffe8b10

08008aec <memcmp>:
 8008aec:	b510      	push	{r4, lr}
 8008aee:	440a      	add	r2, r1
 8008af0:	1e44      	subs	r4, r0, #1
 8008af2:	4291      	cmp	r1, r2
 8008af4:	d008      	beq.n	8008b08 <memcmp+0x1c>
 8008af6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008afa:	7808      	ldrb	r0, [r1, #0]
 8008afc:	4283      	cmp	r3, r0
 8008afe:	d001      	beq.n	8008b04 <memcmp+0x18>
 8008b00:	1a18      	subs	r0, r3, r0
 8008b02:	bd10      	pop	{r4, pc}
 8008b04:	3101      	adds	r1, #1
 8008b06:	e7f4      	b.n	8008af2 <memcmp+0x6>
 8008b08:	2000      	movs	r0, #0
 8008b0a:	bd10      	pop	{r4, pc}

08008b0c <memcpy>:
 8008b0c:	b510      	push	{r4, lr}
 8008b0e:	1e43      	subs	r3, r0, #1
 8008b10:	440a      	add	r2, r1
 8008b12:	4291      	cmp	r1, r2
 8008b14:	d004      	beq.n	8008b20 <memcpy+0x14>
 8008b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b1e:	e7f8      	b.n	8008b12 <memcpy+0x6>
 8008b20:	bd10      	pop	{r4, pc}

08008b22 <memset>:
 8008b22:	4402      	add	r2, r0
 8008b24:	4603      	mov	r3, r0
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d002      	beq.n	8008b30 <memset+0xe>
 8008b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b2e:	e7fa      	b.n	8008b26 <memset+0x4>
 8008b30:	4770      	bx	lr
	...

08008b34 <rand>:
 8008b34:	4b19      	ldr	r3, [pc, #100]	; (8008b9c <rand+0x68>)
 8008b36:	b510      	push	{r4, lr}
 8008b38:	681c      	ldr	r4, [r3, #0]
 8008b3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008b3c:	b9d3      	cbnz	r3, 8008b74 <rand+0x40>
 8008b3e:	2018      	movs	r0, #24
 8008b40:	f000 f832 	bl	8008ba8 <malloc>
 8008b44:	f243 330e 	movw	r3, #13070	; 0x330e
 8008b48:	63a0      	str	r0, [r4, #56]	; 0x38
 8008b4a:	8003      	strh	r3, [r0, #0]
 8008b4c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8008b50:	8043      	strh	r3, [r0, #2]
 8008b52:	f241 2334 	movw	r3, #4660	; 0x1234
 8008b56:	8083      	strh	r3, [r0, #4]
 8008b58:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8008b5c:	80c3      	strh	r3, [r0, #6]
 8008b5e:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8008b62:	8103      	strh	r3, [r0, #8]
 8008b64:	2305      	movs	r3, #5
 8008b66:	8143      	strh	r3, [r0, #10]
 8008b68:	230b      	movs	r3, #11
 8008b6a:	8183      	strh	r3, [r0, #12]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	2300      	movs	r3, #0
 8008b70:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008b74:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008b76:	4c0a      	ldr	r4, [pc, #40]	; (8008ba0 <rand+0x6c>)
 8008b78:	690b      	ldr	r3, [r1, #16]
 8008b7a:	6948      	ldr	r0, [r1, #20]
 8008b7c:	4a09      	ldr	r2, [pc, #36]	; (8008ba4 <rand+0x70>)
 8008b7e:	435c      	muls	r4, r3
 8008b80:	fb02 4000 	mla	r0, r2, r0, r4
 8008b84:	fba3 2302 	umull	r2, r3, r3, r2
 8008b88:	3201      	adds	r2, #1
 8008b8a:	4403      	add	r3, r0
 8008b8c:	f143 0300 	adc.w	r3, r3, #0
 8008b90:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8008b94:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8008b98:	bd10      	pop	{r4, pc}
 8008b9a:	bf00      	nop
 8008b9c:	1ffe8b0c 	.word	0x1ffe8b0c
 8008ba0:	5851f42d 	.word	0x5851f42d
 8008ba4:	4c957f2d 	.word	0x4c957f2d

08008ba8 <malloc>:
 8008ba8:	4b02      	ldr	r3, [pc, #8]	; (8008bb4 <malloc+0xc>)
 8008baa:	4601      	mov	r1, r0
 8008bac:	6818      	ldr	r0, [r3, #0]
 8008bae:	f000 b803 	b.w	8008bb8 <_malloc_r>
 8008bb2:	bf00      	nop
 8008bb4:	1ffe8b0c 	.word	0x1ffe8b0c

08008bb8 <_malloc_r>:
 8008bb8:	b570      	push	{r4, r5, r6, lr}
 8008bba:	1ccc      	adds	r4, r1, #3
 8008bbc:	f024 0403 	bic.w	r4, r4, #3
 8008bc0:	3408      	adds	r4, #8
 8008bc2:	2c0c      	cmp	r4, #12
 8008bc4:	bf38      	it	cc
 8008bc6:	240c      	movcc	r4, #12
 8008bc8:	2c00      	cmp	r4, #0
 8008bca:	4606      	mov	r6, r0
 8008bcc:	da03      	bge.n	8008bd6 <_malloc_r+0x1e>
 8008bce:	230c      	movs	r3, #12
 8008bd0:	6033      	str	r3, [r6, #0]
 8008bd2:	2000      	movs	r0, #0
 8008bd4:	bd70      	pop	{r4, r5, r6, pc}
 8008bd6:	428c      	cmp	r4, r1
 8008bd8:	d3f9      	bcc.n	8008bce <_malloc_r+0x16>
 8008bda:	4a20      	ldr	r2, [pc, #128]	; (8008c5c <_malloc_r+0xa4>)
 8008bdc:	6813      	ldr	r3, [r2, #0]
 8008bde:	4610      	mov	r0, r2
 8008be0:	4619      	mov	r1, r3
 8008be2:	b1a1      	cbz	r1, 8008c0e <_malloc_r+0x56>
 8008be4:	680a      	ldr	r2, [r1, #0]
 8008be6:	1b12      	subs	r2, r2, r4
 8008be8:	d40e      	bmi.n	8008c08 <_malloc_r+0x50>
 8008bea:	2a0b      	cmp	r2, #11
 8008bec:	d903      	bls.n	8008bf6 <_malloc_r+0x3e>
 8008bee:	600a      	str	r2, [r1, #0]
 8008bf0:	188b      	adds	r3, r1, r2
 8008bf2:	508c      	str	r4, [r1, r2]
 8008bf4:	e01f      	b.n	8008c36 <_malloc_r+0x7e>
 8008bf6:	428b      	cmp	r3, r1
 8008bf8:	bf0d      	iteet	eq
 8008bfa:	685a      	ldreq	r2, [r3, #4]
 8008bfc:	684a      	ldrne	r2, [r1, #4]
 8008bfe:	605a      	strne	r2, [r3, #4]
 8008c00:	6002      	streq	r2, [r0, #0]
 8008c02:	bf18      	it	ne
 8008c04:	460b      	movne	r3, r1
 8008c06:	e016      	b.n	8008c36 <_malloc_r+0x7e>
 8008c08:	460b      	mov	r3, r1
 8008c0a:	6849      	ldr	r1, [r1, #4]
 8008c0c:	e7e9      	b.n	8008be2 <_malloc_r+0x2a>
 8008c0e:	4d14      	ldr	r5, [pc, #80]	; (8008c60 <_malloc_r+0xa8>)
 8008c10:	682b      	ldr	r3, [r5, #0]
 8008c12:	b91b      	cbnz	r3, 8008c1c <_malloc_r+0x64>
 8008c14:	4630      	mov	r0, r6
 8008c16:	f000 f825 	bl	8008c64 <_sbrk_r>
 8008c1a:	6028      	str	r0, [r5, #0]
 8008c1c:	4630      	mov	r0, r6
 8008c1e:	4621      	mov	r1, r4
 8008c20:	f000 f820 	bl	8008c64 <_sbrk_r>
 8008c24:	1c42      	adds	r2, r0, #1
 8008c26:	4603      	mov	r3, r0
 8008c28:	d0d1      	beq.n	8008bce <_malloc_r+0x16>
 8008c2a:	1cc5      	adds	r5, r0, #3
 8008c2c:	f025 0503 	bic.w	r5, r5, #3
 8008c30:	4285      	cmp	r5, r0
 8008c32:	d10a      	bne.n	8008c4a <_malloc_r+0x92>
 8008c34:	601c      	str	r4, [r3, #0]
 8008c36:	f103 000b 	add.w	r0, r3, #11
 8008c3a:	1d1a      	adds	r2, r3, #4
 8008c3c:	f020 0007 	bic.w	r0, r0, #7
 8008c40:	1a82      	subs	r2, r0, r2
 8008c42:	d00a      	beq.n	8008c5a <_malloc_r+0xa2>
 8008c44:	4251      	negs	r1, r2
 8008c46:	5099      	str	r1, [r3, r2]
 8008c48:	bd70      	pop	{r4, r5, r6, pc}
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	1ae9      	subs	r1, r5, r3
 8008c4e:	f000 f809 	bl	8008c64 <_sbrk_r>
 8008c52:	3001      	adds	r0, #1
 8008c54:	d0bb      	beq.n	8008bce <_malloc_r+0x16>
 8008c56:	462b      	mov	r3, r5
 8008c58:	e7ec      	b.n	8008c34 <_malloc_r+0x7c>
 8008c5a:	bd70      	pop	{r4, r5, r6, pc}
 8008c5c:	1ffef0c8 	.word	0x1ffef0c8
 8008c60:	1ffef0c4 	.word	0x1ffef0c4

08008c64 <_sbrk_r>:
 8008c64:	b538      	push	{r3, r4, r5, lr}
 8008c66:	4c06      	ldr	r4, [pc, #24]	; (8008c80 <_sbrk_r+0x1c>)
 8008c68:	2300      	movs	r3, #0
 8008c6a:	4605      	mov	r5, r0
 8008c6c:	4608      	mov	r0, r1
 8008c6e:	6023      	str	r3, [r4, #0]
 8008c70:	f7f9 fc3c 	bl	80024ec <_sbrk>
 8008c74:	1c43      	adds	r3, r0, #1
 8008c76:	d102      	bne.n	8008c7e <_sbrk_r+0x1a>
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	b103      	cbz	r3, 8008c7e <_sbrk_r+0x1a>
 8008c7c:	602b      	str	r3, [r5, #0]
 8008c7e:	bd38      	pop	{r3, r4, r5, pc}
 8008c80:	1ffef7fc 	.word	0x1ffef7fc

08008c84 <SPI_MASTER_ADC_MOSI>:
 8008c84:	48028300 00000008                       ...H....

08008c8c <SPI_MASTER_ADC_MISO>:
 8008c8c:	48028300 00000007                       ...H....

08008c94 <SPI_MASTER_ADC_SCLKOUT>:
 8008c94:	48028300 00000009                       ...H....

08008c9c <SPI_MASTER_ADC_SCLKOUT_Config>:
 8008c9c:	00000088 00000001 00000001 00000000     ................
 8008cac:	00000000                                ....

08008cb0 <SPI_MASTER_ADC_SS_0>:
 8008cb0:	48028500 00000003                       ...H....

08008cb8 <SPI_MASTER_ADC_SS_0_Config>:
 8008cb8:	00000088 00000001 00000001 00000000     ................
 8008cc8:	00010000                                ....

08008ccc <SPI_MASTER_ADC_SS_1>:
 8008ccc:	48028500 00000004                       ...H....

08008cd4 <SPI_MASTER_ADC_Config>:
 8008cd4:	1ffe88bc 080036a1 08008c84 1ffe8894     .....6..........
 8008ce4:	08008c8c 1ffe8b24 00000000 00000000     ....$...........
	...
 8008cfc:	08008c94 08008c9c 08008cb0 08008ccc     ................
	...
 8008d24:	08008cb8 1ffe88a8 00000000 00000000     ................
	...
 8008d58:	02000101 00000102                       ........

08008d60 <SPI_MASTER_TC_MOSI>:
 8008d60:	48028000 00000005                       ...H....

08008d68 <SPI_MASTER_TC_MISO>:
 8008d68:	48028000 00000004                       ...H....

08008d70 <SPI_MASTER_TC_SCLKOUT>:
 8008d70:	48028000 0000000b                       ...H....

08008d78 <SPI_MASTER_TC_SCLKOUT_Config>:
 8008d78:	00000090 00000001 00000001 00000000     ................
 8008d88:	00000000                                ....

08008d8c <SPI_MASTER_TC_SS_0>:
 8008d8c:	48028000 00000006                       ...H....

08008d94 <SPI_MASTER_TC_SS_0_Config>:
 8008d94:	00000090 00000001 00000001 00000000     ................
 8008da4:	00010000                                ....

08008da8 <SPI_MASTER_TC_SS_1>:
 8008da8:	48028000 0000000e                       ...H....

08008db0 <SPI_MASTER_TC_SS_2>:
 8008db0:	48028000 0000000f                       ...H....

08008db8 <SPI_MASTER_TC_SS_2_Config>:
 8008db8:	00000090 00000001 00000001 00000000     ................
 8008dc8:	00040000                                ....

08008dcc <SPI_MASTER_TC_SS_3>:
 8008dcc:	48028300 0000000e                       ...H....

08008dd4 <SPI_MASTER_TC_SS_3_Config>:
 8008dd4:	00000090 00000001 00000001 00000000     ................
 8008de4:	00080000                                ....

08008de8 <SPI_MASTER_TC_Config>:
 8008de8:	1ffe8978 0800386d 08008d60 1ffe8950     x...m8..`...P...
 8008df8:	08008d68 1ffe8b38 00000000 00000000     h...8...........
	...
 8008e10:	08008d70 08008d78 08008d8c 08008da8     p...x...........
 8008e20:	08008db0 08008dcc 00000000 00000000     ................
	...
 8008e38:	08008d94 1ffe8964 08008db8 08008dd4     ....d...........
	...
 8008e6c:	04000101 00010002                       ........

08008e74 <PIN_INTERRUPT_ADC0>:
 8008e74:	50004800 48028300 00000000 00000000     .H.P...H........
 8008e84:	00000000 00000004 00000139 00003f04     ........9....?..
 8008e94:	00000103                                ....

08008e98 <PIN_INTERRUPT_ADC1>:
 8008e98:	50004800 48028000 00000000 00000000     .H.P...H........
	...
 8008eb0:	00000029 01003e03 00000a02              )....>......

08008ebc <INTERRUPT_TC>:
 8008ebc:	00003d3b                                ;=..

08008ec0 <INTERRUPT_TIMESTAMP>:
 8008ec0:	00003f38                                8?..

08008ec4 <INTERRUPT_ETH>:
 8008ec4:	00003e39                                9>..

08008ec8 <eth_phy_config>:
 8008ec8:	00000001 00010000                       ........

08008ed0 <ethbroadcast>:
 8008ed0:	ffffffff 0000ffff                       ........

08008ed8 <ethzero>:
	...

08008ee0 <ip_addr_any>:
 8008ee0:	00000000                                ....

08008ee4 <memp_sizes>:
 8008ee4:	0024001c 00100014 06100010              ..$.........

08008ef0 <memp_num>:
 8008ef0:	00040004 00070008 00100010              ............

08008efc <LED_INDICATOR>:
 8008efc:	48028500 00000080 00010000 00000000     ...H............
 8008f0c:	00000008 01010230 00010000 00000000     ....0...........
 8008f1c:	00010000 01010102 312e3031 30312e30     ........10.10.10
 8008f2c:	0035372e 00000000 00000001 00000002     .75.............
 8008f3c:	00000003 00005506 0000684b 00003c4c     .....U..Kh..L<..
 8008f4c:	0000024d 00004e4e 00000f4f 00000043     M...NN..O...C...
