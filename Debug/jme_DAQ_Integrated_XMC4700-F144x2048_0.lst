
jme_DAQ_Integrated_XMC4700-F144x2048_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000300  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6b8  08020000  0c020000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .eh_frame     00000028  0802a6b8  0c02a6b8  0001a6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 Stack         00000800  1ffe8000  1ffe8000  00028000  2**0
                  ALLOC
  4 .data         000002f8  1ffe8800  0c02a6e0  00020800  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00008d24  1ffe8af8  0c02a9d8  00020af8  2**2
                  ALLOC
  6 ETH_RAM       000030a0  20000000  20000000  00028000  2**2
                  ALLOC
  7 .no_init      00000014  2003ffc0  2003ffc0  00027fc0  2**2
                  ALLOC
  8 .debug_aranges 00001a48  00000000  00000000  00020af8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002acf3  00000000  00000000  00022540  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005dfe  00000000  00000000  0004d233  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e035  00000000  00000000  00053031  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00006ba0  00000000  00000000  00061068  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000ee49  00000000  00000000  00067c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d7ad  00000000  00000000  00076a51  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001648  00000000  00000000  000841fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 00000fa9  00000000  00000000  00085846  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08020000 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8020000:	b598      	push	{r3, r4, r7, lr}
 8020002:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8020004:	4a05      	ldr	r2, [pc, #20]	; (802001c <SystemInit+0x1c>)
 8020006:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 802000a:	4614      	mov	r4, r2
 802000c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802000e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  SystemCoreSetup();
 8020012:	f008 fa6f 	bl	80284f4 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8020016:	f008 fad7 	bl	80285c8 <SystemCoreClockSetup>
}
 802001a:	bd98      	pop	{r3, r4, r7, pc}
 802001c:	2003ffc4 	.word	0x2003ffc4

08020020 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 8020020:	b580      	push	{r7, lr}
 8020022:	b084      	sub	sp, #16
 8020024:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8020026:	4b2f      	ldr	r3, [pc, #188]	; (80200e4 <SystemCoreClockUpdate+0xc4>)
 8020028:	68db      	ldr	r3, [r3, #12]
 802002a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802002e:	2b00      	cmp	r3, #0
 8020030:	d03e      	beq.n	80200b0 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8020032:	4b2d      	ldr	r3, [pc, #180]	; (80200e8 <SystemCoreClockUpdate+0xc8>)
 8020034:	68db      	ldr	r3, [r3, #12]
 8020036:	f003 0301 	and.w	r3, r3, #1
 802003a:	2b00      	cmp	r3, #0
 802003c:	d002      	beq.n	8020044 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 802003e:	4b2b      	ldr	r3, [pc, #172]	; (80200ec <SystemCoreClockUpdate+0xcc>)
 8020040:	60fb      	str	r3, [r7, #12]
 8020042:	e002      	b.n	802004a <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8020044:	f008 fab6 	bl	80285b4 <OSCHP_GetFrequency>
 8020048:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 802004a:	4b27      	ldr	r3, [pc, #156]	; (80200e8 <SystemCoreClockUpdate+0xc8>)
 802004c:	681b      	ldr	r3, [r3, #0]
 802004e:	f003 0304 	and.w	r3, r3, #4
 8020052:	2b00      	cmp	r3, #0
 8020054:	d020      	beq.n	8020098 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8020056:	4b24      	ldr	r3, [pc, #144]	; (80200e8 <SystemCoreClockUpdate+0xc8>)
 8020058:	689b      	ldr	r3, [r3, #8]
 802005a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 802005e:	0e1b      	lsrs	r3, r3, #24
 8020060:	3301      	adds	r3, #1
 8020062:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8020064:	4b20      	ldr	r3, [pc, #128]	; (80200e8 <SystemCoreClockUpdate+0xc8>)
 8020066:	689b      	ldr	r3, [r3, #8]
 8020068:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 802006c:	0a1b      	lsrs	r3, r3, #8
 802006e:	3301      	adds	r3, #1
 8020070:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8020072:	4b1d      	ldr	r3, [pc, #116]	; (80200e8 <SystemCoreClockUpdate+0xc8>)
 8020074:	689b      	ldr	r3, [r3, #8]
 8020076:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 802007a:	0c1b      	lsrs	r3, r3, #16
 802007c:	3301      	adds	r3, #1
 802007e:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8020080:	68bb      	ldr	r3, [r7, #8]
 8020082:	683a      	ldr	r2, [r7, #0]
 8020084:	fb02 f303 	mul.w	r3, r2, r3
 8020088:	68fa      	ldr	r2, [r7, #12]
 802008a:	fbb2 f3f3 	udiv	r3, r2, r3
 802008e:	687a      	ldr	r2, [r7, #4]
 8020090:	fb02 f303 	mul.w	r3, r2, r3
 8020094:	60fb      	str	r3, [r7, #12]
 8020096:	e00d      	b.n	80200b4 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8020098:	4b13      	ldr	r3, [pc, #76]	; (80200e8 <SystemCoreClockUpdate+0xc8>)
 802009a:	689b      	ldr	r3, [r3, #8]
 802009c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80200a0:	3301      	adds	r3, #1
 80200a2:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 80200a4:	68fa      	ldr	r2, [r7, #12]
 80200a6:	683b      	ldr	r3, [r7, #0]
 80200a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80200ac:	60fb      	str	r3, [r7, #12]
 80200ae:	e001      	b.n	80200b4 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 80200b0:	4b0e      	ldr	r3, [pc, #56]	; (80200ec <SystemCoreClockUpdate+0xcc>)
 80200b2:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80200b4:	4b0b      	ldr	r3, [pc, #44]	; (80200e4 <SystemCoreClockUpdate+0xc4>)
 80200b6:	68db      	ldr	r3, [r3, #12]
 80200b8:	b2db      	uxtb	r3, r3
 80200ba:	3301      	adds	r3, #1
 80200bc:	68fa      	ldr	r2, [r7, #12]
 80200be:	fbb2 f3f3 	udiv	r3, r2, r3
 80200c2:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80200c4:	4b07      	ldr	r3, [pc, #28]	; (80200e4 <SystemCoreClockUpdate+0xc4>)
 80200c6:	691b      	ldr	r3, [r3, #16]
 80200c8:	f003 0301 	and.w	r3, r3, #1
 80200cc:	3301      	adds	r3, #1
 80200ce:	68fa      	ldr	r2, [r7, #12]
 80200d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80200d4:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80200d6:	4a06      	ldr	r2, [pc, #24]	; (80200f0 <SystemCoreClockUpdate+0xd0>)
 80200d8:	68fb      	ldr	r3, [r7, #12]
 80200da:	6013      	str	r3, [r2, #0]
}
 80200dc:	3710      	adds	r7, #16
 80200de:	46bd      	mov	sp, r7
 80200e0:	bd80      	pop	{r7, pc}
 80200e2:	bf00      	nop
 80200e4:	50004600 	.word	0x50004600
 80200e8:	50004710 	.word	0x50004710
 80200ec:	016e3600 	.word	0x016e3600
 80200f0:	2003ffc0 	.word	0x2003ffc0

080200f4 <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 80200f4:	b580      	push	{r7, lr}
 80200f6:	b082      	sub	sp, #8
 80200f8:	af00      	add	r7, sp, #0
 80200fa:	6078      	str	r0, [r7, #4]
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 80200fc:	687b      	ldr	r3, [r7, #4]
 80200fe:	4a07      	ldr	r2, [pc, #28]	; (802011c <XMC_ERU_Enable+0x28>)
 8020100:	4293      	cmp	r3, r2
 8020102:	d107      	bne.n	8020114 <XMC_ERU_Enable+0x20>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ERU1);
 8020104:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8020108:	f000 fbb2 	bl	8020870 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 802010c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8020110:	f000 fa2a 	bl	8020568 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#else
  XMC_UNUSED_ARG(eru);
  #endif
}
 8020114:	3708      	adds	r7, #8
 8020116:	46bd      	mov	sp, r7
 8020118:	bd80      	pop	{r7, pc}
 802011a:	bf00      	nop
 802011c:	40044000 	.word	0x40044000

08020120 <XMC_FLASH_lEnterPageModeCommand>:

/*
 * Command to program the PFLASH in to page mode, so that assembly buffer is used 
 */
void XMC_FLASH_lEnterPageModeCommand(void)
{
 8020120:	b480      	push	{r7}
 8020122:	b083      	sub	sp, #12
 8020124:	af00      	add	r7, sp, #0
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8020126:	4b05      	ldr	r3, [pc, #20]	; (802013c <XMC_FLASH_lEnterPageModeCommand+0x1c>)
 8020128:	607b      	str	r3, [r7, #4]
  *address = (uint32_t)0x50U;
 802012a:	687b      	ldr	r3, [r7, #4]
 802012c:	2250      	movs	r2, #80	; 0x50
 802012e:	601a      	str	r2, [r3, #0]
}
 8020130:	370c      	adds	r7, #12
 8020132:	46bd      	mov	sp, r7
 8020134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020138:	4770      	bx	lr
 802013a:	bf00      	nop
 802013c:	0c005554 	.word	0x0c005554

08020140 <XMC_FLASH_lLoadPageCommand>:

/*
 * Command to load the data into the page assembly buffer 
 */
void XMC_FLASH_lLoadPageCommand(uint32_t low_word, uint32_t high_word)
{
 8020140:	b480      	push	{r7}
 8020142:	b085      	sub	sp, #20
 8020144:	af00      	add	r7, sp, #0
 8020146:	6078      	str	r0, [r7, #4]
 8020148:	6039      	str	r1, [r7, #0]
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f0U);
 802014a:	4b07      	ldr	r3, [pc, #28]	; (8020168 <XMC_FLASH_lLoadPageCommand+0x28>)
 802014c:	60fb      	str	r3, [r7, #12]
  *address = low_word;
 802014e:	68fb      	ldr	r3, [r7, #12]
 8020150:	687a      	ldr	r2, [r7, #4]
 8020152:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 8020154:	4b05      	ldr	r3, [pc, #20]	; (802016c <XMC_FLASH_lLoadPageCommand+0x2c>)
 8020156:	60fb      	str	r3, [r7, #12]
  *address = high_word;
 8020158:	68fb      	ldr	r3, [r7, #12]
 802015a:	683a      	ldr	r2, [r7, #0]
 802015c:	601a      	str	r2, [r3, #0]
}
 802015e:	3714      	adds	r7, #20
 8020160:	46bd      	mov	sp, r7
 8020162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020166:	4770      	bx	lr
 8020168:	0c0055f0 	.word	0x0c0055f0
 802016c:	0c0055f4 	.word	0x0c0055f4

08020170 <XMC_FLASH_lWritePageCommand>:

/*
 * Command to start the programming of one page with data from the assembly buffer
 */
void XMC_FLASH_lWritePageCommand(uint32_t *page_start_address)
{
 8020170:	b480      	push	{r7}
 8020172:	b085      	sub	sp, #20
 8020174:	af00      	add	r7, sp, #0
 8020176:	6078      	str	r0, [r7, #4]
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8020178:	4b0c      	ldr	r3, [pc, #48]	; (80201ac <XMC_FLASH_lWritePageCommand+0x3c>)
 802017a:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 802017c:	68fb      	ldr	r3, [r7, #12]
 802017e:	22aa      	movs	r2, #170	; 0xaa
 8020180:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 8020182:	4b0b      	ldr	r3, [pc, #44]	; (80201b0 <XMC_FLASH_lWritePageCommand+0x40>)
 8020184:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 8020186:	68fb      	ldr	r3, [r7, #12]
 8020188:	2255      	movs	r2, #85	; 0x55
 802018a:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 802018c:	4b07      	ldr	r3, [pc, #28]	; (80201ac <XMC_FLASH_lWritePageCommand+0x3c>)
 802018e:	60fb      	str	r3, [r7, #12]
  *address = 0xa0U;
 8020190:	68fb      	ldr	r3, [r7, #12]
 8020192:	22a0      	movs	r2, #160	; 0xa0
 8020194:	601a      	str	r2, [r3, #0]
  address = page_start_address;
 8020196:	687b      	ldr	r3, [r7, #4]
 8020198:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 802019a:	68fb      	ldr	r3, [r7, #12]
 802019c:	22aa      	movs	r2, #170	; 0xaa
 802019e:	601a      	str	r2, [r3, #0]
}
 80201a0:	3714      	adds	r7, #20
 80201a2:	46bd      	mov	sp, r7
 80201a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201a8:	4770      	bx	lr
 80201aa:	bf00      	nop
 80201ac:	0c005554 	.word	0x0c005554
 80201b0:	0c00aaa8 	.word	0x0c00aaa8

080201b4 <XMC_FLASH_lEraseSectorCommand>:

/*
 * Command to erase sector which is starting with the specified address
 */
void XMC_FLASH_lEraseSectorCommand(uint32_t *sector_start_address)
{
 80201b4:	b480      	push	{r7}
 80201b6:	b085      	sub	sp, #20
 80201b8:	af00      	add	r7, sp, #0
 80201ba:	6078      	str	r0, [r7, #4]
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 80201bc:	4b11      	ldr	r3, [pc, #68]	; (8020204 <XMC_FLASH_lEraseSectorCommand+0x50>)
 80201be:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 80201c0:	68fb      	ldr	r3, [r7, #12]
 80201c2:	22aa      	movs	r2, #170	; 0xaa
 80201c4:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 80201c6:	4b10      	ldr	r3, [pc, #64]	; (8020208 <XMC_FLASH_lEraseSectorCommand+0x54>)
 80201c8:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 80201ca:	68fb      	ldr	r3, [r7, #12]
 80201cc:	2255      	movs	r2, #85	; 0x55
 80201ce:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 80201d0:	4b0c      	ldr	r3, [pc, #48]	; (8020204 <XMC_FLASH_lEraseSectorCommand+0x50>)
 80201d2:	60fb      	str	r3, [r7, #12]
  *address = 0x80U;
 80201d4:	68fb      	ldr	r3, [r7, #12]
 80201d6:	2280      	movs	r2, #128	; 0x80
 80201d8:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 80201da:	4b0a      	ldr	r3, [pc, #40]	; (8020204 <XMC_FLASH_lEraseSectorCommand+0x50>)
 80201dc:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 80201de:	68fb      	ldr	r3, [r7, #12]
 80201e0:	22aa      	movs	r2, #170	; 0xaa
 80201e2:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 80201e4:	4b08      	ldr	r3, [pc, #32]	; (8020208 <XMC_FLASH_lEraseSectorCommand+0x54>)
 80201e6:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 80201e8:	68fb      	ldr	r3, [r7, #12]
 80201ea:	2255      	movs	r2, #85	; 0x55
 80201ec:	601a      	str	r2, [r3, #0]
  address = sector_start_address;
 80201ee:	687b      	ldr	r3, [r7, #4]
 80201f0:	60fb      	str	r3, [r7, #12]
  *address = 0x30U;
 80201f2:	68fb      	ldr	r3, [r7, #12]
 80201f4:	2230      	movs	r2, #48	; 0x30
 80201f6:	601a      	str	r2, [r3, #0]
}
 80201f8:	3714      	adds	r7, #20
 80201fa:	46bd      	mov	sp, r7
 80201fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020200:	4770      	bx	lr
 8020202:	bf00      	nop
 8020204:	0c005554 	.word	0x0c005554
 8020208:	0c00aaa8 	.word	0x0c00aaa8

0802020c <XMC_FLASH_lClearStatusCommand>:

/*
 * Command to clear FSR.PROG and FSR.ERASE and the error flags in FSR such as PFOPER, SQER, PROER, PFDBER, ORIER, VER
 */
void XMC_FLASH_lClearStatusCommand(void)
{
 802020c:	b480      	push	{r7}
 802020e:	b083      	sub	sp, #12
 8020210:	af00      	add	r7, sp, #0
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8020212:	4b05      	ldr	r3, [pc, #20]	; (8020228 <XMC_FLASH_lClearStatusCommand+0x1c>)
 8020214:	607b      	str	r3, [r7, #4]
  *address = 0xf5U;
 8020216:	687b      	ldr	r3, [r7, #4]
 8020218:	22f5      	movs	r2, #245	; 0xf5
 802021a:	601a      	str	r2, [r3, #0]
}
 802021c:	370c      	adds	r7, #12
 802021e:	46bd      	mov	sp, r7
 8020220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020224:	4770      	bx	lr
 8020226:	bf00      	nop
 8020228:	0c005554 	.word	0x0c005554

0802022c <XMC_FLASH_ClearStatus>:

 /*
 * This API shall clear Program, erase and error flags(PFOPER, SQER, PROER, PFDBER, ORIER, VER) of FSR register.
 */
void XMC_FLASH_ClearStatus(void)
{
 802022c:	b580      	push	{r7, lr}
 802022e:	af00      	add	r7, sp, #0
  XMC_FLASH_lClearStatusCommand();
 8020230:	f7ff ffec 	bl	802020c <XMC_FLASH_lClearStatusCommand>
}
 8020234:	bd80      	pop	{r7, pc}
 8020236:	bf00      	nop

08020238 <XMC_FLASH_GetStatus>:

/*
 * This API returns the FSR register value
 */
uint32_t XMC_FLASH_GetStatus(void)
{
 8020238:	b480      	push	{r7}
 802023a:	af00      	add	r7, sp, #0
  return FLASH0->FSR;
 802023c:	4b04      	ldr	r3, [pc, #16]	; (8020250 <XMC_FLASH_GetStatus+0x18>)
 802023e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020242:	3310      	adds	r3, #16
 8020244:	681b      	ldr	r3, [r3, #0]
}
 8020246:	4618      	mov	r0, r3
 8020248:	46bd      	mov	sp, r7
 802024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802024e:	4770      	bx	lr
 8020250:	58001000 	.word	0x58001000

08020254 <XMC_FLASH_ProgramPage>:

/*
 * This API write the PFLASH page
 */
void XMC_FLASH_ProgramPage(uint32_t *address, const uint32_t *data)
{
 8020254:	b580      	push	{r7, lr}
 8020256:	b084      	sub	sp, #16
 8020258:	af00      	add	r7, sp, #0
 802025a:	6078      	str	r0, [r7, #4]
 802025c:	6039      	str	r1, [r7, #0]
  uint32_t idx;

  XMC_FLASH_lClearStatusCommand();  
 802025e:	f7ff ffd5 	bl	802020c <XMC_FLASH_lClearStatusCommand>
  XMC_FLASH_lEnterPageModeCommand();
 8020262:	f7ff ff5d 	bl	8020120 <XMC_FLASH_lEnterPageModeCommand>

  for (idx = 0U; idx < XMC_FLASH_WORDS_PER_PAGE; idx += 2U)
 8020266:	2300      	movs	r3, #0
 8020268:	60fb      	str	r3, [r7, #12]
 802026a:	e011      	b.n	8020290 <XMC_FLASH_ProgramPage+0x3c>
  {
    XMC_FLASH_lLoadPageCommand(data[idx], data[idx + 1U]);
 802026c:	68fb      	ldr	r3, [r7, #12]
 802026e:	009b      	lsls	r3, r3, #2
 8020270:	683a      	ldr	r2, [r7, #0]
 8020272:	4413      	add	r3, r2
 8020274:	6819      	ldr	r1, [r3, #0]
 8020276:	68fb      	ldr	r3, [r7, #12]
 8020278:	3301      	adds	r3, #1
 802027a:	009b      	lsls	r3, r3, #2
 802027c:	683a      	ldr	r2, [r7, #0]
 802027e:	4413      	add	r3, r2
 8020280:	681b      	ldr	r3, [r3, #0]
 8020282:	4608      	mov	r0, r1
 8020284:	4619      	mov	r1, r3
 8020286:	f7ff ff5b 	bl	8020140 <XMC_FLASH_lLoadPageCommand>
  uint32_t idx;

  XMC_FLASH_lClearStatusCommand();  
  XMC_FLASH_lEnterPageModeCommand();

  for (idx = 0U; idx < XMC_FLASH_WORDS_PER_PAGE; idx += 2U)
 802028a:	68fb      	ldr	r3, [r7, #12]
 802028c:	3302      	adds	r3, #2
 802028e:	60fb      	str	r3, [r7, #12]
 8020290:	68fb      	ldr	r3, [r7, #12]
 8020292:	2b3f      	cmp	r3, #63	; 0x3f
 8020294:	d9ea      	bls.n	802026c <XMC_FLASH_ProgramPage+0x18>
  {
    XMC_FLASH_lLoadPageCommand(data[idx], data[idx + 1U]);
  }

  XMC_FLASH_lWritePageCommand(address);    
 8020296:	6878      	ldr	r0, [r7, #4]
 8020298:	f7ff ff6a 	bl	8020170 <XMC_FLASH_lWritePageCommand>

  /* wait until the operation is completed */
  while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 802029c:	bf00      	nop
 802029e:	4b06      	ldr	r3, [pc, #24]	; (80202b8 <XMC_FLASH_ProgramPage+0x64>)
 80202a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80202a4:	3310      	adds	r3, #16
 80202a6:	681b      	ldr	r3, [r3, #0]
 80202a8:	f003 0301 	and.w	r3, r3, #1
 80202ac:	2b00      	cmp	r3, #0
 80202ae:	d1f6      	bne.n	802029e <XMC_FLASH_ProgramPage+0x4a>
}
 80202b0:	3710      	adds	r7, #16
 80202b2:	46bd      	mov	sp, r7
 80202b4:	bd80      	pop	{r7, pc}
 80202b6:	bf00      	nop
 80202b8:	58001000 	.word	0x58001000

080202bc <XMC_FLASH_EraseSector>:

/*
 * This API erase the logical sector
 */
void XMC_FLASH_EraseSector(uint32_t *address)
{
 80202bc:	b580      	push	{r7, lr}
 80202be:	b082      	sub	sp, #8
 80202c0:	af00      	add	r7, sp, #0
 80202c2:	6078      	str	r0, [r7, #4]
  XMC_FLASH_lClearStatusCommand();
 80202c4:	f7ff ffa2 	bl	802020c <XMC_FLASH_lClearStatusCommand>
  XMC_FLASH_lEraseSectorCommand(address);
 80202c8:	6878      	ldr	r0, [r7, #4]
 80202ca:	f7ff ff73 	bl	80201b4 <XMC_FLASH_lEraseSectorCommand>

  /* wait until the operation is completed */
  while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U){}
 80202ce:	bf00      	nop
 80202d0:	4b05      	ldr	r3, [pc, #20]	; (80202e8 <XMC_FLASH_EraseSector+0x2c>)
 80202d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80202d6:	3310      	adds	r3, #16
 80202d8:	681b      	ldr	r3, [r3, #0]
 80202da:	f003 0301 	and.w	r3, r3, #1
 80202de:	2b00      	cmp	r3, #0
 80202e0:	d1f6      	bne.n	80202d0 <XMC_FLASH_EraseSector+0x14>
}
 80202e2:	3708      	adds	r7, #8
 80202e4:	46bd      	mov	sp, r7
 80202e6:	bd80      	pop	{r7, pc}
 80202e8:	58001000 	.word	0x58001000

080202ec <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80202ec:	b480      	push	{r7}
 80202ee:	b085      	sub	sp, #20
 80202f0:	af00      	add	r7, sp, #0
 80202f2:	60f8      	str	r0, [r7, #12]
 80202f4:	460b      	mov	r3, r1
 80202f6:	607a      	str	r2, [r7, #4]
 80202f8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80202fa:	7afb      	ldrb	r3, [r7, #11]
 80202fc:	089b      	lsrs	r3, r3, #2
 80202fe:	b2db      	uxtb	r3, r3
 8020300:	4618      	mov	r0, r3
 8020302:	7afb      	ldrb	r3, [r7, #11]
 8020304:	089b      	lsrs	r3, r3, #2
 8020306:	b2db      	uxtb	r3, r3
 8020308:	461a      	mov	r2, r3
 802030a:	68fb      	ldr	r3, [r7, #12]
 802030c:	3204      	adds	r2, #4
 802030e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8020312:	7afb      	ldrb	r3, [r7, #11]
 8020314:	f003 0303 	and.w	r3, r3, #3
 8020318:	00db      	lsls	r3, r3, #3
 802031a:	4619      	mov	r1, r3
 802031c:	23f8      	movs	r3, #248	; 0xf8
 802031e:	408b      	lsls	r3, r1
 8020320:	43db      	mvns	r3, r3
 8020322:	ea02 0103 	and.w	r1, r2, r3
 8020326:	68fb      	ldr	r3, [r7, #12]
 8020328:	1d02      	adds	r2, r0, #4
 802032a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 802032e:	68fb      	ldr	r3, [r7, #12]
 8020330:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8020332:	7afb      	ldrb	r3, [r7, #11]
 8020334:	005b      	lsls	r3, r3, #1
 8020336:	4619      	mov	r1, r3
 8020338:	2303      	movs	r3, #3
 802033a:	408b      	lsls	r3, r1
 802033c:	43db      	mvns	r3, r3
 802033e:	401a      	ands	r2, r3
 8020340:	68fb      	ldr	r3, [r7, #12]
 8020342:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8020344:	68fb      	ldr	r3, [r7, #12]
 8020346:	4a37      	ldr	r2, [pc, #220]	; (8020424 <XMC_GPIO_Init+0x138>)
 8020348:	4293      	cmp	r3, r2
 802034a:	d003      	beq.n	8020354 <XMC_GPIO_Init+0x68>
 802034c:	68fb      	ldr	r3, [r7, #12]
 802034e:	4a36      	ldr	r2, [pc, #216]	; (8020428 <XMC_GPIO_Init+0x13c>)
 8020350:	4293      	cmp	r3, r2
 8020352:	d10a      	bne.n	802036a <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8020354:	68fb      	ldr	r3, [r7, #12]
 8020356:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8020358:	7afb      	ldrb	r3, [r7, #11]
 802035a:	2101      	movs	r1, #1
 802035c:	fa01 f303 	lsl.w	r3, r1, r3
 8020360:	43db      	mvns	r3, r3
 8020362:	401a      	ands	r2, r3
 8020364:	68fb      	ldr	r3, [r7, #12]
 8020366:	661a      	str	r2, [r3, #96]	; 0x60
 8020368:	e03c      	b.n	80203e4 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 802036a:	687b      	ldr	r3, [r7, #4]
 802036c:	685a      	ldr	r2, [r3, #4]
 802036e:	7afb      	ldrb	r3, [r7, #11]
 8020370:	409a      	lsls	r2, r3
 8020372:	68fb      	ldr	r3, [r7, #12]
 8020374:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8020376:	7afb      	ldrb	r3, [r7, #11]
 8020378:	08db      	lsrs	r3, r3, #3
 802037a:	b2db      	uxtb	r3, r3
 802037c:	4618      	mov	r0, r3
 802037e:	7afb      	ldrb	r3, [r7, #11]
 8020380:	08db      	lsrs	r3, r3, #3
 8020382:	b2db      	uxtb	r3, r3
 8020384:	461a      	mov	r2, r3
 8020386:	68fb      	ldr	r3, [r7, #12]
 8020388:	3210      	adds	r2, #16
 802038a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802038e:	7afb      	ldrb	r3, [r7, #11]
 8020390:	f003 0307 	and.w	r3, r3, #7
 8020394:	009b      	lsls	r3, r3, #2
 8020396:	4619      	mov	r1, r3
 8020398:	2307      	movs	r3, #7
 802039a:	408b      	lsls	r3, r1
 802039c:	43db      	mvns	r3, r3
 802039e:	ea02 0103 	and.w	r1, r2, r3
 80203a2:	68fb      	ldr	r3, [r7, #12]
 80203a4:	f100 0210 	add.w	r2, r0, #16
 80203a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80203ac:	7afb      	ldrb	r3, [r7, #11]
 80203ae:	08db      	lsrs	r3, r3, #3
 80203b0:	b2db      	uxtb	r3, r3
 80203b2:	4618      	mov	r0, r3
 80203b4:	7afb      	ldrb	r3, [r7, #11]
 80203b6:	08db      	lsrs	r3, r3, #3
 80203b8:	b2db      	uxtb	r3, r3
 80203ba:	461a      	mov	r2, r3
 80203bc:	68fb      	ldr	r3, [r7, #12]
 80203be:	3210      	adds	r2, #16
 80203c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80203c4:	687b      	ldr	r3, [r7, #4]
 80203c6:	7a1b      	ldrb	r3, [r3, #8]
 80203c8:	4619      	mov	r1, r3
 80203ca:	7afb      	ldrb	r3, [r7, #11]
 80203cc:	f003 0307 	and.w	r3, r3, #7
 80203d0:	009b      	lsls	r3, r3, #2
 80203d2:	fa01 f303 	lsl.w	r3, r1, r3
 80203d6:	ea42 0103 	orr.w	r1, r2, r3
 80203da:	68fb      	ldr	r3, [r7, #12]
 80203dc:	f100 0210 	add.w	r2, r0, #16
 80203e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80203e4:	7afb      	ldrb	r3, [r7, #11]
 80203e6:	089b      	lsrs	r3, r3, #2
 80203e8:	b2db      	uxtb	r3, r3
 80203ea:	4618      	mov	r0, r3
 80203ec:	7afb      	ldrb	r3, [r7, #11]
 80203ee:	089b      	lsrs	r3, r3, #2
 80203f0:	b2db      	uxtb	r3, r3
 80203f2:	461a      	mov	r2, r3
 80203f4:	68fb      	ldr	r3, [r7, #12]
 80203f6:	3204      	adds	r2, #4
 80203f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80203fc:	687b      	ldr	r3, [r7, #4]
 80203fe:	781b      	ldrb	r3, [r3, #0]
 8020400:	4619      	mov	r1, r3
 8020402:	7afb      	ldrb	r3, [r7, #11]
 8020404:	f003 0303 	and.w	r3, r3, #3
 8020408:	00db      	lsls	r3, r3, #3
 802040a:	fa01 f303 	lsl.w	r3, r1, r3
 802040e:	ea42 0103 	orr.w	r1, r2, r3
 8020412:	68fb      	ldr	r3, [r7, #12]
 8020414:	1d02      	adds	r2, r0, #4
 8020416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 802041a:	3714      	adds	r7, #20
 802041c:	46bd      	mov	sp, r7
 802041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020422:	4770      	bx	lr
 8020424:	48028e00 	.word	0x48028e00
 8020428:	48028f00 	.word	0x48028f00

0802042c <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 802042c:	b480      	push	{r7}
 802042e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8020430:	4b03      	ldr	r3, [pc, #12]	; (8020440 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8020432:	681b      	ldr	r3, [r3, #0]
}
 8020434:	4618      	mov	r0, r3
 8020436:	46bd      	mov	sp, r7
 8020438:	f85d 7b04 	ldr.w	r7, [sp], #4
 802043c:	4770      	bx	lr
 802043e:	bf00      	nop
 8020440:	2003ffc0 	.word	0x2003ffc0

08020444 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8020444:	b580      	push	{r7, lr}
 8020446:	b084      	sub	sp, #16
 8020448:	af00      	add	r7, sp, #0
 802044a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 802044c:	f7ff fde8 	bl	8020020 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8020450:	4b0b      	ldr	r3, [pc, #44]	; (8020480 <XMC_SCU_lDelay+0x3c>)
 8020452:	681b      	ldr	r3, [r3, #0]
 8020454:	4a0b      	ldr	r2, [pc, #44]	; (8020484 <XMC_SCU_lDelay+0x40>)
 8020456:	fba2 2303 	umull	r2, r3, r2, r3
 802045a:	0c9a      	lsrs	r2, r3, #18
 802045c:	687b      	ldr	r3, [r7, #4]
 802045e:	fb02 f303 	mul.w	r3, r2, r3
 8020462:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8020464:	2300      	movs	r3, #0
 8020466:	60fb      	str	r3, [r7, #12]
 8020468:	e003      	b.n	8020472 <XMC_SCU_lDelay+0x2e>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 802046a:	bf00      	nop
 802046c:	68fb      	ldr	r3, [r7, #12]
 802046e:	3301      	adds	r3, #1
 8020470:	60fb      	str	r3, [r7, #12]
 8020472:	68fa      	ldr	r2, [r7, #12]
 8020474:	687b      	ldr	r3, [r7, #4]
 8020476:	429a      	cmp	r2, r3
 8020478:	d3f7      	bcc.n	802046a <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 802047a:	3710      	adds	r7, #16
 802047c:	46bd      	mov	sp, r7
 802047e:	bd80      	pop	{r7, pc}
 8020480:	2003ffc0 	.word	0x2003ffc0
 8020484:	431bde83 	.word	0x431bde83

08020488 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8020488:	b5b0      	push	{r4, r5, r7, lr}
 802048a:	b084      	sub	sp, #16
 802048c:	af02      	add	r7, sp, #8
 802048e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8020490:	2000      	movs	r0, #0
 8020492:	f000 f8b9 	bl	8020608 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8020496:	f000 fa8b 	bl	80209b0 <XMC_SCU_HIB_EnableHibernateDomain>
  if (config->enable_osculp == true)
 802049a:	687b      	ldr	r3, [r7, #4]
 802049c:	79db      	ldrb	r3, [r3, #7]
 802049e:	2b00      	cmp	r3, #0
 80204a0:	d00a      	beq.n	80204b8 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80204a2:	f000 fac3 	bl	8020a2c <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while(XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80204a6:	bf00      	nop
 80204a8:	f000 faae 	bl	8020a08 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80204ac:	4603      	mov	r3, r0
 80204ae:	f083 0301 	eor.w	r3, r3, #1
 80204b2:	b2db      	uxtb	r3, r3
 80204b4:	2b00      	cmp	r3, #0
 80204b6:	d1f7      	bne.n	80204a8 <XMC_SCU_CLOCK_Init+0x20>
  }
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 80204b8:	687b      	ldr	r3, [r7, #4]
 80204ba:	7a5b      	ldrb	r3, [r3, #9]
 80204bc:	4618      	mov	r0, r3
 80204be:	f000 f91d 	bl	80206fc <XMC_SCU_HIB_SetStandbyClockSource>

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80204c2:	687b      	ldr	r3, [r7, #4]
 80204c4:	7a1b      	ldrb	r3, [r3, #8]
 80204c6:	4618      	mov	r0, r3
 80204c8:	f000 fa4c 	bl	8020964 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80204cc:	687b      	ldr	r3, [r7, #4]
 80204ce:	7c1b      	ldrb	r3, [r3, #16]
 80204d0:	4618      	mov	r0, r3
 80204d2:	f000 f931 	bl	8020738 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80204d6:	687b      	ldr	r3, [r7, #4]
 80204d8:	7c5b      	ldrb	r3, [r3, #17]
 80204da:	4618      	mov	r0, r3
 80204dc:	f000 f954 	bl	8020788 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80204e0:	687b      	ldr	r3, [r7, #4]
 80204e2:	7c9b      	ldrb	r3, [r3, #18]
 80204e4:	4618      	mov	r0, r3
 80204e6:	f000 f93b 	bl	8020760 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80204ea:	687b      	ldr	r3, [r7, #4]
 80204ec:	7cdb      	ldrb	r3, [r3, #19]
 80204ee:	4618      	mov	r0, r3
 80204f0:	f000 f95e 	bl	80207b0 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80204f4:	687b      	ldr	r3, [r7, #4]
 80204f6:	799b      	ldrb	r3, [r3, #6]
 80204f8:	2b00      	cmp	r3, #0
 80204fa:	d00a      	beq.n	8020512 <XMC_SCU_CLOCK_Init+0x8a>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80204fc:	f000 fac8 	bl	8020a90 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8020500:	bf00      	nop
 8020502:	f000 faed 	bl	8020ae0 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8020506:	4603      	mov	r3, r0
 8020508:	f083 0301 	eor.w	r3, r3, #1
 802050c:	b2db      	uxtb	r3, r3
 802050e:	2b00      	cmp	r3, #0
 8020510:	d1f7      	bne.n	8020502 <XMC_SCU_CLOCK_Init+0x7a>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8020512:	687b      	ldr	r3, [r7, #4]
 8020514:	78db      	ldrb	r3, [r3, #3]
 8020516:	2b00      	cmp	r3, #0
 8020518:	d102      	bne.n	8020520 <XMC_SCU_CLOCK_Init+0x98>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 802051a:	f000 fb05 	bl	8020b28 <XMC_SCU_CLOCK_DisableSystemPll>
 802051e:	e014      	b.n	802054a <XMC_SCU_CLOCK_Init+0xc2>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8020520:	f000 faf2 	bl	8020b08 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8020524:	687b      	ldr	r3, [r7, #4]
 8020526:	8899      	ldrh	r1, [r3, #4]
 8020528:	687b      	ldr	r3, [r7, #4]
 802052a:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 802052c:	687b      	ldr	r3, [r7, #4]
 802052e:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8020530:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8020532:	687b      	ldr	r3, [r7, #4]
 8020534:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8020536:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8020538:	687b      	ldr	r3, [r7, #4]
 802053a:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 802053c:	9300      	str	r3, [sp, #0]
 802053e:	4608      	mov	r0, r1
 8020540:	4611      	mov	r1, r2
 8020542:	462a      	mov	r2, r5
 8020544:	4623      	mov	r3, r4
 8020546:	f000 faff 	bl	8020b48 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 802054a:	687b      	ldr	r3, [r7, #4]
 802054c:	68db      	ldr	r3, [r3, #12]
 802054e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020552:	d103      	bne.n	802055c <XMC_SCU_CLOCK_Init+0xd4>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8020554:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8020558:	f000 f856 	bl	8020608 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 802055c:	f7ff fd60 	bl	8020020 <SystemCoreClockUpdate>
}
 8020560:	3708      	adds	r7, #8
 8020562:	46bd      	mov	sp, r7
 8020564:	bdb0      	pop	{r4, r5, r7, pc}
 8020566:	bf00      	nop

08020568 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8020568:	b480      	push	{r7}
 802056a:	b085      	sub	sp, #20
 802056c:	af00      	add	r7, sp, #0
 802056e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8020570:	687b      	ldr	r3, [r7, #4]
 8020572:	0f1b      	lsrs	r3, r3, #28
 8020574:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8020576:	687b      	ldr	r3, [r7, #4]
 8020578:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 802057c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 802057e:	68fa      	ldr	r2, [r7, #12]
 8020580:	4613      	mov	r3, r2
 8020582:	005b      	lsls	r3, r3, #1
 8020584:	4413      	add	r3, r2
 8020586:	009b      	lsls	r3, r3, #2
 8020588:	461a      	mov	r2, r3
 802058a:	4b04      	ldr	r3, [pc, #16]	; (802059c <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 802058c:	4413      	add	r3, r2
 802058e:	68ba      	ldr	r2, [r7, #8]
 8020590:	601a      	str	r2, [r3, #0]
}
 8020592:	3714      	adds	r7, #20
 8020594:	46bd      	mov	sp, r7
 8020596:	f85d 7b04 	ldr.w	r7, [sp], #4
 802059a:	4770      	bx	lr
 802059c:	50004414 	.word	0x50004414

080205a0 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80205a0:	b480      	push	{r7}
 80205a2:	b085      	sub	sp, #20
 80205a4:	af00      	add	r7, sp, #0
 80205a6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80205a8:	687b      	ldr	r3, [r7, #4]
 80205aa:	0f1b      	lsrs	r3, r3, #28
 80205ac:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80205ae:	687b      	ldr	r3, [r7, #4]
 80205b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80205b4:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 80205b6:	68fa      	ldr	r2, [r7, #12]
 80205b8:	4613      	mov	r3, r2
 80205ba:	005b      	lsls	r3, r3, #1
 80205bc:	4413      	add	r3, r2
 80205be:	009b      	lsls	r3, r3, #2
 80205c0:	461a      	mov	r2, r3
 80205c2:	4b08      	ldr	r3, [pc, #32]	; (80205e4 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 80205c4:	4413      	add	r3, r2
 80205c6:	681a      	ldr	r2, [r3, #0]
 80205c8:	68bb      	ldr	r3, [r7, #8]
 80205ca:	4013      	ands	r3, r2
 80205cc:	2b00      	cmp	r3, #0
 80205ce:	bf14      	ite	ne
 80205d0:	2301      	movne	r3, #1
 80205d2:	2300      	moveq	r3, #0
 80205d4:	b2db      	uxtb	r3, r3
}
 80205d6:	4618      	mov	r0, r3
 80205d8:	3714      	adds	r7, #20
 80205da:	46bd      	mov	sp, r7
 80205dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205e0:	4770      	bx	lr
 80205e2:	bf00      	nop
 80205e4:	5000440c 	.word	0x5000440c

080205e8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80205e8:	b580      	push	{r7, lr}
 80205ea:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80205ec:	f7ff ff1e 	bl	802042c <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80205f0:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80205f2:	4b04      	ldr	r3, [pc, #16]	; (8020604 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80205f4:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80205f6:	f003 0301 	and.w	r3, r3, #1
 80205fa:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80205fe:	4618      	mov	r0, r3
 8020600:	bd80      	pop	{r7, pc}
 8020602:	bf00      	nop
 8020604:	50004600 	.word	0x50004600

08020608 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8020608:	b480      	push	{r7}
 802060a:	b083      	sub	sp, #12
 802060c:	af00      	add	r7, sp, #0
 802060e:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8020610:	4906      	ldr	r1, [pc, #24]	; (802062c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8020612:	4b06      	ldr	r3, [pc, #24]	; (802062c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8020614:	68db      	ldr	r3, [r3, #12]
 8020616:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802061a:	687b      	ldr	r3, [r7, #4]
 802061c:	4313      	orrs	r3, r2
 802061e:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8020620:	370c      	adds	r7, #12
 8020622:	46bd      	mov	sp, r7
 8020624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020628:	4770      	bx	lr
 802062a:	bf00      	nop
 802062c:	50004600 	.word	0x50004600

08020630 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8020630:	b480      	push	{r7}
 8020632:	b083      	sub	sp, #12
 8020634:	af00      	add	r7, sp, #0
 8020636:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8020638:	4906      	ldr	r1, [pc, #24]	; (8020654 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 802063a:	4b06      	ldr	r3, [pc, #24]	; (8020654 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 802063c:	699b      	ldr	r3, [r3, #24]
 802063e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8020642:	687b      	ldr	r3, [r7, #4]
 8020644:	4313      	orrs	r3, r2
 8020646:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8020648:	370c      	adds	r7, #12
 802064a:	46bd      	mov	sp, r7
 802064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020650:	4770      	bx	lr
 8020652:	bf00      	nop
 8020654:	50004600 	.word	0x50004600

08020658 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8020658:	b480      	push	{r7}
 802065a:	b083      	sub	sp, #12
 802065c:	af00      	add	r7, sp, #0
 802065e:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8020660:	4906      	ldr	r1, [pc, #24]	; (802067c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8020662:	4b06      	ldr	r3, [pc, #24]	; (802067c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8020664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020666:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 802066a:	687b      	ldr	r3, [r7, #4]
 802066c:	4313      	orrs	r3, r2
 802066e:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8020670:	370c      	adds	r7, #12
 8020672:	46bd      	mov	sp, r7
 8020674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020678:	4770      	bx	lr
 802067a:	bf00      	nop
 802067c:	50004600 	.word	0x50004600

08020680 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8020680:	b480      	push	{r7}
 8020682:	b083      	sub	sp, #12
 8020684:	af00      	add	r7, sp, #0
 8020686:	4603      	mov	r3, r0
 8020688:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 802068a:	88fb      	ldrh	r3, [r7, #6]
 802068c:	2b00      	cmp	r3, #0
 802068e:	d108      	bne.n	80206a2 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8020690:	4a0a      	ldr	r2, [pc, #40]	; (80206bc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8020692:	4b0a      	ldr	r3, [pc, #40]	; (80206bc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8020694:	68db      	ldr	r3, [r3, #12]
 8020696:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802069a:	f023 0301 	bic.w	r3, r3, #1
 802069e:	60d3      	str	r3, [r2, #12]
 80206a0:	e007      	b.n	80206b2 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80206a2:	4a06      	ldr	r2, [pc, #24]	; (80206bc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80206a4:	4b05      	ldr	r3, [pc, #20]	; (80206bc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80206a6:	68db      	ldr	r3, [r3, #12]
 80206a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80206ac:	f043 0301 	orr.w	r3, r3, #1
 80206b0:	60d3      	str	r3, [r2, #12]
  }
}
 80206b2:	370c      	adds	r7, #12
 80206b4:	46bd      	mov	sp, r7
 80206b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206ba:	4770      	bx	lr
 80206bc:	50004710 	.word	0x50004710

080206c0 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 80206c0:	b480      	push	{r7}
 80206c2:	b083      	sub	sp, #12
 80206c4:	af00      	add	r7, sp, #0
 80206c6:	4603      	mov	r3, r0
 80206c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80206ca:	bf00      	nop
 80206cc:	4b09      	ldr	r3, [pc, #36]	; (80206f4 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 80206ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80206d2:	f003 0308 	and.w	r3, r3, #8
 80206d6:	2b00      	cmp	r3, #0
 80206d8:	d1f8      	bne.n	80206cc <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80206da:	4907      	ldr	r1, [pc, #28]	; (80206f8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80206dc:	4b06      	ldr	r3, [pc, #24]	; (80206f8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80206de:	68db      	ldr	r3, [r3, #12]
 80206e0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80206e4:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80206e6:	4313      	orrs	r3, r2
 80206e8:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80206ea:	370c      	adds	r7, #12
 80206ec:	46bd      	mov	sp, r7
 80206ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206f2:	4770      	bx	lr
 80206f4:	50004000 	.word	0x50004000
 80206f8:	50004300 	.word	0x50004300

080206fc <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80206fc:	b480      	push	{r7}
 80206fe:	b083      	sub	sp, #12
 8020700:	af00      	add	r7, sp, #0
 8020702:	4603      	mov	r3, r0
 8020704:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8020706:	bf00      	nop
 8020708:	4b09      	ldr	r3, [pc, #36]	; (8020730 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 802070a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 802070e:	f003 0308 	and.w	r3, r3, #8
 8020712:	2b00      	cmp	r3, #0
 8020714:	d1f8      	bne.n	8020708 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8020716:	4907      	ldr	r1, [pc, #28]	; (8020734 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8020718:	4b06      	ldr	r3, [pc, #24]	; (8020734 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 802071a:	68db      	ldr	r3, [r3, #12]
 802071c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8020720:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8020722:	4313      	orrs	r3, r2
 8020724:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8020726:	370c      	adds	r7, #12
 8020728:	46bd      	mov	sp, r7
 802072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802072e:	4770      	bx	lr
 8020730:	50004000 	.word	0x50004000
 8020734:	50004300 	.word	0x50004300

08020738 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8020738:	b480      	push	{r7}
 802073a:	b083      	sub	sp, #12
 802073c:	af00      	add	r7, sp, #0
 802073e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8020740:	4906      	ldr	r1, [pc, #24]	; (802075c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8020742:	4b06      	ldr	r3, [pc, #24]	; (802075c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8020744:	68db      	ldr	r3, [r3, #12]
 8020746:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 802074a:	687b      	ldr	r3, [r7, #4]
 802074c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 802074e:	4313      	orrs	r3, r2
 8020750:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8020752:	370c      	adds	r7, #12
 8020754:	46bd      	mov	sp, r7
 8020756:	f85d 7b04 	ldr.w	r7, [sp], #4
 802075a:	4770      	bx	lr
 802075c:	50004600 	.word	0x50004600

08020760 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8020760:	b480      	push	{r7}
 8020762:	b083      	sub	sp, #12
 8020764:	af00      	add	r7, sp, #0
 8020766:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8020768:	4906      	ldr	r1, [pc, #24]	; (8020784 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 802076a:	4b06      	ldr	r3, [pc, #24]	; (8020784 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 802076c:	6a1b      	ldr	r3, [r3, #32]
 802076e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8020772:	687b      	ldr	r3, [r7, #4]
 8020774:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8020776:	4313      	orrs	r3, r2
 8020778:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 802077a:	370c      	adds	r7, #12
 802077c:	46bd      	mov	sp, r7
 802077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020782:	4770      	bx	lr
 8020784:	50004600 	.word	0x50004600

08020788 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8020788:	b480      	push	{r7}
 802078a:	b083      	sub	sp, #12
 802078c:	af00      	add	r7, sp, #0
 802078e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8020790:	4906      	ldr	r1, [pc, #24]	; (80207ac <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8020792:	4b06      	ldr	r3, [pc, #24]	; (80207ac <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8020794:	691b      	ldr	r3, [r3, #16]
 8020796:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 802079a:	687b      	ldr	r3, [r7, #4]
 802079c:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 802079e:	4313      	orrs	r3, r2
 80207a0:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 80207a2:	370c      	adds	r7, #12
 80207a4:	46bd      	mov	sp, r7
 80207a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207aa:	4770      	bx	lr
 80207ac:	50004600 	.word	0x50004600

080207b0 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80207b0:	b480      	push	{r7}
 80207b2:	b083      	sub	sp, #12
 80207b4:	af00      	add	r7, sp, #0
 80207b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80207b8:	4906      	ldr	r1, [pc, #24]	; (80207d4 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80207ba:	4b06      	ldr	r3, [pc, #24]	; (80207d4 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80207bc:	695b      	ldr	r3, [r3, #20]
 80207be:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80207c2:	687b      	ldr	r3, [r7, #4]
 80207c4:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80207c6:	4313      	orrs	r3, r2
 80207c8:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80207ca:	370c      	adds	r7, #12
 80207cc:	46bd      	mov	sp, r7
 80207ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207d2:	4770      	bx	lr
 80207d4:	50004600 	.word	0x50004600

080207d8 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80207d8:	b480      	push	{r7}
 80207da:	b083      	sub	sp, #12
 80207dc:	af00      	add	r7, sp, #0
 80207de:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80207e0:	4906      	ldr	r1, [pc, #24]	; (80207fc <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80207e2:	4b06      	ldr	r3, [pc, #24]	; (80207fc <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80207e4:	699b      	ldr	r3, [r3, #24]
 80207e6:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 80207ea:	687b      	ldr	r3, [r7, #4]
 80207ec:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80207ee:	4313      	orrs	r3, r2
 80207f0:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 80207f2:	370c      	adds	r7, #12
 80207f4:	46bd      	mov	sp, r7
 80207f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207fa:	4770      	bx	lr
 80207fc:	50004600 	.word	0x50004600

08020800 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8020800:	b480      	push	{r7}
 8020802:	b083      	sub	sp, #12
 8020804:	af00      	add	r7, sp, #0
 8020806:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8020808:	4906      	ldr	r1, [pc, #24]	; (8020824 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 802080a:	4b06      	ldr	r3, [pc, #24]	; (8020824 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 802080c:	69db      	ldr	r3, [r3, #28]
 802080e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8020812:	687b      	ldr	r3, [r7, #4]
 8020814:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8020816:	4313      	orrs	r3, r2
 8020818:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 802081a:	370c      	adds	r7, #12
 802081c:	46bd      	mov	sp, r7
 802081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020822:	4770      	bx	lr
 8020824:	50004600 	.word	0x50004600

08020828 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8020828:	b480      	push	{r7}
 802082a:	b083      	sub	sp, #12
 802082c:	af00      	add	r7, sp, #0
 802082e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8020830:	4906      	ldr	r1, [pc, #24]	; (802084c <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8020832:	4b06      	ldr	r3, [pc, #24]	; (802084c <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8020834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020836:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 802083a:	687b      	ldr	r3, [r7, #4]
 802083c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 802083e:	4313      	orrs	r3, r2
 8020840:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8020842:	370c      	adds	r7, #12
 8020844:	46bd      	mov	sp, r7
 8020846:	f85d 7b04 	ldr.w	r7, [sp], #4
 802084a:	4770      	bx	lr
 802084c:	50004600 	.word	0x50004600

08020850 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8020850:	b480      	push	{r7}
 8020852:	b083      	sub	sp, #12
 8020854:	af00      	add	r7, sp, #0
 8020856:	4603      	mov	r3, r0
 8020858:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 802085a:	4a04      	ldr	r2, [pc, #16]	; (802086c <XMC_SCU_CLOCK_EnableClock+0x1c>)
 802085c:	79fb      	ldrb	r3, [r7, #7]
 802085e:	6053      	str	r3, [r2, #4]
}
 8020860:	370c      	adds	r7, #12
 8020862:	46bd      	mov	sp, r7
 8020864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020868:	4770      	bx	lr
 802086a:	bf00      	nop
 802086c:	50004600 	.word	0x50004600

08020870 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8020870:	b480      	push	{r7}
 8020872:	b085      	sub	sp, #20
 8020874:	af00      	add	r7, sp, #0
 8020876:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8020878:	687b      	ldr	r3, [r7, #4]
 802087a:	0f1b      	lsrs	r3, r3, #28
 802087c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 802087e:	687b      	ldr	r3, [r7, #4]
 8020880:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8020884:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8020886:	68fa      	ldr	r2, [r7, #12]
 8020888:	4613      	mov	r3, r2
 802088a:	005b      	lsls	r3, r3, #1
 802088c:	4413      	add	r3, r2
 802088e:	009b      	lsls	r3, r3, #2
 8020890:	461a      	mov	r2, r3
 8020892:	4b04      	ldr	r3, [pc, #16]	; (80208a4 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8020894:	4413      	add	r3, r2
 8020896:	68ba      	ldr	r2, [r7, #8]
 8020898:	601a      	str	r2, [r3, #0]
}
 802089a:	3714      	adds	r7, #20
 802089c:	46bd      	mov	sp, r7
 802089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208a2:	4770      	bx	lr
 80208a4:	50004648 	.word	0x50004648

080208a8 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* API to ungate a given module clock */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 80208a8:	b480      	push	{r7}
 80208aa:	b085      	sub	sp, #20
 80208ac:	af00      	add	r7, sp, #0
 80208ae:	6078      	str	r0, [r7, #4]
  uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
 80208b0:	687b      	ldr	r3, [r7, #4]
 80208b2:	0f1b      	lsrs	r3, r3, #28
 80208b4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80208b6:	687b      	ldr	r3, [r7, #4]
 80208b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80208bc:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
 80208be:	68fa      	ldr	r2, [r7, #12]
 80208c0:	4613      	mov	r3, r2
 80208c2:	005b      	lsls	r3, r3, #1
 80208c4:	4413      	add	r3, r2
 80208c6:	009b      	lsls	r3, r3, #2
 80208c8:	461a      	mov	r2, r3
 80208ca:	4b08      	ldr	r3, [pc, #32]	; (80208ec <XMC_SCU_CLOCK_IsPeripheralClockGated+0x44>)
 80208cc:	4413      	add	r3, r2
 80208ce:	681a      	ldr	r2, [r3, #0]
 80208d0:	68bb      	ldr	r3, [r7, #8]
 80208d2:	4013      	ands	r3, r2
 80208d4:	2b00      	cmp	r3, #0
 80208d6:	bf14      	ite	ne
 80208d8:	2301      	movne	r3, #1
 80208da:	2300      	moveq	r3, #0
 80208dc:	b2db      	uxtb	r3, r3
}
 80208de:	4618      	mov	r0, r3
 80208e0:	3714      	adds	r7, #20
 80208e2:	46bd      	mov	sp, r7
 80208e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208e8:	4770      	bx	lr
 80208ea:	bf00      	nop
 80208ec:	50004640 	.word	0x50004640

080208f0 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 80208f0:	b480      	push	{r7}
 80208f2:	b083      	sub	sp, #12
 80208f4:	af00      	add	r7, sp, #0
 80208f6:	6078      	str	r0, [r7, #4]
 80208f8:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80208fa:	4a19      	ldr	r2, [pc, #100]	; (8020960 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80208fc:	4b18      	ldr	r3, [pc, #96]	; (8020960 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80208fe:	695b      	ldr	r3, [r3, #20]
 8020900:	f043 0301 	orr.w	r3, r3, #1
 8020904:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8020906:	4a16      	ldr	r2, [pc, #88]	; (8020960 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8020908:	4b15      	ldr	r3, [pc, #84]	; (8020960 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 802090a:	695b      	ldr	r3, [r3, #20]
 802090c:	f043 0310 	orr.w	r3, r3, #16
 8020910:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8020912:	4913      	ldr	r1, [pc, #76]	; (8020960 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8020914:	683b      	ldr	r3, [r7, #0]
 8020916:	3b01      	subs	r3, #1
 8020918:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 802091a:	687b      	ldr	r3, [r7, #4]
 802091c:	3b01      	subs	r3, #1
 802091e:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8020920:	4313      	orrs	r3, r2
 8020922:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8020924:	4a0e      	ldr	r2, [pc, #56]	; (8020960 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8020926:	4b0e      	ldr	r3, [pc, #56]	; (8020960 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8020928:	695b      	ldr	r3, [r3, #20]
 802092a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802092e:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8020930:	4a0b      	ldr	r2, [pc, #44]	; (8020960 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8020932:	4b0b      	ldr	r3, [pc, #44]	; (8020960 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8020934:	695b      	ldr	r3, [r3, #20]
 8020936:	f023 0310 	bic.w	r3, r3, #16
 802093a:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 802093c:	4a08      	ldr	r2, [pc, #32]	; (8020960 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 802093e:	4b08      	ldr	r3, [pc, #32]	; (8020960 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8020940:	695b      	ldr	r3, [r3, #20]
 8020942:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8020946:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8020948:	bf00      	nop
 802094a:	4b05      	ldr	r3, [pc, #20]	; (8020960 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 802094c:	691b      	ldr	r3, [r3, #16]
 802094e:	f003 0304 	and.w	r3, r3, #4
 8020952:	2b00      	cmp	r3, #0
 8020954:	d0f9      	beq.n	802094a <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8020956:	370c      	adds	r7, #12
 8020958:	46bd      	mov	sp, r7
 802095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802095e:	4770      	bx	lr
 8020960:	50004710 	.word	0x50004710

08020964 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8020964:	b580      	push	{r7, lr}
 8020966:	b082      	sub	sp, #8
 8020968:	af00      	add	r7, sp, #0
 802096a:	4603      	mov	r3, r0
 802096c:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 802096e:	4a0f      	ldr	r2, [pc, #60]	; (80209ac <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8020970:	4b0e      	ldr	r3, [pc, #56]	; (80209ac <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8020972:	685b      	ldr	r3, [r3, #4]
 8020974:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020978:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 802097a:	79fb      	ldrb	r3, [r7, #7]
 802097c:	2b01      	cmp	r3, #1
 802097e:	d10e      	bne.n	802099e <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8020980:	4a0a      	ldr	r2, [pc, #40]	; (80209ac <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8020982:	4b0a      	ldr	r3, [pc, #40]	; (80209ac <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8020984:	685b      	ldr	r3, [r3, #4]
 8020986:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 802098a:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 802098c:	2064      	movs	r0, #100	; 0x64
 802098e:	f7ff fd59 	bl	8020444 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8020992:	4a06      	ldr	r2, [pc, #24]	; (80209ac <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8020994:	4b05      	ldr	r3, [pc, #20]	; (80209ac <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8020996:	685b      	ldr	r3, [r3, #4]
 8020998:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802099c:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 802099e:	2064      	movs	r0, #100	; 0x64
 80209a0:	f7ff fd50 	bl	8020444 <XMC_SCU_lDelay>
}
 80209a4:	3708      	adds	r7, #8
 80209a6:	46bd      	mov	sp, r7
 80209a8:	bd80      	pop	{r7, pc}
 80209aa:	bf00      	nop
 80209ac:	50004710 	.word	0x50004710

080209b0 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 80209b0:	b480      	push	{r7}
 80209b2:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80209b4:	4b12      	ldr	r3, [pc, #72]	; (8020a00 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80209b6:	681b      	ldr	r3, [r3, #0]
 80209b8:	f003 0301 	and.w	r3, r3, #1
 80209bc:	2b00      	cmp	r3, #0
 80209be:	d109      	bne.n	80209d4 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80209c0:	4b0f      	ldr	r3, [pc, #60]	; (8020a00 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80209c2:	2201      	movs	r2, #1
 80209c4:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80209c6:	bf00      	nop
 80209c8:	4b0d      	ldr	r3, [pc, #52]	; (8020a00 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80209ca:	681b      	ldr	r3, [r3, #0]
 80209cc:	f003 0301 	and.w	r3, r3, #1
 80209d0:	2b00      	cmp	r3, #0
 80209d2:	d0f9      	beq.n	80209c8 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80209d4:	4b0b      	ldr	r3, [pc, #44]	; (8020a04 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80209d6:	681b      	ldr	r3, [r3, #0]
 80209d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80209dc:	2b00      	cmp	r3, #0
 80209de:	d00a      	beq.n	80209f6 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 80209e0:	4b08      	ldr	r3, [pc, #32]	; (8020a04 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80209e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80209e6:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 80209e8:	bf00      	nop
 80209ea:	4b06      	ldr	r3, [pc, #24]	; (8020a04 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80209ec:	681b      	ldr	r3, [r3, #0]
 80209ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80209f2:	2b00      	cmp	r3, #0
 80209f4:	d1f9      	bne.n	80209ea <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 80209f6:	46bd      	mov	sp, r7
 80209f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209fc:	4770      	bx	lr
 80209fe:	bf00      	nop
 8020a00:	50004200 	.word	0x50004200
 8020a04:	50004400 	.word	0x50004400

08020a08 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8020a08:	b480      	push	{r7}
 8020a0a:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8020a0c:	4b06      	ldr	r3, [pc, #24]	; (8020a28 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8020a0e:	681b      	ldr	r3, [r3, #0]
 8020a10:	f003 0308 	and.w	r3, r3, #8
 8020a14:	2b00      	cmp	r3, #0
 8020a16:	bf0c      	ite	eq
 8020a18:	2301      	moveq	r3, #1
 8020a1a:	2300      	movne	r3, #0
 8020a1c:	b2db      	uxtb	r3, r3
}
 8020a1e:	4618      	mov	r0, r3
 8020a20:	46bd      	mov	sp, r7
 8020a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a26:	4770      	bx	lr
 8020a28:	50004300 	.word	0x50004300

08020a2c <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8020a2c:	b480      	push	{r7}
 8020a2e:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8020a30:	bf00      	nop
 8020a32:	4b15      	ldr	r3, [pc, #84]	; (8020a88 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>)
 8020a34:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8020a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020a3c:	2b00      	cmp	r3, #0
 8020a3e:	d1f8      	bne.n	8020a32 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until the update of OSCULCTRL register in hibernate domain is completed */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8020a40:	4a12      	ldr	r2, [pc, #72]	; (8020a8c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8020a42:	4b12      	ldr	r3, [pc, #72]	; (8020a8c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8020a44:	69db      	ldr	r3, [r3, #28]
 8020a46:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8020a4a:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8020a4c:	bf00      	nop
 8020a4e:	4b0e      	ldr	r3, [pc, #56]	; (8020a88 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>)
 8020a50:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8020a54:	f003 0308 	and.w	r3, r3, #8
 8020a58:	2b00      	cmp	r3, #0
 8020a5a:	d1f8      	bne.n	8020a4e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8020a5c:	4a0b      	ldr	r2, [pc, #44]	; (8020a8c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8020a5e:	4b0b      	ldr	r3, [pc, #44]	; (8020a8c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8020a60:	68db      	ldr	r3, [r3, #12]
 8020a62:	f043 0308 	orr.w	r3, r3, #8
 8020a66:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8020a68:	bf00      	nop
 8020a6a:	4b07      	ldr	r3, [pc, #28]	; (8020a88 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>)
 8020a6c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8020a70:	f003 0304 	and.w	r3, r3, #4
 8020a74:	2b00      	cmp	r3, #0
 8020a76:	d1f8      	bne.n	8020a6a <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8020a78:	4b04      	ldr	r3, [pc, #16]	; (8020a8c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8020a7a:	2208      	movs	r2, #8
 8020a7c:	609a      	str	r2, [r3, #8]
}
 8020a7e:	46bd      	mov	sp, r7
 8020a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a84:	4770      	bx	lr
 8020a86:	bf00      	nop
 8020a88:	50004000 	.word	0x50004000
 8020a8c:	50004300 	.word	0x50004300

08020a90 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8020a90:	b5b0      	push	{r4, r5, r7, lr}
 8020a92:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8020a94:	4a0f      	ldr	r2, [pc, #60]	; (8020ad4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8020a96:	4b0f      	ldr	r3, [pc, #60]	; (8020ad4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8020a98:	685b      	ldr	r3, [r3, #4]
 8020a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8020a9e:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8020aa0:	4d0d      	ldr	r5, [pc, #52]	; (8020ad8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8020aa2:	4b0d      	ldr	r3, [pc, #52]	; (8020ad8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8020aa4:	685b      	ldr	r3, [r3, #4]
 8020aa6:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8020aaa:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8020aae:	f007 fd81 	bl	80285b4 <OSCHP_GetFrequency>
 8020ab2:	4602      	mov	r2, r0
 8020ab4:	4b09      	ldr	r3, [pc, #36]	; (8020adc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8020ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8020aba:	0d1b      	lsrs	r3, r3, #20
 8020abc:	3b01      	subs	r3, #1
 8020abe:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8020ac0:	4323      	orrs	r3, r4
 8020ac2:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8020ac4:	4a03      	ldr	r2, [pc, #12]	; (8020ad4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8020ac6:	4b03      	ldr	r3, [pc, #12]	; (8020ad4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8020ac8:	685b      	ldr	r3, [r3, #4]
 8020aca:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8020ace:	6053      	str	r3, [r2, #4]
}
 8020ad0:	bdb0      	pop	{r4, r5, r7, pc}
 8020ad2:	bf00      	nop
 8020ad4:	50004710 	.word	0x50004710
 8020ad8:	50004700 	.word	0x50004700
 8020adc:	6b5fca6b 	.word	0x6b5fca6b

08020ae0 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8020ae0:	b480      	push	{r7}
 8020ae2:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8020ae4:	4b07      	ldr	r3, [pc, #28]	; (8020b04 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8020ae6:	681b      	ldr	r3, [r3, #0]
 8020ae8:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8020aec:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8020af0:	bf0c      	ite	eq
 8020af2:	2301      	moveq	r3, #1
 8020af4:	2300      	movne	r3, #0
 8020af6:	b2db      	uxtb	r3, r3
}
 8020af8:	4618      	mov	r0, r3
 8020afa:	46bd      	mov	sp, r7
 8020afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b00:	4770      	bx	lr
 8020b02:	bf00      	nop
 8020b04:	50004710 	.word	0x50004710

08020b08 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8020b08:	b480      	push	{r7}
 8020b0a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8020b0c:	4a05      	ldr	r2, [pc, #20]	; (8020b24 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8020b0e:	4b05      	ldr	r3, [pc, #20]	; (8020b24 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8020b10:	685b      	ldr	r3, [r3, #4]
 8020b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8020b16:	f023 0302 	bic.w	r3, r3, #2
 8020b1a:	6053      	str	r3, [r2, #4]
}
 8020b1c:	46bd      	mov	sp, r7
 8020b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b22:	4770      	bx	lr
 8020b24:	50004710 	.word	0x50004710

08020b28 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8020b28:	b480      	push	{r7}
 8020b2a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8020b2c:	4a05      	ldr	r2, [pc, #20]	; (8020b44 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8020b2e:	4b05      	ldr	r3, [pc, #20]	; (8020b44 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8020b30:	685b      	ldr	r3, [r3, #4]
 8020b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8020b36:	f043 0302 	orr.w	r3, r3, #2
 8020b3a:	6053      	str	r3, [r2, #4]
}
 8020b3c:	46bd      	mov	sp, r7
 8020b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b42:	4770      	bx	lr
 8020b44:	50004710 	.word	0x50004710

08020b48 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8020b48:	b580      	push	{r7, lr}
 8020b4a:	b086      	sub	sp, #24
 8020b4c:	af00      	add	r7, sp, #0
 8020b4e:	60ba      	str	r2, [r7, #8]
 8020b50:	607b      	str	r3, [r7, #4]
 8020b52:	4603      	mov	r3, r0
 8020b54:	81fb      	strh	r3, [r7, #14]
 8020b56:	460b      	mov	r3, r1
 8020b58:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8020b5a:	89fb      	ldrh	r3, [r7, #14]
 8020b5c:	4618      	mov	r0, r3
 8020b5e:	f7ff fd8f 	bl	8020680 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8020b62:	7b7b      	ldrb	r3, [r7, #13]
 8020b64:	2b01      	cmp	r3, #1
 8020b66:	f040 8084 	bne.w	8020c72 <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8020b6a:	89fb      	ldrh	r3, [r7, #14]
 8020b6c:	2b00      	cmp	r3, #0
 8020b6e:	d109      	bne.n	8020b84 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8020b70:	f007 fd20 	bl	80285b4 <OSCHP_GetFrequency>
 8020b74:	4602      	mov	r2, r0
 8020b76:	4b4b      	ldr	r3, [pc, #300]	; (8020ca4 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8020b78:	fba3 2302 	umull	r2, r3, r3, r2
 8020b7c:	0c9b      	lsrs	r3, r3, #18
 8020b7e:	059b      	lsls	r3, r3, #22
 8020b80:	617b      	str	r3, [r7, #20]
 8020b82:	e002      	b.n	8020b8a <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8020b84:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8020b88:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8020b8a:	697b      	ldr	r3, [r7, #20]
 8020b8c:	687a      	ldr	r2, [r7, #4]
 8020b8e:	fb02 f203 	mul.w	r2, r2, r3
 8020b92:	68bb      	ldr	r3, [r7, #8]
 8020b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8020b98:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8020b9a:	697b      	ldr	r3, [r7, #20]
 8020b9c:	4a42      	ldr	r2, [pc, #264]	; (8020ca8 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8020b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8020ba2:	091b      	lsrs	r3, r3, #4
 8020ba4:	0d9b      	lsrs	r3, r3, #22
 8020ba6:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8020ba8:	4a40      	ldr	r2, [pc, #256]	; (8020cac <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8020baa:	4b40      	ldr	r3, [pc, #256]	; (8020cac <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8020bac:	685b      	ldr	r3, [r3, #4]
 8020bae:	f043 0301 	orr.w	r3, r3, #1
 8020bb2:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8020bb4:	4a3d      	ldr	r2, [pc, #244]	; (8020cac <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8020bb6:	4b3d      	ldr	r3, [pc, #244]	; (8020cac <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8020bb8:	685b      	ldr	r3, [r3, #4]
 8020bba:	f043 0310 	orr.w	r3, r3, #16
 8020bbe:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8020bc0:	493a      	ldr	r1, [pc, #232]	; (8020cac <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8020bc2:	4b3a      	ldr	r3, [pc, #232]	; (8020cac <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8020bc4:	689a      	ldr	r2, [r3, #8]
 8020bc6:	4b3a      	ldr	r3, [pc, #232]	; (8020cb0 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8020bc8:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8020bca:	687a      	ldr	r2, [r7, #4]
 8020bcc:	3a01      	subs	r2, #1
 8020bce:	0212      	lsls	r2, r2, #8
 8020bd0:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8020bd2:	693b      	ldr	r3, [r7, #16]
 8020bd4:	3b01      	subs	r3, #1
 8020bd6:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8020bd8:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8020bda:	68bb      	ldr	r3, [r7, #8]
 8020bdc:	3b01      	subs	r3, #1
 8020bde:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8020be0:	4313      	orrs	r3, r2
 8020be2:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8020be4:	4a31      	ldr	r2, [pc, #196]	; (8020cac <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8020be6:	4b31      	ldr	r3, [pc, #196]	; (8020cac <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8020be8:	685b      	ldr	r3, [r3, #4]
 8020bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020bee:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8020bf0:	4a2e      	ldr	r2, [pc, #184]	; (8020cac <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8020bf2:	4b2e      	ldr	r3, [pc, #184]	; (8020cac <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8020bf4:	685b      	ldr	r3, [r3, #4]
 8020bf6:	f023 0310 	bic.w	r3, r3, #16
 8020bfa:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8020bfc:	4a2b      	ldr	r2, [pc, #172]	; (8020cac <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8020bfe:	4b2b      	ldr	r3, [pc, #172]	; (8020cac <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8020c00:	685b      	ldr	r3, [r3, #4]
 8020c02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8020c06:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8020c08:	bf00      	nop
 8020c0a:	4b28      	ldr	r3, [pc, #160]	; (8020cac <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8020c0c:	681b      	ldr	r3, [r3, #0]
 8020c0e:	f003 0304 	and.w	r3, r3, #4
 8020c12:	2b00      	cmp	r3, #0
 8020c14:	d0f9      	beq.n	8020c0a <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8020c16:	4a25      	ldr	r2, [pc, #148]	; (8020cac <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8020c18:	4b24      	ldr	r3, [pc, #144]	; (8020cac <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8020c1a:	685b      	ldr	r3, [r3, #4]
 8020c1c:	f023 0301 	bic.w	r3, r3, #1
 8020c20:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8020c22:	bf00      	nop
 8020c24:	4b21      	ldr	r3, [pc, #132]	; (8020cac <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8020c26:	681b      	ldr	r3, [r3, #0]
 8020c28:	f003 0301 	and.w	r3, r3, #1
 8020c2c:	2b00      	cmp	r3, #0
 8020c2e:	d1f9      	bne.n	8020c24 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8020c30:	697b      	ldr	r3, [r7, #20]
 8020c32:	4a20      	ldr	r2, [pc, #128]	; (8020cb4 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8020c34:	fba2 2303 	umull	r2, r3, r2, r3
 8020c38:	095b      	lsrs	r3, r3, #5
 8020c3a:	0d9b      	lsrs	r3, r3, #22
 8020c3c:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8020c3e:	6a3a      	ldr	r2, [r7, #32]
 8020c40:	693b      	ldr	r3, [r7, #16]
 8020c42:	429a      	cmp	r2, r3
 8020c44:	d202      	bcs.n	8020c4c <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8020c46:	6938      	ldr	r0, [r7, #16]
 8020c48:	f000 f838 	bl	8020cbc <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8020c4c:	697b      	ldr	r3, [r7, #20]
 8020c4e:	085b      	lsrs	r3, r3, #1
 8020c50:	4a19      	ldr	r2, [pc, #100]	; (8020cb8 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8020c52:	fba2 2303 	umull	r2, r3, r2, r3
 8020c56:	095b      	lsrs	r3, r3, #5
 8020c58:	0d9b      	lsrs	r3, r3, #22
 8020c5a:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8020c5c:	6a3a      	ldr	r2, [r7, #32]
 8020c5e:	693b      	ldr	r3, [r7, #16]
 8020c60:	429a      	cmp	r2, r3
 8020c62:	d202      	bcs.n	8020c6a <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8020c64:	6938      	ldr	r0, [r7, #16]
 8020c66:	f000 f829 	bl	8020cbc <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8020c6a:	6a38      	ldr	r0, [r7, #32]
 8020c6c:	f000 f826 	bl	8020cbc <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8020c70:	e015      	b.n	8020c9e <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8020c72:	490e      	ldr	r1, [pc, #56]	; (8020cac <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8020c74:	4b0d      	ldr	r3, [pc, #52]	; (8020cac <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8020c76:	689b      	ldr	r3, [r3, #8]
 8020c78:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8020c7c:	6a3b      	ldr	r3, [r7, #32]
 8020c7e:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8020c80:	4313      	orrs	r3, r2
 8020c82:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8020c84:	4a09      	ldr	r2, [pc, #36]	; (8020cac <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8020c86:	4b09      	ldr	r3, [pc, #36]	; (8020cac <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8020c88:	685b      	ldr	r3, [r3, #4]
 8020c8a:	f043 0301 	orr.w	r3, r3, #1
 8020c8e:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8020c90:	bf00      	nop
 8020c92:	4b06      	ldr	r3, [pc, #24]	; (8020cac <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8020c94:	681b      	ldr	r3, [r3, #0]
 8020c96:	f003 0301 	and.w	r3, r3, #1
 8020c9a:	2b00      	cmp	r3, #0
 8020c9c:	d0f9      	beq.n	8020c92 <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8020c9e:	3718      	adds	r7, #24
 8020ca0:	46bd      	mov	sp, r7
 8020ca2:	bd80      	pop	{r7, pc}
 8020ca4:	431bde83 	.word	0x431bde83
 8020ca8:	aaaaaaab 	.word	0xaaaaaaab
 8020cac:	50004710 	.word	0x50004710
 8020cb0:	f08080ff 	.word	0xf08080ff
 8020cb4:	88888889 	.word	0x88888889
 8020cb8:	b60b60b7 	.word	0xb60b60b7

08020cbc <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8020cbc:	b580      	push	{r7, lr}
 8020cbe:	b082      	sub	sp, #8
 8020cc0:	af00      	add	r7, sp, #0
 8020cc2:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8020cc4:	4907      	ldr	r1, [pc, #28]	; (8020ce4 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8020cc6:	4b07      	ldr	r3, [pc, #28]	; (8020ce4 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8020cc8:	689b      	ldr	r3, [r3, #8]
 8020cca:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8020cce:	687b      	ldr	r3, [r7, #4]
 8020cd0:	3b01      	subs	r3, #1
 8020cd2:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8020cd4:	4313      	orrs	r3, r2
 8020cd6:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8020cd8:	2032      	movs	r0, #50	; 0x32
 8020cda:	f7ff fbb3 	bl	8020444 <XMC_SCU_lDelay>
}
 8020cde:	3708      	adds	r7, #8
 8020ce0:	46bd      	mov	sp, r7
 8020ce2:	bd80      	pop	{r7, pc}
 8020ce4:	50004710 	.word	0x50004710

08020ce8 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8020ce8:	b480      	push	{r7}
 8020cea:	b083      	sub	sp, #12
 8020cec:	af00      	add	r7, sp, #0
 8020cee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8020cf0:	687b      	ldr	r3, [r7, #4]
 8020cf2:	68db      	ldr	r3, [r3, #12]
 8020cf4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8020cf8:	687b      	ldr	r3, [r7, #4]
 8020cfa:	60da      	str	r2, [r3, #12]
}
 8020cfc:	370c      	adds	r7, #12
 8020cfe:	46bd      	mov	sp, r7
 8020d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d04:	4770      	bx	lr
 8020d06:	bf00      	nop

08020d08 <XMC_CCU4_lDeassertReset>:

  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8020d08:	b580      	push	{r7, lr}
 8020d0a:	b082      	sub	sp, #8
 8020d0c:	af00      	add	r7, sp, #0
 8020d0e:	6078      	str	r0, [r7, #4]
  switch ((uint32_t)module)
 8020d10:	687b      	ldr	r3, [r7, #4]
 8020d12:	4a12      	ldr	r2, [pc, #72]	; (8020d5c <XMC_CCU4_lDeassertReset+0x54>)
 8020d14:	4293      	cmp	r3, r2
 8020d16:	d011      	beq.n	8020d3c <XMC_CCU4_lDeassertReset+0x34>
 8020d18:	4a10      	ldr	r2, [pc, #64]	; (8020d5c <XMC_CCU4_lDeassertReset+0x54>)
 8020d1a:	4293      	cmp	r3, r2
 8020d1c:	d803      	bhi.n	8020d26 <XMC_CCU4_lDeassertReset+0x1e>
 8020d1e:	4a10      	ldr	r2, [pc, #64]	; (8020d60 <XMC_CCU4_lDeassertReset+0x58>)
 8020d20:	4293      	cmp	r3, r2
 8020d22:	d007      	beq.n	8020d34 <XMC_CCU4_lDeassertReset+0x2c>
      break;
#endif

    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   
 8020d24:	e016      	b.n	8020d54 <XMC_CCU4_lDeassertReset+0x4c>
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
 8020d26:	4a0f      	ldr	r2, [pc, #60]	; (8020d64 <XMC_CCU4_lDeassertReset+0x5c>)
 8020d28:	4293      	cmp	r3, r2
 8020d2a:	d00b      	beq.n	8020d44 <XMC_CCU4_lDeassertReset+0x3c>
 8020d2c:	4a0e      	ldr	r2, [pc, #56]	; (8020d68 <XMC_CCU4_lDeassertReset+0x60>)
 8020d2e:	4293      	cmp	r3, r2
 8020d30:	d00c      	beq.n	8020d4c <XMC_CCU4_lDeassertReset+0x44>
      break;
#endif

    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   
 8020d32:	e00f      	b.n	8020d54 <XMC_CCU4_lDeassertReset+0x4c>
__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
  {
    case (uint32_t)CCU40:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8020d34:	2004      	movs	r0, #4
 8020d36:	f7ff fc17 	bl	8020568 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 8020d3a:	e00b      	b.n	8020d54 <XMC_CCU4_lDeassertReset+0x4c>
      
#if defined(CCU41)
    case (uint32_t)CCU41:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8020d3c:	2008      	movs	r0, #8
 8020d3e:	f7ff fc13 	bl	8020568 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 8020d42:	e007      	b.n	8020d54 <XMC_CCU4_lDeassertReset+0x4c>
#endif

#if defined(CCU42)
    case (uint32_t)CCU42:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8020d44:	2010      	movs	r0, #16
 8020d46:	f7ff fc0f 	bl	8020568 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 8020d4a:	e003      	b.n	8020d54 <XMC_CCU4_lDeassertReset+0x4c>
#endif

#if defined(CCU43)
    case (uint32_t)CCU43:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8020d4c:	4807      	ldr	r0, [pc, #28]	; (8020d6c <XMC_CCU4_lDeassertReset+0x64>)
 8020d4e:	f7ff fc0b 	bl	8020568 <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 8020d52:	bf00      	nop
    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   

  }
}
 8020d54:	3708      	adds	r7, #8
 8020d56:	46bd      	mov	sp, r7
 8020d58:	bd80      	pop	{r7, pc}
 8020d5a:	bf00      	nop
 8020d5c:	40010000 	.word	0x40010000
 8020d60:	4000c000 	.word	0x4000c000
 8020d64:	40014000 	.word	0x40014000
 8020d68:	48004000 	.word	0x48004000
 8020d6c:	10000001 	.word	0x10000001

08020d70 <XMC_CCU4_lUngateClock>:

  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 8020d70:	b580      	push	{r7, lr}
 8020d72:	b082      	sub	sp, #8
 8020d74:	af00      	add	r7, sp, #0
 8020d76:	6078      	str	r0, [r7, #4]
  switch ((uint32_t)module)
 8020d78:	687b      	ldr	r3, [r7, #4]
 8020d7a:	4a12      	ldr	r2, [pc, #72]	; (8020dc4 <XMC_CCU4_lUngateClock+0x54>)
 8020d7c:	4293      	cmp	r3, r2
 8020d7e:	d011      	beq.n	8020da4 <XMC_CCU4_lUngateClock+0x34>
 8020d80:	4a10      	ldr	r2, [pc, #64]	; (8020dc4 <XMC_CCU4_lUngateClock+0x54>)
 8020d82:	4293      	cmp	r3, r2
 8020d84:	d803      	bhi.n	8020d8e <XMC_CCU4_lUngateClock+0x1e>
 8020d86:	4a10      	ldr	r2, [pc, #64]	; (8020dc8 <XMC_CCU4_lUngateClock+0x58>)
 8020d88:	4293      	cmp	r3, r2
 8020d8a:	d007      	beq.n	8020d9c <XMC_CCU4_lUngateClock+0x2c>
      break;
#endif  

    default:
      XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
      break;   
 8020d8c:	e016      	b.n	8020dbc <XMC_CCU4_lUngateClock+0x4c>
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
 8020d8e:	4a0f      	ldr	r2, [pc, #60]	; (8020dcc <XMC_CCU4_lUngateClock+0x5c>)
 8020d90:	4293      	cmp	r3, r2
 8020d92:	d00b      	beq.n	8020dac <XMC_CCU4_lUngateClock+0x3c>
 8020d94:	4a0e      	ldr	r2, [pc, #56]	; (8020dd0 <XMC_CCU4_lUngateClock+0x60>)
 8020d96:	4293      	cmp	r3, r2
 8020d98:	d00c      	beq.n	8020db4 <XMC_CCU4_lUngateClock+0x44>
      break;
#endif  

    default:
      XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
      break;   
 8020d9a:	e00f      	b.n	8020dbc <XMC_CCU4_lUngateClock+0x4c>
__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
  {
    case (uint32_t)CCU40:
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 8020d9c:	2004      	movs	r0, #4
 8020d9e:	f7ff fd67 	bl	8020870 <XMC_SCU_CLOCK_UngatePeripheralClock>
      break;
 8020da2:	e00b      	b.n	8020dbc <XMC_CCU4_lUngateClock+0x4c>
      
#if defined(CCU41)      
    case (uint32_t)CCU41:
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 8020da4:	2008      	movs	r0, #8
 8020da6:	f7ff fd63 	bl	8020870 <XMC_SCU_CLOCK_UngatePeripheralClock>
      break;
 8020daa:	e007      	b.n	8020dbc <XMC_CCU4_lUngateClock+0x4c>
#endif

#if defined(CCU42)      
    case (uint32_t)CCU42:
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 8020dac:	2010      	movs	r0, #16
 8020dae:	f7ff fd5f 	bl	8020870 <XMC_SCU_CLOCK_UngatePeripheralClock>
      break;
 8020db2:	e003      	b.n	8020dbc <XMC_CCU4_lUngateClock+0x4c>
#endif

#if defined(CCU43)      
    case (uint32_t)CCU43:
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 8020db4:	4807      	ldr	r0, [pc, #28]	; (8020dd4 <XMC_CCU4_lUngateClock+0x64>)
 8020db6:	f7ff fd5b 	bl	8020870 <XMC_SCU_CLOCK_UngatePeripheralClock>
      break;
 8020dba:	bf00      	nop
    default:
      XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
      break;   
    
  }
}
 8020dbc:	3708      	adds	r7, #8
 8020dbe:	46bd      	mov	sp, r7
 8020dc0:	bd80      	pop	{r7, pc}
 8020dc2:	bf00      	nop
 8020dc4:	40010000 	.word	0x40010000
 8020dc8:	4000c000 	.word	0x4000c000
 8020dcc:	40014000 	.word	0x40014000
 8020dd0:	48004000 	.word	0x48004000
 8020dd4:	10000001 	.word	0x10000001

08020dd8 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8020dd8:	b580      	push	{r7, lr}
 8020dda:	b082      	sub	sp, #8
 8020ddc:	af00      	add	r7, sp, #0
 8020dde:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8020de0:	2010      	movs	r0, #16
 8020de2:	f7ff fd35 	bl	8020850 <XMC_SCU_CLOCK_EnableClock>
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 8020de6:	6878      	ldr	r0, [r7, #4]
 8020de8:	f7ff ffc2 	bl	8020d70 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8020dec:	6878      	ldr	r0, [r7, #4]
 8020dee:	f7ff ff8b 	bl	8020d08 <XMC_CCU4_lDeassertReset>
#endif
}
 8020df2:	3708      	adds	r7, #8
 8020df4:	46bd      	mov	sp, r7
 8020df6:	bd80      	pop	{r7, pc}

08020df8 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8020df8:	b580      	push	{r7, lr}
 8020dfa:	b084      	sub	sp, #16
 8020dfc:	af00      	add	r7, sp, #0
 8020dfe:	6078      	str	r0, [r7, #4]
 8020e00:	460b      	mov	r3, r1
 8020e02:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8020e04:	6878      	ldr	r0, [r7, #4]
 8020e06:	f7ff ffe7 	bl	8020dd8 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8020e0a:	6878      	ldr	r0, [r7, #4]
 8020e0c:	f7ff ff6c 	bl	8020ce8 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8020e10:	687b      	ldr	r3, [r7, #4]
 8020e12:	681b      	ldr	r3, [r3, #0]
 8020e14:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8020e16:	68fb      	ldr	r3, [r7, #12]
 8020e18:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8020e1c:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8020e1e:	78fb      	ldrb	r3, [r7, #3]
 8020e20:	039b      	lsls	r3, r3, #14
 8020e22:	68fa      	ldr	r2, [r7, #12]
 8020e24:	4313      	orrs	r3, r2
 8020e26:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8020e28:	687b      	ldr	r3, [r7, #4]
 8020e2a:	68fa      	ldr	r2, [r7, #12]
 8020e2c:	601a      	str	r2, [r3, #0]
}
 8020e2e:	3710      	adds	r7, #16
 8020e30:	46bd      	mov	sp, r7
 8020e32:	bd80      	pop	{r7, pc}

08020e34 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
		                            const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8020e34:	b480      	push	{r7}
 8020e36:	b083      	sub	sp, #12
 8020e38:	af00      	add	r7, sp, #0
 8020e3a:	6078      	str	r0, [r7, #4]
 8020e3c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8020e3e:	683b      	ldr	r3, [r7, #0]
 8020e40:	681a      	ldr	r2, [r3, #0]
 8020e42:	687b      	ldr	r3, [r7, #4]
 8020e44:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8020e46:	683b      	ldr	r3, [r7, #0]
 8020e48:	795b      	ldrb	r3, [r3, #5]
 8020e4a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8020e4e:	b2db      	uxtb	r3, r3
 8020e50:	051a      	lsls	r2, r3, #20
 8020e52:	687b      	ldr	r3, [r7, #4]
 8020e54:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8020e56:	683b      	ldr	r3, [r7, #0]
 8020e58:	791b      	ldrb	r3, [r3, #4]
 8020e5a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8020e5e:	b2db      	uxtb	r3, r3
 8020e60:	461a      	mov	r2, r3
 8020e62:	687b      	ldr	r3, [r7, #4]
 8020e64:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8020e66:	683b      	ldr	r3, [r7, #0]
 8020e68:	795b      	ldrb	r3, [r3, #5]
 8020e6a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8020e6e:	b2db      	uxtb	r3, r3
 8020e70:	461a      	mov	r2, r3
 8020e72:	687b      	ldr	r3, [r7, #4]
 8020e74:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8020e76:	683b      	ldr	r3, [r7, #0]
 8020e78:	795b      	ldrb	r3, [r3, #5]
 8020e7a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8020e7e:	b2db      	uxtb	r3, r3
 8020e80:	461a      	mov	r2, r3
 8020e82:	687b      	ldr	r3, [r7, #4]
 8020e84:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8020e86:	683b      	ldr	r3, [r7, #0]
 8020e88:	791b      	ldrb	r3, [r3, #4]
 8020e8a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8020e8e:	b2db      	uxtb	r3, r3
 8020e90:	461a      	mov	r2, r3
 8020e92:	687b      	ldr	r3, [r7, #4]
 8020e94:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8020e96:	370c      	adds	r7, #12
 8020e98:	46bd      	mov	sp, r7
 8020e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e9e:	4770      	bx	lr

08020ea0 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8020ea0:	b480      	push	{r7}
 8020ea2:	b087      	sub	sp, #28
 8020ea4:	af00      	add	r7, sp, #0
 8020ea6:	6078      	str	r0, [r7, #4]
 8020ea8:	460b      	mov	r3, r1
 8020eaa:	70fb      	strb	r3, [r7, #3]
 8020eac:	4613      	mov	r3, r2
 8020eae:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8020eb0:	687b      	ldr	r3, [r7, #4]
 8020eb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8020eb6:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8020eb8:	78fb      	ldrb	r3, [r7, #3]
 8020eba:	2b09      	cmp	r3, #9
 8020ebc:	d82c      	bhi.n	8020f18 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 8020ebe:	a201      	add	r2, pc, #4	; (adr r2, 8020ec4 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 8020ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020ec4:	08020eed 	.word	0x08020eed
 8020ec8:	08020eed 	.word	0x08020eed
 8020ecc:	08020ef7 	.word	0x08020ef7
 8020ed0:	08020ef7 	.word	0x08020ef7
 8020ed4:	08020f19 	.word	0x08020f19
 8020ed8:	08020f19 	.word	0x08020f19
 8020edc:	08020f19 	.word	0x08020f19
 8020ee0:	08020f19 	.word	0x08020f19
 8020ee4:	08020f01 	.word	0x08020f01
 8020ee8:	08020f0d 	.word	0x08020f0d
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8020eec:	2303      	movs	r3, #3
 8020eee:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8020ef0:	2300      	movs	r3, #0
 8020ef2:	617b      	str	r3, [r7, #20]
      break;
 8020ef4:	e016      	b.n	8020f24 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8020ef6:	230c      	movs	r3, #12
 8020ef8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8020efa:	2302      	movs	r3, #2
 8020efc:	617b      	str	r3, [r7, #20]
      break;
 8020efe:	e011      	b.n	8020f24 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8020f00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8020f04:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8020f06:	2308      	movs	r3, #8
 8020f08:	617b      	str	r3, [r7, #20]
      break;
 8020f0a:	e00b      	b.n	8020f24 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8020f0c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8020f10:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8020f12:	230a      	movs	r3, #10
 8020f14:	617b      	str	r3, [r7, #20]
      break;
 8020f16:	e005      	b.n	8020f24 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8020f18:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8020f1c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8020f1e:	230c      	movs	r3, #12
 8020f20:	617b      	str	r3, [r7, #20]
      break;
 8020f22:	bf00      	nop
  }
  
  srs &= ~mask; 
 8020f24:	693b      	ldr	r3, [r7, #16]
 8020f26:	43db      	mvns	r3, r3
 8020f28:	68fa      	ldr	r2, [r7, #12]
 8020f2a:	4013      	ands	r3, r2
 8020f2c:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8020f2e:	78ba      	ldrb	r2, [r7, #2]
 8020f30:	697b      	ldr	r3, [r7, #20]
 8020f32:	fa02 f303 	lsl.w	r3, r2, r3
 8020f36:	68fa      	ldr	r2, [r7, #12]
 8020f38:	4313      	orrs	r3, r2
 8020f3a:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8020f3c:	687b      	ldr	r3, [r7, #4]
 8020f3e:	68fa      	ldr	r2, [r7, #12]
 8020f40:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8020f44:	371c      	adds	r7, #28
 8020f46:	46bd      	mov	sp, r7
 8020f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f4c:	4770      	bx	lr
 8020f4e:	bf00      	nop

08020f50 <XMC_DMA_GetEventStatus>:
 * Source transaction complete -> ::XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE      <br>
 * Destination transaction complete -> ::XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE <br>
 * DMA error event -> ::XMC_DMA_CH_EVENT_ERROR                                     <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetEventStatus(XMC_DMA_t *const dma)
{
 8020f50:	b480      	push	{r7}
 8020f52:	b083      	sub	sp, #12
 8020f54:	af00      	add	r7, sp, #0
 8020f56:	6078      	str	r0, [r7, #4]
  return (dma->STATUSGLEV);
 8020f58:	687b      	ldr	r3, [r7, #4]
 8020f5a:	f8d3 3360 	ldr.w	r3, [r3, #864]	; 0x360
}
 8020f5e:	4618      	mov	r0, r3
 8020f60:	370c      	adds	r7, #12
 8020f62:	46bd      	mov	sp, r7
 8020f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f68:	4770      	bx	lr
 8020f6a:	bf00      	nop

08020f6c <XMC_DMA_GetChannelsTransferCompleteStatus>:
 *
 * \par
 * The function returns GPDMA transfer complete interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsTransferCompleteStatus(XMC_DMA_t *const dma)
{
 8020f6c:	b480      	push	{r7}
 8020f6e:	b083      	sub	sp, #12
 8020f70:	af00      	add	r7, sp, #0
 8020f72:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[0]);
 8020f74:	687b      	ldr	r3, [r7, #4]
 8020f76:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
}
 8020f7a:	4618      	mov	r0, r3
 8020f7c:	370c      	adds	r7, #12
 8020f7e:	46bd      	mov	sp, r7
 8020f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f84:	4770      	bx	lr
 8020f86:	bf00      	nop

08020f88 <XMC_DMA_GetChannelsBlockCompleteStatus>:
 *
 * \par
 * The function returns GPDMA block transfer complete interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsBlockCompleteStatus(XMC_DMA_t *const dma)
{
 8020f88:	b480      	push	{r7}
 8020f8a:	b083      	sub	sp, #12
 8020f8c:	af00      	add	r7, sp, #0
 8020f8e:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[2]);
 8020f90:	687b      	ldr	r3, [r7, #4]
 8020f92:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
}
 8020f96:	4618      	mov	r0, r3
 8020f98:	370c      	adds	r7, #12
 8020f9a:	46bd      	mov	sp, r7
 8020f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fa0:	4770      	bx	lr
 8020fa2:	bf00      	nop

08020fa4 <XMC_DMA_GetChannelsSourceTransactionCompleteStatus>:
 * \par<b>Note: </b><br>
 * If the source peripheral is memory, the source transaction complete interrupt is
 * ignored.
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsSourceTransactionCompleteStatus(XMC_DMA_t *const dma)
{
 8020fa4:	b480      	push	{r7}
 8020fa6:	b083      	sub	sp, #12
 8020fa8:	af00      	add	r7, sp, #0
 8020faa:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[4]);
 8020fac:	687b      	ldr	r3, [r7, #4]
 8020fae:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
}
 8020fb2:	4618      	mov	r0, r3
 8020fb4:	370c      	adds	r7, #12
 8020fb6:	46bd      	mov	sp, r7
 8020fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fbc:	4770      	bx	lr
 8020fbe:	bf00      	nop

08020fc0 <XMC_DMA_GetChannelsDestinationTransactionCompleteStatus>:
 * \par<b>Note: </b><br>
 * If the destination peripheral is memory, the destination transaction complete
 * interrupt is ignored.
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(XMC_DMA_t *const dma)
{
 8020fc0:	b480      	push	{r7}
 8020fc2:	b083      	sub	sp, #12
 8020fc4:	af00      	add	r7, sp, #0
 8020fc6:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[6]);
 8020fc8:	687b      	ldr	r3, [r7, #4]
 8020fca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
}
 8020fce:	4618      	mov	r0, r3
 8020fd0:	370c      	adds	r7, #12
 8020fd2:	46bd      	mov	sp, r7
 8020fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fd8:	4770      	bx	lr
 8020fda:	bf00      	nop

08020fdc <XMC_DMA_GetChannelsErrorStatus>:
 *
 * \par
 * The function returns error interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsErrorStatus(XMC_DMA_t *const dma)
{
 8020fdc:	b480      	push	{r7}
 8020fde:	b083      	sub	sp, #12
 8020fe0:	af00      	add	r7, sp, #0
 8020fe2:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[8]);
 8020fe4:	687b      	ldr	r3, [r7, #4]
 8020fe6:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
}
 8020fea:	4618      	mov	r0, r3
 8020fec:	370c      	adds	r7, #12
 8020fee:	46bd      	mov	sp, r7
 8020ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ff4:	4770      	bx	lr
 8020ff6:	bf00      	nop

08020ff8 <XMC_DMA_Init>:
 * API IMPLEMENTATION
 *******************************************************************************/

/* Initialize GPDMA */
void XMC_DMA_Init(XMC_DMA_t *const dma)
{
 8020ff8:	b580      	push	{r7, lr}
 8020ffa:	b082      	sub	sp, #8
 8020ffc:	af00      	add	r7, sp, #0
 8020ffe:	6078      	str	r0, [r7, #4]
  XMC_DMA_Enable(dma);
 8021000:	6878      	ldr	r0, [r7, #4]
 8021002:	f000 f803 	bl	802100c <XMC_DMA_Enable>
}
 8021006:	3708      	adds	r7, #8
 8021008:	46bd      	mov	sp, r7
 802100a:	bd80      	pop	{r7, pc}

0802100c <XMC_DMA_Enable>:

/* Enable GPDMA module */
void XMC_DMA_Enable(XMC_DMA_t *const dma)
{
 802100c:	b580      	push	{r7, lr}
 802100e:	b082      	sub	sp, #8
 8021010:	af00      	add	r7, sp, #0
 8021012:	6078      	str	r0, [r7, #4]
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8021014:	687b      	ldr	r3, [r7, #4]
 8021016:	4a0b      	ldr	r2, [pc, #44]	; (8021044 <XMC_DMA_Enable+0x38>)
 8021018:	4293      	cmp	r3, r2
 802101a:	d106      	bne.n	802102a <XMC_DMA_Enable+0x1e>
  {
#endif
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 802101c:	480a      	ldr	r0, [pc, #40]	; (8021048 <XMC_DMA_Enable+0x3c>)
 802101e:	f7ff fc27 	bl	8020870 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 8021022:	4809      	ldr	r0, [pc, #36]	; (8021048 <XMC_DMA_Enable+0x3c>)
 8021024:	f7ff faa0 	bl	8020568 <XMC_SCU_RESET_DeassertPeripheralReset>
 8021028:	e005      	b.n	8021036 <XMC_DMA_Enable+0x2a>
#if defined(GPDMA1)
  }
  else
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 802102a:	4808      	ldr	r0, [pc, #32]	; (802104c <XMC_DMA_Enable+0x40>)
 802102c:	f7ff fc20 	bl	8020870 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 8021030:	4806      	ldr	r0, [pc, #24]	; (802104c <XMC_DMA_Enable+0x40>)
 8021032:	f7ff fa99 	bl	8020568 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#endif

  dma->DMACFGREG = 0x1U;
 8021036:	687b      	ldr	r3, [r7, #4]
 8021038:	2201      	movs	r2, #1
 802103a:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
}
 802103e:	3708      	adds	r7, #8
 8021040:	46bd      	mov	sp, r7
 8021042:	bd80      	pop	{r7, pc}
 8021044:	50014000 	.word	0x50014000
 8021048:	20000010 	.word	0x20000010
 802104c:	20000020 	.word	0x20000020

08021050 <XMC_DMA_IsEnabled>:
#endif
}

/* Check is the GPDMA peripheral is enabled */
bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma)
{
 8021050:	b580      	push	{r7, lr}
 8021052:	b084      	sub	sp, #16
 8021054:	af00      	add	r7, sp, #0
 8021056:	6078      	str	r0, [r7, #4]
  bool status;

#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8021058:	687b      	ldr	r3, [r7, #4]
 802105a:	4a33      	ldr	r2, [pc, #204]	; (8021128 <XMC_DMA_IsEnabled+0xd8>)
 802105c:	4293      	cmp	r3, r2
 802105e:	d125      	bne.n	80210ac <XMC_DMA_IsEnabled+0x5c>
  {
#endif
    status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 8021060:	4832      	ldr	r0, [pc, #200]	; (802112c <XMC_DMA_IsEnabled+0xdc>)
 8021062:	f7ff fa9d 	bl	80205a0 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8021066:	4603      	mov	r3, r0
 8021068:	2b00      	cmp	r3, #0
 802106a:	bf14      	ite	ne
 802106c:	2301      	movne	r3, #1
 802106e:	2300      	moveq	r3, #0
 8021070:	b2db      	uxtb	r3, r3
 8021072:	f083 0301 	eor.w	r3, r3, #1
 8021076:	b2db      	uxtb	r3, r3
 8021078:	73fb      	strb	r3, [r7, #15]
 802107a:	7bfb      	ldrb	r3, [r7, #15]
 802107c:	f003 0301 	and.w	r3, r3, #1
 8021080:	73fb      	strb	r3, [r7, #15]
#if defined(CLOCK_GATING_SUPPORTED)
    status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 8021082:	7bfb      	ldrb	r3, [r7, #15]
 8021084:	2b00      	cmp	r3, #0
 8021086:	d00a      	beq.n	802109e <XMC_DMA_IsEnabled+0x4e>
 8021088:	4828      	ldr	r0, [pc, #160]	; (802112c <XMC_DMA_IsEnabled+0xdc>)
 802108a:	f7ff fc0d 	bl	80208a8 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 802108e:	4603      	mov	r3, r0
 8021090:	f083 0301 	eor.w	r3, r3, #1
 8021094:	b2db      	uxtb	r3, r3
 8021096:	2b00      	cmp	r3, #0
 8021098:	d001      	beq.n	802109e <XMC_DMA_IsEnabled+0x4e>
 802109a:	2301      	movs	r3, #1
 802109c:	e000      	b.n	80210a0 <XMC_DMA_IsEnabled+0x50>
 802109e:	2300      	movs	r3, #0
 80210a0:	73fb      	strb	r3, [r7, #15]
 80210a2:	7bfb      	ldrb	r3, [r7, #15]
 80210a4:	f003 0301 	and.w	r3, r3, #1
 80210a8:	73fb      	strb	r3, [r7, #15]
 80210aa:	e024      	b.n	80210f6 <XMC_DMA_IsEnabled+0xa6>
#endif
#if defined(GPDMA1)
  }
  else
  {
    status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 80210ac:	4820      	ldr	r0, [pc, #128]	; (8021130 <XMC_DMA_IsEnabled+0xe0>)
 80210ae:	f7ff fa77 	bl	80205a0 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 80210b2:	4603      	mov	r3, r0
 80210b4:	2b00      	cmp	r3, #0
 80210b6:	bf14      	ite	ne
 80210b8:	2301      	movne	r3, #1
 80210ba:	2300      	moveq	r3, #0
 80210bc:	b2db      	uxtb	r3, r3
 80210be:	f083 0301 	eor.w	r3, r3, #1
 80210c2:	b2db      	uxtb	r3, r3
 80210c4:	73fb      	strb	r3, [r7, #15]
 80210c6:	7bfb      	ldrb	r3, [r7, #15]
 80210c8:	f003 0301 	and.w	r3, r3, #1
 80210cc:	73fb      	strb	r3, [r7, #15]
#if defined(CLOCK_GATING_SUPPORTED)
    status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 80210ce:	7bfb      	ldrb	r3, [r7, #15]
 80210d0:	2b00      	cmp	r3, #0
 80210d2:	d00a      	beq.n	80210ea <XMC_DMA_IsEnabled+0x9a>
 80210d4:	4816      	ldr	r0, [pc, #88]	; (8021130 <XMC_DMA_IsEnabled+0xe0>)
 80210d6:	f7ff fbe7 	bl	80208a8 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 80210da:	4603      	mov	r3, r0
 80210dc:	f083 0301 	eor.w	r3, r3, #1
 80210e0:	b2db      	uxtb	r3, r3
 80210e2:	2b00      	cmp	r3, #0
 80210e4:	d001      	beq.n	80210ea <XMC_DMA_IsEnabled+0x9a>
 80210e6:	2301      	movs	r3, #1
 80210e8:	e000      	b.n	80210ec <XMC_DMA_IsEnabled+0x9c>
 80210ea:	2300      	movs	r3, #0
 80210ec:	73fb      	strb	r3, [r7, #15]
 80210ee:	7bfb      	ldrb	r3, [r7, #15]
 80210f0:	f003 0301 	and.w	r3, r3, #1
 80210f4:	73fb      	strb	r3, [r7, #15]
#endif
  }
#endif

  /* DMA reset is not asserted and peripheral clock is not gated */
  if (status == true)
 80210f6:	7bfb      	ldrb	r3, [r7, #15]
 80210f8:	2b00      	cmp	r3, #0
 80210fa:	d00f      	beq.n	802111c <XMC_DMA_IsEnabled+0xcc>
  {
    status = status && (dma->DMACFGREG != 0U);
 80210fc:	7bfb      	ldrb	r3, [r7, #15]
 80210fe:	2b00      	cmp	r3, #0
 8021100:	d006      	beq.n	8021110 <XMC_DMA_IsEnabled+0xc0>
 8021102:	687b      	ldr	r3, [r7, #4]
 8021104:	f8d3 3398 	ldr.w	r3, [r3, #920]	; 0x398
 8021108:	2b00      	cmp	r3, #0
 802110a:	d001      	beq.n	8021110 <XMC_DMA_IsEnabled+0xc0>
 802110c:	2301      	movs	r3, #1
 802110e:	e000      	b.n	8021112 <XMC_DMA_IsEnabled+0xc2>
 8021110:	2300      	movs	r3, #0
 8021112:	73fb      	strb	r3, [r7, #15]
 8021114:	7bfb      	ldrb	r3, [r7, #15]
 8021116:	f003 0301 	and.w	r3, r3, #1
 802111a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802111c:	7bfb      	ldrb	r3, [r7, #15]
}
 802111e:	4618      	mov	r0, r3
 8021120:	3710      	adds	r7, #16
 8021122:	46bd      	mov	sp, r7
 8021124:	bd80      	pop	{r7, pc}
 8021126:	bf00      	nop
 8021128:	50014000 	.word	0x50014000
 802112c:	20000010 	.word	0x20000010
 8021130:	20000020 	.word	0x20000020

08021134 <XMC_DMA_EnableRequestLine>:

/* Enable request line */
void XMC_DMA_EnableRequestLine(XMC_DMA_t *const dma, uint8_t line, uint8_t peripheral)
{
 8021134:	b480      	push	{r7}
 8021136:	b083      	sub	sp, #12
 8021138:	af00      	add	r7, sp, #0
 802113a:	6078      	str	r0, [r7, #4]
 802113c:	460b      	mov	r3, r1
 802113e:	70fb      	strb	r3, [r7, #3]
 8021140:	4613      	mov	r3, r2
 8021142:	70bb      	strb	r3, [r7, #2]
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8021144:	687b      	ldr	r3, [r7, #4]
 8021146:	4a1f      	ldr	r2, [pc, #124]	; (80211c4 <XMC_DMA_EnableRequestLine+0x90>)
 8021148:	4293      	cmp	r3, r2
 802114a:	d11b      	bne.n	8021184 <XMC_DMA_EnableRequestLine+0x50>
  {
#endif
    DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 802114c:	481e      	ldr	r0, [pc, #120]	; (80211c8 <XMC_DMA_EnableRequestLine+0x94>)
 802114e:	4b1e      	ldr	r3, [pc, #120]	; (80211c8 <XMC_DMA_EnableRequestLine+0x94>)
 8021150:	689a      	ldr	r2, [r3, #8]
 8021152:	78fb      	ldrb	r3, [r7, #3]
 8021154:	009b      	lsls	r3, r3, #2
 8021156:	4619      	mov	r1, r3
 8021158:	230f      	movs	r3, #15
 802115a:	408b      	lsls	r3, r1
 802115c:	43db      	mvns	r3, r3
 802115e:	401a      	ands	r2, r3
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 8021160:	78bb      	ldrb	r3, [r7, #2]
 8021162:	78f9      	ldrb	r1, [r7, #3]
 8021164:	0089      	lsls	r1, r1, #2
 8021166:	408b      	lsls	r3, r1
{
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
  {
#endif
    DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8021168:	4313      	orrs	r3, r2
 802116a:	6083      	str	r3, [r0, #8]
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
    DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
 802116c:	4916      	ldr	r1, [pc, #88]	; (80211c8 <XMC_DMA_EnableRequestLine+0x94>)
 802116e:	4b16      	ldr	r3, [pc, #88]	; (80211c8 <XMC_DMA_EnableRequestLine+0x94>)
 8021170:	691a      	ldr	r2, [r3, #16]
 8021172:	78fb      	ldrb	r3, [r7, #3]
 8021174:	f003 0307 	and.w	r3, r3, #7
 8021178:	2001      	movs	r0, #1
 802117a:	fa00 f303 	lsl.w	r3, r0, r3
 802117e:	4313      	orrs	r3, r2
 8021180:	610b      	str	r3, [r1, #16]
 8021182:	e019      	b.n	80211b8 <XMC_DMA_EnableRequestLine+0x84>
#if defined(GPDMA1)
  }
  else
  {
    DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8021184:	4810      	ldr	r0, [pc, #64]	; (80211c8 <XMC_DMA_EnableRequestLine+0x94>)
 8021186:	4b10      	ldr	r3, [pc, #64]	; (80211c8 <XMC_DMA_EnableRequestLine+0x94>)
 8021188:	68da      	ldr	r2, [r3, #12]
 802118a:	78fb      	ldrb	r3, [r7, #3]
 802118c:	009b      	lsls	r3, r3, #2
 802118e:	4619      	mov	r1, r3
 8021190:	230f      	movs	r3, #15
 8021192:	408b      	lsls	r3, r1
 8021194:	43db      	mvns	r3, r3
 8021196:	401a      	ands	r2, r3
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 8021198:	78bb      	ldrb	r3, [r7, #2]
 802119a:	78f9      	ldrb	r1, [r7, #3]
 802119c:	0089      	lsls	r1, r1, #2
 802119e:	408b      	lsls	r3, r1
    DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
#if defined(GPDMA1)
  }
  else
  {
    DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 80211a0:	4313      	orrs	r3, r2
 80211a2:	60c3      	str	r3, [r0, #12]
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
    DLR->LNEN |= (0x100UL << line);
 80211a4:	4908      	ldr	r1, [pc, #32]	; (80211c8 <XMC_DMA_EnableRequestLine+0x94>)
 80211a6:	4b08      	ldr	r3, [pc, #32]	; (80211c8 <XMC_DMA_EnableRequestLine+0x94>)
 80211a8:	691a      	ldr	r2, [r3, #16]
 80211aa:	78fb      	ldrb	r3, [r7, #3]
 80211ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80211b0:	fa00 f303 	lsl.w	r3, r0, r3
 80211b4:	4313      	orrs	r3, r2
 80211b6:	610b      	str	r3, [r1, #16]
  }
#endif
}
 80211b8:	370c      	adds	r7, #12
 80211ba:	46bd      	mov	sp, r7
 80211bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211c0:	4770      	bx	lr
 80211c2:	bf00      	nop
 80211c4:	50014000 	.word	0x50014000
 80211c8:	50004900 	.word	0x50004900

080211cc <XMC_DMA_CH_IsEnabled>:
  }
}

/* Check if a DMA channel is enabled */
bool XMC_DMA_CH_IsEnabled(XMC_DMA_t *const dma, const uint8_t channel)
{
 80211cc:	b480      	push	{r7}
 80211ce:	b083      	sub	sp, #12
 80211d0:	af00      	add	r7, sp, #0
 80211d2:	6078      	str	r0, [r7, #4]
 80211d4:	460b      	mov	r3, r1
 80211d6:	70fb      	strb	r3, [r7, #3]
  return (bool)(dma->CHENREG & ((uint32_t)1U << channel));
 80211d8:	687b      	ldr	r3, [r7, #4]
 80211da:	f8d3 23a0 	ldr.w	r2, [r3, #928]	; 0x3a0
 80211de:	78fb      	ldrb	r3, [r7, #3]
 80211e0:	fa22 f303 	lsr.w	r3, r2, r3
 80211e4:	f003 0301 	and.w	r3, r3, #1
 80211e8:	2b00      	cmp	r3, #0
 80211ea:	bf14      	ite	ne
 80211ec:	2301      	movne	r3, #1
 80211ee:	2300      	moveq	r3, #0
 80211f0:	b2db      	uxtb	r3, r3
}
 80211f2:	4618      	mov	r0, r3
 80211f4:	370c      	adds	r7, #12
 80211f6:	46bd      	mov	sp, r7
 80211f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211fc:	4770      	bx	lr
 80211fe:	bf00      	nop

08021200 <XMC_DMA_CH_Init>:

/* Initialize DMA channel */
XMC_DMA_CH_STATUS_t XMC_DMA_CH_Init(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_CONFIG_t *const config)
{
 8021200:	b580      	push	{r7, lr}
 8021202:	b086      	sub	sp, #24
 8021204:	af00      	add	r7, sp, #0
 8021206:	60f8      	str	r0, [r7, #12]
 8021208:	460b      	mov	r3, r1
 802120a:	607a      	str	r2, [r7, #4]
 802120c:	72fb      	strb	r3, [r7, #11]
  XMC_DMA_CH_STATUS_t status;
  uint8_t line;
  uint8_t peripheral;

  if (XMC_DMA_IsEnabled(dma) == true)
 802120e:	68f8      	ldr	r0, [r7, #12]
 8021210:	f7ff ff1e 	bl	8021050 <XMC_DMA_IsEnabled>
 8021214:	4603      	mov	r3, r0
 8021216:	2b00      	cmp	r3, #0
 8021218:	f000 81f1 	beq.w	80215fe <XMC_DMA_CH_Init+0x3fe>
  {
    if (XMC_DMA_CH_IsEnabled(dma, channel) == false)
 802121c:	7afb      	ldrb	r3, [r7, #11]
 802121e:	68f8      	ldr	r0, [r7, #12]
 8021220:	4619      	mov	r1, r3
 8021222:	f7ff ffd3 	bl	80211cc <XMC_DMA_CH_IsEnabled>
 8021226:	4603      	mov	r3, r0
 8021228:	f083 0301 	eor.w	r3, r3, #1
 802122c:	b2db      	uxtb	r3, r3
 802122e:	2b00      	cmp	r3, #0
 8021230:	f000 81e2 	beq.w	80215f8 <XMC_DMA_CH_Init+0x3f8>
    {
      dma->CH[channel].SAR = config->src_addr;
 8021234:	7afb      	ldrb	r3, [r7, #11]
 8021236:	687a      	ldr	r2, [r7, #4]
 8021238:	6852      	ldr	r2, [r2, #4]
 802123a:	68f9      	ldr	r1, [r7, #12]
 802123c:	2058      	movs	r0, #88	; 0x58
 802123e:	fb00 f303 	mul.w	r3, r0, r3
 8021242:	440b      	add	r3, r1
 8021244:	601a      	str	r2, [r3, #0]
      dma->CH[channel].DAR = config->dst_addr;
 8021246:	7afb      	ldrb	r3, [r7, #11]
 8021248:	687a      	ldr	r2, [r7, #4]
 802124a:	6892      	ldr	r2, [r2, #8]
 802124c:	68f9      	ldr	r1, [r7, #12]
 802124e:	2058      	movs	r0, #88	; 0x58
 8021250:	fb00 f303 	mul.w	r3, r0, r3
 8021254:	440b      	add	r3, r1
 8021256:	3308      	adds	r3, #8
 8021258:	601a      	str	r2, [r3, #0]
      dma->CH[channel].LLP = (uint32_t)config->linked_list_pointer;
 802125a:	7afb      	ldrb	r3, [r7, #11]
 802125c:	687a      	ldr	r2, [r7, #4]
 802125e:	68d2      	ldr	r2, [r2, #12]
 8021260:	4610      	mov	r0, r2
 8021262:	68fa      	ldr	r2, [r7, #12]
 8021264:	2158      	movs	r1, #88	; 0x58
 8021266:	fb01 f303 	mul.w	r3, r1, r3
 802126a:	4413      	add	r3, r2
 802126c:	3310      	adds	r3, #16
 802126e:	6018      	str	r0, [r3, #0]
      dma->CH[channel].CTLH = (uint32_t)config->block_size;
 8021270:	7afb      	ldrb	r3, [r7, #11]
 8021272:	687a      	ldr	r2, [r7, #4]
 8021274:	8b12      	ldrh	r2, [r2, #24]
 8021276:	4610      	mov	r0, r2
 8021278:	68fa      	ldr	r2, [r7, #12]
 802127a:	2158      	movs	r1, #88	; 0x58
 802127c:	fb01 f303 	mul.w	r3, r1, r3
 8021280:	4413      	add	r3, r2
 8021282:	3318      	adds	r3, #24
 8021284:	6058      	str	r0, [r3, #4]
      dma->CH[channel].CTLL = config->control;
 8021286:	7afb      	ldrb	r3, [r7, #11]
 8021288:	687a      	ldr	r2, [r7, #4]
 802128a:	6812      	ldr	r2, [r2, #0]
 802128c:	68f9      	ldr	r1, [r7, #12]
 802128e:	2058      	movs	r0, #88	; 0x58
 8021290:	fb00 f303 	mul.w	r3, r0, r3
 8021294:	440b      	add	r3, r1
 8021296:	3318      	adds	r3, #24
 8021298:	601a      	str	r2, [r3, #0]

      dma->CH[channel].CFGL = (uint32_t)((uint32_t)config->priority |
 802129a:	7afb      	ldrb	r3, [r7, #11]
 802129c:	687a      	ldr	r2, [r7, #4]
 802129e:	7ed2      	ldrb	r2, [r2, #27]
 80212a0:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
 80212a4:	68f9      	ldr	r1, [r7, #12]
 80212a6:	2058      	movs	r0, #88	; 0x58
 80212a8:	fb00 f303 	mul.w	r3, r0, r3
 80212ac:	440b      	add	r3, r1
 80212ae:	3340      	adds	r3, #64	; 0x40
 80212b0:	601a      	str	r2, [r3, #0]
                                         (uint32_t)GPDMA0_CH_CFGL_HS_SEL_SRC_Msk |
                                         (uint32_t)GPDMA0_CH_CFGL_HS_SEL_DST_Msk);

      if ((dma == XMC_DMA0) && (channel < (uint8_t)2))
 80212b2:	68fb      	ldr	r3, [r7, #12]
 80212b4:	4ab1      	ldr	r2, [pc, #708]	; (802157c <XMC_DMA_CH_Init+0x37c>)
 80212b6:	4293      	cmp	r3, r2
 80212b8:	d116      	bne.n	80212e8 <XMC_DMA_CH_Init+0xe8>
 80212ba:	7afb      	ldrb	r3, [r7, #11]
 80212bc:	2b01      	cmp	r3, #1
 80212be:	d813      	bhi.n	80212e8 <XMC_DMA_CH_Init+0xe8>
      {
        /* Configure scatter and gather */
        dma->CH[channel].SGR = config->src_gather_control;
 80212c0:	7afb      	ldrb	r3, [r7, #11]
 80212c2:	687a      	ldr	r2, [r7, #4]
 80212c4:	6912      	ldr	r2, [r2, #16]
 80212c6:	68f9      	ldr	r1, [r7, #12]
 80212c8:	2058      	movs	r0, #88	; 0x58
 80212ca:	fb00 f303 	mul.w	r3, r0, r3
 80212ce:	440b      	add	r3, r1
 80212d0:	3348      	adds	r3, #72	; 0x48
 80212d2:	601a      	str	r2, [r3, #0]
        dma->CH[channel].DSR = config->dst_scatter_control;
 80212d4:	7afb      	ldrb	r3, [r7, #11]
 80212d6:	687a      	ldr	r2, [r7, #4]
 80212d8:	6952      	ldr	r2, [r2, #20]
 80212da:	68f9      	ldr	r1, [r7, #12]
 80212dc:	2058      	movs	r0, #88	; 0x58
 80212de:	fb00 f303 	mul.w	r3, r0, r3
 80212e2:	440b      	add	r3, r1
 80212e4:	3350      	adds	r3, #80	; 0x50
 80212e6:	601a      	str	r2, [r3, #0]
      }

      if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
 80212e8:	687b      	ldr	r3, [r7, #4]
 80212ea:	8c1b      	ldrh	r3, [r3, #32]
 80212ec:	2b00      	cmp	r3, #0
 80212ee:	d14f      	bne.n	8021390 <XMC_DMA_CH_Init+0x190>
      {
        /* Hardware handshaking interface configuration */
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 80212f0:	687b      	ldr	r3, [r7, #4]
 80212f2:	789b      	ldrb	r3, [r3, #2]
 80212f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80212f8:	b2db      	uxtb	r3, r3
 80212fa:	2b10      	cmp	r3, #16
 80212fc:	d006      	beq.n	802130c <XMC_DMA_CH_Init+0x10c>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 80212fe:	687b      	ldr	r3, [r7, #4]
 8021300:	789b      	ldrb	r3, [r3, #2]
 8021302:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8021306:	b2db      	uxtb	r3, r3
      }

      if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
      {
        /* Hardware handshaking interface configuration */
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 8021308:	2b30      	cmp	r3, #48	; 0x30
 802130a:	d141      	bne.n	8021390 <XMC_DMA_CH_Init+0x190>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
        {
#if defined(GPDMA1)
          if (dma == XMC_DMA0)
 802130c:	68fb      	ldr	r3, [r7, #12]
 802130e:	4a9b      	ldr	r2, [pc, #620]	; (802157c <XMC_DMA_CH_Init+0x37c>)
 8021310:	4293      	cmp	r3, r2
 8021312:	d106      	bne.n	8021322 <XMC_DMA_CH_Init+0x122>
          {
#endif
            line = config->dst_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 8021314:	687b      	ldr	r3, [r7, #4]
 8021316:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 802131a:	f003 0307 	and.w	r3, r3, #7
 802131e:	75bb      	strb	r3, [r7, #22]
 8021320:	e005      	b.n	802132e <XMC_DMA_CH_Init+0x12e>
#if defined(GPDMA1)
          }
          else
          {
            line = config->dst_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 8021322:	687b      	ldr	r3, [r7, #4]
 8021324:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8021328:	f003 0303 	and.w	r3, r3, #3
 802132c:	75bb      	strb	r3, [r7, #22]
          }
#endif
          peripheral = config->dst_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 802132e:	687b      	ldr	r3, [r7, #4]
 8021330:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8021334:	091b      	lsrs	r3, r3, #4
 8021336:	757b      	strb	r3, [r7, #21]

          dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_DEST_PER_Pos);
 8021338:	7afb      	ldrb	r3, [r7, #11]
 802133a:	7afa      	ldrb	r2, [r7, #11]
 802133c:	68f9      	ldr	r1, [r7, #12]
 802133e:	2058      	movs	r0, #88	; 0x58
 8021340:	fb00 f202 	mul.w	r2, r0, r2
 8021344:	440a      	add	r2, r1
 8021346:	3240      	adds	r2, #64	; 0x40
 8021348:	6851      	ldr	r1, [r2, #4]
 802134a:	7dba      	ldrb	r2, [r7, #22]
 802134c:	02d2      	lsls	r2, r2, #11
 802134e:	430a      	orrs	r2, r1
 8021350:	68f9      	ldr	r1, [r7, #12]
 8021352:	2058      	movs	r0, #88	; 0x58
 8021354:	fb00 f303 	mul.w	r3, r0, r3
 8021358:	440b      	add	r3, r1
 802135a:	3340      	adds	r3, #64	; 0x40
 802135c:	605a      	str	r2, [r3, #4]
          XMC_DMA_EnableRequestLine(dma, line, peripheral);
 802135e:	7dba      	ldrb	r2, [r7, #22]
 8021360:	7d7b      	ldrb	r3, [r7, #21]
 8021362:	68f8      	ldr	r0, [r7, #12]
 8021364:	4611      	mov	r1, r2
 8021366:	461a      	mov	r2, r3
 8021368:	f7ff fee4 	bl	8021134 <XMC_DMA_EnableRequestLine>
          dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_DST_Msk;
 802136c:	7afb      	ldrb	r3, [r7, #11]
 802136e:	7afa      	ldrb	r2, [r7, #11]
 8021370:	68f9      	ldr	r1, [r7, #12]
 8021372:	2058      	movs	r0, #88	; 0x58
 8021374:	fb00 f202 	mul.w	r2, r0, r2
 8021378:	440a      	add	r2, r1
 802137a:	3240      	adds	r2, #64	; 0x40
 802137c:	6812      	ldr	r2, [r2, #0]
 802137e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8021382:	68f9      	ldr	r1, [r7, #12]
 8021384:	2058      	movs	r0, #88	; 0x58
 8021386:	fb00 f303 	mul.w	r3, r0, r3
 802138a:	440b      	add	r3, r1
 802138c:	3340      	adds	r3, #64	; 0x40
 802138e:	601a      	str	r2, [r3, #0]
        }
      }


      if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
 8021390:	687b      	ldr	r3, [r7, #4]
 8021392:	8b9b      	ldrh	r3, [r3, #28]
 8021394:	2b00      	cmp	r3, #0
 8021396:	d14c      	bne.n	8021432 <XMC_DMA_CH_Init+0x232>
      {
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 8021398:	687b      	ldr	r3, [r7, #4]
 802139a:	789b      	ldrb	r3, [r3, #2]
 802139c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80213a0:	b2db      	uxtb	r3, r3
 80213a2:	2b20      	cmp	r3, #32
 80213a4:	d006      	beq.n	80213b4 <XMC_DMA_CH_Init+0x1b4>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 80213a6:	687b      	ldr	r3, [r7, #4]
 80213a8:	789b      	ldrb	r3, [r3, #2]
 80213aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80213ae:	b2db      	uxtb	r3, r3
      }


      if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
      {
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 80213b0:	2b30      	cmp	r3, #48	; 0x30
 80213b2:	d13e      	bne.n	8021432 <XMC_DMA_CH_Init+0x232>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
        {
#if defined(GPDMA1)
          if (dma == XMC_DMA0)
 80213b4:	68fb      	ldr	r3, [r7, #12]
 80213b6:	4a71      	ldr	r2, [pc, #452]	; (802157c <XMC_DMA_CH_Init+0x37c>)
 80213b8:	4293      	cmp	r3, r2
 80213ba:	d105      	bne.n	80213c8 <XMC_DMA_CH_Init+0x1c8>
          {
#endif
            line = config->src_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 80213bc:	687b      	ldr	r3, [r7, #4]
 80213be:	7f9b      	ldrb	r3, [r3, #30]
 80213c0:	f003 0307 	and.w	r3, r3, #7
 80213c4:	75bb      	strb	r3, [r7, #22]
 80213c6:	e004      	b.n	80213d2 <XMC_DMA_CH_Init+0x1d2>
#if defined(GPDMA1)
          }
          else
          {
            line = config->src_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 80213c8:	687b      	ldr	r3, [r7, #4]
 80213ca:	7f9b      	ldrb	r3, [r3, #30]
 80213cc:	f003 0303 	and.w	r3, r3, #3
 80213d0:	75bb      	strb	r3, [r7, #22]
          }
#endif
          peripheral = config->src_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 80213d2:	687b      	ldr	r3, [r7, #4]
 80213d4:	7f9b      	ldrb	r3, [r3, #30]
 80213d6:	091b      	lsrs	r3, r3, #4
 80213d8:	757b      	strb	r3, [r7, #21]

          dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_SRC_PER_Pos);
 80213da:	7afb      	ldrb	r3, [r7, #11]
 80213dc:	7afa      	ldrb	r2, [r7, #11]
 80213de:	68f9      	ldr	r1, [r7, #12]
 80213e0:	2058      	movs	r0, #88	; 0x58
 80213e2:	fb00 f202 	mul.w	r2, r0, r2
 80213e6:	440a      	add	r2, r1
 80213e8:	3240      	adds	r2, #64	; 0x40
 80213ea:	6851      	ldr	r1, [r2, #4]
 80213ec:	7dba      	ldrb	r2, [r7, #22]
 80213ee:	01d2      	lsls	r2, r2, #7
 80213f0:	430a      	orrs	r2, r1
 80213f2:	68f9      	ldr	r1, [r7, #12]
 80213f4:	2058      	movs	r0, #88	; 0x58
 80213f6:	fb00 f303 	mul.w	r3, r0, r3
 80213fa:	440b      	add	r3, r1
 80213fc:	3340      	adds	r3, #64	; 0x40
 80213fe:	605a      	str	r2, [r3, #4]
          XMC_DMA_EnableRequestLine(dma, line, peripheral);
 8021400:	7dba      	ldrb	r2, [r7, #22]
 8021402:	7d7b      	ldrb	r3, [r7, #21]
 8021404:	68f8      	ldr	r0, [r7, #12]
 8021406:	4611      	mov	r1, r2
 8021408:	461a      	mov	r2, r3
 802140a:	f7ff fe93 	bl	8021134 <XMC_DMA_EnableRequestLine>
          dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_SRC_Msk;
 802140e:	7afb      	ldrb	r3, [r7, #11]
 8021410:	7afa      	ldrb	r2, [r7, #11]
 8021412:	68f9      	ldr	r1, [r7, #12]
 8021414:	2058      	movs	r0, #88	; 0x58
 8021416:	fb00 f202 	mul.w	r2, r0, r2
 802141a:	440a      	add	r2, r1
 802141c:	3240      	adds	r2, #64	; 0x40
 802141e:	6812      	ldr	r2, [r2, #0]
 8021420:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8021424:	68f9      	ldr	r1, [r7, #12]
 8021426:	2058      	movs	r0, #88	; 0x58
 8021428:	fb00 f303 	mul.w	r3, r0, r3
 802142c:	440b      	add	r3, r1
 802142e:	3340      	adds	r3, #64	; 0x40
 8021430:	601a      	str	r2, [r3, #0]
        }
      }
      
      XMC_DMA_CH_ClearEventStatus(dma, channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE |
 8021432:	7afb      	ldrb	r3, [r7, #11]
 8021434:	68f8      	ldr	r0, [r7, #12]
 8021436:	4619      	mov	r1, r3
 8021438:	221f      	movs	r2, #31
 802143a:	f000 f90f 	bl	802165c <XMC_DMA_CH_ClearEventStatus>
                                                           (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
                                                           (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
                                                           (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE |
                                                           (uint32_t)XMC_DMA_CH_EVENT_ERROR));

      switch (config->transfer_type)
 802143e:	687b      	ldr	r3, [r7, #4]
 8021440:	7e9b      	ldrb	r3, [r3, #26]
 8021442:	2b08      	cmp	r3, #8
 8021444:	f200 80d4 	bhi.w	80215f0 <XMC_DMA_CH_Init+0x3f0>
 8021448:	a201      	add	r2, pc, #4	; (adr r2, 8021450 <XMC_DMA_CH_Init+0x250>)
 802144a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802144e:	bf00      	nop
 8021450:	080215f1 	.word	0x080215f1
 8021454:	08021475 	.word	0x08021475
 8021458:	0802149b 	.word	0x0802149b
 802145c:	080214c1 	.word	0x080214c1
 8021460:	080214e7 	.word	0x080214e7
 8021464:	0802150d 	.word	0x0802150d
 8021468:	08021557 	.word	0x08021557
 802146c:	08021581 	.word	0x08021581
 8021470:	080215cb 	.word	0x080215cb
      {
        case XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK:
          break;

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 8021474:	7afb      	ldrb	r3, [r7, #11]
 8021476:	7afa      	ldrb	r2, [r7, #11]
 8021478:	68f9      	ldr	r1, [r7, #12]
 802147a:	2058      	movs	r0, #88	; 0x58
 802147c:	fb00 f202 	mul.w	r2, r0, r2
 8021480:	440a      	add	r2, r1
 8021482:	3240      	adds	r2, #64	; 0x40
 8021484:	6812      	ldr	r2, [r2, #0]
 8021486:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 802148a:	68f9      	ldr	r1, [r7, #12]
 802148c:	2058      	movs	r0, #88	; 0x58
 802148e:	fb00 f303 	mul.w	r3, r0, r3
 8021492:	440b      	add	r3, r1
 8021494:	3340      	adds	r3, #64	; 0x40
 8021496:	601a      	str	r2, [r3, #0]
          break;
 8021498:	e0ab      	b.n	80215f2 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 802149a:	7afb      	ldrb	r3, [r7, #11]
 802149c:	7afa      	ldrb	r2, [r7, #11]
 802149e:	68f9      	ldr	r1, [r7, #12]
 80214a0:	2058      	movs	r0, #88	; 0x58
 80214a2:	fb00 f202 	mul.w	r2, r0, r2
 80214a6:	440a      	add	r2, r1
 80214a8:	3240      	adds	r2, #64	; 0x40
 80214aa:	6812      	ldr	r2, [r2, #0]
 80214ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80214b0:	68f9      	ldr	r1, [r7, #12]
 80214b2:	2058      	movs	r0, #88	; 0x58
 80214b4:	fb00 f303 	mul.w	r3, r0, r3
 80214b8:	440b      	add	r3, r1
 80214ba:	3340      	adds	r3, #64	; 0x40
 80214bc:	601a      	str	r2, [r3, #0]
          break;
 80214be:	e098      	b.n	80215f2 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)((uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk |
 80214c0:	7afb      	ldrb	r3, [r7, #11]
 80214c2:	7afa      	ldrb	r2, [r7, #11]
 80214c4:	68f9      	ldr	r1, [r7, #12]
 80214c6:	2058      	movs	r0, #88	; 0x58
 80214c8:	fb00 f202 	mul.w	r2, r0, r2
 80214cc:	440a      	add	r2, r1
 80214ce:	3240      	adds	r2, #64	; 0x40
 80214d0:	6812      	ldr	r2, [r2, #0]
 80214d2:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80214d6:	68f9      	ldr	r1, [r7, #12]
 80214d8:	2058      	movs	r0, #88	; 0x58
 80214da:	fb00 f303 	mul.w	r3, r0, r3
 80214de:	440b      	add	r3, r1
 80214e0:	3340      	adds	r3, #64	; 0x40
 80214e2:	601a      	str	r2, [r3, #0]
                                              (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk);
          break;
 80214e4:	e085      	b.n	80215f2 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED:
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 80214e6:	7afb      	ldrb	r3, [r7, #11]
 80214e8:	7afa      	ldrb	r2, [r7, #11]
 80214ea:	68f9      	ldr	r1, [r7, #12]
 80214ec:	2058      	movs	r0, #88	; 0x58
 80214ee:	fb00 f202 	mul.w	r2, r0, r2
 80214f2:	440a      	add	r2, r1
 80214f4:	3218      	adds	r2, #24
 80214f6:	6812      	ldr	r2, [r2, #0]
 80214f8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80214fc:	68f9      	ldr	r1, [r7, #12]
 80214fe:	2058      	movs	r0, #88	; 0x58
 8021500:	fb00 f303 	mul.w	r3, r0, r3
 8021504:	440b      	add	r3, r1
 8021506:	3318      	adds	r3, #24
 8021508:	601a      	str	r2, [r3, #0]
          break;
 802150a:	e072      	b.n	80215f2 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 802150c:	7afb      	ldrb	r3, [r7, #11]
 802150e:	7afa      	ldrb	r2, [r7, #11]
 8021510:	68f9      	ldr	r1, [r7, #12]
 8021512:	2058      	movs	r0, #88	; 0x58
 8021514:	fb00 f202 	mul.w	r2, r0, r2
 8021518:	440a      	add	r2, r1
 802151a:	3240      	adds	r2, #64	; 0x40
 802151c:	6812      	ldr	r2, [r2, #0]
 802151e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8021522:	68f9      	ldr	r1, [r7, #12]
 8021524:	2058      	movs	r0, #88	; 0x58
 8021526:	fb00 f303 	mul.w	r3, r0, r3
 802152a:	440b      	add	r3, r1
 802152c:	3340      	adds	r3, #64	; 0x40
 802152e:	601a      	str	r2, [r3, #0]
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 8021530:	7afb      	ldrb	r3, [r7, #11]
 8021532:	7afa      	ldrb	r2, [r7, #11]
 8021534:	68f9      	ldr	r1, [r7, #12]
 8021536:	2058      	movs	r0, #88	; 0x58
 8021538:	fb00 f202 	mul.w	r2, r0, r2
 802153c:	440a      	add	r2, r1
 802153e:	3218      	adds	r2, #24
 8021540:	6812      	ldr	r2, [r2, #0]
 8021542:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8021546:	68f9      	ldr	r1, [r7, #12]
 8021548:	2058      	movs	r0, #88	; 0x58
 802154a:	fb00 f303 	mul.w	r3, r0, r3
 802154e:	440b      	add	r3, r1
 8021550:	3318      	adds	r3, #24
 8021552:	601a      	str	r2, [r3, #0]
          break;
 8021554:	e04d      	b.n	80215f2 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS:
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 8021556:	7afb      	ldrb	r3, [r7, #11]
 8021558:	7afa      	ldrb	r2, [r7, #11]
 802155a:	68f9      	ldr	r1, [r7, #12]
 802155c:	2058      	movs	r0, #88	; 0x58
 802155e:	fb00 f202 	mul.w	r2, r0, r2
 8021562:	440a      	add	r2, r1
 8021564:	3218      	adds	r2, #24
 8021566:	6812      	ldr	r2, [r2, #0]
 8021568:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 802156c:	68f9      	ldr	r1, [r7, #12]
 802156e:	2058      	movs	r0, #88	; 0x58
 8021570:	fb00 f303 	mul.w	r3, r0, r3
 8021574:	440b      	add	r3, r1
 8021576:	3318      	adds	r3, #24
 8021578:	601a      	str	r2, [r3, #0]
          break;
 802157a:	e03a      	b.n	80215f2 <XMC_DMA_CH_Init+0x3f2>
 802157c:	50014000 	.word	0x50014000

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 8021580:	7afb      	ldrb	r3, [r7, #11]
 8021582:	7afa      	ldrb	r2, [r7, #11]
 8021584:	68f9      	ldr	r1, [r7, #12]
 8021586:	2058      	movs	r0, #88	; 0x58
 8021588:	fb00 f202 	mul.w	r2, r0, r2
 802158c:	440a      	add	r2, r1
 802158e:	3240      	adds	r2, #64	; 0x40
 8021590:	6812      	ldr	r2, [r2, #0]
 8021592:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8021596:	68f9      	ldr	r1, [r7, #12]
 8021598:	2058      	movs	r0, #88	; 0x58
 802159a:	fb00 f303 	mul.w	r3, r0, r3
 802159e:	440b      	add	r3, r1
 80215a0:	3340      	adds	r3, #64	; 0x40
 80215a2:	601a      	str	r2, [r3, #0]
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 80215a4:	7afb      	ldrb	r3, [r7, #11]
 80215a6:	7afa      	ldrb	r2, [r7, #11]
 80215a8:	68f9      	ldr	r1, [r7, #12]
 80215aa:	2058      	movs	r0, #88	; 0x58
 80215ac:	fb00 f202 	mul.w	r2, r0, r2
 80215b0:	440a      	add	r2, r1
 80215b2:	3218      	adds	r2, #24
 80215b4:	6812      	ldr	r2, [r2, #0]
 80215b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80215ba:	68f9      	ldr	r1, [r7, #12]
 80215bc:	2058      	movs	r0, #88	; 0x58
 80215be:	fb00 f303 	mul.w	r3, r0, r3
 80215c2:	440b      	add	r3, r1
 80215c4:	3318      	adds	r3, #24
 80215c6:	601a      	str	r2, [r3, #0]
          break;
 80215c8:	e013      	b.n	80215f2 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED:
          dma->CH[channel].CTLL |= (uint32_t)((uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk |
 80215ca:	7afb      	ldrb	r3, [r7, #11]
 80215cc:	7afa      	ldrb	r2, [r7, #11]
 80215ce:	68f9      	ldr	r1, [r7, #12]
 80215d0:	2058      	movs	r0, #88	; 0x58
 80215d2:	fb00 f202 	mul.w	r2, r0, r2
 80215d6:	440a      	add	r2, r1
 80215d8:	3218      	adds	r2, #24
 80215da:	6812      	ldr	r2, [r2, #0]
 80215dc:	f042 52c0 	orr.w	r2, r2, #402653184	; 0x18000000
 80215e0:	68f9      	ldr	r1, [r7, #12]
 80215e2:	2058      	movs	r0, #88	; 0x58
 80215e4:	fb00 f303 	mul.w	r3, r0, r3
 80215e8:	440b      	add	r3, r1
 80215ea:	3318      	adds	r3, #24
 80215ec:	601a      	str	r2, [r3, #0]
                                              (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
          break;
 80215ee:	e000      	b.n	80215f2 <XMC_DMA_CH_Init+0x3f2>

        default:
          break;
 80215f0:	bf00      	nop
      }

      status = XMC_DMA_CH_STATUS_OK;
 80215f2:	2300      	movs	r3, #0
 80215f4:	75fb      	strb	r3, [r7, #23]
 80215f6:	e004      	b.n	8021602 <XMC_DMA_CH_Init+0x402>

    }
    else
    {
      status = XMC_DMA_CH_STATUS_BUSY;
 80215f8:	2302      	movs	r3, #2
 80215fa:	75fb      	strb	r3, [r7, #23]
 80215fc:	e001      	b.n	8021602 <XMC_DMA_CH_Init+0x402>
    }
  }
  else 
  {
    status = XMC_DMA_CH_STATUS_ERROR;
 80215fe:	2301      	movs	r3, #1
 8021600:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8021602:	7dfb      	ldrb	r3, [r7, #23]
}
 8021604:	4618      	mov	r0, r3
 8021606:	3718      	adds	r7, #24
 8021608:	46bd      	mov	sp, r7
 802160a:	bd80      	pop	{r7, pc}

0802160c <XMC_DMA_CH_EnableEvent>:
  return (bool)(dma->CH[channel].CFGL & (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk);
}

/* Enable GPDMA event */
void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
 802160c:	b480      	push	{r7}
 802160e:	b087      	sub	sp, #28
 8021610:	af00      	add	r7, sp, #0
 8021612:	60f8      	str	r0, [r7, #12]
 8021614:	460b      	mov	r3, r1
 8021616:	607a      	str	r2, [r7, #4]
 8021618:	72fb      	strb	r3, [r7, #11]
  uint32_t event_idx;

  for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 802161a:	2300      	movs	r3, #0
 802161c:	617b      	str	r3, [r7, #20]
 802161e:	e014      	b.n	802164a <XMC_DMA_CH_EnableEvent+0x3e>
  {
    if (event & ((uint32_t)0x1UL << event_idx))
 8021620:	697b      	ldr	r3, [r7, #20]
 8021622:	687a      	ldr	r2, [r7, #4]
 8021624:	fa22 f303 	lsr.w	r3, r2, r3
 8021628:	f003 0301 	and.w	r3, r3, #1
 802162c:	2b00      	cmp	r3, #0
 802162e:	d009      	beq.n	8021644 <XMC_DMA_CH_EnableEvent+0x38>
    {
      dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
 8021630:	697b      	ldr	r3, [r7, #20]
 8021632:	005a      	lsls	r2, r3, #1
 8021634:	7afb      	ldrb	r3, [r7, #11]
 8021636:	f240 1101 	movw	r1, #257	; 0x101
 802163a:	4099      	lsls	r1, r3
 802163c:	68fb      	ldr	r3, [r7, #12]
 802163e:	32c4      	adds	r2, #196	; 0xc4
 8021640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/* Enable GPDMA event */
void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
  uint32_t event_idx;

  for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8021644:	697b      	ldr	r3, [r7, #20]
 8021646:	3301      	adds	r3, #1
 8021648:	617b      	str	r3, [r7, #20]
 802164a:	697b      	ldr	r3, [r7, #20]
 802164c:	2b04      	cmp	r3, #4
 802164e:	d9e7      	bls.n	8021620 <XMC_DMA_CH_EnableEvent+0x14>
    if (event & ((uint32_t)0x1UL << event_idx))
    {
      dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
    }
  }
}
 8021650:	371c      	adds	r7, #28
 8021652:	46bd      	mov	sp, r7
 8021654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021658:	4770      	bx	lr
 802165a:	bf00      	nop

0802165c <XMC_DMA_CH_ClearEventStatus>:
  }
}

/* Clear GPDMA event */
void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
 802165c:	b480      	push	{r7}
 802165e:	b087      	sub	sp, #28
 8021660:	af00      	add	r7, sp, #0
 8021662:	60f8      	str	r0, [r7, #12]
 8021664:	460b      	mov	r3, r1
 8021666:	607a      	str	r2, [r7, #4]
 8021668:	72fb      	strb	r3, [r7, #11]
  uint32_t event_idx;

  for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 802166a:	2300      	movs	r3, #0
 802166c:	617b      	str	r3, [r7, #20]
 802166e:	e013      	b.n	8021698 <XMC_DMA_CH_ClearEventStatus+0x3c>
  {
    if (event & (uint32_t)((uint32_t)0x1UL << event_idx))
 8021670:	697b      	ldr	r3, [r7, #20]
 8021672:	687a      	ldr	r2, [r7, #4]
 8021674:	fa22 f303 	lsr.w	r3, r2, r3
 8021678:	f003 0301 	and.w	r3, r3, #1
 802167c:	2b00      	cmp	r3, #0
 802167e:	d008      	beq.n	8021692 <XMC_DMA_CH_ClearEventStatus+0x36>
    {
      dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
 8021680:	697b      	ldr	r3, [r7, #20]
 8021682:	005a      	lsls	r2, r3, #1
 8021684:	7afb      	ldrb	r3, [r7, #11]
 8021686:	2101      	movs	r1, #1
 8021688:	4099      	lsls	r1, r3
 802168a:	68fb      	ldr	r3, [r7, #12]
 802168c:	32ce      	adds	r2, #206	; 0xce
 802168e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/* Clear GPDMA event */
void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
  uint32_t event_idx;

  for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8021692:	697b      	ldr	r3, [r7, #20]
 8021694:	3301      	adds	r3, #1
 8021696:	617b      	str	r3, [r7, #20]
 8021698:	697b      	ldr	r3, [r7, #20]
 802169a:	2b04      	cmp	r3, #4
 802169c:	d9e8      	bls.n	8021670 <XMC_DMA_CH_ClearEventStatus+0x14>
    {
      dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
    }
  }

}
 802169e:	371c      	adds	r7, #28
 80216a0:	46bd      	mov	sp, r7
 80216a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216a6:	4770      	bx	lr

080216a8 <XMC_DMA_CH_SetEventHandler>:
  dma->CH[channel].CFGL &= (uint32_t)~(GPDMA0_CH_CFGL_RELOAD_SRC_Msk | GPDMA0_CH_CFGL_RELOAD_DST_Msk);
}

/* Set event handler */
void XMC_DMA_CH_SetEventHandler(XMC_DMA_t *const dma, const uint8_t channel, XMC_DMA_CH_EVENT_HANDLER_t event_handler)
{
 80216a8:	b480      	push	{r7}
 80216aa:	b085      	sub	sp, #20
 80216ac:	af00      	add	r7, sp, #0
 80216ae:	60f8      	str	r0, [r7, #12]
 80216b0:	460b      	mov	r3, r1
 80216b2:	607a      	str	r2, [r7, #4]
 80216b4:	72fb      	strb	r3, [r7, #11]
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 80216b6:	68fb      	ldr	r3, [r7, #12]
 80216b8:	4a09      	ldr	r2, [pc, #36]	; (80216e0 <XMC_DMA_CH_SetEventHandler+0x38>)
 80216ba:	4293      	cmp	r3, r2
 80216bc:	d105      	bne.n	80216ca <XMC_DMA_CH_SetEventHandler+0x22>
  {
#endif
    dma0_event_handlers[channel] = event_handler;
 80216be:	7afb      	ldrb	r3, [r7, #11]
 80216c0:	4908      	ldr	r1, [pc, #32]	; (80216e4 <XMC_DMA_CH_SetEventHandler+0x3c>)
 80216c2:	687a      	ldr	r2, [r7, #4]
 80216c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80216c8:	e004      	b.n	80216d4 <XMC_DMA_CH_SetEventHandler+0x2c>
#if defined(GPDMA1)
  }
  else
  {
    dma1_event_handlers[channel] = event_handler;
 80216ca:	7afb      	ldrb	r3, [r7, #11]
 80216cc:	4906      	ldr	r1, [pc, #24]	; (80216e8 <XMC_DMA_CH_SetEventHandler+0x40>)
 80216ce:	687a      	ldr	r2, [r7, #4]
 80216d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
#endif
}
 80216d4:	3714      	adds	r7, #20
 80216d6:	46bd      	mov	sp, r7
 80216d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216dc:	4770      	bx	lr
 80216de:	bf00      	nop
 80216e0:	50014000 	.word	0x50014000
 80216e4:	1fff00c4 	.word	0x1fff00c4
 80216e8:	1fff00e4 	.word	0x1fff00e4

080216ec <XMC_DMA_IRQHandler>:
  XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
}

/* Default DMA IRQ handler */
void XMC_DMA_IRQHandler(XMC_DMA_t *const dma)
{
 80216ec:	b580      	push	{r7, lr}
 80216ee:	b088      	sub	sp, #32
 80216f0:	af00      	add	r7, sp, #0
 80216f2:	6078      	str	r0, [r7, #4]
  uint32_t mask;
  XMC_DMA_CH_EVENT_HANDLER_t *dma_event_handlers;
  XMC_DMA_CH_EVENT_HANDLER_t event_handler;

#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 80216f4:	687b      	ldr	r3, [r7, #4]
 80216f6:	4a82      	ldr	r2, [pc, #520]	; (8021900 <XMC_DMA_IRQHandler+0x214>)
 80216f8:	4293      	cmp	r3, r2
 80216fa:	d102      	bne.n	8021702 <XMC_DMA_IRQHandler+0x16>
  {
#endif
    dma_event_handlers = dma0_event_handlers;
 80216fc:	4b81      	ldr	r3, [pc, #516]	; (8021904 <XMC_DMA_IRQHandler+0x218>)
 80216fe:	61bb      	str	r3, [r7, #24]
 8021700:	e001      	b.n	8021706 <XMC_DMA_IRQHandler+0x1a>
#if defined(GPDMA1)
  }
  else
  {
    dma_event_handlers = dma1_event_handlers;
 8021702:	4b81      	ldr	r3, [pc, #516]	; (8021908 <XMC_DMA_IRQHandler+0x21c>)
 8021704:	61bb      	str	r3, [r7, #24]
  }
#endif
  
  event = XMC_DMA_GetEventStatus(dma);
 8021706:	6878      	ldr	r0, [r7, #4]
 8021708:	f7ff fc22 	bl	8020f50 <XMC_DMA_GetEventStatus>
 802170c:	6178      	str	r0, [r7, #20]
  channel = 0;
 802170e:	2300      	movs	r3, #0
 8021710:	61fb      	str	r3, [r7, #28]

  if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
 8021712:	697b      	ldr	r3, [r7, #20]
 8021714:	f003 0310 	and.w	r3, r3, #16
 8021718:	2b00      	cmp	r3, #0
 802171a:	d02b      	beq.n	8021774 <XMC_DMA_IRQHandler+0x88>
  {
    event = XMC_DMA_GetChannelsErrorStatus(dma);
 802171c:	6878      	ldr	r0, [r7, #4]
 802171e:	f7ff fc5d 	bl	8020fdc <XMC_DMA_GetChannelsErrorStatus>
 8021722:	6178      	str	r0, [r7, #20]
    while (event != 0)
 8021724:	e021      	b.n	802176a <XMC_DMA_IRQHandler+0x7e>
    {
      mask = (uint32_t)1U << channel;
 8021726:	2201      	movs	r2, #1
 8021728:	69fb      	ldr	r3, [r7, #28]
 802172a:	fa02 f303 	lsl.w	r3, r2, r3
 802172e:	613b      	str	r3, [r7, #16]
      if ((event & mask) != 0)
 8021730:	697a      	ldr	r2, [r7, #20]
 8021732:	693b      	ldr	r3, [r7, #16]
 8021734:	4013      	ands	r3, r2
 8021736:	2b00      	cmp	r3, #0
 8021738:	d014      	beq.n	8021764 <XMC_DMA_IRQHandler+0x78>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_ERROR);
 802173a:	69fb      	ldr	r3, [r7, #28]
 802173c:	b2db      	uxtb	r3, r3
 802173e:	6878      	ldr	r0, [r7, #4]
 8021740:	4619      	mov	r1, r3
 8021742:	2210      	movs	r2, #16
 8021744:	f7ff ff8a 	bl	802165c <XMC_DMA_CH_ClearEventStatus>

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 8021748:	69fb      	ldr	r3, [r7, #28]
 802174a:	009b      	lsls	r3, r3, #2
 802174c:	69ba      	ldr	r2, [r7, #24]
 802174e:	4413      	add	r3, r2
 8021750:	681b      	ldr	r3, [r3, #0]
 8021752:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 8021754:	68fb      	ldr	r3, [r7, #12]
 8021756:	2b00      	cmp	r3, #0
 8021758:	d003      	beq.n	8021762 <XMC_DMA_IRQHandler+0x76>
        {
          event_handler(XMC_DMA_CH_EVENT_ERROR);
 802175a:	68fb      	ldr	r3, [r7, #12]
 802175c:	2010      	movs	r0, #16
 802175e:	4798      	blx	r3
        }
       
        break;
 8021760:	e007      	b.n	8021772 <XMC_DMA_IRQHandler+0x86>
 8021762:	e006      	b.n	8021772 <XMC_DMA_IRQHandler+0x86>
      }
      ++channel;
 8021764:	69fb      	ldr	r3, [r7, #28]
 8021766:	3301      	adds	r3, #1
 8021768:	61fb      	str	r3, [r7, #28]
  channel = 0;

  if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsErrorStatus(dma);
    while (event != 0)
 802176a:	697b      	ldr	r3, [r7, #20]
 802176c:	2b00      	cmp	r3, #0
 802176e:	d1da      	bne.n	8021726 <XMC_DMA_IRQHandler+0x3a>
 8021770:	e0c3      	b.n	80218fa <XMC_DMA_IRQHandler+0x20e>
 8021772:	e0c2      	b.n	80218fa <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
 8021774:	697b      	ldr	r3, [r7, #20]
 8021776:	f003 0301 	and.w	r3, r3, #1
 802177a:	2b00      	cmp	r3, #0
 802177c:	d02b      	beq.n	80217d6 <XMC_DMA_IRQHandler+0xea>
  {
    event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
 802177e:	6878      	ldr	r0, [r7, #4]
 8021780:	f7ff fbf4 	bl	8020f6c <XMC_DMA_GetChannelsTransferCompleteStatus>
 8021784:	6178      	str	r0, [r7, #20]
    while (event != 0)
 8021786:	e021      	b.n	80217cc <XMC_DMA_IRQHandler+0xe0>
    {
      mask = (uint32_t)1U << channel;
 8021788:	2201      	movs	r2, #1
 802178a:	69fb      	ldr	r3, [r7, #28]
 802178c:	fa02 f303 	lsl.w	r3, r2, r3
 8021790:	613b      	str	r3, [r7, #16]
      if (event & mask)
 8021792:	697a      	ldr	r2, [r7, #20]
 8021794:	693b      	ldr	r3, [r7, #16]
 8021796:	4013      	ands	r3, r2
 8021798:	2b00      	cmp	r3, #0
 802179a:	d014      	beq.n	80217c6 <XMC_DMA_IRQHandler+0xda>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE | 
 802179c:	69fb      	ldr	r3, [r7, #28]
 802179e:	b2db      	uxtb	r3, r3
 80217a0:	6878      	ldr	r0, [r7, #4]
 80217a2:	4619      	mov	r1, r3
 80217a4:	220f      	movs	r2, #15
 80217a6:	f7ff ff59 	bl	802165c <XMC_DMA_CH_ClearEventStatus>
                                                                      (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE | 
                                                                      (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE | 
                                                                      (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE));

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 80217aa:	69fb      	ldr	r3, [r7, #28]
 80217ac:	009b      	lsls	r3, r3, #2
 80217ae:	69ba      	ldr	r2, [r7, #24]
 80217b0:	4413      	add	r3, r2
 80217b2:	681b      	ldr	r3, [r3, #0]
 80217b4:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 80217b6:	68fb      	ldr	r3, [r7, #12]
 80217b8:	2b00      	cmp	r3, #0
 80217ba:	d003      	beq.n	80217c4 <XMC_DMA_IRQHandler+0xd8>
        {
          event_handler(XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 80217bc:	68fb      	ldr	r3, [r7, #12]
 80217be:	2001      	movs	r0, #1
 80217c0:	4798      	blx	r3
        }
																	  
        break;
 80217c2:	e007      	b.n	80217d4 <XMC_DMA_IRQHandler+0xe8>
 80217c4:	e006      	b.n	80217d4 <XMC_DMA_IRQHandler+0xe8>
      }
      ++channel;
 80217c6:	69fb      	ldr	r3, [r7, #28]
 80217c8:	3301      	adds	r3, #1
 80217ca:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
    while (event != 0)
 80217cc:	697b      	ldr	r3, [r7, #20]
 80217ce:	2b00      	cmp	r3, #0
 80217d0:	d1da      	bne.n	8021788 <XMC_DMA_IRQHandler+0x9c>
 80217d2:	e092      	b.n	80218fa <XMC_DMA_IRQHandler+0x20e>
 80217d4:	e091      	b.n	80218fa <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
 80217d6:	697b      	ldr	r3, [r7, #20]
 80217d8:	f003 0302 	and.w	r3, r3, #2
 80217dc:	2b00      	cmp	r3, #0
 80217de:	d02b      	beq.n	8021838 <XMC_DMA_IRQHandler+0x14c>
  {
    event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
 80217e0:	6878      	ldr	r0, [r7, #4]
 80217e2:	f7ff fbd1 	bl	8020f88 <XMC_DMA_GetChannelsBlockCompleteStatus>
 80217e6:	6178      	str	r0, [r7, #20]
    while (event != 0)
 80217e8:	e021      	b.n	802182e <XMC_DMA_IRQHandler+0x142>
    {
      mask = (uint32_t)1U << channel;
 80217ea:	2201      	movs	r2, #1
 80217ec:	69fb      	ldr	r3, [r7, #28]
 80217ee:	fa02 f303 	lsl.w	r3, r2, r3
 80217f2:	613b      	str	r3, [r7, #16]
      if (event & mask)
 80217f4:	697a      	ldr	r2, [r7, #20]
 80217f6:	693b      	ldr	r3, [r7, #16]
 80217f8:	4013      	ands	r3, r2
 80217fa:	2b00      	cmp	r3, #0
 80217fc:	d014      	beq.n	8021828 <XMC_DMA_IRQHandler+0x13c>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
 80217fe:	69fb      	ldr	r3, [r7, #28]
 8021800:	b2db      	uxtb	r3, r3
 8021802:	6878      	ldr	r0, [r7, #4]
 8021804:	4619      	mov	r1, r3
 8021806:	220e      	movs	r2, #14
 8021808:	f7ff ff28 	bl	802165c <XMC_DMA_CH_ClearEventStatus>
                                                                      (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE | 
                                                                      (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE));

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 802180c:	69fb      	ldr	r3, [r7, #28]
 802180e:	009b      	lsls	r3, r3, #2
 8021810:	69ba      	ldr	r2, [r7, #24]
 8021812:	4413      	add	r3, r2
 8021814:	681b      	ldr	r3, [r3, #0]
 8021816:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 8021818:	68fb      	ldr	r3, [r7, #12]
 802181a:	2b00      	cmp	r3, #0
 802181c:	d003      	beq.n	8021826 <XMC_DMA_IRQHandler+0x13a>
        {
          event_handler(XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE);
 802181e:	68fb      	ldr	r3, [r7, #12]
 8021820:	2002      	movs	r0, #2
 8021822:	4798      	blx	r3
        }

        break;
 8021824:	e007      	b.n	8021836 <XMC_DMA_IRQHandler+0x14a>
 8021826:	e006      	b.n	8021836 <XMC_DMA_IRQHandler+0x14a>
      }
      ++channel;
 8021828:	69fb      	ldr	r3, [r7, #28]
 802182a:	3301      	adds	r3, #1
 802182c:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
    while (event != 0)
 802182e:	697b      	ldr	r3, [r7, #20]
 8021830:	2b00      	cmp	r3, #0
 8021832:	d1da      	bne.n	80217ea <XMC_DMA_IRQHandler+0xfe>
 8021834:	e061      	b.n	80218fa <XMC_DMA_IRQHandler+0x20e>
 8021836:	e060      	b.n	80218fa <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 8021838:	697b      	ldr	r3, [r7, #20]
 802183a:	f003 0304 	and.w	r3, r3, #4
 802183e:	2b00      	cmp	r3, #0
 8021840:	d02b      	beq.n	802189a <XMC_DMA_IRQHandler+0x1ae>
  {
    event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
 8021842:	6878      	ldr	r0, [r7, #4]
 8021844:	f7ff fbae 	bl	8020fa4 <XMC_DMA_GetChannelsSourceTransactionCompleteStatus>
 8021848:	6178      	str	r0, [r7, #20]
    while (event != 0)
 802184a:	e021      	b.n	8021890 <XMC_DMA_IRQHandler+0x1a4>
    {
      mask = (uint32_t)1U << channel;
 802184c:	2201      	movs	r2, #1
 802184e:	69fb      	ldr	r3, [r7, #28]
 8021850:	fa02 f303 	lsl.w	r3, r2, r3
 8021854:	613b      	str	r3, [r7, #16]
      if (event & mask)
 8021856:	697a      	ldr	r2, [r7, #20]
 8021858:	693b      	ldr	r3, [r7, #16]
 802185a:	4013      	ands	r3, r2
 802185c:	2b00      	cmp	r3, #0
 802185e:	d014      	beq.n	802188a <XMC_DMA_IRQHandler+0x19e>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 8021860:	69fb      	ldr	r3, [r7, #28]
 8021862:	b2db      	uxtb	r3, r3
 8021864:	6878      	ldr	r0, [r7, #4]
 8021866:	4619      	mov	r1, r3
 8021868:	2204      	movs	r2, #4
 802186a:	f7ff fef7 	bl	802165c <XMC_DMA_CH_ClearEventStatus>

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 802186e:	69fb      	ldr	r3, [r7, #28]
 8021870:	009b      	lsls	r3, r3, #2
 8021872:	69ba      	ldr	r2, [r7, #24]
 8021874:	4413      	add	r3, r2
 8021876:	681b      	ldr	r3, [r3, #0]
 8021878:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 802187a:	68fb      	ldr	r3, [r7, #12]
 802187c:	2b00      	cmp	r3, #0
 802187e:	d003      	beq.n	8021888 <XMC_DMA_IRQHandler+0x19c>
        {
          event_handler(XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 8021880:	68fb      	ldr	r3, [r7, #12]
 8021882:	2004      	movs	r0, #4
 8021884:	4798      	blx	r3
        }
        
        break;
 8021886:	e007      	b.n	8021898 <XMC_DMA_IRQHandler+0x1ac>
 8021888:	e006      	b.n	8021898 <XMC_DMA_IRQHandler+0x1ac>
      }
      ++channel;
 802188a:	69fb      	ldr	r3, [r7, #28]
 802188c:	3301      	adds	r3, #1
 802188e:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
    while (event != 0)
 8021890:	697b      	ldr	r3, [r7, #20]
 8021892:	2b00      	cmp	r3, #0
 8021894:	d1da      	bne.n	802184c <XMC_DMA_IRQHandler+0x160>
 8021896:	e030      	b.n	80218fa <XMC_DMA_IRQHandler+0x20e>
 8021898:	e02f      	b.n	80218fa <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 802189a:	697b      	ldr	r3, [r7, #20]
 802189c:	f003 0308 	and.w	r3, r3, #8
 80218a0:	2b00      	cmp	r3, #0
 80218a2:	d02a      	beq.n	80218fa <XMC_DMA_IRQHandler+0x20e>
  {
    event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
 80218a4:	6878      	ldr	r0, [r7, #4]
 80218a6:	f7ff fb8b 	bl	8020fc0 <XMC_DMA_GetChannelsDestinationTransactionCompleteStatus>
 80218aa:	6178      	str	r0, [r7, #20]
    while (event != 0)
 80218ac:	e021      	b.n	80218f2 <XMC_DMA_IRQHandler+0x206>
    {
      mask = (uint32_t)1U << channel;
 80218ae:	2201      	movs	r2, #1
 80218b0:	69fb      	ldr	r3, [r7, #28]
 80218b2:	fa02 f303 	lsl.w	r3, r2, r3
 80218b6:	613b      	str	r3, [r7, #16]
      if (event & mask)
 80218b8:	697a      	ldr	r2, [r7, #20]
 80218ba:	693b      	ldr	r3, [r7, #16]
 80218bc:	4013      	ands	r3, r2
 80218be:	2b00      	cmp	r3, #0
 80218c0:	d014      	beq.n	80218ec <XMC_DMA_IRQHandler+0x200>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 80218c2:	69fb      	ldr	r3, [r7, #28]
 80218c4:	b2db      	uxtb	r3, r3
 80218c6:	6878      	ldr	r0, [r7, #4]
 80218c8:	4619      	mov	r1, r3
 80218ca:	2208      	movs	r2, #8
 80218cc:	f7ff fec6 	bl	802165c <XMC_DMA_CH_ClearEventStatus>

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 80218d0:	69fb      	ldr	r3, [r7, #28]
 80218d2:	009b      	lsls	r3, r3, #2
 80218d4:	69ba      	ldr	r2, [r7, #24]
 80218d6:	4413      	add	r3, r2
 80218d8:	681b      	ldr	r3, [r3, #0]
 80218da:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 80218dc:	68fb      	ldr	r3, [r7, #12]
 80218de:	2b00      	cmp	r3, #0
 80218e0:	d003      	beq.n	80218ea <XMC_DMA_IRQHandler+0x1fe>
        {
          event_handler(XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 80218e2:	68fb      	ldr	r3, [r7, #12]
 80218e4:	2008      	movs	r0, #8
 80218e6:	4798      	blx	r3
        }      

        break;
 80218e8:	e007      	b.n	80218fa <XMC_DMA_IRQHandler+0x20e>
 80218ea:	e006      	b.n	80218fa <XMC_DMA_IRQHandler+0x20e>
      }
      ++channel;
 80218ec:	69fb      	ldr	r3, [r7, #28]
 80218ee:	3301      	adds	r3, #1
 80218f0:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
    while (event != 0)
 80218f2:	697b      	ldr	r3, [r7, #20]
 80218f4:	2b00      	cmp	r3, #0
 80218f6:	d1da      	bne.n	80218ae <XMC_DMA_IRQHandler+0x1c2>
 80218f8:	e7ff      	b.n	80218fa <XMC_DMA_IRQHandler+0x20e>
  else
  {
    /* no active interrupt was found? */
  }

}
 80218fa:	3720      	adds	r7, #32
 80218fc:	46bd      	mov	sp, r7
 80218fe:	bd80      	pop	{r7, pc}
 8021900:	50014000 	.word	0x50014000
 8021904:	1fff00c4 	.word	0x1fff00c4
 8021908:	1fff00e4 	.word	0x1fff00e4

0802190c <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{ 
 802190c:	b580      	push	{r7, lr}
 802190e:	b084      	sub	sp, #16
 8021910:	af00      	add	r7, sp, #0
 8021912:	60f8      	str	r0, [r7, #12]
 8021914:	460b      	mov	r3, r1
 8021916:	607a      	str	r2, [r7, #4]
 8021918:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 802191a:	68f8      	ldr	r0, [r7, #12]
 802191c:	f7fe fbea 	bl	80200f4 <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL & 
 8021920:	68fb      	ldr	r3, [r7, #12]
 8021922:	681a      	ldr	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8021924:	7afb      	ldrb	r3, [r7, #11]
 8021926:	009b      	lsls	r3, r3, #2
 8021928:	4619      	mov	r1, r3
 802192a:	230f      	movs	r3, #15
 802192c:	408b      	lsls	r3, r1
 802192e:	43db      	mvns	r3, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 8021930:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 8021932:	687b      	ldr	r3, [r7, #4]
 8021934:	681b      	ldr	r3, [r3, #0]
 8021936:	7af9      	ldrb	r1, [r7, #11]
 8021938:	0089      	lsls	r1, r1, #2
 802193a:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 802193c:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL & 
 802193e:	68fb      	ldr	r3, [r7, #12]
 8021940:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  
  eru->EXICON[channel] = config->raw;
 8021942:	7afa      	ldrb	r2, [r7, #11]
 8021944:	687b      	ldr	r3, [r7, #4]
 8021946:	6859      	ldr	r1, [r3, #4]
 8021948:	68fb      	ldr	r3, [r7, #12]
 802194a:	3204      	adds	r2, #4
 802194c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8021950:	3710      	adds	r7, #16
 8021952:	46bd      	mov	sp, r7
 8021954:	bd80      	pop	{r7, pc}
 8021956:	bf00      	nop

08021958 <XMC_ERU_OGU_SetServiceRequestMode>:

/* Configures the gating scheme for service request generation by setting (GP) bit. */
void XMC_ERU_OGU_SetServiceRequestMode(XMC_ERU_t *const eru,
                                       const uint8_t channel,
                                       const XMC_ERU_OGU_SERVICE_REQUEST_t mode)
{
 8021958:	b480      	push	{r7}
 802195a:	b083      	sub	sp, #12
 802195c:	af00      	add	r7, sp, #0
 802195e:	6078      	str	r0, [r7, #4]
 8021960:	460b      	mov	r3, r1
 8021962:	70fb      	strb	r3, [r7, #3]
 8021964:	4613      	mov	r3, r2
 8021966:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Service Request Mode", XMC_ERU_OGU_CHECK_SERIVCE_REQUEST(mode));

  eru->EXOCON_b[channel].GP = (uint8_t)mode;
 8021968:	78fa      	ldrb	r2, [r7, #3]
 802196a:	78bb      	ldrb	r3, [r7, #2]
 802196c:	f003 0303 	and.w	r3, r3, #3
 8021970:	b2d9      	uxtb	r1, r3
 8021972:	687b      	ldr	r3, [r7, #4]
 8021974:	3208      	adds	r2, #8
 8021976:	f001 0103 	and.w	r1, r1, #3
 802197a:	0109      	lsls	r1, r1, #4
 802197c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8021980:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 8021984:	4301      	orrs	r1, r0
 8021986:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 802198a:	370c      	adds	r7, #12
 802198c:	46bd      	mov	sp, r7
 802198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021992:	4770      	bx	lr

08021994 <XMC_ETH_MAC_Reset>:
 *
 * \par
 * The function resets the ETH MAC peripheral. It blocks until reset.
 */
__STATIC_INLINE void XMC_ETH_MAC_Reset(XMC_ETH_MAC_t *const eth_mac)
{
 8021994:	b480      	push	{r7}
 8021996:	b083      	sub	sp, #12
 8021998:	af00      	add	r7, sp, #0
 802199a:	6078      	str	r0, [r7, #4]
  eth_mac->regs->BUS_MODE |= (uint32_t)ETH_BUS_MODE_SWR_Msk;
 802199c:	687b      	ldr	r3, [r7, #4]
 802199e:	681b      	ldr	r3, [r3, #0]
 80219a0:	687a      	ldr	r2, [r7, #4]
 80219a2:	6812      	ldr	r2, [r2, #0]
 80219a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80219a8:	6812      	ldr	r2, [r2, #0]
 80219aa:	f042 0201 	orr.w	r2, r2, #1
 80219ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80219b2:	601a      	str	r2, [r3, #0]
  while ((eth_mac->regs->BUS_MODE & (uint32_t)ETH_BUS_MODE_SWR_Msk) != 0U)
 80219b4:	bf00      	nop
 80219b6:	687b      	ldr	r3, [r7, #4]
 80219b8:	681b      	ldr	r3, [r3, #0]
 80219ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80219be:	681b      	ldr	r3, [r3, #0]
 80219c0:	f003 0301 	and.w	r3, r3, #1
 80219c4:	2b00      	cmp	r3, #0
 80219c6:	d1f6      	bne.n	80219b6 <XMC_ETH_MAC_Reset+0x22>
  {
  }
}
 80219c8:	370c      	adds	r7, #12
 80219ca:	46bd      	mov	sp, r7
 80219cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219d0:	4770      	bx	lr
 80219d2:	bf00      	nop

080219d4 <XMC_ETH_MAC_SetAddress>:
 * \par
 * The function sets the MAC address by writing to the MAC_ADDRESS0_HIGH and
 * MAC_ADDRESS0_LOW registers.
 */
__STATIC_INLINE void XMC_ETH_MAC_SetAddress(XMC_ETH_MAC_t *const eth_mac, uint64_t addr)
{
 80219d4:	b4b0      	push	{r4, r5, r7}
 80219d6:	b085      	sub	sp, #20
 80219d8:	af00      	add	r7, sp, #0
 80219da:	60f8      	str	r0, [r7, #12]
 80219dc:	e9c7 2300 	strd	r2, r3, [r7]
  eth_mac->regs->MAC_ADDRESS0_HIGH = (uint32_t)(addr >> 32);
 80219e0:	68fb      	ldr	r3, [r7, #12]
 80219e2:	6819      	ldr	r1, [r3, #0]
 80219e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80219e8:	001c      	movs	r4, r3
 80219ea:	2500      	movs	r5, #0
 80219ec:	4623      	mov	r3, r4
 80219ee:	640b      	str	r3, [r1, #64]	; 0x40
  eth_mac->regs->MAC_ADDRESS0_LOW = (uint32_t)addr;
 80219f0:	68fb      	ldr	r3, [r7, #12]
 80219f2:	681b      	ldr	r3, [r3, #0]
 80219f4:	683a      	ldr	r2, [r7, #0]
 80219f6:	645a      	str	r2, [r3, #68]	; 0x44
}
 80219f8:	3714      	adds	r7, #20
 80219fa:	46bd      	mov	sp, r7
 80219fc:	bcb0      	pop	{r4, r5, r7}
 80219fe:	4770      	bx	lr

08021a00 <XMC_SCU_CLOCK_GetSystemClockFrequency>:
 * fSYS = fCPU << CPUDIV.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
 8021a00:	b480      	push	{r7}
 8021a02:	af00      	add	r7, sp, #0
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8021a04:	4b06      	ldr	r3, [pc, #24]	; (8021a20 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x20>)
 8021a06:	681a      	ldr	r2, [r3, #0]
 8021a08:	4b06      	ldr	r3, [pc, #24]	; (8021a24 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x24>)
 8021a0a:	691b      	ldr	r3, [r3, #16]
 8021a0c:	f003 0301 	and.w	r3, r3, #1
 8021a10:	fa02 f303 	lsl.w	r3, r2, r3
}
 8021a14:	4618      	mov	r0, r3
 8021a16:	46bd      	mov	sp, r7
 8021a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a1c:	4770      	bx	lr
 8021a1e:	bf00      	nop
 8021a20:	2003ffc0 	.word	0x2003ffc0
 8021a24:	50004600 	.word	0x50004600

08021a28 <XMC_SCU_CLOCK_GetEthernetClockFrequency>:
 * fETH = fSYS >> 1;
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetSystemClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetEthernetClockFrequency(void)
{
 8021a28:	b580      	push	{r7, lr}
 8021a2a:	af00      	add	r7, sp, #0
  return XMC_SCU_CLOCK_GetSystemClockFrequency() >> 1U;
 8021a2c:	f7ff ffe8 	bl	8021a00 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 8021a30:	4603      	mov	r3, r0
 8021a32:	085b      	lsrs	r3, r3, #1
}
 8021a34:	4618      	mov	r0, r3
 8021a36:	bd80      	pop	{r7, pc}

08021a38 <XCM_ETH_MAC_IsNormalEvent>:
 * API IMPLEMENTATION
 *******************************************************************************/

/* Check if the event passed is a normal event */
__STATIC_INLINE bool XCM_ETH_MAC_IsNormalEvent(uint32_t event)
{
 8021a38:	b480      	push	{r7}
 8021a3a:	b083      	sub	sp, #12
 8021a3c:	af00      	add	r7, sp, #0
 8021a3e:	6078      	str	r0, [r7, #4]
  return (bool)((event & ((uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT |
 8021a40:	687a      	ldr	r2, [r7, #4]
 8021a42:	f244 0345 	movw	r3, #16453	; 0x4045
 8021a46:	4013      	ands	r3, r2
 8021a48:	2b00      	cmp	r3, #0
 8021a4a:	bf14      	ite	ne
 8021a4c:	2301      	movne	r3, #1
 8021a4e:	2300      	moveq	r3, #0
 8021a50:	b2db      	uxtb	r3, r3
                          (uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_BUFFER_UNAVAILABLE |
                          (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE |
                          (uint32_t)XMC_ETH_MAC_EVENT_EARLY_RECEIVE)) != (uint32_t)0);
}
 8021a52:	4618      	mov	r0, r3
 8021a54:	370c      	adds	r7, #12
 8021a56:	46bd      	mov	sp, r7
 8021a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a5c:	4770      	bx	lr
 8021a5e:	bf00      	nop

08021a60 <XCM_ETH_MAC_IsAbnormalEvent>:

/* Check if the event passed is an abnormal event */
__STATIC_INLINE bool XCM_ETH_MAC_IsAbnormalEvent(uint32_t event)
{
 8021a60:	b480      	push	{r7}
 8021a62:	b083      	sub	sp, #12
 8021a64:	af00      	add	r7, sp, #0
 8021a66:	6078      	str	r0, [r7, #4]
   return (bool)((event & ((uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_PROCESS_STOPPED |
 8021a68:	687a      	ldr	r2, [r7, #4]
 8021a6a:	f242 73ba 	movw	r3, #10170	; 0x27ba
 8021a6e:	4013      	ands	r3, r2
 8021a70:	2b00      	cmp	r3, #0
 8021a72:	bf14      	ite	ne
 8021a74:	2301      	movne	r3, #1
 8021a76:	2300      	moveq	r3, #0
 8021a78:	b2db      	uxtb	r3, r3
                           (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_BUFFER_UNAVAILABLE |
                           (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_PROCESS_STOPPED |
                           (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_WATCHDOG_TIMEOUT |
                           (uint32_t)XMC_ETH_MAC_EVENT_EARLY_TRANSMIT |
                           (uint32_t)XMC_ETH_MAC_EVENT_BUS_ERROR)) != (uint32_t)0);
 }
 8021a7a:	4618      	mov	r0, r3
 8021a7c:	370c      	adds	r7, #12
 8021a7e:	46bd      	mov	sp, r7
 8021a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a84:	4770      	bx	lr
 8021a86:	bf00      	nop

08021a88 <XMC_ETH_MAC_Init>:

#endif

/* ETH MAC initialize */
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_Init(XMC_ETH_MAC_t *const eth_mac)
{
 8021a88:	b580      	push	{r7, lr}
 8021a8a:	b084      	sub	sp, #16
 8021a8c:	af00      	add	r7, sp, #0
 8021a8e:	6078      	str	r0, [r7, #4]
  XMC_ETH_MAC_STATUS_t status;

  XMC_ASSERT("XMC_ETH_MAC_Init: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  XMC_ETH_MAC_Enable(eth_mac);
 8021a90:	6878      	ldr	r0, [r7, #4]
 8021a92:	f000 f97d 	bl	8021d90 <XMC_ETH_MAC_Enable>
  XMC_ETH_MAC_Reset(eth_mac);
 8021a96:	6878      	ldr	r0, [r7, #4]
 8021a98:	f7ff ff7c 	bl	8021994 <XMC_ETH_MAC_Reset>

  status = XMC_ETH_MAC_SetManagmentClockDivider(eth_mac);
 8021a9c:	6878      	ldr	r0, [r7, #4]
 8021a9e:	f000 f927 	bl	8021cf0 <XMC_ETH_MAC_SetManagmentClockDivider>
 8021aa2:	4603      	mov	r3, r0
 8021aa4:	73fb      	strb	r3, [r7, #15]

  XMC_ETH_MAC_SetAddress(eth_mac, eth_mac->address);
 8021aa6:	687b      	ldr	r3, [r7, #4]
 8021aa8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8021aac:	6878      	ldr	r0, [r7, #4]
 8021aae:	f7ff ff91 	bl	80219d4 <XMC_ETH_MAC_SetAddress>

  /* Initialize MAC configuration */
  eth_mac->regs->MAC_CONFIGURATION = (uint32_t)ETH_MAC_CONFIGURATION_IPC_Msk;
 8021ab2:	687b      	ldr	r3, [r7, #4]
 8021ab4:	681b      	ldr	r3, [r3, #0]
 8021ab6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8021aba:	601a      	str	r2, [r3, #0]

  /* Initialize Filter registers */
  eth_mac->regs->FLOW_CONTROL = ETH_FLOW_CONTROL_DZPQ_Msk; /* Disable Zero Quanta Pause */
 8021abc:	687b      	ldr	r3, [r7, #4]
 8021abe:	681b      	ldr	r3, [r3, #0]
 8021ac0:	2280      	movs	r2, #128	; 0x80
 8021ac2:	619a      	str	r2, [r3, #24]

  eth_mac->regs->OPERATION_MODE = (uint32_t)ETH_OPERATION_MODE_RSF_Msk |
 8021ac4:	687b      	ldr	r3, [r7, #4]
 8021ac6:	681b      	ldr	r3, [r3, #0]
 8021ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021acc:	3318      	adds	r3, #24
 8021ace:	f04f 7208 	mov.w	r2, #35651584	; 0x2200000
 8021ad2:	601a      	str	r2, [r3, #0]
		                          (uint32_t)ETH_OPERATION_MODE_TSF_Msk;

  /* Increase enhanced descriptor to 8 WORDS, required when the Advanced Time-Stamp feature or Full IPC Offload Engine is enabled */
  eth_mac->regs->BUS_MODE |= (uint32_t)ETH_BUS_MODE_ATDS_Msk;
 8021ad4:	687b      	ldr	r3, [r7, #4]
 8021ad6:	681b      	ldr	r3, [r3, #0]
 8021ad8:	687a      	ldr	r2, [r7, #4]
 8021ada:	6812      	ldr	r2, [r2, #0]
 8021adc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8021ae0:	6812      	ldr	r2, [r2, #0]
 8021ae2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8021ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021aea:	601a      	str	r2, [r3, #0]

  /* Initialize DMA Descriptors */
  XMC_ETH_MAC_InitRxDescriptors(eth_mac);
 8021aec:	6878      	ldr	r0, [r7, #4]
 8021aee:	f000 f81f 	bl	8021b30 <XMC_ETH_MAC_InitRxDescriptors>
  XMC_ETH_MAC_InitTxDescriptors(eth_mac);
 8021af2:	6878      	ldr	r0, [r7, #4]
 8021af4:	f000 f874 	bl	8021be0 <XMC_ETH_MAC_InitTxDescriptors>

  /* Clear interrupts */
  eth_mac->regs->STATUS = 0xFFFFFFFFUL;
 8021af8:	687b      	ldr	r3, [r7, #4]
 8021afa:	681b      	ldr	r3, [r3, #0]
 8021afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021b00:	3314      	adds	r3, #20
 8021b02:	f04f 32ff 	mov.w	r2, #4294967295
 8021b06:	601a      	str	r2, [r3, #0]

  /* Disable MMC interrupt events */
  eth_mac->regs->MMC_TRANSMIT_INTERRUPT_MASK = ETH_MAC_MMC_INTERRUPT_MSK;
 8021b08:	687b      	ldr	r3, [r7, #4]
 8021b0a:	681b      	ldr	r3, [r3, #0]
 8021b0c:	f06f 427c 	mvn.w	r2, #4227858432	; 0xfc000000
 8021b10:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  eth_mac->regs->MMC_RECEIVE_INTERRUPT_MASK = ETH_MAC_MMC_INTERRUPT_MSK;
 8021b14:	687b      	ldr	r3, [r7, #4]
 8021b16:	681b      	ldr	r3, [r3, #0]
 8021b18:	f06f 427c 	mvn.w	r2, #4227858432	; 0xfc000000
 8021b1c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  eth_mac->frame_end = NULL;
 8021b20:	687b      	ldr	r3, [r7, #4]
 8021b22:	2200      	movs	r2, #0
 8021b24:	621a      	str	r2, [r3, #32]

  return status;
 8021b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8021b28:	4618      	mov	r0, r3
 8021b2a:	3710      	adds	r7, #16
 8021b2c:	46bd      	mov	sp, r7
 8021b2e:	bd80      	pop	{r7, pc}

08021b30 <XMC_ETH_MAC_InitRxDescriptors>:

/* Initialize RX descriptors */
void XMC_ETH_MAC_InitRxDescriptors(XMC_ETH_MAC_t *const eth_mac)
{
 8021b30:	b480      	push	{r7}
 8021b32:	b085      	sub	sp, #20
 8021b34:	af00      	add	r7, sp, #0
 8021b36:	6078      	str	r0, [r7, #4]

  /*
   * Chained structure (ETH_MAC_DMA_RDES1_RCH), second address in the descriptor
   * (buffer2) is the next descriptor address
   */
  for (i = 0U; i < eth_mac->num_rx_buf; ++i)
 8021b38:	2300      	movs	r3, #0
 8021b3a:	60fb      	str	r3, [r7, #12]
 8021b3c:	e037      	b.n	8021bae <XMC_ETH_MAC_InitRxDescriptors+0x7e>
  {
	eth_mac->rx_desc[i].status = (uint32_t)ETH_MAC_DMA_RDES0_OWN;
 8021b3e:	687b      	ldr	r3, [r7, #4]
 8021b40:	691a      	ldr	r2, [r3, #16]
 8021b42:	68fb      	ldr	r3, [r7, #12]
 8021b44:	015b      	lsls	r3, r3, #5
 8021b46:	4413      	add	r3, r2
 8021b48:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8021b4c:	601a      	str	r2, [r3, #0]
	eth_mac->rx_desc[i].length = (uint32_t)ETH_MAC_DMA_RDES1_RCH | (uint32_t)XMC_ETH_MAC_BUF_SIZE;
 8021b4e:	687b      	ldr	r3, [r7, #4]
 8021b50:	691a      	ldr	r2, [r3, #16]
 8021b52:	68fb      	ldr	r3, [r7, #12]
 8021b54:	015b      	lsls	r3, r3, #5
 8021b56:	4413      	add	r3, r2
 8021b58:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8021b5c:	605a      	str	r2, [r3, #4]
	eth_mac->rx_desc[i].buffer1 = (uint32_t)&(eth_mac->rx_buf[i * XMC_ETH_MAC_BUF_SIZE]);
 8021b5e:	687b      	ldr	r3, [r7, #4]
 8021b60:	691a      	ldr	r2, [r3, #16]
 8021b62:	68fb      	ldr	r3, [r7, #12]
 8021b64:	015b      	lsls	r3, r3, #5
 8021b66:	4413      	add	r3, r2
 8021b68:	687a      	ldr	r2, [r7, #4]
 8021b6a:	6991      	ldr	r1, [r2, #24]
 8021b6c:	68fa      	ldr	r2, [r7, #12]
 8021b6e:	f240 50f4 	movw	r0, #1524	; 0x5f4
 8021b72:	fb00 f202 	mul.w	r2, r0, r2
 8021b76:	440a      	add	r2, r1
 8021b78:	609a      	str	r2, [r3, #8]
    next = i + 1U;
 8021b7a:	68fb      	ldr	r3, [r7, #12]
 8021b7c:	3301      	adds	r3, #1
 8021b7e:	60bb      	str	r3, [r7, #8]
    if (next == eth_mac->num_rx_buf)
 8021b80:	687b      	ldr	r3, [r7, #4]
 8021b82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8021b86:	461a      	mov	r2, r3
 8021b88:	68bb      	ldr	r3, [r7, #8]
 8021b8a:	429a      	cmp	r2, r3
 8021b8c:	d101      	bne.n	8021b92 <XMC_ETH_MAC_InitRxDescriptors+0x62>
    {
      next = 0U;
 8021b8e:	2300      	movs	r3, #0
 8021b90:	60bb      	str	r3, [r7, #8]
    }
    eth_mac->rx_desc[i].buffer2 = (uint32_t)&(eth_mac->rx_desc[next]);
 8021b92:	687b      	ldr	r3, [r7, #4]
 8021b94:	691a      	ldr	r2, [r3, #16]
 8021b96:	68fb      	ldr	r3, [r7, #12]
 8021b98:	015b      	lsls	r3, r3, #5
 8021b9a:	4413      	add	r3, r2
 8021b9c:	687a      	ldr	r2, [r7, #4]
 8021b9e:	6911      	ldr	r1, [r2, #16]
 8021ba0:	68ba      	ldr	r2, [r7, #8]
 8021ba2:	0152      	lsls	r2, r2, #5
 8021ba4:	440a      	add	r2, r1
 8021ba6:	60da      	str	r2, [r3, #12]

  /*
   * Chained structure (ETH_MAC_DMA_RDES1_RCH), second address in the descriptor
   * (buffer2) is the next descriptor address
   */
  for (i = 0U; i < eth_mac->num_rx_buf; ++i)
 8021ba8:	68fb      	ldr	r3, [r7, #12]
 8021baa:	3301      	adds	r3, #1
 8021bac:	60fb      	str	r3, [r7, #12]
 8021bae:	687b      	ldr	r3, [r7, #4]
 8021bb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8021bb4:	461a      	mov	r2, r3
 8021bb6:	68fb      	ldr	r3, [r7, #12]
 8021bb8:	429a      	cmp	r2, r3
 8021bba:	d8c0      	bhi.n	8021b3e <XMC_ETH_MAC_InitRxDescriptors+0xe>
    {
      next = 0U;
    }
    eth_mac->rx_desc[i].buffer2 = (uint32_t)&(eth_mac->rx_desc[next]);
  }
  eth_mac->regs->RECEIVE_DESCRIPTOR_LIST_ADDRESS = (uint32_t)&(eth_mac->rx_desc[0]);
 8021bbc:	687b      	ldr	r3, [r7, #4]
 8021bbe:	681b      	ldr	r3, [r3, #0]
 8021bc0:	687a      	ldr	r2, [r7, #4]
 8021bc2:	6912      	ldr	r2, [r2, #16]
 8021bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021bc8:	330c      	adds	r3, #12
 8021bca:	601a      	str	r2, [r3, #0]
  eth_mac->rx_index = 0U;
 8021bcc:	687b      	ldr	r3, [r7, #4]
 8021bce:	2200      	movs	r2, #0
 8021bd0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8021bd4:	3714      	adds	r7, #20
 8021bd6:	46bd      	mov	sp, r7
 8021bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bdc:	4770      	bx	lr
 8021bde:	bf00      	nop

08021be0 <XMC_ETH_MAC_InitTxDescriptors>:

/* Initialize TX descriptors */
void XMC_ETH_MAC_InitTxDescriptors(XMC_ETH_MAC_t *const eth_mac)
{
 8021be0:	b480      	push	{r7}
 8021be2:	b085      	sub	sp, #20
 8021be4:	af00      	add	r7, sp, #0
 8021be6:	6078      	str	r0, [r7, #4]
  uint32_t next;

  XMC_ASSERT("XMC_ETH_MAC_InitTxDescriptors: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  /* Chained structure (ETH_MAC_DMA_TDES0_TCH), second address in the descriptor (buffer2) is the next descriptor address */
  for (i = 0U; i < eth_mac->num_tx_buf; ++i)
 8021be8:	2300      	movs	r3, #0
 8021bea:	60fb      	str	r3, [r7, #12]
 8021bec:	e02e      	b.n	8021c4c <XMC_ETH_MAC_InitTxDescriptors+0x6c>
  {
	eth_mac->tx_desc[i].status = ETH_MAC_DMA_TDES0_TCH | ETH_MAC_DMA_TDES0_LS | ETH_MAC_DMA_TDES0_FS;
 8021bee:	687b      	ldr	r3, [r7, #4]
 8021bf0:	695a      	ldr	r2, [r3, #20]
 8021bf2:	68fb      	ldr	r3, [r7, #12]
 8021bf4:	015b      	lsls	r3, r3, #5
 8021bf6:	4413      	add	r3, r2
 8021bf8:	4a20      	ldr	r2, [pc, #128]	; (8021c7c <XMC_ETH_MAC_InitTxDescriptors+0x9c>)
 8021bfa:	601a      	str	r2, [r3, #0]
	eth_mac->tx_desc[i].buffer1 = (uint32_t)&(eth_mac->tx_buf[i * XMC_ETH_MAC_BUF_SIZE]);
 8021bfc:	687b      	ldr	r3, [r7, #4]
 8021bfe:	695a      	ldr	r2, [r3, #20]
 8021c00:	68fb      	ldr	r3, [r7, #12]
 8021c02:	015b      	lsls	r3, r3, #5
 8021c04:	4413      	add	r3, r2
 8021c06:	687a      	ldr	r2, [r7, #4]
 8021c08:	69d1      	ldr	r1, [r2, #28]
 8021c0a:	68fa      	ldr	r2, [r7, #12]
 8021c0c:	f240 50f4 	movw	r0, #1524	; 0x5f4
 8021c10:	fb00 f202 	mul.w	r2, r0, r2
 8021c14:	440a      	add	r2, r1
 8021c16:	609a      	str	r2, [r3, #8]
    next = i + 1U;
 8021c18:	68fb      	ldr	r3, [r7, #12]
 8021c1a:	3301      	adds	r3, #1
 8021c1c:	60bb      	str	r3, [r7, #8]
    if (next == eth_mac->num_tx_buf)
 8021c1e:	687b      	ldr	r3, [r7, #4]
 8021c20:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8021c24:	461a      	mov	r2, r3
 8021c26:	68bb      	ldr	r3, [r7, #8]
 8021c28:	429a      	cmp	r2, r3
 8021c2a:	d101      	bne.n	8021c30 <XMC_ETH_MAC_InitTxDescriptors+0x50>
    {
        next = 0U;
 8021c2c:	2300      	movs	r3, #0
 8021c2e:	60bb      	str	r3, [r7, #8]
    }
    eth_mac->tx_desc[i].buffer2 = (uint32_t)&(eth_mac->tx_desc[next]);
 8021c30:	687b      	ldr	r3, [r7, #4]
 8021c32:	695a      	ldr	r2, [r3, #20]
 8021c34:	68fb      	ldr	r3, [r7, #12]
 8021c36:	015b      	lsls	r3, r3, #5
 8021c38:	4413      	add	r3, r2
 8021c3a:	687a      	ldr	r2, [r7, #4]
 8021c3c:	6951      	ldr	r1, [r2, #20]
 8021c3e:	68ba      	ldr	r2, [r7, #8]
 8021c40:	0152      	lsls	r2, r2, #5
 8021c42:	440a      	add	r2, r1
 8021c44:	60da      	str	r2, [r3, #12]
  uint32_t next;

  XMC_ASSERT("XMC_ETH_MAC_InitTxDescriptors: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  /* Chained structure (ETH_MAC_DMA_TDES0_TCH), second address in the descriptor (buffer2) is the next descriptor address */
  for (i = 0U; i < eth_mac->num_tx_buf; ++i)
 8021c46:	68fb      	ldr	r3, [r7, #12]
 8021c48:	3301      	adds	r3, #1
 8021c4a:	60fb      	str	r3, [r7, #12]
 8021c4c:	687b      	ldr	r3, [r7, #4]
 8021c4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8021c52:	461a      	mov	r2, r3
 8021c54:	68fb      	ldr	r3, [r7, #12]
 8021c56:	429a      	cmp	r2, r3
 8021c58:	d8c9      	bhi.n	8021bee <XMC_ETH_MAC_InitTxDescriptors+0xe>
    {
        next = 0U;
    }
    eth_mac->tx_desc[i].buffer2 = (uint32_t)&(eth_mac->tx_desc[next]);
  }
  eth_mac->regs->TRANSMIT_DESCRIPTOR_LIST_ADDRESS = (uint32_t)&(eth_mac->tx_desc[0]);
 8021c5a:	687b      	ldr	r3, [r7, #4]
 8021c5c:	681b      	ldr	r3, [r3, #0]
 8021c5e:	687a      	ldr	r2, [r7, #4]
 8021c60:	6952      	ldr	r2, [r2, #20]
 8021c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021c66:	3310      	adds	r3, #16
 8021c68:	601a      	str	r2, [r3, #0]
  eth_mac->tx_index = 0U;
 8021c6a:	687b      	ldr	r3, [r7, #4]
 8021c6c:	2200      	movs	r2, #0
 8021c6e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8021c72:	3714      	adds	r7, #20
 8021c74:	46bd      	mov	sp, r7
 8021c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c7a:	4770      	bx	lr
 8021c7c:	30100000 	.word	0x30100000

08021c80 <XMC_ETH_MAC_GetRxFrameSize>:
  return (len);
}

/* Get RX frame size */
uint32_t XMC_ETH_MAC_GetRxFrameSize(XMC_ETH_MAC_t *const eth_mac)
{
 8021c80:	b480      	push	{r7}
 8021c82:	b085      	sub	sp, #20
 8021c84:	af00      	add	r7, sp, #0
 8021c86:	6078      	str	r0, [r7, #4]
  uint32_t status;
  uint32_t len = 0U;
 8021c88:	2300      	movs	r3, #0
 8021c8a:	60fb      	str	r3, [r7, #12]

  status = eth_mac->rx_desc[eth_mac->rx_index].status;
 8021c8c:	687b      	ldr	r3, [r7, #4]
 8021c8e:	691a      	ldr	r2, [r3, #16]
 8021c90:	687b      	ldr	r3, [r7, #4]
 8021c92:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8021c96:	015b      	lsls	r3, r3, #5
 8021c98:	4413      	add	r3, r2
 8021c9a:	681b      	ldr	r3, [r3, #0]
 8021c9c:	60bb      	str	r3, [r7, #8]

  if (status & ETH_MAC_DMA_RDES0_OWN)
 8021c9e:	68bb      	ldr	r3, [r7, #8]
 8021ca0:	2b00      	cmp	r3, #0
 8021ca2:	da02      	bge.n	8021caa <XMC_ETH_MAC_GetRxFrameSize+0x2a>
  {
    /* Owned by DMA */
    len = 0U;
 8021ca4:	2300      	movs	r3, #0
 8021ca6:	60fb      	str	r3, [r7, #12]
 8021ca8:	e018      	b.n	8021cdc <XMC_ETH_MAC_GetRxFrameSize+0x5c>
  }
  else if (((status & ETH_MAC_DMA_RDES0_ES) != 0U) ||
 8021caa:	68bb      	ldr	r3, [r7, #8]
 8021cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8021cb0:	2b00      	cmp	r3, #0
 8021cb2:	d109      	bne.n	8021cc8 <XMC_ETH_MAC_GetRxFrameSize+0x48>
           ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
 8021cb4:	68bb      	ldr	r3, [r7, #8]
 8021cb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if (status & ETH_MAC_DMA_RDES0_OWN)
  {
    /* Owned by DMA */
    len = 0U;
  }
  else if (((status & ETH_MAC_DMA_RDES0_ES) != 0U) ||
 8021cba:	2b00      	cmp	r3, #0
 8021cbc:	d004      	beq.n	8021cc8 <XMC_ETH_MAC_GetRxFrameSize+0x48>
           ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
           ((status & ETH_MAC_DMA_RDES0_LS) == 0U)) 
 8021cbe:	68bb      	ldr	r3, [r7, #8]
 8021cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  {
    /* Owned by DMA */
    len = 0U;
  }
  else if (((status & ETH_MAC_DMA_RDES0_ES) != 0U) ||
           ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
 8021cc4:	2b00      	cmp	r3, #0
 8021cc6:	d103      	bne.n	8021cd0 <XMC_ETH_MAC_GetRxFrameSize+0x50>
           ((status & ETH_MAC_DMA_RDES0_LS) == 0U)) 
  {
    /* Error, this block is invalid */
    len = 0xFFFFFFFFU;
 8021cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8021ccc:	60fb      	str	r3, [r7, #12]
 8021cce:	e005      	b.n	8021cdc <XMC_ETH_MAC_GetRxFrameSize+0x5c>
  }
  else 
  {
    /* Subtract CRC */
    len = ((status & ETH_MAC_DMA_RDES0_FL) >> 16U) - 4U;
 8021cd0:	68ba      	ldr	r2, [r7, #8]
 8021cd2:	4b06      	ldr	r3, [pc, #24]	; (8021cec <XMC_ETH_MAC_GetRxFrameSize+0x6c>)
 8021cd4:	4013      	ands	r3, r2
 8021cd6:	0c1b      	lsrs	r3, r3, #16
 8021cd8:	3b04      	subs	r3, #4
 8021cda:	60fb      	str	r3, [r7, #12]
  }

  return len;
 8021cdc:	68fb      	ldr	r3, [r7, #12]
}
 8021cde:	4618      	mov	r0, r3
 8021ce0:	3714      	adds	r7, #20
 8021ce2:	46bd      	mov	sp, r7
 8021ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ce8:	4770      	bx	lr
 8021cea:	bf00      	nop
 8021cec:	3fff0000 	.word	0x3fff0000

08021cf0 <XMC_ETH_MAC_SetManagmentClockDivider>:

/* Set management clock divider */
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_SetManagmentClockDivider(XMC_ETH_MAC_t *const eth_mac)
{
 8021cf0:	b580      	push	{r7, lr}
 8021cf2:	b086      	sub	sp, #24
 8021cf4:	af00      	add	r7, sp, #0
 8021cf6:	6078      	str	r0, [r7, #4]
  uint32_t eth_mac_clk;
  XMC_ETH_MAC_STATUS_t status;
  __IO uint32_t *reg;

  eth_mac_clk = XMC_SCU_CLOCK_GetEthernetClockFrequency();
 8021cf8:	f7ff fe96 	bl	8021a28 <XMC_SCU_CLOCK_GetEthernetClockFrequency>
 8021cfc:	6138      	str	r0, [r7, #16]
  status = XMC_ETH_MAC_STATUS_OK;
 8021cfe:	2300      	movs	r3, #0
 8021d00:	75fb      	strb	r3, [r7, #23]

  reg = &(eth_mac->regs->GMII_ADDRESS);
 8021d02:	687b      	ldr	r3, [r7, #4]
 8021d04:	681b      	ldr	r3, [r3, #0]
 8021d06:	3310      	adds	r3, #16
 8021d08:	60fb      	str	r3, [r7, #12]
  if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_35MHZ)
 8021d0a:	693b      	ldr	r3, [r7, #16]
 8021d0c:	4a1a      	ldr	r2, [pc, #104]	; (8021d78 <XMC_ETH_MAC_SetManagmentClockDivider+0x88>)
 8021d0e:	4293      	cmp	r3, r2
 8021d10:	d803      	bhi.n	8021d1a <XMC_ETH_MAC_SetManagmentClockDivider+0x2a>
  {
	*reg = XMC_ETH_MAC_MDC_DIVIDER_16;
 8021d12:	68fb      	ldr	r3, [r7, #12]
 8021d14:	2208      	movs	r2, #8
 8021d16:	601a      	str	r2, [r3, #0]
 8021d18:	e029      	b.n	8021d6e <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_60MHZ)
 8021d1a:	693b      	ldr	r3, [r7, #16]
 8021d1c:	4a17      	ldr	r2, [pc, #92]	; (8021d7c <XMC_ETH_MAC_SetManagmentClockDivider+0x8c>)
 8021d1e:	4293      	cmp	r3, r2
 8021d20:	d803      	bhi.n	8021d2a <XMC_ETH_MAC_SetManagmentClockDivider+0x3a>
  {
	*reg = XMC_ETH_MAC_MDC_DIVIDER_26;
 8021d22:	68fb      	ldr	r3, [r7, #12]
 8021d24:	220c      	movs	r2, #12
 8021d26:	601a      	str	r2, [r3, #0]
 8021d28:	e021      	b.n	8021d6e <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_100MHZ)
 8021d2a:	693b      	ldr	r3, [r7, #16]
 8021d2c:	4a14      	ldr	r2, [pc, #80]	; (8021d80 <XMC_ETH_MAC_SetManagmentClockDivider+0x90>)
 8021d2e:	4293      	cmp	r3, r2
 8021d30:	d803      	bhi.n	8021d3a <XMC_ETH_MAC_SetManagmentClockDivider+0x4a>
  {
	*reg = XMC_ETH_MAC_MDC_DIVIDER_42;
 8021d32:	68fb      	ldr	r3, [r7, #12]
 8021d34:	2200      	movs	r2, #0
 8021d36:	601a      	str	r2, [r3, #0]
 8021d38:	e019      	b.n	8021d6e <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_150MHZ)
 8021d3a:	693b      	ldr	r3, [r7, #16]
 8021d3c:	4a11      	ldr	r2, [pc, #68]	; (8021d84 <XMC_ETH_MAC_SetManagmentClockDivider+0x94>)
 8021d3e:	4293      	cmp	r3, r2
 8021d40:	d803      	bhi.n	8021d4a <XMC_ETH_MAC_SetManagmentClockDivider+0x5a>
  {
	*reg = XMC_ETH_MAC_MDC_DIVIDER_62;
 8021d42:	68fb      	ldr	r3, [r7, #12]
 8021d44:	2204      	movs	r2, #4
 8021d46:	601a      	str	r2, [r3, #0]
 8021d48:	e011      	b.n	8021d6e <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_200MHZ)
 8021d4a:	693b      	ldr	r3, [r7, #16]
 8021d4c:	4a0e      	ldr	r2, [pc, #56]	; (8021d88 <XMC_ETH_MAC_SetManagmentClockDivider+0x98>)
 8021d4e:	4293      	cmp	r3, r2
 8021d50:	d803      	bhi.n	8021d5a <XMC_ETH_MAC_SetManagmentClockDivider+0x6a>
  {
	*reg = XMC_ETH_MAC_MDC_DIVIDER_102;
 8021d52:	68fb      	ldr	r3, [r7, #12]
 8021d54:	2210      	movs	r2, #16
 8021d56:	601a      	str	r2, [r3, #0]
 8021d58:	e009      	b.n	8021d6e <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_250MHZ)
 8021d5a:	693b      	ldr	r3, [r7, #16]
 8021d5c:	4a0b      	ldr	r2, [pc, #44]	; (8021d8c <XMC_ETH_MAC_SetManagmentClockDivider+0x9c>)
 8021d5e:	4293      	cmp	r3, r2
 8021d60:	d803      	bhi.n	8021d6a <XMC_ETH_MAC_SetManagmentClockDivider+0x7a>
  {
	*reg = XMC_ETH_MAC_MDC_DIVIDER_124;
 8021d62:	68fb      	ldr	r3, [r7, #12]
 8021d64:	2214      	movs	r2, #20
 8021d66:	601a      	str	r2, [r3, #0]
 8021d68:	e001      	b.n	8021d6e <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else
  {
    status = XMC_ETH_MAC_STATUS_ERROR;
 8021d6a:	2302      	movs	r3, #2
 8021d6c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8021d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8021d70:	4618      	mov	r0, r3
 8021d72:	3718      	adds	r7, #24
 8021d74:	46bd      	mov	sp, r7
 8021d76:	bd80      	pop	{r7, pc}
 8021d78:	02160ec0 	.word	0x02160ec0
 8021d7c:	03938700 	.word	0x03938700
 8021d80:	05f5e100 	.word	0x05f5e100
 8021d84:	08f0d180 	.word	0x08f0d180
 8021d88:	0bebc200 	.word	0x0bebc200
 8021d8c:	0ee6b280 	.word	0x0ee6b280

08021d90 <XMC_ETH_MAC_Enable>:

/* ETH MAC enable */
void XMC_ETH_MAC_Enable(XMC_ETH_MAC_t *const eth_mac)
{
 8021d90:	b580      	push	{r7, lr}
 8021d92:	b082      	sub	sp, #8
 8021d94:	af00      	add	r7, sp, #0
 8021d96:	6078      	str	r0, [r7, #4]
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_ETH);
 8021d98:	2004      	movs	r0, #4
 8021d9a:	f7fe fd59 	bl	8020850 <XMC_SCU_CLOCK_EnableClock>
#if UC_DEVICE != XMC4500
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ETH0);
 8021d9e:	4804      	ldr	r0, [pc, #16]	; (8021db0 <XMC_ETH_MAC_Enable+0x20>)
 8021da0:	f7fe fd66 	bl	8020870 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ETH0);
 8021da4:	4802      	ldr	r0, [pc, #8]	; (8021db0 <XMC_ETH_MAC_Enable+0x20>)
 8021da6:	f7fe fbdf 	bl	8020568 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8021daa:	3708      	adds	r7, #8
 8021dac:	46bd      	mov	sp, r7
 8021dae:	bd80      	pop	{r7, pc}
 8021db0:	20000004 	.word	0x20000004

08021db4 <XMC_ETH_MAC_ReadPhy>:
  XMC_SCU_CLOCK_DisableClock(XMC_SCU_CLOCK_ETH);
}

/* Read physical layer and obtain status */
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_ReadPhy(XMC_ETH_MAC_t *eth_mac, uint8_t phy_addr, uint8_t reg_addr, uint16_t *data)
{
 8021db4:	b480      	push	{r7}
 8021db6:	b087      	sub	sp, #28
 8021db8:	af00      	add	r7, sp, #0
 8021dba:	60f8      	str	r0, [r7, #12]
 8021dbc:	607b      	str	r3, [r7, #4]
 8021dbe:	460b      	mov	r3, r1
 8021dc0:	72fb      	strb	r3, [r7, #11]
 8021dc2:	4613      	mov	r3, r2
 8021dc4:	72bb      	strb	r3, [r7, #10]
  uint32_t retries;

  XMC_ASSERT("XMC_ETH_MAC_PhyRead: Parameter error", data != NULL);

  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 8021dc6:	68fb      	ldr	r3, [r7, #12]
 8021dc8:	681b      	ldr	r3, [r3, #0]
 8021dca:	68fa      	ldr	r2, [r7, #12]
 8021dcc:	6812      	ldr	r2, [r2, #0]
 8021dce:	6912      	ldr	r2, [r2, #16]
 8021dd0:	f002 013c 	and.w	r1, r2, #60	; 0x3c
                                           (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
                                           (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
 8021dd4:	7afa      	ldrb	r2, [r7, #11]
 8021dd6:	02d2      	lsls	r2, r2, #11
  uint32_t retries;

  XMC_ASSERT("XMC_ETH_MAC_PhyRead: Parameter error", data != NULL);

  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
                                           (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
 8021dd8:	4311      	orrs	r1, r2
                                           (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
                                           (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos));
 8021dda:	7aba      	ldrb	r2, [r7, #10]
 8021ddc:	0192      	lsls	r2, r2, #6
{
  uint32_t retries;

  XMC_ASSERT("XMC_ETH_MAC_PhyRead: Parameter error", data != NULL);

  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 8021dde:	430a      	orrs	r2, r1
 8021de0:	f042 0201 	orr.w	r2, r2, #1
 8021de4:	611a      	str	r2, [r3, #16]
                                           (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
                                           (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
                                           (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos));

  /* Poll busy bit during max PHY_TIMEOUT time */
  retries = 0U;
 8021de6:	2300      	movs	r3, #0
 8021de8:	617b      	str	r3, [r7, #20]
  do
  {
    if ((eth_mac->regs->GMII_ADDRESS & ETH_GMII_ADDRESS_MB_Msk) == 0U)
 8021dea:	68fb      	ldr	r3, [r7, #12]
 8021dec:	681b      	ldr	r3, [r3, #0]
 8021dee:	691b      	ldr	r3, [r3, #16]
 8021df0:	f003 0301 	and.w	r3, r3, #1
 8021df4:	2b00      	cmp	r3, #0
 8021df6:	d107      	bne.n	8021e08 <XMC_ETH_MAC_ReadPhy+0x54>
    {
      *data = (uint16_t)(eth_mac->regs->GMII_DATA & ETH_GMII_DATA_MD_Msk);
 8021df8:	68fb      	ldr	r3, [r7, #12]
 8021dfa:	681b      	ldr	r3, [r3, #0]
 8021dfc:	695b      	ldr	r3, [r3, #20]
 8021dfe:	b29a      	uxth	r2, r3
 8021e00:	687b      	ldr	r3, [r7, #4]
 8021e02:	801a      	strh	r2, [r3, #0]
      return XMC_ETH_MAC_STATUS_OK;
 8021e04:	2300      	movs	r3, #0
 8021e06:	e008      	b.n	8021e1a <XMC_ETH_MAC_ReadPhy+0x66>
    }
    ++retries;
 8021e08:	697b      	ldr	r3, [r7, #20]
 8021e0a:	3301      	adds	r3, #1
 8021e0c:	617b      	str	r3, [r7, #20]
  } while (retries < XMC_ETH_MAC_PHY_MAX_RETRIES);
 8021e0e:	697b      	ldr	r3, [r7, #20]
 8021e10:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021e14:	4293      	cmp	r3, r2
 8021e16:	d9e8      	bls.n	8021dea <XMC_ETH_MAC_ReadPhy+0x36>

  return XMC_ETH_MAC_STATUS_ERROR;
 8021e18:	2302      	movs	r3, #2
}
 8021e1a:	4618      	mov	r0, r3
 8021e1c:	371c      	adds	r7, #28
 8021e1e:	46bd      	mov	sp, r7
 8021e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e24:	4770      	bx	lr
 8021e26:	bf00      	nop

08021e28 <XMC_ETH_MAC_WritePhy>:

/* Write physical layer and return status */
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_WritePhy(XMC_ETH_MAC_t *eth_mac, uint8_t phy_addr, uint8_t reg_addr, uint16_t data)
{
 8021e28:	b480      	push	{r7}
 8021e2a:	b085      	sub	sp, #20
 8021e2c:	af00      	add	r7, sp, #0
 8021e2e:	6078      	str	r0, [r7, #4]
 8021e30:	4608      	mov	r0, r1
 8021e32:	4611      	mov	r1, r2
 8021e34:	461a      	mov	r2, r3
 8021e36:	4603      	mov	r3, r0
 8021e38:	70fb      	strb	r3, [r7, #3]
 8021e3a:	460b      	mov	r3, r1
 8021e3c:	70bb      	strb	r3, [r7, #2]
 8021e3e:	4613      	mov	r3, r2
 8021e40:	803b      	strh	r3, [r7, #0]
  uint32_t retries;

  eth_mac->regs->GMII_DATA  = data;
 8021e42:	687b      	ldr	r3, [r7, #4]
 8021e44:	681b      	ldr	r3, [r3, #0]
 8021e46:	883a      	ldrh	r2, [r7, #0]
 8021e48:	615a      	str	r2, [r3, #20]
  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 8021e4a:	687b      	ldr	r3, [r7, #4]
 8021e4c:	681b      	ldr	r3, [r3, #0]
 8021e4e:	687a      	ldr	r2, [r7, #4]
 8021e50:	6812      	ldr	r2, [r2, #0]
 8021e52:	6912      	ldr	r2, [r2, #16]
 8021e54:	f002 013c 	and.w	r1, r2, #60	; 0x3c
                                           (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
                                           (uint32_t)ETH_GMII_ADDRESS_MW_Msk |
                                           (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
 8021e58:	78fa      	ldrb	r2, [r7, #3]
 8021e5a:	02d2      	lsls	r2, r2, #11
  uint32_t retries;

  eth_mac->regs->GMII_DATA  = data;
  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
                                           (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
                                           (uint32_t)ETH_GMII_ADDRESS_MW_Msk |
 8021e5c:	4311      	orrs	r1, r2
                                           (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
                                           (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos));
 8021e5e:	78ba      	ldrb	r2, [r7, #2]
 8021e60:	0192      	lsls	r2, r2, #6
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_WritePhy(XMC_ETH_MAC_t *eth_mac, uint8_t phy_addr, uint8_t reg_addr, uint16_t data)
{
  uint32_t retries;

  eth_mac->regs->GMII_DATA  = data;
  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 8021e62:	430a      	orrs	r2, r1
 8021e64:	f042 0203 	orr.w	r2, r2, #3
 8021e68:	611a      	str	r2, [r3, #16]
                                           (uint32_t)ETH_GMII_ADDRESS_MW_Msk |
                                           (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
                                           (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos));

   /* Poll busy bit during max PHY_TIMEOUT time */
  retries = 0U;
 8021e6a:	2300      	movs	r3, #0
 8021e6c:	60fb      	str	r3, [r7, #12]
  do
  {
    if ((eth_mac->regs->GMII_ADDRESS & ETH_GMII_ADDRESS_MB_Msk) == 0U)
 8021e6e:	687b      	ldr	r3, [r7, #4]
 8021e70:	681b      	ldr	r3, [r3, #0]
 8021e72:	691b      	ldr	r3, [r3, #16]
 8021e74:	f003 0301 	and.w	r3, r3, #1
 8021e78:	2b00      	cmp	r3, #0
 8021e7a:	d101      	bne.n	8021e80 <XMC_ETH_MAC_WritePhy+0x58>
    {
      return XMC_ETH_MAC_STATUS_OK;
 8021e7c:	2300      	movs	r3, #0
 8021e7e:	e008      	b.n	8021e92 <XMC_ETH_MAC_WritePhy+0x6a>
    }
    ++retries;
 8021e80:	68fb      	ldr	r3, [r7, #12]
 8021e82:	3301      	adds	r3, #1
 8021e84:	60fb      	str	r3, [r7, #12]
  } while (retries < XMC_ETH_MAC_PHY_MAX_RETRIES);
 8021e86:	68fb      	ldr	r3, [r7, #12]
 8021e88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021e8c:	4293      	cmp	r3, r2
 8021e8e:	d9ee      	bls.n	8021e6e <XMC_ETH_MAC_WritePhy+0x46>

  return XMC_ETH_MAC_STATUS_ERROR;
 8021e90:	2302      	movs	r3, #2
}
 8021e92:	4618      	mov	r0, r3
 8021e94:	3714      	adds	r7, #20
 8021e96:	46bd      	mov	sp, r7
 8021e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e9c:	4770      	bx	lr
 8021e9e:	bf00      	nop

08021ea0 <XMC_ETH_MAC_EnableEvent>:
  }
}

/* Enable event */
void XMC_ETH_MAC_EnableEvent(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
{
 8021ea0:	b580      	push	{r7, lr}
 8021ea2:	b082      	sub	sp, #8
 8021ea4:	af00      	add	r7, sp, #0
 8021ea6:	6078      	str	r0, [r7, #4]
 8021ea8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_ETH_MAC_EnableDMAEvent: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  eth_mac->regs->INTERRUPT_MASK &= ~(event >> 16U);
 8021eaa:	687b      	ldr	r3, [r7, #4]
 8021eac:	681b      	ldr	r3, [r3, #0]
 8021eae:	687a      	ldr	r2, [r7, #4]
 8021eb0:	6812      	ldr	r2, [r2, #0]
 8021eb2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8021eb4:	683a      	ldr	r2, [r7, #0]
 8021eb6:	0c12      	lsrs	r2, r2, #16
 8021eb8:	43d2      	mvns	r2, r2
 8021eba:	400a      	ands	r2, r1
 8021ebc:	63da      	str	r2, [r3, #60]	; 0x3c

  event &= (uint16_t)0x7fffU;
 8021ebe:	683b      	ldr	r3, [r7, #0]
 8021ec0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8021ec4:	603b      	str	r3, [r7, #0]
  if (XCM_ETH_MAC_IsNormalEvent(event))
 8021ec6:	6838      	ldr	r0, [r7, #0]
 8021ec8:	f7ff fdb6 	bl	8021a38 <XCM_ETH_MAC_IsNormalEvent>
 8021ecc:	4603      	mov	r3, r0
 8021ece:	2b00      	cmp	r3, #0
 8021ed0:	d003      	beq.n	8021eda <XMC_ETH_MAC_EnableEvent+0x3a>
  {
	event |= (uint32_t)ETH_INTERRUPT_ENABLE_NIE_Msk;
 8021ed2:	683b      	ldr	r3, [r7, #0]
 8021ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8021ed8:	603b      	str	r3, [r7, #0]
  }

  if (XCM_ETH_MAC_IsAbnormalEvent(event))
 8021eda:	6838      	ldr	r0, [r7, #0]
 8021edc:	f7ff fdc0 	bl	8021a60 <XCM_ETH_MAC_IsAbnormalEvent>
 8021ee0:	4603      	mov	r3, r0
 8021ee2:	2b00      	cmp	r3, #0
 8021ee4:	d003      	beq.n	8021eee <XMC_ETH_MAC_EnableEvent+0x4e>
  {
	event |= (uint32_t)ETH_INTERRUPT_ENABLE_AIE_Msk;
 8021ee6:	683b      	ldr	r3, [r7, #0]
 8021ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8021eec:	603b      	str	r3, [r7, #0]
  }

  eth_mac->regs->INTERRUPT_ENABLE |= event;
 8021eee:	687b      	ldr	r3, [r7, #4]
 8021ef0:	6819      	ldr	r1, [r3, #0]
 8021ef2:	687b      	ldr	r3, [r7, #4]
 8021ef4:	681b      	ldr	r3, [r3, #0]
 8021ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021efa:	331c      	adds	r3, #28
 8021efc:	681a      	ldr	r2, [r3, #0]
 8021efe:	683b      	ldr	r3, [r7, #0]
 8021f00:	431a      	orrs	r2, r3
 8021f02:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8021f06:	331c      	adds	r3, #28
 8021f08:	601a      	str	r2, [r3, #0]
}
 8021f0a:	3708      	adds	r7, #8
 8021f0c:	46bd      	mov	sp, r7
 8021f0e:	bd80      	pop	{r7, pc}

08021f10 <XMC_ETH_MAC_DisableEvent>:

/* Disable event */
void XMC_ETH_MAC_DisableEvent(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
{
 8021f10:	b480      	push	{r7}
 8021f12:	b083      	sub	sp, #12
 8021f14:	af00      	add	r7, sp, #0
 8021f16:	6078      	str	r0, [r7, #4]
 8021f18:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_ETH_MAC_DisableDMAEvent: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  eth_mac->regs->INTERRUPT_MASK |= event >> 16U;
 8021f1a:	687b      	ldr	r3, [r7, #4]
 8021f1c:	681b      	ldr	r3, [r3, #0]
 8021f1e:	687a      	ldr	r2, [r7, #4]
 8021f20:	6812      	ldr	r2, [r2, #0]
 8021f22:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8021f24:	683a      	ldr	r2, [r7, #0]
 8021f26:	0c12      	lsrs	r2, r2, #16
 8021f28:	430a      	orrs	r2, r1
 8021f2a:	63da      	str	r2, [r3, #60]	; 0x3c

  event &= 0x7fffU;
 8021f2c:	683b      	ldr	r3, [r7, #0]
 8021f2e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8021f32:	603b      	str	r3, [r7, #0]
  eth_mac->regs->INTERRUPT_ENABLE &= ~event;
 8021f34:	687b      	ldr	r3, [r7, #4]
 8021f36:	6819      	ldr	r1, [r3, #0]
 8021f38:	687b      	ldr	r3, [r7, #4]
 8021f3a:	681b      	ldr	r3, [r3, #0]
 8021f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021f40:	331c      	adds	r3, #28
 8021f42:	681a      	ldr	r2, [r3, #0]
 8021f44:	683b      	ldr	r3, [r7, #0]
 8021f46:	43db      	mvns	r3, r3
 8021f48:	401a      	ands	r2, r3
 8021f4a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8021f4e:	331c      	adds	r3, #28
 8021f50:	601a      	str	r2, [r3, #0]
}
 8021f52:	370c      	adds	r7, #12
 8021f54:	46bd      	mov	sp, r7
 8021f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f5a:	4770      	bx	lr

08021f5c <XMC_ETH_MAC_ClearEventStatus>:

/* Clear event status */
void XMC_ETH_MAC_ClearEventStatus(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
{
 8021f5c:	b480      	push	{r7}
 8021f5e:	b083      	sub	sp, #12
 8021f60:	af00      	add	r7, sp, #0
 8021f62:	6078      	str	r0, [r7, #4]
 8021f64:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_ETH_MAC_ClearDMAEventStatus: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  if ((eth_mac->regs->STATUS & ETH_STATUS_NIS_Msk) != 0U)
 8021f66:	687b      	ldr	r3, [r7, #4]
 8021f68:	681b      	ldr	r3, [r3, #0]
 8021f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021f6e:	3314      	adds	r3, #20
 8021f70:	681b      	ldr	r3, [r3, #0]
 8021f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8021f76:	2b00      	cmp	r3, #0
 8021f78:	d003      	beq.n	8021f82 <XMC_ETH_MAC_ClearEventStatus+0x26>
  {
	event |= (uint32_t)ETH_STATUS_NIS_Msk;
 8021f7a:	683b      	ldr	r3, [r7, #0]
 8021f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8021f80:	603b      	str	r3, [r7, #0]
  }

  if ((eth_mac->regs->STATUS & ETH_STATUS_AIS_Msk) != 0U)
 8021f82:	687b      	ldr	r3, [r7, #4]
 8021f84:	681b      	ldr	r3, [r3, #0]
 8021f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021f8a:	3314      	adds	r3, #20
 8021f8c:	681b      	ldr	r3, [r3, #0]
 8021f8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8021f92:	2b00      	cmp	r3, #0
 8021f94:	d003      	beq.n	8021f9e <XMC_ETH_MAC_ClearEventStatus+0x42>
  {
	event |= (uint32_t)ETH_STATUS_AIS_Msk;
 8021f96:	683b      	ldr	r3, [r7, #0]
 8021f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8021f9c:	603b      	str	r3, [r7, #0]
  }

  eth_mac->regs->STATUS = event;
 8021f9e:	687b      	ldr	r3, [r7, #4]
 8021fa0:	681b      	ldr	r3, [r3, #0]
 8021fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021fa6:	3314      	adds	r3, #20
 8021fa8:	683a      	ldr	r2, [r7, #0]
 8021faa:	601a      	str	r2, [r3, #0]
}
 8021fac:	370c      	adds	r7, #12
 8021fae:	46bd      	mov	sp, r7
 8021fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fb4:	4770      	bx	lr
 8021fb6:	bf00      	nop

08021fb8 <XMC_ETH_MAC_ReturnRxDescriptor>:
		  temp_status);
}

/* Return RX descriptor */
void XMC_ETH_MAC_ReturnRxDescriptor(XMC_ETH_MAC_t *const eth_mac)
{
 8021fb8:	b480      	push	{r7}
 8021fba:	b083      	sub	sp, #12
 8021fbc:	af00      	add	r7, sp, #0
 8021fbe:	6078      	str	r0, [r7, #4]
  eth_mac->rx_desc[eth_mac->rx_index].status |= ETH_MAC_DMA_RDES0_OWN;
 8021fc0:	687b      	ldr	r3, [r7, #4]
 8021fc2:	691a      	ldr	r2, [r3, #16]
 8021fc4:	687b      	ldr	r3, [r7, #4]
 8021fc6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8021fca:	015b      	lsls	r3, r3, #5
 8021fcc:	4413      	add	r3, r2
 8021fce:	687a      	ldr	r2, [r7, #4]
 8021fd0:	6911      	ldr	r1, [r2, #16]
 8021fd2:	687a      	ldr	r2, [r7, #4]
 8021fd4:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8021fd8:	0152      	lsls	r2, r2, #5
 8021fda:	440a      	add	r2, r1
 8021fdc:	6812      	ldr	r2, [r2, #0]
 8021fde:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8021fe2:	601a      	str	r2, [r3, #0]
  eth_mac->rx_index++;
 8021fe4:	687b      	ldr	r3, [r7, #4]
 8021fe6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8021fea:	3301      	adds	r3, #1
 8021fec:	b2da      	uxtb	r2, r3
 8021fee:	687b      	ldr	r3, [r7, #4]
 8021ff0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  if (eth_mac->rx_index == eth_mac->num_rx_buf)
 8021ff4:	687b      	ldr	r3, [r7, #4]
 8021ff6:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8021ffa:	687b      	ldr	r3, [r7, #4]
 8021ffc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8022000:	429a      	cmp	r2, r3
 8022002:	d103      	bne.n	802200c <XMC_ETH_MAC_ReturnRxDescriptor+0x54>
  {
    eth_mac->rx_index = 0U;
 8022004:	687b      	ldr	r3, [r7, #4]
 8022006:	2200      	movs	r2, #0
 8022008:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  } 
}
 802200c:	370c      	adds	r7, #12
 802200e:	46bd      	mov	sp, r7
 8022010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022014:	4770      	bx	lr
 8022016:	bf00      	nop

08022018 <XMC_ETH_MAC_ReturnTxDescriptor>:

/* Return TX descriptor */
void XMC_ETH_MAC_ReturnTxDescriptor(XMC_ETH_MAC_t *const eth_mac)
{
 8022018:	b480      	push	{r7}
 802201a:	b083      	sub	sp, #12
 802201c:	af00      	add	r7, sp, #0
 802201e:	6078      	str	r0, [r7, #4]
  eth_mac->tx_ts_index = eth_mac->tx_index;
 8022020:	687b      	ldr	r3, [r7, #4]
 8022022:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8022026:	687b      	ldr	r3, [r7, #4]
 8022028:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  eth_mac->tx_desc[eth_mac->tx_index].status |= ETH_MAC_DMA_TDES0_CIC |ETH_MAC_DMA_TDES0_OWN;
 802202c:	687b      	ldr	r3, [r7, #4]
 802202e:	695a      	ldr	r2, [r3, #20]
 8022030:	687b      	ldr	r3, [r7, #4]
 8022032:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8022036:	015b      	lsls	r3, r3, #5
 8022038:	441a      	add	r2, r3
 802203a:	687b      	ldr	r3, [r7, #4]
 802203c:	6959      	ldr	r1, [r3, #20]
 802203e:	687b      	ldr	r3, [r7, #4]
 8022040:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8022044:	015b      	lsls	r3, r3, #5
 8022046:	440b      	add	r3, r1
 8022048:	681b      	ldr	r3, [r3, #0]
 802204a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802204e:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8022052:	6013      	str	r3, [r2, #0]
  eth_mac->tx_index++;
 8022054:	687b      	ldr	r3, [r7, #4]
 8022056:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 802205a:	3301      	adds	r3, #1
 802205c:	b2da      	uxtb	r2, r3
 802205e:	687b      	ldr	r3, [r7, #4]
 8022060:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  if (eth_mac->tx_index == eth_mac->num_tx_buf)
 8022064:	687b      	ldr	r3, [r7, #4]
 8022066:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 802206a:	687b      	ldr	r3, [r7, #4]
 802206c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8022070:	429a      	cmp	r2, r3
 8022072:	d103      	bne.n	802207c <XMC_ETH_MAC_ReturnTxDescriptor+0x64>
  {
    eth_mac->tx_index = 0U;
 8022074:	687b      	ldr	r3, [r7, #4]
 8022076:	2200      	movs	r2, #0
 8022078:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  } 

  eth_mac->frame_end = NULL;
 802207c:	687b      	ldr	r3, [r7, #4]
 802207e:	2200      	movs	r2, #0
 8022080:	621a      	str	r2, [r3, #32]
}
 8022082:	370c      	adds	r7, #12
 8022084:	46bd      	mov	sp, r7
 8022086:	f85d 7b04 	ldr.w	r7, [sp], #4
 802208a:	4770      	bx	lr

0802208c <XMC_FCE_Init>:
/*
 * Initialize the FCE peripheral:
 * Update FCE configuration and initialize seed value
 */
XMC_FCE_STATUS_t XMC_FCE_Init(const XMC_FCE_t *const engine)
{
 802208c:	b480      	push	{r7}
 802208e:	b083      	sub	sp, #12
 8022090:	af00      	add	r7, sp, #0
 8022092:	6078      	str	r0, [r7, #4]
  engine->kernel_ptr->CFG = engine->fce_cfg_update.regval;
 8022094:	687b      	ldr	r3, [r7, #4]
 8022096:	681b      	ldr	r3, [r3, #0]
 8022098:	687a      	ldr	r2, [r7, #4]
 802209a:	6852      	ldr	r2, [r2, #4]
 802209c:	609a      	str	r2, [r3, #8]
  engine->kernel_ptr->CRC = engine->seedvalue;
 802209e:	687b      	ldr	r3, [r7, #4]
 80220a0:	681b      	ldr	r3, [r3, #0]
 80220a2:	687a      	ldr	r2, [r7, #4]
 80220a4:	6892      	ldr	r2, [r2, #8]
 80220a6:	619a      	str	r2, [r3, #24]
  
  return XMC_FCE_STATUS_OK;
 80220a8:	2300      	movs	r3, #0
}
 80220aa:	4618      	mov	r0, r3
 80220ac:	370c      	adds	r7, #12
 80220ae:	46bd      	mov	sp, r7
 80220b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220b4:	4770      	bx	lr
 80220b6:	bf00      	nop

080220b8 <XMC_FCE_Enable>:

}

/* Enable FCE */
void XMC_FCE_Enable(void)
{
 80220b8:	b580      	push	{r7, lr}
 80220ba:	af00      	add	r7, sp, #0
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_FCE);
 80220bc:	4806      	ldr	r0, [pc, #24]	; (80220d8 <XMC_FCE_Enable+0x20>)
 80220be:	f7fe fbd7 	bl	8020870 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif

  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_FCE);
 80220c2:	4805      	ldr	r0, [pc, #20]	; (80220d8 <XMC_FCE_Enable+0x20>)
 80220c4:	f7fe fa50 	bl	8020568 <XMC_SCU_RESET_DeassertPeripheralReset>

  FCE->CLC &= (uint32_t)~FCE_CLC_DISR_Msk;
 80220c8:	4a04      	ldr	r2, [pc, #16]	; (80220dc <XMC_FCE_Enable+0x24>)
 80220ca:	4b04      	ldr	r3, [pc, #16]	; (80220dc <XMC_FCE_Enable+0x24>)
 80220cc:	681b      	ldr	r3, [r3, #0]
 80220ce:	f023 0301 	bic.w	r3, r3, #1
 80220d2:	6013      	str	r3, [r2, #0]
}
 80220d4:	bd80      	pop	{r7, pc}
 80220d6:	bf00      	nop
 80220d8:	20000040 	.word	0x20000040
 80220dc:	50020000 	.word	0x50020000

080220e0 <XMC_FCE_CalculateCRC32>:
/* Calculate and return the IEEE 802.3 Ethernet CRC32 checksum */
XMC_FCE_STATUS_t XMC_FCE_CalculateCRC32(const XMC_FCE_t *const engine,
                                        const uint32_t *data,
										uint32_t length,
										uint32_t *result)
{
 80220e0:	b480      	push	{r7}
 80220e2:	b087      	sub	sp, #28
 80220e4:	af00      	add	r7, sp, #0
 80220e6:	60f8      	str	r0, [r7, #12]
 80220e8:	60b9      	str	r1, [r7, #8]
 80220ea:	607a      	str	r2, [r7, #4]
 80220ec:	603b      	str	r3, [r7, #0]
  XMC_FCE_STATUS_t status = XMC_FCE_STATUS_OK;
 80220ee:	2300      	movs	r3, #0
 80220f0:	75fb      	strb	r3, [r7, #23]
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Length field is empty", (length != 0));
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Length is not aligned", ((length & 0x03) == 0));
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Buffer is not aligned", (((uint32_t)data % 4U) == 0));

  /* Check if data and length are word aligned */
  if (((length & 0x03U) != 0U) || (((uint32_t)length % 4U) != 0U))
 80220f2:	687b      	ldr	r3, [r7, #4]
 80220f4:	f003 0303 	and.w	r3, r3, #3
 80220f8:	2b00      	cmp	r3, #0
 80220fa:	d104      	bne.n	8022106 <XMC_FCE_CalculateCRC32+0x26>
 80220fc:	687b      	ldr	r3, [r7, #4]
 80220fe:	f003 0303 	and.w	r3, r3, #3
 8022102:	2b00      	cmp	r3, #0
 8022104:	d002      	beq.n	802210c <XMC_FCE_CalculateCRC32+0x2c>
  {
    status = XMC_FCE_STATUS_ERROR;
 8022106:	2302      	movs	r3, #2
 8022108:	75fb      	strb	r3, [r7, #23]
 802210a:	e013      	b.n	8022134 <XMC_FCE_CalculateCRC32+0x54>
  }
  else
  {
    while (0UL != length)
 802210c:	e00a      	b.n	8022124 <XMC_FCE_CalculateCRC32+0x44>
    {
      engine->kernel_ptr->IR = *data;
 802210e:	68fb      	ldr	r3, [r7, #12]
 8022110:	681b      	ldr	r3, [r3, #0]
 8022112:	68ba      	ldr	r2, [r7, #8]
 8022114:	6812      	ldr	r2, [r2, #0]
 8022116:	601a      	str	r2, [r3, #0]
      data++;
 8022118:	68bb      	ldr	r3, [r7, #8]
 802211a:	3304      	adds	r3, #4
 802211c:	60bb      	str	r3, [r7, #8]
      length -= 4U;
 802211e:	687b      	ldr	r3, [r7, #4]
 8022120:	3b04      	subs	r3, #4
 8022122:	607b      	str	r3, [r7, #4]
  {
    status = XMC_FCE_STATUS_ERROR;
  }
  else
  {
    while (0UL != length)
 8022124:	687b      	ldr	r3, [r7, #4]
 8022126:	2b00      	cmp	r3, #0
 8022128:	d1f1      	bne.n	802210e <XMC_FCE_CalculateCRC32+0x2e>
      engine->kernel_ptr->IR = *data;
      data++;
      length -= 4U;
    }

    *result = engine->kernel_ptr->CRC;
 802212a:	68fb      	ldr	r3, [r7, #12]
 802212c:	681b      	ldr	r3, [r3, #0]
 802212e:	699a      	ldr	r2, [r3, #24]
 8022130:	683b      	ldr	r3, [r7, #0]
 8022132:	601a      	str	r2, [r3, #0]
  }
  
  return status;
 8022134:	7dfb      	ldrb	r3, [r7, #23]
}
 8022136:	4618      	mov	r0, r3
 8022138:	371c      	adds	r7, #28
 802213a:	46bd      	mov	sp, r7
 802213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022140:	4770      	bx	lr
 8022142:	bf00      	nop

08022144 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8022144:	b480      	push	{r7}
 8022146:	b083      	sub	sp, #12
 8022148:	af00      	add	r7, sp, #0
 802214a:	6078      	str	r0, [r7, #4]
 802214c:	460b      	mov	r3, r1
 802214e:	70fb      	strb	r3, [r7, #3]
 8022150:	4613      	mov	r3, r2
 8022152:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8022154:	687b      	ldr	r3, [r7, #4]
 8022156:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8022158:	78fb      	ldrb	r3, [r7, #3]
 802215a:	005b      	lsls	r3, r3, #1
 802215c:	4619      	mov	r1, r3
 802215e:	2303      	movs	r3, #3
 8022160:	408b      	lsls	r3, r1
 8022162:	43db      	mvns	r3, r3
 8022164:	401a      	ands	r2, r3
 8022166:	687b      	ldr	r3, [r7, #4]
 8022168:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 802216a:	687b      	ldr	r3, [r7, #4]
 802216c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 802216e:	78bb      	ldrb	r3, [r7, #2]
 8022170:	78f9      	ldrb	r1, [r7, #3]
 8022172:	0049      	lsls	r1, r1, #1
 8022174:	408b      	lsls	r3, r1
 8022176:	431a      	orrs	r2, r3
 8022178:	687b      	ldr	r3, [r7, #4]
 802217a:	675a      	str	r2, [r3, #116]	; 0x74
}
 802217c:	370c      	adds	r7, #12
 802217e:	46bd      	mov	sp, r7
 8022180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022184:	4770      	bx	lr
 8022186:	bf00      	nop

08022188 <XMC_SPI_CH_Init>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/
 
/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 8022188:	b580      	push	{r7, lr}
 802218a:	b082      	sub	sp, #8
 802218c:	af00      	add	r7, sp, #0
 802218e:	6078      	str	r0, [r7, #4]
 8022190:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 8022192:	6878      	ldr	r0, [r7, #4]
 8022194:	f000 f892 	bl	80222bc <XMC_USIC_CH_Enable>
  
  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8022198:	683b      	ldr	r3, [r7, #0]
 802219a:	791b      	ldrb	r3, [r3, #4]
 802219c:	2b00      	cmp	r3, #0
 802219e:	d106      	bne.n	80221ae <XMC_SPI_CH_Init+0x26>
  {
    /* Configure baud rate */
    (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
 80221a0:	683b      	ldr	r3, [r7, #0]
 80221a2:	681b      	ldr	r3, [r3, #0]
 80221a4:	6878      	ldr	r0, [r7, #4]
 80221a6:	4619      	mov	r1, r3
 80221a8:	2202      	movs	r2, #2
 80221aa:	f000 f8d3 	bl	8022354 <XMC_USIC_CH_SetBaudrate>
  }
  
  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 80221ae:	687b      	ldr	r3, [r7, #4]
 80221b0:	4a0e      	ldr	r2, [pc, #56]	; (80221ec <XMC_SPI_CH_Init+0x64>)
 80221b2:	635a      	str	r2, [r3, #52]	; 0x34
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 80221b4:	687b      	ldr	r3, [r7, #4]
 80221b6:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 80221ba:	639a      	str	r2, [r3, #56]	; 0x38
                  (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 80221bc:	683b      	ldr	r3, [r7, #0]
 80221be:	791b      	ldrb	r3, [r3, #4]
 80221c0:	2b00      	cmp	r3, #0
 80221c2:	d107      	bne.n	80221d4 <XMC_SPI_CH_Init+0x4c>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                           USIC_CH_PCR_SSCMode_SELCTR_Msk |
                           (uint32_t)config->selo_inversion |
 80221c4:	683b      	ldr	r3, [r7, #0]
 80221c6:	795b      	ldrb	r3, [r3, #5]
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 80221c8:	f043 030b 	orr.w	r3, r3, #11
 80221cc:	b2db      	uxtb	r3, r3
 80221ce:	461a      	mov	r2, r3
 80221d0:	687b      	ldr	r3, [r7, #4]
 80221d2:	63da      	str	r2, [r3, #60]	; 0x3c
                           (uint32_t)config->selo_inversion |
                           USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 80221d4:	687b      	ldr	r3, [r7, #4]
 80221d6:	f04f 32ff 	mov.w	r2, #4294967295
 80221da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 80221dc:	683b      	ldr	r3, [r7, #0]
 80221de:	88db      	ldrh	r3, [r3, #6]
 80221e0:	461a      	mov	r2, r3
 80221e2:	687b      	ldr	r3, [r7, #4]
 80221e4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80221e6:	3708      	adds	r7, #8
 80221e8:	46bd      	mov	sp, r7
 80221ea:	bd80      	pop	{r7, pc}
 80221ec:	073f0102 	.word	0x073f0102

080221f0 <XMC_SPI_CH_EnableSlaveSelect>:
  return status;
}

/* Enable the selected slave signal by setting (SELO) bits in PCR register. */
void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t slave)
{
 80221f0:	b480      	push	{r7}
 80221f2:	b083      	sub	sp, #12
 80221f4:	af00      	add	r7, sp, #0
 80221f6:	6078      	str	r0, [r7, #4]
 80221f8:	6039      	str	r1, [r7, #0]
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 80221fa:	687b      	ldr	r3, [r7, #4]
 80221fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80221fe:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8022202:	687b      	ldr	r3, [r7, #4]
 8022204:	63da      	str	r2, [r3, #60]	; 0x3c
  channel->PCR_SSCMode |= (uint32_t)slave;
 8022206:	687b      	ldr	r3, [r7, #4]
 8022208:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802220a:	683b      	ldr	r3, [r7, #0]
 802220c:	431a      	orrs	r2, r3
 802220e:	687b      	ldr	r3, [r7, #4]
 8022210:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8022212:	370c      	adds	r7, #12
 8022214:	46bd      	mov	sp, r7
 8022216:	f85d 7b04 	ldr.w	r7, [sp], #4
 802221a:	4770      	bx	lr

0802221c <XMC_SPI_CH_GetReceivedData>:
  }
}

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 802221c:	b480      	push	{r7}
 802221e:	b085      	sub	sp, #20
 8022220:	af00      	add	r7, sp, #0
 8022222:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8022224:	687b      	ldr	r3, [r7, #4]
 8022226:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 802222a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 802222e:	2b00      	cmp	r3, #0
 8022230:	d103      	bne.n	802223a <XMC_SPI_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8022232:	687b      	ldr	r3, [r7, #4]
 8022234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8022236:	81fb      	strh	r3, [r7, #14]
 8022238:	e003      	b.n	8022242 <XMC_SPI_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 802223a:	687b      	ldr	r3, [r7, #4]
 802223c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8022240:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8022242:	89fb      	ldrh	r3, [r7, #14]
}
 8022244:	4618      	mov	r0, r3
 8022246:	3714      	adds	r7, #20
 8022248:	46bd      	mov	sp, r7
 802224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802224e:	4770      	bx	lr

08022250 <XMC_SPI_CH_EnableEvent>:

  return status;
}

void XMC_SPI_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8022250:	b480      	push	{r7}
 8022252:	b083      	sub	sp, #12
 8022254:	af00      	add	r7, sp, #0
 8022256:	6078      	str	r0, [r7, #4]
 8022258:	6039      	str	r1, [r7, #0]
  channel->CCR |= (event&0x1fc00U);
 802225a:	687b      	ldr	r3, [r7, #4]
 802225c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802225e:	683b      	ldr	r3, [r7, #0]
 8022260:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 8022264:	431a      	orrs	r2, r3
 8022266:	687b      	ldr	r3, [r7, #4]
 8022268:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_SSCMode |= ((event << 13U) & 0xe000U);
 802226a:	687b      	ldr	r3, [r7, #4]
 802226c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802226e:	683b      	ldr	r3, [r7, #0]
 8022270:	035b      	lsls	r3, r3, #13
 8022272:	b29b      	uxth	r3, r3
 8022274:	431a      	orrs	r2, r3
 8022276:	687b      	ldr	r3, [r7, #4]
 8022278:	63da      	str	r2, [r3, #60]	; 0x3c
}
 802227a:	370c      	adds	r7, #12
 802227c:	46bd      	mov	sp, r7
 802227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022282:	4770      	bx	lr

08022284 <XMC_SPI_CH_DisableEvent>:

void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8022284:	b480      	push	{r7}
 8022286:	b083      	sub	sp, #12
 8022288:	af00      	add	r7, sp, #0
 802228a:	6078      	str	r0, [r7, #4]
 802228c:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~(event&0x1fc00U);
 802228e:	687b      	ldr	r3, [r7, #4]
 8022290:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8022292:	683b      	ldr	r3, [r7, #0]
 8022294:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 8022298:	43db      	mvns	r3, r3
 802229a:	401a      	ands	r2, r3
 802229c:	687b      	ldr	r3, [r7, #4]
 802229e:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_SSCMode &= (uint32_t)~((event << 13U) & 0xe000U);
 80222a0:	687b      	ldr	r3, [r7, #4]
 80222a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80222a4:	683b      	ldr	r3, [r7, #0]
 80222a6:	035b      	lsls	r3, r3, #13
 80222a8:	b29b      	uxth	r3, r3
 80222aa:	43db      	mvns	r3, r3
 80222ac:	401a      	ands	r2, r3
 80222ae:	687b      	ldr	r3, [r7, #4]
 80222b0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80222b2:	370c      	adds	r7, #12
 80222b4:	46bd      	mov	sp, r7
 80222b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222ba:	4770      	bx	lr

080222bc <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 80222bc:	b580      	push	{r7, lr}
 80222be:	b082      	sub	sp, #8
 80222c0:	af00      	add	r7, sp, #0
 80222c2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 80222c4:	687b      	ldr	r3, [r7, #4]
 80222c6:	4a1a      	ldr	r2, [pc, #104]	; (8022330 <XMC_USIC_CH_Enable+0x74>)
 80222c8:	4293      	cmp	r3, r2
 80222ca:	d003      	beq.n	80222d4 <XMC_USIC_CH_Enable+0x18>
 80222cc:	687b      	ldr	r3, [r7, #4]
 80222ce:	4a19      	ldr	r2, [pc, #100]	; (8022334 <XMC_USIC_CH_Enable+0x78>)
 80222d0:	4293      	cmp	r3, r2
 80222d2:	d103      	bne.n	80222dc <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 80222d4:	4818      	ldr	r0, [pc, #96]	; (8022338 <XMC_USIC_CH_Enable+0x7c>)
 80222d6:	f000 f8c9 	bl	802246c <XMC_USIC_Enable>
 80222da:	e016      	b.n	802230a <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 80222dc:	687b      	ldr	r3, [r7, #4]
 80222de:	4a17      	ldr	r2, [pc, #92]	; (802233c <XMC_USIC_CH_Enable+0x80>)
 80222e0:	4293      	cmp	r3, r2
 80222e2:	d003      	beq.n	80222ec <XMC_USIC_CH_Enable+0x30>
 80222e4:	687b      	ldr	r3, [r7, #4]
 80222e6:	4a16      	ldr	r2, [pc, #88]	; (8022340 <XMC_USIC_CH_Enable+0x84>)
 80222e8:	4293      	cmp	r3, r2
 80222ea:	d103      	bne.n	80222f4 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 80222ec:	4815      	ldr	r0, [pc, #84]	; (8022344 <XMC_USIC_CH_Enable+0x88>)
 80222ee:	f000 f8bd 	bl	802246c <XMC_USIC_Enable>
 80222f2:	e00a      	b.n	802230a <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 80222f4:	687b      	ldr	r3, [r7, #4]
 80222f6:	4a14      	ldr	r2, [pc, #80]	; (8022348 <XMC_USIC_CH_Enable+0x8c>)
 80222f8:	4293      	cmp	r3, r2
 80222fa:	d003      	beq.n	8022304 <XMC_USIC_CH_Enable+0x48>
 80222fc:	687b      	ldr	r3, [r7, #4]
 80222fe:	4a13      	ldr	r2, [pc, #76]	; (802234c <XMC_USIC_CH_Enable+0x90>)
 8022300:	4293      	cmp	r3, r2
 8022302:	d102      	bne.n	802230a <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8022304:	4812      	ldr	r0, [pc, #72]	; (8022350 <XMC_USIC_CH_Enable+0x94>)
 8022306:	f000 f8b1 	bl	802246c <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 802230a:	687b      	ldr	r3, [r7, #4]
 802230c:	2203      	movs	r2, #3
 802230e:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8022310:	bf00      	nop
 8022312:	687b      	ldr	r3, [r7, #4]
 8022314:	68db      	ldr	r3, [r3, #12]
 8022316:	f003 0301 	and.w	r3, r3, #1
 802231a:	2b00      	cmp	r3, #0
 802231c:	d0f9      	beq.n	8022312 <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 802231e:	687b      	ldr	r3, [r7, #4]
 8022320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022322:	f023 020f 	bic.w	r2, r3, #15
 8022326:	687b      	ldr	r3, [r7, #4]
 8022328:	641a      	str	r2, [r3, #64]	; 0x40
}
 802232a:	3708      	adds	r7, #8
 802232c:	46bd      	mov	sp, r7
 802232e:	bd80      	pop	{r7, pc}
 8022330:	40030000 	.word	0x40030000
 8022334:	40030200 	.word	0x40030200
 8022338:	40030008 	.word	0x40030008
 802233c:	48020000 	.word	0x48020000
 8022340:	48020200 	.word	0x48020200
 8022344:	48020008 	.word	0x48020008
 8022348:	48024000 	.word	0x48024000
 802234c:	48024200 	.word	0x48024200
 8022350:	48024008 	.word	0x48024008

08022354 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8022354:	b580      	push	{r7, lr}
 8022356:	b08e      	sub	sp, #56	; 0x38
 8022358:	af00      	add	r7, sp, #0
 802235a:	60f8      	str	r0, [r7, #12]
 802235c:	60b9      	str	r1, [r7, #8]
 802235e:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8022360:	68bb      	ldr	r3, [r7, #8]
 8022362:	2b63      	cmp	r3, #99	; 0x63
 8022364:	d958      	bls.n	8022418 <XMC_USIC_CH_SetBaudrate+0xc4>
 8022366:	687b      	ldr	r3, [r7, #4]
 8022368:	2b00      	cmp	r3, #0
 802236a:	d055      	beq.n	8022418 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 802236c:	f7fe f93c 	bl	80205e8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8022370:	4602      	mov	r2, r0
 8022372:	4b2e      	ldr	r3, [pc, #184]	; (802242c <XMC_USIC_CH_SetBaudrate+0xd8>)
 8022374:	fba3 2302 	umull	r2, r3, r3, r2
 8022378:	095b      	lsrs	r3, r3, #5
 802237a:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 802237c:	68bb      	ldr	r3, [r7, #8]
 802237e:	4a2b      	ldr	r2, [pc, #172]	; (802242c <XMC_USIC_CH_SetBaudrate+0xd8>)
 8022380:	fba2 2303 	umull	r2, r3, r2, r3
 8022384:	095b      	lsrs	r3, r3, #5
 8022386:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8022388:	2301      	movs	r3, #1
 802238a:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 802238c:	2301      	movs	r3, #1
 802238e:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8022390:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8022394:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8022396:	f240 33ff 	movw	r3, #1023	; 0x3ff
 802239a:	633b      	str	r3, [r7, #48]	; 0x30
 802239c:	e022      	b.n	80223e4 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 802239e:	6a3b      	ldr	r3, [r7, #32]
 80223a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80223a2:	fb02 f203 	mul.w	r2, r2, r3
 80223a6:	68bb      	ldr	r3, [r7, #8]
 80223a8:	6879      	ldr	r1, [r7, #4]
 80223aa:	fb01 f303 	mul.w	r3, r1, r3
 80223ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80223b2:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 80223b4:	69fb      	ldr	r3, [r7, #28]
 80223b6:	0a9b      	lsrs	r3, r3, #10
 80223b8:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 80223ba:	69fb      	ldr	r3, [r7, #28]
 80223bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80223c0:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 80223c2:	69bb      	ldr	r3, [r7, #24]
 80223c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80223c8:	d209      	bcs.n	80223de <XMC_USIC_CH_SetBaudrate+0x8a>
 80223ca:	697a      	ldr	r2, [r7, #20]
 80223cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80223ce:	429a      	cmp	r2, r3
 80223d0:	d205      	bcs.n	80223de <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 80223d2:	697b      	ldr	r3, [r7, #20]
 80223d4:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 80223d6:	69bb      	ldr	r3, [r7, #24]
 80223d8:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 80223da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80223dc:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 80223de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80223e0:	3b01      	subs	r3, #1
 80223e2:	633b      	str	r3, [r7, #48]	; 0x30
 80223e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80223e6:	2b00      	cmp	r3, #0
 80223e8:	d1d9      	bne.n	802239e <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 80223ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80223ec:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80223f0:	68fb      	ldr	r3, [r7, #12]
 80223f2:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80223f4:	68fb      	ldr	r3, [r7, #12]
 80223f6:	695a      	ldr	r2, [r3, #20]
 80223f8:	4b0d      	ldr	r3, [pc, #52]	; (8022430 <XMC_USIC_CH_SetBaudrate+0xdc>)
 80223fa:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 80223fc:	687a      	ldr	r2, [r7, #4]
 80223fe:	3a01      	subs	r2, #1
 8022400:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8022402:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8022404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022406:	3b01      	subs	r3, #1
 8022408:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 802240a:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 802240c:	68fb      	ldr	r3, [r7, #12]
 802240e:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8022410:	2300      	movs	r3, #0
 8022412:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8022416:	e002      	b.n	802241e <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8022418:	2301      	movs	r3, #1
 802241a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 802241e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8022422:	4618      	mov	r0, r3
 8022424:	3738      	adds	r7, #56	; 0x38
 8022426:	46bd      	mov	sp, r7
 8022428:	bd80      	pop	{r7, pc}
 802242a:	bf00      	nop
 802242c:	51eb851f 	.word	0x51eb851f
 8022430:	fc0080ef 	.word	0xfc0080ef

08022434 <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 8022434:	b480      	push	{r7}
 8022436:	b085      	sub	sp, #20
 8022438:	af00      	add	r7, sp, #0
 802243a:	60f8      	str	r0, [r7, #12]
 802243c:	460b      	mov	r3, r1
 802243e:	607a      	str	r2, [r7, #4]
 8022440:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8022442:	68fb      	ldr	r3, [r7, #12]
 8022444:	699a      	ldr	r2, [r3, #24]
 8022446:	7afb      	ldrb	r3, [r7, #11]
 8022448:	2107      	movs	r1, #7
 802244a:	fa01 f303 	lsl.w	r3, r1, r3
 802244e:	43db      	mvns	r3, r3
 8022450:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 8022452:	7afb      	ldrb	r3, [r7, #11]
 8022454:	6879      	ldr	r1, [r7, #4]
 8022456:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 802245a:	431a      	orrs	r2, r3
 802245c:	68fb      	ldr	r3, [r7, #12]
 802245e:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 8022460:	3714      	adds	r7, #20
 8022462:	46bd      	mov	sp, r7
 8022464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022468:	4770      	bx	lr
 802246a:	bf00      	nop

0802246c <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                   (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 802246c:	b580      	push	{r7, lr}
 802246e:	b082      	sub	sp, #8
 8022470:	af00      	add	r7, sp, #0
 8022472:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8022474:	687b      	ldr	r3, [r7, #4]
 8022476:	4a12      	ldr	r2, [pc, #72]	; (80224c0 <XMC_USIC_Enable+0x54>)
 8022478:	4293      	cmp	r3, r2
 802247a:	d108      	bne.n	802248e <XMC_USIC_Enable+0x22>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 802247c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8022480:	f7fe f9f6 	bl	8020870 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8022484:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8022488:	f7fe f86e 	bl	8020568 <XMC_SCU_RESET_DeassertPeripheralReset>
 802248c:	e014      	b.n	80224b8 <XMC_USIC_Enable+0x4c>
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 802248e:	687b      	ldr	r3, [r7, #4]
 8022490:	4a0c      	ldr	r2, [pc, #48]	; (80224c4 <XMC_USIC_Enable+0x58>)
 8022492:	4293      	cmp	r3, r2
 8022494:	d106      	bne.n	80224a4 <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 8022496:	480c      	ldr	r0, [pc, #48]	; (80224c8 <XMC_USIC_Enable+0x5c>)
 8022498:	f7fe f9ea 	bl	8020870 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 802249c:	480a      	ldr	r0, [pc, #40]	; (80224c8 <XMC_USIC_Enable+0x5c>)
 802249e:	f7fe f863 	bl	8020568 <XMC_SCU_RESET_DeassertPeripheralReset>
 80224a2:	e009      	b.n	80224b8 <XMC_USIC_Enable+0x4c>
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 80224a4:	687b      	ldr	r3, [r7, #4]
 80224a6:	4a09      	ldr	r2, [pc, #36]	; (80224cc <XMC_USIC_Enable+0x60>)
 80224a8:	4293      	cmp	r3, r2
 80224aa:	d105      	bne.n	80224b8 <XMC_USIC_Enable+0x4c>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
 80224ac:	4808      	ldr	r0, [pc, #32]	; (80224d0 <XMC_USIC_Enable+0x64>)
 80224ae:	f7fe f9df 	bl	8020870 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 80224b2:	4807      	ldr	r0, [pc, #28]	; (80224d0 <XMC_USIC_Enable+0x64>)
 80224b4:	f7fe f858 	bl	8020568 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 80224b8:	3708      	adds	r7, #8
 80224ba:	46bd      	mov	sp, r7
 80224bc:	bd80      	pop	{r7, pc}
 80224be:	bf00      	nop
 80224c0:	40030008 	.word	0x40030008
 80224c4:	48020008 	.word	0x48020008
 80224c8:	10000080 	.word	0x10000080
 80224cc:	48024008 	.word	0x48024008
 80224d0:	10000100 	.word	0x10000100

080224d4 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 80224d4:	b580      	push	{r7, lr}
 80224d6:	b084      	sub	sp, #16
 80224d8:	af00      	add	r7, sp, #0
 80224da:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 80224dc:	4b14      	ldr	r3, [pc, #80]	; (8022530 <_sbrk+0x5c>)
 80224de:	681b      	ldr	r3, [r3, #0]
 80224e0:	2b00      	cmp	r3, #0
 80224e2:	d102      	bne.n	80224ea <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 80224e4:	4b12      	ldr	r3, [pc, #72]	; (8022530 <_sbrk+0x5c>)
 80224e6:	4a13      	ldr	r2, [pc, #76]	; (8022534 <_sbrk+0x60>)
 80224e8:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 80224ea:	4b11      	ldr	r3, [pc, #68]	; (8022530 <_sbrk+0x5c>)
 80224ec:	681b      	ldr	r3, [r3, #0]
 80224ee:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 80224f0:	687b      	ldr	r3, [r7, #4]
 80224f2:	3303      	adds	r3, #3
 80224f4:	f023 0303 	bic.w	r3, r3, #3
 80224f8:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 80224fa:	4b0d      	ldr	r3, [pc, #52]	; (8022530 <_sbrk+0x5c>)
 80224fc:	681a      	ldr	r2, [r3, #0]
 80224fe:	687b      	ldr	r3, [r7, #4]
 8022500:	4413      	add	r3, r2
 8022502:	4a0d      	ldr	r2, [pc, #52]	; (8022538 <_sbrk+0x64>)
 8022504:	4293      	cmp	r3, r2
 8022506:	d207      	bcs.n	8022518 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8022508:	4b09      	ldr	r3, [pc, #36]	; (8022530 <_sbrk+0x5c>)
 802250a:	681a      	ldr	r2, [r3, #0]
 802250c:	687b      	ldr	r3, [r7, #4]
 802250e:	4413      	add	r3, r2
 8022510:	4a07      	ldr	r2, [pc, #28]	; (8022530 <_sbrk+0x5c>)
 8022512:	6013      	str	r3, [r2, #0]
    return (base);
 8022514:	68fb      	ldr	r3, [r7, #12]
 8022516:	e006      	b.n	8022526 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8022518:	f007 faa2 	bl	8029a60 <__errno>
 802251c:	4602      	mov	r2, r0
 802251e:	230c      	movs	r3, #12
 8022520:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8022522:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8022526:	4618      	mov	r0, r3
 8022528:	3710      	adds	r7, #16
 802252a:	46bd      	mov	sp, r7
 802252c:	bd80      	pop	{r7, pc}
 802252e:	bf00      	nop
 8022530:	1ffe8af8 	.word	0x1ffe8af8
 8022534:	200030a0 	.word	0x200030a0
 8022538:	2003ffc0 	.word	0x2003ffc0

0802253c <_init>:

/* Init */
void _init(void)
{}
 802253c:	b480      	push	{r7}
 802253e:	af00      	add	r7, sp, #0
 8022540:	46bd      	mov	sp, r7
 8022542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022546:	4770      	bx	lr

08022548 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8022548:	b480      	push	{r7}
 802254a:	b083      	sub	sp, #12
 802254c:	af00      	add	r7, sp, #0
 802254e:	6078      	str	r0, [r7, #4]
 8022550:	460b      	mov	r3, r1
 8022552:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 8022554:	687b      	ldr	r3, [r7, #4]
 8022556:	68da      	ldr	r2, [r3, #12]
 8022558:	78fb      	ldrb	r3, [r7, #3]
 802255a:	2101      	movs	r1, #1
 802255c:	fa01 f303 	lsl.w	r3, r1, r3
 8022560:	431a      	orrs	r2, r3
 8022562:	687b      	ldr	r3, [r7, #4]
 8022564:	60da      	str	r2, [r3, #12]
}
 8022566:	370c      	adds	r7, #12
 8022568:	46bd      	mov	sp, r7
 802256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802256e:	4770      	bx	lr

08022570 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8022570:	b480      	push	{r7}
 8022572:	b083      	sub	sp, #12
 8022574:	af00      	add	r7, sp, #0
 8022576:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8022578:	687b      	ldr	r3, [r7, #4]
 802257a:	2201      	movs	r2, #1
 802257c:	60da      	str	r2, [r3, #12]
}
 802257e:	370c      	adds	r7, #12
 8022580:	46bd      	mov	sp, r7
 8022582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022586:	4770      	bx	lr

08022588 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8022588:	b480      	push	{r7}
 802258a:	b083      	sub	sp, #12
 802258c:	af00      	add	r7, sp, #0
 802258e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8022590:	687b      	ldr	r3, [r7, #4]
 8022592:	2202      	movs	r2, #2
 8022594:	611a      	str	r2, [r3, #16]
}
 8022596:	370c      	adds	r7, #12
 8022598:	46bd      	mov	sp, r7
 802259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802259e:	4770      	bx	lr

080225a0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 80225a0:	b480      	push	{r7}
 80225a2:	b083      	sub	sp, #12
 80225a4:	af00      	add	r7, sp, #0
 80225a6:	6078      	str	r0, [r7, #4]
 80225a8:	460b      	mov	r3, r1
 80225aa:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 80225ac:	887a      	ldrh	r2, [r7, #2]
 80225ae:	687b      	ldr	r3, [r7, #4]
 80225b0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80225b2:	370c      	adds	r7, #12
 80225b4:	46bd      	mov	sp, r7
 80225b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225ba:	4770      	bx	lr

080225bc <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 80225bc:	b480      	push	{r7}
 80225be:	b083      	sub	sp, #12
 80225c0:	af00      	add	r7, sp, #0
 80225c2:	6078      	str	r0, [r7, #4]
 80225c4:	460b      	mov	r3, r1
 80225c6:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 80225c8:	887a      	ldrh	r2, [r7, #2]
 80225ca:	687b      	ldr	r3, [r7, #4]
 80225cc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80225ce:	370c      	adds	r7, #12
 80225d0:	46bd      	mov	sp, r7
 80225d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225d6:	4770      	bx	lr

080225d8 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 80225d8:	b480      	push	{r7}
 80225da:	b083      	sub	sp, #12
 80225dc:	af00      	add	r7, sp, #0
 80225de:	6078      	str	r0, [r7, #4]
 80225e0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 80225e2:	687b      	ldr	r3, [r7, #4]
 80225e4:	683a      	ldr	r2, [r7, #0]
 80225e6:	611a      	str	r2, [r3, #16]
}
 80225e8:	370c      	adds	r7, #12
 80225ea:	46bd      	mov	sp, r7
 80225ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225f0:	4770      	bx	lr
 80225f2:	bf00      	nop

080225f4 <XMC_CCU4_SLICE_GetTimerValue>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_SetTimerValue().
 */
__STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerValue(const XMC_CCU4_SLICE_t *const slice)
{
 80225f4:	b480      	push	{r7}
 80225f6:	b083      	sub	sp, #12
 80225f8:	af00      	add	r7, sp, #0
 80225fa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return((uint16_t)slice->TIMER);
 80225fc:	687b      	ldr	r3, [r7, #4]
 80225fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022600:	b29b      	uxth	r3, r3
}
 8022602:	4618      	mov	r0, r3
 8022604:	370c      	adds	r7, #12
 8022606:	46bd      	mov	sp, r7
 8022608:	f85d 7b04 	ldr.w	r7, [sp], #4
 802260c:	4770      	bx	lr
 802260e:	bf00      	nop

08022610 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8022610:	b480      	push	{r7}
 8022612:	b083      	sub	sp, #12
 8022614:	af00      	add	r7, sp, #0
 8022616:	6078      	str	r0, [r7, #4]
 8022618:	460b      	mov	r3, r1
 802261a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 802261c:	687b      	ldr	r3, [r7, #4]
 802261e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8022622:	78fb      	ldrb	r3, [r7, #3]
 8022624:	2101      	movs	r1, #1
 8022626:	fa01 f303 	lsl.w	r3, r1, r3
 802262a:	431a      	orrs	r2, r3
 802262c:	687b      	ldr	r3, [r7, #4]
 802262e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8022632:	370c      	adds	r7, #12
 8022634:	46bd      	mov	sp, r7
 8022636:	f85d 7b04 	ldr.w	r7, [sp], #4
 802263a:	4770      	bx	lr

0802263c <XMC_CCU4_SLICE_ClearEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent()<BR> XMC_CCU4_SLICE_GetEvent().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 802263c:	b480      	push	{r7}
 802263e:	b083      	sub	sp, #12
 8022640:	af00      	add	r7, sp, #0
 8022642:	6078      	str	r0, [r7, #4]
 8022644:	460b      	mov	r3, r1
 8022646:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->SWR |= ((uint32_t) 1) << ((uint32_t) event);
 8022648:	687b      	ldr	r3, [r7, #4]
 802264a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 802264e:	78fb      	ldrb	r3, [r7, #3]
 8022650:	2101      	movs	r1, #1
 8022652:	fa01 f303 	lsl.w	r3, r1, r3
 8022656:	431a      	orrs	r2, r3
 8022658:	687b      	ldr	r3, [r7, #4]
 802265a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 802265e:	370c      	adds	r7, #12
 8022660:	46bd      	mov	sp, r7
 8022662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022666:	4770      	bx	lr

08022668 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8022668:	b580      	push	{r7, lr}
 802266a:	b084      	sub	sp, #16
 802266c:	af00      	add	r7, sp, #0
 802266e:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8022670:	2300      	movs	r3, #0
 8022672:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8022674:	687b      	ldr	r3, [r7, #4]
 8022676:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 802267a:	f083 0301 	eor.w	r3, r3, #1
 802267e:	b2db      	uxtb	r3, r3
 8022680:	2b00      	cmp	r3, #0
 8022682:	d009      	beq.n	8022698 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8022684:	687b      	ldr	r3, [r7, #4]
 8022686:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 802268a:	2b00      	cmp	r3, #0
 802268c:	d104      	bne.n	8022698 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 802268e:	6878      	ldr	r0, [r7, #4]
 8022690:	f000 f85e 	bl	8022750 <TIMER_CCU4_lInit>
 8022694:	4603      	mov	r3, r0
 8022696:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 8022698:	7bfb      	ldrb	r3, [r7, #15]
}
 802269a:	4618      	mov	r0, r3
 802269c:	3710      	adds	r7, #16
 802269e:	46bd      	mov	sp, r7
 80226a0:	bd80      	pop	{r7, pc}
 80226a2:	bf00      	nop

080226a4 <TIMER_ClearEvent>:

/*
 * This function clears the period match interrupt status of the given timer.
 */
void TIMER_ClearEvent(TIMER_t *const handle_ptr)
{
 80226a4:	b580      	push	{r7, lr}
 80226a6:	b082      	sub	sp, #8
 80226a8:	af00      	add	r7, sp, #0
 80226aa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("TIME_CCU_AcknowledgeInterrupt:handle_ptr NULL" , (handle_ptr != NULL));

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80226ac:	687b      	ldr	r3, [r7, #4]
 80226ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80226b2:	2b00      	cmp	r3, #0
 80226b4:	d105      	bne.n	80226c2 <TIMER_ClearEvent+0x1e>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU4_SLICE_ClearEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 80226b6:	687b      	ldr	r3, [r7, #4]
 80226b8:	695b      	ldr	r3, [r3, #20]
 80226ba:	4618      	mov	r0, r3
 80226bc:	2100      	movs	r1, #0
 80226be:	f7ff ffbd 	bl	802263c <XMC_CCU4_SLICE_ClearEvent>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU8_SLICE_ClearEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
  }
#endif
}
 80226c2:	3708      	adds	r7, #8
 80226c4:	46bd      	mov	sp, r7
 80226c6:	bd80      	pop	{r7, pc}

080226c8 <TIMER_GetTime>:

/*
 * This function returns the current time value
 */
uint32_t TIMER_GetTime(TIMER_t *const handle_ptr)
{
 80226c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80226ca:	b087      	sub	sp, #28
 80226cc:	af00      	add	r7, sp, #0
 80226ce:	6078      	str	r0, [r7, #4]
  uint32_t ltimer_val;
  uint32_t lprescaler;
  uint32_t ltime_val;

  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));
  ltime_val = 0U;
 80226d0:	2300      	movs	r3, #0
 80226d2:	617b      	str	r3, [r7, #20]

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80226d4:	687b      	ldr	r3, [r7, #4]
 80226d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80226da:	2b00      	cmp	r3, #0
 80226dc:	d131      	bne.n	8022742 <TIMER_GetTime+0x7a>
  {
    /* Added one to according to the edge aligned mode */
    ltimer_val = (uint32_t)XMC_CCU4_SLICE_GetTimerValue(handle_ptr->ccu4_slice_ptr) + 1U;
 80226de:	687b      	ldr	r3, [r7, #4]
 80226e0:	695b      	ldr	r3, [r3, #20]
 80226e2:	4618      	mov	r0, r3
 80226e4:	f7ff ff86 	bl	80225f4 <XMC_CCU4_SLICE_GetTimerValue>
 80226e8:	4603      	mov	r3, r0
 80226ea:	3301      	adds	r3, #1
 80226ec:	613b      	str	r3, [r7, #16]
    lprescaler = handle_ptr->ccu4_slice_config_ptr->prescaler_initval;
 80226ee:	687b      	ldr	r3, [r7, #4]
 80226f0:	69db      	ldr	r3, [r3, #28]
 80226f2:	791b      	ldrb	r3, [r3, #4]
 80226f4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80226f8:	b2db      	uxtb	r3, r3
 80226fa:	60fb      	str	r3, [r7, #12]

    /* calculate the time value in micro seconds and scaled with 100 */
    ltime_val = (uint32_t)((uint64_t)((uint64_t)ltimer_val * (uint64_t)TIMER_CLK_CONST_SCALED) >> \
 80226fc:	693b      	ldr	r3, [r7, #16]
 80226fe:	461a      	mov	r2, r3
 8022700:	f04f 0300 	mov.w	r3, #0
 8022704:	4911      	ldr	r1, [pc, #68]	; (802274c <TIMER_GetTime+0x84>)
 8022706:	fb01 f003 	mul.w	r0, r1, r3
 802270a:	2100      	movs	r1, #0
 802270c:	fb01 f102 	mul.w	r1, r1, r2
 8022710:	4401      	add	r1, r0
 8022712:	480e      	ldr	r0, [pc, #56]	; (802274c <TIMER_GetTime+0x84>)
 8022714:	fba2 2300 	umull	r2, r3, r2, r0
 8022718:	4419      	add	r1, r3
 802271a:	460b      	mov	r3, r1
                           (TIMER_CLK_SCALE_FACTOR - lprescaler));
 802271c:	68f9      	ldr	r1, [r7, #12]
 802271e:	f1c1 0120 	rsb	r1, r1, #32
    /* Added one to according to the edge aligned mode */
    ltimer_val = (uint32_t)XMC_CCU4_SLICE_GetTimerValue(handle_ptr->ccu4_slice_ptr) + 1U;
    lprescaler = handle_ptr->ccu4_slice_config_ptr->prescaler_initval;

    /* calculate the time value in micro seconds and scaled with 100 */
    ltime_val = (uint32_t)((uint64_t)((uint64_t)ltimer_val * (uint64_t)TIMER_CLK_CONST_SCALED) >> \
 8022722:	f1c1 0620 	rsb	r6, r1, #32
 8022726:	f1a1 0020 	sub.w	r0, r1, #32
 802272a:	fa22 f401 	lsr.w	r4, r2, r1
 802272e:	fa03 f606 	lsl.w	r6, r3, r6
 8022732:	4334      	orrs	r4, r6
 8022734:	fa23 f000 	lsr.w	r0, r3, r0
 8022738:	4304      	orrs	r4, r0
 802273a:	fa23 f501 	lsr.w	r5, r3, r1
 802273e:	4623      	mov	r3, r4
 8022740:	617b      	str	r3, [r7, #20]
    ltime_val = (uint32_t)((uint64_t)((uint64_t)ltimer_val * (uint64_t)TIMER_CLK_CONST_SCALED) >> \
                           (TIMER_CLK_SCALE_FACTOR - lprescaler));
  }
#endif

  return ltime_val;
 8022742:	697b      	ldr	r3, [r7, #20]
}
 8022744:	4618      	mov	r0, r3
 8022746:	371c      	adds	r7, #28
 8022748:	46bd      	mov	sp, r7
 802274a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802274c:	b1c71c71 	.word	0xb1c71c71

08022750 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8022750:	b580      	push	{r7, lr}
 8022752:	b084      	sub	sp, #16
 8022754:	af00      	add	r7, sp, #0
 8022756:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8022758:	687b      	ldr	r3, [r7, #4]
 802275a:	691b      	ldr	r3, [r3, #16]
 802275c:	4618      	mov	r0, r3
 802275e:	f001 fbe3 	bl	8023f28 <GLOBAL_CCU4_Init>
 8022762:	4603      	mov	r3, r0
 8022764:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 8022766:	687b      	ldr	r3, [r7, #4]
 8022768:	691b      	ldr	r3, [r3, #16]
 802276a:	689a      	ldr	r2, [r3, #8]
 802276c:	687b      	ldr	r3, [r7, #4]
 802276e:	7e1b      	ldrb	r3, [r3, #24]
 8022770:	4610      	mov	r0, r2
 8022772:	4619      	mov	r1, r3
 8022774:	f7ff fee8 	bl	8022548 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8022778:	687b      	ldr	r3, [r7, #4]
 802277a:	695a      	ldr	r2, [r3, #20]
 802277c:	687b      	ldr	r3, [r7, #4]
 802277e:	69db      	ldr	r3, [r3, #28]
 8022780:	4610      	mov	r0, r2
 8022782:	4619      	mov	r1, r3
 8022784:	f7fe fb56 	bl	8020e34 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8022788:	6878      	ldr	r0, [r7, #4]
 802278a:	f000 f82d 	bl	80227e8 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 802278e:	687b      	ldr	r3, [r7, #4]
 8022790:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8022794:	2b00      	cmp	r3, #0
 8022796:	d00f      	beq.n	80227b8 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8022798:	687b      	ldr	r3, [r7, #4]
 802279a:	695a      	ldr	r2, [r3, #20]
 802279c:	687b      	ldr	r3, [r7, #4]
 802279e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80227a2:	4610      	mov	r0, r2
 80227a4:	2100      	movs	r1, #0
 80227a6:	461a      	mov	r2, r3
 80227a8:	f7fe fb7a 	bl	8020ea0 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 80227ac:	687b      	ldr	r3, [r7, #4]
 80227ae:	695b      	ldr	r3, [r3, #20]
 80227b0:	4618      	mov	r0, r3
 80227b2:	2100      	movs	r1, #0
 80227b4:	f7ff ff2c 	bl	8022610 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 80227b8:	687b      	ldr	r3, [r7, #4]
 80227ba:	695b      	ldr	r3, [r3, #20]
 80227bc:	4618      	mov	r0, r3
 80227be:	f7ff fee3 	bl	8022588 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 80227c2:	687b      	ldr	r3, [r7, #4]
 80227c4:	2201      	movs	r2, #1
 80227c6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 80227ca:	687b      	ldr	r3, [r7, #4]
 80227cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80227d0:	2b00      	cmp	r3, #0
 80227d2:	d004      	beq.n	80227de <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 80227d4:	687b      	ldr	r3, [r7, #4]
 80227d6:	695b      	ldr	r3, [r3, #20]
 80227d8:	4618      	mov	r0, r3
 80227da:	f7ff fec9 	bl	8022570 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 80227de:	7bfb      	ldrb	r3, [r7, #15]
}
 80227e0:	4618      	mov	r0, r3
 80227e2:	3710      	adds	r7, #16
 80227e4:	46bd      	mov	sp, r7
 80227e6:	bd80      	pop	{r7, pc}

080227e8 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 80227e8:	b580      	push	{r7, lr}
 80227ea:	b082      	sub	sp, #8
 80227ec:	af00      	add	r7, sp, #0
 80227ee:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 80227f0:	687b      	ldr	r3, [r7, #4]
 80227f2:	695a      	ldr	r2, [r3, #20]
 80227f4:	687b      	ldr	r3, [r7, #4]
 80227f6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80227f8:	4610      	mov	r0, r2
 80227fa:	4619      	mov	r1, r3
 80227fc:	f7ff fed0 	bl	80225a0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 8022800:	687b      	ldr	r3, [r7, #4]
 8022802:	695b      	ldr	r3, [r3, #20]
 8022804:	4618      	mov	r0, r3
 8022806:	2100      	movs	r1, #0
 8022808:	f7ff fed8 	bl	80225bc <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 802280c:	687b      	ldr	r3, [r7, #4]
 802280e:	691b      	ldr	r3, [r3, #16]
 8022810:	689a      	ldr	r2, [r3, #8]
 8022812:	687b      	ldr	r3, [r7, #4]
 8022814:	68db      	ldr	r3, [r3, #12]
 8022816:	4610      	mov	r0, r2
 8022818:	4619      	mov	r1, r3
 802281a:	f7ff fedd 	bl	80225d8 <XMC_CCU4_EnableShadowTransfer>
}
 802281e:	3708      	adds	r7, #8
 8022820:	46bd      	mov	sp, r7
 8022822:	bd80      	pop	{r7, pc}

08022824 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8022824:	b480      	push	{r7}
 8022826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8022828:	4b04      	ldr	r3, [pc, #16]	; (802283c <NVIC_GetPriorityGrouping+0x18>)
 802282a:	68db      	ldr	r3, [r3, #12]
 802282c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8022830:	0a1b      	lsrs	r3, r3, #8
}
 8022832:	4618      	mov	r0, r3
 8022834:	46bd      	mov	sp, r7
 8022836:	f85d 7b04 	ldr.w	r7, [sp], #4
 802283a:	4770      	bx	lr
 802283c:	e000ed00 	.word	0xe000ed00

08022840 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8022840:	b480      	push	{r7}
 8022842:	b083      	sub	sp, #12
 8022844:	af00      	add	r7, sp, #0
 8022846:	4603      	mov	r3, r0
 8022848:	6039      	str	r1, [r7, #0]
 802284a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 802284c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022850:	2b00      	cmp	r3, #0
 8022852:	da0b      	bge.n	802286c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022854:	490d      	ldr	r1, [pc, #52]	; (802288c <NVIC_SetPriority+0x4c>)
 8022856:	79fb      	ldrb	r3, [r7, #7]
 8022858:	f003 030f 	and.w	r3, r3, #15
 802285c:	3b04      	subs	r3, #4
 802285e:	683a      	ldr	r2, [r7, #0]
 8022860:	b2d2      	uxtb	r2, r2
 8022862:	0092      	lsls	r2, r2, #2
 8022864:	b2d2      	uxtb	r2, r2
 8022866:	440b      	add	r3, r1
 8022868:	761a      	strb	r2, [r3, #24]
 802286a:	e009      	b.n	8022880 <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802286c:	4908      	ldr	r1, [pc, #32]	; (8022890 <NVIC_SetPriority+0x50>)
 802286e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022872:	683a      	ldr	r2, [r7, #0]
 8022874:	b2d2      	uxtb	r2, r2
 8022876:	0092      	lsls	r2, r2, #2
 8022878:	b2d2      	uxtb	r2, r2
 802287a:	440b      	add	r3, r1
 802287c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8022880:	370c      	adds	r7, #12
 8022882:	46bd      	mov	sp, r7
 8022884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022888:	4770      	bx	lr
 802288a:	bf00      	nop
 802288c:	e000ed00 	.word	0xe000ed00
 8022890:	e000e100 	.word	0xe000e100

08022894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8022894:	b480      	push	{r7}
 8022896:	b089      	sub	sp, #36	; 0x24
 8022898:	af00      	add	r7, sp, #0
 802289a:	60f8      	str	r0, [r7, #12]
 802289c:	60b9      	str	r1, [r7, #8]
 802289e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80228a0:	68fb      	ldr	r3, [r7, #12]
 80228a2:	f003 0307 	and.w	r3, r3, #7
 80228a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80228a8:	69fb      	ldr	r3, [r7, #28]
 80228aa:	f1c3 0307 	rsb	r3, r3, #7
 80228ae:	2b06      	cmp	r3, #6
 80228b0:	bf28      	it	cs
 80228b2:	2306      	movcs	r3, #6
 80228b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80228b6:	69fb      	ldr	r3, [r7, #28]
 80228b8:	3306      	adds	r3, #6
 80228ba:	2b06      	cmp	r3, #6
 80228bc:	d902      	bls.n	80228c4 <NVIC_EncodePriority+0x30>
 80228be:	69fb      	ldr	r3, [r7, #28]
 80228c0:	3b01      	subs	r3, #1
 80228c2:	e000      	b.n	80228c6 <NVIC_EncodePriority+0x32>
 80228c4:	2300      	movs	r3, #0
 80228c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80228c8:	69bb      	ldr	r3, [r7, #24]
 80228ca:	2201      	movs	r2, #1
 80228cc:	fa02 f303 	lsl.w	r3, r2, r3
 80228d0:	1e5a      	subs	r2, r3, #1
 80228d2:	68bb      	ldr	r3, [r7, #8]
 80228d4:	401a      	ands	r2, r3
 80228d6:	697b      	ldr	r3, [r7, #20]
 80228d8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80228da:	697b      	ldr	r3, [r7, #20]
 80228dc:	2101      	movs	r1, #1
 80228de:	fa01 f303 	lsl.w	r3, r1, r3
 80228e2:	1e59      	subs	r1, r3, #1
 80228e4:	687b      	ldr	r3, [r7, #4]
 80228e6:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80228e8:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80228ea:	4618      	mov	r0, r3
 80228ec:	3724      	adds	r7, #36	; 0x24
 80228ee:	46bd      	mov	sp, r7
 80228f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228f4:	4770      	bx	lr
 80228f6:	bf00      	nop

080228f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80228f8:	b580      	push	{r7, lr}
 80228fa:	b082      	sub	sp, #8
 80228fc:	af00      	add	r7, sp, #0
 80228fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8022900:	687b      	ldr	r3, [r7, #4]
 8022902:	3b01      	subs	r3, #1
 8022904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8022908:	d301      	bcc.n	802290e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 802290a:	2301      	movs	r3, #1
 802290c:	e00f      	b.n	802292e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802290e:	4a0a      	ldr	r2, [pc, #40]	; (8022938 <SysTick_Config+0x40>)
 8022910:	687b      	ldr	r3, [r7, #4]
 8022912:	3b01      	subs	r3, #1
 8022914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8022916:	f04f 30ff 	mov.w	r0, #4294967295
 802291a:	213f      	movs	r1, #63	; 0x3f
 802291c:	f7ff ff90 	bl	8022840 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8022920:	4b05      	ldr	r3, [pc, #20]	; (8022938 <SysTick_Config+0x40>)
 8022922:	2200      	movs	r2, #0
 8022924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8022926:	4b04      	ldr	r3, [pc, #16]	; (8022938 <SysTick_Config+0x40>)
 8022928:	2207      	movs	r2, #7
 802292a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 802292c:	2300      	movs	r3, #0
}
 802292e:	4618      	mov	r0, r3
 8022930:	3708      	adds	r7, #8
 8022932:	46bd      	mov	sp, r7
 8022934:	bd80      	pop	{r7, pc}
 8022936:	bf00      	nop
 8022938:	e000e010 	.word	0xe000e010

0802293c <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
 802293c:	b490      	push	{r4, r7}
 802293e:	b086      	sub	sp, #24
 8022940:	af00      	add	r7, sp, #0
 8022942:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
 8022944:	2300      	movs	r3, #0
 8022946:	73fb      	strb	r3, [r7, #15]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
 8022948:	496b      	ldr	r1, [pc, #428]	; (8022af8 <SYSTIMER_lInsertTimerList+0x1bc>)
 802294a:	687a      	ldr	r2, [r7, #4]
 802294c:	4613      	mov	r3, r2
 802294e:	00db      	lsls	r3, r3, #3
 8022950:	4413      	add	r3, r2
 8022952:	009b      	lsls	r3, r3, #2
 8022954:	440b      	add	r3, r1
 8022956:	3318      	adds	r3, #24
 8022958:	681b      	ldr	r3, [r3, #0]
 802295a:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
 802295c:	4b67      	ldr	r3, [pc, #412]	; (8022afc <SYSTIMER_lInsertTimerList+0x1c0>)
 802295e:	681b      	ldr	r3, [r3, #0]
 8022960:	2b00      	cmp	r3, #0
 8022962:	d109      	bne.n	8022978 <SYSTIMER_lInsertTimerList+0x3c>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
 8022964:	687a      	ldr	r2, [r7, #4]
 8022966:	4613      	mov	r3, r2
 8022968:	00db      	lsls	r3, r3, #3
 802296a:	4413      	add	r3, r2
 802296c:	009b      	lsls	r3, r3, #2
 802296e:	4a62      	ldr	r2, [pc, #392]	; (8022af8 <SYSTIMER_lInsertTimerList+0x1bc>)
 8022970:	4413      	add	r3, r2
 8022972:	4a62      	ldr	r2, [pc, #392]	; (8022afc <SYSTIMER_lInsertTimerList+0x1c0>)
 8022974:	6013      	str	r3, [r2, #0]
 8022976:	e0bb      	b.n	8022af0 <SYSTIMER_lInsertTimerList+0x1b4>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
 8022978:	4b60      	ldr	r3, [pc, #384]	; (8022afc <SYSTIMER_lInsertTimerList+0x1c0>)
 802297a:	681b      	ldr	r3, [r3, #0]
 802297c:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
 802297e:	68bb      	ldr	r3, [r7, #8]
 8022980:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8022982:	e0ab      	b.n	8022adc <SYSTIMER_lInsertTimerList+0x1a0>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
 8022984:	697b      	ldr	r3, [r7, #20]
 8022986:	699b      	ldr	r3, [r3, #24]
 8022988:	461a      	mov	r2, r3
 802298a:	693b      	ldr	r3, [r7, #16]
 802298c:	1a9b      	subs	r3, r3, r2
 802298e:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
 8022990:	693b      	ldr	r3, [r7, #16]
 8022992:	2b00      	cmp	r3, #0
 8022994:	dc7a      	bgt.n	8022a8c <SYSTIMER_lInsertTimerList+0x150>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
 8022996:	697b      	ldr	r3, [r7, #20]
 8022998:	685b      	ldr	r3, [r3, #4]
 802299a:	2b00      	cmp	r3, #0
 802299c:	d026      	beq.n	80229ec <SYSTIMER_lInsertTimerList+0xb0>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
 802299e:	697b      	ldr	r3, [r7, #20]
 80229a0:	6859      	ldr	r1, [r3, #4]
 80229a2:	687a      	ldr	r2, [r7, #4]
 80229a4:	4613      	mov	r3, r2
 80229a6:	00db      	lsls	r3, r3, #3
 80229a8:	4413      	add	r3, r2
 80229aa:	009b      	lsls	r3, r3, #2
 80229ac:	4a52      	ldr	r2, [pc, #328]	; (8022af8 <SYSTIMER_lInsertTimerList+0x1bc>)
 80229ae:	4413      	add	r3, r2
 80229b0:	600b      	str	r3, [r1, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
 80229b2:	697b      	ldr	r3, [r7, #20]
 80229b4:	6859      	ldr	r1, [r3, #4]
 80229b6:	4850      	ldr	r0, [pc, #320]	; (8022af8 <SYSTIMER_lInsertTimerList+0x1bc>)
 80229b8:	687a      	ldr	r2, [r7, #4]
 80229ba:	4613      	mov	r3, r2
 80229bc:	00db      	lsls	r3, r3, #3
 80229be:	4413      	add	r3, r2
 80229c0:	009b      	lsls	r3, r3, #2
 80229c2:	4403      	add	r3, r0
 80229c4:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
 80229c6:	494c      	ldr	r1, [pc, #304]	; (8022af8 <SYSTIMER_lInsertTimerList+0x1bc>)
 80229c8:	687a      	ldr	r2, [r7, #4]
 80229ca:	4613      	mov	r3, r2
 80229cc:	00db      	lsls	r3, r3, #3
 80229ce:	4413      	add	r3, r2
 80229d0:	009b      	lsls	r3, r3, #2
 80229d2:	440b      	add	r3, r1
 80229d4:	697a      	ldr	r2, [r7, #20]
 80229d6:	601a      	str	r2, [r3, #0]
          object_ptr->prev = &g_timer_tbl[tbl_index];
 80229d8:	687a      	ldr	r2, [r7, #4]
 80229da:	4613      	mov	r3, r2
 80229dc:	00db      	lsls	r3, r3, #3
 80229de:	4413      	add	r3, r2
 80229e0:	009b      	lsls	r3, r3, #2
 80229e2:	4a45      	ldr	r2, [pc, #276]	; (8022af8 <SYSTIMER_lInsertTimerList+0x1bc>)
 80229e4:	441a      	add	r2, r3
 80229e6:	697b      	ldr	r3, [r7, #20]
 80229e8:	605a      	str	r2, [r3, #4]
 80229ea:	e01c      	b.n	8022a26 <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
 80229ec:	4b43      	ldr	r3, [pc, #268]	; (8022afc <SYSTIMER_lInsertTimerList+0x1c0>)
 80229ee:	6819      	ldr	r1, [r3, #0]
 80229f0:	4841      	ldr	r0, [pc, #260]	; (8022af8 <SYSTIMER_lInsertTimerList+0x1bc>)
 80229f2:	687a      	ldr	r2, [r7, #4]
 80229f4:	4613      	mov	r3, r2
 80229f6:	00db      	lsls	r3, r3, #3
 80229f8:	4413      	add	r3, r2
 80229fa:	009b      	lsls	r3, r3, #2
 80229fc:	4403      	add	r3, r0
 80229fe:	6019      	str	r1, [r3, #0]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
 8022a00:	4b3e      	ldr	r3, [pc, #248]	; (8022afc <SYSTIMER_lInsertTimerList+0x1c0>)
 8022a02:	6819      	ldr	r1, [r3, #0]
 8022a04:	687a      	ldr	r2, [r7, #4]
 8022a06:	4613      	mov	r3, r2
 8022a08:	00db      	lsls	r3, r3, #3
 8022a0a:	4413      	add	r3, r2
 8022a0c:	009b      	lsls	r3, r3, #2
 8022a0e:	4a3a      	ldr	r2, [pc, #232]	; (8022af8 <SYSTIMER_lInsertTimerList+0x1bc>)
 8022a10:	4413      	add	r3, r2
 8022a12:	604b      	str	r3, [r1, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
 8022a14:	687a      	ldr	r2, [r7, #4]
 8022a16:	4613      	mov	r3, r2
 8022a18:	00db      	lsls	r3, r3, #3
 8022a1a:	4413      	add	r3, r2
 8022a1c:	009b      	lsls	r3, r3, #2
 8022a1e:	4a36      	ldr	r2, [pc, #216]	; (8022af8 <SYSTIMER_lInsertTimerList+0x1bc>)
 8022a20:	4413      	add	r3, r2
 8022a22:	4a36      	ldr	r2, [pc, #216]	; (8022afc <SYSTIMER_lInsertTimerList+0x1c0>)
 8022a24:	6013      	str	r3, [r2, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
 8022a26:	4934      	ldr	r1, [pc, #208]	; (8022af8 <SYSTIMER_lInsertTimerList+0x1bc>)
 8022a28:	687a      	ldr	r2, [r7, #4]
 8022a2a:	4613      	mov	r3, r2
 8022a2c:	00db      	lsls	r3, r3, #3
 8022a2e:	4413      	add	r3, r2
 8022a30:	009b      	lsls	r3, r3, #2
 8022a32:	440b      	add	r3, r1
 8022a34:	681b      	ldr	r3, [r3, #0]
 8022a36:	699a      	ldr	r2, [r3, #24]
 8022a38:	693b      	ldr	r3, [r7, #16]
 8022a3a:	18d1      	adds	r1, r2, r3
 8022a3c:	482e      	ldr	r0, [pc, #184]	; (8022af8 <SYSTIMER_lInsertTimerList+0x1bc>)
 8022a3e:	687a      	ldr	r2, [r7, #4]
 8022a40:	4613      	mov	r3, r2
 8022a42:	00db      	lsls	r3, r3, #3
 8022a44:	4413      	add	r3, r2
 8022a46:	009b      	lsls	r3, r3, #2
 8022a48:	4403      	add	r3, r0
 8022a4a:	3318      	adds	r3, #24
 8022a4c:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
 8022a4e:	492a      	ldr	r1, [pc, #168]	; (8022af8 <SYSTIMER_lInsertTimerList+0x1bc>)
 8022a50:	687a      	ldr	r2, [r7, #4]
 8022a52:	4613      	mov	r3, r2
 8022a54:	00db      	lsls	r3, r3, #3
 8022a56:	4413      	add	r3, r2
 8022a58:	009b      	lsls	r3, r3, #2
 8022a5a:	440b      	add	r3, r1
 8022a5c:	6819      	ldr	r1, [r3, #0]
 8022a5e:	4826      	ldr	r0, [pc, #152]	; (8022af8 <SYSTIMER_lInsertTimerList+0x1bc>)
 8022a60:	687a      	ldr	r2, [r7, #4]
 8022a62:	4613      	mov	r3, r2
 8022a64:	00db      	lsls	r3, r3, #3
 8022a66:	4413      	add	r3, r2
 8022a68:	009b      	lsls	r3, r3, #2
 8022a6a:	4403      	add	r3, r0
 8022a6c:	681b      	ldr	r3, [r3, #0]
 8022a6e:	6998      	ldr	r0, [r3, #24]
 8022a70:	4c21      	ldr	r4, [pc, #132]	; (8022af8 <SYSTIMER_lInsertTimerList+0x1bc>)
 8022a72:	687a      	ldr	r2, [r7, #4]
 8022a74:	4613      	mov	r3, r2
 8022a76:	00db      	lsls	r3, r3, #3
 8022a78:	4413      	add	r3, r2
 8022a7a:	009b      	lsls	r3, r3, #2
 8022a7c:	4423      	add	r3, r4
 8022a7e:	3318      	adds	r3, #24
 8022a80:	681b      	ldr	r3, [r3, #0]
 8022a82:	1ac3      	subs	r3, r0, r3
 8022a84:	618b      	str	r3, [r1, #24]
        found_flag = true;
 8022a86:	2301      	movs	r3, #1
 8022a88:	73fb      	strb	r3, [r7, #15]
 8022a8a:	e024      	b.n	8022ad6 <SYSTIMER_lInsertTimerList+0x19a>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
 8022a8c:	693b      	ldr	r3, [r7, #16]
 8022a8e:	2b00      	cmp	r3, #0
 8022a90:	dd21      	ble.n	8022ad6 <SYSTIMER_lInsertTimerList+0x19a>
 8022a92:	697b      	ldr	r3, [r7, #20]
 8022a94:	681b      	ldr	r3, [r3, #0]
 8022a96:	2b00      	cmp	r3, #0
 8022a98:	d11d      	bne.n	8022ad6 <SYSTIMER_lInsertTimerList+0x19a>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
 8022a9a:	4917      	ldr	r1, [pc, #92]	; (8022af8 <SYSTIMER_lInsertTimerList+0x1bc>)
 8022a9c:	687a      	ldr	r2, [r7, #4]
 8022a9e:	4613      	mov	r3, r2
 8022aa0:	00db      	lsls	r3, r3, #3
 8022aa2:	4413      	add	r3, r2
 8022aa4:	009b      	lsls	r3, r3, #2
 8022aa6:	440b      	add	r3, r1
 8022aa8:	697a      	ldr	r2, [r7, #20]
 8022aaa:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
 8022aac:	687a      	ldr	r2, [r7, #4]
 8022aae:	4613      	mov	r3, r2
 8022ab0:	00db      	lsls	r3, r3, #3
 8022ab2:	4413      	add	r3, r2
 8022ab4:	009b      	lsls	r3, r3, #2
 8022ab6:	4a10      	ldr	r2, [pc, #64]	; (8022af8 <SYSTIMER_lInsertTimerList+0x1bc>)
 8022ab8:	441a      	add	r2, r3
 8022aba:	697b      	ldr	r3, [r7, #20]
 8022abc:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
 8022abe:	6939      	ldr	r1, [r7, #16]
 8022ac0:	480d      	ldr	r0, [pc, #52]	; (8022af8 <SYSTIMER_lInsertTimerList+0x1bc>)
 8022ac2:	687a      	ldr	r2, [r7, #4]
 8022ac4:	4613      	mov	r3, r2
 8022ac6:	00db      	lsls	r3, r3, #3
 8022ac8:	4413      	add	r3, r2
 8022aca:	009b      	lsls	r3, r3, #2
 8022acc:	4403      	add	r3, r0
 8022ace:	3318      	adds	r3, #24
 8022ad0:	6019      	str	r1, [r3, #0]
          found_flag = true;
 8022ad2:	2301      	movs	r3, #1
 8022ad4:	73fb      	strb	r3, [r7, #15]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
 8022ad6:	697b      	ldr	r3, [r7, #20]
 8022ad8:	681b      	ldr	r3, [r3, #0]
 8022ada:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8022adc:	697b      	ldr	r3, [r7, #20]
 8022ade:	2b00      	cmp	r3, #0
 8022ae0:	d006      	beq.n	8022af0 <SYSTIMER_lInsertTimerList+0x1b4>
 8022ae2:	7bfb      	ldrb	r3, [r7, #15]
 8022ae4:	f083 0301 	eor.w	r3, r3, #1
 8022ae8:	b2db      	uxtb	r3, r3
 8022aea:	2b00      	cmp	r3, #0
 8022aec:	f47f af4a 	bne.w	8022984 <SYSTIMER_lInsertTimerList+0x48>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
 8022af0:	3718      	adds	r7, #24
 8022af2:	46bd      	mov	sp, r7
 8022af4:	bc90      	pop	{r4, r7}
 8022af6:	4770      	bx	lr
 8022af8:	1fff00f4 	.word	0x1fff00f4
 8022afc:	1ffe8afc 	.word	0x1ffe8afc

08022b00 <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
 8022b00:	b480      	push	{r7}
 8022b02:	b085      	sub	sp, #20
 8022b04:	af00      	add	r7, sp, #0
 8022b06:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
 8022b08:	687a      	ldr	r2, [r7, #4]
 8022b0a:	4613      	mov	r3, r2
 8022b0c:	00db      	lsls	r3, r3, #3
 8022b0e:	4413      	add	r3, r2
 8022b10:	009b      	lsls	r3, r3, #2
 8022b12:	4a29      	ldr	r2, [pc, #164]	; (8022bb8 <SYSTIMER_lRemoveTimerList+0xb8>)
 8022b14:	4413      	add	r3, r2
 8022b16:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
 8022b18:	68fb      	ldr	r3, [r7, #12]
 8022b1a:	685b      	ldr	r3, [r3, #4]
 8022b1c:	2b00      	cmp	r3, #0
 8022b1e:	d107      	bne.n	8022b30 <SYSTIMER_lRemoveTimerList+0x30>
 8022b20:	68fb      	ldr	r3, [r7, #12]
 8022b22:	681b      	ldr	r3, [r3, #0]
 8022b24:	2b00      	cmp	r3, #0
 8022b26:	d103      	bne.n	8022b30 <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
 8022b28:	4b24      	ldr	r3, [pc, #144]	; (8022bbc <SYSTIMER_lRemoveTimerList+0xbc>)
 8022b2a:	2200      	movs	r2, #0
 8022b2c:	601a      	str	r2, [r3, #0]
 8022b2e:	e03d      	b.n	8022bac <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
 8022b30:	68fb      	ldr	r3, [r7, #12]
 8022b32:	685b      	ldr	r3, [r3, #4]
 8022b34:	2b00      	cmp	r3, #0
 8022b36:	d114      	bne.n	8022b62 <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
 8022b38:	68fb      	ldr	r3, [r7, #12]
 8022b3a:	681b      	ldr	r3, [r3, #0]
 8022b3c:	4a1f      	ldr	r2, [pc, #124]	; (8022bbc <SYSTIMER_lRemoveTimerList+0xbc>)
 8022b3e:	6013      	str	r3, [r2, #0]
    g_timer_list->prev = NULL;
 8022b40:	4b1e      	ldr	r3, [pc, #120]	; (8022bbc <SYSTIMER_lRemoveTimerList+0xbc>)
 8022b42:	681b      	ldr	r3, [r3, #0]
 8022b44:	2200      	movs	r2, #0
 8022b46:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
 8022b48:	4b1c      	ldr	r3, [pc, #112]	; (8022bbc <SYSTIMER_lRemoveTimerList+0xbc>)
 8022b4a:	681b      	ldr	r3, [r3, #0]
 8022b4c:	4a1b      	ldr	r2, [pc, #108]	; (8022bbc <SYSTIMER_lRemoveTimerList+0xbc>)
 8022b4e:	6812      	ldr	r2, [r2, #0]
 8022b50:	6991      	ldr	r1, [r2, #24]
 8022b52:	68fa      	ldr	r2, [r7, #12]
 8022b54:	6992      	ldr	r2, [r2, #24]
 8022b56:	440a      	add	r2, r1
 8022b58:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
 8022b5a:	68fb      	ldr	r3, [r7, #12]
 8022b5c:	2200      	movs	r2, #0
 8022b5e:	601a      	str	r2, [r3, #0]
 8022b60:	e024      	b.n	8022bac <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
 8022b62:	68fb      	ldr	r3, [r7, #12]
 8022b64:	681b      	ldr	r3, [r3, #0]
 8022b66:	2b00      	cmp	r3, #0
 8022b68:	d107      	bne.n	8022b7a <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
 8022b6a:	68fb      	ldr	r3, [r7, #12]
 8022b6c:	685b      	ldr	r3, [r3, #4]
 8022b6e:	2200      	movs	r2, #0
 8022b70:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 8022b72:	68fb      	ldr	r3, [r7, #12]
 8022b74:	2200      	movs	r2, #0
 8022b76:	605a      	str	r2, [r3, #4]
 8022b78:	e018      	b.n	8022bac <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
 8022b7a:	68fb      	ldr	r3, [r7, #12]
 8022b7c:	685b      	ldr	r3, [r3, #4]
 8022b7e:	68fa      	ldr	r2, [r7, #12]
 8022b80:	6812      	ldr	r2, [r2, #0]
 8022b82:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
 8022b84:	68fb      	ldr	r3, [r7, #12]
 8022b86:	681b      	ldr	r3, [r3, #0]
 8022b88:	68fa      	ldr	r2, [r7, #12]
 8022b8a:	6852      	ldr	r2, [r2, #4]
 8022b8c:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
 8022b8e:	68fb      	ldr	r3, [r7, #12]
 8022b90:	681b      	ldr	r3, [r3, #0]
 8022b92:	68fa      	ldr	r2, [r7, #12]
 8022b94:	6812      	ldr	r2, [r2, #0]
 8022b96:	6991      	ldr	r1, [r2, #24]
 8022b98:	68fa      	ldr	r2, [r7, #12]
 8022b9a:	6992      	ldr	r2, [r2, #24]
 8022b9c:	440a      	add	r2, r1
 8022b9e:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
 8022ba0:	68fb      	ldr	r3, [r7, #12]
 8022ba2:	2200      	movs	r2, #0
 8022ba4:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 8022ba6:	68fb      	ldr	r3, [r7, #12]
 8022ba8:	2200      	movs	r2, #0
 8022baa:	605a      	str	r2, [r3, #4]
  }
}
 8022bac:	3714      	adds	r7, #20
 8022bae:	46bd      	mov	sp, r7
 8022bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bb4:	4770      	bx	lr
 8022bb6:	bf00      	nop
 8022bb8:	1fff00f4 	.word	0x1fff00f4
 8022bbc:	1ffe8afc 	.word	0x1ffe8afc

08022bc0 <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
 8022bc0:	b580      	push	{r7, lr}
 8022bc2:	b082      	sub	sp, #8
 8022bc4:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
 8022bc6:	4b2f      	ldr	r3, [pc, #188]	; (8022c84 <SYSTIMER_lTimerHandler+0xc4>)
 8022bc8:	681b      	ldr	r3, [r3, #0]
 8022bca:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8022bcc:	e050      	b.n	8022c70 <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
 8022bce:	687b      	ldr	r3, [r7, #4]
 8022bd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8022bd4:	2b00      	cmp	r3, #0
 8022bd6:	d013      	beq.n	8022c00 <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8022bd8:	687b      	ldr	r3, [r7, #4]
 8022bda:	695b      	ldr	r3, [r3, #20]
 8022bdc:	4618      	mov	r0, r3
 8022bde:	f7ff ff8f 	bl	8022b00 <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
 8022be2:	687b      	ldr	r3, [r7, #4]
 8022be4:	2200      	movs	r2, #0
 8022be6:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
 8022be8:	687b      	ldr	r3, [r7, #4]
 8022bea:	695b      	ldr	r3, [r3, #20]
 8022bec:	461a      	mov	r2, r3
 8022bee:	2301      	movs	r3, #1
 8022bf0:	4093      	lsls	r3, r2
 8022bf2:	43da      	mvns	r2, r3
 8022bf4:	4b24      	ldr	r3, [pc, #144]	; (8022c88 <SYSTIMER_lTimerHandler+0xc8>)
 8022bf6:	681b      	ldr	r3, [r3, #0]
 8022bf8:	4013      	ands	r3, r2
 8022bfa:	4a23      	ldr	r2, [pc, #140]	; (8022c88 <SYSTIMER_lTimerHandler+0xc8>)
 8022bfc:	6013      	str	r3, [r2, #0]
 8022bfe:	e034      	b.n	8022c6a <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
 8022c00:	687b      	ldr	r3, [r7, #4]
 8022c02:	7b1b      	ldrb	r3, [r3, #12]
 8022c04:	2b00      	cmp	r3, #0
 8022c06:	d112      	bne.n	8022c2e <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 8022c08:	687b      	ldr	r3, [r7, #4]
 8022c0a:	7b5b      	ldrb	r3, [r3, #13]
 8022c0c:	2b01      	cmp	r3, #1
 8022c0e:	d12c      	bne.n	8022c6a <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8022c10:	687b      	ldr	r3, [r7, #4]
 8022c12:	695b      	ldr	r3, [r3, #20]
 8022c14:	4618      	mov	r0, r3
 8022c16:	f7ff ff73 	bl	8022b00 <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
 8022c1a:	687b      	ldr	r3, [r7, #4]
 8022c1c:	2202      	movs	r2, #2
 8022c1e:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8022c20:	687b      	ldr	r3, [r7, #4]
 8022c22:	689b      	ldr	r3, [r3, #8]
 8022c24:	687a      	ldr	r2, [r7, #4]
 8022c26:	6912      	ldr	r2, [r2, #16]
 8022c28:	4610      	mov	r0, r2
 8022c2a:	4798      	blx	r3
 8022c2c:	e01d      	b.n	8022c6a <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
 8022c2e:	687b      	ldr	r3, [r7, #4]
 8022c30:	7b1b      	ldrb	r3, [r3, #12]
 8022c32:	2b01      	cmp	r3, #1
 8022c34:	d118      	bne.n	8022c68 <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 8022c36:	687b      	ldr	r3, [r7, #4]
 8022c38:	7b5b      	ldrb	r3, [r3, #13]
 8022c3a:	2b01      	cmp	r3, #1
 8022c3c:	d115      	bne.n	8022c6a <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8022c3e:	687b      	ldr	r3, [r7, #4]
 8022c40:	695b      	ldr	r3, [r3, #20]
 8022c42:	4618      	mov	r0, r3
 8022c44:	f7ff ff5c 	bl	8022b00 <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
 8022c48:	687b      	ldr	r3, [r7, #4]
 8022c4a:	69da      	ldr	r2, [r3, #28]
 8022c4c:	687b      	ldr	r3, [r7, #4]
 8022c4e:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
 8022c50:	687b      	ldr	r3, [r7, #4]
 8022c52:	695b      	ldr	r3, [r3, #20]
 8022c54:	4618      	mov	r0, r3
 8022c56:	f7ff fe71 	bl	802293c <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8022c5a:	687b      	ldr	r3, [r7, #4]
 8022c5c:	689b      	ldr	r3, [r3, #8]
 8022c5e:	687a      	ldr	r2, [r7, #4]
 8022c60:	6912      	ldr	r2, [r2, #16]
 8022c62:	4610      	mov	r0, r2
 8022c64:	4798      	blx	r3
 8022c66:	e000      	b.n	8022c6a <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
 8022c68:	e009      	b.n	8022c7e <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
 8022c6a:	4b06      	ldr	r3, [pc, #24]	; (8022c84 <SYSTIMER_lTimerHandler+0xc4>)
 8022c6c:	681b      	ldr	r3, [r3, #0]
 8022c6e:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8022c70:	687b      	ldr	r3, [r7, #4]
 8022c72:	2b00      	cmp	r3, #0
 8022c74:	d003      	beq.n	8022c7e <SYSTIMER_lTimerHandler+0xbe>
 8022c76:	687b      	ldr	r3, [r7, #4]
 8022c78:	699b      	ldr	r3, [r3, #24]
 8022c7a:	2b00      	cmp	r3, #0
 8022c7c:	d0a7      	beq.n	8022bce <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
 8022c7e:	3708      	adds	r7, #8
 8022c80:	46bd      	mov	sp, r7
 8022c82:	bd80      	pop	{r7, pc}
 8022c84:	1ffe8afc 	.word	0x1ffe8afc
 8022c88:	1ffe8b00 	.word	0x1ffe8b00

08022c8c <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
 8022c8c:	b580      	push	{r7, lr}
 8022c8e:	b082      	sub	sp, #8
 8022c90:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
 8022c92:	4b0e      	ldr	r3, [pc, #56]	; (8022ccc <SysTick_Handler+0x40>)
 8022c94:	681b      	ldr	r3, [r3, #0]
 8022c96:	607b      	str	r3, [r7, #4]
  g_systick_count++;
 8022c98:	4b0d      	ldr	r3, [pc, #52]	; (8022cd0 <SysTick_Handler+0x44>)
 8022c9a:	681b      	ldr	r3, [r3, #0]
 8022c9c:	3301      	adds	r3, #1
 8022c9e:	4a0c      	ldr	r2, [pc, #48]	; (8022cd0 <SysTick_Handler+0x44>)
 8022ca0:	6013      	str	r3, [r2, #0]

  if (NULL != object_ptr)
 8022ca2:	687b      	ldr	r3, [r7, #4]
 8022ca4:	2b00      	cmp	r3, #0
 8022ca6:	d00e      	beq.n	8022cc6 <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
 8022ca8:	687b      	ldr	r3, [r7, #4]
 8022caa:	699b      	ldr	r3, [r3, #24]
 8022cac:	2b01      	cmp	r3, #1
 8022cae:	d905      	bls.n	8022cbc <SysTick_Handler+0x30>
    {
      object_ptr->count--;
 8022cb0:	687b      	ldr	r3, [r7, #4]
 8022cb2:	699b      	ldr	r3, [r3, #24]
 8022cb4:	1e5a      	subs	r2, r3, #1
 8022cb6:	687b      	ldr	r3, [r7, #4]
 8022cb8:	619a      	str	r2, [r3, #24]
 8022cba:	e004      	b.n	8022cc6 <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
 8022cbc:	687b      	ldr	r3, [r7, #4]
 8022cbe:	2200      	movs	r2, #0
 8022cc0:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
 8022cc2:	f7ff ff7d 	bl	8022bc0 <SYSTIMER_lTimerHandler>
    }
  }
}
 8022cc6:	3708      	adds	r7, #8
 8022cc8:	46bd      	mov	sp, r7
 8022cca:	bd80      	pop	{r7, pc}
 8022ccc:	1ffe8afc 	.word	0x1ffe8afc
 8022cd0:	1ffe8b04 	.word	0x1ffe8b04

08022cd4 <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
 8022cd4:	b580      	push	{r7, lr}
 8022cd6:	b084      	sub	sp, #16
 8022cd8:	af00      	add	r7, sp, #0
 8022cda:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
 8022cdc:	2300      	movs	r3, #0
 8022cde:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
 8022ce0:	687b      	ldr	r3, [r7, #4]
 8022ce2:	781b      	ldrb	r3, [r3, #0]
 8022ce4:	f083 0301 	eor.w	r3, r3, #1
 8022ce8:	b2db      	uxtb	r3, r3
 8022cea:	2b00      	cmp	r3, #0
 8022cec:	d021      	beq.n	8022d32 <SYSTIMER_Init+0x5e>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
 8022cee:	4b13      	ldr	r3, [pc, #76]	; (8022d3c <SYSTIMER_Init+0x68>)
 8022cf0:	2200      	movs	r2, #0
 8022cf2:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
 8022cf4:	f44f 60b4 	mov.w	r0, #1440	; 0x5a0
 8022cf8:	f7ff fdfe 	bl	80228f8 <SysTick_Config>
 8022cfc:	4603      	mov	r3, r0
 8022cfe:	73fb      	strb	r3, [r7, #15]

    if (SYSTIMER_STATUS_FAILURE == status)
 8022d00:	7bfb      	ldrb	r3, [r7, #15]
 8022d02:	2b01      	cmp	r3, #1
 8022d04:	d015      	beq.n	8022d32 <SYSTIMER_Init+0x5e>
    }
    else
    {
#if (UC_FAMILY == XMC4)
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
 8022d06:	f7ff fd8d 	bl	8022824 <NVIC_GetPriorityGrouping>
 8022d0a:	4603      	mov	r3, r0
 8022d0c:	4618      	mov	r0, r3
 8022d0e:	213f      	movs	r1, #63	; 0x3f
 8022d10:	2200      	movs	r2, #0
 8022d12:	f7ff fdbf 	bl	8022894 <NVIC_EncodePriority>
 8022d16:	4603      	mov	r3, r0
 8022d18:	f04f 30ff 	mov.w	r0, #4294967295
 8022d1c:	4619      	mov	r1, r3
 8022d1e:	f7ff fd8f 	bl	8022840 <NVIC_SetPriority>
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
#endif      
      g_timer_tracker = 0U;
 8022d22:	4b07      	ldr	r3, [pc, #28]	; (8022d40 <SYSTIMER_Init+0x6c>)
 8022d24:	2200      	movs	r2, #0
 8022d26:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
 8022d28:	687b      	ldr	r3, [r7, #4]
 8022d2a:	2201      	movs	r2, #1
 8022d2c:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
 8022d2e:	2300      	movs	r3, #0
 8022d30:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 8022d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8022d34:	4618      	mov	r0, r3
 8022d36:	3710      	adds	r7, #16
 8022d38:	46bd      	mov	sp, r7
 8022d3a:	bd80      	pop	{r7, pc}
 8022d3c:	1ffe8afc 	.word	0x1ffe8afc
 8022d40:	1ffe8b00 	.word	0x1ffe8b00

08022d44 <SYSTIMER_CreateTimer>:
  uint32_t period,
  SYSTIMER_MODE_t mode,
  SYSTIMER_CALLBACK_t callback,
  void  *args
)
{
 8022d44:	b480      	push	{r7}
 8022d46:	b089      	sub	sp, #36	; 0x24
 8022d48:	af00      	add	r7, sp, #0
 8022d4a:	60f8      	str	r0, [r7, #12]
 8022d4c:	607a      	str	r2, [r7, #4]
 8022d4e:	603b      	str	r3, [r7, #0]
 8022d50:	460b      	mov	r3, r1
 8022d52:	72fb      	strb	r3, [r7, #11]
  uint32_t id = 0U;
 8022d54:	2300      	movs	r3, #0
 8022d56:	61fb      	str	r3, [r7, #28]
  uint32_t count = 0U;
 8022d58:	2300      	movs	r3, #0
 8022d5a:	61bb      	str	r3, [r7, #24]
  uint32_t period_ratio = 0U;
 8022d5c:	2300      	movs	r3, #0
 8022d5e:	617b      	str	r3, [r7, #20]
            ((period >= SYSTIMER_TICK_PERIOD_US) && (period > 0U) && (period <= 0xFFFFFFFFU)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Timer creation failure due to invalid timer mode",
            ((SYSTIMER_MODE_ONE_SHOT == mode) || (SYSTIMER_MODE_PERIODIC == mode)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Can not create software without user callback", (NULL != callback));
  
  if (period < SYSTIMER_TICK_PERIOD_US)
 8022d60:	68fb      	ldr	r3, [r7, #12]
 8022d62:	2b09      	cmp	r3, #9
 8022d64:	d802      	bhi.n	8022d6c <SYSTIMER_CreateTimer+0x28>
  {
    id = 0U;
 8022d66:	2300      	movs	r3, #0
 8022d68:	61fb      	str	r3, [r7, #28]
 8022d6a:	e07b      	b.n	8022e64 <SYSTIMER_CreateTimer+0x120>
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8022d6c:	2300      	movs	r3, #0
 8022d6e:	61bb      	str	r3, [r7, #24]
 8022d70:	e075      	b.n	8022e5e <SYSTIMER_CreateTimer+0x11a>
    {
      /* Check for free timer ID */
      if (0U == (g_timer_tracker & (1U << count)))
 8022d72:	69bb      	ldr	r3, [r7, #24]
 8022d74:	2201      	movs	r2, #1
 8022d76:	409a      	lsls	r2, r3
 8022d78:	4b3e      	ldr	r3, [pc, #248]	; (8022e74 <SYSTIMER_CreateTimer+0x130>)
 8022d7a:	681b      	ldr	r3, [r3, #0]
 8022d7c:	4013      	ands	r3, r2
 8022d7e:	2b00      	cmp	r3, #0
 8022d80:	d16a      	bne.n	8022e58 <SYSTIMER_CreateTimer+0x114>
      {
        /* If yes, assign ID to this timer */
        g_timer_tracker |= (1U << count);
 8022d82:	69bb      	ldr	r3, [r7, #24]
 8022d84:	2201      	movs	r2, #1
 8022d86:	409a      	lsls	r2, r3
 8022d88:	4b3a      	ldr	r3, [pc, #232]	; (8022e74 <SYSTIMER_CreateTimer+0x130>)
 8022d8a:	681b      	ldr	r3, [r3, #0]
 8022d8c:	4313      	orrs	r3, r2
 8022d8e:	4a39      	ldr	r2, [pc, #228]	; (8022e74 <SYSTIMER_CreateTimer+0x130>)
 8022d90:	6013      	str	r3, [r2, #0]
        /* Initialize the timer as per input values */
        g_timer_tbl[count].id     = count;
 8022d92:	4939      	ldr	r1, [pc, #228]	; (8022e78 <SYSTIMER_CreateTimer+0x134>)
 8022d94:	69ba      	ldr	r2, [r7, #24]
 8022d96:	4613      	mov	r3, r2
 8022d98:	00db      	lsls	r3, r3, #3
 8022d9a:	4413      	add	r3, r2
 8022d9c:	009b      	lsls	r3, r3, #2
 8022d9e:	440b      	add	r3, r1
 8022da0:	3310      	adds	r3, #16
 8022da2:	69ba      	ldr	r2, [r7, #24]
 8022da4:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].mode   = mode;
 8022da6:	4934      	ldr	r1, [pc, #208]	; (8022e78 <SYSTIMER_CreateTimer+0x134>)
 8022da8:	69ba      	ldr	r2, [r7, #24]
 8022daa:	4613      	mov	r3, r2
 8022dac:	00db      	lsls	r3, r3, #3
 8022dae:	4413      	add	r3, r2
 8022db0:	009b      	lsls	r3, r3, #2
 8022db2:	440b      	add	r3, r1
 8022db4:	3308      	adds	r3, #8
 8022db6:	7afa      	ldrb	r2, [r7, #11]
 8022db8:	711a      	strb	r2, [r3, #4]
        g_timer_tbl[count].state  = SYSTIMER_STATE_STOPPED;
 8022dba:	492f      	ldr	r1, [pc, #188]	; (8022e78 <SYSTIMER_CreateTimer+0x134>)
 8022dbc:	69ba      	ldr	r2, [r7, #24]
 8022dbe:	4613      	mov	r3, r2
 8022dc0:	00db      	lsls	r3, r3, #3
 8022dc2:	4413      	add	r3, r2
 8022dc4:	009b      	lsls	r3, r3, #2
 8022dc6:	440b      	add	r3, r1
 8022dc8:	3308      	adds	r3, #8
 8022dca:	2202      	movs	r2, #2
 8022dcc:	715a      	strb	r2, [r3, #5]
        period_ratio = (uint32_t)(period / SYSTIMER_TICK_PERIOD_US);
 8022dce:	68fb      	ldr	r3, [r7, #12]
 8022dd0:	4a2a      	ldr	r2, [pc, #168]	; (8022e7c <SYSTIMER_CreateTimer+0x138>)
 8022dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8022dd6:	08db      	lsrs	r3, r3, #3
 8022dd8:	617b      	str	r3, [r7, #20]
        g_timer_tbl[count].count  = (period_ratio + HW_TIMER_ADDITIONAL_CNT);
 8022dda:	697b      	ldr	r3, [r7, #20]
 8022ddc:	1c59      	adds	r1, r3, #1
 8022dde:	4826      	ldr	r0, [pc, #152]	; (8022e78 <SYSTIMER_CreateTimer+0x134>)
 8022de0:	69ba      	ldr	r2, [r7, #24]
 8022de2:	4613      	mov	r3, r2
 8022de4:	00db      	lsls	r3, r3, #3
 8022de6:	4413      	add	r3, r2
 8022de8:	009b      	lsls	r3, r3, #2
 8022dea:	4403      	add	r3, r0
 8022dec:	3318      	adds	r3, #24
 8022dee:	6019      	str	r1, [r3, #0]
        g_timer_tbl[count].reload  = period_ratio;
 8022df0:	4921      	ldr	r1, [pc, #132]	; (8022e78 <SYSTIMER_CreateTimer+0x134>)
 8022df2:	69ba      	ldr	r2, [r7, #24]
 8022df4:	4613      	mov	r3, r2
 8022df6:	00db      	lsls	r3, r3, #3
 8022df8:	4413      	add	r3, r2
 8022dfa:	009b      	lsls	r3, r3, #2
 8022dfc:	440b      	add	r3, r1
 8022dfe:	3318      	adds	r3, #24
 8022e00:	697a      	ldr	r2, [r7, #20]
 8022e02:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].callback = callback;
 8022e04:	491c      	ldr	r1, [pc, #112]	; (8022e78 <SYSTIMER_CreateTimer+0x134>)
 8022e06:	69ba      	ldr	r2, [r7, #24]
 8022e08:	4613      	mov	r3, r2
 8022e0a:	00db      	lsls	r3, r3, #3
 8022e0c:	4413      	add	r3, r2
 8022e0e:	009b      	lsls	r3, r3, #2
 8022e10:	440b      	add	r3, r1
 8022e12:	3308      	adds	r3, #8
 8022e14:	687a      	ldr	r2, [r7, #4]
 8022e16:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].args = args;
 8022e18:	4917      	ldr	r1, [pc, #92]	; (8022e78 <SYSTIMER_CreateTimer+0x134>)
 8022e1a:	69ba      	ldr	r2, [r7, #24]
 8022e1c:	4613      	mov	r3, r2
 8022e1e:	00db      	lsls	r3, r3, #3
 8022e20:	4413      	add	r3, r2
 8022e22:	009b      	lsls	r3, r3, #2
 8022e24:	440b      	add	r3, r1
 8022e26:	3310      	adds	r3, #16
 8022e28:	683a      	ldr	r2, [r7, #0]
 8022e2a:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].prev   = NULL;
 8022e2c:	4912      	ldr	r1, [pc, #72]	; (8022e78 <SYSTIMER_CreateTimer+0x134>)
 8022e2e:	69ba      	ldr	r2, [r7, #24]
 8022e30:	4613      	mov	r3, r2
 8022e32:	00db      	lsls	r3, r3, #3
 8022e34:	4413      	add	r3, r2
 8022e36:	009b      	lsls	r3, r3, #2
 8022e38:	440b      	add	r3, r1
 8022e3a:	2200      	movs	r2, #0
 8022e3c:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].next   = NULL;
 8022e3e:	490e      	ldr	r1, [pc, #56]	; (8022e78 <SYSTIMER_CreateTimer+0x134>)
 8022e40:	69ba      	ldr	r2, [r7, #24]
 8022e42:	4613      	mov	r3, r2
 8022e44:	00db      	lsls	r3, r3, #3
 8022e46:	4413      	add	r3, r2
 8022e48:	009b      	lsls	r3, r3, #2
 8022e4a:	440b      	add	r3, r1
 8022e4c:	2200      	movs	r2, #0
 8022e4e:	601a      	str	r2, [r3, #0]
        id = count + 1U;
 8022e50:	69bb      	ldr	r3, [r7, #24]
 8022e52:	3301      	adds	r3, #1
 8022e54:	61fb      	str	r3, [r7, #28]
        break;
 8022e56:	e005      	b.n	8022e64 <SYSTIMER_CreateTimer+0x120>
  {
    id = 0U;
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8022e58:	69bb      	ldr	r3, [r7, #24]
 8022e5a:	3301      	adds	r3, #1
 8022e5c:	61bb      	str	r3, [r7, #24]
 8022e5e:	69bb      	ldr	r3, [r7, #24]
 8022e60:	2b00      	cmp	r3, #0
 8022e62:	d086      	beq.n	8022d72 <SYSTIMER_CreateTimer+0x2e>
      }
    }

  }
  
  return (id);
 8022e64:	69fb      	ldr	r3, [r7, #28]
}  
 8022e66:	4618      	mov	r0, r3
 8022e68:	3724      	adds	r7, #36	; 0x24
 8022e6a:	46bd      	mov	sp, r7
 8022e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e70:	4770      	bx	lr
 8022e72:	bf00      	nop
 8022e74:	1ffe8b00 	.word	0x1ffe8b00
 8022e78:	1fff00f4 	.word	0x1fff00f4
 8022e7c:	cccccccd 	.word	0xcccccccd

08022e80 <SYSTIMER_StartTimer>:

/*
 *  API to start the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StartTimer(uint32_t id)
{
 8022e80:	b580      	push	{r7, lr}
 8022e82:	b084      	sub	sp, #16
 8022e84:	af00      	add	r7, sp, #0
 8022e86:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_FAILURE;
 8022e88:	2301      	movs	r3, #1
 8022e8a:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_StartTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StartTimer: Error during start of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));
  
  /* Check if timer is running */
  if (SYSTIMER_STATE_STOPPED == g_timer_tbl[id - 1U].state)
 8022e8c:	687b      	ldr	r3, [r7, #4]
 8022e8e:	1e5a      	subs	r2, r3, #1
 8022e90:	491a      	ldr	r1, [pc, #104]	; (8022efc <SYSTIMER_StartTimer+0x7c>)
 8022e92:	4613      	mov	r3, r2
 8022e94:	00db      	lsls	r3, r3, #3
 8022e96:	4413      	add	r3, r2
 8022e98:	009b      	lsls	r3, r3, #2
 8022e9a:	440b      	add	r3, r1
 8022e9c:	3308      	adds	r3, #8
 8022e9e:	795b      	ldrb	r3, [r3, #5]
 8022ea0:	2b02      	cmp	r3, #2
 8022ea2:	d126      	bne.n	8022ef2 <SYSTIMER_StartTimer+0x72>
  {
    g_timer_tbl[id - 1U].count = (g_timer_tbl[id - 1U].reload + HW_TIMER_ADDITIONAL_CNT);
 8022ea4:	687b      	ldr	r3, [r7, #4]
 8022ea6:	1e5a      	subs	r2, r3, #1
 8022ea8:	687b      	ldr	r3, [r7, #4]
 8022eaa:	1e59      	subs	r1, r3, #1
 8022eac:	4813      	ldr	r0, [pc, #76]	; (8022efc <SYSTIMER_StartTimer+0x7c>)
 8022eae:	460b      	mov	r3, r1
 8022eb0:	00db      	lsls	r3, r3, #3
 8022eb2:	440b      	add	r3, r1
 8022eb4:	009b      	lsls	r3, r3, #2
 8022eb6:	4403      	add	r3, r0
 8022eb8:	3318      	adds	r3, #24
 8022eba:	685b      	ldr	r3, [r3, #4]
 8022ebc:	1c59      	adds	r1, r3, #1
 8022ebe:	480f      	ldr	r0, [pc, #60]	; (8022efc <SYSTIMER_StartTimer+0x7c>)
 8022ec0:	4613      	mov	r3, r2
 8022ec2:	00db      	lsls	r3, r3, #3
 8022ec4:	4413      	add	r3, r2
 8022ec6:	009b      	lsls	r3, r3, #2
 8022ec8:	4403      	add	r3, r0
 8022eca:	3318      	adds	r3, #24
 8022ecc:	6019      	str	r1, [r3, #0]
    /* set timer status as SYSTIMER_STATE_RUNNING */
    g_timer_tbl[id - 1U].state = SYSTIMER_STATE_RUNNING;
 8022ece:	687b      	ldr	r3, [r7, #4]
 8022ed0:	1e5a      	subs	r2, r3, #1
 8022ed2:	490a      	ldr	r1, [pc, #40]	; (8022efc <SYSTIMER_StartTimer+0x7c>)
 8022ed4:	4613      	mov	r3, r2
 8022ed6:	00db      	lsls	r3, r3, #3
 8022ed8:	4413      	add	r3, r2
 8022eda:	009b      	lsls	r3, r3, #2
 8022edc:	440b      	add	r3, r1
 8022ede:	3308      	adds	r3, #8
 8022ee0:	2201      	movs	r2, #1
 8022ee2:	715a      	strb	r2, [r3, #5]
    /* Insert this timer into timer list */
    SYSTIMER_lInsertTimerList((id - 1U));
 8022ee4:	687b      	ldr	r3, [r7, #4]
 8022ee6:	3b01      	subs	r3, #1
 8022ee8:	4618      	mov	r0, r3
 8022eea:	f7ff fd27 	bl	802293c <SYSTIMER_lInsertTimerList>
    status = SYSTIMER_STATUS_SUCCESS;
 8022eee:	2300      	movs	r3, #0
 8022ef0:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8022ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8022ef4:	4618      	mov	r0, r3
 8022ef6:	3710      	adds	r7, #16
 8022ef8:	46bd      	mov	sp, r7
 8022efa:	bd80      	pop	{r7, pc}
 8022efc:	1fff00f4 	.word	0x1fff00f4

08022f00 <SYSTIMER_GetTickCount>:

/*
 *  API to get the SysTick count.
 */
uint32_t SYSTIMER_GetTickCount(void)
{
 8022f00:	b480      	push	{r7}
 8022f02:	af00      	add	r7, sp, #0
  return (g_systick_count);
 8022f04:	4b03      	ldr	r3, [pc, #12]	; (8022f14 <SYSTIMER_GetTickCount+0x14>)
 8022f06:	681b      	ldr	r3, [r3, #0]
}
 8022f08:	4618      	mov	r0, r3
 8022f0a:	46bd      	mov	sp, r7
 8022f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f10:	4770      	bx	lr
 8022f12:	bf00      	nop
 8022f14:	1ffe8b04 	.word	0x1ffe8b04

08022f18 <XMC_SPI_CH_SetTransmitMode>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
 8022f18:	b480      	push	{r7}
 8022f1a:	b083      	sub	sp, #12
 8022f1c:	af00      	add	r7, sp, #0
 8022f1e:	6078      	str	r0, [r7, #4]
 8022f20:	460b      	mov	r3, r1
 8022f22:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8022f24:	687b      	ldr	r3, [r7, #4]
 8022f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022f28:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 8022f2c:	78fb      	ldrb	r3, [r7, #3]
 8022f2e:	019b      	lsls	r3, r3, #6
 8022f30:	b2db      	uxtb	r3, r3
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8022f32:	431a      	orrs	r2, r3
 8022f34:	687b      	ldr	r3, [r7, #4]
 8022f36:	641a      	str	r2, [r3, #64]	; 0x40
                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
}
 8022f38:	370c      	adds	r7, #12
 8022f3a:	46bd      	mov	sp, r7
 8022f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f40:	4770      	bx	lr
 8022f42:	bf00      	nop

08022f44 <XMC_DMA_CH_Enable>:
 * The function sets the GPDMA's CHENREG register to enable a DMA channel. Please
 * ensure that the GPDMA module itself is enabled before calling this function.
 * See ::XMC_DMA_Enable() for details.
 */
__STATIC_INLINE void XMC_DMA_CH_Enable(XMC_DMA_t *const dma, const uint8_t channel)
{
 8022f44:	b480      	push	{r7}
 8022f46:	b083      	sub	sp, #12
 8022f48:	af00      	add	r7, sp, #0
 8022f4a:	6078      	str	r0, [r7, #4]
 8022f4c:	460b      	mov	r3, r1
 8022f4e:	70fb      	strb	r3, [r7, #3]
  dma->CHENREG = (uint32_t)(0x101UL << channel);   
 8022f50:	78fb      	ldrb	r3, [r7, #3]
 8022f52:	f240 1201 	movw	r2, #257	; 0x101
 8022f56:	409a      	lsls	r2, r3
 8022f58:	687b      	ldr	r3, [r7, #4]
 8022f5a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8022f5e:	370c      	adds	r7, #12
 8022f60:	46bd      	mov	sp, r7
 8022f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f66:	4770      	bx	lr

08022f68 <XMC_DMA_CH_SetSourceAddress>:
 *
 * \par<b>Related API: </b><br>
 * ::XMC_DMA_CH_SetDestinationAddress() <br>
 */
__STATIC_INLINE void XMC_DMA_CH_SetSourceAddress(XMC_DMA_t *const dma, const uint8_t channel, uint32_t addr)
{
 8022f68:	b480      	push	{r7}
 8022f6a:	b085      	sub	sp, #20
 8022f6c:	af00      	add	r7, sp, #0
 8022f6e:	60f8      	str	r0, [r7, #12]
 8022f70:	460b      	mov	r3, r1
 8022f72:	607a      	str	r2, [r7, #4]
 8022f74:	72fb      	strb	r3, [r7, #11]
  dma->CH[channel].SAR = addr;
 8022f76:	7afb      	ldrb	r3, [r7, #11]
 8022f78:	68fa      	ldr	r2, [r7, #12]
 8022f7a:	2158      	movs	r1, #88	; 0x58
 8022f7c:	fb01 f303 	mul.w	r3, r1, r3
 8022f80:	4413      	add	r3, r2
 8022f82:	687a      	ldr	r2, [r7, #4]
 8022f84:	601a      	str	r2, [r3, #0]
}
 8022f86:	3714      	adds	r7, #20
 8022f88:	46bd      	mov	sp, r7
 8022f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f8e:	4770      	bx	lr

08022f90 <XMC_DMA_CH_SetDestinationAddress>:
 *
 * \par<b>Related API: </b><br>
 * ::XMC_DMA_CH_SetSourceAddress() <br>
 */
__STATIC_INLINE void XMC_DMA_CH_SetDestinationAddress(XMC_DMA_t *const dma, const uint8_t channel, uint32_t addr)
{
 8022f90:	b480      	push	{r7}
 8022f92:	b085      	sub	sp, #20
 8022f94:	af00      	add	r7, sp, #0
 8022f96:	60f8      	str	r0, [r7, #12]
 8022f98:	460b      	mov	r3, r1
 8022f9a:	607a      	str	r2, [r7, #4]
 8022f9c:	72fb      	strb	r3, [r7, #11]
  dma->CH[channel].DAR = addr;
 8022f9e:	7afb      	ldrb	r3, [r7, #11]
 8022fa0:	68fa      	ldr	r2, [r7, #12]
 8022fa2:	2158      	movs	r1, #88	; 0x58
 8022fa4:	fb01 f303 	mul.w	r3, r1, r3
 8022fa8:	4413      	add	r3, r2
 8022faa:	3308      	adds	r3, #8
 8022fac:	687a      	ldr	r2, [r7, #4]
 8022fae:	601a      	str	r2, [r3, #0]
}
 8022fb0:	3714      	adds	r7, #20
 8022fb2:	46bd      	mov	sp, r7
 8022fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022fb8:	4770      	bx	lr
 8022fba:	bf00      	nop

08022fbc <XMC_DMA_CH_SetBlockSize>:
 * The function may be called after enabling the DMA channel. Please
 * see ::XMC_DMA_CH_Enable() for more information.
 *
 */
__STATIC_INLINE void XMC_DMA_CH_SetBlockSize(XMC_DMA_t *const dma, const uint8_t channel, uint32_t block_size)
{
 8022fbc:	b480      	push	{r7}
 8022fbe:	b085      	sub	sp, #20
 8022fc0:	af00      	add	r7, sp, #0
 8022fc2:	60f8      	str	r0, [r7, #12]
 8022fc4:	460b      	mov	r3, r1
 8022fc6:	607a      	str	r2, [r7, #4]
 8022fc8:	72fb      	strb	r3, [r7, #11]
  dma->CH[channel].CTLH = block_size;
 8022fca:	7afb      	ldrb	r3, [r7, #11]
 8022fcc:	68fa      	ldr	r2, [r7, #12]
 8022fce:	2158      	movs	r1, #88	; 0x58
 8022fd0:	fb01 f303 	mul.w	r3, r1, r3
 8022fd4:	4413      	add	r3, r2
 8022fd6:	3318      	adds	r3, #24
 8022fd8:	687a      	ldr	r2, [r7, #4]
 8022fda:	605a      	str	r2, [r3, #4]
}
 8022fdc:	3714      	adds	r7, #20
 8022fde:	46bd      	mov	sp, r7
 8022fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022fe4:	4770      	bx	lr
 8022fe6:	bf00      	nop

08022fe8 <SPI_MASTER_Init>:

/*
 * This function initializes the SPI channel, based on UI configuration.
 */
SPI_MASTER_STATUS_t SPI_MASTER_Init(SPI_MASTER_t* const handle)
{
 8022fe8:	b580      	push	{r7, lr}
 8022fea:	b084      	sub	sp, #16
 8022fec:	af00      	add	r7, sp, #0
 8022fee:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t status;

  XMC_ASSERT("SPI_MASTER_Init:handle NULL" , (handle != NULL));

  /* Configure the port registers and data input registers of SPI channel */
  status = handle->config->fptr_spi_master_config();
 8022ff0:	687b      	ldr	r3, [r7, #4]
 8022ff2:	685b      	ldr	r3, [r3, #4]
 8022ff4:	685b      	ldr	r3, [r3, #4]
 8022ff6:	4798      	blx	r3
 8022ff8:	4603      	mov	r3, r0
 8022ffa:	73fb      	strb	r3, [r7, #15]

  return status;
 8022ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8022ffe:	4618      	mov	r0, r3
 8023000:	3710      	adds	r7, #16
 8023002:	46bd      	mov	sp, r7
 8023004:	bd80      	pop	{r7, pc}
 8023006:	bf00      	nop

08023008 <SPI_MASTER_Transmit>:

  return status;
}

SPI_MASTER_STATUS_t SPI_MASTER_Transmit(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8023008:	b580      	push	{r7, lr}
 802300a:	b086      	sub	sp, #24
 802300c:	af00      	add	r7, sp, #0
 802300e:	60f8      	str	r0, [r7, #12]
 8023010:	60b9      	str	r1, [r7, #8]
 8023012:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  
   status = SPI_MASTER_STATUS_FAILURE;
 8023014:	2301      	movs	r3, #1
 8023016:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_StartTransmitIRQ(handle, dataptr, count);
  }
#endif

#if (SPI_MASTER_DMA_TRANSMIT_MODE == 1U)
  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 8023018:	68fb      	ldr	r3, [r7, #12]
 802301a:	685b      	ldr	r3, [r3, #4]
 802301c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8023020:	2b01      	cmp	r3, #1
 8023022:	d106      	bne.n	8023032 <SPI_MASTER_Transmit+0x2a>
  {
    status = SPI_MASTER_StartTransmitDMA(handle, dataptr, count);
 8023024:	68f8      	ldr	r0, [r7, #12]
 8023026:	68b9      	ldr	r1, [r7, #8]
 8023028:	687a      	ldr	r2, [r7, #4]
 802302a:	f000 f821 	bl	8023070 <SPI_MASTER_StartTransmitDMA>
 802302e:	4603      	mov	r3, r0
 8023030:	75fb      	strb	r3, [r7, #23]
  {
    status = SPI_MASTER_lStartTransmitPolling(handle, dataptr, count);
  }
#endif

  return status;
 8023032:	7dfb      	ldrb	r3, [r7, #23]
}
 8023034:	4618      	mov	r0, r3
 8023036:	3718      	adds	r7, #24
 8023038:	46bd      	mov	sp, r7
 802303a:	bd80      	pop	{r7, pc}

0802303c <SPI_MASTER_Receive>:

SPI_MASTER_STATUS_t SPI_MASTER_Receive(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 802303c:	b580      	push	{r7, lr}
 802303e:	b086      	sub	sp, #24
 8023040:	af00      	add	r7, sp, #0
 8023042:	60f8      	str	r0, [r7, #12]
 8023044:	60b9      	str	r1, [r7, #8]
 8023046:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;

  status = SPI_MASTER_STATUS_FAILURE;
 8023048:	2301      	movs	r3, #1
 802304a:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_StartReceiveIRQ(handle, dataptr, count);
  }
#endif

#if (SPI_MASTER_DMA_RECEIVE_MODE == 1U)
  if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 802304c:	68fb      	ldr	r3, [r7, #12]
 802304e:	685b      	ldr	r3, [r3, #4]
 8023050:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8023054:	2b01      	cmp	r3, #1
 8023056:	d106      	bne.n	8023066 <SPI_MASTER_Receive+0x2a>
  {
    status = SPI_MASTER_StartReceiveDMA(handle, dataptr, count);
 8023058:	68f8      	ldr	r0, [r7, #12]
 802305a:	68b9      	ldr	r1, [r7, #8]
 802305c:	687a      	ldr	r2, [r7, #4]
 802305e:	f000 f8db 	bl	8023218 <SPI_MASTER_StartReceiveDMA>
 8023062:	4603      	mov	r3, r0
 8023064:	75fb      	strb	r3, [r7, #23]
  {
    status = SPI_MASTER_lStartReceivePolling(handle, dataptr, count);
  }
#endif

  return status;
 8023066:	7dfb      	ldrb	r3, [r7, #23]
}
 8023068:	4618      	mov	r0, r3
 802306a:	3718      	adds	r7, #24
 802306c:	46bd      	mov	sp, r7
 802306e:	bd80      	pop	{r7, pc}

08023070 <SPI_MASTER_StartTransmitDMA>:
}
#endif

#if(SPI_MASTER_DMA_TRANSMIT_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_StartTransmitDMA(const SPI_MASTER_t *const handle, uint8_t *data_ptr, uint32_t block_size)
{
 8023070:	b580      	push	{r7, lr}
 8023072:	b088      	sub	sp, #32
 8023074:	af00      	add	r7, sp, #0
 8023076:	60f8      	str	r0, [r7, #12]
 8023078:	60b9      	str	r1, [r7, #8]
 802307a:	607a      	str	r2, [r7, #4]
  uint32_t dma_ctll;
  uint32_t mode;

  XMC_ASSERT("SPI_MASTER_StartTransmitDMA:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_MODE_MISMATCH;
 802307c:	2304      	movs	r3, #4
 802307e:	77fb      	strb	r3, [r7, #31]
  runtime_handle = handle->runtime;
 8023080:	68fb      	ldr	r3, [r7, #12]
 8023082:	689b      	ldr	r3, [r3, #8]
 8023084:	617b      	str	r3, [r7, #20]

  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 8023086:	68fb      	ldr	r3, [r7, #12]
 8023088:	685b      	ldr	r3, [r3, #4]
 802308a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 802308e:	2b01      	cmp	r3, #1
 8023090:	f040 80bc 	bne.w	802320c <SPI_MASTER_StartTransmitDMA+0x19c>
  {
    /* Check whether SPI channel is free or not */
    if (false == runtime_handle->tx_busy)
 8023094:	697b      	ldr	r3, [r7, #20]
 8023096:	f893 3020 	ldrb.w	r3, [r3, #32]
 802309a:	b2db      	uxtb	r3, r3
 802309c:	f083 0301 	eor.w	r3, r3, #1
 80230a0:	b2db      	uxtb	r3, r3
 80230a2:	2b00      	cmp	r3, #0
 80230a4:	f000 80b0 	beq.w	8023208 <SPI_MASTER_StartTransmitDMA+0x198>
    {
      /* Check data pointer is valid or not */
      if ((data_ptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 80230a8:	68bb      	ldr	r3, [r7, #8]
 80230aa:	2b00      	cmp	r3, #0
 80230ac:	f000 80a9 	beq.w	8023202 <SPI_MASTER_StartTransmitDMA+0x192>
 80230b0:	687b      	ldr	r3, [r7, #4]
 80230b2:	2b00      	cmp	r3, #0
 80230b4:	f000 80a5 	beq.w	8023202 <SPI_MASTER_StartTransmitDMA+0x192>
 80230b8:	687b      	ldr	r3, [r7, #4]
 80230ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80230be:	f080 80a0 	bcs.w	8023202 <SPI_MASTER_StartTransmitDMA+0x192>
      {
        /* Obtain the address of data, size of data */
        runtime_handle->tx_data_count = block_size;
 80230c2:	697b      	ldr	r3, [r7, #20]
 80230c4:	687a      	ldr	r2, [r7, #4]
 80230c6:	605a      	str	r2, [r3, #4]
        /* Initialize to first index and set the busy flag */
        runtime_handle->tx_data_index = 0U;
 80230c8:	697b      	ldr	r3, [r7, #20]
 80230ca:	2200      	movs	r2, #0
 80230cc:	609a      	str	r2, [r3, #8]
        runtime_handle->tx_busy = true;
 80230ce:	697b      	ldr	r3, [r7, #20]
 80230d0:	2201      	movs	r2, #1
 80230d2:	f883 2020 	strb.w	r2, [r3, #32]

        if (runtime_handle->tx_data_dummy == true)
 80230d6:	697b      	ldr	r3, [r7, #20]
 80230d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80230dc:	b2db      	uxtb	r3, r3
 80230de:	2b00      	cmp	r3, #0
 80230e0:	d029      	beq.n	8023136 <SPI_MASTER_StartTransmitDMA+0xc6>
        {
          dma_ctll = (uint32_t)handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL;
 80230e2:	68fb      	ldr	r3, [r7, #12]
 80230e4:	68db      	ldr	r3, [r3, #12]
 80230e6:	681a      	ldr	r2, [r3, #0]
 80230e8:	68fb      	ldr	r3, [r7, #12]
 80230ea:	7f5b      	ldrb	r3, [r3, #29]
 80230ec:	4619      	mov	r1, r3
 80230ee:	2358      	movs	r3, #88	; 0x58
 80230f0:	fb03 f301 	mul.w	r3, r3, r1
 80230f4:	4413      	add	r3, r2
 80230f6:	3318      	adds	r3, #24
 80230f8:	681b      	ldr	r3, [r3, #0]
 80230fa:	613b      	str	r3, [r7, #16]

          dma_ctll = (uint32_t)(dma_ctll & (uint32_t)(~(GPDMA0_CH_CTLL_SINC_Msk))) |
 80230fc:	693b      	ldr	r3, [r7, #16]
 80230fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8023102:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8023106:	613b      	str	r3, [r7, #16]
                               ((uint32_t)XMC_DMA_CH_ADDRESS_COUNT_MODE_NO_CHANGE << GPDMA0_CH_CTLL_SINC_Pos);

          handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL = dma_ctll;
 8023108:	68fb      	ldr	r3, [r7, #12]
 802310a:	68db      	ldr	r3, [r3, #12]
 802310c:	681a      	ldr	r2, [r3, #0]
 802310e:	68fb      	ldr	r3, [r7, #12]
 8023110:	7f5b      	ldrb	r3, [r3, #29]
 8023112:	4619      	mov	r1, r3
 8023114:	2358      	movs	r3, #88	; 0x58
 8023116:	fb03 f301 	mul.w	r3, r3, r1
 802311a:	4413      	add	r3, r2
 802311c:	3318      	adds	r3, #24
 802311e:	693a      	ldr	r2, [r7, #16]
 8023120:	601a      	str	r2, [r3, #0]
          mode = (uint32_t)((uint32_t)handle->runtime->spi_master_mode & 0xfffbU);
 8023122:	68fb      	ldr	r3, [r7, #12]
 8023124:	689b      	ldr	r3, [r3, #8]
 8023126:	7f1b      	ldrb	r3, [r3, #28]
 8023128:	b2db      	uxtb	r3, r3
 802312a:	461a      	mov	r2, r3
 802312c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8023130:	4013      	ands	r3, r2
 8023132:	61bb      	str	r3, [r7, #24]
 8023134:	e025      	b.n	8023182 <SPI_MASTER_StartTransmitDMA+0x112>
        }
        else
        {
          runtime_handle->tx_data = data_ptr;
 8023136:	697b      	ldr	r3, [r7, #20]
 8023138:	68ba      	ldr	r2, [r7, #8]
 802313a:	619a      	str	r2, [r3, #24]
          dma_ctll = handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL;
 802313c:	68fb      	ldr	r3, [r7, #12]
 802313e:	68db      	ldr	r3, [r3, #12]
 8023140:	681a      	ldr	r2, [r3, #0]
 8023142:	68fb      	ldr	r3, [r7, #12]
 8023144:	7f5b      	ldrb	r3, [r3, #29]
 8023146:	4619      	mov	r1, r3
 8023148:	2358      	movs	r3, #88	; 0x58
 802314a:	fb03 f301 	mul.w	r3, r3, r1
 802314e:	4413      	add	r3, r2
 8023150:	3318      	adds	r3, #24
 8023152:	681b      	ldr	r3, [r3, #0]
 8023154:	613b      	str	r3, [r7, #16]

          dma_ctll = (uint32_t)(dma_ctll & (~GPDMA0_CH_CTLL_SINC_Msk)) |
 8023156:	693b      	ldr	r3, [r7, #16]
 8023158:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 802315c:	613b      	str	r3, [r7, #16]
                               ((uint32_t)XMC_DMA_CH_ADDRESS_COUNT_MODE_INCREMENT << GPDMA0_CH_CTLL_SINC_Pos);

          handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL = dma_ctll;
 802315e:	68fb      	ldr	r3, [r7, #12]
 8023160:	68db      	ldr	r3, [r3, #12]
 8023162:	681a      	ldr	r2, [r3, #0]
 8023164:	68fb      	ldr	r3, [r7, #12]
 8023166:	7f5b      	ldrb	r3, [r3, #29]
 8023168:	4619      	mov	r1, r3
 802316a:	2358      	movs	r3, #88	; 0x58
 802316c:	fb03 f301 	mul.w	r3, r3, r1
 8023170:	4413      	add	r3, r2
 8023172:	3318      	adds	r3, #24
 8023174:	693a      	ldr	r2, [r7, #16]
 8023176:	601a      	str	r2, [r3, #0]
          mode = (uint32_t)handle->runtime->spi_master_mode;
 8023178:	68fb      	ldr	r3, [r7, #12]
 802317a:	689b      	ldr	r3, [r3, #8]
 802317c:	7f1b      	ldrb	r3, [r3, #28]
 802317e:	b2db      	uxtb	r3, r3
 8023180:	61bb      	str	r3, [r7, #24]
        }

        /* Enable transmit event generation */
        XMC_SPI_CH_EnableEvent(handle->channel, (uint32_t)XMC_SPI_CH_EVENT_RECEIVE_START);
 8023182:	68fb      	ldr	r3, [r7, #12]
 8023184:	681b      	ldr	r3, [r3, #0]
 8023186:	4618      	mov	r0, r3
 8023188:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802318c:	f7ff f860 	bl	8022250 <XMC_SPI_CH_EnableEvent>

        XMC_DMA_CH_SetBlockSize(handle->global_dma->dma, handle->dma_ch_tx_number, block_size);
 8023190:	68fb      	ldr	r3, [r7, #12]
 8023192:	68db      	ldr	r3, [r3, #12]
 8023194:	681a      	ldr	r2, [r3, #0]
 8023196:	68fb      	ldr	r3, [r7, #12]
 8023198:	7f5b      	ldrb	r3, [r3, #29]
 802319a:	4610      	mov	r0, r2
 802319c:	4619      	mov	r1, r3
 802319e:	687a      	ldr	r2, [r7, #4]
 80231a0:	f7ff ff0c 	bl	8022fbc <XMC_DMA_CH_SetBlockSize>

        XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma, handle->dma_ch_tx_number, (uint32_t)runtime_handle->tx_data);
 80231a4:	68fb      	ldr	r3, [r7, #12]
 80231a6:	68db      	ldr	r3, [r3, #12]
 80231a8:	6819      	ldr	r1, [r3, #0]
 80231aa:	68fb      	ldr	r3, [r7, #12]
 80231ac:	7f5a      	ldrb	r2, [r3, #29]
 80231ae:	697b      	ldr	r3, [r7, #20]
 80231b0:	699b      	ldr	r3, [r3, #24]
 80231b2:	4608      	mov	r0, r1
 80231b4:	4611      	mov	r1, r2
 80231b6:	461a      	mov	r2, r3
 80231b8:	f7ff fed6 	bl	8022f68 <XMC_DMA_CH_SetSourceAddress>

        XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
 80231bc:	68fb      	ldr	r3, [r7, #12]
 80231be:	681a      	ldr	r2, [r3, #0]
 80231c0:	697b      	ldr	r3, [r7, #20]
 80231c2:	7f1b      	ldrb	r3, [r3, #28]
 80231c4:	b2db      	uxtb	r3, r3
 80231c6:	4610      	mov	r0, r2
 80231c8:	4619      	mov	r1, r3
 80231ca:	f7ff fea5 	bl	8022f18 <XMC_SPI_CH_SetTransmitMode>

        XMC_DMA_CH_SetDestinationAddress(handle->global_dma->dma,
 80231ce:	68fb      	ldr	r3, [r7, #12]
 80231d0:	68db      	ldr	r3, [r3, #12]
 80231d2:	6818      	ldr	r0, [r3, #0]
 80231d4:	68fb      	ldr	r3, [r7, #12]
 80231d6:	7f59      	ldrb	r1, [r3, #29]
                                         handle->dma_ch_tx_number,
                                         (uint32_t)&(handle->channel->TBUF[mode]));
 80231d8:	68fb      	ldr	r3, [r7, #12]
 80231da:	681a      	ldr	r2, [r3, #0]
 80231dc:	69bb      	ldr	r3, [r7, #24]
 80231de:	3320      	adds	r3, #32
 80231e0:	009b      	lsls	r3, r3, #2
 80231e2:	4413      	add	r3, r2

        XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma, handle->dma_ch_tx_number, (uint32_t)runtime_handle->tx_data);

        XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);

        XMC_DMA_CH_SetDestinationAddress(handle->global_dma->dma,
 80231e4:	461a      	mov	r2, r3
 80231e6:	f7ff fed3 	bl	8022f90 <XMC_DMA_CH_SetDestinationAddress>
                                         handle->dma_ch_tx_number,
                                         (uint32_t)&(handle->channel->TBUF[mode]));

        status = SPI_MASTER_STATUS_SUCCESS;
 80231ea:	2300      	movs	r3, #0
 80231ec:	77fb      	strb	r3, [r7, #31]

        XMC_DMA_CH_Enable(handle->global_dma->dma, handle->dma_ch_tx_number);
 80231ee:	68fb      	ldr	r3, [r7, #12]
 80231f0:	68db      	ldr	r3, [r3, #12]
 80231f2:	681a      	ldr	r2, [r3, #0]
 80231f4:	68fb      	ldr	r3, [r7, #12]
 80231f6:	7f5b      	ldrb	r3, [r3, #29]
 80231f8:	4610      	mov	r0, r2
 80231fa:	4619      	mov	r1, r3
 80231fc:	f7ff fea2 	bl	8022f44 <XMC_DMA_CH_Enable>
 8023200:	e004      	b.n	802320c <SPI_MASTER_StartTransmitDMA+0x19c>
      }
      else
      {
        status = SPI_MASTER_STATUS_BUFFER_INVALID;
 8023202:	2303      	movs	r3, #3
 8023204:	77fb      	strb	r3, [r7, #31]
 8023206:	e001      	b.n	802320c <SPI_MASTER_StartTransmitDMA+0x19c>
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUSY;
 8023208:	2302      	movs	r3, #2
 802320a:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 802320c:	7ffb      	ldrb	r3, [r7, #31]
}
 802320e:	4618      	mov	r0, r3
 8023210:	3720      	adds	r7, #32
 8023212:	46bd      	mov	sp, r7
 8023214:	bd80      	pop	{r7, pc}
 8023216:	bf00      	nop

08023218 <SPI_MASTER_StartReceiveDMA>:
}
#endif

#if(SPI_MASTER_DMA_RECEIVE_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_StartReceiveDMA(const SPI_MASTER_t  *const handle, uint8_t *dataptr, uint32_t block_size)
{
 8023218:	b580      	push	{r7, lr}
 802321a:	b086      	sub	sp, #24
 802321c:	af00      	add	r7, sp, #0
 802321e:	60f8      	str	r0, [r7, #12]
 8023220:	60b9      	str	r1, [r7, #8]
 8023222:	607a      	str	r2, [r7, #4]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  static uint8_t dummy_data[2] = {0xFFU, 0xFFU};

  XMC_ASSERT("SPI_MASTER_StartReceiveDMA:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_MODE_MISMATCH;
 8023224:	2304      	movs	r3, #4
 8023226:	75fb      	strb	r3, [r7, #23]
  runtime_handle = handle->runtime;
 8023228:	68fb      	ldr	r3, [r7, #12]
 802322a:	689b      	ldr	r3, [r3, #8]
 802322c:	613b      	str	r3, [r7, #16]

  if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 802322e:	68fb      	ldr	r3, [r7, #12]
 8023230:	685b      	ldr	r3, [r3, #4]
 8023232:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8023236:	2b01      	cmp	r3, #1
 8023238:	d13c      	bne.n	80232b4 <SPI_MASTER_StartReceiveDMA+0x9c>
  {
    status = SPI_MASTER_STATUS_BUSY;
 802323a:	2302      	movs	r3, #2
 802323c:	75fb      	strb	r3, [r7, #23]
    /* Check whether SPI channel is free or not */
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 802323e:	693b      	ldr	r3, [r7, #16]
 8023240:	7fdb      	ldrb	r3, [r3, #31]
 8023242:	b2db      	uxtb	r3, r3
 8023244:	f083 0301 	eor.w	r3, r3, #1
 8023248:	b2db      	uxtb	r3, r3
 802324a:	2b00      	cmp	r3, #0
 802324c:	d030      	beq.n	80232b0 <SPI_MASTER_StartReceiveDMA+0x98>
 802324e:	693b      	ldr	r3, [r7, #16]
 8023250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8023254:	b2db      	uxtb	r3, r3
 8023256:	f083 0301 	eor.w	r3, r3, #1
 802325a:	b2db      	uxtb	r3, r3
 802325c:	2b00      	cmp	r3, #0
 802325e:	d027      	beq.n	80232b0 <SPI_MASTER_StartReceiveDMA+0x98>
    {
      /* Check data pointer is valid or not */
      if ((dataptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 8023260:	68bb      	ldr	r3, [r7, #8]
 8023262:	2b00      	cmp	r3, #0
 8023264:	d021      	beq.n	80232aa <SPI_MASTER_StartReceiveDMA+0x92>
 8023266:	687b      	ldr	r3, [r7, #4]
 8023268:	2b00      	cmp	r3, #0
 802326a:	d01e      	beq.n	80232aa <SPI_MASTER_StartReceiveDMA+0x92>
 802326c:	687b      	ldr	r3, [r7, #4]
 802326e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8023272:	d21a      	bcs.n	80232aa <SPI_MASTER_StartReceiveDMA+0x92>
      {
        runtime_handle->rx_busy = true;
 8023274:	693b      	ldr	r3, [r7, #16]
 8023276:	2201      	movs	r2, #1
 8023278:	77da      	strb	r2, [r3, #31]
        runtime_handle->rx_data = dataptr;
 802327a:	693b      	ldr	r3, [r7, #16]
 802327c:	68ba      	ldr	r2, [r7, #8]
 802327e:	615a      	str	r2, [r3, #20]
        runtime_handle->tx_data = &dummy_data[0];
 8023280:	693b      	ldr	r3, [r7, #16]
 8023282:	4a0f      	ldr	r2, [pc, #60]	; (80232c0 <SPI_MASTER_StartReceiveDMA+0xa8>)
 8023284:	619a      	str	r2, [r3, #24]
        runtime_handle->tx_data_count = block_size;
 8023286:	693b      	ldr	r3, [r7, #16]
 8023288:	687a      	ldr	r2, [r7, #4]
 802328a:	605a      	str	r2, [r3, #4]
        runtime_handle->tx_data_dummy = true;
 802328c:	693b      	ldr	r3, [r7, #16]
 802328e:	2201      	movs	r2, #1
 8023290:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        runtime_handle->rx_data_dummy = false;
 8023294:	693b      	ldr	r3, [r7, #16]
 8023296:	2200      	movs	r2, #0
 8023298:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        status = SPI_MASTER_lReceiveDMA(handle, block_size);
 802329c:	68f8      	ldr	r0, [r7, #12]
 802329e:	6879      	ldr	r1, [r7, #4]
 80232a0:	f000 f868 	bl	8023374 <SPI_MASTER_lReceiveDMA>
 80232a4:	4603      	mov	r3, r0
 80232a6:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_STATUS_BUSY;
    /* Check whether SPI channel is free or not */
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
    {
      /* Check data pointer is valid or not */
      if ((dataptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 80232a8:	e004      	b.n	80232b4 <SPI_MASTER_StartReceiveDMA+0x9c>

        status = SPI_MASTER_lReceiveDMA(handle, block_size);
      }
      else
      {
        status = SPI_MASTER_STATUS_BUFFER_INVALID;
 80232aa:	2303      	movs	r3, #3
 80232ac:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_STATUS_BUSY;
    /* Check whether SPI channel is free or not */
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
    {
      /* Check data pointer is valid or not */
      if ((dataptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 80232ae:	e001      	b.n	80232b4 <SPI_MASTER_StartReceiveDMA+0x9c>
        status = SPI_MASTER_STATUS_BUFFER_INVALID;
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUSY;
 80232b0:	2302      	movs	r3, #2
 80232b2:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 80232b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80232b6:	4618      	mov	r0, r3
 80232b8:	3718      	adds	r7, #24
 80232ba:	46bd      	mov	sp, r7
 80232bc:	bd80      	pop	{r7, pc}
 80232be:	bf00      	nop
 80232c0:	1ffe8860 	.word	0x1ffe8860

080232c4 <SPI_MASTER_Transfer>:
 */
SPI_MASTER_STATUS_t SPI_MASTER_Transfer(const SPI_MASTER_t *const handle,
                                        uint8_t* tx_dataptr,
                                        uint8_t* rx_dataptr,
                                        uint32_t count)
{
 80232c4:	b580      	push	{r7, lr}
 80232c6:	b086      	sub	sp, #24
 80232c8:	af00      	add	r7, sp, #0
 80232ca:	60f8      	str	r0, [r7, #12]
 80232cc:	60b9      	str	r1, [r7, #8]
 80232ce:	607a      	str	r2, [r7, #4]
 80232d0:	603b      	str	r3, [r7, #0]
  SPI_MASTER_STATUS_t status;
  SPI_MASTER_RUNTIME_t * runtime_handle;

  XMC_ASSERT("SPI_MASTER_Transfer:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_BUSY;
 80232d2:	2302      	movs	r3, #2
 80232d4:	75fb      	strb	r3, [r7, #23]
  runtime_handle = handle->runtime;
 80232d6:	68fb      	ldr	r3, [r7, #12]
 80232d8:	689b      	ldr	r3, [r3, #8]
 80232da:	613b      	str	r3, [r7, #16]

  if (XMC_SPI_CH_MODE_STANDARD == runtime_handle->spi_master_mode)
 80232dc:	693b      	ldr	r3, [r7, #16]
 80232de:	7f1b      	ldrb	r3, [r3, #28]
 80232e0:	b2db      	uxtb	r3, r3
 80232e2:	2b00      	cmp	r3, #0
 80232e4:	d13f      	bne.n	8023366 <SPI_MASTER_Transfer+0xa2>
  {
    /* Check whether SPI channel is free or not */
    if ((tx_dataptr != NULL) && (rx_dataptr != NULL) && (count > 0U))
 80232e6:	68bb      	ldr	r3, [r7, #8]
 80232e8:	2b00      	cmp	r3, #0
 80232ea:	d038      	beq.n	802335e <SPI_MASTER_Transfer+0x9a>
 80232ec:	687b      	ldr	r3, [r7, #4]
 80232ee:	2b00      	cmp	r3, #0
 80232f0:	d035      	beq.n	802335e <SPI_MASTER_Transfer+0x9a>
 80232f2:	683b      	ldr	r3, [r7, #0]
 80232f4:	2b00      	cmp	r3, #0
 80232f6:	d032      	beq.n	802335e <SPI_MASTER_Transfer+0x9a>
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 80232f8:	693b      	ldr	r3, [r7, #16]
 80232fa:	7fdb      	ldrb	r3, [r3, #31]
 80232fc:	b2db      	uxtb	r3, r3
 80232fe:	f083 0301 	eor.w	r3, r3, #1
 8023302:	b2db      	uxtb	r3, r3
 8023304:	2b00      	cmp	r3, #0
 8023306:	d029      	beq.n	802335c <SPI_MASTER_Transfer+0x98>
 8023308:	693b      	ldr	r3, [r7, #16]
 802330a:	f893 3020 	ldrb.w	r3, [r3, #32]
 802330e:	b2db      	uxtb	r3, r3
 8023310:	f083 0301 	eor.w	r3, r3, #1
 8023314:	b2db      	uxtb	r3, r3
 8023316:	2b00      	cmp	r3, #0
 8023318:	d020      	beq.n	802335c <SPI_MASTER_Transfer+0x98>
      {
        runtime_handle->rx_busy = true;
 802331a:	693b      	ldr	r3, [r7, #16]
 802331c:	2201      	movs	r2, #1
 802331e:	77da      	strb	r2, [r3, #31]
        runtime_handle->rx_data = rx_dataptr;
 8023320:	693b      	ldr	r3, [r7, #16]
 8023322:	687a      	ldr	r2, [r7, #4]
 8023324:	615a      	str	r2, [r3, #20]
        runtime_handle->tx_data = tx_dataptr;
 8023326:	693b      	ldr	r3, [r7, #16]
 8023328:	68ba      	ldr	r2, [r7, #8]
 802332a:	619a      	str	r2, [r3, #24]
        runtime_handle->tx_data_count = count;
 802332c:	693b      	ldr	r3, [r7, #16]
 802332e:	683a      	ldr	r2, [r7, #0]
 8023330:	605a      	str	r2, [r3, #4]
        runtime_handle->tx_data_dummy = false;
 8023332:	693b      	ldr	r3, [r7, #16]
 8023334:	2200      	movs	r2, #0
 8023336:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        runtime_handle->rx_data_dummy = false;
 802333a:	693b      	ldr	r3, [r7, #16]
 802333c:	2200      	movs	r2, #0
 802333e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        {
          status = SPI_MASTER_lReceiveIRQ(handle, count);
        }
#endif
#if (SPI_MASTER_DMA_RECEIVE_MODE == 1U)
        if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 8023342:	68fb      	ldr	r3, [r7, #12]
 8023344:	685b      	ldr	r3, [r3, #4]
 8023346:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 802334a:	2b01      	cmp	r3, #1
 802334c:	d106      	bne.n	802335c <SPI_MASTER_Transfer+0x98>
        {
          status = SPI_MASTER_lReceiveDMA(handle, count);
 802334e:	68f8      	ldr	r0, [r7, #12]
 8023350:	6839      	ldr	r1, [r7, #0]
 8023352:	f000 f80f 	bl	8023374 <SPI_MASTER_lReceiveDMA>
 8023356:	4603      	mov	r3, r0
 8023358:	75fb      	strb	r3, [r7, #23]
  {
    /* Check whether SPI channel is free or not */
    if ((tx_dataptr != NULL) && (rx_dataptr != NULL) && (count > 0U))
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 802335a:	e003      	b.n	8023364 <SPI_MASTER_Transfer+0xa0>
 802335c:	e002      	b.n	8023364 <SPI_MASTER_Transfer+0xa0>
#endif
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUFFER_INVALID;
 802335e:	2303      	movs	r3, #3
 8023360:	75fb      	strb	r3, [r7, #23]
 8023362:	e002      	b.n	802336a <SPI_MASTER_Transfer+0xa6>
 8023364:	e001      	b.n	802336a <SPI_MASTER_Transfer+0xa6>
    }
  }
  else
  {
    status = SPI_MASTER_STATUS_FAILURE;
 8023366:	2301      	movs	r3, #1
 8023368:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 802336a:	7dfb      	ldrb	r3, [r7, #23]
}
 802336c:	4618      	mov	r0, r3
 802336e:	3718      	adds	r7, #24
 8023370:	46bd      	mov	sp, r7
 8023372:	bd80      	pop	{r7, pc}

08023374 <SPI_MASTER_lReceiveDMA>:
}
#endif

#if (SPI_MASTER_DMA_RECEIVE_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_lReceiveDMA(const SPI_MASTER_t *const handle, uint32_t block_size)
{
 8023374:	b580      	push	{r7, lr}
 8023376:	b084      	sub	sp, #16
 8023378:	af00      	add	r7, sp, #0
 802337a:	6078      	str	r0, [r7, #4]
 802337c:	6039      	str	r1, [r7, #0]
  SPI_MASTER_STATUS_t status;
  SPI_MASTER_RUNTIME_t * runtime_handle;

  runtime_handle = handle->runtime;
 802337e:	687b      	ldr	r3, [r7, #4]
 8023380:	689b      	ldr	r3, [r3, #8]
 8023382:	60fb      	str	r3, [r7, #12]
  runtime_handle->rx_data_index = 0U;
 8023384:	68fb      	ldr	r3, [r7, #12]
 8023386:	2200      	movs	r2, #0
 8023388:	611a      	str	r2, [r3, #16]
  runtime_handle->rx_data_count = (uint32_t)block_size;
 802338a:	68fb      	ldr	r3, [r7, #12]
 802338c:	683a      	ldr	r2, [r7, #0]
 802338e:	60da      	str	r2, [r3, #12]

  SPI_MASTER_lStdRBUFFlush(handle->channel);
 8023390:	687b      	ldr	r3, [r7, #4]
 8023392:	681b      	ldr	r3, [r3, #0]
 8023394:	4618      	mov	r0, r3
 8023396:	f000 f847 	bl	8023428 <SPI_MASTER_lStdRBUFFlush>

  XMC_SPI_CH_EnableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
 802339a:	687b      	ldr	r3, [r7, #4]
 802339c:	681b      	ldr	r3, [r3, #0]
 802339e:	4618      	mov	r0, r3
 80233a0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80233a4:	f7fe ff54 	bl	8022250 <XMC_SPI_CH_EnableEvent>

  XMC_DMA_CH_SetBlockSize(handle->global_dma->dma, handle->dma_ch_rx_number, runtime_handle->rx_data_count);
 80233a8:	687b      	ldr	r3, [r7, #4]
 80233aa:	68db      	ldr	r3, [r3, #12]
 80233ac:	6819      	ldr	r1, [r3, #0]
 80233ae:	687b      	ldr	r3, [r7, #4]
 80233b0:	7f1a      	ldrb	r2, [r3, #28]
 80233b2:	68fb      	ldr	r3, [r7, #12]
 80233b4:	68db      	ldr	r3, [r3, #12]
 80233b6:	4608      	mov	r0, r1
 80233b8:	4611      	mov	r1, r2
 80233ba:	461a      	mov	r2, r3
 80233bc:	f7ff fdfe 	bl	8022fbc <XMC_DMA_CH_SetBlockSize>

  XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma,
 80233c0:	687b      	ldr	r3, [r7, #4]
 80233c2:	68db      	ldr	r3, [r3, #12]
 80233c4:	6819      	ldr	r1, [r3, #0]
 80233c6:	687b      	ldr	r3, [r7, #4]
 80233c8:	7f1a      	ldrb	r2, [r3, #28]
                              handle->dma_ch_rx_number,
                              (uint32_t)&(handle->channel->RBUF));
 80233ca:	687b      	ldr	r3, [r7, #4]
 80233cc:	681b      	ldr	r3, [r3, #0]
 80233ce:	3354      	adds	r3, #84	; 0x54

  XMC_SPI_CH_EnableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);

  XMC_DMA_CH_SetBlockSize(handle->global_dma->dma, handle->dma_ch_rx_number, runtime_handle->rx_data_count);

  XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma,
 80233d0:	4608      	mov	r0, r1
 80233d2:	4611      	mov	r1, r2
 80233d4:	461a      	mov	r2, r3
 80233d6:	f7ff fdc7 	bl	8022f68 <XMC_DMA_CH_SetSourceAddress>
                              handle->dma_ch_rx_number,
                              (uint32_t)&(handle->channel->RBUF));

  XMC_DMA_CH_SetDestinationAddress(handle->global_dma->dma, handle->dma_ch_rx_number, (uint32_t)runtime_handle->rx_data);
 80233da:	687b      	ldr	r3, [r7, #4]
 80233dc:	68db      	ldr	r3, [r3, #12]
 80233de:	6819      	ldr	r1, [r3, #0]
 80233e0:	687b      	ldr	r3, [r7, #4]
 80233e2:	7f1a      	ldrb	r2, [r3, #28]
 80233e4:	68fb      	ldr	r3, [r7, #12]
 80233e6:	695b      	ldr	r3, [r3, #20]
 80233e8:	4608      	mov	r0, r1
 80233ea:	4611      	mov	r1, r2
 80233ec:	461a      	mov	r2, r3
 80233ee:	f7ff fdcf 	bl	8022f90 <XMC_DMA_CH_SetDestinationAddress>

  status = SPI_MASTER_STATUS_SUCCESS;
 80233f2:	2300      	movs	r3, #0
 80233f4:	72fb      	strb	r3, [r7, #11]

  XMC_DMA_CH_Enable(handle->global_dma->dma, handle->dma_ch_rx_number);
 80233f6:	687b      	ldr	r3, [r7, #4]
 80233f8:	68db      	ldr	r3, [r3, #12]
 80233fa:	681a      	ldr	r2, [r3, #0]
 80233fc:	687b      	ldr	r3, [r7, #4]
 80233fe:	7f1b      	ldrb	r3, [r3, #28]
 8023400:	4610      	mov	r0, r2
 8023402:	4619      	mov	r1, r3
 8023404:	f7ff fd9e 	bl	8022f44 <XMC_DMA_CH_Enable>

  /* Call the transmit, to receive the data synchronously */
  status = SPI_MASTER_Transmit(handle, runtime_handle->tx_data, runtime_handle->tx_data_count);
 8023408:	68fb      	ldr	r3, [r7, #12]
 802340a:	699a      	ldr	r2, [r3, #24]
 802340c:	68fb      	ldr	r3, [r7, #12]
 802340e:	685b      	ldr	r3, [r3, #4]
 8023410:	6878      	ldr	r0, [r7, #4]
 8023412:	4611      	mov	r1, r2
 8023414:	461a      	mov	r2, r3
 8023416:	f7ff fdf7 	bl	8023008 <SPI_MASTER_Transmit>
 802341a:	4603      	mov	r3, r0
 802341c:	72fb      	strb	r3, [r7, #11]

  return status;
 802341e:	7afb      	ldrb	r3, [r7, #11]
}
 8023420:	4618      	mov	r0, r3
 8023422:	3710      	adds	r7, #16
 8023424:	46bd      	mov	sp, r7
 8023426:	bd80      	pop	{r7, pc}

08023428 <SPI_MASTER_lStdRBUFFlush>:

/*
 * Clears the receive buffers
 */
static void SPI_MASTER_lStdRBUFFlush(XMC_USIC_CH_t *const channel)
{
 8023428:	b580      	push	{r7, lr}
 802342a:	b082      	sub	sp, #8
 802342c:	af00      	add	r7, sp, #0
 802342e:	6078      	str	r0, [r7, #4]
  /* Clear RBF0 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 8023430:	6878      	ldr	r0, [r7, #4]
 8023432:	f7fe fef3 	bl	802221c <XMC_SPI_CH_GetReceivedData>
  /* Clear RBF1 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 8023436:	6878      	ldr	r0, [r7, #4]
 8023438:	f7fe fef0 	bl	802221c <XMC_SPI_CH_GetReceivedData>
}
 802343c:	3708      	adds	r7, #8
 802343e:	46bd      	mov	sp, r7
 8023440:	bd80      	pop	{r7, pc}
 8023442:	bf00      	nop

08023444 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8023444:	b480      	push	{r7}
 8023446:	b083      	sub	sp, #12
 8023448:	af00      	add	r7, sp, #0
 802344a:	6078      	str	r0, [r7, #4]
 802344c:	460b      	mov	r3, r1
 802344e:	70fb      	strb	r3, [r7, #3]
 8023450:	4613      	mov	r3, r2
 8023452:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8023454:	78f8      	ldrb	r0, [r7, #3]
 8023456:	78fb      	ldrb	r3, [r7, #3]
 8023458:	687a      	ldr	r2, [r7, #4]
 802345a:	3306      	adds	r3, #6
 802345c:	009b      	lsls	r3, r3, #2
 802345e:	4413      	add	r3, r2
 8023460:	685b      	ldr	r3, [r3, #4]
 8023462:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8023466:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8023468:	431a      	orrs	r2, r3
 802346a:	6879      	ldr	r1, [r7, #4]
 802346c:	1d83      	adds	r3, r0, #6
 802346e:	009b      	lsls	r3, r3, #2
 8023470:	440b      	add	r3, r1
 8023472:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8023474:	370c      	adds	r7, #12
 8023476:	46bd      	mov	sp, r7
 8023478:	f85d 7b04 	ldr.w	r7, [sp], #4
 802347c:	4770      	bx	lr
 802347e:	bf00      	nop

08023480 <XMC_USIC_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8023480:	b480      	push	{r7}
 8023482:	b083      	sub	sp, #12
 8023484:	af00      	add	r7, sp, #0
 8023486:	6078      	str	r0, [r7, #4]
 8023488:	460b      	mov	r3, r1
 802348a:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 802348c:	687b      	ldr	r3, [r7, #4]
 802348e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023490:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
 8023494:	78fb      	ldrb	r3, [r7, #3]
 8023496:	3b01      	subs	r3, #1
 8023498:	061b      	lsls	r3, r3, #24
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 802349a:	431a      	orrs	r2, r3
 802349c:	687b      	ldr	r3, [r7, #4]
 802349e:	635a      	str	r2, [r3, #52]	; 0x34
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
}
 80234a0:	370c      	adds	r7, #12
 80234a2:	46bd      	mov	sp, r7
 80234a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234a8:	4770      	bx	lr
 80234aa:	bf00      	nop

080234ac <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 80234ac:	b480      	push	{r7}
 80234ae:	b083      	sub	sp, #12
 80234b0:	af00      	add	r7, sp, #0
 80234b2:	6078      	str	r0, [r7, #4]
 80234b4:	460b      	mov	r3, r1
 80234b6:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 80234b8:	687b      	ldr	r3, [r7, #4]
 80234ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80234bc:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
 80234c0:	78fb      	ldrb	r3, [r7, #3]
 80234c2:	3b01      	subs	r3, #1
 80234c4:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 80234c6:	431a      	orrs	r2, r3
 80234c8:	687b      	ldr	r3, [r7, #4]
 80234ca:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
 80234cc:	370c      	adds	r7, #12
 80234ce:	46bd      	mov	sp, r7
 80234d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234d4:	4770      	bx	lr
 80234d6:	bf00      	nop

080234d8 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80234d8:	b480      	push	{r7}
 80234da:	b083      	sub	sp, #12
 80234dc:	af00      	add	r7, sp, #0
 80234de:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80234e0:	687b      	ldr	r3, [r7, #4]
 80234e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80234e4:	b2db      	uxtb	r3, r3
 80234e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80234ea:	b2db      	uxtb	r3, r3
}
 80234ec:	4618      	mov	r0, r3
 80234ee:	370c      	adds	r7, #12
 80234f0:	46bd      	mov	sp, r7
 80234f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234f6:	4770      	bx	lr

080234f8 <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
 80234f8:	b480      	push	{r7}
 80234fa:	b083      	sub	sp, #12
 80234fc:	af00      	add	r7, sp, #0
 80234fe:	6078      	str	r0, [r7, #4]
 8023500:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 8023502:	683b      	ldr	r3, [r7, #0]
 8023504:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8023508:	409a      	lsls	r2, r3
 802350a:	687b      	ldr	r3, [r7, #4]
 802350c:	669a      	str	r2, [r3, #104]	; 0x68
}
 802350e:	370c      	adds	r7, #12
 8023510:	46bd      	mov	sp, r7
 8023512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023516:	4770      	bx	lr

08023518 <XMC_USIC_CH_ConfigureShiftClockOutput>:
 * 
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8023518:	b480      	push	{r7}
 802351a:	b085      	sub	sp, #20
 802351c:	af00      	add	r7, sp, #0
 802351e:	60f8      	str	r0, [r7, #12]
 8023520:	60b9      	str	r1, [r7, #8]
 8023522:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8023524:	68fb      	ldr	r3, [r7, #12]
 8023526:	695b      	ldr	r3, [r3, #20]
 8023528:	f023 4250 	bic.w	r2, r3, #3489660928	; 0xd0000000
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
 802352c:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
 802352e:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
 8023530:	687b      	ldr	r3, [r7, #4]
 8023532:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8023534:	68fb      	ldr	r3, [r7, #12]
 8023536:	615a      	str	r2, [r3, #20]
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
 8023538:	3714      	adds	r7, #20
 802353a:	46bd      	mov	sp, r7
 802353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023540:	4770      	bx	lr
 8023542:	bf00      	nop

08023544 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8023544:	b480      	push	{r7}
 8023546:	b083      	sub	sp, #12
 8023548:	af00      	add	r7, sp, #0
 802354a:	6078      	str	r0, [r7, #4]
 802354c:	460b      	mov	r3, r1
 802354e:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8023550:	687b      	ldr	r3, [r7, #4]
 8023552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023554:	f023 020f 	bic.w	r2, r3, #15
 8023558:	78fb      	ldrb	r3, [r7, #3]
 802355a:	431a      	orrs	r2, r3
 802355c:	687b      	ldr	r3, [r7, #4]
 802355e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8023560:	370c      	adds	r7, #12
 8023562:	46bd      	mov	sp, r7
 8023564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023568:	4770      	bx	lr
 802356a:	bf00      	nop

0802356c <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
 802356c:	b580      	push	{r7, lr}
 802356e:	b082      	sub	sp, #8
 8023570:	af00      	add	r7, sp, #0
 8023572:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 8023574:	6878      	ldr	r0, [r7, #4]
 8023576:	2101      	movs	r1, #1
 8023578:	f7ff ffe4 	bl	8023544 <XMC_USIC_CH_SetMode>
}
 802357c:	3708      	adds	r7, #8
 802357e:	46bd      	mov	sp, r7
 8023580:	bd80      	pop	{r7, pc}
 8023582:	bf00      	nop

08023584 <XMC_SPI_CH_SetBitOrderMsbFirst>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetBitOrderLsbFirst()
 */
__STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
{
 8023584:	b480      	push	{r7}
 8023586:	b083      	sub	sp, #12
 8023588:	af00      	add	r7, sp, #0
 802358a:	6078      	str	r0, [r7, #4]
  channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 802358c:	687b      	ldr	r3, [r7, #4]
 802358e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023590:	f043 0201 	orr.w	r2, r3, #1
 8023594:	687b      	ldr	r3, [r7, #4]
 8023596:	635a      	str	r2, [r3, #52]	; 0x34
}
 8023598:	370c      	adds	r7, #12
 802359a:	46bd      	mov	sp, r7
 802359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235a0:	4770      	bx	lr
 80235a2:	bf00      	nop

080235a4 <XMC_SPI_CH_SetSlaveSelectDelay>:
 * This delay is dependent on the peripheral clock. The maximum possible value supported by this API
 * is 30 clock cycles.
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{
 80235a4:	b480      	push	{r7}
 80235a6:	b083      	sub	sp, #12
 80235a8:	af00      	add	r7, sp, #0
 80235aa:	6078      	str	r0, [r7, #4]
 80235ac:	6039      	str	r1, [r7, #0]

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80235ae:	687b      	ldr	r3, [r7, #4]
 80235b0:	695b      	ldr	r3, [r3, #20]
 80235b2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
								   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 80235b6:	683b      	ldr	r3, [r7, #0]
 80235b8:	3b01      	subs	r3, #1
 80235ba:	029b      	lsls	r3, r3, #10
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
								   USIC_CH_BRG_PCTQ_Msk)) |
 80235bc:	4313      	orrs	r3, r2
 80235be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80235c2:	687b      	ldr	r3, [r7, #4]
 80235c4:	615a      	str	r2, [r3, #20]
								   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
}
 80235c6:	370c      	adds	r7, #12
 80235c8:	46bd      	mov	sp, r7
 80235ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235ce:	4770      	bx	lr

080235d0 <XMC_SPI_CH_DisableFEM>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_EnableFEM()
 */
__STATIC_INLINE void XMC_SPI_CH_DisableFEM(XMC_USIC_CH_t *const channel)
{
 80235d0:	b480      	push	{r7}
 80235d2:	b083      	sub	sp, #12
 80235d4:	af00      	add	r7, sp, #0
 80235d6:	6078      	str	r0, [r7, #4]
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_FEM_Msk;
 80235d8:	687b      	ldr	r3, [r7, #4]
 80235da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80235dc:	f023 0208 	bic.w	r2, r3, #8
 80235e0:	687b      	ldr	r3, [r7, #4]
 80235e2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80235e4:	370c      	adds	r7, #12
 80235e6:	46bd      	mov	sp, r7
 80235e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235ec:	4770      	bx	lr
 80235ee:	bf00      	nop

080235f0 <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 80235f0:	b580      	push	{r7, lr}
 80235f2:	b084      	sub	sp, #16
 80235f4:	af00      	add	r7, sp, #0
 80235f6:	60f8      	str	r0, [r7, #12]
 80235f8:	60b9      	str	r1, [r7, #8]
 80235fa:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
 80235fc:	68f8      	ldr	r0, [r7, #12]
 80235fe:	68b9      	ldr	r1, [r7, #8]
 8023600:	687a      	ldr	r2, [r7, #4]
 8023602:	f7ff ff89 	bl	8023518 <XMC_USIC_CH_ConfigureShiftClockOutput>
                                       (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
 8023606:	3710      	adds	r7, #16
 8023608:	46bd      	mov	sp, r7
 802360a:	bd80      	pop	{r7, pc}

0802360c <XMC_SPI_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetFrameLength()
 */
__STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 802360c:	b580      	push	{r7, lr}
 802360e:	b082      	sub	sp, #8
 8023610:	af00      	add	r7, sp, #0
 8023612:	6078      	str	r0, [r7, #4]
 8023614:	460b      	mov	r3, r1
 8023616:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetWordLength(channel, word_length);
 8023618:	78fb      	ldrb	r3, [r7, #3]
 802361a:	6878      	ldr	r0, [r7, #4]
 802361c:	4619      	mov	r1, r3
 802361e:	f7ff ff2f 	bl	8023480 <XMC_USIC_CH_SetWordLength>
}
 8023622:	3708      	adds	r7, #8
 8023624:	46bd      	mov	sp, r7
 8023626:	bd80      	pop	{r7, pc}

08023628 <XMC_SPI_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSelect()
 */
__STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8023628:	b580      	push	{r7, lr}
 802362a:	b082      	sub	sp, #8
 802362c:	af00      	add	r7, sp, #0
 802362e:	6078      	str	r0, [r7, #4]
 8023630:	460b      	mov	r3, r1
 8023632:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetFrameLength(channel, frame_length);
 8023634:	78fb      	ldrb	r3, [r7, #3]
 8023636:	6878      	ldr	r0, [r7, #4]
 8023638:	4619      	mov	r1, r3
 802363a:	f7ff ff37 	bl	80234ac <XMC_USIC_CH_SetFrameLength>
}
 802363e:	3708      	adds	r7, #8
 8023640:	46bd      	mov	sp, r7
 8023642:	bd80      	pop	{r7, pc}

08023644 <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
                                               const XMC_SPI_CH_INPUT_t input,
                                               const uint8_t source)
{
 8023644:	b580      	push	{r7, lr}
 8023646:	b082      	sub	sp, #8
 8023648:	af00      	add	r7, sp, #0
 802364a:	6078      	str	r0, [r7, #4]
 802364c:	460b      	mov	r3, r1
 802364e:	70fb      	strb	r3, [r7, #3]
 8023650:	4613      	mov	r3, r2
 8023652:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0CR_INSW_Msk;
 8023654:	78f8      	ldrb	r0, [r7, #3]
 8023656:	78fb      	ldrb	r3, [r7, #3]
 8023658:	687a      	ldr	r2, [r7, #4]
 802365a:	3306      	adds	r3, #6
 802365c:	009b      	lsls	r3, r3, #2
 802365e:	4413      	add	r3, r2
 8023660:	685b      	ldr	r3, [r3, #4]
 8023662:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8023666:	f043 0210 	orr.w	r2, r3, #16
 802366a:	6879      	ldr	r1, [r7, #4]
 802366c:	1d83      	adds	r3, r0, #6
 802366e:	009b      	lsls	r3, r3, #2
 8023670:	440b      	add	r3, r1
 8023672:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8023674:	78fa      	ldrb	r2, [r7, #3]
 8023676:	78bb      	ldrb	r3, [r7, #2]
 8023678:	6878      	ldr	r0, [r7, #4]
 802367a:	4611      	mov	r1, r2
 802367c:	461a      	mov	r2, r3
 802367e:	f7ff fee1 	bl	8023444 <XMC_USIC_CH_SetInputSource>
}
 8023682:	3708      	adds	r7, #8
 8023684:	46bd      	mov	sp, r7
 8023686:	bd80      	pop	{r7, pc}

08023688 <SPI_MASTER_ADC_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_MASTER_ADC_lInit(void)
{
 8023688:	b580      	push	{r7, lr}
 802368a:	b082      	sub	sp, #8
 802368c:	af00      	add	r7, sp, #0
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
 802368e:	2300      	movs	r3, #0
 8023690:	71fb      	strb	r3, [r7, #7]
  status =  (SPI_MASTER_STATUS_t)GLOBAL_DMA_Init(&GLOBAL_DMA_0);
 8023692:	4842      	ldr	r0, [pc, #264]	; (802379c <SPI_MASTER_ADC_lInit+0x114>)
 8023694:	f000 fbf2 	bl	8023e7c <GLOBAL_DMA_Init>
 8023698:	4603      	mov	r3, r0
 802369a:	71fb      	strb	r3, [r7, #7]
  if (status == SPI_MASTER_STATUS_SUCCESS)
 802369c:	79fb      	ldrb	r3, [r7, #7]
 802369e:	2b00      	cmp	r3, #0
 80236a0:	d176      	bne.n	8023790 <SPI_MASTER_ADC_lInit+0x108>
  {            
                            
  (void)XMC_DMA_CH_Init(XMC_DMA1, 3U, &SPI_MASTER_ADC_dma_ch_tx_config);
 80236a2:	483f      	ldr	r0, [pc, #252]	; (80237a0 <SPI_MASTER_ADC_lInit+0x118>)
 80236a4:	2103      	movs	r1, #3
 80236a6:	4a3f      	ldr	r2, [pc, #252]	; (80237a4 <SPI_MASTER_ADC_lInit+0x11c>)
 80236a8:	f7fd fdaa 	bl	8021200 <XMC_DMA_CH_Init>
  /*"Interrupt Settings" configuration for "transmit" and/or "receive"*/
  XMC_DMA_CH_EnableEvent(XMC_DMA1, 3U, (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 80236ac:	483c      	ldr	r0, [pc, #240]	; (80237a0 <SPI_MASTER_ADC_lInit+0x118>)
 80236ae:	2103      	movs	r1, #3
 80236b0:	2201      	movs	r2, #1
 80236b2:	f7fd ffab 	bl	802160c <XMC_DMA_CH_EnableEvent>
  XMC_DMA_CH_SetEventHandler(XMC_DMA1, 3U, SPI_MASTER_ADC_DMA_tx_handler);
 80236b6:	483a      	ldr	r0, [pc, #232]	; (80237a0 <SPI_MASTER_ADC_lInit+0x118>)
 80236b8:	2103      	movs	r1, #3
 80236ba:	4a3b      	ldr	r2, [pc, #236]	; (80237a8 <SPI_MASTER_ADC_lInit+0x120>)
 80236bc:	f7fd fff4 	bl	80216a8 <XMC_DMA_CH_SetEventHandler>
                             
  (void)XMC_DMA_CH_Init(XMC_DMA1, 2U, &SPI_MASTER_ADC_dma_ch_rx_config);
 80236c0:	4837      	ldr	r0, [pc, #220]	; (80237a0 <SPI_MASTER_ADC_lInit+0x118>)
 80236c2:	2102      	movs	r1, #2
 80236c4:	4a39      	ldr	r2, [pc, #228]	; (80237ac <SPI_MASTER_ADC_lInit+0x124>)
 80236c6:	f7fd fd9b 	bl	8021200 <XMC_DMA_CH_Init>
  /*"Interrupt Settings" configuration for "transmit" and/or "receive"*/
  XMC_DMA_CH_EnableEvent(XMC_DMA1, 2U, (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 80236ca:	4835      	ldr	r0, [pc, #212]	; (80237a0 <SPI_MASTER_ADC_lInit+0x118>)
 80236cc:	2102      	movs	r1, #2
 80236ce:	2201      	movs	r2, #1
 80236d0:	f7fd ff9c 	bl	802160c <XMC_DMA_CH_EnableEvent>
  XMC_DMA_CH_SetEventHandler(XMC_DMA1, 2U, SPI_MASTER_ADC_DMA_rx_handler);
 80236d4:	4832      	ldr	r0, [pc, #200]	; (80237a0 <SPI_MASTER_ADC_lInit+0x118>)
 80236d6:	2102      	movs	r1, #2
 80236d8:	4a35      	ldr	r2, [pc, #212]	; (80237b0 <SPI_MASTER_ADC_lInit+0x128>)
 80236da:	f7fd ffe5 	bl	80216a8 <XMC_DMA_CH_SetEventHandler>
                             
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI2_CH0, &SPI_MASTER_ADC_Channel_Config);
 80236de:	4835      	ldr	r0, [pc, #212]	; (80237b4 <SPI_MASTER_ADC_lInit+0x12c>)
 80236e0:	4935      	ldr	r1, [pc, #212]	; (80237b8 <SPI_MASTER_ADC_lInit+0x130>)
 80236e2:	f7fe fd51 	bl	8022188 <XMC_SPI_CH_Init>
                             
  XMC_SPI_CH_DisableFEM(XMC_SPI2_CH0);
 80236e6:	4833      	ldr	r0, [pc, #204]	; (80237b4 <SPI_MASTER_ADC_lInit+0x12c>)
 80236e8:	f7ff ff72 	bl	80235d0 <XMC_SPI_CH_DisableFEM>
                              
  XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI2_CH0);
 80236ec:	4831      	ldr	r0, [pc, #196]	; (80237b4 <SPI_MASTER_ADC_lInit+0x12c>)
 80236ee:	f7ff ff49 	bl	8023584 <XMC_SPI_CH_SetBitOrderMsbFirst>
          
  XMC_SPI_CH_SetWordLength(XMC_SPI2_CH0, (uint8_t)8);
 80236f2:	4830      	ldr	r0, [pc, #192]	; (80237b4 <SPI_MASTER_ADC_lInit+0x12c>)
 80236f4:	2108      	movs	r1, #8
 80236f6:	f7ff ff89 	bl	802360c <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI2_CH0, (uint8_t)24);
 80236fa:	482e      	ldr	r0, [pc, #184]	; (80237b4 <SPI_MASTER_ADC_lInit+0x12c>)
 80236fc:	2118      	movs	r1, #24
 80236fe:	f7ff ff93 	bl	8023628 <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI2_CH0,
 8023702:	482c      	ldr	r0, [pc, #176]	; (80237b4 <SPI_MASTER_ADC_lInit+0x12c>)
 8023704:	2100      	movs	r1, #0
 8023706:	2200      	movs	r2, #0
 8023708:	f7ff ff72 	bl	80235f0 <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI2_CH0, 2U);
 802370c:	4829      	ldr	r0, [pc, #164]	; (80237b4 <SPI_MASTER_ADC_lInit+0x12c>)
 802370e:	2102      	movs	r1, #2
 8023710:	f7ff ff48 	bl	80235a4 <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)7, &SPI_MASTER_ADC_MISO_Config.port_config);
 8023714:	4829      	ldr	r0, [pc, #164]	; (80237bc <SPI_MASTER_ADC_lInit+0x134>)
 8023716:	2107      	movs	r1, #7
 8023718:	4a29      	ldr	r2, [pc, #164]	; (80237c0 <SPI_MASTER_ADC_lInit+0x138>)
 802371a:	f7fc fde7 	bl	80202ec <XMC_GPIO_Init>

  /* Configure the data input line selected */
  XMC_SPI_CH_SetInputSource(XMC_SPI2_CH0, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_C);
 802371e:	4825      	ldr	r0, [pc, #148]	; (80237b4 <SPI_MASTER_ADC_lInit+0x12c>)
 8023720:	2100      	movs	r1, #0
 8023722:	2202      	movs	r2, #2
 8023724:	f7ff ff8e 	bl	8023644 <XMC_SPI_CH_SetInputSource>
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI2_CH0);
 8023728:	4822      	ldr	r0, [pc, #136]	; (80237b4 <SPI_MASTER_ADC_lInit+0x12c>)
 802372a:	f7ff ff1f 	bl	802356c <XMC_SPI_CH_Start>

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)8, &SPI_MASTER_ADC_MOSI_Config.port_config);
 802372e:	4823      	ldr	r0, [pc, #140]	; (80237bc <SPI_MASTER_ADC_lInit+0x134>)
 8023730:	2108      	movs	r1, #8
 8023732:	4a24      	ldr	r2, [pc, #144]	; (80237c4 <SPI_MASTER_ADC_lInit+0x13c>)
 8023734:	f7fc fdda 	bl	80202ec <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)9, &SPI_MASTER_ADC_SCLKOUT_Config.port_config);
 8023738:	4820      	ldr	r0, [pc, #128]	; (80237bc <SPI_MASTER_ADC_lInit+0x134>)
 802373a:	2109      	movs	r1, #9
 802373c:	4a22      	ldr	r2, [pc, #136]	; (80237c8 <SPI_MASTER_ADC_lInit+0x140>)
 802373e:	f7fc fdd5 	bl	80202ec <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, (uint8_t)3, &SPI_MASTER_ADC_SS_0_Config.port_config);
 8023742:	4822      	ldr	r0, [pc, #136]	; (80237cc <SPI_MASTER_ADC_lInit+0x144>)
 8023744:	2103      	movs	r1, #3
 8023746:	4a22      	ldr	r2, [pc, #136]	; (80237d0 <SPI_MASTER_ADC_lInit+0x148>)
 8023748:	f7fc fdd0 	bl	80202ec <XMC_GPIO_Init>
  XMC_SPI_CH_EnableSlaveSelect(XMC_SPI2_CH0, XMC_SPI_CH_SLAVE_SELECT_0);
 802374c:	4819      	ldr	r0, [pc, #100]	; (80237b4 <SPI_MASTER_ADC_lInit+0x12c>)
 802374e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8023752:	f7fe fd4d 	bl	80221f0 <XMC_SPI_CH_EnableSlaveSelect>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, (uint8_t)4, &SPI_MASTER_ADC_SS_1_Config.port_config);
 8023756:	481d      	ldr	r0, [pc, #116]	; (80237cc <SPI_MASTER_ADC_lInit+0x144>)
 8023758:	2104      	movs	r1, #4
 802375a:	4a1e      	ldr	r2, [pc, #120]	; (80237d4 <SPI_MASTER_ADC_lInit+0x14c>)
 802375c:	f7fc fdc6 	bl	80202ec <XMC_GPIO_Init>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI2_CH0,
 8023760:	4814      	ldr	r0, [pc, #80]	; (80237b4 <SPI_MASTER_ADC_lInit+0x12c>)
 8023762:	2104      	movs	r1, #4
 8023764:	2201      	movs	r2, #1
 8023766:	f7fe fe65 	bl	8022434 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER,
                                      (uint32_t)SPI_MASTER_SR_ID_1);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI2_CH0,
 802376a:	4812      	ldr	r0, [pc, #72]	; (80237b4 <SPI_MASTER_ADC_lInit+0x12c>)
 802376c:	2108      	movs	r1, #8
 802376e:	2200      	movs	r2, #0
 8023770:	f7fe fe60 	bl	8022434 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE,
                                      (uint32_t)SPI_MASTER_SR_ID_0);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI2_CH0,
 8023774:	480f      	ldr	r0, [pc, #60]	; (80237b4 <SPI_MASTER_ADC_lInit+0x12c>)
 8023776:	210c      	movs	r1, #12
 8023778:	2200      	movs	r2, #0
 802377a:	f7fe fe5b 	bl	8022434 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE,
                                      (uint32_t)SPI_MASTER_SR_ID_0);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI2_CH0,
 802377e:	480d      	ldr	r0, [pc, #52]	; (80237b4 <SPI_MASTER_ADC_lInit+0x12c>)
 8023780:	2110      	movs	r1, #16
 8023782:	2202      	movs	r2, #2
 8023784:	f7fe fe56 	bl	8022434 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_2);
            
  XMC_USIC_CH_TriggerServiceRequest(XMC_SPI2_CH0, (uint32_t)SPI_MASTER_SR_ID_1);
 8023788:	480a      	ldr	r0, [pc, #40]	; (80237b4 <SPI_MASTER_ADC_lInit+0x12c>)
 802378a:	2101      	movs	r1, #1
 802378c:	f7ff feb4 	bl	80234f8 <XMC_USIC_CH_TriggerServiceRequest>
}            

  return status;
 8023790:	79fb      	ldrb	r3, [r7, #7]
}
 8023792:	4618      	mov	r0, r3
 8023794:	3708      	adds	r7, #8
 8023796:	46bd      	mov	sp, r7
 8023798:	bd80      	pop	{r7, pc}
 802379a:	bf00      	nop
 802379c:	1ffe89e0 	.word	0x1ffe89e0
 80237a0:	50018000 	.word	0x50018000
 80237a4:	1ffe8894 	.word	0x1ffe8894
 80237a8:	080237d9 	.word	0x080237d9
 80237ac:	1ffe88b8 	.word	0x1ffe88b8
 80237b0:	08023811 	.word	0x08023811
 80237b4:	48024000 	.word	0x48024000
 80237b8:	1ffe888c 	.word	0x1ffe888c
 80237bc:	48028300 	.word	0x48028300
 80237c0:	1ffe8b0c 	.word	0x1ffe8b0c
 80237c4:	1ffe8864 	.word	0x1ffe8864
 80237c8:	08029db4 	.word	0x08029db4
 80237cc:	48028500 	.word	0x48028500
 80237d0:	08029dd0 	.word	0x08029dd0
 80237d4:	1ffe8878 	.word	0x1ffe8878

080237d8 <SPI_MASTER_ADC_DMA_tx_handler>:
/*Transmit ISR*/
void SPI_MASTER_ADC_DMA_tx_handler(XMC_DMA_CH_EVENT_t event)
{
 80237d8:	b580      	push	{r7, lr}
 80237da:	b082      	sub	sp, #8
 80237dc:	af00      	add	r7, sp, #0
 80237de:	4603      	mov	r3, r0
 80237e0:	71fb      	strb	r3, [r7, #7]
  if (event == XMC_DMA_CH_EVENT_TRANSFER_COMPLETE)
 80237e2:	79fb      	ldrb	r3, [r7, #7]
 80237e4:	2b01      	cmp	r3, #1
 80237e6:	d10b      	bne.n	8023800 <SPI_MASTER_ADC_DMA_tx_handler+0x28>
  {
    while(XMC_USIC_CH_GetTransmitBufferStatus(XMC_SPI2_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
 80237e8:	bf00      	nop
 80237ea:	4807      	ldr	r0, [pc, #28]	; (8023808 <SPI_MASTER_ADC_DMA_tx_handler+0x30>)
 80237ec:	f7ff fe74 	bl	80234d8 <XMC_USIC_CH_GetTransmitBufferStatus>
 80237f0:	4603      	mov	r3, r0
 80237f2:	2b80      	cmp	r3, #128	; 0x80
 80237f4:	d0f9      	beq.n	80237ea <SPI_MASTER_ADC_DMA_tx_handler+0x12>
    SPI_MASTER_ADC.runtime->tx_busy = false;
 80237f6:	4b05      	ldr	r3, [pc, #20]	; (802380c <SPI_MASTER_ADC_DMA_tx_handler+0x34>)
 80237f8:	689b      	ldr	r3, [r3, #8]
 80237fa:	2200      	movs	r2, #0
 80237fc:	f883 2020 	strb.w	r2, [r3, #32]
  }
}
 8023800:	3708      	adds	r7, #8
 8023802:	46bd      	mov	sp, r7
 8023804:	bd80      	pop	{r7, pc}
 8023806:	bf00      	nop
 8023808:	48024000 	.word	0x48024000
 802380c:	1ffe8900 	.word	0x1ffe8900

08023810 <SPI_MASTER_ADC_DMA_rx_handler>:

/*Receive ISR*/
void SPI_MASTER_ADC_DMA_rx_handler(XMC_DMA_CH_EVENT_t event)
{
 8023810:	b580      	push	{r7, lr}
 8023812:	b082      	sub	sp, #8
 8023814:	af00      	add	r7, sp, #0
 8023816:	4603      	mov	r3, r0
 8023818:	71fb      	strb	r3, [r7, #7]
  if (event == XMC_DMA_CH_EVENT_TRANSFER_COMPLETE)
 802381a:	79fb      	ldrb	r3, [r7, #7]
 802381c:	2b01      	cmp	r3, #1
 802381e:	d112      	bne.n	8023846 <SPI_MASTER_ADC_DMA_rx_handler+0x36>
  {
    XMC_SPI_CH_DisableEvent(XMC_SPI2_CH0, (uint32_t)((uint32_t)XMC_SPI_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_SPI_CH_EVENT_ALTERNATIVE_RECEIVE));
 8023820:	480a      	ldr	r0, [pc, #40]	; (802384c <SPI_MASTER_ADC_DMA_rx_handler+0x3c>)
 8023822:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8023826:	f7fe fd2d 	bl	8022284 <XMC_SPI_CH_DisableEvent>
    SPI_MASTER_ADC.runtime->tx_data_dummy = false;
 802382a:	4b09      	ldr	r3, [pc, #36]	; (8023850 <SPI_MASTER_ADC_DMA_rx_handler+0x40>)
 802382c:	689b      	ldr	r3, [r3, #8]
 802382e:	2200      	movs	r2, #0
 8023830:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    SPI_MASTER_ADC.runtime->rx_data_dummy = true;
 8023834:	4b06      	ldr	r3, [pc, #24]	; (8023850 <SPI_MASTER_ADC_DMA_rx_handler+0x40>)
 8023836:	689b      	ldr	r3, [r3, #8]
 8023838:	2201      	movs	r2, #1
 802383a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    SPI_MASTER_ADC.runtime->rx_busy = false;
 802383e:	4b04      	ldr	r3, [pc, #16]	; (8023850 <SPI_MASTER_ADC_DMA_rx_handler+0x40>)
 8023840:	689b      	ldr	r3, [r3, #8]
 8023842:	2200      	movs	r2, #0
 8023844:	77da      	strb	r2, [r3, #31]
  }
}
 8023846:	3708      	adds	r7, #8
 8023848:	46bd      	mov	sp, r7
 802384a:	bd80      	pop	{r7, pc}
 802384c:	48024000 	.word	0x48024000
 8023850:	1ffe8900 	.word	0x1ffe8900

08023854 <SPI_MASTER_TC_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_MASTER_TC_lInit(void)
{
 8023854:	b580      	push	{r7, lr}
 8023856:	b082      	sub	sp, #8
 8023858:	af00      	add	r7, sp, #0
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
 802385a:	2300      	movs	r3, #0
 802385c:	71fb      	strb	r3, [r7, #7]
  status =  (SPI_MASTER_STATUS_t)GLOBAL_DMA_Init(&GLOBAL_DMA_1);
 802385e:	4845      	ldr	r0, [pc, #276]	; (8023974 <SPI_MASTER_TC_lInit+0x120>)
 8023860:	f000 fb0c 	bl	8023e7c <GLOBAL_DMA_Init>
 8023864:	4603      	mov	r3, r0
 8023866:	71fb      	strb	r3, [r7, #7]
  if (status == SPI_MASTER_STATUS_SUCCESS)
 8023868:	79fb      	ldrb	r3, [r7, #7]
 802386a:	2b00      	cmp	r3, #0
 802386c:	d17d      	bne.n	802396a <SPI_MASTER_TC_lInit+0x116>
  {            
                            
  (void)XMC_DMA_CH_Init(XMC_DMA0, 0U, &SPI_MASTER_TC_dma_ch_tx_config);
 802386e:	4842      	ldr	r0, [pc, #264]	; (8023978 <SPI_MASTER_TC_lInit+0x124>)
 8023870:	2100      	movs	r1, #0
 8023872:	4a42      	ldr	r2, [pc, #264]	; (802397c <SPI_MASTER_TC_lInit+0x128>)
 8023874:	f7fd fcc4 	bl	8021200 <XMC_DMA_CH_Init>
  /*"Interrupt Settings" configuration for "transmit" and/or "receive"*/
  XMC_DMA_CH_EnableEvent(XMC_DMA0, 0U, (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 8023878:	483f      	ldr	r0, [pc, #252]	; (8023978 <SPI_MASTER_TC_lInit+0x124>)
 802387a:	2100      	movs	r1, #0
 802387c:	2201      	movs	r2, #1
 802387e:	f7fd fec5 	bl	802160c <XMC_DMA_CH_EnableEvent>
  XMC_DMA_CH_SetEventHandler(XMC_DMA0, 0U, SPI_MASTER_TC_DMA_tx_handler);
 8023882:	483d      	ldr	r0, [pc, #244]	; (8023978 <SPI_MASTER_TC_lInit+0x124>)
 8023884:	2100      	movs	r1, #0
 8023886:	4a3e      	ldr	r2, [pc, #248]	; (8023980 <SPI_MASTER_TC_lInit+0x12c>)
 8023888:	f7fd ff0e 	bl	80216a8 <XMC_DMA_CH_SetEventHandler>
                             
  (void)XMC_DMA_CH_Init(XMC_DMA0, 1U, &SPI_MASTER_TC_dma_ch_rx_config);
 802388c:	483a      	ldr	r0, [pc, #232]	; (8023978 <SPI_MASTER_TC_lInit+0x124>)
 802388e:	2101      	movs	r1, #1
 8023890:	4a3c      	ldr	r2, [pc, #240]	; (8023984 <SPI_MASTER_TC_lInit+0x130>)
 8023892:	f7fd fcb5 	bl	8021200 <XMC_DMA_CH_Init>
  /*"Interrupt Settings" configuration for "transmit" and/or "receive"*/
  XMC_DMA_CH_EnableEvent(XMC_DMA0, 1U, (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 8023896:	4838      	ldr	r0, [pc, #224]	; (8023978 <SPI_MASTER_TC_lInit+0x124>)
 8023898:	2101      	movs	r1, #1
 802389a:	2201      	movs	r2, #1
 802389c:	f7fd feb6 	bl	802160c <XMC_DMA_CH_EnableEvent>
  XMC_DMA_CH_SetEventHandler(XMC_DMA0, 1U, SPI_MASTER_TC_DMA_rx_handler);
 80238a0:	4835      	ldr	r0, [pc, #212]	; (8023978 <SPI_MASTER_TC_lInit+0x124>)
 80238a2:	2101      	movs	r1, #1
 80238a4:	4a38      	ldr	r2, [pc, #224]	; (8023988 <SPI_MASTER_TC_lInit+0x134>)
 80238a6:	f7fd feff 	bl	80216a8 <XMC_DMA_CH_SetEventHandler>
                             
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI1_CH0, &SPI_MASTER_TC_Channel_Config);
 80238aa:	4838      	ldr	r0, [pc, #224]	; (802398c <SPI_MASTER_TC_lInit+0x138>)
 80238ac:	4938      	ldr	r1, [pc, #224]	; (8023990 <SPI_MASTER_TC_lInit+0x13c>)
 80238ae:	f7fe fc6b 	bl	8022188 <XMC_SPI_CH_Init>
                             
  XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI1_CH0);
 80238b2:	4836      	ldr	r0, [pc, #216]	; (802398c <SPI_MASTER_TC_lInit+0x138>)
 80238b4:	f7ff fe66 	bl	8023584 <XMC_SPI_CH_SetBitOrderMsbFirst>
          
  XMC_SPI_CH_SetWordLength(XMC_SPI1_CH0, (uint8_t)8);
 80238b8:	4834      	ldr	r0, [pc, #208]	; (802398c <SPI_MASTER_TC_lInit+0x138>)
 80238ba:	2108      	movs	r1, #8
 80238bc:	f7ff fea6 	bl	802360c <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI1_CH0, (uint8_t)32);
 80238c0:	4832      	ldr	r0, [pc, #200]	; (802398c <SPI_MASTER_TC_lInit+0x138>)
 80238c2:	2120      	movs	r1, #32
 80238c4:	f7ff feb0 	bl	8023628 <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI1_CH0,
 80238c8:	4830      	ldr	r0, [pc, #192]	; (802398c <SPI_MASTER_TC_lInit+0x138>)
 80238ca:	2100      	movs	r1, #0
 80238cc:	2200      	movs	r2, #0
 80238ce:	f7ff fe8f 	bl	80235f0 <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI1_CH0, 2U);
 80238d2:	482e      	ldr	r0, [pc, #184]	; (802398c <SPI_MASTER_TC_lInit+0x138>)
 80238d4:	2102      	movs	r1, #2
 80238d6:	f7ff fe65 	bl	80235a4 <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)4, &SPI_MASTER_TC_MISO_Config.port_config);
 80238da:	482e      	ldr	r0, [pc, #184]	; (8023994 <SPI_MASTER_TC_lInit+0x140>)
 80238dc:	2104      	movs	r1, #4
 80238de:	4a2e      	ldr	r2, [pc, #184]	; (8023998 <SPI_MASTER_TC_lInit+0x144>)
 80238e0:	f7fc fd04 	bl	80202ec <XMC_GPIO_Init>

  /* Configure the data input line selected */
  XMC_SPI_CH_SetInputSource(XMC_SPI1_CH0, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_A);
 80238e4:	4829      	ldr	r0, [pc, #164]	; (802398c <SPI_MASTER_TC_lInit+0x138>)
 80238e6:	2100      	movs	r1, #0
 80238e8:	2200      	movs	r2, #0
 80238ea:	f7ff feab 	bl	8023644 <XMC_SPI_CH_SetInputSource>
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI1_CH0);
 80238ee:	4827      	ldr	r0, [pc, #156]	; (802398c <SPI_MASTER_TC_lInit+0x138>)
 80238f0:	f7ff fe3c 	bl	802356c <XMC_SPI_CH_Start>

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)5, &SPI_MASTER_TC_MOSI_Config.port_config);
 80238f4:	4827      	ldr	r0, [pc, #156]	; (8023994 <SPI_MASTER_TC_lInit+0x140>)
 80238f6:	2105      	movs	r1, #5
 80238f8:	4a28      	ldr	r2, [pc, #160]	; (802399c <SPI_MASTER_TC_lInit+0x148>)
 80238fa:	f7fc fcf7 	bl	80202ec <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)11, &SPI_MASTER_TC_SCLKOUT_Config.port_config);
 80238fe:	4825      	ldr	r0, [pc, #148]	; (8023994 <SPI_MASTER_TC_lInit+0x140>)
 8023900:	210b      	movs	r1, #11
 8023902:	4a27      	ldr	r2, [pc, #156]	; (80239a0 <SPI_MASTER_TC_lInit+0x14c>)
 8023904:	f7fc fcf2 	bl	80202ec <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)6, &SPI_MASTER_TC_SS_0_Config.port_config);
 8023908:	4822      	ldr	r0, [pc, #136]	; (8023994 <SPI_MASTER_TC_lInit+0x140>)
 802390a:	2106      	movs	r1, #6
 802390c:	4a25      	ldr	r2, [pc, #148]	; (80239a4 <SPI_MASTER_TC_lInit+0x150>)
 802390e:	f7fc fced 	bl	80202ec <XMC_GPIO_Init>
  XMC_SPI_CH_EnableSlaveSelect(XMC_SPI1_CH0, XMC_SPI_CH_SLAVE_SELECT_0);
 8023912:	481e      	ldr	r0, [pc, #120]	; (802398c <SPI_MASTER_TC_lInit+0x138>)
 8023914:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8023918:	f7fe fc6a 	bl	80221f0 <XMC_SPI_CH_EnableSlaveSelect>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)14, &SPI_MASTER_TC_SS_1_Config.port_config);
 802391c:	481d      	ldr	r0, [pc, #116]	; (8023994 <SPI_MASTER_TC_lInit+0x140>)
 802391e:	210e      	movs	r1, #14
 8023920:	4a21      	ldr	r2, [pc, #132]	; (80239a8 <SPI_MASTER_TC_lInit+0x154>)
 8023922:	f7fc fce3 	bl	80202ec <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)15, &SPI_MASTER_TC_SS_2_Config.port_config);
 8023926:	481b      	ldr	r0, [pc, #108]	; (8023994 <SPI_MASTER_TC_lInit+0x140>)
 8023928:	210f      	movs	r1, #15
 802392a:	4a20      	ldr	r2, [pc, #128]	; (80239ac <SPI_MASTER_TC_lInit+0x158>)
 802392c:	f7fc fcde 	bl	80202ec <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)14, &SPI_MASTER_TC_SS_3_Config.port_config);
 8023930:	481f      	ldr	r0, [pc, #124]	; (80239b0 <SPI_MASTER_TC_lInit+0x15c>)
 8023932:	210e      	movs	r1, #14
 8023934:	4a1f      	ldr	r2, [pc, #124]	; (80239b4 <SPI_MASTER_TC_lInit+0x160>)
 8023936:	f7fc fcd9 	bl	80202ec <XMC_GPIO_Init>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI1_CH0,
 802393a:	4814      	ldr	r0, [pc, #80]	; (802398c <SPI_MASTER_TC_lInit+0x138>)
 802393c:	2104      	movs	r1, #4
 802393e:	2200      	movs	r2, #0
 8023940:	f7fe fd78 	bl	8022434 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER,
                                      (uint32_t)SPI_MASTER_SR_ID_0);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI1_CH0,
 8023944:	4811      	ldr	r0, [pc, #68]	; (802398c <SPI_MASTER_TC_lInit+0x138>)
 8023946:	2108      	movs	r1, #8
 8023948:	2201      	movs	r2, #1
 802394a:	f7fe fd73 	bl	8022434 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE,
                                      (uint32_t)SPI_MASTER_SR_ID_1);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI1_CH0,
 802394e:	480f      	ldr	r0, [pc, #60]	; (802398c <SPI_MASTER_TC_lInit+0x138>)
 8023950:	210c      	movs	r1, #12
 8023952:	2201      	movs	r2, #1
 8023954:	f7fe fd6e 	bl	8022434 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE,
                                      (uint32_t)SPI_MASTER_SR_ID_1);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI1_CH0,
 8023958:	480c      	ldr	r0, [pc, #48]	; (802398c <SPI_MASTER_TC_lInit+0x138>)
 802395a:	2110      	movs	r1, #16
 802395c:	2202      	movs	r2, #2
 802395e:	f7fe fd69 	bl	8022434 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_2);
            
  XMC_USIC_CH_TriggerServiceRequest(XMC_SPI1_CH0, (uint32_t)SPI_MASTER_SR_ID_0);
 8023962:	480a      	ldr	r0, [pc, #40]	; (802398c <SPI_MASTER_TC_lInit+0x138>)
 8023964:	2100      	movs	r1, #0
 8023966:	f7ff fdc7 	bl	80234f8 <XMC_USIC_CH_TriggerServiceRequest>
}            

  return status;
 802396a:	79fb      	ldrb	r3, [r7, #7]
}
 802396c:	4618      	mov	r0, r3
 802396e:	3708      	adds	r7, #8
 8023970:	46bd      	mov	sp, r7
 8023972:	bd80      	pop	{r7, pc}
 8023974:	1ffe89f0 	.word	0x1ffe89f0
 8023978:	50014000 	.word	0x50014000
 802397c:	1ffe8950 	.word	0x1ffe8950
 8023980:	080239b9 	.word	0x080239b9
 8023984:	1ffe8974 	.word	0x1ffe8974
 8023988:	080239f1 	.word	0x080239f1
 802398c:	48020000 	.word	0x48020000
 8023990:	1ffe8948 	.word	0x1ffe8948
 8023994:	48028000 	.word	0x48028000
 8023998:	1ffe8b20 	.word	0x1ffe8b20
 802399c:	1ffe8920 	.word	0x1ffe8920
 80239a0:	08029e90 	.word	0x08029e90
 80239a4:	08029eac 	.word	0x08029eac
 80239a8:	1ffe8934 	.word	0x1ffe8934
 80239ac:	08029ed0 	.word	0x08029ed0
 80239b0:	48028300 	.word	0x48028300
 80239b4:	08029eec 	.word	0x08029eec

080239b8 <SPI_MASTER_TC_DMA_tx_handler>:
/*Transmit ISR*/
void SPI_MASTER_TC_DMA_tx_handler(XMC_DMA_CH_EVENT_t event)
{
 80239b8:	b580      	push	{r7, lr}
 80239ba:	b082      	sub	sp, #8
 80239bc:	af00      	add	r7, sp, #0
 80239be:	4603      	mov	r3, r0
 80239c0:	71fb      	strb	r3, [r7, #7]
  if (event == XMC_DMA_CH_EVENT_TRANSFER_COMPLETE)
 80239c2:	79fb      	ldrb	r3, [r7, #7]
 80239c4:	2b01      	cmp	r3, #1
 80239c6:	d10b      	bne.n	80239e0 <SPI_MASTER_TC_DMA_tx_handler+0x28>
  {
    while(XMC_USIC_CH_GetTransmitBufferStatus(XMC_SPI1_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
 80239c8:	bf00      	nop
 80239ca:	4807      	ldr	r0, [pc, #28]	; (80239e8 <SPI_MASTER_TC_DMA_tx_handler+0x30>)
 80239cc:	f7ff fd84 	bl	80234d8 <XMC_USIC_CH_GetTransmitBufferStatus>
 80239d0:	4603      	mov	r3, r0
 80239d2:	2b80      	cmp	r3, #128	; 0x80
 80239d4:	d0f9      	beq.n	80239ca <SPI_MASTER_TC_DMA_tx_handler+0x12>
    SPI_MASTER_TC.runtime->tx_busy = false;
 80239d6:	4b05      	ldr	r3, [pc, #20]	; (80239ec <SPI_MASTER_TC_DMA_tx_handler+0x34>)
 80239d8:	689b      	ldr	r3, [r3, #8]
 80239da:	2200      	movs	r2, #0
 80239dc:	f883 2020 	strb.w	r2, [r3, #32]
  }
}
 80239e0:	3708      	adds	r7, #8
 80239e2:	46bd      	mov	sp, r7
 80239e4:	bd80      	pop	{r7, pc}
 80239e6:	bf00      	nop
 80239e8:	48020000 	.word	0x48020000
 80239ec:	1ffe89bc 	.word	0x1ffe89bc

080239f0 <SPI_MASTER_TC_DMA_rx_handler>:

/*Receive ISR*/
void SPI_MASTER_TC_DMA_rx_handler(XMC_DMA_CH_EVENT_t event)
{
 80239f0:	b580      	push	{r7, lr}
 80239f2:	b082      	sub	sp, #8
 80239f4:	af00      	add	r7, sp, #0
 80239f6:	4603      	mov	r3, r0
 80239f8:	71fb      	strb	r3, [r7, #7]
  if (event == XMC_DMA_CH_EVENT_TRANSFER_COMPLETE)
 80239fa:	79fb      	ldrb	r3, [r7, #7]
 80239fc:	2b01      	cmp	r3, #1
 80239fe:	d112      	bne.n	8023a26 <SPI_MASTER_TC_DMA_rx_handler+0x36>
  {
    XMC_SPI_CH_DisableEvent(XMC_SPI1_CH0, (uint32_t)((uint32_t)XMC_SPI_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_SPI_CH_EVENT_ALTERNATIVE_RECEIVE));
 8023a00:	480a      	ldr	r0, [pc, #40]	; (8023a2c <SPI_MASTER_TC_DMA_rx_handler+0x3c>)
 8023a02:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8023a06:	f7fe fc3d 	bl	8022284 <XMC_SPI_CH_DisableEvent>
    SPI_MASTER_TC.runtime->tx_data_dummy = false;
 8023a0a:	4b09      	ldr	r3, [pc, #36]	; (8023a30 <SPI_MASTER_TC_DMA_rx_handler+0x40>)
 8023a0c:	689b      	ldr	r3, [r3, #8]
 8023a0e:	2200      	movs	r2, #0
 8023a10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    SPI_MASTER_TC.runtime->rx_data_dummy = true;
 8023a14:	4b06      	ldr	r3, [pc, #24]	; (8023a30 <SPI_MASTER_TC_DMA_rx_handler+0x40>)
 8023a16:	689b      	ldr	r3, [r3, #8]
 8023a18:	2201      	movs	r2, #1
 8023a1a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    SPI_MASTER_TC.runtime->rx_busy = false;
 8023a1e:	4b04      	ldr	r3, [pc, #16]	; (8023a30 <SPI_MASTER_TC_DMA_rx_handler+0x40>)
 8023a20:	689b      	ldr	r3, [r3, #8]
 8023a22:	2200      	movs	r2, #0
 8023a24:	77da      	strb	r2, [r3, #31]
  }
}
 8023a26:	3708      	adds	r7, #8
 8023a28:	46bd      	mov	sp, r7
 8023a2a:	bd80      	pop	{r7, pc}
 8023a2c:	48020000 	.word	0x48020000
 8023a30:	1ffe89bc 	.word	0x1ffe89bc

08023a34 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8023a34:	b480      	push	{r7}
 8023a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8023a38:	4b04      	ldr	r3, [pc, #16]	; (8023a4c <NVIC_GetPriorityGrouping+0x18>)
 8023a3a:	68db      	ldr	r3, [r3, #12]
 8023a3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8023a40:	0a1b      	lsrs	r3, r3, #8
}
 8023a42:	4618      	mov	r0, r3
 8023a44:	46bd      	mov	sp, r7
 8023a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a4a:	4770      	bx	lr
 8023a4c:	e000ed00 	.word	0xe000ed00

08023a50 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8023a50:	b480      	push	{r7}
 8023a52:	b083      	sub	sp, #12
 8023a54:	af00      	add	r7, sp, #0
 8023a56:	4603      	mov	r3, r0
 8023a58:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8023a5a:	4908      	ldr	r1, [pc, #32]	; (8023a7c <NVIC_EnableIRQ+0x2c>)
 8023a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023a60:	095b      	lsrs	r3, r3, #5
 8023a62:	79fa      	ldrb	r2, [r7, #7]
 8023a64:	f002 021f 	and.w	r2, r2, #31
 8023a68:	2001      	movs	r0, #1
 8023a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8023a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8023a72:	370c      	adds	r7, #12
 8023a74:	46bd      	mov	sp, r7
 8023a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a7a:	4770      	bx	lr
 8023a7c:	e000e100 	.word	0xe000e100

08023a80 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8023a80:	b480      	push	{r7}
 8023a82:	b083      	sub	sp, #12
 8023a84:	af00      	add	r7, sp, #0
 8023a86:	4603      	mov	r3, r0
 8023a88:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8023a8a:	4909      	ldr	r1, [pc, #36]	; (8023ab0 <NVIC_ClearPendingIRQ+0x30>)
 8023a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023a90:	095b      	lsrs	r3, r3, #5
 8023a92:	79fa      	ldrb	r2, [r7, #7]
 8023a94:	f002 021f 	and.w	r2, r2, #31
 8023a98:	2001      	movs	r0, #1
 8023a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8023a9e:	3360      	adds	r3, #96	; 0x60
 8023aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8023aa4:	370c      	adds	r7, #12
 8023aa6:	46bd      	mov	sp, r7
 8023aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023aac:	4770      	bx	lr
 8023aae:	bf00      	nop
 8023ab0:	e000e100 	.word	0xe000e100

08023ab4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8023ab4:	b480      	push	{r7}
 8023ab6:	b083      	sub	sp, #12
 8023ab8:	af00      	add	r7, sp, #0
 8023aba:	4603      	mov	r3, r0
 8023abc:	6039      	str	r1, [r7, #0]
 8023abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8023ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023ac4:	2b00      	cmp	r3, #0
 8023ac6:	da0b      	bge.n	8023ae0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8023ac8:	490d      	ldr	r1, [pc, #52]	; (8023b00 <NVIC_SetPriority+0x4c>)
 8023aca:	79fb      	ldrb	r3, [r7, #7]
 8023acc:	f003 030f 	and.w	r3, r3, #15
 8023ad0:	3b04      	subs	r3, #4
 8023ad2:	683a      	ldr	r2, [r7, #0]
 8023ad4:	b2d2      	uxtb	r2, r2
 8023ad6:	0092      	lsls	r2, r2, #2
 8023ad8:	b2d2      	uxtb	r2, r2
 8023ada:	440b      	add	r3, r1
 8023adc:	761a      	strb	r2, [r3, #24]
 8023ade:	e009      	b.n	8023af4 <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8023ae0:	4908      	ldr	r1, [pc, #32]	; (8023b04 <NVIC_SetPriority+0x50>)
 8023ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023ae6:	683a      	ldr	r2, [r7, #0]
 8023ae8:	b2d2      	uxtb	r2, r2
 8023aea:	0092      	lsls	r2, r2, #2
 8023aec:	b2d2      	uxtb	r2, r2
 8023aee:	440b      	add	r3, r1
 8023af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8023af4:	370c      	adds	r7, #12
 8023af6:	46bd      	mov	sp, r7
 8023af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023afc:	4770      	bx	lr
 8023afe:	bf00      	nop
 8023b00:	e000ed00 	.word	0xe000ed00
 8023b04:	e000e100 	.word	0xe000e100

08023b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8023b08:	b480      	push	{r7}
 8023b0a:	b089      	sub	sp, #36	; 0x24
 8023b0c:	af00      	add	r7, sp, #0
 8023b0e:	60f8      	str	r0, [r7, #12]
 8023b10:	60b9      	str	r1, [r7, #8]
 8023b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8023b14:	68fb      	ldr	r3, [r7, #12]
 8023b16:	f003 0307 	and.w	r3, r3, #7
 8023b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8023b1c:	69fb      	ldr	r3, [r7, #28]
 8023b1e:	f1c3 0307 	rsb	r3, r3, #7
 8023b22:	2b06      	cmp	r3, #6
 8023b24:	bf28      	it	cs
 8023b26:	2306      	movcs	r3, #6
 8023b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8023b2a:	69fb      	ldr	r3, [r7, #28]
 8023b2c:	3306      	adds	r3, #6
 8023b2e:	2b06      	cmp	r3, #6
 8023b30:	d902      	bls.n	8023b38 <NVIC_EncodePriority+0x30>
 8023b32:	69fb      	ldr	r3, [r7, #28]
 8023b34:	3b01      	subs	r3, #1
 8023b36:	e000      	b.n	8023b3a <NVIC_EncodePriority+0x32>
 8023b38:	2300      	movs	r3, #0
 8023b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8023b3c:	69bb      	ldr	r3, [r7, #24]
 8023b3e:	2201      	movs	r2, #1
 8023b40:	fa02 f303 	lsl.w	r3, r2, r3
 8023b44:	1e5a      	subs	r2, r3, #1
 8023b46:	68bb      	ldr	r3, [r7, #8]
 8023b48:	401a      	ands	r2, r3
 8023b4a:	697b      	ldr	r3, [r7, #20]
 8023b4c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8023b4e:	697b      	ldr	r3, [r7, #20]
 8023b50:	2101      	movs	r1, #1
 8023b52:	fa01 f303 	lsl.w	r3, r1, r3
 8023b56:	1e59      	subs	r1, r3, #1
 8023b58:	687b      	ldr	r3, [r7, #4]
 8023b5a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8023b5c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8023b5e:	4618      	mov	r0, r3
 8023b60:	3724      	adds	r7, #36	; 0x24
 8023b62:	46bd      	mov	sp, r7
 8023b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b68:	4770      	bx	lr
 8023b6a:	bf00      	nop

08023b6c <PIN_INTERRUPT_Init>:
/*
 * API to initialize the PIN_INTERRUPT APP ERU Event Trigger Logic, Output Gating Unit Hardware initialization
 * and NVIC node configuration.
 */
PIN_INTERRUPT_STATUS_t PIN_INTERRUPT_Init(const PIN_INTERRUPT_t *const handle)
{
 8023b6c:	b590      	push	{r4, r7, lr}
 8023b6e:	b083      	sub	sp, #12
 8023b70:	af00      	add	r7, sp, #0
 8023b72:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_Init: PIN_INTERRUPT APP handle function pointer uninitialized", (handle != NULL));

  /* Initializes input pin characteristics */
  XMC_GPIO_Init(handle->port, handle->pin, &handle->gpio_config);
 8023b74:	687b      	ldr	r3, [r7, #4]
 8023b76:	6859      	ldr	r1, [r3, #4]
 8023b78:	687b      	ldr	r3, [r7, #4]
 8023b7a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8023b7e:	687b      	ldr	r3, [r7, #4]
 8023b80:	3308      	adds	r3, #8
 8023b82:	4608      	mov	r0, r1
 8023b84:	4611      	mov	r1, r2
 8023b86:	461a      	mov	r2, r3
 8023b88:	f7fc fbb0 	bl	80202ec <XMC_GPIO_Init>
  /* ERU Event Trigger Logic Hardware initialization based on UI */
  XMC_ERU_ETL_Init(handle->eru, handle->etl, &handle->etl_config);
 8023b8c:	687b      	ldr	r3, [r7, #4]
 8023b8e:	6819      	ldr	r1, [r3, #0]
 8023b90:	687b      	ldr	r3, [r7, #4]
 8023b92:	7fda      	ldrb	r2, [r3, #31]
 8023b94:	687b      	ldr	r3, [r7, #4]
 8023b96:	3314      	adds	r3, #20
 8023b98:	4608      	mov	r0, r1
 8023b9a:	4611      	mov	r1, r2
 8023b9c:	461a      	mov	r2, r3
 8023b9e:	f7fd feb5 	bl	802190c <XMC_ERU_ETL_Init>
  /* OGU is configured to generate event on configured trigger edge */
  XMC_ERU_OGU_SetServiceRequestMode(handle->eru, handle->ogu, XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER);
 8023ba2:	687b      	ldr	r3, [r7, #4]
 8023ba4:	681a      	ldr	r2, [r3, #0]
 8023ba6:	687b      	ldr	r3, [r7, #4]
 8023ba8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8023bac:	4610      	mov	r0, r2
 8023bae:	4619      	mov	r1, r3
 8023bb0:	2201      	movs	r2, #1
 8023bb2:	f7fd fed1 	bl	8021958 <XMC_ERU_OGU_SetServiceRequestMode>
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8023bb6:	687b      	ldr	r3, [r7, #4]
 8023bb8:	7f1c      	ldrb	r4, [r3, #28]
 8023bba:	f7ff ff3b 	bl	8023a34 <NVIC_GetPriorityGrouping>
 8023bbe:	4601      	mov	r1, r0
                    handle->irq_priority, handle->irq_subpriority));
 8023bc0:	687b      	ldr	r3, [r7, #4]
 8023bc2:	7f5b      	ldrb	r3, [r3, #29]
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8023bc4:	461a      	mov	r2, r3
                    handle->irq_priority, handle->irq_subpriority));
 8023bc6:	687b      	ldr	r3, [r7, #4]
 8023bc8:	7f9b      	ldrb	r3, [r3, #30]
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8023bca:	4608      	mov	r0, r1
 8023bcc:	4611      	mov	r1, r2
 8023bce:	461a      	mov	r2, r3
 8023bd0:	f7ff ff9a 	bl	8023b08 <NVIC_EncodePriority>
 8023bd4:	4602      	mov	r2, r0
 8023bd6:	b263      	sxtb	r3, r4
 8023bd8:	4618      	mov	r0, r3
 8023bda:	4611      	mov	r1, r2
 8023bdc:	f7ff ff6a 	bl	8023ab4 <NVIC_SetPriority>
                    handle->irq_priority, handle->irq_subpriority));
#endif
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((IRQn_Type)handle->IRQn, (XMC_SCU_IRQCTRL_t)handle->irqctrl);
#endif
  if (true == handle->enable_at_init)
 8023be0:	687b      	ldr	r3, [r7, #4]
 8023be2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8023be6:	2b00      	cmp	r3, #0
 8023be8:	d00b      	beq.n	8023c02 <PIN_INTERRUPT_Init+0x96>
  {
    /* Clear pending interrupt before enabling it */
    NVIC_ClearPendingIRQ((IRQn_Type)handle->IRQn);
 8023bea:	687b      	ldr	r3, [r7, #4]
 8023bec:	7f1b      	ldrb	r3, [r3, #28]
 8023bee:	b25b      	sxtb	r3, r3
 8023bf0:	4618      	mov	r0, r3
 8023bf2:	f7ff ff45 	bl	8023a80 <NVIC_ClearPendingIRQ>
    /* Enable NVIC node */
    NVIC_EnableIRQ((IRQn_Type)handle->IRQn);
 8023bf6:	687b      	ldr	r3, [r7, #4]
 8023bf8:	7f1b      	ldrb	r3, [r3, #28]
 8023bfa:	b25b      	sxtb	r3, r3
 8023bfc:	4618      	mov	r0, r3
 8023bfe:	f7ff ff27 	bl	8023a50 <NVIC_EnableIRQ>
  }
  return (PIN_INTERRUPT_STATUS_SUCCESS);
 8023c02:	2300      	movs	r3, #0
}
 8023c04:	4618      	mov	r0, r3
 8023c06:	370c      	adds	r7, #12
 8023c08:	46bd      	mov	sp, r7
 8023c0a:	bd90      	pop	{r4, r7, pc}

08023c0c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8023c0c:	b480      	push	{r7}
 8023c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8023c10:	4b04      	ldr	r3, [pc, #16]	; (8023c24 <NVIC_GetPriorityGrouping+0x18>)
 8023c12:	68db      	ldr	r3, [r3, #12]
 8023c14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8023c18:	0a1b      	lsrs	r3, r3, #8
}
 8023c1a:	4618      	mov	r0, r3
 8023c1c:	46bd      	mov	sp, r7
 8023c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c22:	4770      	bx	lr
 8023c24:	e000ed00 	.word	0xe000ed00

08023c28 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8023c28:	b480      	push	{r7}
 8023c2a:	b083      	sub	sp, #12
 8023c2c:	af00      	add	r7, sp, #0
 8023c2e:	4603      	mov	r3, r0
 8023c30:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8023c32:	4908      	ldr	r1, [pc, #32]	; (8023c54 <NVIC_EnableIRQ+0x2c>)
 8023c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023c38:	095b      	lsrs	r3, r3, #5
 8023c3a:	79fa      	ldrb	r2, [r7, #7]
 8023c3c:	f002 021f 	and.w	r2, r2, #31
 8023c40:	2001      	movs	r0, #1
 8023c42:	fa00 f202 	lsl.w	r2, r0, r2
 8023c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8023c4a:	370c      	adds	r7, #12
 8023c4c:	46bd      	mov	sp, r7
 8023c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c52:	4770      	bx	lr
 8023c54:	e000e100 	.word	0xe000e100

08023c58 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8023c58:	b480      	push	{r7}
 8023c5a:	b083      	sub	sp, #12
 8023c5c:	af00      	add	r7, sp, #0
 8023c5e:	4603      	mov	r3, r0
 8023c60:	6039      	str	r1, [r7, #0]
 8023c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8023c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023c68:	2b00      	cmp	r3, #0
 8023c6a:	da0b      	bge.n	8023c84 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8023c6c:	490d      	ldr	r1, [pc, #52]	; (8023ca4 <NVIC_SetPriority+0x4c>)
 8023c6e:	79fb      	ldrb	r3, [r7, #7]
 8023c70:	f003 030f 	and.w	r3, r3, #15
 8023c74:	3b04      	subs	r3, #4
 8023c76:	683a      	ldr	r2, [r7, #0]
 8023c78:	b2d2      	uxtb	r2, r2
 8023c7a:	0092      	lsls	r2, r2, #2
 8023c7c:	b2d2      	uxtb	r2, r2
 8023c7e:	440b      	add	r3, r1
 8023c80:	761a      	strb	r2, [r3, #24]
 8023c82:	e009      	b.n	8023c98 <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8023c84:	4908      	ldr	r1, [pc, #32]	; (8023ca8 <NVIC_SetPriority+0x50>)
 8023c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023c8a:	683a      	ldr	r2, [r7, #0]
 8023c8c:	b2d2      	uxtb	r2, r2
 8023c8e:	0092      	lsls	r2, r2, #2
 8023c90:	b2d2      	uxtb	r2, r2
 8023c92:	440b      	add	r3, r1
 8023c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8023c98:	370c      	adds	r7, #12
 8023c9a:	46bd      	mov	sp, r7
 8023c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ca0:	4770      	bx	lr
 8023ca2:	bf00      	nop
 8023ca4:	e000ed00 	.word	0xe000ed00
 8023ca8:	e000e100 	.word	0xe000e100

08023cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8023cac:	b480      	push	{r7}
 8023cae:	b089      	sub	sp, #36	; 0x24
 8023cb0:	af00      	add	r7, sp, #0
 8023cb2:	60f8      	str	r0, [r7, #12]
 8023cb4:	60b9      	str	r1, [r7, #8]
 8023cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8023cb8:	68fb      	ldr	r3, [r7, #12]
 8023cba:	f003 0307 	and.w	r3, r3, #7
 8023cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8023cc0:	69fb      	ldr	r3, [r7, #28]
 8023cc2:	f1c3 0307 	rsb	r3, r3, #7
 8023cc6:	2b06      	cmp	r3, #6
 8023cc8:	bf28      	it	cs
 8023cca:	2306      	movcs	r3, #6
 8023ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8023cce:	69fb      	ldr	r3, [r7, #28]
 8023cd0:	3306      	adds	r3, #6
 8023cd2:	2b06      	cmp	r3, #6
 8023cd4:	d902      	bls.n	8023cdc <NVIC_EncodePriority+0x30>
 8023cd6:	69fb      	ldr	r3, [r7, #28]
 8023cd8:	3b01      	subs	r3, #1
 8023cda:	e000      	b.n	8023cde <NVIC_EncodePriority+0x32>
 8023cdc:	2300      	movs	r3, #0
 8023cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8023ce0:	69bb      	ldr	r3, [r7, #24]
 8023ce2:	2201      	movs	r2, #1
 8023ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8023ce8:	1e5a      	subs	r2, r3, #1
 8023cea:	68bb      	ldr	r3, [r7, #8]
 8023cec:	401a      	ands	r2, r3
 8023cee:	697b      	ldr	r3, [r7, #20]
 8023cf0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8023cf2:	697b      	ldr	r3, [r7, #20]
 8023cf4:	2101      	movs	r1, #1
 8023cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8023cfa:	1e59      	subs	r1, r3, #1
 8023cfc:	687b      	ldr	r3, [r7, #4]
 8023cfe:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8023d00:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8023d02:	4618      	mov	r0, r3
 8023d04:	3724      	adds	r7, #36	; 0x24
 8023d06:	46bd      	mov	sp, r7
 8023d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d0c:	4770      	bx	lr
 8023d0e:	bf00      	nop

08023d10 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8023d10:	b580      	push	{r7, lr}
 8023d12:	b082      	sub	sp, #8
 8023d14:	af00      	add	r7, sp, #0
 8023d16:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8023d18:	687b      	ldr	r3, [r7, #4]
 8023d1a:	781b      	ldrb	r3, [r3, #0]
 8023d1c:	b25b      	sxtb	r3, r3
 8023d1e:	4618      	mov	r0, r3
 8023d20:	f7ff ff82 	bl	8023c28 <NVIC_EnableIRQ>
}
 8023d24:	3708      	adds	r7, #8
 8023d26:	46bd      	mov	sp, r7
 8023d28:	bd80      	pop	{r7, pc}
 8023d2a:	bf00      	nop

08023d2c <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8023d2c:	b590      	push	{r4, r7, lr}
 8023d2e:	b083      	sub	sp, #12
 8023d30:	af00      	add	r7, sp, #0
 8023d32:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8023d34:	687b      	ldr	r3, [r7, #4]
 8023d36:	781c      	ldrb	r4, [r3, #0]
 8023d38:	f7ff ff68 	bl	8023c0c <NVIC_GetPriorityGrouping>
 8023d3c:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8023d3e:	687b      	ldr	r3, [r7, #4]
 8023d40:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8023d42:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8023d44:	687b      	ldr	r3, [r7, #4]
 8023d46:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8023d48:	4608      	mov	r0, r1
 8023d4a:	4611      	mov	r1, r2
 8023d4c:	461a      	mov	r2, r3
 8023d4e:	f7ff ffad 	bl	8023cac <NVIC_EncodePriority>
 8023d52:	4602      	mov	r2, r0
 8023d54:	b263      	sxtb	r3, r4
 8023d56:	4618      	mov	r0, r3
 8023d58:	4611      	mov	r1, r2
 8023d5a:	f7ff ff7d 	bl	8023c58 <NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8023d5e:	687b      	ldr	r3, [r7, #4]
 8023d60:	78db      	ldrb	r3, [r3, #3]
 8023d62:	2b00      	cmp	r3, #0
 8023d64:	d002      	beq.n	8023d6c <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8023d66:	6878      	ldr	r0, [r7, #4]
 8023d68:	f7ff ffd2 	bl	8023d10 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8023d6c:	2300      	movs	r3, #0
}
 8023d6e:	4618      	mov	r0, r3
 8023d70:	370c      	adds	r7, #12
 8023d72:	46bd      	mov	sp, r7
 8023d74:	bd90      	pop	{r4, r7, pc}
 8023d76:	bf00      	nop

08023d78 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8023d78:	b480      	push	{r7}
 8023d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8023d7c:	4b04      	ldr	r3, [pc, #16]	; (8023d90 <NVIC_GetPriorityGrouping+0x18>)
 8023d7e:	68db      	ldr	r3, [r3, #12]
 8023d80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8023d84:	0a1b      	lsrs	r3, r3, #8
}
 8023d86:	4618      	mov	r0, r3
 8023d88:	46bd      	mov	sp, r7
 8023d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d8e:	4770      	bx	lr
 8023d90:	e000ed00 	.word	0xe000ed00

08023d94 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8023d94:	b480      	push	{r7}
 8023d96:	b083      	sub	sp, #12
 8023d98:	af00      	add	r7, sp, #0
 8023d9a:	4603      	mov	r3, r0
 8023d9c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8023d9e:	4908      	ldr	r1, [pc, #32]	; (8023dc0 <NVIC_EnableIRQ+0x2c>)
 8023da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023da4:	095b      	lsrs	r3, r3, #5
 8023da6:	79fa      	ldrb	r2, [r7, #7]
 8023da8:	f002 021f 	and.w	r2, r2, #31
 8023dac:	2001      	movs	r0, #1
 8023dae:	fa00 f202 	lsl.w	r2, r0, r2
 8023db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8023db6:	370c      	adds	r7, #12
 8023db8:	46bd      	mov	sp, r7
 8023dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023dbe:	4770      	bx	lr
 8023dc0:	e000e100 	.word	0xe000e100

08023dc4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8023dc4:	b480      	push	{r7}
 8023dc6:	b083      	sub	sp, #12
 8023dc8:	af00      	add	r7, sp, #0
 8023dca:	4603      	mov	r3, r0
 8023dcc:	6039      	str	r1, [r7, #0]
 8023dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8023dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023dd4:	2b00      	cmp	r3, #0
 8023dd6:	da0b      	bge.n	8023df0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8023dd8:	490d      	ldr	r1, [pc, #52]	; (8023e10 <NVIC_SetPriority+0x4c>)
 8023dda:	79fb      	ldrb	r3, [r7, #7]
 8023ddc:	f003 030f 	and.w	r3, r3, #15
 8023de0:	3b04      	subs	r3, #4
 8023de2:	683a      	ldr	r2, [r7, #0]
 8023de4:	b2d2      	uxtb	r2, r2
 8023de6:	0092      	lsls	r2, r2, #2
 8023de8:	b2d2      	uxtb	r2, r2
 8023dea:	440b      	add	r3, r1
 8023dec:	761a      	strb	r2, [r3, #24]
 8023dee:	e009      	b.n	8023e04 <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8023df0:	4908      	ldr	r1, [pc, #32]	; (8023e14 <NVIC_SetPriority+0x50>)
 8023df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023df6:	683a      	ldr	r2, [r7, #0]
 8023df8:	b2d2      	uxtb	r2, r2
 8023dfa:	0092      	lsls	r2, r2, #2
 8023dfc:	b2d2      	uxtb	r2, r2
 8023dfe:	440b      	add	r3, r1
 8023e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8023e04:	370c      	adds	r7, #12
 8023e06:	46bd      	mov	sp, r7
 8023e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e0c:	4770      	bx	lr
 8023e0e:	bf00      	nop
 8023e10:	e000ed00 	.word	0xe000ed00
 8023e14:	e000e100 	.word	0xe000e100

08023e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8023e18:	b480      	push	{r7}
 8023e1a:	b089      	sub	sp, #36	; 0x24
 8023e1c:	af00      	add	r7, sp, #0
 8023e1e:	60f8      	str	r0, [r7, #12]
 8023e20:	60b9      	str	r1, [r7, #8]
 8023e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8023e24:	68fb      	ldr	r3, [r7, #12]
 8023e26:	f003 0307 	and.w	r3, r3, #7
 8023e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8023e2c:	69fb      	ldr	r3, [r7, #28]
 8023e2e:	f1c3 0307 	rsb	r3, r3, #7
 8023e32:	2b06      	cmp	r3, #6
 8023e34:	bf28      	it	cs
 8023e36:	2306      	movcs	r3, #6
 8023e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8023e3a:	69fb      	ldr	r3, [r7, #28]
 8023e3c:	3306      	adds	r3, #6
 8023e3e:	2b06      	cmp	r3, #6
 8023e40:	d902      	bls.n	8023e48 <NVIC_EncodePriority+0x30>
 8023e42:	69fb      	ldr	r3, [r7, #28]
 8023e44:	3b01      	subs	r3, #1
 8023e46:	e000      	b.n	8023e4a <NVIC_EncodePriority+0x32>
 8023e48:	2300      	movs	r3, #0
 8023e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8023e4c:	69bb      	ldr	r3, [r7, #24]
 8023e4e:	2201      	movs	r2, #1
 8023e50:	fa02 f303 	lsl.w	r3, r2, r3
 8023e54:	1e5a      	subs	r2, r3, #1
 8023e56:	68bb      	ldr	r3, [r7, #8]
 8023e58:	401a      	ands	r2, r3
 8023e5a:	697b      	ldr	r3, [r7, #20]
 8023e5c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8023e5e:	697b      	ldr	r3, [r7, #20]
 8023e60:	2101      	movs	r1, #1
 8023e62:	fa01 f303 	lsl.w	r3, r1, r3
 8023e66:	1e59      	subs	r1, r3, #1
 8023e68:	687b      	ldr	r3, [r7, #4]
 8023e6a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8023e6c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8023e6e:	4618      	mov	r0, r3
 8023e70:	3724      	adds	r7, #36	; 0x24
 8023e72:	46bd      	mov	sp, r7
 8023e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e78:	4770      	bx	lr
 8023e7a:	bf00      	nop

08023e7c <GLOBAL_DMA_Init>:
  return version;
}

/* GLOBAL_DMA initialization function */
GLOBAL_DMA_STATUS_t GLOBAL_DMA_Init(GLOBAL_DMA_t *const obj)
{
 8023e7c:	b590      	push	{r4, r7, lr}
 8023e7e:	b083      	sub	sp, #12
 8023e80:	af00      	add	r7, sp, #0
 8023e82:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DMA_GLOBAL_Init: NULL DMA_GLOBAL_t object", (obj != NULL));

  if (obj->initialized == false)
 8023e84:	687b      	ldr	r3, [r7, #4]
 8023e86:	7a1b      	ldrb	r3, [r3, #8]
 8023e88:	f083 0301 	eor.w	r3, r3, #1
 8023e8c:	b2db      	uxtb	r3, r3
 8023e8e:	2b00      	cmp	r3, #0
 8023e90:	d024      	beq.n	8023edc <GLOBAL_DMA_Init+0x60>
  {
    /* Enable DMA module */
    XMC_DMA_Init(obj->dma);
 8023e92:	687b      	ldr	r3, [r7, #4]
 8023e94:	681b      	ldr	r3, [r3, #0]
 8023e96:	4618      	mov	r0, r3
 8023e98:	f7fd f8ae 	bl	8020ff8 <XMC_DMA_Init>

    /* Enable DMA event handling */
    NVIC_SetPriority(obj->irq_node, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8023e9c:	687b      	ldr	r3, [r7, #4]
 8023e9e:	7a5c      	ldrb	r4, [r3, #9]
 8023ea0:	f7ff ff6a 	bl	8023d78 <NVIC_GetPriorityGrouping>
 8023ea4:	4601      	mov	r1, r0
                                                        obj->config->priority,
 8023ea6:	687b      	ldr	r3, [r7, #4]
 8023ea8:	685b      	ldr	r3, [r3, #4]
 8023eaa:	781b      	ldrb	r3, [r3, #0]
  {
    /* Enable DMA module */
    XMC_DMA_Init(obj->dma);

    /* Enable DMA event handling */
    NVIC_SetPriority(obj->irq_node, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8023eac:	461a      	mov	r2, r3
                                                        obj->config->priority,
                                                        obj->config->sub_priority));
 8023eae:	687b      	ldr	r3, [r7, #4]
 8023eb0:	685b      	ldr	r3, [r3, #4]
 8023eb2:	785b      	ldrb	r3, [r3, #1]
  {
    /* Enable DMA module */
    XMC_DMA_Init(obj->dma);

    /* Enable DMA event handling */
    NVIC_SetPriority(obj->irq_node, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8023eb4:	4608      	mov	r0, r1
 8023eb6:	4611      	mov	r1, r2
 8023eb8:	461a      	mov	r2, r3
 8023eba:	f7ff ffad 	bl	8023e18 <NVIC_EncodePriority>
 8023ebe:	4602      	mov	r2, r0
 8023ec0:	b263      	sxtb	r3, r4
 8023ec2:	4618      	mov	r0, r3
 8023ec4:	4611      	mov	r1, r2
 8023ec6:	f7ff ff7d 	bl	8023dc4 <NVIC_SetPriority>
                                                        obj->config->priority,
                                                        obj->config->sub_priority));
    NVIC_EnableIRQ(obj->irq_node);
 8023eca:	687b      	ldr	r3, [r7, #4]
 8023ecc:	7a5b      	ldrb	r3, [r3, #9]
 8023ece:	b25b      	sxtb	r3, r3
 8023ed0:	4618      	mov	r0, r3
 8023ed2:	f7ff ff5f 	bl	8023d94 <NVIC_EnableIRQ>
    obj->initialized = true;
 8023ed6:	687b      	ldr	r3, [r7, #4]
 8023ed8:	2201      	movs	r2, #1
 8023eda:	721a      	strb	r2, [r3, #8]
  }

  return GLOBAL_DMA_STATUS_SUCCESS;
 8023edc:	2300      	movs	r3, #0
}
 8023ede:	4618      	mov	r0, r3
 8023ee0:	370c      	adds	r7, #12
 8023ee2:	46bd      	mov	sp, r7
 8023ee4:	bd90      	pop	{r4, r7, pc}
 8023ee6:	bf00      	nop

08023ee8 <GPDMA0_0_IRQHandler>:
  .initialized = (bool)0U, /* Is DMA initialized yet? */
  .irq_node = (IRQn_Type)105U /* Allotted DMA IRQ node */
};

void GPDMA0_0_IRQHandler(void)
{
 8023ee8:	b580      	push	{r7, lr}
 8023eea:	af00      	add	r7, sp, #0
  XMC_DMA_IRQHandler(XMC_DMA0);
 8023eec:	4801      	ldr	r0, [pc, #4]	; (8023ef4 <GPDMA0_0_IRQHandler+0xc>)
 8023eee:	f7fd fbfd 	bl	80216ec <XMC_DMA_IRQHandler>
}
 8023ef2:	bd80      	pop	{r7, pc}
 8023ef4:	50014000 	.word	0x50014000

08023ef8 <GPDMA1_0_IRQHandler>:

#ifdef XMC_DMA1
void GPDMA1_0_IRQHandler(void)
{
 8023ef8:	b580      	push	{r7, lr}
 8023efa:	af00      	add	r7, sp, #0
  XMC_DMA_IRQHandler(XMC_DMA1);
 8023efc:	4801      	ldr	r0, [pc, #4]	; (8023f04 <GPDMA1_0_IRQHandler+0xc>)
 8023efe:	f7fd fbf5 	bl	80216ec <XMC_DMA_IRQHandler>
}
 8023f02:	bd80      	pop	{r7, pc}
 8023f04:	50018000 	.word	0x50018000

08023f08 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8023f08:	b480      	push	{r7}
 8023f0a:	b083      	sub	sp, #12
 8023f0c:	af00      	add	r7, sp, #0
 8023f0e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8023f10:	687b      	ldr	r3, [r7, #4]
 8023f12:	68db      	ldr	r3, [r3, #12]
 8023f14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8023f18:	687b      	ldr	r3, [r7, #4]
 8023f1a:	60da      	str	r2, [r3, #12]
}
 8023f1c:	370c      	adds	r7, #12
 8023f1e:	46bd      	mov	sp, r7
 8023f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f24:	4770      	bx	lr
 8023f26:	bf00      	nop

08023f28 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8023f28:	b580      	push	{r7, lr}
 8023f2a:	b082      	sub	sp, #8
 8023f2c:	af00      	add	r7, sp, #0
 8023f2e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8023f30:	687b      	ldr	r3, [r7, #4]
 8023f32:	7b5b      	ldrb	r3, [r3, #13]
 8023f34:	f083 0301 	eor.w	r3, r3, #1
 8023f38:	b2db      	uxtb	r3, r3
 8023f3a:	2b00      	cmp	r3, #0
 8023f3c:	d00f      	beq.n	8023f5e <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8023f3e:	687b      	ldr	r3, [r7, #4]
 8023f40:	689a      	ldr	r2, [r3, #8]
 8023f42:	687b      	ldr	r3, [r7, #4]
 8023f44:	7b1b      	ldrb	r3, [r3, #12]
 8023f46:	4610      	mov	r0, r2
 8023f48:	4619      	mov	r1, r3
 8023f4a:	f7fc ff55 	bl	8020df8 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8023f4e:	687b      	ldr	r3, [r7, #4]
 8023f50:	689b      	ldr	r3, [r3, #8]
 8023f52:	4618      	mov	r0, r3
 8023f54:	f7ff ffd8 	bl	8023f08 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8023f58:	687b      	ldr	r3, [r7, #4]
 8023f5a:	2201      	movs	r2, #1
 8023f5c:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8023f5e:	2300      	movs	r3, #0
}
 8023f60:	4618      	mov	r0, r3
 8023f62:	3708      	adds	r7, #8
 8023f64:	46bd      	mov	sp, r7
 8023f66:	bd80      	pop	{r7, pc}

08023f68 <XMC_FLASH_SetMargin>:
 *
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_FLASH_SetMargin(const XMC_FLASH_MARGIN_t margin)
{
 8023f68:	b480      	push	{r7}
 8023f6a:	b083      	sub	sp, #12
 8023f6c:	af00      	add	r7, sp, #0
 8023f6e:	4603      	mov	r3, r0
 8023f70:	71fb      	strb	r3, [r7, #7]
  FLASH0->MARP = (FLASH0->MARP & (uint32_t)~FLASH_MARP_MARGIN_Msk) | margin;
 8023f72:	4909      	ldr	r1, [pc, #36]	; (8023f98 <XMC_FLASH_SetMargin+0x30>)
 8023f74:	4b08      	ldr	r3, [pc, #32]	; (8023f98 <XMC_FLASH_SetMargin+0x30>)
 8023f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023f7a:	3318      	adds	r3, #24
 8023f7c:	681b      	ldr	r3, [r3, #0]
 8023f7e:	f023 020f 	bic.w	r2, r3, #15
 8023f82:	79fb      	ldrb	r3, [r7, #7]
 8023f84:	431a      	orrs	r2, r3
 8023f86:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8023f8a:	3318      	adds	r3, #24
 8023f8c:	601a      	str	r2, [r3, #0]
}
 8023f8e:	370c      	adds	r7, #12
 8023f90:	46bd      	mov	sp, r7
 8023f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f96:	4770      	bx	lr
 8023f98:	58001000 	.word	0x58001000

08023f9c <XMC_FLASH_EnableDoubleBitErrorTrap>:
 *
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_FLASH_EnableDoubleBitErrorTrap(void)
{
 8023f9c:	b480      	push	{r7}
 8023f9e:	af00      	add	r7, sp, #0
  FLASH0->MARP &= (uint32_t)~FLASH_MARP_TRAPDIS_Msk;
 8023fa0:	4907      	ldr	r1, [pc, #28]	; (8023fc0 <XMC_FLASH_EnableDoubleBitErrorTrap+0x24>)
 8023fa2:	4b07      	ldr	r3, [pc, #28]	; (8023fc0 <XMC_FLASH_EnableDoubleBitErrorTrap+0x24>)
 8023fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023fa8:	3318      	adds	r3, #24
 8023faa:	681b      	ldr	r3, [r3, #0]
 8023fac:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8023fb0:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8023fb4:	3318      	adds	r3, #24
 8023fb6:	601a      	str	r2, [r3, #0]
}
 8023fb8:	46bd      	mov	sp, r7
 8023fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fbe:	4770      	bx	lr
 8023fc0:	58001000 	.word	0x58001000

08023fc4 <XMC_FLASH_DisableDoubleBitErrorTrap>:
 *
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_FLASH_DisableDoubleBitErrorTrap(void)
{
 8023fc4:	b480      	push	{r7}
 8023fc6:	af00      	add	r7, sp, #0
  FLASH0->MARP |= FLASH_MARP_TRAPDIS_Msk;
 8023fc8:	4907      	ldr	r1, [pc, #28]	; (8023fe8 <XMC_FLASH_DisableDoubleBitErrorTrap+0x24>)
 8023fca:	4b07      	ldr	r3, [pc, #28]	; (8023fe8 <XMC_FLASH_DisableDoubleBitErrorTrap+0x24>)
 8023fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023fd0:	3318      	adds	r3, #24
 8023fd2:	681b      	ldr	r3, [r3, #0]
 8023fd4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8023fd8:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8023fdc:	3318      	adds	r3, #24
 8023fde:	601a      	str	r2, [r3, #0]
}
 8023fe0:	46bd      	mov	sp, r7
 8023fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fe6:	4770      	bx	lr
 8023fe8:	58001000 	.word	0x58001000

08023fec <XMC_FCE_InitializeSeedValue>:
 *
 * \par
 * The function sets the initial CRC (seed) value in the CRC register.
 */
__STATIC_INLINE void XMC_FCE_InitializeSeedValue(const XMC_FCE_t *const engine, uint32_t seedvalue)
{
 8023fec:	b480      	push	{r7}
 8023fee:	b083      	sub	sp, #12
 8023ff0:	af00      	add	r7, sp, #0
 8023ff2:	6078      	str	r0, [r7, #4]
 8023ff4:	6039      	str	r1, [r7, #0]
  engine->kernel_ptr->CRC = seedvalue;
 8023ff6:	687b      	ldr	r3, [r7, #4]
 8023ff8:	681b      	ldr	r3, [r3, #0]
 8023ffa:	683a      	ldr	r2, [r7, #0]
 8023ffc:	619a      	str	r2, [r3, #24]
}
 8023ffe:	370c      	adds	r7, #12
 8024000:	46bd      	mov	sp, r7
 8024002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024006:	4770      	bx	lr

08024008 <E_EEPROM_XMC4_Init>:

  return (version);
}

E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_Init(E_EEPROM_XMC4_t *const handle)
{
 8024008:	b580      	push	{r7, lr}
 802400a:	b084      	sub	sp, #16
 802400c:	af00      	add	r7, sp, #0
 802400e:	6078      	str	r0, [r7, #4]
  uint32_t sector_count;
  E_EEPROM_XMC4_STATUS_t status ;

  XMC_ASSERT("E_EEPROM_XMC4_Init:Invalid handle Pointer", (handle != NULL));

  status = E_EEPROM_XMC4_STATUS_OK;
 8024010:	2300      	movs	r3, #0
 8024012:	72fb      	strb	r3, [r7, #11]
  
  if (handle->initialized == (bool)false)
 8024014:	687b      	ldr	r3, [r7, #4]
 8024016:	781b      	ldrb	r3, [r3, #0]
 8024018:	f083 0301 	eor.w	r3, r3, #1
 802401c:	b2db      	uxtb	r3, r3
 802401e:	2b00      	cmp	r3, #0
 8024020:	d04c      	beq.n	80240bc <E_EEPROM_XMC4_Init+0xb4>
  {
    e_eeprom_xmc4_data_buffer.block_cycle_count = 0U;
 8024022:	4b29      	ldr	r3, [pc, #164]	; (80240c8 <E_EEPROM_XMC4_Init+0xc0>)
 8024024:	2200      	movs	r2, #0
 8024026:	605a      	str	r2, [r3, #4]
    e_eeprom_xmc4_sector_info.flash_data_addr = E_EEPROM_XMC4_EMPTY;
 8024028:	4b28      	ldr	r3, [pc, #160]	; (80240cc <E_EEPROM_XMC4_Init+0xc4>)
 802402a:	2200      	movs	r2, #0
 802402c:	605a      	str	r2, [r3, #4]
  
    XMC_FLASH_SetMargin(XMC_FLASH_MARGIN_TIGHT0);
 802402e:	2001      	movs	r0, #1
 8024030:	f7ff ff9a 	bl	8023f68 <XMC_FLASH_SetMargin>
    XMC_FLASH_DisableDoubleBitErrorTrap();
 8024034:	f7ff ffc6 	bl	8023fc4 <XMC_FLASH_DisableDoubleBitErrorTrap>
  
    XMC_FCE_Enable();
 8024038:	f7fe f83e 	bl	80220b8 <XMC_FCE_Enable>

    /* Initialize FCE module for Hardware calculations */
    (void)XMC_FCE_Init(&e_eeprom_xmc4_fce);
 802403c:	4824      	ldr	r0, [pc, #144]	; (80240d0 <E_EEPROM_XMC4_Init+0xc8>)
 802403e:	f7fe f825 	bl	802208c <XMC_FCE_Init>
  
    /* Iterate all 4 sectors to find out which is the active sector having the latest data block*/
    for (sector_count = 0U; sector_count < E_EEPROM_XMC4_MAX_SECTORS ; sector_count++)
 8024042:	2300      	movs	r3, #0
 8024044:	60fb      	str	r3, [r7, #12]
 8024046:	e005      	b.n	8024054 <E_EEPROM_XMC4_Init+0x4c>
    {
      E_EEPROM_XMC4_lInitReadSectorInfo(sector_count);
 8024048:	68f8      	ldr	r0, [r7, #12]
 802404a:	f000 f943 	bl	80242d4 <E_EEPROM_XMC4_lInitReadSectorInfo>

    /* Initialize FCE module for Hardware calculations */
    (void)XMC_FCE_Init(&e_eeprom_xmc4_fce);
  
    /* Iterate all 4 sectors to find out which is the active sector having the latest data block*/
    for (sector_count = 0U; sector_count < E_EEPROM_XMC4_MAX_SECTORS ; sector_count++)
 802404e:	68fb      	ldr	r3, [r7, #12]
 8024050:	3301      	adds	r3, #1
 8024052:	60fb      	str	r3, [r7, #12]
 8024054:	68fb      	ldr	r3, [r7, #12]
 8024056:	2b03      	cmp	r3, #3
 8024058:	d9f6      	bls.n	8024048 <E_EEPROM_XMC4_Init+0x40>
    {
      E_EEPROM_XMC4_lInitReadSectorInfo(sector_count);
    }  
  
    XMC_FLASH_SetMargin(XMC_FLASH_MARGIN_DEFAULT);
 802405a:	2000      	movs	r0, #0
 802405c:	f7ff ff84 	bl	8023f68 <XMC_FLASH_SetMargin>
  
    /* Implement the OVER ERASE CHECK code here and return the status*/
  
    /* If Read was successful*/
    if (status == E_EEPROM_XMC4_STATUS_OK)
 8024060:	7afb      	ldrb	r3, [r7, #11]
 8024062:	2b00      	cmp	r3, #0
 8024064:	d125      	bne.n	80240b2 <E_EEPROM_XMC4_Init+0xaa>
    {
      /* Execute erase state machine to free up the unwanted sectors and keep
       * only the sector which has latest valid block. If no valid block found then all sectors are emptied.
       */
      status = E_EEPROM_XMC4_lInitEraseStateMachine();
 8024066:	f000 f98b 	bl	8024380 <E_EEPROM_XMC4_lInitEraseStateMachine>
 802406a:	4603      	mov	r3, r0
 802406c:	72fb      	strb	r3, [r7, #11]
  
      /* If erase operations were successful, continue block data updates to RAM buffer */
      if (status == E_EEPROM_XMC4_STATUS_OK)
 802406e:	7afb      	ldrb	r3, [r7, #11]
 8024070:	2b00      	cmp	r3, #0
 8024072:	d11e      	bne.n	80240b2 <E_EEPROM_XMC4_Init+0xaa>
      {
  
        /* If a valid latest block were not detected, we shall assume that all sectors may be empty.
         * Then make Sector-0 as current sector and next free address as Sector0 start address
         */
        if (e_eeprom_xmc4_sector_info.flash_data_addr == E_EEPROM_XMC4_EMPTY)
 8024074:	4b15      	ldr	r3, [pc, #84]	; (80240cc <E_EEPROM_XMC4_Init+0xc4>)
 8024076:	685b      	ldr	r3, [r3, #4]
 8024078:	2b00      	cmp	r3, #0
 802407a:	d106      	bne.n	802408a <E_EEPROM_XMC4_Init+0x82>
        {
          e_eeprom_xmc4_sector_info.current_sector = E_EEPROM_XMC4_SECTOR_0;
 802407c:	4b13      	ldr	r3, [pc, #76]	; (80240cc <E_EEPROM_XMC4_Init+0xc4>)
 802407e:	2200      	movs	r2, #0
 8024080:	609a      	str	r2, [r3, #8]
          e_eeprom_xmc4_sector_info.next_free_start_addr =  E_EEPROM_XMC4_SECTOR0_START_ADDR;
 8024082:	4b12      	ldr	r3, [pc, #72]	; (80240cc <E_EEPROM_XMC4_Init+0xc4>)
 8024084:	4a13      	ldr	r2, [pc, #76]	; (80240d4 <E_EEPROM_XMC4_Init+0xcc>)
 8024086:	601a      	str	r2, [r3, #0]
 8024088:	e013      	b.n	80240b2 <E_EEPROM_XMC4_Init+0xaa>
        }
        else
        {
          /* If a valid latest block was detected, copy the valid block from flash to RAM. */
          E_EEPROM_XMC4_lCopyFlashToRam();
 802408a:	f000 f9d1 	bl	8024430 <E_EEPROM_XMC4_lCopyFlashToRam>
  
          if ((e_eeprom_xmc4_sector_info.next_free_start_addr - e_eeprom_xmc4_sector_info.flash_data_addr) !=
 802408e:	4b0f      	ldr	r3, [pc, #60]	; (80240cc <E_EEPROM_XMC4_Init+0xc4>)
 8024090:	681a      	ldr	r2, [r3, #0]
 8024092:	4b0e      	ldr	r3, [pc, #56]	; (80240cc <E_EEPROM_XMC4_Init+0xc4>)
 8024094:	685b      	ldr	r3, [r3, #4]
 8024096:	1ad3      	subs	r3, r2, r3
 8024098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802409c:	d001      	beq.n	80240a2 <E_EEPROM_XMC4_Init+0x9a>
              E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE)
          {
            status = E_EEPROM_XMC4_STATUS_ERROR_OLD_DATA;
 802409e:	2301      	movs	r3, #1
 80240a0:	72fb      	strb	r3, [r7, #11]
          }
  
          if (e_eeprom_xmc4_sector_info.next_free_start_addr >= E_EEPROM_XMC4_SECTOR4_START_ADDR)
 80240a2:	4b0a      	ldr	r3, [pc, #40]	; (80240cc <E_EEPROM_XMC4_Init+0xc4>)
 80240a4:	681b      	ldr	r3, [r3, #0]
 80240a6:	4a0c      	ldr	r2, [pc, #48]	; (80240d8 <E_EEPROM_XMC4_Init+0xd0>)
 80240a8:	4293      	cmp	r3, r2
 80240aa:	d902      	bls.n	80240b2 <E_EEPROM_XMC4_Init+0xaa>
          {
            e_eeprom_xmc4_sector_info.next_free_start_addr =  E_EEPROM_XMC4_SECTOR0_START_ADDR;
 80240ac:	4b07      	ldr	r3, [pc, #28]	; (80240cc <E_EEPROM_XMC4_Init+0xc4>)
 80240ae:	4a09      	ldr	r2, [pc, #36]	; (80240d4 <E_EEPROM_XMC4_Init+0xcc>)
 80240b0:	601a      	str	r2, [r3, #0]
  
        }
      }
    }

    XMC_FLASH_EnableDoubleBitErrorTrap();
 80240b2:	f7ff ff73 	bl	8023f9c <XMC_FLASH_EnableDoubleBitErrorTrap>

    handle->initialized = (bool)true;
 80240b6:	687b      	ldr	r3, [r7, #4]
 80240b8:	2201      	movs	r2, #1
 80240ba:	701a      	strb	r2, [r3, #0]
  }

  return (status);
 80240bc:	7afb      	ldrb	r3, [r7, #11]
}
 80240be:	4618      	mov	r0, r3
 80240c0:	3710      	adds	r7, #16
 80240c2:	46bd      	mov	sp, r7
 80240c4:	bd80      	pop	{r7, pc}
 80240c6:	bf00      	nop
 80240c8:	1ffe8b34 	.word	0x1ffe8b34
 80240cc:	1ffe8a0c 	.word	0x1ffe8a0c
 80240d0:	08029fe0 	.word	0x08029fe0
 80240d4:	0c010000 	.word	0x0c010000
 80240d8:	0c01ffff 	.word	0x0c01ffff

080240dc <E_EEPROM_XMC4_WriteArray>:



/* Update a set of bytes to RAM buffer*/
bool E_EEPROM_XMC4_WriteArray(const uint16_t offset_address, const uint8_t *const data, const uint16_t length)
{
 80240dc:	b580      	push	{r7, lr}
 80240de:	b086      	sub	sp, #24
 80240e0:	af00      	add	r7, sp, #0
 80240e2:	4603      	mov	r3, r0
 80240e4:	6039      	str	r1, [r7, #0]
 80240e6:	80fb      	strh	r3, [r7, #6]
 80240e8:	4613      	mov	r3, r2
 80240ea:	80bb      	strh	r3, [r7, #4]
  bool status;

  XMC_ASSERT("E_EEPROM_XMC4_WriteArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA_BLOCK_SIZE));
  XMC_ASSERT("E_EEPROM_XMC4_WriteArray: Wrong length", ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE));

  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;
 80240ec:	88fb      	ldrh	r3, [r7, #6]
 80240ee:	3308      	adds	r3, #8
 80240f0:	4a12      	ldr	r2, [pc, #72]	; (802413c <E_EEPROM_XMC4_WriteArray+0x60>)
 80240f2:	4413      	add	r3, r2
 80240f4:	613b      	str	r3, [r7, #16]
  status = (memcmp(address_ptr, data, length) != 0);
 80240f6:	88bb      	ldrh	r3, [r7, #4]
 80240f8:	6938      	ldr	r0, [r7, #16]
 80240fa:	6839      	ldr	r1, [r7, #0]
 80240fc:	461a      	mov	r2, r3
 80240fe:	f005 fcdb 	bl	8029ab8 <memcmp>
 8024102:	4603      	mov	r3, r0
 8024104:	2b00      	cmp	r3, #0
 8024106:	bf14      	ite	ne
 8024108:	2301      	movne	r3, #1
 802410a:	2300      	moveq	r3, #0
 802410c:	73fb      	strb	r3, [r7, #15]

  for (i = 0U; i < length; i++)
 802410e:	2300      	movs	r3, #0
 8024110:	82fb      	strh	r3, [r7, #22]
 8024112:	e00a      	b.n	802412a <E_EEPROM_XMC4_WriteArray+0x4e>
  {
      *(address_ptr + i) = *(data + i);
 8024114:	8afb      	ldrh	r3, [r7, #22]
 8024116:	693a      	ldr	r2, [r7, #16]
 8024118:	4413      	add	r3, r2
 802411a:	8afa      	ldrh	r2, [r7, #22]
 802411c:	6839      	ldr	r1, [r7, #0]
 802411e:	440a      	add	r2, r1
 8024120:	7812      	ldrb	r2, [r2, #0]
 8024122:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("E_EEPROM_XMC4_WriteArray: Wrong length", ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE));

  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;
  status = (memcmp(address_ptr, data, length) != 0);

  for (i = 0U; i < length; i++)
 8024124:	8afb      	ldrh	r3, [r7, #22]
 8024126:	3301      	adds	r3, #1
 8024128:	82fb      	strh	r3, [r7, #22]
 802412a:	8afa      	ldrh	r2, [r7, #22]
 802412c:	88bb      	ldrh	r3, [r7, #4]
 802412e:	429a      	cmp	r2, r3
 8024130:	d3f0      	bcc.n	8024114 <E_EEPROM_XMC4_WriteArray+0x38>
  {
      *(address_ptr + i) = *(data + i);
  }

  return status;
 8024132:	7bfb      	ldrb	r3, [r7, #15]
}
 8024134:	4618      	mov	r0, r3
 8024136:	3718      	adds	r7, #24
 8024138:	46bd      	mov	sp, r7
 802413a:	bd80      	pop	{r7, pc}
 802413c:	1ffe8b34 	.word	0x1ffe8b34

08024140 <E_EEPROM_XMC4_ReadArray>:



/* Read a set of bytes from RAM Buffer */
void E_EEPROM_XMC4_ReadArray(const uint16_t offset_address, uint8_t *const data, const uint16_t length)
{
 8024140:	b480      	push	{r7}
 8024142:	b085      	sub	sp, #20
 8024144:	af00      	add	r7, sp, #0
 8024146:	4603      	mov	r3, r0
 8024148:	6039      	str	r1, [r7, #0]
 802414a:	80fb      	strh	r3, [r7, #6]
 802414c:	4613      	mov	r3, r2
 802414e:	80bb      	strh	r3, [r7, #4]
  uint16_t i;
  uint8_t  *address_ptr;
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA_BLOCK_SIZE));
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong length", ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE));
  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;
 8024150:	88fb      	ldrh	r3, [r7, #6]
 8024152:	3308      	adds	r3, #8
 8024154:	4a0c      	ldr	r2, [pc, #48]	; (8024188 <E_EEPROM_XMC4_ReadArray+0x48>)
 8024156:	4413      	add	r3, r2
 8024158:	60bb      	str	r3, [r7, #8]

  for (i=0U; i<length; i++)
 802415a:	2300      	movs	r3, #0
 802415c:	81fb      	strh	r3, [r7, #14]
 802415e:	e00a      	b.n	8024176 <E_EEPROM_XMC4_ReadArray+0x36>
  {
    *(data + i) = *(address_ptr + i);
 8024160:	89fb      	ldrh	r3, [r7, #14]
 8024162:	683a      	ldr	r2, [r7, #0]
 8024164:	4413      	add	r3, r2
 8024166:	89fa      	ldrh	r2, [r7, #14]
 8024168:	68b9      	ldr	r1, [r7, #8]
 802416a:	440a      	add	r2, r1
 802416c:	7812      	ldrb	r2, [r2, #0]
 802416e:	701a      	strb	r2, [r3, #0]
  uint8_t  *address_ptr;
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA_BLOCK_SIZE));
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong length", ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE));
  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;

  for (i=0U; i<length; i++)
 8024170:	89fb      	ldrh	r3, [r7, #14]
 8024172:	3301      	adds	r3, #1
 8024174:	81fb      	strh	r3, [r7, #14]
 8024176:	89fa      	ldrh	r2, [r7, #14]
 8024178:	88bb      	ldrh	r3, [r7, #4]
 802417a:	429a      	cmp	r2, r3
 802417c:	d3f0      	bcc.n	8024160 <E_EEPROM_XMC4_ReadArray+0x20>
  {
    *(data + i) = *(address_ptr + i);
  }
}
 802417e:	3714      	adds	r7, #20
 8024180:	46bd      	mov	sp, r7
 8024182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024186:	4770      	bx	lr
 8024188:	1ffe8b34 	.word	0x1ffe8b34

0802418c <E_EEPROM_XMC4_UpdateFlashContents>:



/* Copy data blocks from RAM to FLASH */
E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_UpdateFlashContents(void)
{
 802418c:	b580      	push	{r7, lr}
 802418e:	b082      	sub	sp, #8
 8024190:	af00      	add	r7, sp, #0
  E_EEPROM_XMC4_STATUS_t status;
  uint32_t sector_start_addr;

  status = E_EEPROM_XMC4_STATUS_OK;
 8024192:	2300      	movs	r3, #0
 8024194:	71fb      	strb	r3, [r7, #7]

  /* Calculate the starting address of the active sector from where the first write started for the current cycle*/
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR +
                     (E_EEPROM_XMC4_SECTOR_SIZE * e_eeprom_xmc4_sector_info.current_sector);
 8024196:	4b22      	ldr	r3, [pc, #136]	; (8024220 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8024198:	689b      	ldr	r3, [r3, #8]
  uint32_t sector_start_addr;

  status = E_EEPROM_XMC4_STATUS_OK;

  /* Calculate the starting address of the active sector from where the first write started for the current cycle*/
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR +
 802419a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 802419e:	3304      	adds	r3, #4
 80241a0:	039b      	lsls	r3, r3, #14
 80241a2:	603b      	str	r3, [r7, #0]
                     (E_EEPROM_XMC4_SECTOR_SIZE * e_eeprom_xmc4_sector_info.current_sector);

  /* If the next free address crosses current active sector starting address, then all the sectors are fully written*/
  if ((e_eeprom_xmc4_sector_info.next_free_start_addr == sector_start_addr) &&
 80241a4:	4b1e      	ldr	r3, [pc, #120]	; (8024220 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 80241a6:	681a      	ldr	r2, [r3, #0]
 80241a8:	683b      	ldr	r3, [r7, #0]
 80241aa:	429a      	cmp	r2, r3
 80241ac:	d111      	bne.n	80241d2 <E_EEPROM_XMC4_UpdateFlashContents+0x46>
     (e_eeprom_xmc4_data_buffer.block_cycle_count != 0U))
 80241ae:	4b1d      	ldr	r3, [pc, #116]	; (8024224 <E_EEPROM_XMC4_UpdateFlashContents+0x98>)
 80241b0:	685b      	ldr	r3, [r3, #4]
  /* Calculate the starting address of the active sector from where the first write started for the current cycle*/
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR +
                     (E_EEPROM_XMC4_SECTOR_SIZE * e_eeprom_xmc4_sector_info.current_sector);

  /* If the next free address crosses current active sector starting address, then all the sectors are fully written*/
  if ((e_eeprom_xmc4_sector_info.next_free_start_addr == sector_start_addr) &&
 80241b2:	2b00      	cmp	r3, #0
 80241b4:	d00d      	beq.n	80241d2 <E_EEPROM_XMC4_UpdateFlashContents+0x46>
     (e_eeprom_xmc4_data_buffer.block_cycle_count != 0U))
  {
    /* Update the current sector to the latest sector on which the last write was executed. */
    e_eeprom_xmc4_sector_info.current_sector =  ((e_eeprom_xmc4_sector_info.flash_data_addr &
 80241b6:	4b1a      	ldr	r3, [pc, #104]	; (8024220 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 80241b8:	685b      	ldr	r3, [r3, #4]
 80241ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
                                                E_EEPROM_XMC4_SECTOR_POSITION_MASK) >>
 80241be:	0b9b      	lsrs	r3, r3, #14
  /* If the next free address crosses current active sector starting address, then all the sectors are fully written*/
  if ((e_eeprom_xmc4_sector_info.next_free_start_addr == sector_start_addr) &&
     (e_eeprom_xmc4_data_buffer.block_cycle_count != 0U))
  {
    /* Update the current sector to the latest sector on which the last write was executed. */
    e_eeprom_xmc4_sector_info.current_sector =  ((e_eeprom_xmc4_sector_info.flash_data_addr &
 80241c0:	4a17      	ldr	r2, [pc, #92]	; (8024220 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 80241c2:	6093      	str	r3, [r2, #8]
                                                E_EEPROM_XMC4_SECTOR_POSITION_MASK) >>
                                                E_EEPROM_XMC4_SECTOR_POSITION);

    /* Mark all the sectors as filled with data */
    e_eeprom_xmc4_sector_info.erase_state = E_EEPROM_XMC4_ALL_SECTORS_FILLED ;
 80241c4:	4b16      	ldr	r3, [pc, #88]	; (8024220 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 80241c6:	220f      	movs	r2, #15
 80241c8:	60da      	str	r2, [r3, #12]

    /* Execute erase state machine to free up the unwanted sectors and keep only the sector which has latest block*/
    status = E_EEPROM_XMC4_lInitEraseStateMachine();
 80241ca:	f000 f8d9 	bl	8024380 <E_EEPROM_XMC4_lInitEraseStateMachine>
 80241ce:	4603      	mov	r3, r0
 80241d0:	71fb      	strb	r3, [r7, #7]
  }

  if (status ==  E_EEPROM_XMC4_STATUS_OK)
 80241d2:	79fb      	ldrb	r3, [r7, #7]
 80241d4:	2b00      	cmp	r3, #0
 80241d6:	d11d      	bne.n	8024214 <E_EEPROM_XMC4_UpdateFlashContents+0x88>
  {
    e_eeprom_xmc4_data_buffer.block_cycle_count++;
 80241d8:	4b12      	ldr	r3, [pc, #72]	; (8024224 <E_EEPROM_XMC4_UpdateFlashContents+0x98>)
 80241da:	685b      	ldr	r3, [r3, #4]
 80241dc:	3301      	adds	r3, #1
 80241de:	4a11      	ldr	r2, [pc, #68]	; (8024224 <E_EEPROM_XMC4_UpdateFlashContents+0x98>)
 80241e0:	6053      	str	r3, [r2, #4]

    status = E_EEPROM_XMC4_lWriteToFlash();
 80241e2:	f000 f839 	bl	8024258 <E_EEPROM_XMC4_lWriteToFlash>
 80241e6:	4603      	mov	r3, r0
 80241e8:	71fb      	strb	r3, [r7, #7]

    /* If the flash write succeeds, update the latest flash data location in RAM for reference */
    if (status == E_EEPROM_XMC4_STATUS_OK)
 80241ea:	79fb      	ldrb	r3, [r7, #7]
 80241ec:	2b00      	cmp	r3, #0
 80241ee:	d103      	bne.n	80241f8 <E_EEPROM_XMC4_UpdateFlashContents+0x6c>
    {
      e_eeprom_xmc4_sector_info.flash_data_addr = e_eeprom_xmc4_sector_info.next_free_start_addr;
 80241f0:	4b0b      	ldr	r3, [pc, #44]	; (8024220 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 80241f2:	681b      	ldr	r3, [r3, #0]
 80241f4:	4a0a      	ldr	r2, [pc, #40]	; (8024220 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 80241f6:	6053      	str	r3, [r2, #4]
    }

    /* Update the next free address to write the new data block*/
    e_eeprom_xmc4_sector_info.next_free_start_addr += E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 80241f8:	4b09      	ldr	r3, [pc, #36]	; (8024220 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 80241fa:	681b      	ldr	r3, [r3, #0]
 80241fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8024200:	4a07      	ldr	r2, [pc, #28]	; (8024220 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8024202:	6013      	str	r3, [r2, #0]

    /* If the next free address crosses 3rd sector end address relocate the address to 0th sector starting address*/
    if (e_eeprom_xmc4_sector_info.next_free_start_addr >= E_EEPROM_XMC4_SECTOR4_START_ADDR)
 8024204:	4b06      	ldr	r3, [pc, #24]	; (8024220 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8024206:	681b      	ldr	r3, [r3, #0]
 8024208:	4a07      	ldr	r2, [pc, #28]	; (8024228 <E_EEPROM_XMC4_UpdateFlashContents+0x9c>)
 802420a:	4293      	cmp	r3, r2
 802420c:	d902      	bls.n	8024214 <E_EEPROM_XMC4_UpdateFlashContents+0x88>
    {
      e_eeprom_xmc4_sector_info.next_free_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR;
 802420e:	4b04      	ldr	r3, [pc, #16]	; (8024220 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8024210:	4a06      	ldr	r2, [pc, #24]	; (802422c <E_EEPROM_XMC4_UpdateFlashContents+0xa0>)
 8024212:	601a      	str	r2, [r3, #0]
    }
  }

  return (status);
 8024214:	79fb      	ldrb	r3, [r7, #7]
}
 8024216:	4618      	mov	r0, r3
 8024218:	3708      	adds	r7, #8
 802421a:	46bd      	mov	sp, r7
 802421c:	bd80      	pop	{r7, pc}
 802421e:	bf00      	nop
 8024220:	1ffe8a0c 	.word	0x1ffe8a0c
 8024224:	1ffe8b34 	.word	0x1ffe8b34
 8024228:	0c01ffff 	.word	0x0c01ffff
 802422c:	0c010000 	.word	0x0c010000

08024230 <E_EEPROM_XMC4_IsFlashEmpty>:


/* Check the availability data in the flash emulated EEPROM area */
bool E_EEPROM_XMC4_IsFlashEmpty(void)
{
 8024230:	b480      	push	{r7}
 8024232:	b083      	sub	sp, #12
 8024234:	af00      	add	r7, sp, #0
  bool status = false;
 8024236:	2300      	movs	r3, #0
 8024238:	71fb      	strb	r3, [r7, #7]

  /* If data available flash_data_addr will have a valid address*/
  if (e_eeprom_xmc4_sector_info.flash_data_addr == 0U)
 802423a:	4b06      	ldr	r3, [pc, #24]	; (8024254 <E_EEPROM_XMC4_IsFlashEmpty+0x24>)
 802423c:	685b      	ldr	r3, [r3, #4]
 802423e:	2b00      	cmp	r3, #0
 8024240:	d101      	bne.n	8024246 <E_EEPROM_XMC4_IsFlashEmpty+0x16>
  {
    status = true;
 8024242:	2301      	movs	r3, #1
 8024244:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8024246:	79fb      	ldrb	r3, [r7, #7]
}
 8024248:	4618      	mov	r0, r3
 802424a:	370c      	adds	r7, #12
 802424c:	46bd      	mov	sp, r7
 802424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024252:	4770      	bx	lr
 8024254:	1ffe8a0c 	.word	0x1ffe8a0c

08024258 <E_EEPROM_XMC4_lWriteToFlash>:
 * LOCAL ROUTINES
 ********************************************************************************************************************/

/* Local function to program data blocks from RAM into FLASH */
static E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_lWriteToFlash(void)
{
 8024258:	b580      	push	{r7, lr}
 802425a:	b084      	sub	sp, #16
 802425c:	af00      	add	r7, sp, #0
  uint32_t *flash_addr_ptr;
  uint32_t *ram_addr_ptr;
  uint32_t  page_index;
  E_EEPROM_XMC4_STATUS_t status;

  status = E_EEPROM_XMC4_STATUS_OK;
 802425e:	2300      	movs	r3, #0
 8024260:	70fb      	strb	r3, [r7, #3]
  flash_addr_ptr = (uint32_t*)e_eeprom_xmc4_sector_info.next_free_start_addr;
 8024262:	4b18      	ldr	r3, [pc, #96]	; (80242c4 <E_EEPROM_XMC4_lWriteToFlash+0x6c>)
 8024264:	681b      	ldr	r3, [r3, #0]
 8024266:	60fb      	str	r3, [r7, #12]
  ram_addr_ptr   = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;
 8024268:	4b17      	ldr	r3, [pc, #92]	; (80242c8 <E_EEPROM_XMC4_lWriteToFlash+0x70>)
 802426a:	60bb      	str	r3, [r7, #8]

  e_eeprom_xmc4_data_buffer.crc = E_EEPROM_XMC4_lCalculateCRC((uint32_t*)(void*)
 802426c:	4817      	ldr	r0, [pc, #92]	; (80242cc <E_EEPROM_XMC4_lWriteToFlash+0x74>)
 802426e:	f000 f8c7 	bl	8024400 <E_EEPROM_XMC4_lCalculateCRC>
 8024272:	4602      	mov	r2, r0
 8024274:	4b14      	ldr	r3, [pc, #80]	; (80242c8 <E_EEPROM_XMC4_lWriteToFlash+0x70>)
 8024276:	601a      	str	r2, [r3, #0]
                                                             (&(e_eeprom_xmc4_data_buffer.block_cycle_count)));

  for (page_index = 0U ; page_index < E_EEPROM_XMC4_MAX_PAGES; page_index++)
 8024278:	2300      	movs	r3, #0
 802427a:	607b      	str	r3, [r7, #4]
 802427c:	e01a      	b.n	80242b4 <E_EEPROM_XMC4_lWriteToFlash+0x5c>
  {
    XMC_FLASH_ClearStatus();
 802427e:	f7fb ffd5 	bl	802022c <XMC_FLASH_ClearStatus>

    XMC_FLASH_ProgramPage(flash_addr_ptr,ram_addr_ptr);
 8024282:	68f8      	ldr	r0, [r7, #12]
 8024284:	68b9      	ldr	r1, [r7, #8]
 8024286:	f7fb ffe5 	bl	8020254 <XMC_FLASH_ProgramPage>

    if ((XMC_FLASH_GetStatus() & (uint32_t)(XMC_FLASH_STATUS_VERIFY_ERROR | XMC_FLASH_STATUS_OPERATION_ERROR)) != 0)
 802428a:	f7fb ffd5 	bl	8020238 <XMC_FLASH_GetStatus>
 802428e:	4602      	mov	r2, r0
 8024290:	4b0f      	ldr	r3, [pc, #60]	; (80242d0 <E_EEPROM_XMC4_lWriteToFlash+0x78>)
 8024292:	4013      	ands	r3, r2
 8024294:	2b00      	cmp	r3, #0
 8024296:	d002      	beq.n	802429e <E_EEPROM_XMC4_lWriteToFlash+0x46>
    {
      status = E_EEPROM_XMC4_STATUS_WRITE_ERROR;
 8024298:	2303      	movs	r3, #3
 802429a:	70fb      	strb	r3, [r7, #3]
      break;
 802429c:	e00d      	b.n	80242ba <E_EEPROM_XMC4_lWriteToFlash+0x62>
    }
    ram_addr_ptr   += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
 802429e:	68bb      	ldr	r3, [r7, #8]
 80242a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80242a4:	60bb      	str	r3, [r7, #8]
    flash_addr_ptr += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
 80242a6:	68fb      	ldr	r3, [r7, #12]
 80242a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80242ac:	60fb      	str	r3, [r7, #12]
  ram_addr_ptr   = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;

  e_eeprom_xmc4_data_buffer.crc = E_EEPROM_XMC4_lCalculateCRC((uint32_t*)(void*)
                                                             (&(e_eeprom_xmc4_data_buffer.block_cycle_count)));

  for (page_index = 0U ; page_index < E_EEPROM_XMC4_MAX_PAGES; page_index++)
 80242ae:	687b      	ldr	r3, [r7, #4]
 80242b0:	3301      	adds	r3, #1
 80242b2:	607b      	str	r3, [r7, #4]
 80242b4:	687b      	ldr	r3, [r7, #4]
 80242b6:	2b0f      	cmp	r3, #15
 80242b8:	d9e1      	bls.n	802427e <E_EEPROM_XMC4_lWriteToFlash+0x26>
    }
    ram_addr_ptr   += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
    flash_addr_ptr += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
  }

  return (status);
 80242ba:	78fb      	ldrb	r3, [r7, #3]
}
 80242bc:	4618      	mov	r0, r3
 80242be:	3710      	adds	r7, #16
 80242c0:	46bd      	mov	sp, r7
 80242c2:	bd80      	pop	{r7, pc}
 80242c4:	1ffe8a0c 	.word	0x1ffe8a0c
 80242c8:	1ffe8b34 	.word	0x1ffe8b34
 80242cc:	1ffe8b38 	.word	0x1ffe8b38
 80242d0:	80000100 	.word	0x80000100

080242d4 <E_EEPROM_XMC4_lInitReadSectorInfo>:



static void E_EEPROM_XMC4_lInitReadSectorInfo(const uint32_t sector)
{
 80242d4:	b580      	push	{r7, lr}
 80242d6:	b08a      	sub	sp, #40	; 0x28
 80242d8:	af00      	add	r7, sp, #0
 80242da:	6078      	str	r0, [r7, #4]
  uint32_t block_cycle_count;
  uint32_t written_crc;
  uint32_t calculated_crc;

  /* Initialize starting address and last block address of the sector. */
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR + (E_EEPROM_XMC4_SECTOR_SIZE * (uint32_t)sector);
 80242dc:	687b      	ldr	r3, [r7, #4]
 80242de:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80242e2:	3304      	adds	r3, #4
 80242e4:	039b      	lsls	r3, r3, #14
 80242e6:	61fb      	str	r3, [r7, #28]
  block_read_addr = (sector_start_addr + E_EEPROM_XMC4_SECTOR_SIZE) - E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 80242e8:	69fb      	ldr	r3, [r7, #28]
 80242ea:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80242ee:	627b      	str	r3, [r7, #36]	; 0x24
  free_block_addr = E_EEPROM_XMC4_EMPTY;
 80242f0:	2300      	movs	r3, #0
 80242f2:	623b      	str	r3, [r7, #32]

  do
  {
    /* Read first 32 bit data from the block which indicates the block cycle counter. */
    data_ptr = (uint32_t*)block_read_addr;
 80242f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80242f6:	61bb      	str	r3, [r7, #24]
    block_cycle_count = *(data_ptr + E_EEPROM_XMC4_BCC_OFFSET);
 80242f8:	69bb      	ldr	r3, [r7, #24]
 80242fa:	685b      	ldr	r3, [r3, #4]
 80242fc:	617b      	str	r3, [r7, #20]

    /* Check if block cycle count is a non zero value*/
    if (block_cycle_count != E_EEPROM_XMC4_EMPTY)
 80242fe:	697b      	ldr	r3, [r7, #20]
 8024300:	2b00      	cmp	r3, #0
 8024302:	d02e      	beq.n	8024362 <E_EEPROM_XMC4_lInitReadSectorInfo+0x8e>
    {
      /* Mark sector as non-empty sector*/
      e_eeprom_xmc4_sector_info.erase_state |= ((uint32_t)1U << sector);
 8024304:	4b1c      	ldr	r3, [pc, #112]	; (8024378 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 8024306:	68da      	ldr	r2, [r3, #12]
 8024308:	687b      	ldr	r3, [r7, #4]
 802430a:	2101      	movs	r1, #1
 802430c:	fa01 f303 	lsl.w	r3, r1, r3
 8024310:	4313      	orrs	r3, r2
 8024312:	4a19      	ldr	r2, [pc, #100]	; (8024378 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 8024314:	60d3      	str	r3, [r2, #12]

      /* If this is the first non empty block identified, then store the address as next free address */
      if (free_block_addr == E_EEPROM_XMC4_EMPTY)
 8024316:	6a3b      	ldr	r3, [r7, #32]
 8024318:	2b00      	cmp	r3, #0
 802431a:	d103      	bne.n	8024324 <E_EEPROM_XMC4_lInitReadSectorInfo+0x50>
      {
        free_block_addr = block_read_addr + E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 802431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802431e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8024322:	623b      	str	r3, [r7, #32]
      }

      /* Read the second 32bit data which indicates the CRC */
      written_crc = *data_ptr;
 8024324:	69bb      	ldr	r3, [r7, #24]
 8024326:	681b      	ldr	r3, [r3, #0]
 8024328:	613b      	str	r3, [r7, #16]
      /* Calculate the CRC for the written data in flash (3rd word to the last word)*/
      calculated_crc = E_EEPROM_XMC4_lCalculateCRC(data_ptr + E_EEPROM_XMC4_BCC_OFFSET);
 802432a:	69bb      	ldr	r3, [r7, #24]
 802432c:	3304      	adds	r3, #4
 802432e:	4618      	mov	r0, r3
 8024330:	f000 f866 	bl	8024400 <E_EEPROM_XMC4_lCalculateCRC>
 8024334:	60f8      	str	r0, [r7, #12]

      if (calculated_crc == written_crc)
 8024336:	68fa      	ldr	r2, [r7, #12]
 8024338:	693b      	ldr	r3, [r7, #16]
 802433a:	429a      	cmp	r2, r3
 802433c:	d111      	bne.n	8024362 <E_EEPROM_XMC4_lInitReadSectorInfo+0x8e>
      {
        /* If both CRC matches and the current block cycle counter is greater than the previous recorded value,
         * Update the Data structure with the current block as the "latest" one and the current sector as "active".
         * Exit from the function.
         */
        if (block_cycle_count > e_eeprom_xmc4_data_buffer.block_cycle_count)
 802433e:	4b0f      	ldr	r3, [pc, #60]	; (802437c <E_EEPROM_XMC4_lInitReadSectorInfo+0xa8>)
 8024340:	685a      	ldr	r2, [r3, #4]
 8024342:	697b      	ldr	r3, [r7, #20]
 8024344:	429a      	cmp	r2, r3
 8024346:	d20c      	bcs.n	8024362 <E_EEPROM_XMC4_lInitReadSectorInfo+0x8e>
        {
          e_eeprom_xmc4_data_buffer.block_cycle_count = block_cycle_count;
 8024348:	4a0c      	ldr	r2, [pc, #48]	; (802437c <E_EEPROM_XMC4_lInitReadSectorInfo+0xa8>)
 802434a:	697b      	ldr	r3, [r7, #20]
 802434c:	6053      	str	r3, [r2, #4]
          e_eeprom_xmc4_sector_info.current_sector = sector;
 802434e:	4a0a      	ldr	r2, [pc, #40]	; (8024378 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 8024350:	687b      	ldr	r3, [r7, #4]
 8024352:	6093      	str	r3, [r2, #8]
          e_eeprom_xmc4_sector_info.flash_data_addr = block_read_addr;
 8024354:	4a08      	ldr	r2, [pc, #32]	; (8024378 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 8024356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024358:	6053      	str	r3, [r2, #4]
          e_eeprom_xmc4_sector_info.next_free_start_addr = free_block_addr;
 802435a:	4a07      	ldr	r2, [pc, #28]	; (8024378 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 802435c:	6a3b      	ldr	r3, [r7, #32]
 802435e:	6013      	str	r3, [r2, #0]
          break;
 8024360:	e007      	b.n	8024372 <E_EEPROM_XMC4_lInitReadSectorInfo+0x9e>
        }
      }
    }
    /* Move the block read address to one block size up starting from the bottom of sector */
    block_read_addr -= E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 8024362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024364:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8024368:	627b      	str	r3, [r7, #36]	; 0x24

  /* Iterate the read process until the block read address crosses sector start address or a
   * latest valid block is identified.
   */
  } while ( block_read_addr >= sector_start_addr );
 802436a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802436c:	69fb      	ldr	r3, [r7, #28]
 802436e:	429a      	cmp	r2, r3
 8024370:	d2c0      	bcs.n	80242f4 <E_EEPROM_XMC4_lInitReadSectorInfo+0x20>

}
 8024372:	3728      	adds	r7, #40	; 0x28
 8024374:	46bd      	mov	sp, r7
 8024376:	bd80      	pop	{r7, pc}
 8024378:	1ffe8a0c 	.word	0x1ffe8a0c
 802437c:	1ffe8b34 	.word	0x1ffe8b34

08024380 <E_EEPROM_XMC4_lInitEraseStateMachine>:



static E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_lInitEraseStateMachine(void)
{
 8024380:	b580      	push	{r7, lr}
 8024382:	b084      	sub	sp, #16
 8024384:	af00      	add	r7, sp, #0
  uint32_t sector_count;
  uint32_t sector_start_addr;
  E_EEPROM_XMC4_STATUS_t status ;

  status = E_EEPROM_XMC4_STATUS_OK;
 8024386:	2300      	movs	r3, #0
 8024388:	72fb      	strb	r3, [r7, #11]
  sector_count = 0U;
 802438a:	2300      	movs	r3, #0
 802438c:	60fb      	str	r3, [r7, #12]

  do
  {
    /* If the non empty sector is the current active sector, then do not erase it*/
    if (e_eeprom_xmc4_sector_info.current_sector != sector_count)
 802438e:	4b1b      	ldr	r3, [pc, #108]	; (80243fc <E_EEPROM_XMC4_lInitEraseStateMachine+0x7c>)
 8024390:	689a      	ldr	r2, [r3, #8]
 8024392:	68fb      	ldr	r3, [r7, #12]
 8024394:	429a      	cmp	r2, r3
 8024396:	d026      	beq.n	80243e6 <E_EEPROM_XMC4_lInitEraseStateMachine+0x66>
    {
      /* Check if the sector was previously identified as non-empty. i.e It is having old data or corrupted data
       * If so erase the sector and mark it as erase attempted.
       */
      if ((e_eeprom_xmc4_sector_info.erase_state >> sector_count) & ((uint32_t)1U))
 8024398:	4b18      	ldr	r3, [pc, #96]	; (80243fc <E_EEPROM_XMC4_lInitEraseStateMachine+0x7c>)
 802439a:	68da      	ldr	r2, [r3, #12]
 802439c:	68fb      	ldr	r3, [r7, #12]
 802439e:	fa22 f303 	lsr.w	r3, r2, r3
 80243a2:	f003 0301 	and.w	r3, r3, #1
 80243a6:	2b00      	cmp	r3, #0
 80243a8:	d01d      	beq.n	80243e6 <E_EEPROM_XMC4_lInitEraseStateMachine+0x66>
      {
        sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR + (E_EEPROM_XMC4_SECTOR_SIZE * (uint32_t)sector_count);
 80243aa:	68fb      	ldr	r3, [r7, #12]
 80243ac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80243b0:	3304      	adds	r3, #4
 80243b2:	039b      	lsls	r3, r3, #14
 80243b4:	607b      	str	r3, [r7, #4]

        XMC_FLASH_ClearStatus();
 80243b6:	f7fb ff39 	bl	802022c <XMC_FLASH_ClearStatus>
        XMC_FLASH_EraseSector((uint32_t*)sector_start_addr);
 80243ba:	687b      	ldr	r3, [r7, #4]
 80243bc:	4618      	mov	r0, r3
 80243be:	f7fb ff7d 	bl	80202bc <XMC_FLASH_EraseSector>

        if (XMC_FLASH_GetStatus() != (uint32_t)XMC_FLASH_STATUS_ERASE_STATE)
 80243c2:	f7fb ff39 	bl	8020238 <XMC_FLASH_GetStatus>
 80243c6:	4603      	mov	r3, r0
 80243c8:	2b20      	cmp	r3, #32
 80243ca:	d002      	beq.n	80243d2 <E_EEPROM_XMC4_lInitEraseStateMachine+0x52>
        {
          status = E_EEPROM_XMC4_STATUS_ERASE_ERROR;
 80243cc:	2304      	movs	r3, #4
 80243ce:	72fb      	strb	r3, [r7, #11]
          break;
 80243d0:	e00f      	b.n	80243f2 <E_EEPROM_XMC4_lInitEraseStateMachine+0x72>
        }
        e_eeprom_xmc4_sector_info.erase_state &= ~(((uint32_t)1U << sector_count));
 80243d2:	4b0a      	ldr	r3, [pc, #40]	; (80243fc <E_EEPROM_XMC4_lInitEraseStateMachine+0x7c>)
 80243d4:	68da      	ldr	r2, [r3, #12]
 80243d6:	68fb      	ldr	r3, [r7, #12]
 80243d8:	2101      	movs	r1, #1
 80243da:	fa01 f303 	lsl.w	r3, r1, r3
 80243de:	43db      	mvns	r3, r3
 80243e0:	4013      	ands	r3, r2
 80243e2:	4a06      	ldr	r2, [pc, #24]	; (80243fc <E_EEPROM_XMC4_lInitEraseStateMachine+0x7c>)
 80243e4:	60d3      	str	r3, [r2, #12]
      }
    }
    sector_count++;
 80243e6:	68fb      	ldr	r3, [r7, #12]
 80243e8:	3301      	adds	r3, #1
 80243ea:	60fb      	str	r3, [r7, #12]
    /* Iterate the erase loop until all 4 sectors are checked. Break and return failure on any sector erase errors.*/
  } while ( sector_count < E_EEPROM_XMC4_MAX_SECTORS );
 80243ec:	68fb      	ldr	r3, [r7, #12]
 80243ee:	2b03      	cmp	r3, #3
 80243f0:	d9cd      	bls.n	802438e <E_EEPROM_XMC4_lInitEraseStateMachine+0xe>

  return (status);
 80243f2:	7afb      	ldrb	r3, [r7, #11]
}
 80243f4:	4618      	mov	r0, r3
 80243f6:	3710      	adds	r7, #16
 80243f8:	46bd      	mov	sp, r7
 80243fa:	bd80      	pop	{r7, pc}
 80243fc:	1ffe8a0c 	.word	0x1ffe8a0c

08024400 <E_EEPROM_XMC4_lCalculateCRC>:

/* Local function to CRC */
static uint32_t E_EEPROM_XMC4_lCalculateCRC(const uint32_t *data_start_addr)
{
 8024400:	b580      	push	{r7, lr}
 8024402:	b084      	sub	sp, #16
 8024404:	af00      	add	r7, sp, #0
 8024406:	6078      	str	r0, [r7, #4]
  uint32_t result;

  /* Reset the CRC result register before new CRC calculation */
  XMC_FCE_InitializeSeedValue(&e_eeprom_xmc4_fce, 0U);
 8024408:	4808      	ldr	r0, [pc, #32]	; (802442c <E_EEPROM_XMC4_lCalculateCRC+0x2c>)
 802440a:	2100      	movs	r1, #0
 802440c:	f7ff fdee 	bl	8023fec <XMC_FCE_InitializeSeedValue>

  (void)XMC_FCE_CalculateCRC32(&e_eeprom_xmc4_fce, data_start_addr, E_EEPROM_XMC4_DATA_SIZE_FOR_CRC, &result);
 8024410:	f107 030c 	add.w	r3, r7, #12
 8024414:	4805      	ldr	r0, [pc, #20]	; (802442c <E_EEPROM_XMC4_lCalculateCRC+0x2c>)
 8024416:	6879      	ldr	r1, [r7, #4]
 8024418:	f640 72fc 	movw	r2, #4092	; 0xffc
 802441c:	f7fd fe60 	bl	80220e0 <XMC_FCE_CalculateCRC32>

  return (result);
 8024420:	68fb      	ldr	r3, [r7, #12]
}
 8024422:	4618      	mov	r0, r3
 8024424:	3710      	adds	r7, #16
 8024426:	46bd      	mov	sp, r7
 8024428:	bd80      	pop	{r7, pc}
 802442a:	bf00      	nop
 802442c:	08029fe0 	.word	0x08029fe0

08024430 <E_EEPROM_XMC4_lCopyFlashToRam>:



/* Local function to copy data blocks from FLASH to RAM */
static void E_EEPROM_XMC4_lCopyFlashToRam(void)
{
 8024430:	b480      	push	{r7}
 8024432:	b085      	sub	sp, #20
 8024434:	af00      	add	r7, sp, #0
  uint32_t *flash_addr_ptr;
  uint32_t *ram_addr_ptr;
  uint32_t byte_index;

  flash_addr_ptr = (uint32_t*)e_eeprom_xmc4_sector_info.flash_data_addr;
 8024436:	4b0f      	ldr	r3, [pc, #60]	; (8024474 <E_EEPROM_XMC4_lCopyFlashToRam+0x44>)
 8024438:	685b      	ldr	r3, [r3, #4]
 802443a:	60bb      	str	r3, [r7, #8]
  ram_addr_ptr = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;
 802443c:	4b0e      	ldr	r3, [pc, #56]	; (8024478 <E_EEPROM_XMC4_lCopyFlashToRam+0x48>)
 802443e:	607b      	str	r3, [r7, #4]

  for(byte_index = 0U ; byte_index < E_EEPROM_XMC4_MAX_WORDS; byte_index++)
 8024440:	2300      	movs	r3, #0
 8024442:	60fb      	str	r3, [r7, #12]
 8024444:	e00c      	b.n	8024460 <E_EEPROM_XMC4_lCopyFlashToRam+0x30>
  {
    *(ram_addr_ptr + byte_index) = *(flash_addr_ptr + byte_index);
 8024446:	68fb      	ldr	r3, [r7, #12]
 8024448:	009b      	lsls	r3, r3, #2
 802444a:	687a      	ldr	r2, [r7, #4]
 802444c:	4413      	add	r3, r2
 802444e:	68fa      	ldr	r2, [r7, #12]
 8024450:	0092      	lsls	r2, r2, #2
 8024452:	68b9      	ldr	r1, [r7, #8]
 8024454:	440a      	add	r2, r1
 8024456:	6812      	ldr	r2, [r2, #0]
 8024458:	601a      	str	r2, [r3, #0]
  uint32_t byte_index;

  flash_addr_ptr = (uint32_t*)e_eeprom_xmc4_sector_info.flash_data_addr;
  ram_addr_ptr = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;

  for(byte_index = 0U ; byte_index < E_EEPROM_XMC4_MAX_WORDS; byte_index++)
 802445a:	68fb      	ldr	r3, [r7, #12]
 802445c:	3301      	adds	r3, #1
 802445e:	60fb      	str	r3, [r7, #12]
 8024460:	68fb      	ldr	r3, [r7, #12]
 8024462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8024466:	d3ee      	bcc.n	8024446 <E_EEPROM_XMC4_lCopyFlashToRam+0x16>
  {
    *(ram_addr_ptr + byte_index) = *(flash_addr_ptr + byte_index);
  }
}
 8024468:	3714      	adds	r7, #20
 802446a:	46bd      	mov	sp, r7
 802446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024470:	4770      	bx	lr
 8024472:	bf00      	nop
 8024474:	1ffe8a0c 	.word	0x1ffe8a0c
 8024478:	1ffe8b34 	.word	0x1ffe8b34

0802447c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 802447c:	b480      	push	{r7}
 802447e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8024480:	4b04      	ldr	r3, [pc, #16]	; (8024494 <NVIC_GetPriorityGrouping+0x18>)
 8024482:	68db      	ldr	r3, [r3, #12]
 8024484:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8024488:	0a1b      	lsrs	r3, r3, #8
}
 802448a:	4618      	mov	r0, r3
 802448c:	46bd      	mov	sp, r7
 802448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024492:	4770      	bx	lr
 8024494:	e000ed00 	.word	0xe000ed00

08024498 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8024498:	b480      	push	{r7}
 802449a:	b083      	sub	sp, #12
 802449c:	af00      	add	r7, sp, #0
 802449e:	4603      	mov	r3, r0
 80244a0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80244a2:	4908      	ldr	r1, [pc, #32]	; (80244c4 <NVIC_EnableIRQ+0x2c>)
 80244a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80244a8:	095b      	lsrs	r3, r3, #5
 80244aa:	79fa      	ldrb	r2, [r7, #7]
 80244ac:	f002 021f 	and.w	r2, r2, #31
 80244b0:	2001      	movs	r0, #1
 80244b2:	fa00 f202 	lsl.w	r2, r0, r2
 80244b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80244ba:	370c      	adds	r7, #12
 80244bc:	46bd      	mov	sp, r7
 80244be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244c2:	4770      	bx	lr
 80244c4:	e000e100 	.word	0xe000e100

080244c8 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80244c8:	b480      	push	{r7}
 80244ca:	b083      	sub	sp, #12
 80244cc:	af00      	add	r7, sp, #0
 80244ce:	4603      	mov	r3, r0
 80244d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80244d2:	4909      	ldr	r1, [pc, #36]	; (80244f8 <NVIC_DisableIRQ+0x30>)
 80244d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80244d8:	095b      	lsrs	r3, r3, #5
 80244da:	79fa      	ldrb	r2, [r7, #7]
 80244dc:	f002 021f 	and.w	r2, r2, #31
 80244e0:	2001      	movs	r0, #1
 80244e2:	fa00 f202 	lsl.w	r2, r0, r2
 80244e6:	3320      	adds	r3, #32
 80244e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80244ec:	370c      	adds	r7, #12
 80244ee:	46bd      	mov	sp, r7
 80244f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244f4:	4770      	bx	lr
 80244f6:	bf00      	nop
 80244f8:	e000e100 	.word	0xe000e100

080244fc <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80244fc:	b480      	push	{r7}
 80244fe:	b083      	sub	sp, #12
 8024500:	af00      	add	r7, sp, #0
 8024502:	4603      	mov	r3, r0
 8024504:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8024506:	4909      	ldr	r1, [pc, #36]	; (802452c <NVIC_ClearPendingIRQ+0x30>)
 8024508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802450c:	095b      	lsrs	r3, r3, #5
 802450e:	79fa      	ldrb	r2, [r7, #7]
 8024510:	f002 021f 	and.w	r2, r2, #31
 8024514:	2001      	movs	r0, #1
 8024516:	fa00 f202 	lsl.w	r2, r0, r2
 802451a:	3360      	adds	r3, #96	; 0x60
 802451c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8024520:	370c      	adds	r7, #12
 8024522:	46bd      	mov	sp, r7
 8024524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024528:	4770      	bx	lr
 802452a:	bf00      	nop
 802452c:	e000e100 	.word	0xe000e100

08024530 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8024530:	b480      	push	{r7}
 8024532:	b083      	sub	sp, #12
 8024534:	af00      	add	r7, sp, #0
 8024536:	4603      	mov	r3, r0
 8024538:	6039      	str	r1, [r7, #0]
 802453a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 802453c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024540:	2b00      	cmp	r3, #0
 8024542:	da0b      	bge.n	802455c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8024544:	490d      	ldr	r1, [pc, #52]	; (802457c <NVIC_SetPriority+0x4c>)
 8024546:	79fb      	ldrb	r3, [r7, #7]
 8024548:	f003 030f 	and.w	r3, r3, #15
 802454c:	3b04      	subs	r3, #4
 802454e:	683a      	ldr	r2, [r7, #0]
 8024550:	b2d2      	uxtb	r2, r2
 8024552:	0092      	lsls	r2, r2, #2
 8024554:	b2d2      	uxtb	r2, r2
 8024556:	440b      	add	r3, r1
 8024558:	761a      	strb	r2, [r3, #24]
 802455a:	e009      	b.n	8024570 <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802455c:	4908      	ldr	r1, [pc, #32]	; (8024580 <NVIC_SetPriority+0x50>)
 802455e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024562:	683a      	ldr	r2, [r7, #0]
 8024564:	b2d2      	uxtb	r2, r2
 8024566:	0092      	lsls	r2, r2, #2
 8024568:	b2d2      	uxtb	r2, r2
 802456a:	440b      	add	r3, r1
 802456c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8024570:	370c      	adds	r7, #12
 8024572:	46bd      	mov	sp, r7
 8024574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024578:	4770      	bx	lr
 802457a:	bf00      	nop
 802457c:	e000ed00 	.word	0xe000ed00
 8024580:	e000e100 	.word	0xe000e100

08024584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8024584:	b480      	push	{r7}
 8024586:	b089      	sub	sp, #36	; 0x24
 8024588:	af00      	add	r7, sp, #0
 802458a:	60f8      	str	r0, [r7, #12]
 802458c:	60b9      	str	r1, [r7, #8]
 802458e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8024590:	68fb      	ldr	r3, [r7, #12]
 8024592:	f003 0307 	and.w	r3, r3, #7
 8024596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8024598:	69fb      	ldr	r3, [r7, #28]
 802459a:	f1c3 0307 	rsb	r3, r3, #7
 802459e:	2b06      	cmp	r3, #6
 80245a0:	bf28      	it	cs
 80245a2:	2306      	movcs	r3, #6
 80245a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80245a6:	69fb      	ldr	r3, [r7, #28]
 80245a8:	3306      	adds	r3, #6
 80245aa:	2b06      	cmp	r3, #6
 80245ac:	d902      	bls.n	80245b4 <NVIC_EncodePriority+0x30>
 80245ae:	69fb      	ldr	r3, [r7, #28]
 80245b0:	3b01      	subs	r3, #1
 80245b2:	e000      	b.n	80245b6 <NVIC_EncodePriority+0x32>
 80245b4:	2300      	movs	r3, #0
 80245b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80245b8:	69bb      	ldr	r3, [r7, #24]
 80245ba:	2201      	movs	r2, #1
 80245bc:	fa02 f303 	lsl.w	r3, r2, r3
 80245c0:	1e5a      	subs	r2, r3, #1
 80245c2:	68bb      	ldr	r3, [r7, #8]
 80245c4:	401a      	ands	r2, r3
 80245c6:	697b      	ldr	r3, [r7, #20]
 80245c8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80245ca:	697b      	ldr	r3, [r7, #20]
 80245cc:	2101      	movs	r1, #1
 80245ce:	fa01 f303 	lsl.w	r3, r1, r3
 80245d2:	1e59      	subs	r1, r3, #1
 80245d4:	687b      	ldr	r3, [r7, #4]
 80245d6:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80245d8:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80245da:	4618      	mov	r0, r3
 80245dc:	3724      	adds	r7, #36	; 0x24
 80245de:	46bd      	mov	sp, r7
 80245e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245e4:	4770      	bx	lr
 80245e6:	bf00      	nop

080245e8 <XMC_ETH_MAC_SetPortControl>:
 * - XMC4700 LQFP144 and BGA196 packages
 * - XMC4800 LQFP144 and BGA196 packages
 *
 */
__STATIC_INLINE void XMC_ETH_MAC_SetPortControl(XMC_ETH_MAC_t *const eth_mac, const XMC_ETH_MAC_PORT_CTRL_t port_ctrl)
{
 80245e8:	b480      	push	{r7}
 80245ea:	b083      	sub	sp, #12
 80245ec:	af00      	add	r7, sp, #0
 80245ee:	6078      	str	r0, [r7, #4]
 80245f0:	6039      	str	r1, [r7, #0]
  ETH0_CON->CON = (uint32_t)port_ctrl.raw;
 80245f2:	4a04      	ldr	r2, [pc, #16]	; (8024604 <XMC_ETH_MAC_SetPortControl+0x1c>)
 80245f4:	683b      	ldr	r3, [r7, #0]
 80245f6:	6013      	str	r3, [r2, #0]
}
 80245f8:	370c      	adds	r7, #12
 80245fa:	46bd      	mov	sp, r7
 80245fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024600:	4770      	bx	lr
 8024602:	bf00      	nop
 8024604:	50004040 	.word	0x50004040

08024608 <XMC_ETH_MAC_DisableJumboFrame>:
 *
 * \par
 * The function can be used to disable jumbo frames.
 */
__STATIC_INLINE void XMC_ETH_MAC_DisableJumboFrame(XMC_ETH_MAC_t *const eth_mac)
{
 8024608:	b480      	push	{r7}
 802460a:	b083      	sub	sp, #12
 802460c:	af00      	add	r7, sp, #0
 802460e:	6078      	str	r0, [r7, #4]
  eth_mac->regs->MAC_CONFIGURATION &= (uint32_t)~ETH_MAC_CONFIGURATION_JE_Msk;
 8024610:	687b      	ldr	r3, [r7, #4]
 8024612:	681b      	ldr	r3, [r3, #0]
 8024614:	687a      	ldr	r2, [r7, #4]
 8024616:	6812      	ldr	r2, [r2, #0]
 8024618:	6812      	ldr	r2, [r2, #0]
 802461a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 802461e:	601a      	str	r2, [r3, #0]
}
 8024620:	370c      	adds	r7, #12
 8024622:	46bd      	mov	sp, r7
 8024624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024628:	4770      	bx	lr
 802462a:	bf00      	nop

0802462c <XMC_ETH_MAC_SetLink>:
 * The function sets the link speed and duplex settings.
 */
__STATIC_INLINE void XMC_ETH_MAC_SetLink(XMC_ETH_MAC_t *const eth_mac,
                                         XMC_ETH_LINK_SPEED_t speed,
                                         XMC_ETH_LINK_DUPLEX_t duplex)
{
 802462c:	b480      	push	{r7}
 802462e:	b083      	sub	sp, #12
 8024630:	af00      	add	r7, sp, #0
 8024632:	6078      	str	r0, [r7, #4]
 8024634:	460b      	mov	r3, r1
 8024636:	807b      	strh	r3, [r7, #2]
 8024638:	4613      	mov	r3, r2
 802463a:	803b      	strh	r3, [r7, #0]
  eth_mac->regs->MAC_CONFIGURATION = (eth_mac->regs->MAC_CONFIGURATION &
 802463c:	687b      	ldr	r3, [r7, #4]
 802463e:	681b      	ldr	r3, [r3, #0]
 8024640:	687a      	ldr	r2, [r7, #4]
 8024642:	6812      	ldr	r2, [r2, #0]
 8024644:	6812      	ldr	r2, [r2, #0]
 8024646:	f422 4190 	bic.w	r1, r2, #18432	; 0x4800
                                      (uint32_t)~(ETH_MAC_CONFIGURATION_DM_Msk | ETH_MAC_CONFIGURATION_FES_Msk)) |
                                     (uint32_t)speed | (uint32_t)duplex;
 802464a:	887a      	ldrh	r2, [r7, #2]
__STATIC_INLINE void XMC_ETH_MAC_SetLink(XMC_ETH_MAC_t *const eth_mac,
                                         XMC_ETH_LINK_SPEED_t speed,
                                         XMC_ETH_LINK_DUPLEX_t duplex)
{
  eth_mac->regs->MAC_CONFIGURATION = (eth_mac->regs->MAC_CONFIGURATION &
                                      (uint32_t)~(ETH_MAC_CONFIGURATION_DM_Msk | ETH_MAC_CONFIGURATION_FES_Msk)) |
 802464c:	4311      	orrs	r1, r2
                                     (uint32_t)speed | (uint32_t)duplex;
 802464e:	883a      	ldrh	r2, [r7, #0]
 8024650:	430a      	orrs	r2, r1
 */
__STATIC_INLINE void XMC_ETH_MAC_SetLink(XMC_ETH_MAC_t *const eth_mac,
                                         XMC_ETH_LINK_SPEED_t speed,
                                         XMC_ETH_LINK_DUPLEX_t duplex)
{
  eth_mac->regs->MAC_CONFIGURATION = (eth_mac->regs->MAC_CONFIGURATION &
 8024652:	601a      	str	r2, [r3, #0]
                                      (uint32_t)~(ETH_MAC_CONFIGURATION_DM_Msk | ETH_MAC_CONFIGURATION_FES_Msk)) |
                                     (uint32_t)speed | (uint32_t)duplex;
}
 8024654:	370c      	adds	r7, #12
 8024656:	46bd      	mov	sp, r7
 8024658:	f85d 7b04 	ldr.w	r7, [sp], #4
 802465c:	4770      	bx	lr
 802465e:	bf00      	nop

08024660 <XMC_ETH_MAC_IsRxDescriptorOwnedByDma>:
 *
 * \par
 * The function checks if the RX descriptor is owned by the DMA.
 */
__STATIC_INLINE bool XMC_ETH_MAC_IsRxDescriptorOwnedByDma(XMC_ETH_MAC_t *const eth_mac)
{
 8024660:	b480      	push	{r7}
 8024662:	b083      	sub	sp, #12
 8024664:	af00      	add	r7, sp, #0
 8024666:	6078      	str	r0, [r7, #4]
  return ((eth_mac->rx_desc[eth_mac->rx_index].status & ETH_MAC_DMA_RDES0_OWN) != 0U);
 8024668:	687b      	ldr	r3, [r7, #4]
 802466a:	691a      	ldr	r2, [r3, #16]
 802466c:	687b      	ldr	r3, [r7, #4]
 802466e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8024672:	015b      	lsls	r3, r3, #5
 8024674:	4413      	add	r3, r2
 8024676:	681b      	ldr	r3, [r3, #0]
 8024678:	0fdb      	lsrs	r3, r3, #31
 802467a:	b2db      	uxtb	r3, r3
}
 802467c:	4618      	mov	r0, r3
 802467e:	370c      	adds	r7, #12
 8024680:	46bd      	mov	sp, r7
 8024682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024686:	4770      	bx	lr

08024688 <XMC_ETH_MAC_IsTxDescriptorOwnedByDma>:
 *
 * \par
 * The function checks if the TX descriptor is owned by the DMA.
 */
__STATIC_INLINE bool XMC_ETH_MAC_IsTxDescriptorOwnedByDma(XMC_ETH_MAC_t *const eth_mac)
{
 8024688:	b480      	push	{r7}
 802468a:	b083      	sub	sp, #12
 802468c:	af00      	add	r7, sp, #0
 802468e:	6078      	str	r0, [r7, #4]
  return ((eth_mac->tx_desc[eth_mac->tx_index].status & ETH_MAC_DMA_TDES0_OWN) != 0U);
 8024690:	687b      	ldr	r3, [r7, #4]
 8024692:	695a      	ldr	r2, [r3, #20]
 8024694:	687b      	ldr	r3, [r7, #4]
 8024696:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 802469a:	015b      	lsls	r3, r3, #5
 802469c:	4413      	add	r3, r2
 802469e:	681b      	ldr	r3, [r3, #0]
 80246a0:	0fdb      	lsrs	r3, r3, #31
 80246a2:	b2db      	uxtb	r3, r3
}
 80246a4:	4618      	mov	r0, r3
 80246a6:	370c      	adds	r7, #12
 80246a8:	46bd      	mov	sp, r7
 80246aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246ae:	4770      	bx	lr

080246b0 <XMC_ETH_MAC_EnableRx>:
 * The function enables the receiver state machine of the MAC and puts the
 * receive process in running state. The DMA then acquires the descriptor
 * from the receive list and processes the received frames.
 */
__STATIC_INLINE void XMC_ETH_MAC_EnableRx(XMC_ETH_MAC_t *const eth_mac)
{
 80246b0:	b480      	push	{r7}
 80246b2:	b083      	sub	sp, #12
 80246b4:	af00      	add	r7, sp, #0
 80246b6:	6078      	str	r0, [r7, #4]
  eth_mac->regs->OPERATION_MODE |= (uint32_t)ETH_OPERATION_MODE_SR_Msk;
 80246b8:	687b      	ldr	r3, [r7, #4]
 80246ba:	6819      	ldr	r1, [r3, #0]
 80246bc:	687b      	ldr	r3, [r7, #4]
 80246be:	681b      	ldr	r3, [r3, #0]
 80246c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80246c4:	3318      	adds	r3, #24
 80246c6:	681b      	ldr	r3, [r3, #0]
 80246c8:	f043 0202 	orr.w	r2, r3, #2
 80246cc:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80246d0:	3318      	adds	r3, #24
 80246d2:	601a      	str	r2, [r3, #0]
  eth_mac->regs->MAC_CONFIGURATION |= (uint32_t)ETH_MAC_CONFIGURATION_RE_Msk;
 80246d4:	687b      	ldr	r3, [r7, #4]
 80246d6:	681b      	ldr	r3, [r3, #0]
 80246d8:	687a      	ldr	r2, [r7, #4]
 80246da:	6812      	ldr	r2, [r2, #0]
 80246dc:	6812      	ldr	r2, [r2, #0]
 80246de:	f042 0204 	orr.w	r2, r2, #4
 80246e2:	601a      	str	r2, [r3, #0]
}
 80246e4:	370c      	adds	r7, #12
 80246e6:	46bd      	mov	sp, r7
 80246e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246ec:	4770      	bx	lr
 80246ee:	bf00      	nop

080246f0 <XMC_ETH_MAC_DisableRx>:
 *
 * \par
 * The function disables the receive process.
 */
__STATIC_INLINE void XMC_ETH_MAC_DisableRx(XMC_ETH_MAC_t *const eth_mac)
{
 80246f0:	b480      	push	{r7}
 80246f2:	b083      	sub	sp, #12
 80246f4:	af00      	add	r7, sp, #0
 80246f6:	6078      	str	r0, [r7, #4]
  eth_mac->regs->MAC_CONFIGURATION &= (uint32_t)~ETH_MAC_CONFIGURATION_RE_Msk;
 80246f8:	687b      	ldr	r3, [r7, #4]
 80246fa:	681b      	ldr	r3, [r3, #0]
 80246fc:	687a      	ldr	r2, [r7, #4]
 80246fe:	6812      	ldr	r2, [r2, #0]
 8024700:	6812      	ldr	r2, [r2, #0]
 8024702:	f022 0204 	bic.w	r2, r2, #4
 8024706:	601a      	str	r2, [r3, #0]
  eth_mac->regs->OPERATION_MODE &= (uint32_t)~ETH_OPERATION_MODE_SR_Msk;
 8024708:	687b      	ldr	r3, [r7, #4]
 802470a:	6819      	ldr	r1, [r3, #0]
 802470c:	687b      	ldr	r3, [r7, #4]
 802470e:	681b      	ldr	r3, [r3, #0]
 8024710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8024714:	3318      	adds	r3, #24
 8024716:	681b      	ldr	r3, [r3, #0]
 8024718:	f023 0202 	bic.w	r2, r3, #2
 802471c:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8024720:	3318      	adds	r3, #24
 8024722:	601a      	str	r2, [r3, #0]
}
 8024724:	370c      	adds	r7, #12
 8024726:	46bd      	mov	sp, r7
 8024728:	f85d 7b04 	ldr.w	r7, [sp], #4
 802472c:	4770      	bx	lr
 802472e:	bf00      	nop

08024730 <XMC_ETH_MAC_EnableTx>:
 * The function enables the transmit state machine of the MAC and puts the
 * transmit process in running state. The DMA then checks the TX list at the
 * current position for transmitting a frame.
 */
__STATIC_INLINE void XMC_ETH_MAC_EnableTx(XMC_ETH_MAC_t *const eth_mac)
{
 8024730:	b480      	push	{r7}
 8024732:	b083      	sub	sp, #12
 8024734:	af00      	add	r7, sp, #0
 8024736:	6078      	str	r0, [r7, #4]
  eth_mac->regs->OPERATION_MODE |= (uint32_t)ETH_OPERATION_MODE_ST_Msk;
 8024738:	687b      	ldr	r3, [r7, #4]
 802473a:	6819      	ldr	r1, [r3, #0]
 802473c:	687b      	ldr	r3, [r7, #4]
 802473e:	681b      	ldr	r3, [r3, #0]
 8024740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8024744:	3318      	adds	r3, #24
 8024746:	681b      	ldr	r3, [r3, #0]
 8024748:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 802474c:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8024750:	3318      	adds	r3, #24
 8024752:	601a      	str	r2, [r3, #0]
  eth_mac->regs->MAC_CONFIGURATION |= (uint32_t)ETH_MAC_CONFIGURATION_TE_Msk;
 8024754:	687b      	ldr	r3, [r7, #4]
 8024756:	681b      	ldr	r3, [r3, #0]
 8024758:	687a      	ldr	r2, [r7, #4]
 802475a:	6812      	ldr	r2, [r2, #0]
 802475c:	6812      	ldr	r2, [r2, #0]
 802475e:	f042 0208 	orr.w	r2, r2, #8
 8024762:	601a      	str	r2, [r3, #0]
}
 8024764:	370c      	adds	r7, #12
 8024766:	46bd      	mov	sp, r7
 8024768:	f85d 7b04 	ldr.w	r7, [sp], #4
 802476c:	4770      	bx	lr
 802476e:	bf00      	nop

08024770 <XMC_ETH_MAC_DisableTx>:
 *
 * \par
 * The function disables the transmit process.
 */
__STATIC_INLINE void XMC_ETH_MAC_DisableTx(XMC_ETH_MAC_t *const eth_mac)
{
 8024770:	b480      	push	{r7}
 8024772:	b083      	sub	sp, #12
 8024774:	af00      	add	r7, sp, #0
 8024776:	6078      	str	r0, [r7, #4]
  eth_mac->regs->MAC_CONFIGURATION &= (uint32_t)~ETH_MAC_CONFIGURATION_TE_Msk;
 8024778:	687b      	ldr	r3, [r7, #4]
 802477a:	681b      	ldr	r3, [r3, #0]
 802477c:	687a      	ldr	r2, [r7, #4]
 802477e:	6812      	ldr	r2, [r2, #0]
 8024780:	6812      	ldr	r2, [r2, #0]
 8024782:	f022 0208 	bic.w	r2, r2, #8
 8024786:	601a      	str	r2, [r3, #0]
  eth_mac->regs->OPERATION_MODE &= (uint32_t)~ETH_OPERATION_MODE_ST_Msk;
 8024788:	687b      	ldr	r3, [r7, #4]
 802478a:	6819      	ldr	r1, [r3, #0]
 802478c:	687b      	ldr	r3, [r7, #4]
 802478e:	681b      	ldr	r3, [r3, #0]
 8024790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8024794:	3318      	adds	r3, #24
 8024796:	681b      	ldr	r3, [r3, #0]
 8024798:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 802479c:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80247a0:	3318      	adds	r3, #24
 80247a2:	601a      	str	r2, [r3, #0]
}
 80247a4:	370c      	adds	r7, #12
 80247a6:	46bd      	mov	sp, r7
 80247a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80247ac:	4770      	bx	lr
 80247ae:	bf00      	nop

080247b0 <XMC_ETH_MAC_ResumeTx>:
 * current descriptor pointed to by the "current host transmit descriptor" reg.
 * If that descriptor is not available (owned by the CPU), the transmission
 * returns to the suspend state else the transmission resumes.
 */
__STATIC_INLINE void XMC_ETH_MAC_ResumeTx(XMC_ETH_MAC_t *const eth_mac)
{
 80247b0:	b480      	push	{r7}
 80247b2:	b083      	sub	sp, #12
 80247b4:	af00      	add	r7, sp, #0
 80247b6:	6078      	str	r0, [r7, #4]
  eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_TPS_Msk;
 80247b8:	687b      	ldr	r3, [r7, #4]
 80247ba:	681b      	ldr	r3, [r3, #0]
 80247bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80247c0:	3314      	adds	r3, #20
 80247c2:	2202      	movs	r2, #2
 80247c4:	601a      	str	r2, [r3, #0]
  eth_mac->regs->TRANSMIT_POLL_DEMAND = 0U;
 80247c6:	687b      	ldr	r3, [r7, #4]
 80247c8:	681b      	ldr	r3, [r3, #0]
 80247ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80247ce:	3304      	adds	r3, #4
 80247d0:	2200      	movs	r2, #0
 80247d2:	601a      	str	r2, [r3, #0]
}
 80247d4:	370c      	adds	r7, #12
 80247d6:	46bd      	mov	sp, r7
 80247d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80247dc:	4770      	bx	lr
 80247de:	bf00      	nop

080247e0 <XMC_ETH_MAC_ResumeRx>:
 * current descriptor pointed to by the "current host transmit descriptor" reg.
 * If that descriptor is not available (owned by the CPU), the transmission
 * returns to the suspend state else the transmission resumes.
 */
__STATIC_INLINE void XMC_ETH_MAC_ResumeRx(XMC_ETH_MAC_t *const eth_mac)
{
 80247e0:	b480      	push	{r7}
 80247e2:	b083      	sub	sp, #12
 80247e4:	af00      	add	r7, sp, #0
 80247e6:	6078      	str	r0, [r7, #4]
  eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_RU_Msk;
 80247e8:	687b      	ldr	r3, [r7, #4]
 80247ea:	681b      	ldr	r3, [r3, #0]
 80247ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80247f0:	3314      	adds	r3, #20
 80247f2:	2280      	movs	r2, #128	; 0x80
 80247f4:	601a      	str	r2, [r3, #0]
  eth_mac->regs->RECEIVE_POLL_DEMAND = 0U;
 80247f6:	687b      	ldr	r3, [r7, #4]
 80247f8:	681b      	ldr	r3, [r3, #0]
 80247fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80247fe:	3308      	adds	r3, #8
 8024800:	2200      	movs	r2, #0
 8024802:	601a      	str	r2, [r3, #0]
}
 8024804:	370c      	adds	r7, #12
 8024806:	46bd      	mov	sp, r7
 8024808:	f85d 7b04 	ldr.w	r7, [sp], #4
 802480c:	4770      	bx	lr
 802480e:	bf00      	nop

08024810 <XMC_ETH_MAC_GetTxBuffer>:
 *
 * \par<b>Description: </b><br>
 * Returns the current TX buffer.
 */
__STATIC_INLINE uint8_t *XMC_ETH_MAC_GetTxBuffer(XMC_ETH_MAC_t *const eth_mac)
{
 8024810:	b480      	push	{r7}
 8024812:	b083      	sub	sp, #12
 8024814:	af00      	add	r7, sp, #0
 8024816:	6078      	str	r0, [r7, #4]
  return (uint8_t *)(eth_mac->tx_desc[eth_mac->tx_index].buffer1);
 8024818:	687b      	ldr	r3, [r7, #4]
 802481a:	695a      	ldr	r2, [r3, #20]
 802481c:	687b      	ldr	r3, [r7, #4]
 802481e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8024822:	015b      	lsls	r3, r3, #5
 8024824:	4413      	add	r3, r2
 8024826:	689b      	ldr	r3, [r3, #8]
}
 8024828:	4618      	mov	r0, r3
 802482a:	370c      	adds	r7, #12
 802482c:	46bd      	mov	sp, r7
 802482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024832:	4770      	bx	lr

08024834 <XMC_ETH_MAC_GetRxBuffer>:
 *
 * \par<b>Description: </b><br>
 * Returns the current RX buffer.
 */
__STATIC_INLINE uint8_t *XMC_ETH_MAC_GetRxBuffer(XMC_ETH_MAC_t *const eth_mac)
{
 8024834:	b480      	push	{r7}
 8024836:	b083      	sub	sp, #12
 8024838:	af00      	add	r7, sp, #0
 802483a:	6078      	str	r0, [r7, #4]
  return (uint8_t *)(eth_mac->rx_desc[eth_mac->rx_index].buffer1); 
 802483c:	687b      	ldr	r3, [r7, #4]
 802483e:	691a      	ldr	r2, [r3, #16]
 8024840:	687b      	ldr	r3, [r7, #4]
 8024842:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8024846:	015b      	lsls	r3, r3, #5
 8024848:	4413      	add	r3, r2
 802484a:	689b      	ldr	r3, [r3, #8]
}
 802484c:	4618      	mov	r0, r3
 802484e:	370c      	adds	r7, #12
 8024850:	46bd      	mov	sp, r7
 8024852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024856:	4770      	bx	lr

08024858 <XMC_ETH_MAC_SetTxBufferSize>:
 *
 * \par<b>Description: </b><br>
 * Sets the current TX buffer size.
 */
__STATIC_INLINE void XMC_ETH_MAC_SetTxBufferSize(XMC_ETH_MAC_t *const eth_mac, uint32_t size)
{
 8024858:	b480      	push	{r7}
 802485a:	b083      	sub	sp, #12
 802485c:	af00      	add	r7, sp, #0
 802485e:	6078      	str	r0, [r7, #4]
 8024860:	6039      	str	r1, [r7, #0]
  eth_mac->tx_desc[eth_mac->tx_index].length = size;
 8024862:	687b      	ldr	r3, [r7, #4]
 8024864:	695a      	ldr	r2, [r3, #20]
 8024866:	687b      	ldr	r3, [r7, #4]
 8024868:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 802486c:	015b      	lsls	r3, r3, #5
 802486e:	4413      	add	r3, r2
 8024870:	683a      	ldr	r2, [r7, #0]
 8024872:	605a      	str	r2, [r3, #4]
}
 8024874:	370c      	adds	r7, #12
 8024876:	46bd      	mov	sp, r7
 8024878:	f85d 7b04 	ldr.w	r7, [sp], #4
 802487c:	4770      	bx	lr
 802487e:	bf00      	nop

08024880 <ethernetif_link_callback>:
err_t ethernetif_init(struct netif *netif);
static void ethernetif_link_callback(struct netif *netif);
static void ethernetif_link_status(void *args);

static void ethernetif_link_callback(struct netif *netif)
{
 8024880:	b580      	push	{r7, lr}
 8024882:	b086      	sub	sp, #24
 8024884:	af00      	add	r7, sp, #0
 8024886:	6078      	str	r0, [r7, #4]
  XMC_ETH_LINK_SPEED_t speed;
  XMC_ETH_LINK_DUPLEX_t duplex;
  bool phy_autoneg_state;
  uint32_t retries = 0U;
 8024888:	2300      	movs	r3, #0
 802488a:	617b      	str	r3, [r7, #20]
  int32_t status;

  if (netif_is_link_up(netif))
 802488c:	687b      	ldr	r3, [r7, #4]
 802488e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8024892:	f003 0310 	and.w	r3, r3, #16
 8024896:	2b00      	cmp	r3, #0
 8024898:	d05d      	beq.n	8024956 <ethernetif_link_callback+0xd6>
  {
    if((status = XMC_ETH_PHY_Init(&eth_mac, ETH_LWIP_0_PHY_ADDR, &eth_phy_config)) != XMC_ETH_PHY_STATUS_OK)
 802489a:	4838      	ldr	r0, [pc, #224]	; (802497c <ethernetif_link_callback+0xfc>)
 802489c:	2100      	movs	r1, #0
 802489e:	4a38      	ldr	r2, [pc, #224]	; (8024980 <ethernetif_link_callback+0x100>)
 80248a0:	f003 fd04 	bl	80282ac <XMC_ETH_PHY_Init>
 80248a4:	6138      	str	r0, [r7, #16]
 80248a6:	693b      	ldr	r3, [r7, #16]
 80248a8:	2b00      	cmp	r3, #0
 80248aa:	d004      	beq.n	80248b6 <ethernetif_link_callback+0x36>
    {
      ETH_LWIP_Error((ETH_LWIP_ERROR_t)status);
 80248ac:	693b      	ldr	r3, [r7, #16]
 80248ae:	b2db      	uxtb	r3, r3
 80248b0:	4618      	mov	r0, r3
 80248b2:	f000 fa63 	bl	8024d7c <ETH_LWIP_Error>
    }

    /* If autonegotiation is enabled */
    do {
      phy_autoneg_state = XMC_ETH_PHY_IsAutonegotiationCompleted(&eth_mac, ETH_LWIP_0_PHY_ADDR);
 80248b6:	4831      	ldr	r0, [pc, #196]	; (802497c <ethernetif_link_callback+0xfc>)
 80248b8:	2100      	movs	r1, #0
 80248ba:	f003 fdbd 	bl	8028438 <XMC_ETH_PHY_IsAutonegotiationCompleted>
 80248be:	4603      	mov	r3, r0
 80248c0:	73fb      	strb	r3, [r7, #15]
      retries++;
 80248c2:	697b      	ldr	r3, [r7, #20]
 80248c4:	3301      	adds	r3, #1
 80248c6:	617b      	str	r3, [r7, #20]
    } while ((phy_autoneg_state == false) && (retries < ETH_LWIP_PHY_MAX_RETRIES));
 80248c8:	7bfb      	ldrb	r3, [r7, #15]
 80248ca:	f083 0301 	eor.w	r3, r3, #1
 80248ce:	b2db      	uxtb	r3, r3
 80248d0:	2b00      	cmp	r3, #0
 80248d2:	d003      	beq.n	80248dc <ethernetif_link_callback+0x5c>
 80248d4:	697b      	ldr	r3, [r7, #20]
 80248d6:	4a2b      	ldr	r2, [pc, #172]	; (8024984 <ethernetif_link_callback+0x104>)
 80248d8:	4293      	cmp	r3, r2
 80248da:	d9ec      	bls.n	80248b6 <ethernetif_link_callback+0x36>
    
    if(phy_autoneg_state == false)
 80248dc:	7bfb      	ldrb	r3, [r7, #15]
 80248de:	f083 0301 	eor.w	r3, r3, #1
 80248e2:	b2db      	uxtb	r3, r3
 80248e4:	2b00      	cmp	r3, #0
 80248e6:	d002      	beq.n	80248ee <ethernetif_link_callback+0x6e>
    {
      ETH_LWIP_Error(ETH_LWIP_ERROR_PHY_TIMEOUT);
 80248e8:	2004      	movs	r0, #4
 80248ea:	f000 fa47 	bl	8024d7c <ETH_LWIP_Error>
    }
	
    speed = XMC_ETH_PHY_GetLinkSpeed(&eth_mac, ETH_LWIP_0_PHY_ADDR);
 80248ee:	4823      	ldr	r0, [pc, #140]	; (802497c <ethernetif_link_callback+0xfc>)
 80248f0:	2100      	movs	r1, #0
 80248f2:	f003 fd69 	bl	80283c8 <XMC_ETH_PHY_GetLinkSpeed>
 80248f6:	4603      	mov	r3, r0
 80248f8:	81bb      	strh	r3, [r7, #12]
    duplex = XMC_ETH_PHY_GetLinkDuplex(&eth_mac, ETH_LWIP_0_PHY_ADDR);
 80248fa:	4820      	ldr	r0, [pc, #128]	; (802497c <ethernetif_link_callback+0xfc>)
 80248fc:	2100      	movs	r1, #0
 80248fe:	f003 fd7f 	bl	8028400 <XMC_ETH_PHY_GetLinkDuplex>
 8024902:	4603      	mov	r3, r0
 8024904:	817b      	strh	r3, [r7, #10]
	
    XMC_ETH_MAC_SetLink(&eth_mac, speed, duplex);
 8024906:	89ba      	ldrh	r2, [r7, #12]
 8024908:	897b      	ldrh	r3, [r7, #10]
 802490a:	481c      	ldr	r0, [pc, #112]	; (802497c <ethernetif_link_callback+0xfc>)
 802490c:	4611      	mov	r1, r2
 802490e:	461a      	mov	r2, r3
 8024910:	f7ff fe8c 	bl	802462c <XMC_ETH_MAC_SetLink>
    /* Enable ethernet interrupts */
    XMC_ETH_MAC_EnableEvent(&eth_mac, (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE);
 8024914:	4819      	ldr	r0, [pc, #100]	; (802497c <ethernetif_link_callback+0xfc>)
 8024916:	2140      	movs	r1, #64	; 0x40
 8024918:	f7fd fac2 	bl	8021ea0 <XMC_ETH_MAC_EnableEvent>

    NVIC_SetPriority((IRQn_Type)108, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 63U, 0U));
 802491c:	f7ff fdae 	bl	802447c <NVIC_GetPriorityGrouping>
 8024920:	4603      	mov	r3, r0
 8024922:	4618      	mov	r0, r3
 8024924:	213f      	movs	r1, #63	; 0x3f
 8024926:	2200      	movs	r2, #0
 8024928:	f7ff fe2c 	bl	8024584 <NVIC_EncodePriority>
 802492c:	4603      	mov	r3, r0
 802492e:	206c      	movs	r0, #108	; 0x6c
 8024930:	4619      	mov	r1, r3
 8024932:	f7ff fdfd 	bl	8024530 <NVIC_SetPriority>
    NVIC_ClearPendingIRQ((IRQn_Type)108);
 8024936:	206c      	movs	r0, #108	; 0x6c
 8024938:	f7ff fde0 	bl	80244fc <NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ((IRQn_Type)108);
 802493c:	206c      	movs	r0, #108	; 0x6c
 802493e:	f7ff fdab 	bl	8024498 <NVIC_EnableIRQ>
    XMC_ETH_MAC_EnableTx(&eth_mac);
 8024942:	480e      	ldr	r0, [pc, #56]	; (802497c <ethernetif_link_callback+0xfc>)
 8024944:	f7ff fef4 	bl	8024730 <XMC_ETH_MAC_EnableTx>
    XMC_ETH_MAC_EnableRx(&eth_mac);
 8024948:	480c      	ldr	r0, [pc, #48]	; (802497c <ethernetif_link_callback+0xfc>)
 802494a:	f7ff feb1 	bl	80246b0 <XMC_ETH_MAC_EnableRx>
#elif LWIP_AUTOIP == 1
    /* Start AUTOIP probing */
    autoip_start(&xnetif);
#else
    /* When the netif is fully configured this function must be called. */
    netif_set_up(&xnetif);
 802494e:	480e      	ldr	r0, [pc, #56]	; (8024988 <ethernetif_link_callback+0x108>)
 8024950:	f002 fc9c 	bl	802728c <netif_set_up>
 8024954:	e00f      	b.n	8024976 <ethernetif_link_callback+0xf6>

  }
  else
  {
    /* Enable ethernet interrupts */
    XMC_ETH_MAC_DisableEvent(&eth_mac, (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE);
 8024956:	4809      	ldr	r0, [pc, #36]	; (802497c <ethernetif_link_callback+0xfc>)
 8024958:	2140      	movs	r1, #64	; 0x40
 802495a:	f7fd fad9 	bl	8021f10 <XMC_ETH_MAC_DisableEvent>
    NVIC_DisableIRQ((IRQn_Type)108);
 802495e:	206c      	movs	r0, #108	; 0x6c
 8024960:	f7ff fdb2 	bl	80244c8 <NVIC_DisableIRQ>

    XMC_ETH_MAC_DisableTx(&eth_mac);
 8024964:	4805      	ldr	r0, [pc, #20]	; (802497c <ethernetif_link_callback+0xfc>)
 8024966:	f7ff ff03 	bl	8024770 <XMC_ETH_MAC_DisableTx>
    XMC_ETH_MAC_DisableRx(&eth_mac);
 802496a:	4804      	ldr	r0, [pc, #16]	; (802497c <ethernetif_link_callback+0xfc>)
 802496c:	f7ff fec0 	bl	80246f0 <XMC_ETH_MAC_DisableRx>
#elif LWIP_AUTOIP == 1
    /* Stop AUTOIP probing */
    autoip_stop(&xnetif);
#else
    /* When the netif link is down, set the status down. */
    netif_set_down(&xnetif);
 8024970:	4805      	ldr	r0, [pc, #20]	; (8024988 <ethernetif_link_callback+0x108>)
 8024972:	f002 fcc1 	bl	80272f8 <netif_set_down>
#endif

  }
}
 8024976:	3718      	adds	r7, #24
 8024978:	46bd      	mov	sp, r7
 802497a:	bd80      	pop	{r7, pc}
 802497c:	1ffe8a20 	.word	0x1ffe8a20
 8024980:	08029fec 	.word	0x08029fec
 8024984:	000ffffe 	.word	0x000ffffe
 8024988:	1ffe8a50 	.word	0x1ffe8a50

0802498c <ethernetif_link_status>:

static void ethernetif_link_status(void *args)
{
 802498c:	b580      	push	{r7, lr}
 802498e:	b082      	sub	sp, #8
 8024990:	af00      	add	r7, sp, #0
 8024992:	6078      	str	r0, [r7, #4]

  if (XMC_ETH_PHY_GetLinkStatus(&eth_mac, ETH_LWIP_0_PHY_ADDR) == XMC_ETH_LINK_STATUS_DOWN)
 8024994:	4812      	ldr	r0, [pc, #72]	; (80249e0 <ethernetif_link_status+0x54>)
 8024996:	2100      	movs	r1, #0
 8024998:	f003 fcfc 	bl	8028394 <XMC_ETH_PHY_GetLinkStatus>
 802499c:	4603      	mov	r3, r0
 802499e:	2b00      	cmp	r3, #0
 80249a0:	d10a      	bne.n	80249b8 <ethernetif_link_status+0x2c>
  {
    if (netif_is_link_up(&xnetif))
 80249a2:	4b10      	ldr	r3, [pc, #64]	; (80249e4 <ethernetif_link_status+0x58>)
 80249a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80249a8:	f003 0310 	and.w	r3, r3, #16
 80249ac:	2b00      	cmp	r3, #0
 80249ae:	d00d      	beq.n	80249cc <ethernetif_link_status+0x40>
    {
      netif_set_link_down(&xnetif);
 80249b0:	480c      	ldr	r0, [pc, #48]	; (80249e4 <ethernetif_link_status+0x58>)
 80249b2:	f002 fd01 	bl	80273b8 <netif_set_link_down>
 80249b6:	e009      	b.n	80249cc <ethernetif_link_status+0x40>
    }
  }
  else
  {
    if (!netif_is_link_up(&xnetif))
 80249b8:	4b0a      	ldr	r3, [pc, #40]	; (80249e4 <ethernetif_link_status+0x58>)
 80249ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80249be:	f003 0310 	and.w	r3, r3, #16
 80249c2:	2b00      	cmp	r3, #0
 80249c4:	d102      	bne.n	80249cc <ethernetif_link_status+0x40>
    {
      netif_set_link_up(&xnetif);
 80249c6:	4807      	ldr	r0, [pc, #28]	; (80249e4 <ethernetif_link_status+0x58>)
 80249c8:	f002 fcb8 	bl	802733c <netif_set_link_up>
    }
  }

  sys_timeout(1000U, ethernetif_link_status, NULL);
 80249cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80249d0:	4905      	ldr	r1, [pc, #20]	; (80249e8 <ethernetif_link_status+0x5c>)
 80249d2:	2200      	movs	r2, #0
 80249d4:	f003 f8a2 	bl	8027b1c <sys_timeout>

}
 80249d8:	3708      	adds	r7, #8
 80249da:	46bd      	mov	sp, r7
 80249dc:	bd80      	pop	{r7, pc}
 80249de:	bf00      	nop
 80249e0:	1ffe8a20 	.word	0x1ffe8a20
 80249e4:	1ffe8a50 	.word	0x1ffe8a50
 80249e8:	0802498d 	.word	0x0802498d

080249ec <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80249ec:	b580      	push	{r7, lr}
 80249ee:	b086      	sub	sp, #24
 80249f0:	af00      	add	r7, sp, #0
 80249f2:	6078      	str	r0, [r7, #4]
  XMC_ETH_MAC_PORT_CTRL_t port_control;
  XMC_GPIO_CONFIG_t gpio_config;
  gpio_config.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 80249f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80249f8:	60fb      	str	r3, [r7, #12]
  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 80249fa:	2300      	movs	r3, #0
 80249fc:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_CRS_DV, &gpio_config);
 80249fe:	f107 0308 	add.w	r3, r7, #8
 8024a02:	4847      	ldr	r0, [pc, #284]	; (8024b20 <low_level_init+0x134>)
 8024a04:	2109      	movs	r1, #9
 8024a06:	461a      	mov	r2, r3
 8024a08:	f7fb fc70 	bl	80202ec <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 8024a0c:	2300      	movs	r3, #0
 8024a0e:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_RXER, &gpio_config);
 8024a10:	f107 0308 	add.w	r3, r7, #8
 8024a14:	4843      	ldr	r0, [pc, #268]	; (8024b24 <low_level_init+0x138>)
 8024a16:	2104      	movs	r1, #4
 8024a18:	461a      	mov	r2, r3
 8024a1a:	f7fb fc67 	bl	80202ec <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 8024a1e:	2300      	movs	r3, #0
 8024a20:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_RXD0, &gpio_config);
 8024a22:	f107 0308 	add.w	r3, r7, #8
 8024a26:	483f      	ldr	r0, [pc, #252]	; (8024b24 <low_level_init+0x138>)
 8024a28:	2102      	movs	r1, #2
 8024a2a:	461a      	mov	r2, r3
 8024a2c:	f7fb fc5e 	bl	80202ec <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 8024a30:	2300      	movs	r3, #0
 8024a32:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_RXD1, &gpio_config);
 8024a34:	f107 0308 	add.w	r3, r7, #8
 8024a38:	483a      	ldr	r0, [pc, #232]	; (8024b24 <low_level_init+0x138>)
 8024a3a:	2103      	movs	r1, #3
 8024a3c:	461a      	mov	r2, r3
 8024a3e:	f7fb fc55 	bl	80202ec <XMC_GPIO_Init>

  gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE;
 8024a42:	2300      	movs	r3, #0
 8024a44:	743b      	strb	r3, [r7, #16]
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8024a46:	2388      	movs	r3, #136	; 0x88
 8024a48:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_TXEN, &gpio_config);
 8024a4a:	f107 0308 	add.w	r3, r7, #8
 8024a4e:	4835      	ldr	r0, [pc, #212]	; (8024b24 <low_level_init+0x138>)
 8024a50:	2105      	movs	r1, #5
 8024a52:	461a      	mov	r2, r3
 8024a54:	f7fb fc4a 	bl	80202ec <XMC_GPIO_Init>

  gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE;
 8024a58:	2300      	movs	r3, #0
 8024a5a:	743b      	strb	r3, [r7, #16]
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8024a5c:	2388      	movs	r3, #136	; 0x88
 8024a5e:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_TXD0, &gpio_config);
 8024a60:	f107 0308 	add.w	r3, r7, #8
 8024a64:	482f      	ldr	r0, [pc, #188]	; (8024b24 <low_level_init+0x138>)
 8024a66:	2108      	movs	r1, #8
 8024a68:	461a      	mov	r2, r3
 8024a6a:	f7fb fc3f 	bl	80202ec <XMC_GPIO_Init>

  gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE;
 8024a6e:	2300      	movs	r3, #0
 8024a70:	743b      	strb	r3, [r7, #16]
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8024a72:	2388      	movs	r3, #136	; 0x88
 8024a74:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_TXD1, &gpio_config);
 8024a76:	f107 0308 	add.w	r3, r7, #8
 8024a7a:	482a      	ldr	r0, [pc, #168]	; (8024b24 <low_level_init+0x138>)
 8024a7c:	2109      	movs	r1, #9
 8024a7e:	461a      	mov	r2, r3
 8024a80:	f7fb fc34 	bl	80202ec <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 8024a84:	2300      	movs	r3, #0
 8024a86:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_RMII_CLK, &gpio_config);
 8024a88:	f107 0308 	add.w	r3, r7, #8
 8024a8c:	4824      	ldr	r0, [pc, #144]	; (8024b20 <low_level_init+0x134>)
 8024a8e:	2108      	movs	r1, #8
 8024a90:	461a      	mov	r2, r3
 8024a92:	f7fb fc2b 	bl	80202ec <XMC_GPIO_Init>

  gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE;
 8024a96:	2300      	movs	r3, #0
 8024a98:	743b      	strb	r3, [r7, #16]
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8024a9a:	2388      	movs	r3, #136	; 0x88
 8024a9c:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_MDC, &gpio_config);
 8024a9e:	f107 0308 	add.w	r3, r7, #8
 8024aa2:	4820      	ldr	r0, [pc, #128]	; (8024b24 <low_level_init+0x138>)
 8024aa4:	2107      	movs	r1, #7
 8024aa6:	461a      	mov	r2, r3
 8024aa8:	f7fb fc20 	bl	80202ec <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 8024aac:	2300      	movs	r3, #0
 8024aae:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_MDIO, &gpio_config);
 8024ab0:	f107 0308 	add.w	r3, r7, #8
 8024ab4:	481b      	ldr	r0, [pc, #108]	; (8024b24 <low_level_init+0x138>)
 8024ab6:	2100      	movs	r1, #0
 8024ab8:	461a      	mov	r2, r3
 8024aba:	f7fb fc17 	bl	80202ec <XMC_GPIO_Init>


  XMC_GPIO_SetHardwareControl(ETH_LWIP_0_MDIO, XMC_GPIO_HWCTRL_PERIPHERAL1);
 8024abe:	4819      	ldr	r0, [pc, #100]	; (8024b24 <low_level_init+0x138>)
 8024ac0:	2100      	movs	r1, #0
 8024ac2:	2201      	movs	r2, #1
 8024ac4:	f7fd fb3e 	bl	8022144 <XMC_GPIO_SetHardwareControl>


  port_control.mode = XMC_ETH_MAC_PORT_CTRL_MODE_RMII;
 8024ac8:	7dfb      	ldrb	r3, [r7, #23]
 8024aca:	f043 0304 	orr.w	r3, r3, #4
 8024ace:	75fb      	strb	r3, [r7, #23]
  port_control.rxd0 = (XMC_ETH_MAC_PORT_CTRL_RXD0_t)0U;
 8024ad0:	7d3b      	ldrb	r3, [r7, #20]
 8024ad2:	f36f 0301 	bfc	r3, #0, #2
 8024ad6:	753b      	strb	r3, [r7, #20]
  port_control.rxd1 = (XMC_ETH_MAC_PORT_CTRL_RXD1_t)0U;
 8024ad8:	7d3b      	ldrb	r3, [r7, #20]
 8024ada:	f36f 0383 	bfc	r3, #2, #2
 8024ade:	753b      	strb	r3, [r7, #20]
  port_control.clk_rmii = (XMC_ETH_MAC_PORT_CTRL_CLK_RMII_t)2U;
 8024ae0:	7d7b      	ldrb	r3, [r7, #21]
 8024ae2:	2202      	movs	r2, #2
 8024ae4:	f362 0301 	bfi	r3, r2, #0, #2
 8024ae8:	757b      	strb	r3, [r7, #21]
  port_control.crs_dv = (XMC_ETH_MAC_PORT_CTRL_CRS_DV_t)2U;
 8024aea:	7d7b      	ldrb	r3, [r7, #21]
 8024aec:	2202      	movs	r2, #2
 8024aee:	f362 0383 	bfi	r3, r2, #2, #2
 8024af2:	757b      	strb	r3, [r7, #21]
  port_control.rxer = (XMC_ETH_MAC_PORT_CTRL_RXER_t)0U;
 8024af4:	7d7b      	ldrb	r3, [r7, #21]
 8024af6:	f36f 1387 	bfc	r3, #6, #2
 8024afa:	757b      	strb	r3, [r7, #21]
  port_control.mdio = (XMC_ETH_MAC_PORT_CTRL_MDIO_t)1U;
 8024afc:	7dbb      	ldrb	r3, [r7, #22]
 8024afe:	2201      	movs	r2, #1
 8024b00:	f362 1387 	bfi	r3, r2, #6, #2
 8024b04:	75bb      	strb	r3, [r7, #22]
  XMC_ETH_MAC_SetPortControl(&eth_mac, port_control);
 8024b06:	4808      	ldr	r0, [pc, #32]	; (8024b28 <low_level_init+0x13c>)
 8024b08:	6979      	ldr	r1, [r7, #20]
 8024b0a:	f7ff fd6d 	bl	80245e8 <XMC_ETH_MAC_SetPortControl>

  (void)XMC_ETH_MAC_Init(&eth_mac);
 8024b0e:	4806      	ldr	r0, [pc, #24]	; (8024b28 <low_level_init+0x13c>)
 8024b10:	f7fc ffba 	bl	8021a88 <XMC_ETH_MAC_Init>

  XMC_ETH_MAC_DisableJumboFrame(&eth_mac);
 8024b14:	4804      	ldr	r0, [pc, #16]	; (8024b28 <low_level_init+0x13c>)
 8024b16:	f7ff fd77 	bl	8024608 <XMC_ETH_MAC_DisableJumboFrame>


}
 8024b1a:	3718      	adds	r7, #24
 8024b1c:	46bd      	mov	sp, r7
 8024b1e:	bd80      	pop	{r7, pc}
 8024b20:	48028f00 	.word	0x48028f00
 8024b24:	48028200 	.word	0x48028200
 8024b28:	1ffe8a20 	.word	0x1ffe8a20

08024b2c <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8024b2c:	b580      	push	{r7, lr}
 8024b2e:	b086      	sub	sp, #24
 8024b30:	af00      	add	r7, sp, #0
 8024b32:	6078      	str	r0, [r7, #4]
 8024b34:	6039      	str	r1, [r7, #0]
  struct pbuf *q;
  uint32_t framelen = 0U;
 8024b36:	2300      	movs	r3, #0
 8024b38:	613b      	str	r3, [r7, #16]
  uint8_t *buffer;
  
  if (p->tot_len > (u16_t)XMC_ETH_MAC_BUF_SIZE) {
 8024b3a:	683b      	ldr	r3, [r7, #0]
 8024b3c:	891b      	ldrh	r3, [r3, #8]
 8024b3e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8024b42:	4293      	cmp	r3, r2
 8024b44:	d901      	bls.n	8024b4a <low_level_output+0x1e>
    return ERR_BUF;
 8024b46:	23fe      	movs	r3, #254	; 0xfe
 8024b48:	e040      	b.n	8024bcc <low_level_output+0xa0>
  }

  if (XMC_ETH_MAC_IsTxDescriptorOwnedByDma(&eth_mac))
 8024b4a:	4823      	ldr	r0, [pc, #140]	; (8024bd8 <low_level_output+0xac>)
 8024b4c:	f7ff fd9c 	bl	8024688 <XMC_ETH_MAC_IsTxDescriptorOwnedByDma>
 8024b50:	4603      	mov	r3, r0
 8024b52:	2b00      	cmp	r3, #0
 8024b54:	d004      	beq.n	8024b60 <low_level_output+0x34>
  {
    XMC_ETH_MAC_ResumeTx(&eth_mac);
 8024b56:	4820      	ldr	r0, [pc, #128]	; (8024bd8 <low_level_output+0xac>)
 8024b58:	f7ff fe2a 	bl	80247b0 <XMC_ETH_MAC_ResumeTx>

    return ERR_BUF;
 8024b5c:	23fe      	movs	r3, #254	; 0xfe
 8024b5e:	e035      	b.n	8024bcc <low_level_output+0xa0>
  }
  else
  {
    buffer = XMC_ETH_MAC_GetTxBuffer(&eth_mac);
 8024b60:	481d      	ldr	r0, [pc, #116]	; (8024bd8 <low_level_output+0xac>)
 8024b62:	f7ff fe55 	bl	8024810 <XMC_ETH_MAC_GetTxBuffer>
 8024b66:	60f8      	str	r0, [r7, #12]

#if ETH_PAD_SIZE
    pbuf_header(p, -ETH_PAD_SIZE);    /* Drop the padding word */
 8024b68:	6838      	ldr	r0, [r7, #0]
 8024b6a:	f06f 0101 	mvn.w	r1, #1
 8024b6e:	f002 fda5 	bl	80276bc <pbuf_header>
#endif

    for(q = p; q != NULL; q = q->next)
 8024b72:	683b      	ldr	r3, [r7, #0]
 8024b74:	617b      	str	r3, [r7, #20]
 8024b76:	e017      	b.n	8024ba8 <low_level_output+0x7c>
    {
      /* Send the data from the pbuf to the interface, one pbuf at a
       time. The size of the data in each pbuf is kept in the ->len
       variable. */
      MEMCPY(buffer, q->payload, q->len);
 8024b78:	697b      	ldr	r3, [r7, #20]
 8024b7a:	685a      	ldr	r2, [r3, #4]
 8024b7c:	697b      	ldr	r3, [r7, #20]
 8024b7e:	895b      	ldrh	r3, [r3, #10]
 8024b80:	68f8      	ldr	r0, [r7, #12]
 8024b82:	4611      	mov	r1, r2
 8024b84:	461a      	mov	r2, r3
 8024b86:	f000 f90b 	bl	8024da0 <thumb2_memcpy>
      framelen += (uint32_t)q->len;
 8024b8a:	697b      	ldr	r3, [r7, #20]
 8024b8c:	895b      	ldrh	r3, [r3, #10]
 8024b8e:	461a      	mov	r2, r3
 8024b90:	693b      	ldr	r3, [r7, #16]
 8024b92:	4413      	add	r3, r2
 8024b94:	613b      	str	r3, [r7, #16]
      buffer += q->len;
 8024b96:	697b      	ldr	r3, [r7, #20]
 8024b98:	895b      	ldrh	r3, [r3, #10]
 8024b9a:	461a      	mov	r2, r3
 8024b9c:	68fb      	ldr	r3, [r7, #12]
 8024b9e:	4413      	add	r3, r2
 8024ba0:	60fb      	str	r3, [r7, #12]

#if ETH_PAD_SIZE
    pbuf_header(p, -ETH_PAD_SIZE);    /* Drop the padding word */
#endif

    for(q = p; q != NULL; q = q->next)
 8024ba2:	697b      	ldr	r3, [r7, #20]
 8024ba4:	681b      	ldr	r3, [r3, #0]
 8024ba6:	617b      	str	r3, [r7, #20]
 8024ba8:	697b      	ldr	r3, [r7, #20]
 8024baa:	2b00      	cmp	r3, #0
 8024bac:	d1e4      	bne.n	8024b78 <low_level_output+0x4c>
      framelen += (uint32_t)q->len;
      buffer += q->len;
    }

#if ETH_PAD_SIZE
    pbuf_header(p, ETH_PAD_SIZE);    /* Reclaim the padding word */
 8024bae:	6838      	ldr	r0, [r7, #0]
 8024bb0:	2102      	movs	r1, #2
 8024bb2:	f002 fd83 	bl	80276bc <pbuf_header>
#endif

    XMC_ETH_MAC_SetTxBufferSize(&eth_mac, framelen);
 8024bb6:	4808      	ldr	r0, [pc, #32]	; (8024bd8 <low_level_output+0xac>)
 8024bb8:	6939      	ldr	r1, [r7, #16]
 8024bba:	f7ff fe4d 	bl	8024858 <XMC_ETH_MAC_SetTxBufferSize>

    XMC_ETH_MAC_ReturnTxDescriptor(&eth_mac);
 8024bbe:	4806      	ldr	r0, [pc, #24]	; (8024bd8 <low_level_output+0xac>)
 8024bc0:	f7fd fa2a 	bl	8022018 <XMC_ETH_MAC_ReturnTxDescriptor>
    XMC_ETH_MAC_ResumeTx(&eth_mac);
 8024bc4:	4804      	ldr	r0, [pc, #16]	; (8024bd8 <low_level_output+0xac>)
 8024bc6:	f7ff fdf3 	bl	80247b0 <XMC_ETH_MAC_ResumeTx>

    return ERR_OK;
 8024bca:	2300      	movs	r3, #0
 8024bcc:	b25b      	sxtb	r3, r3
  }
}
 8024bce:	4618      	mov	r0, r3
 8024bd0:	3718      	adds	r7, #24
 8024bd2:	46bd      	mov	sp, r7
 8024bd4:	bd80      	pop	{r7, pc}
 8024bd6:	bf00      	nop
 8024bd8:	1ffe8a20 	.word	0x1ffe8a20

08024bdc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
 */
static struct pbuf * low_level_input(void)
{
 8024bdc:	b580      	push	{r7, lr}
 8024bde:	b084      	sub	sp, #16
 8024be0:	af00      	add	r7, sp, #0
  struct pbuf *p = NULL;
 8024be2:	2300      	movs	r3, #0
 8024be4:	60fb      	str	r3, [r7, #12]
  struct pbuf *q;
  uint32_t len;
  uint8_t *buffer;

  if (XMC_ETH_MAC_IsRxDescriptorOwnedByDma(&eth_mac) == false)
 8024be6:	482e      	ldr	r0, [pc, #184]	; (8024ca0 <low_level_input+0xc4>)
 8024be8:	f7ff fd3a 	bl	8024660 <XMC_ETH_MAC_IsRxDescriptorOwnedByDma>
 8024bec:	4603      	mov	r3, r0
 8024bee:	f083 0301 	eor.w	r3, r3, #1
 8024bf2:	b2db      	uxtb	r3, r3
 8024bf4:	2b00      	cmp	r3, #0
 8024bf6:	d04d      	beq.n	8024c94 <low_level_input+0xb8>
  {
    len = XMC_ETH_MAC_GetRxFrameSize(&eth_mac);
 8024bf8:	4829      	ldr	r0, [pc, #164]	; (8024ca0 <low_level_input+0xc4>)
 8024bfa:	f7fd f841 	bl	8021c80 <XMC_ETH_MAC_GetRxFrameSize>
 8024bfe:	6078      	str	r0, [r7, #4]
  
    if ((len > 0U) && (len <= (uint32_t)XMC_ETH_MAC_BUF_SIZE))
 8024c00:	687b      	ldr	r3, [r7, #4]
 8024c02:	2b00      	cmp	r3, #0
 8024c04:	d040      	beq.n	8024c88 <low_level_input+0xac>
 8024c06:	687b      	ldr	r3, [r7, #4]
 8024c08:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8024c0c:	4293      	cmp	r3, r2
 8024c0e:	d83b      	bhi.n	8024c88 <low_level_input+0xac>
    {
#if ETH_PAD_SIZE
    len += ETH_PAD_SIZE;    /* allow room for Ethernet padding */
 8024c10:	687b      	ldr	r3, [r7, #4]
 8024c12:	3302      	adds	r3, #2
 8024c14:	607b      	str	r3, [r7, #4]
#endif
  
      /* We allocate a pbuf chain of pbufs from the pool. */
      p = pbuf_alloc(PBUF_RAW, (u16_t)len, PBUF_POOL);
 8024c16:	687b      	ldr	r3, [r7, #4]
 8024c18:	b29b      	uxth	r3, r3
 8024c1a:	2003      	movs	r0, #3
 8024c1c:	4619      	mov	r1, r3
 8024c1e:	2203      	movs	r2, #3
 8024c20:	f002 fbfa 	bl	8027418 <pbuf_alloc>
 8024c24:	60f8      	str	r0, [r7, #12]
    
      if (p != NULL)
 8024c26:	68fb      	ldr	r3, [r7, #12]
 8024c28:	2b00      	cmp	r3, #0
 8024c2a:	d029      	beq.n	8024c80 <low_level_input+0xa4>
      {
#if ETH_PAD_SIZE
        pbuf_header(p, -ETH_PAD_SIZE);  /* drop the padding word */
 8024c2c:	68f8      	ldr	r0, [r7, #12]
 8024c2e:	f06f 0101 	mvn.w	r1, #1
 8024c32:	f002 fd43 	bl	80276bc <pbuf_header>
#endif
  
        buffer = XMC_ETH_MAC_GetRxBuffer(&eth_mac);
 8024c36:	481a      	ldr	r0, [pc, #104]	; (8024ca0 <low_level_input+0xc4>)
 8024c38:	f7ff fdfc 	bl	8024834 <XMC_ETH_MAC_GetRxBuffer>
 8024c3c:	6038      	str	r0, [r7, #0]
  
        len = 0U;
 8024c3e:	2300      	movs	r3, #0
 8024c40:	607b      	str	r3, [r7, #4]
        /* We iterate over the pbuf chain until we have read the entire
         * packet into the pbuf. */
        for (q = p; q != NULL; q = q->next)
 8024c42:	68fb      	ldr	r3, [r7, #12]
 8024c44:	60bb      	str	r3, [r7, #8]
 8024c46:	e014      	b.n	8024c72 <low_level_input+0x96>
           * This does not necessarily have to be a memcpy, you can also preallocate
           * pbufs for a DMA-enabled MAC and after receiving truncate it to the
           * actually received size. In this case, ensure the tot_len member of the
           * pbuf is the sum of the chained pbuf len members.
           */
           MEMCPY(q->payload, &buffer[len], q->len);
 8024c48:	68bb      	ldr	r3, [r7, #8]
 8024c4a:	6859      	ldr	r1, [r3, #4]
 8024c4c:	683a      	ldr	r2, [r7, #0]
 8024c4e:	687b      	ldr	r3, [r7, #4]
 8024c50:	441a      	add	r2, r3
 8024c52:	68bb      	ldr	r3, [r7, #8]
 8024c54:	895b      	ldrh	r3, [r3, #10]
 8024c56:	4608      	mov	r0, r1
 8024c58:	4611      	mov	r1, r2
 8024c5a:	461a      	mov	r2, r3
 8024c5c:	f000 f8a0 	bl	8024da0 <thumb2_memcpy>
           len += q->len;
 8024c60:	68bb      	ldr	r3, [r7, #8]
 8024c62:	895b      	ldrh	r3, [r3, #10]
 8024c64:	461a      	mov	r2, r3
 8024c66:	687b      	ldr	r3, [r7, #4]
 8024c68:	4413      	add	r3, r2
 8024c6a:	607b      	str	r3, [r7, #4]
        buffer = XMC_ETH_MAC_GetRxBuffer(&eth_mac);
  
        len = 0U;
        /* We iterate over the pbuf chain until we have read the entire
         * packet into the pbuf. */
        for (q = p; q != NULL; q = q->next)
 8024c6c:	68bb      	ldr	r3, [r7, #8]
 8024c6e:	681b      	ldr	r3, [r3, #0]
 8024c70:	60bb      	str	r3, [r7, #8]
 8024c72:	68bb      	ldr	r3, [r7, #8]
 8024c74:	2b00      	cmp	r3, #0
 8024c76:	d1e7      	bne.n	8024c48 <low_level_input+0x6c>
           */
           MEMCPY(q->payload, &buffer[len], q->len);
           len += q->len;
        }
#if ETH_PAD_SIZE
        pbuf_header(p, ETH_PAD_SIZE);    /* Reclaim the padding word */
 8024c78:	68f8      	ldr	r0, [r7, #12]
 8024c7a:	2102      	movs	r1, #2
 8024c7c:	f002 fd1e 	bl	80276bc <pbuf_header>
#endif
  
      }
      XMC_ETH_MAC_ReturnRxDescriptor(&eth_mac);
 8024c80:	4807      	ldr	r0, [pc, #28]	; (8024ca0 <low_level_input+0xc4>)
 8024c82:	f7fd f999 	bl	8021fb8 <XMC_ETH_MAC_ReturnRxDescriptor>
 8024c86:	e002      	b.n	8024c8e <low_level_input+0xb2>
    }
    else
    {
      /* Discard frame */
      XMC_ETH_MAC_ReturnRxDescriptor(&eth_mac);
 8024c88:	4805      	ldr	r0, [pc, #20]	; (8024ca0 <low_level_input+0xc4>)
 8024c8a:	f7fd f995 	bl	8021fb8 <XMC_ETH_MAC_ReturnRxDescriptor>
    }
    XMC_ETH_MAC_ResumeRx(&eth_mac);
 8024c8e:	4804      	ldr	r0, [pc, #16]	; (8024ca0 <low_level_input+0xc4>)
 8024c90:	f7ff fda6 	bl	80247e0 <XMC_ETH_MAC_ResumeRx>
  }
  return p;  
 8024c94:	68fb      	ldr	r3, [r7, #12]
}
 8024c96:	4618      	mov	r0, r3
 8024c98:	3710      	adds	r7, #16
 8024c9a:	46bd      	mov	sp, r7
 8024c9c:	bd80      	pop	{r7, pc}
 8024c9e:	bf00      	nop
 8024ca0:	1ffe8a20 	.word	0x1ffe8a20

08024ca4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void *arg)
{
 8024ca4:	b580      	push	{r7, lr}
 8024ca6:	b086      	sub	sp, #24
 8024ca8:	af00      	add	r7, sp, #0
 8024caa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8024cac:	2300      	movs	r3, #0
 8024cae:	617b      	str	r3, [r7, #20]
  struct eth_hdr *ethhdr;
  struct netif *netif = (struct netif *)arg;
 8024cb0:	687b      	ldr	r3, [r7, #4]
 8024cb2:	613b      	str	r3, [r7, #16]


    p = low_level_input();
 8024cb4:	f7ff ff92 	bl	8024bdc <low_level_input>
 8024cb8:	6178      	str	r0, [r7, #20]

    while (p != NULL)
 8024cba:	e024      	b.n	8024d06 <ethernetif_input+0x62>
    {
   	  ethhdr = p->payload;
 8024cbc:	697b      	ldr	r3, [r7, #20]
 8024cbe:	685b      	ldr	r3, [r3, #4]
 8024cc0:	60fb      	str	r3, [r7, #12]
   	  switch (htons(ethhdr->type))
 8024cc2:	68fb      	ldr	r3, [r7, #12]
 8024cc4:	89db      	ldrh	r3, [r3, #14]
 8024cc6:	b29b      	uxth	r3, r3
 8024cc8:	4618      	mov	r0, r3
 8024cca:	f001 ff27 	bl	8026b1c <lwip_htons>
 8024cce:	4603      	mov	r3, r0
 8024cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8024cd4:	d003      	beq.n	8024cde <ethernetif_input+0x3a>
 8024cd6:	f640 0206 	movw	r2, #2054	; 0x806
 8024cda:	4293      	cmp	r3, r2
 8024cdc:	d10c      	bne.n	8024cf8 <ethernetif_input+0x54>
   	  {
   	    case ETHTYPE_IP:
   	    case ETHTYPE_ARP:
   	      /* full packet send to tcpip_thread to process */
          if (netif->input( p, netif) != ERR_OK)
 8024cde:	693b      	ldr	r3, [r7, #16]
 8024ce0:	691b      	ldr	r3, [r3, #16]
 8024ce2:	6978      	ldr	r0, [r7, #20]
 8024ce4:	6939      	ldr	r1, [r7, #16]
 8024ce6:	4798      	blx	r3
 8024ce8:	4603      	mov	r3, r0
 8024cea:	2b00      	cmp	r3, #0
 8024cec:	d003      	beq.n	8024cf6 <ethernetif_input+0x52>
          {
            pbuf_free(p);
 8024cee:	6978      	ldr	r0, [r7, #20]
 8024cf0:	f002 fd56 	bl	80277a0 <pbuf_free>
          }

          break;
 8024cf4:	e004      	b.n	8024d00 <ethernetif_input+0x5c>
 8024cf6:	e003      	b.n	8024d00 <ethernetif_input+0x5c>

   	    default:
   	      pbuf_free(p);
 8024cf8:	6978      	ldr	r0, [r7, #20]
 8024cfa:	f002 fd51 	bl	80277a0 <pbuf_free>
   	      break;
 8024cfe:	bf00      	nop
   	  }
      
      p = low_level_input();
 8024d00:	f7ff ff6c 	bl	8024bdc <low_level_input>
 8024d04:	6178      	str	r0, [r7, #20]
  struct netif *netif = (struct netif *)arg;


    p = low_level_input();

    while (p != NULL)
 8024d06:	697b      	ldr	r3, [r7, #20]
 8024d08:	2b00      	cmp	r3, #0
 8024d0a:	d1d7      	bne.n	8024cbc <ethernetif_input+0x18>
      
      p = low_level_input();
    }


}
 8024d0c:	3718      	adds	r7, #24
 8024d0e:	46bd      	mov	sp, r7
 8024d10:	bd80      	pop	{r7, pc}
 8024d12:	bf00      	nop

08024d14 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif* netif)
{
 8024d14:	b580      	push	{r7, lr}
 8024d16:	b082      	sub	sp, #8
 8024d18:	af00      	add	r7, sp, #0
 8024d1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));


  netif->output = etharp_output;
 8024d1c:	687b      	ldr	r3, [r7, #4]
 8024d1e:	4a0c      	ldr	r2, [pc, #48]	; (8024d50 <ethernetif_init+0x3c>)
 8024d20:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 8024d22:	687b      	ldr	r3, [r7, #4]
 8024d24:	4a0b      	ldr	r2, [pc, #44]	; (8024d54 <ethernetif_init+0x40>)
 8024d26:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8024d28:	6878      	ldr	r0, [r7, #4]
 8024d2a:	f7ff fe5f 	bl	80249ec <low_level_init>

  sys_timeout(1000U, ethernetif_link_status, NULL);
 8024d2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8024d32:	4909      	ldr	r1, [pc, #36]	; (8024d58 <ethernetif_init+0x44>)
 8024d34:	2200      	movs	r2, #0
 8024d36:	f002 fef1 	bl	8027b1c <sys_timeout>

  netif_set_link_callback(netif, ethernetif_link_callback);
 8024d3a:	6878      	ldr	r0, [r7, #4]
 8024d3c:	4907      	ldr	r1, [pc, #28]	; (8024d5c <ethernetif_init+0x48>)
 8024d3e:	f002 fb5b 	bl	80273f8 <netif_set_link_callback>


  return ERR_OK;
 8024d42:	2300      	movs	r3, #0
 8024d44:	b25b      	sxtb	r3, r3
}
 8024d46:	4618      	mov	r0, r3
 8024d48:	3708      	adds	r7, #8
 8024d4a:	46bd      	mov	sp, r7
 8024d4c:	bd80      	pop	{r7, pc}
 8024d4e:	bf00      	nop
 8024d50:	0802551d 	.word	0x0802551d
 8024d54:	08024b2d 	.word	0x08024b2d
 8024d58:	0802498d 	.word	0x0802498d
 8024d5c:	08024881 	.word	0x08024881

08024d60 <ETH0_0_IRQHandler>:

void IRQ_Hdlr_108(void)
{
 8024d60:	b580      	push	{r7, lr}
 8024d62:	af00      	add	r7, sp, #0
  XMC_ETH_MAC_ClearEventStatus(&eth_mac, XMC_ETH_MAC_EVENT_RECEIVE);
 8024d64:	4803      	ldr	r0, [pc, #12]	; (8024d74 <ETH0_0_IRQHandler+0x14>)
 8024d66:	2140      	movs	r1, #64	; 0x40
 8024d68:	f7fd f8f8 	bl	8021f5c <XMC_ETH_MAC_ClearEventStatus>
    ethernetif_input(&xnetif);
 8024d6c:	4802      	ldr	r0, [pc, #8]	; (8024d78 <ETH0_0_IRQHandler+0x18>)
 8024d6e:	f7ff ff99 	bl	8024ca4 <ethernetif_input>
}
 8024d72:	bd80      	pop	{r7, pc}
 8024d74:	1ffe8a20 	.word	0x1ffe8a20
 8024d78:	1ffe8a50 	.word	0x1ffe8a50

08024d7c <ETH_LWIP_Error>:
    ethernetif_input(&xnetif);
}

/*Weak function to be called incase of error*/
__WEAK void ETH_LWIP_Error (ETH_LWIP_ERROR_t error_code)
{
 8024d7c:	b480      	push	{r7}
 8024d7e:	b083      	sub	sp, #12
 8024d80:	af00      	add	r7, sp, #0
 8024d82:	4603      	mov	r3, r0
 8024d84:	71fb      	strb	r3, [r7, #7]
  switch (error_code)
 8024d86:	79fb      	ldrb	r3, [r7, #7]
 8024d88:	2b03      	cmp	r3, #3
 8024d8a:	d004      	beq.n	8024d96 <ETH_LWIP_Error+0x1a>
 8024d8c:	2b04      	cmp	r3, #4
 8024d8e:	d003      	beq.n	8024d98 <ETH_LWIP_Error+0x1c>
 8024d90:	2b02      	cmp	r3, #2
 8024d92:	d002      	beq.n	8024d9a <ETH_LWIP_Error+0x1e>
 8024d94:	e002      	b.n	8024d9c <ETH_LWIP_Error+0x20>
  {
    case ETH_LWIP_ERROR_PHY_DEVICE_ID:
       /* Wrong PHY address configured in the ETH_LWIP APP Network Interface.
        * Because the connect PHY does not match the configuration or the PHYADR is wrong*/
       break;
 8024d96:	e002      	b.n	8024d9e <ETH_LWIP_Error+0x22>

   case ETH_LWIP_ERROR_PHY_TIMEOUT:
      /* PHY did not respond.*/
      break;
 8024d98:	e001      	b.n	8024d9e <ETH_LWIP_Error+0x22>

   case ETH_LWIP_ERROR_PHY_ERROR:
     /*PHY register update failed*/
     break;
 8024d9a:	e000      	b.n	8024d9e <ETH_LWIP_Error+0x22>

   default:
     break;
 8024d9c:	bf00      	nop
  }

  for (;;);
 8024d9e:	e7fe      	b.n	8024d9e <ETH_LWIP_Error+0x22>

08024da0 <thumb2_memcpy>:
   stack to improve its performance.  It copies 4 bytes at a time and
   unrolls the loop to perform 4 of these copies per loop iteration.
*/
__attribute__((naked)) void thumb2_memcpy(void* pDest, const void* pSource, size_t length)
{
    __asm (
 8024da0:	0913      	lsrs	r3, r2, #4
 8024da2:	d011      	beq.n	8024dc8 <thumb2_memcpy+0x28>
 8024da4:	f851 cb04 	ldr.w	ip, [r1], #4
 8024da8:	f840 cb04 	str.w	ip, [r0], #4
 8024dac:	f851 cb04 	ldr.w	ip, [r1], #4
 8024db0:	f840 cb04 	str.w	ip, [r0], #4
 8024db4:	f851 cb04 	ldr.w	ip, [r1], #4
 8024db8:	f840 cb04 	str.w	ip, [r0], #4
 8024dbc:	f851 cb04 	ldr.w	ip, [r1], #4
 8024dc0:	f840 cb04 	str.w	ip, [r0], #4
 8024dc4:	3b01      	subs	r3, #1
 8024dc6:	d1ed      	bne.n	8024da4 <thumb2_memcpy+0x4>
 8024dc8:	f012 030f 	ands.w	r3, r2, #15
 8024dcc:	d005      	beq.n	8024dda <thumb2_memcpy+0x3a>
 8024dce:	f811 cb01 	ldrb.w	ip, [r1], #1
 8024dd2:	f800 cb01 	strb.w	ip, [r0], #1
 8024dd6:	3b01      	subs	r3, #1
 8024dd8:	d1f9      	bne.n	8024dce <thumb2_memcpy+0x2e>
 8024dda:	4770      	bx	lr

08024ddc <sys_now>:
#include "include/arch/cc.h"
#include "../include/lwip/sys.h"


u32_t sys_now(void)
{
 8024ddc:	b580      	push	{r7, lr}
 8024dde:	af00      	add	r7, sp, #0
  return (u32_t)(SYSTIMER_GetTickCount() * 0.01F);
 8024de0:	f7fe f88e 	bl	8022f00 <SYSTIMER_GetTickCount>
 8024de4:	ee07 0a90 	vmov	s15, r0
 8024de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8024dec:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8024e00 <sys_now+0x24>
 8024df0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024df4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8024df8:	ee17 3a90 	vmov	r3, s15

}
 8024dfc:	4618      	mov	r0, r3
 8024dfe:	bd80      	pop	{r7, pc}
 8024e00:	3c23d70a 	.word	0x3c23d70a

08024e04 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8024e04:	b580      	push	{r7, lr}
 8024e06:	b082      	sub	sp, #8
 8024e08:	af00      	add	r7, sp, #0
 8024e0a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8024e0c:	4915      	ldr	r1, [pc, #84]	; (8024e64 <etharp_free_entry+0x60>)
 8024e0e:	687a      	ldr	r2, [r7, #4]
 8024e10:	4613      	mov	r3, r2
 8024e12:	009b      	lsls	r3, r3, #2
 8024e14:	4413      	add	r3, r2
 8024e16:	009b      	lsls	r3, r3, #2
 8024e18:	440b      	add	r3, r1
 8024e1a:	681b      	ldr	r3, [r3, #0]
 8024e1c:	2b00      	cmp	r3, #0
 8024e1e:	d013      	beq.n	8024e48 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8024e20:	4910      	ldr	r1, [pc, #64]	; (8024e64 <etharp_free_entry+0x60>)
 8024e22:	687a      	ldr	r2, [r7, #4]
 8024e24:	4613      	mov	r3, r2
 8024e26:	009b      	lsls	r3, r3, #2
 8024e28:	4413      	add	r3, r2
 8024e2a:	009b      	lsls	r3, r3, #2
 8024e2c:	440b      	add	r3, r1
 8024e2e:	681b      	ldr	r3, [r3, #0]
 8024e30:	4618      	mov	r0, r3
 8024e32:	f002 fcb5 	bl	80277a0 <pbuf_free>
    arp_table[i].q = NULL;
 8024e36:	490b      	ldr	r1, [pc, #44]	; (8024e64 <etharp_free_entry+0x60>)
 8024e38:	687a      	ldr	r2, [r7, #4]
 8024e3a:	4613      	mov	r3, r2
 8024e3c:	009b      	lsls	r3, r3, #2
 8024e3e:	4413      	add	r3, r2
 8024e40:	009b      	lsls	r3, r3, #2
 8024e42:	440b      	add	r3, r1
 8024e44:	2200      	movs	r2, #0
 8024e46:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8024e48:	4906      	ldr	r1, [pc, #24]	; (8024e64 <etharp_free_entry+0x60>)
 8024e4a:	687a      	ldr	r2, [r7, #4]
 8024e4c:	4613      	mov	r3, r2
 8024e4e:	009b      	lsls	r3, r3, #2
 8024e50:	4413      	add	r3, r2
 8024e52:	009b      	lsls	r3, r3, #2
 8024e54:	440b      	add	r3, r1
 8024e56:	3310      	adds	r3, #16
 8024e58:	2200      	movs	r2, #0
 8024e5a:	709a      	strb	r2, [r3, #2]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8024e5c:	3708      	adds	r7, #8
 8024e5e:	46bd      	mov	sp, r7
 8024e60:	bd80      	pop	{r7, pc}
 8024e62:	bf00      	nop
 8024e64:	1ffe9b38 	.word	0x1ffe9b38

08024e68 <etharp_tmr>:
 * This function should be called every ETHARP_TMR_INTERVAL milliseconds (5 seconds),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8024e68:	b580      	push	{r7, lr}
 8024e6a:	b082      	sub	sp, #8
 8024e6c:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8024e6e:	2300      	movs	r3, #0
 8024e70:	71fb      	strb	r3, [r7, #7]
 8024e72:	e05e      	b.n	8024f32 <etharp_tmr+0xca>
    u8_t state = arp_table[i].state;
 8024e74:	79fa      	ldrb	r2, [r7, #7]
 8024e76:	4932      	ldr	r1, [pc, #200]	; (8024f40 <etharp_tmr+0xd8>)
 8024e78:	4613      	mov	r3, r2
 8024e7a:	009b      	lsls	r3, r3, #2
 8024e7c:	4413      	add	r3, r2
 8024e7e:	009b      	lsls	r3, r3, #2
 8024e80:	440b      	add	r3, r1
 8024e82:	3310      	adds	r3, #16
 8024e84:	789b      	ldrb	r3, [r3, #2]
 8024e86:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8024e88:	79bb      	ldrb	r3, [r7, #6]
 8024e8a:	2b00      	cmp	r3, #0
 8024e8c:	d04e      	beq.n	8024f2c <etharp_tmr+0xc4>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8024e8e:	79fa      	ldrb	r2, [r7, #7]
 8024e90:	492b      	ldr	r1, [pc, #172]	; (8024f40 <etharp_tmr+0xd8>)
 8024e92:	4613      	mov	r3, r2
 8024e94:	009b      	lsls	r3, r3, #2
 8024e96:	4413      	add	r3, r2
 8024e98:	009b      	lsls	r3, r3, #2
 8024e9a:	440b      	add	r3, r1
 8024e9c:	3310      	adds	r3, #16
 8024e9e:	78db      	ldrb	r3, [r3, #3]
 8024ea0:	3301      	adds	r3, #1
 8024ea2:	b2d8      	uxtb	r0, r3
 8024ea4:	4926      	ldr	r1, [pc, #152]	; (8024f40 <etharp_tmr+0xd8>)
 8024ea6:	4613      	mov	r3, r2
 8024ea8:	009b      	lsls	r3, r3, #2
 8024eaa:	4413      	add	r3, r2
 8024eac:	009b      	lsls	r3, r3, #2
 8024eae:	440b      	add	r3, r1
 8024eb0:	3310      	adds	r3, #16
 8024eb2:	4602      	mov	r2, r0
 8024eb4:	70da      	strb	r2, [r3, #3]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8024eb6:	79fa      	ldrb	r2, [r7, #7]
 8024eb8:	4921      	ldr	r1, [pc, #132]	; (8024f40 <etharp_tmr+0xd8>)
 8024eba:	4613      	mov	r3, r2
 8024ebc:	009b      	lsls	r3, r3, #2
 8024ebe:	4413      	add	r3, r2
 8024ec0:	009b      	lsls	r3, r3, #2
 8024ec2:	440b      	add	r3, r1
 8024ec4:	3310      	adds	r3, #16
 8024ec6:	78db      	ldrb	r3, [r3, #3]
 8024ec8:	2bef      	cmp	r3, #239	; 0xef
 8024eca:	d815      	bhi.n	8024ef8 <etharp_tmr+0x90>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8024ecc:	79fa      	ldrb	r2, [r7, #7]
 8024ece:	491c      	ldr	r1, [pc, #112]	; (8024f40 <etharp_tmr+0xd8>)
 8024ed0:	4613      	mov	r3, r2
 8024ed2:	009b      	lsls	r3, r3, #2
 8024ed4:	4413      	add	r3, r2
 8024ed6:	009b      	lsls	r3, r3, #2
 8024ed8:	440b      	add	r3, r1
 8024eda:	3310      	adds	r3, #16
 8024edc:	789b      	ldrb	r3, [r3, #2]
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8024ede:	2b01      	cmp	r3, #1
 8024ee0:	d10f      	bne.n	8024f02 <etharp_tmr+0x9a>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8024ee2:	79fa      	ldrb	r2, [r7, #7]
 8024ee4:	4916      	ldr	r1, [pc, #88]	; (8024f40 <etharp_tmr+0xd8>)
 8024ee6:	4613      	mov	r3, r2
 8024ee8:	009b      	lsls	r3, r3, #2
 8024eea:	4413      	add	r3, r2
 8024eec:	009b      	lsls	r3, r3, #2
 8024eee:	440b      	add	r3, r1
 8024ef0:	3310      	adds	r3, #16
 8024ef2:	78db      	ldrb	r3, [r3, #3]
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8024ef4:	2b01      	cmp	r3, #1
 8024ef6:	d904      	bls.n	8024f02 <etharp_tmr+0x9a>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8024ef8:	79fb      	ldrb	r3, [r7, #7]
 8024efa:	4618      	mov	r0, r3
 8024efc:	f7ff ff82 	bl	8024e04 <etharp_free_entry>
 8024f00:	e014      	b.n	8024f2c <etharp_tmr+0xc4>
      }
      else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING) {
 8024f02:	79fa      	ldrb	r2, [r7, #7]
 8024f04:	490e      	ldr	r1, [pc, #56]	; (8024f40 <etharp_tmr+0xd8>)
 8024f06:	4613      	mov	r3, r2
 8024f08:	009b      	lsls	r3, r3, #2
 8024f0a:	4413      	add	r3, r2
 8024f0c:	009b      	lsls	r3, r3, #2
 8024f0e:	440b      	add	r3, r1
 8024f10:	3310      	adds	r3, #16
 8024f12:	789b      	ldrb	r3, [r3, #2]
 8024f14:	2b03      	cmp	r3, #3
 8024f16:	d109      	bne.n	8024f2c <etharp_tmr+0xc4>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8024f18:	79fa      	ldrb	r2, [r7, #7]
 8024f1a:	4909      	ldr	r1, [pc, #36]	; (8024f40 <etharp_tmr+0xd8>)
 8024f1c:	4613      	mov	r3, r2
 8024f1e:	009b      	lsls	r3, r3, #2
 8024f20:	4413      	add	r3, r2
 8024f22:	009b      	lsls	r3, r3, #2
 8024f24:	440b      	add	r3, r1
 8024f26:	3310      	adds	r3, #16
 8024f28:	2202      	movs	r2, #2
 8024f2a:	709a      	strb	r2, [r3, #2]
{
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8024f2c:	79fb      	ldrb	r3, [r7, #7]
 8024f2e:	3301      	adds	r3, #1
 8024f30:	71fb      	strb	r3, [r7, #7]
 8024f32:	79fb      	ldrb	r3, [r7, #7]
 8024f34:	2b09      	cmp	r3, #9
 8024f36:	d99d      	bls.n	8024e74 <etharp_tmr+0xc>
        /* resend an ARP query here? */
      }
#endif /* ARP_QUEUEING */
    }
  }
}
 8024f38:	3708      	adds	r7, #8
 8024f3a:	46bd      	mov	sp, r7
 8024f3c:	bd80      	pop	{r7, pc}
 8024f3e:	bf00      	nop
 8024f40:	1ffe9b38 	.word	0x1ffe9b38

08024f44 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
 8024f44:	b580      	push	{r7, lr}
 8024f46:	b086      	sub	sp, #24
 8024f48:	af00      	add	r7, sp, #0
 8024f4a:	6078      	str	r0, [r7, #4]
 8024f4c:	460b      	mov	r3, r1
 8024f4e:	70fb      	strb	r3, [r7, #3]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8024f50:	230a      	movs	r3, #10
 8024f52:	75fb      	strb	r3, [r7, #23]
 8024f54:	230a      	movs	r3, #10
 8024f56:	75bb      	strb	r3, [r7, #22]
  s8_t empty = ARP_TABLE_SIZE;
 8024f58:	230a      	movs	r3, #10
 8024f5a:	757b      	strb	r3, [r7, #21]
  u8_t i = 0, age_pending = 0, age_stable = 0;
 8024f5c:	2300      	movs	r3, #0
 8024f5e:	753b      	strb	r3, [r7, #20]
 8024f60:	2300      	movs	r3, #0
 8024f62:	74fb      	strb	r3, [r7, #19]
 8024f64:	2300      	movs	r3, #0
 8024f66:	74bb      	strb	r3, [r7, #18]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8024f68:	230a      	movs	r3, #10
 8024f6a:	747b      	strb	r3, [r7, #17]
  /* its age */
  u8_t age_queue = 0;
 8024f6c:	2300      	movs	r3, #0
 8024f6e:	743b      	strb	r3, [r7, #16]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8024f70:	2300      	movs	r3, #0
 8024f72:	753b      	strb	r3, [r7, #20]
 8024f74:	e084      	b.n	8025080 <etharp_find_entry+0x13c>
    u8_t state = arp_table[i].state;
 8024f76:	7d3a      	ldrb	r2, [r7, #20]
 8024f78:	496b      	ldr	r1, [pc, #428]	; (8025128 <etharp_find_entry+0x1e4>)
 8024f7a:	4613      	mov	r3, r2
 8024f7c:	009b      	lsls	r3, r3, #2
 8024f7e:	4413      	add	r3, r2
 8024f80:	009b      	lsls	r3, r3, #2
 8024f82:	440b      	add	r3, r1
 8024f84:	3310      	adds	r3, #16
 8024f86:	789b      	ldrb	r3, [r3, #2]
 8024f88:	73fb      	strb	r3, [r7, #15]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8024f8a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8024f8e:	2b0a      	cmp	r3, #10
 8024f90:	d105      	bne.n	8024f9e <etharp_find_entry+0x5a>
 8024f92:	7bfb      	ldrb	r3, [r7, #15]
 8024f94:	2b00      	cmp	r3, #0
 8024f96:	d102      	bne.n	8024f9e <etharp_find_entry+0x5a>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8024f98:	7d3b      	ldrb	r3, [r7, #20]
 8024f9a:	757b      	strb	r3, [r7, #21]
 8024f9c:	e06d      	b.n	802507a <etharp_find_entry+0x136>
    } else if (state != ETHARP_STATE_EMPTY) {
 8024f9e:	7bfb      	ldrb	r3, [r7, #15]
 8024fa0:	2b00      	cmp	r3, #0
 8024fa2:	d06a      	beq.n	802507a <etharp_find_entry+0x136>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
 8024fa4:	687b      	ldr	r3, [r7, #4]
 8024fa6:	2b00      	cmp	r3, #0
 8024fa8:	d00d      	beq.n	8024fc6 <etharp_find_entry+0x82>
 8024faa:	687b      	ldr	r3, [r7, #4]
 8024fac:	6819      	ldr	r1, [r3, #0]
 8024fae:	7d3a      	ldrb	r2, [r7, #20]
 8024fb0:	485d      	ldr	r0, [pc, #372]	; (8025128 <etharp_find_entry+0x1e4>)
 8024fb2:	4613      	mov	r3, r2
 8024fb4:	009b      	lsls	r3, r3, #2
 8024fb6:	4413      	add	r3, r2
 8024fb8:	009b      	lsls	r3, r3, #2
 8024fba:	4403      	add	r3, r0
 8024fbc:	685b      	ldr	r3, [r3, #4]
 8024fbe:	4299      	cmp	r1, r3
 8024fc0:	d101      	bne.n	8024fc6 <etharp_find_entry+0x82>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8024fc2:	7d3b      	ldrb	r3, [r7, #20]
 8024fc4:	e0aa      	b.n	802511c <etharp_find_entry+0x1d8>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8024fc6:	7bfb      	ldrb	r3, [r7, #15]
 8024fc8:	2b01      	cmp	r3, #1
 8024fca:	d13b      	bne.n	8025044 <etharp_find_entry+0x100>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8024fcc:	7d3a      	ldrb	r2, [r7, #20]
 8024fce:	4956      	ldr	r1, [pc, #344]	; (8025128 <etharp_find_entry+0x1e4>)
 8024fd0:	4613      	mov	r3, r2
 8024fd2:	009b      	lsls	r3, r3, #2
 8024fd4:	4413      	add	r3, r2
 8024fd6:	009b      	lsls	r3, r3, #2
 8024fd8:	440b      	add	r3, r1
 8024fda:	681b      	ldr	r3, [r3, #0]
 8024fdc:	2b00      	cmp	r3, #0
 8024fde:	d018      	beq.n	8025012 <etharp_find_entry+0xce>
          if (arp_table[i].ctime >= age_queue) {
 8024fe0:	7d3a      	ldrb	r2, [r7, #20]
 8024fe2:	4951      	ldr	r1, [pc, #324]	; (8025128 <etharp_find_entry+0x1e4>)
 8024fe4:	4613      	mov	r3, r2
 8024fe6:	009b      	lsls	r3, r3, #2
 8024fe8:	4413      	add	r3, r2
 8024fea:	009b      	lsls	r3, r3, #2
 8024fec:	440b      	add	r3, r1
 8024fee:	3310      	adds	r3, #16
 8024ff0:	78db      	ldrb	r3, [r3, #3]
 8024ff2:	7c3a      	ldrb	r2, [r7, #16]
 8024ff4:	429a      	cmp	r2, r3
 8024ff6:	d840      	bhi.n	802507a <etharp_find_entry+0x136>
            old_queue = i;
 8024ff8:	7d3b      	ldrb	r3, [r7, #20]
 8024ffa:	747b      	strb	r3, [r7, #17]
            age_queue = arp_table[i].ctime;
 8024ffc:	7d3a      	ldrb	r2, [r7, #20]
 8024ffe:	494a      	ldr	r1, [pc, #296]	; (8025128 <etharp_find_entry+0x1e4>)
 8025000:	4613      	mov	r3, r2
 8025002:	009b      	lsls	r3, r3, #2
 8025004:	4413      	add	r3, r2
 8025006:	009b      	lsls	r3, r3, #2
 8025008:	440b      	add	r3, r1
 802500a:	3310      	adds	r3, #16
 802500c:	78db      	ldrb	r3, [r3, #3]
 802500e:	743b      	strb	r3, [r7, #16]
 8025010:	e033      	b.n	802507a <etharp_find_entry+0x136>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8025012:	7d3a      	ldrb	r2, [r7, #20]
 8025014:	4944      	ldr	r1, [pc, #272]	; (8025128 <etharp_find_entry+0x1e4>)
 8025016:	4613      	mov	r3, r2
 8025018:	009b      	lsls	r3, r3, #2
 802501a:	4413      	add	r3, r2
 802501c:	009b      	lsls	r3, r3, #2
 802501e:	440b      	add	r3, r1
 8025020:	3310      	adds	r3, #16
 8025022:	78db      	ldrb	r3, [r3, #3]
 8025024:	7cfa      	ldrb	r2, [r7, #19]
 8025026:	429a      	cmp	r2, r3
 8025028:	d827      	bhi.n	802507a <etharp_find_entry+0x136>
            old_pending = i;
 802502a:	7d3b      	ldrb	r3, [r7, #20]
 802502c:	75fb      	strb	r3, [r7, #23]
            age_pending = arp_table[i].ctime;
 802502e:	7d3a      	ldrb	r2, [r7, #20]
 8025030:	493d      	ldr	r1, [pc, #244]	; (8025128 <etharp_find_entry+0x1e4>)
 8025032:	4613      	mov	r3, r2
 8025034:	009b      	lsls	r3, r3, #2
 8025036:	4413      	add	r3, r2
 8025038:	009b      	lsls	r3, r3, #2
 802503a:	440b      	add	r3, r1
 802503c:	3310      	adds	r3, #16
 802503e:	78db      	ldrb	r3, [r3, #3]
 8025040:	74fb      	strb	r3, [r7, #19]
 8025042:	e01a      	b.n	802507a <etharp_find_entry+0x136>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8025044:	7bfb      	ldrb	r3, [r7, #15]
 8025046:	2b01      	cmp	r3, #1
 8025048:	d917      	bls.n	802507a <etharp_find_entry+0x136>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 802504a:	7d3a      	ldrb	r2, [r7, #20]
 802504c:	4936      	ldr	r1, [pc, #216]	; (8025128 <etharp_find_entry+0x1e4>)
 802504e:	4613      	mov	r3, r2
 8025050:	009b      	lsls	r3, r3, #2
 8025052:	4413      	add	r3, r2
 8025054:	009b      	lsls	r3, r3, #2
 8025056:	440b      	add	r3, r1
 8025058:	3310      	adds	r3, #16
 802505a:	78db      	ldrb	r3, [r3, #3]
 802505c:	7cba      	ldrb	r2, [r7, #18]
 802505e:	429a      	cmp	r2, r3
 8025060:	d80b      	bhi.n	802507a <etharp_find_entry+0x136>
            old_stable = i;
 8025062:	7d3b      	ldrb	r3, [r7, #20]
 8025064:	75bb      	strb	r3, [r7, #22]
            age_stable = arp_table[i].ctime;
 8025066:	7d3a      	ldrb	r2, [r7, #20]
 8025068:	492f      	ldr	r1, [pc, #188]	; (8025128 <etharp_find_entry+0x1e4>)
 802506a:	4613      	mov	r3, r2
 802506c:	009b      	lsls	r3, r3, #2
 802506e:	4413      	add	r3, r2
 8025070:	009b      	lsls	r3, r3, #2
 8025072:	440b      	add	r3, r1
 8025074:	3310      	adds	r3, #16
 8025076:	78db      	ldrb	r3, [r3, #3]
 8025078:	74bb      	strb	r3, [r7, #18]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802507a:	7d3b      	ldrb	r3, [r7, #20]
 802507c:	3301      	adds	r3, #1
 802507e:	753b      	strb	r3, [r7, #20]
 8025080:	7d3b      	ldrb	r3, [r7, #20]
 8025082:	2b09      	cmp	r3, #9
 8025084:	f67f af77 	bls.w	8024f76 <etharp_find_entry+0x32>
    }
  }
  /* { we have no match } => try to create a new entry */
   
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8025088:	78fb      	ldrb	r3, [r7, #3]
 802508a:	f003 0302 	and.w	r3, r3, #2
 802508e:	2b00      	cmp	r3, #0
 8025090:	d108      	bne.n	80250a4 <etharp_find_entry+0x160>
 8025092:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8025096:	2b0a      	cmp	r3, #10
 8025098:	d106      	bne.n	80250a8 <etharp_find_entry+0x164>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 802509a:	78fb      	ldrb	r3, [r7, #3]
 802509c:	f003 0301 	and.w	r3, r3, #1
 80250a0:	2b00      	cmp	r3, #0
 80250a2:	d101      	bne.n	80250a8 <etharp_find_entry+0x164>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 80250a4:	23ff      	movs	r3, #255	; 0xff
 80250a6:	e039      	b.n	802511c <etharp_find_entry+0x1d8>
   * 
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */ 

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80250a8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80250ac:	2b09      	cmp	r3, #9
 80250ae:	dc02      	bgt.n	80250b6 <etharp_find_entry+0x172>
    i = empty;
 80250b0:	7d7b      	ldrb	r3, [r7, #21]
 80250b2:	753b      	strb	r3, [r7, #20]
 80250b4:	e01a      	b.n	80250ec <etharp_find_entry+0x1a8>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80250b6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80250ba:	2b09      	cmp	r3, #9
 80250bc:	dc02      	bgt.n	80250c4 <etharp_find_entry+0x180>
      /* recycle oldest stable*/
      i = old_stable;
 80250be:	7dbb      	ldrb	r3, [r7, #22]
 80250c0:	753b      	strb	r3, [r7, #20]
 80250c2:	e00f      	b.n	80250e4 <etharp_find_entry+0x1a0>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80250c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80250c8:	2b09      	cmp	r3, #9
 80250ca:	dc02      	bgt.n	80250d2 <etharp_find_entry+0x18e>
      /* recycle oldest pending */
      i = old_pending;
 80250cc:	7dfb      	ldrb	r3, [r7, #23]
 80250ce:	753b      	strb	r3, [r7, #20]
 80250d0:	e008      	b.n	80250e4 <etharp_find_entry+0x1a0>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80250d2:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80250d6:	2b09      	cmp	r3, #9
 80250d8:	dc02      	bgt.n	80250e0 <etharp_find_entry+0x19c>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80250da:	7c7b      	ldrb	r3, [r7, #17]
 80250dc:	753b      	strb	r3, [r7, #20]
 80250de:	e001      	b.n	80250e4 <etharp_find_entry+0x1a0>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 80250e0:	23ff      	movs	r3, #255	; 0xff
 80250e2:	e01b      	b.n	802511c <etharp_find_entry+0x1d8>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 80250e4:	7d3b      	ldrb	r3, [r7, #20]
 80250e6:	4618      	mov	r0, r3
 80250e8:	f7ff fe8c 	bl	8024e04 <etharp_free_entry>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80250ec:	687b      	ldr	r3, [r7, #4]
 80250ee:	2b00      	cmp	r3, #0
 80250f0:	d009      	beq.n	8025106 <etharp_find_entry+0x1c2>
    /* set IP address */
    ip_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80250f2:	7d3a      	ldrb	r2, [r7, #20]
 80250f4:	687b      	ldr	r3, [r7, #4]
 80250f6:	6819      	ldr	r1, [r3, #0]
 80250f8:	480b      	ldr	r0, [pc, #44]	; (8025128 <etharp_find_entry+0x1e4>)
 80250fa:	4613      	mov	r3, r2
 80250fc:	009b      	lsls	r3, r3, #2
 80250fe:	4413      	add	r3, r2
 8025100:	009b      	lsls	r3, r3, #2
 8025102:	4403      	add	r3, r0
 8025104:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8025106:	7d3a      	ldrb	r2, [r7, #20]
 8025108:	4907      	ldr	r1, [pc, #28]	; (8025128 <etharp_find_entry+0x1e4>)
 802510a:	4613      	mov	r3, r2
 802510c:	009b      	lsls	r3, r3, #2
 802510e:	4413      	add	r3, r2
 8025110:	009b      	lsls	r3, r3, #2
 8025112:	440b      	add	r3, r1
 8025114:	3310      	adds	r3, #16
 8025116:	2200      	movs	r2, #0
 8025118:	70da      	strb	r2, [r3, #3]
  return (err_t)i;
 802511a:	7d3b      	ldrb	r3, [r7, #20]
 802511c:	b25b      	sxtb	r3, r3
}
 802511e:	4618      	mov	r0, r3
 8025120:	3718      	adds	r7, #24
 8025122:	46bd      	mov	sp, r7
 8025124:	bd80      	pop	{r7, pc}
 8025126:	bf00      	nop
 8025128:	1ffe9b38 	.word	0x1ffe9b38

0802512c <etharp_send_ip>:
 * @params dst the destination MAC address to be copied into the ethernet header
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t
etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
{
 802512c:	b580      	push	{r7, lr}
 802512e:	b086      	sub	sp, #24
 8025130:	af00      	add	r7, sp, #0
 8025132:	60f8      	str	r0, [r7, #12]
 8025134:	60b9      	str	r1, [r7, #8]
 8025136:	607a      	str	r2, [r7, #4]
 8025138:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
 802513a:	68bb      	ldr	r3, [r7, #8]
 802513c:	685b      	ldr	r3, [r3, #4]
 802513e:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETHARP_HWADDR_LEN));
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8025140:	697b      	ldr	r3, [r7, #20]
 8025142:	3302      	adds	r3, #2
 8025144:	4618      	mov	r0, r3
 8025146:	6839      	ldr	r1, [r7, #0]
 8025148:	2206      	movs	r2, #6
 802514a:	f7ff fe29 	bl	8024da0 <thumb2_memcpy>
  ETHADDR16_COPY(&ethhdr->src, src);
 802514e:	697b      	ldr	r3, [r7, #20]
 8025150:	3308      	adds	r3, #8
 8025152:	4618      	mov	r0, r3
 8025154:	6879      	ldr	r1, [r7, #4]
 8025156:	2206      	movs	r2, #6
 8025158:	f7ff fe22 	bl	8024da0 <thumb2_memcpy>
  ethhdr->type = PP_HTONS(ETHTYPE_IP);
 802515c:	697b      	ldr	r3, [r7, #20]
 802515e:	2200      	movs	r2, #0
 8025160:	f042 0208 	orr.w	r2, r2, #8
 8025164:	739a      	strb	r2, [r3, #14]
 8025166:	2200      	movs	r2, #0
 8025168:	73da      	strb	r2, [r3, #15]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
 802516a:	68fb      	ldr	r3, [r7, #12]
 802516c:	699b      	ldr	r3, [r3, #24]
 802516e:	68f8      	ldr	r0, [r7, #12]
 8025170:	68b9      	ldr	r1, [r7, #8]
 8025172:	4798      	blx	r3
 8025174:	4603      	mov	r3, r0
}
 8025176:	4618      	mov	r0, r3
 8025178:	3718      	adds	r7, #24
 802517a:	46bd      	mov	sp, r7
 802517c:	bd80      	pop	{r7, pc}
 802517e:	bf00      	nop

08025180 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, ip_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8025180:	b580      	push	{r7, lr}
 8025182:	b086      	sub	sp, #24
 8025184:	af00      	add	r7, sp, #0
 8025186:	60f8      	str	r0, [r7, #12]
 8025188:	60b9      	str	r1, [r7, #8]
 802518a:	607a      	str	r2, [r7, #4]
 802518c:	70fb      	strb	r3, [r7, #3]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
 802518e:	68bb      	ldr	r3, [r7, #8]
 8025190:	2b00      	cmp	r3, #0
 8025192:	d012      	beq.n	80251ba <etharp_update_arp_entry+0x3a>
 8025194:	68bb      	ldr	r3, [r7, #8]
 8025196:	681b      	ldr	r3, [r3, #0]
 8025198:	2b00      	cmp	r3, #0
 802519a:	d00e      	beq.n	80251ba <etharp_update_arp_entry+0x3a>
      ip_addr_isbroadcast(ipaddr, netif) ||
 802519c:	68bb      	ldr	r3, [r7, #8]
 802519e:	681b      	ldr	r3, [r3, #0]
 80251a0:	4618      	mov	r0, r3
 80251a2:	68f9      	ldr	r1, [r7, #12]
 80251a4:	f001 fb62 	bl	802686c <ip4_addr_isbroadcast>
 80251a8:	4603      	mov	r3, r0
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
 80251aa:	2b00      	cmp	r3, #0
 80251ac:	d105      	bne.n	80251ba <etharp_update_arp_entry+0x3a>
      ip_addr_isbroadcast(ipaddr, netif) ||
      ip_addr_ismulticast(ipaddr)) {
 80251ae:	68bb      	ldr	r3, [r7, #8]
 80251b0:	681b      	ldr	r3, [r3, #0]
 80251b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
      ip_addr_isbroadcast(ipaddr, netif) ||
 80251b6:	2be0      	cmp	r3, #224	; 0xe0
 80251b8:	d101      	bne.n	80251be <etharp_update_arp_entry+0x3e>
      ip_addr_ismulticast(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80251ba:	23f2      	movs	r3, #242	; 0xf2
 80251bc:	e067      	b.n	802528e <etharp_update_arp_entry+0x10e>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags);
 80251be:	78fb      	ldrb	r3, [r7, #3]
 80251c0:	68b8      	ldr	r0, [r7, #8]
 80251c2:	4619      	mov	r1, r3
 80251c4:	f7ff febe 	bl	8024f44 <etharp_find_entry>
 80251c8:	4603      	mov	r3, r0
 80251ca:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 80251cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80251d0:	2b00      	cmp	r3, #0
 80251d2:	da01      	bge.n	80251d8 <etharp_update_arp_entry+0x58>
    return (err_t)i;
 80251d4:	7dfb      	ldrb	r3, [r7, #23]
 80251d6:	e05a      	b.n	802528e <etharp_update_arp_entry+0x10e>
    arp_table[i].state = ETHARP_STATE_STATIC;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80251d8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80251dc:	492e      	ldr	r1, [pc, #184]	; (8025298 <etharp_update_arp_entry+0x118>)
 80251de:	4613      	mov	r3, r2
 80251e0:	009b      	lsls	r3, r3, #2
 80251e2:	4413      	add	r3, r2
 80251e4:	009b      	lsls	r3, r3, #2
 80251e6:	440b      	add	r3, r1
 80251e8:	3310      	adds	r3, #16
 80251ea:	2202      	movs	r2, #2
 80251ec:	709a      	strb	r2, [r3, #2]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80251ee:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80251f2:	4929      	ldr	r1, [pc, #164]	; (8025298 <etharp_update_arp_entry+0x118>)
 80251f4:	4613      	mov	r3, r2
 80251f6:	009b      	lsls	r3, r3, #2
 80251f8:	4413      	add	r3, r2
 80251fa:	009b      	lsls	r3, r3, #2
 80251fc:	440b      	add	r3, r1
 80251fe:	3308      	adds	r3, #8
 8025200:	68fa      	ldr	r2, [r7, #12]
 8025202:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  snmp_insert_arpidx_tree(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8025204:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8025208:	4613      	mov	r3, r2
 802520a:	009b      	lsls	r3, r3, #2
 802520c:	4413      	add	r3, r2
 802520e:	009b      	lsls	r3, r3, #2
 8025210:	3308      	adds	r3, #8
 8025212:	4a21      	ldr	r2, [pc, #132]	; (8025298 <etharp_update_arp_entry+0x118>)
 8025214:	4413      	add	r3, r2
 8025216:	3304      	adds	r3, #4
 8025218:	4618      	mov	r0, r3
 802521a:	6879      	ldr	r1, [r7, #4]
 802521c:	2206      	movs	r2, #6
 802521e:	f7ff fdbf 	bl	8024da0 <thumb2_memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8025222:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8025226:	491c      	ldr	r1, [pc, #112]	; (8025298 <etharp_update_arp_entry+0x118>)
 8025228:	4613      	mov	r3, r2
 802522a:	009b      	lsls	r3, r3, #2
 802522c:	4413      	add	r3, r2
 802522e:	009b      	lsls	r3, r3, #2
 8025230:	440b      	add	r3, r1
 8025232:	3310      	adds	r3, #16
 8025234:	2200      	movs	r2, #0
 8025236:	70da      	strb	r2, [r3, #3]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8025238:	f997 2017 	ldrsb.w	r2, [r7, #23]
 802523c:	4916      	ldr	r1, [pc, #88]	; (8025298 <etharp_update_arp_entry+0x118>)
 802523e:	4613      	mov	r3, r2
 8025240:	009b      	lsls	r3, r3, #2
 8025242:	4413      	add	r3, r2
 8025244:	009b      	lsls	r3, r3, #2
 8025246:	440b      	add	r3, r1
 8025248:	681b      	ldr	r3, [r3, #0]
 802524a:	2b00      	cmp	r3, #0
 802524c:	d01e      	beq.n	802528c <etharp_update_arp_entry+0x10c>
    struct pbuf *p = arp_table[i].q;
 802524e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8025252:	4911      	ldr	r1, [pc, #68]	; (8025298 <etharp_update_arp_entry+0x118>)
 8025254:	4613      	mov	r3, r2
 8025256:	009b      	lsls	r3, r3, #2
 8025258:	4413      	add	r3, r2
 802525a:	009b      	lsls	r3, r3, #2
 802525c:	440b      	add	r3, r1
 802525e:	681b      	ldr	r3, [r3, #0]
 8025260:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8025262:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8025266:	490c      	ldr	r1, [pc, #48]	; (8025298 <etharp_update_arp_entry+0x118>)
 8025268:	4613      	mov	r3, r2
 802526a:	009b      	lsls	r3, r3, #2
 802526c:	4413      	add	r3, r2
 802526e:	009b      	lsls	r3, r3, #2
 8025270:	440b      	add	r3, r1
 8025272:	2200      	movs	r2, #0
 8025274:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
 8025276:	68fb      	ldr	r3, [r7, #12]
 8025278:	3327      	adds	r3, #39	; 0x27
 802527a:	68f8      	ldr	r0, [r7, #12]
 802527c:	6939      	ldr	r1, [r7, #16]
 802527e:	461a      	mov	r2, r3
 8025280:	687b      	ldr	r3, [r7, #4]
 8025282:	f7ff ff53 	bl	802512c <etharp_send_ip>
    /* free the queued IP packet */
    pbuf_free(p);
 8025286:	6938      	ldr	r0, [r7, #16]
 8025288:	f002 fa8a 	bl	80277a0 <pbuf_free>
  }
  return ERR_OK;
 802528c:	2300      	movs	r3, #0
 802528e:	b25b      	sxtb	r3, r3
}
 8025290:	4618      	mov	r0, r3
 8025292:	3718      	adds	r7, #24
 8025294:	46bd      	mov	sp, r7
 8025296:	bd80      	pop	{r7, pc}
 8025298:	1ffe9b38 	.word	0x1ffe9b38

0802529c <etharp_cleanup_netif>:
 * Remove all ARP table entries of the specified netif.
 *
 * @param netif points to a network interface
 */
void etharp_cleanup_netif(struct netif *netif)
{
 802529c:	b580      	push	{r7, lr}
 802529e:	b084      	sub	sp, #16
 80252a0:	af00      	add	r7, sp, #0
 80252a2:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80252a4:	2300      	movs	r3, #0
 80252a6:	73fb      	strb	r3, [r7, #15]
 80252a8:	e01f      	b.n	80252ea <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 80252aa:	7bfa      	ldrb	r2, [r7, #15]
 80252ac:	4912      	ldr	r1, [pc, #72]	; (80252f8 <etharp_cleanup_netif+0x5c>)
 80252ae:	4613      	mov	r3, r2
 80252b0:	009b      	lsls	r3, r3, #2
 80252b2:	4413      	add	r3, r2
 80252b4:	009b      	lsls	r3, r3, #2
 80252b6:	440b      	add	r3, r1
 80252b8:	3310      	adds	r3, #16
 80252ba:	789b      	ldrb	r3, [r3, #2]
 80252bc:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80252be:	7bbb      	ldrb	r3, [r7, #14]
 80252c0:	2b00      	cmp	r3, #0
 80252c2:	d00f      	beq.n	80252e4 <etharp_cleanup_netif+0x48>
 80252c4:	7bfa      	ldrb	r2, [r7, #15]
 80252c6:	490c      	ldr	r1, [pc, #48]	; (80252f8 <etharp_cleanup_netif+0x5c>)
 80252c8:	4613      	mov	r3, r2
 80252ca:	009b      	lsls	r3, r3, #2
 80252cc:	4413      	add	r3, r2
 80252ce:	009b      	lsls	r3, r3, #2
 80252d0:	440b      	add	r3, r1
 80252d2:	3308      	adds	r3, #8
 80252d4:	681a      	ldr	r2, [r3, #0]
 80252d6:	687b      	ldr	r3, [r7, #4]
 80252d8:	429a      	cmp	r2, r3
 80252da:	d103      	bne.n	80252e4 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 80252dc:	7bfb      	ldrb	r3, [r7, #15]
 80252de:	4618      	mov	r0, r3
 80252e0:	f7ff fd90 	bl	8024e04 <etharp_free_entry>
 */
void etharp_cleanup_netif(struct netif *netif)
{
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80252e4:	7bfb      	ldrb	r3, [r7, #15]
 80252e6:	3301      	adds	r3, #1
 80252e8:	73fb      	strb	r3, [r7, #15]
 80252ea:	7bfb      	ldrb	r3, [r7, #15]
 80252ec:	2b09      	cmp	r3, #9
 80252ee:	d9dc      	bls.n	80252aa <etharp_cleanup_netif+0xe>
    u8_t state = arp_table[i].state;
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
      etharp_free_entry(i);
    }
  }
}
 80252f0:	3710      	adds	r7, #16
 80252f2:	46bd      	mov	sp, r7
 80252f4:	bd80      	pop	{r7, pc}
 80252f6:	bf00      	nop
 80252f8:	1ffe9b38 	.word	0x1ffe9b38

080252fc <etharp_arp_input>:
 *
 * @see pbuf_free()
 */
static void
etharp_arp_input(struct netif *netif, struct eth_addr *ethaddr, struct pbuf *p)
{
 80252fc:	b580      	push	{r7, lr}
 80252fe:	b08a      	sub	sp, #40	; 0x28
 8025300:	af00      	add	r7, sp, #0
 8025302:	60f8      	str	r0, [r7, #12]
 8025304:	60b9      	str	r1, [r7, #8]
 8025306:	607a      	str	r2, [r7, #4]
  u8_t for_us;
#if LWIP_AUTOIP
  const u8_t * ethdst_hwaddr;
#endif /* LWIP_AUTOIP */

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8025308:	68fb      	ldr	r3, [r7, #12]
 802530a:	2b00      	cmp	r3, #0
 802530c:	d101      	bne.n	8025312 <etharp_arp_input+0x16>
 802530e:	be00      	bkpt	0x0000
 8025310:	e0b3      	b.n	802547a <etharp_arp_input+0x17e>

  /* drop short ARP packets: we have to check for p->len instead of p->tot_len here
     since a struct etharp_hdr is pointed to p->payload, so it musn't be chained! */
  if (p->len < SIZEOF_ETHARP_PACKET) {
 8025312:	687b      	ldr	r3, [r7, #4]
 8025314:	895b      	ldrh	r3, [r3, #10]
 8025316:	2b2b      	cmp	r3, #43	; 0x2b
 8025318:	d803      	bhi.n	8025322 <etharp_arp_input+0x26>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, too short (%"S16_F"/%"S16_F")\n", p->tot_len,
      (s16_t)SIZEOF_ETHARP_PACKET));
    ETHARP_STATS_INC(etharp.lenerr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 802531a:	6878      	ldr	r0, [r7, #4]
 802531c:	f002 fa40 	bl	80277a0 <pbuf_free>
    return;
 8025320:	e0ab      	b.n	802547a <etharp_arp_input+0x17e>
  }

  ethhdr = (struct eth_hdr *)p->payload;
 8025322:	687b      	ldr	r3, [r7, #4]
 8025324:	685b      	ldr	r3, [r3, #4]
 8025326:	623b      	str	r3, [r7, #32]
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
 8025328:	6a3b      	ldr	r3, [r7, #32]
 802532a:	3310      	adds	r3, #16
 802532c:	61fb      	str	r3, [r7, #28]
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 802532e:	69fb      	ldr	r3, [r7, #28]
 8025330:	881b      	ldrh	r3, [r3, #0]
 8025332:	b29b      	uxth	r3, r3
 8025334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8025338:	d10c      	bne.n	8025354 <etharp_arp_input+0x58>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
 802533a:	69fb      	ldr	r3, [r7, #28]
 802533c:	791b      	ldrb	r3, [r3, #4]
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 802533e:	2b06      	cmp	r3, #6
 8025340:	d108      	bne.n	8025354 <etharp_arp_input+0x58>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
      (hdr->protolen != sizeof(ip_addr_t)) ||
 8025342:	69fb      	ldr	r3, [r7, #28]
 8025344:	795b      	ldrb	r3, [r3, #5]
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
 8025346:	2b04      	cmp	r3, #4
 8025348:	d104      	bne.n	8025354 <etharp_arp_input+0x58>
      (hdr->protolen != sizeof(ip_addr_t)) ||
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 802534a:	69fb      	ldr	r3, [r7, #28]
 802534c:	885b      	ldrh	r3, [r3, #2]
 802534e:	b29b      	uxth	r3, r3
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
      (hdr->protolen != sizeof(ip_addr_t)) ||
 8025350:	2b08      	cmp	r3, #8
 8025352:	d003      	beq.n	802535c <etharp_arp_input+0x60>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, hdr->hwlen, hdr->proto, hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8025354:	6878      	ldr	r0, [r7, #4]
 8025356:	f002 fa23 	bl	80277a0 <pbuf_free>
    return;
 802535a:	e08e      	b.n	802547a <etharp_arp_input+0x17e>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 802535c:	69fb      	ldr	r3, [r7, #28]
 802535e:	330e      	adds	r3, #14
 8025360:	f107 0218 	add.w	r2, r7, #24
 8025364:	4610      	mov	r0, r2
 8025366:	4619      	mov	r1, r3
 8025368:	2204      	movs	r2, #4
 802536a:	f7ff fd19 	bl	8024da0 <thumb2_memcpy>
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 802536e:	69fb      	ldr	r3, [r7, #28]
 8025370:	3318      	adds	r3, #24
 8025372:	f107 0214 	add.w	r2, r7, #20
 8025376:	4610      	mov	r0, r2
 8025378:	4619      	mov	r1, r3
 802537a:	2204      	movs	r2, #4
 802537c:	f7ff fd10 	bl	8024da0 <thumb2_memcpy>

  /* this interface is not configured? */
  if (ip_addr_isany(&netif->ip_addr)) {
 8025380:	68fb      	ldr	r3, [r7, #12]
 8025382:	3304      	adds	r3, #4
 8025384:	2b00      	cmp	r3, #0
 8025386:	d003      	beq.n	8025390 <etharp_arp_input+0x94>
 8025388:	68fb      	ldr	r3, [r7, #12]
 802538a:	685b      	ldr	r3, [r3, #4]
 802538c:	2b00      	cmp	r3, #0
 802538e:	d103      	bne.n	8025398 <etharp_arp_input+0x9c>
    for_us = 0;
 8025390:	2300      	movs	r3, #0
 8025392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8025396:	e009      	b.n	80253ac <etharp_arp_input+0xb0>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip_addr_cmp(&dipaddr, &(netif->ip_addr));
 8025398:	697a      	ldr	r2, [r7, #20]
 802539a:	68fb      	ldr	r3, [r7, #12]
 802539c:	685b      	ldr	r3, [r3, #4]
 802539e:	429a      	cmp	r2, r3
 80253a0:	bf0c      	ite	eq
 80253a2:	2301      	moveq	r3, #1
 80253a4:	2300      	movne	r3, #0
 80253a6:	b2db      	uxtb	r3, r3
 80253a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80253ac:	69fb      	ldr	r3, [r7, #28]
 80253ae:	f103 0208 	add.w	r2, r3, #8
 80253b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80253b6:	2b00      	cmp	r3, #0
 80253b8:	d001      	beq.n	80253be <etharp_arp_input+0xc2>
 80253ba:	2301      	movs	r3, #1
 80253bc:	e000      	b.n	80253c0 <etharp_arp_input+0xc4>
 80253be:	2302      	movs	r3, #2
 80253c0:	f107 0118 	add.w	r1, r7, #24
 80253c4:	68f8      	ldr	r0, [r7, #12]
 80253c6:	f7ff fedb 	bl	8025180 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80253ca:	69fb      	ldr	r3, [r7, #28]
 80253cc:	88db      	ldrh	r3, [r3, #6]
 80253ce:	b29b      	uxth	r3, r3
 80253d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80253d4:	d003      	beq.n	80253de <etharp_arp_input+0xe2>
 80253d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80253da:	d04a      	beq.n	8025472 <etharp_arp_input+0x176>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP unknown opcode type %"S16_F"\n", htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 80253dc:	e04a      	b.n	8025474 <etharp_arp_input+0x178>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possiby send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
 80253de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80253e2:	2b00      	cmp	r3, #0
 80253e4:	d041      	beq.n	802546a <etharp_arp_input+0x16e>

      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: replying to ARP request for our IP address\n"));
      /* Re-use pbuf to send ARP reply.
         Since we are re-using an existing pbuf, we can't call etharp_raw since
         that would allocate a new pbuf. */
      hdr->opcode = htons(ARP_REPLY);
 80253e6:	2002      	movs	r0, #2
 80253e8:	f001 fb98 	bl	8026b1c <lwip_htons>
 80253ec:	4603      	mov	r3, r0
 80253ee:	461a      	mov	r2, r3
 80253f0:	69fb      	ldr	r3, [r7, #28]
 80253f2:	80da      	strh	r2, [r3, #6]

      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
 80253f4:	69fb      	ldr	r3, [r7, #28]
 80253f6:	f103 0218 	add.w	r2, r3, #24
 80253fa:	69fb      	ldr	r3, [r7, #28]
 80253fc:	330e      	adds	r3, #14
 80253fe:	4610      	mov	r0, r2
 8025400:	4619      	mov	r1, r3
 8025402:	2204      	movs	r2, #4
 8025404:	f7ff fccc 	bl	8024da0 <thumb2_memcpy>
      IPADDR2_COPY(&hdr->sipaddr, &netif->ip_addr);
 8025408:	69fb      	ldr	r3, [r7, #28]
 802540a:	f103 020e 	add.w	r2, r3, #14
 802540e:	68fb      	ldr	r3, [r7, #12]
 8025410:	3304      	adds	r3, #4
 8025412:	4610      	mov	r0, r2
 8025414:	4619      	mov	r1, r3
 8025416:	2204      	movs	r2, #4
 8025418:	f7ff fcc2 	bl	8024da0 <thumb2_memcpy>
       * 'sender IP address' MUST be sent using link-layer broadcast instead of
       * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
      ethdst_hwaddr = ip_addr_islinklocal(&netif->ip_addr) ? (u8_t*)(ethbroadcast.addr) : hdr->shwaddr.addr;
#endif /* LWIP_AUTOIP */

      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
 802541c:	69fb      	ldr	r3, [r7, #28]
 802541e:	f103 0212 	add.w	r2, r3, #18
 8025422:	69fb      	ldr	r3, [r7, #28]
 8025424:	3308      	adds	r3, #8
 8025426:	4610      	mov	r0, r2
 8025428:	4619      	mov	r1, r3
 802542a:	2206      	movs	r2, #6
 802542c:	f7ff fcb8 	bl	8024da0 <thumb2_memcpy>
#if LWIP_AUTOIP
      ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
      ETHADDR16_COPY(&ethhdr->dest, &hdr->shwaddr);
 8025430:	6a3b      	ldr	r3, [r7, #32]
 8025432:	1c9a      	adds	r2, r3, #2
 8025434:	69fb      	ldr	r3, [r7, #28]
 8025436:	3308      	adds	r3, #8
 8025438:	4610      	mov	r0, r2
 802543a:	4619      	mov	r1, r3
 802543c:	2206      	movs	r2, #6
 802543e:	f7ff fcaf 	bl	8024da0 <thumb2_memcpy>
#endif /* LWIP_AUTOIP */
      ETHADDR16_COPY(&hdr->shwaddr, ethaddr);
 8025442:	69fb      	ldr	r3, [r7, #28]
 8025444:	3308      	adds	r3, #8
 8025446:	4618      	mov	r0, r3
 8025448:	68b9      	ldr	r1, [r7, #8]
 802544a:	2206      	movs	r2, #6
 802544c:	f7ff fca8 	bl	8024da0 <thumb2_memcpy>
      ETHADDR16_COPY(&ethhdr->src, ethaddr);
 8025450:	6a3b      	ldr	r3, [r7, #32]
 8025452:	3308      	adds	r3, #8
 8025454:	4618      	mov	r0, r3
 8025456:	68b9      	ldr	r1, [r7, #8]
 8025458:	2206      	movs	r2, #6
 802545a:	f7ff fca1 	bl	8024da0 <thumb2_memcpy>

      /* hwtype, hwaddr_len, proto, protolen and the type in the ethernet header
         are already correct, we tested that before */

      /* return ARP reply */
      netif->linkoutput(netif, p);
 802545e:	68fb      	ldr	r3, [r7, #12]
 8025460:	699b      	ldr	r3, [r3, #24]
 8025462:	68f8      	ldr	r0, [r7, #12]
 8025464:	6879      	ldr	r1, [r7, #4]
 8025466:	4798      	blx	r3
 8025468:	e002      	b.n	8025470 <etharp_arp_input+0x174>
    /* we are not configured? */
    } else if (ip_addr_isany(&netif->ip_addr)) {
 802546a:	68fb      	ldr	r3, [r7, #12]
 802546c:	3304      	adds	r3, #4
 802546e:	2b00      	cmp	r3, #0
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP request was not for us.\n"));
    }
    break;
 8025470:	e000      	b.n	8025474 <etharp_arp_input+0x178>
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
 8025472:	bf00      	nop
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP unknown opcode type %"S16_F"\n", htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
  }
  /* free ARP packet */
  pbuf_free(p);
 8025474:	6878      	ldr	r0, [r7, #4]
 8025476:	f002 f993 	bl	80277a0 <pbuf_free>
}
 802547a:	3728      	adds	r7, #40	; 0x28
 802547c:	46bd      	mov	sp, r7
 802547e:	bd80      	pop	{r7, pc}

08025480 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8025480:	b590      	push	{r4, r7, lr}
 8025482:	b085      	sub	sp, #20
 8025484:	af00      	add	r7, sp, #0
 8025486:	60f8      	str	r0, [r7, #12]
 8025488:	60b9      	str	r1, [r7, #8]
 802548a:	4613      	mov	r3, r2
 802548c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
 802548e:	79fa      	ldrb	r2, [r7, #7]
 8025490:	4921      	ldr	r1, [pc, #132]	; (8025518 <etharp_output_to_arp_index+0x98>)
 8025492:	4613      	mov	r3, r2
 8025494:	009b      	lsls	r3, r3, #2
 8025496:	4413      	add	r3, r2
 8025498:	009b      	lsls	r3, r3, #2
 802549a:	440b      	add	r3, r1
 802549c:	3310      	adds	r3, #16
 802549e:	789b      	ldrb	r3, [r3, #2]
 80254a0:	2b02      	cmp	r3, #2
 80254a2:	d123      	bne.n	80254ec <etharp_output_to_arp_index+0x6c>
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
 80254a4:	79fa      	ldrb	r2, [r7, #7]
 80254a6:	491c      	ldr	r1, [pc, #112]	; (8025518 <etharp_output_to_arp_index+0x98>)
 80254a8:	4613      	mov	r3, r2
 80254aa:	009b      	lsls	r3, r3, #2
 80254ac:	4413      	add	r3, r2
 80254ae:	009b      	lsls	r3, r3, #2
 80254b0:	440b      	add	r3, r1
 80254b2:	3310      	adds	r3, #16
 80254b4:	78db      	ldrb	r3, [r3, #3]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
 80254b6:	2be3      	cmp	r3, #227	; 0xe3
 80254b8:	d918      	bls.n	80254ec <etharp_output_to_arp_index+0x6c>
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80254ba:	79fa      	ldrb	r2, [r7, #7]
 80254bc:	4613      	mov	r3, r2
 80254be:	009b      	lsls	r3, r3, #2
 80254c0:	4413      	add	r3, r2
 80254c2:	009b      	lsls	r3, r3, #2
 80254c4:	4a14      	ldr	r2, [pc, #80]	; (8025518 <etharp_output_to_arp_index+0x98>)
 80254c6:	4413      	add	r3, r2
 80254c8:	3304      	adds	r3, #4
 80254ca:	68f8      	ldr	r0, [r7, #12]
 80254cc:	4619      	mov	r1, r3
 80254ce:	f000 fa63 	bl	8025998 <etharp_request>
 80254d2:	4603      	mov	r3, r0
 80254d4:	2b00      	cmp	r3, #0
 80254d6:	d109      	bne.n	80254ec <etharp_output_to_arp_index+0x6c>
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
 80254d8:	79fa      	ldrb	r2, [r7, #7]
 80254da:	490f      	ldr	r1, [pc, #60]	; (8025518 <etharp_output_to_arp_index+0x98>)
 80254dc:	4613      	mov	r3, r2
 80254de:	009b      	lsls	r3, r3, #2
 80254e0:	4413      	add	r3, r2
 80254e2:	009b      	lsls	r3, r3, #2
 80254e4:	440b      	add	r3, r1
 80254e6:	3310      	adds	r3, #16
 80254e8:	2203      	movs	r2, #3
 80254ea:	709a      	strb	r2, [r3, #2]
    }
  }
  
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 80254ec:	68fb      	ldr	r3, [r7, #12]
 80254ee:	f103 0427 	add.w	r4, r3, #39	; 0x27
    &arp_table[arp_idx].ethaddr);
 80254f2:	79fa      	ldrb	r2, [r7, #7]
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
    }
  }
  
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 80254f4:	4613      	mov	r3, r2
 80254f6:	009b      	lsls	r3, r3, #2
 80254f8:	4413      	add	r3, r2
 80254fa:	009b      	lsls	r3, r3, #2
 80254fc:	3308      	adds	r3, #8
 80254fe:	4a06      	ldr	r2, [pc, #24]	; (8025518 <etharp_output_to_arp_index+0x98>)
 8025500:	4413      	add	r3, r2
 8025502:	3304      	adds	r3, #4
 8025504:	68f8      	ldr	r0, [r7, #12]
 8025506:	68b9      	ldr	r1, [r7, #8]
 8025508:	4622      	mov	r2, r4
 802550a:	f7ff fe0f 	bl	802512c <etharp_send_ip>
 802550e:	4603      	mov	r3, r0
    &arp_table[arp_idx].ethaddr);
}
 8025510:	4618      	mov	r0, r3
 8025512:	3714      	adds	r7, #20
 8025514:	46bd      	mov	sp, r7
 8025516:	bd90      	pop	{r4, r7, pc}
 8025518:	1ffe9b38 	.word	0x1ffe9b38

0802551c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, ip_addr_t *ipaddr)
{
 802551c:	b580      	push	{r7, lr}
 802551e:	b088      	sub	sp, #32
 8025520:	af00      	add	r7, sp, #0
 8025522:	60f8      	str	r0, [r7, #12]
 8025524:	60b9      	str	r1, [r7, #8]
 8025526:	607a      	str	r2, [r7, #4]
  struct eth_addr *dest;
  struct eth_addr mcastaddr;
  ip_addr_t *dst_addr = ipaddr;
 8025528:	687b      	ldr	r3, [r7, #4]
 802552a:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("netif != NULL", netif != NULL);
  LWIP_ASSERT("q != NULL", q != NULL);
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);

  /* make room for Ethernet header - should not fail */
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
 802552c:	68b8      	ldr	r0, [r7, #8]
 802552e:	2110      	movs	r1, #16
 8025530:	f002 f8c4 	bl	80276bc <pbuf_header>
 8025534:	4603      	mov	r3, r0
 8025536:	2b00      	cmp	r3, #0
 8025538:	d001      	beq.n	802553e <etharp_output+0x22>
    /* bail out */
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_output: could not allocate room for header.\n"));
    LINK_STATS_INC(link.lenerr);
    return ERR_BUF;
 802553a:	23fe      	movs	r3, #254	; 0xfe
 802553c:	e0ab      	b.n	8025696 <etharp_output+0x17a>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip_addr_isbroadcast(ipaddr, netif)) {
 802553e:	687b      	ldr	r3, [r7, #4]
 8025540:	681b      	ldr	r3, [r3, #0]
 8025542:	4618      	mov	r0, r3
 8025544:	68f9      	ldr	r1, [r7, #12]
 8025546:	f001 f991 	bl	802686c <ip4_addr_isbroadcast>
 802554a:	4603      	mov	r3, r0
 802554c:	2b00      	cmp	r3, #0
 802554e:	d002      	beq.n	8025556 <etharp_output+0x3a>
    /* broadcast on Ethernet also */
    dest = (struct eth_addr *)&ethbroadcast;
 8025550:	4b53      	ldr	r3, [pc, #332]	; (80256a0 <etharp_output+0x184>)
 8025552:	61fb      	str	r3, [r7, #28]
 8025554:	e096      	b.n	8025684 <etharp_output+0x168>
  /* multicast destination IP address? */
  } else if (ip_addr_ismulticast(ipaddr)) {
 8025556:	687b      	ldr	r3, [r7, #4]
 8025558:	681b      	ldr	r3, [r3, #0]
 802555a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802555e:	2be0      	cmp	r3, #224	; 0xe0
 8025560:	d116      	bne.n	8025590 <etharp_output+0x74>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
 8025562:	2301      	movs	r3, #1
 8025564:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
 8025566:	2300      	movs	r3, #0
 8025568:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_MULTICAST_ADDR_2;
 802556a:	235e      	movs	r3, #94	; 0x5e
 802556c:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 802556e:	687b      	ldr	r3, [r7, #4]
 8025570:	3301      	adds	r3, #1
 8025572:	781b      	ldrb	r3, [r3, #0]
 8025574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8025578:	b2db      	uxtb	r3, r3
 802557a:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 802557c:	687b      	ldr	r3, [r7, #4]
 802557e:	789b      	ldrb	r3, [r3, #2]
 8025580:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8025582:	687b      	ldr	r3, [r7, #4]
 8025584:	78db      	ldrb	r3, [r3, #3]
 8025586:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8025588:	f107 0310 	add.w	r3, r7, #16
 802558c:	61fb      	str	r3, [r7, #28]
 802558e:	e079      	b.n	8025684 <etharp_output+0x168>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
 8025590:	687b      	ldr	r3, [r7, #4]
 8025592:	681a      	ldr	r2, [r3, #0]
 8025594:	68fb      	ldr	r3, [r7, #12]
 8025596:	685b      	ldr	r3, [r3, #4]
 8025598:	405a      	eors	r2, r3
 802559a:	68fb      	ldr	r3, [r7, #12]
 802559c:	689b      	ldr	r3, [r3, #8]
 802559e:	4013      	ands	r3, r2
 80255a0:	2b00      	cmp	r3, #0
 80255a2:	d014      	beq.n	80255ce <etharp_output+0xb2>
        !ip_addr_islinklocal(ipaddr)) {
 80255a4:	687b      	ldr	r3, [r7, #4]
 80255a6:	681b      	ldr	r3, [r3, #0]
 80255a8:	b29b      	uxth	r3, r3
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
 80255aa:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80255ae:	4293      	cmp	r3, r2
 80255b0:	d00d      	beq.n	80255ce <etharp_output+0xb2>
         router for forwarding". */
      if (!ip_addr_islinklocal(&iphdr->src))
#endif /* LWIP_AUTOIP */
      {
        /* interface has default gateway? */
        if (!ip_addr_isany(&netif->gw)) {
 80255b2:	68fb      	ldr	r3, [r7, #12]
 80255b4:	330c      	adds	r3, #12
 80255b6:	2b00      	cmp	r3, #0
 80255b8:	d007      	beq.n	80255ca <etharp_output+0xae>
 80255ba:	68fb      	ldr	r3, [r7, #12]
 80255bc:	68db      	ldr	r3, [r3, #12]
 80255be:	2b00      	cmp	r3, #0
 80255c0:	d003      	beq.n	80255ca <etharp_output+0xae>
          /* send to hardware address of default gateway IP address */
          dst_addr = &(netif->gw);
 80255c2:	68fb      	ldr	r3, [r7, #12]
 80255c4:	330c      	adds	r3, #12
 80255c6:	61bb      	str	r3, [r7, #24]
 80255c8:	e001      	b.n	80255ce <etharp_output+0xb2>
        /* no default gateway available */
        } else {
          /* no route to destination error (default gateway missing) */
          return ERR_RTE;
 80255ca:	23fc      	movs	r3, #252	; 0xfc
 80255cc:	e063      	b.n	8025696 <etharp_output+0x17a>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80255ce:	4b35      	ldr	r3, [pc, #212]	; (80256a4 <etharp_output+0x188>)
 80255d0:	781b      	ldrb	r3, [r3, #0]
 80255d2:	4619      	mov	r1, r3
 80255d4:	4a34      	ldr	r2, [pc, #208]	; (80256a8 <etharp_output+0x18c>)
 80255d6:	460b      	mov	r3, r1
 80255d8:	009b      	lsls	r3, r3, #2
 80255da:	440b      	add	r3, r1
 80255dc:	009b      	lsls	r3, r3, #2
 80255de:	4413      	add	r3, r2
 80255e0:	3310      	adds	r3, #16
 80255e2:	789b      	ldrb	r3, [r3, #2]
 80255e4:	2b01      	cmp	r3, #1
 80255e6:	d916      	bls.n	8025616 <etharp_output+0xfa>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80255e8:	69bb      	ldr	r3, [r7, #24]
 80255ea:	681a      	ldr	r2, [r3, #0]
 80255ec:	4b2d      	ldr	r3, [pc, #180]	; (80256a4 <etharp_output+0x188>)
 80255ee:	781b      	ldrb	r3, [r3, #0]
 80255f0:	4618      	mov	r0, r3
 80255f2:	492d      	ldr	r1, [pc, #180]	; (80256a8 <etharp_output+0x18c>)
 80255f4:	4603      	mov	r3, r0
 80255f6:	009b      	lsls	r3, r3, #2
 80255f8:	4403      	add	r3, r0
 80255fa:	009b      	lsls	r3, r3, #2
 80255fc:	440b      	add	r3, r1
 80255fe:	685b      	ldr	r3, [r3, #4]
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8025600:	429a      	cmp	r2, r3
 8025602:	d108      	bne.n	8025616 <etharp_output+0xfa>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8025604:	4b27      	ldr	r3, [pc, #156]	; (80256a4 <etharp_output+0x188>)
 8025606:	781b      	ldrb	r3, [r3, #0]
 8025608:	68f8      	ldr	r0, [r7, #12]
 802560a:	68b9      	ldr	r1, [r7, #8]
 802560c:	461a      	mov	r2, r3
 802560e:	f7ff ff37 	bl	8025480 <etharp_output_to_arp_index>
 8025612:	4603      	mov	r3, r0
 8025614:	e03f      	b.n	8025696 <etharp_output+0x17a>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8025616:	2300      	movs	r3, #0
 8025618:	75fb      	strb	r3, [r7, #23]
 802561a:	e028      	b.n	802566e <etharp_output+0x152>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 802561c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8025620:	4921      	ldr	r1, [pc, #132]	; (80256a8 <etharp_output+0x18c>)
 8025622:	4613      	mov	r3, r2
 8025624:	009b      	lsls	r3, r3, #2
 8025626:	4413      	add	r3, r2
 8025628:	009b      	lsls	r3, r3, #2
 802562a:	440b      	add	r3, r1
 802562c:	3310      	adds	r3, #16
 802562e:	789b      	ldrb	r3, [r3, #2]
 8025630:	2b01      	cmp	r3, #1
 8025632:	d917      	bls.n	8025664 <etharp_output+0x148>
          (ip_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8025634:	69bb      	ldr	r3, [r7, #24]
 8025636:	6819      	ldr	r1, [r3, #0]
 8025638:	f997 2017 	ldrsb.w	r2, [r7, #23]
 802563c:	481a      	ldr	r0, [pc, #104]	; (80256a8 <etharp_output+0x18c>)
 802563e:	4613      	mov	r3, r2
 8025640:	009b      	lsls	r3, r3, #2
 8025642:	4413      	add	r3, r2
 8025644:	009b      	lsls	r3, r3, #2
 8025646:	4403      	add	r3, r0
 8025648:	685b      	ldr	r3, [r3, #4]
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 802564a:	4299      	cmp	r1, r3
 802564c:	d10a      	bne.n	8025664 <etharp_output+0x148>
          (ip_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 802564e:	7dfa      	ldrb	r2, [r7, #23]
 8025650:	4b14      	ldr	r3, [pc, #80]	; (80256a4 <etharp_output+0x188>)
 8025652:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8025654:	7dfb      	ldrb	r3, [r7, #23]
 8025656:	68f8      	ldr	r0, [r7, #12]
 8025658:	68b9      	ldr	r1, [r7, #8]
 802565a:	461a      	mov	r2, r3
 802565c:	f7ff ff10 	bl	8025480 <etharp_output_to_arp_index>
 8025660:	4603      	mov	r3, r0
 8025662:	e018      	b.n	8025696 <etharp_output+0x17a>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8025664:	7dfb      	ldrb	r3, [r7, #23]
 8025666:	b2db      	uxtb	r3, r3
 8025668:	3301      	adds	r3, #1
 802566a:	b2db      	uxtb	r3, r3
 802566c:	75fb      	strb	r3, [r7, #23]
 802566e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8025672:	2b09      	cmp	r3, #9
 8025674:	ddd2      	ble.n	802561c <etharp_output+0x100>
        return etharp_output_to_arp_index(netif, q, i);
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8025676:	68f8      	ldr	r0, [r7, #12]
 8025678:	69b9      	ldr	r1, [r7, #24]
 802567a:	68ba      	ldr	r2, [r7, #8]
 802567c:	f000 f816 	bl	80256ac <etharp_query>
 8025680:	4603      	mov	r3, r0
 8025682:	e008      	b.n	8025696 <etharp_output+0x17a>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
 8025684:	68fb      	ldr	r3, [r7, #12]
 8025686:	3327      	adds	r3, #39	; 0x27
 8025688:	68f8      	ldr	r0, [r7, #12]
 802568a:	68b9      	ldr	r1, [r7, #8]
 802568c:	461a      	mov	r2, r3
 802568e:	69fb      	ldr	r3, [r7, #28]
 8025690:	f7ff fd4c 	bl	802512c <etharp_send_ip>
 8025694:	4603      	mov	r3, r0
 8025696:	b25b      	sxtb	r3, r3
}
 8025698:	4618      	mov	r0, r3
 802569a:	3720      	adds	r7, #32
 802569c:	46bd      	mov	sp, r7
 802569e:	bd80      	pop	{r7, pc}
 80256a0:	08029ff4 	.word	0x08029ff4
 80256a4:	1ffe9c00 	.word	0x1ffe9c00
 80256a8:	1ffe9b38 	.word	0x1ffe9b38

080256ac <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, ip_addr_t *ipaddr, struct pbuf *q)
{
 80256ac:	b580      	push	{r7, lr}
 80256ae:	b08a      	sub	sp, #40	; 0x28
 80256b0:	af00      	add	r7, sp, #0
 80256b2:	60f8      	str	r0, [r7, #12]
 80256b4:	60b9      	str	r1, [r7, #8]
 80256b6:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 80256b8:	68fb      	ldr	r3, [r7, #12]
 80256ba:	3327      	adds	r3, #39	; 0x27
 80256bc:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_MEM;
 80256be:	23ff      	movs	r3, #255	; 0xff
 80256c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
 80256c4:	68bb      	ldr	r3, [r7, #8]
 80256c6:	681b      	ldr	r3, [r3, #0]
 80256c8:	4618      	mov	r0, r3
 80256ca:	68f9      	ldr	r1, [r7, #12]
 80256cc:	f001 f8ce 	bl	802686c <ip4_addr_isbroadcast>
 80256d0:	4603      	mov	r3, r0
 80256d2:	2b00      	cmp	r3, #0
 80256d4:	d10c      	bne.n	80256f0 <etharp_query+0x44>
      ip_addr_ismulticast(ipaddr) ||
 80256d6:	68bb      	ldr	r3, [r7, #8]
 80256d8:	681b      	ldr	r3, [r3, #0]
 80256da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
 80256de:	2be0      	cmp	r3, #224	; 0xe0
 80256e0:	d006      	beq.n	80256f0 <etharp_query+0x44>
      ip_addr_ismulticast(ipaddr) ||
 80256e2:	68bb      	ldr	r3, [r7, #8]
 80256e4:	2b00      	cmp	r3, #0
 80256e6:	d003      	beq.n	80256f0 <etharp_query+0x44>
      ip_addr_isany(ipaddr)) {
 80256e8:	68bb      	ldr	r3, [r7, #8]
 80256ea:	681b      	ldr	r3, [r3, #0]
 80256ec:	2b00      	cmp	r3, #0
 80256ee:	d101      	bne.n	80256f4 <etharp_query+0x48>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80256f0:	23f2      	movs	r3, #242	; 0xf2
 80256f2:	e0cb      	b.n	802588c <etharp_query+0x1e0>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD);
 80256f4:	68b8      	ldr	r0, [r7, #8]
 80256f6:	2101      	movs	r1, #1
 80256f8:	f7ff fc24 	bl	8024f44 <etharp_find_entry>
 80256fc:	4603      	mov	r3, r0
 80256fe:	75fb      	strb	r3, [r7, #23]

  /* could not find or create entry? */
  if (i < 0) {
 8025700:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8025704:	2b00      	cmp	r3, #0
 8025706:	da01      	bge.n	802570c <etharp_query+0x60>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8025708:	7dfb      	ldrb	r3, [r7, #23]
 802570a:	e0bf      	b.n	802588c <etharp_query+0x1e0>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 802570c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8025710:	4961      	ldr	r1, [pc, #388]	; (8025898 <etharp_query+0x1ec>)
 8025712:	4613      	mov	r3, r2
 8025714:	009b      	lsls	r3, r3, #2
 8025716:	4413      	add	r3, r2
 8025718:	009b      	lsls	r3, r3, #2
 802571a:	440b      	add	r3, r1
 802571c:	3310      	adds	r3, #16
 802571e:	789b      	ldrb	r3, [r3, #2]
 8025720:	2b00      	cmp	r3, #0
 8025722:	d10a      	bne.n	802573a <etharp_query+0x8e>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8025724:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8025728:	495b      	ldr	r1, [pc, #364]	; (8025898 <etharp_query+0x1ec>)
 802572a:	4613      	mov	r3, r2
 802572c:	009b      	lsls	r3, r3, #2
 802572e:	4413      	add	r3, r2
 8025730:	009b      	lsls	r3, r3, #2
 8025732:	440b      	add	r3, r1
 8025734:	3310      	adds	r3, #16
 8025736:	2201      	movs	r2, #1
 8025738:	709a      	strb	r2, [r3, #2]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a pending entry? or an implicit query request? */
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
 802573a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 802573e:	4956      	ldr	r1, [pc, #344]	; (8025898 <etharp_query+0x1ec>)
 8025740:	4613      	mov	r3, r2
 8025742:	009b      	lsls	r3, r3, #2
 8025744:	4413      	add	r3, r2
 8025746:	009b      	lsls	r3, r3, #2
 8025748:	440b      	add	r3, r1
 802574a:	3310      	adds	r3, #16
 802574c:	789b      	ldrb	r3, [r3, #2]
 802574e:	2b01      	cmp	r3, #1
 8025750:	d002      	beq.n	8025758 <etharp_query+0xac>
 8025752:	687b      	ldr	r3, [r7, #4]
 8025754:	2b00      	cmp	r3, #0
 8025756:	d10c      	bne.n	8025772 <etharp_query+0xc6>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8025758:	68f8      	ldr	r0, [r7, #12]
 802575a:	68b9      	ldr	r1, [r7, #8]
 802575c:	f000 f91c 	bl	8025998 <etharp_request>
 8025760:	4603      	mov	r3, r0
 8025762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8025766:	687b      	ldr	r3, [r7, #4]
 8025768:	2b00      	cmp	r3, #0
 802576a:	d102      	bne.n	8025772 <etharp_query+0xc6>
      return result;
 802576c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8025770:	e08c      	b.n	802588c <etharp_query+0x1e0>
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8025772:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8025776:	4948      	ldr	r1, [pc, #288]	; (8025898 <etharp_query+0x1ec>)
 8025778:	4613      	mov	r3, r2
 802577a:	009b      	lsls	r3, r3, #2
 802577c:	4413      	add	r3, r2
 802577e:	009b      	lsls	r3, r3, #2
 8025780:	440b      	add	r3, r1
 8025782:	3310      	adds	r3, #16
 8025784:	789b      	ldrb	r3, [r3, #2]
 8025786:	2b01      	cmp	r3, #1
 8025788:	d915      	bls.n	80257b6 <etharp_query+0x10a>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 802578a:	7dfa      	ldrb	r2, [r7, #23]
 802578c:	4b43      	ldr	r3, [pc, #268]	; (802589c <etharp_query+0x1f0>)
 802578e:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
 8025790:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8025794:	4613      	mov	r3, r2
 8025796:	009b      	lsls	r3, r3, #2
 8025798:	4413      	add	r3, r2
 802579a:	009b      	lsls	r3, r3, #2
 802579c:	3308      	adds	r3, #8
 802579e:	4a3e      	ldr	r2, [pc, #248]	; (8025898 <etharp_query+0x1ec>)
 80257a0:	4413      	add	r3, r2
 80257a2:	3304      	adds	r3, #4
 80257a4:	68f8      	ldr	r0, [r7, #12]
 80257a6:	6879      	ldr	r1, [r7, #4]
 80257a8:	69ba      	ldr	r2, [r7, #24]
 80257aa:	f7ff fcbf 	bl	802512c <etharp_send_ip>
 80257ae:	4603      	mov	r3, r0
 80257b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80257b4:	e068      	b.n	8025888 <etharp_query+0x1dc>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80257b6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80257ba:	4937      	ldr	r1, [pc, #220]	; (8025898 <etharp_query+0x1ec>)
 80257bc:	4613      	mov	r3, r2
 80257be:	009b      	lsls	r3, r3, #2
 80257c0:	4413      	add	r3, r2
 80257c2:	009b      	lsls	r3, r3, #2
 80257c4:	440b      	add	r3, r1
 80257c6:	3310      	adds	r3, #16
 80257c8:	789b      	ldrb	r3, [r3, #2]
 80257ca:	2b01      	cmp	r3, #1
 80257cc:	d15c      	bne.n	8025888 <etharp_query+0x1dc>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80257ce:	2300      	movs	r3, #0
 80257d0:	61fb      	str	r3, [r7, #28]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 80257d2:	687b      	ldr	r3, [r7, #4]
 80257d4:	623b      	str	r3, [r7, #32]
    while (p) {
 80257d6:	e009      	b.n	80257ec <etharp_query+0x140>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
      if(p->type != PBUF_ROM) {
 80257d8:	6a3b      	ldr	r3, [r7, #32]
 80257da:	7b1b      	ldrb	r3, [r3, #12]
 80257dc:	2b01      	cmp	r3, #1
 80257de:	d002      	beq.n	80257e6 <etharp_query+0x13a>
        copy_needed = 1;
 80257e0:	2301      	movs	r3, #1
 80257e2:	61fb      	str	r3, [r7, #28]
        break;
 80257e4:	e005      	b.n	80257f2 <etharp_query+0x146>
      }
      p = p->next;
 80257e6:	6a3b      	ldr	r3, [r7, #32]
 80257e8:	681b      	ldr	r3, [r3, #0]
 80257ea:	623b      	str	r3, [r7, #32]
    int copy_needed = 0;
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
    while (p) {
 80257ec:	6a3b      	ldr	r3, [r7, #32]
 80257ee:	2b00      	cmp	r3, #0
 80257f0:	d1f2      	bne.n	80257d8 <etharp_query+0x12c>
        copy_needed = 1;
        break;
      }
      p = p->next;
    }
    if(copy_needed) {
 80257f2:	69fb      	ldr	r3, [r7, #28]
 80257f4:	2b00      	cmp	r3, #0
 80257f6:	d017      	beq.n	8025828 <etharp_query+0x17c>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
 80257f8:	6a3b      	ldr	r3, [r7, #32]
 80257fa:	891b      	ldrh	r3, [r3, #8]
 80257fc:	2003      	movs	r0, #3
 80257fe:	4619      	mov	r1, r3
 8025800:	2200      	movs	r2, #0
 8025802:	f001 fe09 	bl	8027418 <pbuf_alloc>
 8025806:	6238      	str	r0, [r7, #32]
      if(p != NULL) {
 8025808:	6a3b      	ldr	r3, [r7, #32]
 802580a:	2b00      	cmp	r3, #0
 802580c:	d011      	beq.n	8025832 <etharp_query+0x186>
        if (pbuf_copy(p, q) != ERR_OK) {
 802580e:	6a38      	ldr	r0, [r7, #32]
 8025810:	6879      	ldr	r1, [r7, #4]
 8025812:	f002 f85b 	bl	80278cc <pbuf_copy>
 8025816:	4603      	mov	r3, r0
 8025818:	2b00      	cmp	r3, #0
 802581a:	d00a      	beq.n	8025832 <etharp_query+0x186>
          pbuf_free(p);
 802581c:	6a38      	ldr	r0, [r7, #32]
 802581e:	f001 ffbf 	bl	80277a0 <pbuf_free>
          p = NULL;
 8025822:	2300      	movs	r3, #0
 8025824:	623b      	str	r3, [r7, #32]
 8025826:	e004      	b.n	8025832 <etharp_query+0x186>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8025828:	687b      	ldr	r3, [r7, #4]
 802582a:	623b      	str	r3, [r7, #32]
      pbuf_ref(p);
 802582c:	6a38      	ldr	r0, [r7, #32]
 802582e:	f001 fffb 	bl	8027828 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8025832:	6a3b      	ldr	r3, [r7, #32]
 8025834:	2b00      	cmp	r3, #0
 8025836:	d024      	beq.n	8025882 <etharp_query+0x1d6>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8025838:	f997 2017 	ldrsb.w	r2, [r7, #23]
 802583c:	4916      	ldr	r1, [pc, #88]	; (8025898 <etharp_query+0x1ec>)
 802583e:	4613      	mov	r3, r2
 8025840:	009b      	lsls	r3, r3, #2
 8025842:	4413      	add	r3, r2
 8025844:	009b      	lsls	r3, r3, #2
 8025846:	440b      	add	r3, r1
 8025848:	681b      	ldr	r3, [r3, #0]
 802584a:	2b00      	cmp	r3, #0
 802584c:	d00b      	beq.n	8025866 <etharp_query+0x1ba>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 802584e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8025852:	4911      	ldr	r1, [pc, #68]	; (8025898 <etharp_query+0x1ec>)
 8025854:	4613      	mov	r3, r2
 8025856:	009b      	lsls	r3, r3, #2
 8025858:	4413      	add	r3, r2
 802585a:	009b      	lsls	r3, r3, #2
 802585c:	440b      	add	r3, r1
 802585e:	681b      	ldr	r3, [r3, #0]
 8025860:	4618      	mov	r0, r3
 8025862:	f001 ff9d 	bl	80277a0 <pbuf_free>
      }
      arp_table[i].q = p;
 8025866:	f997 2017 	ldrsb.w	r2, [r7, #23]
 802586a:	490b      	ldr	r1, [pc, #44]	; (8025898 <etharp_query+0x1ec>)
 802586c:	4613      	mov	r3, r2
 802586e:	009b      	lsls	r3, r3, #2
 8025870:	4413      	add	r3, r2
 8025872:	009b      	lsls	r3, r3, #2
 8025874:	440b      	add	r3, r1
 8025876:	6a3a      	ldr	r2, [r7, #32]
 8025878:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 802587a:	2300      	movs	r3, #0
 802587c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8025880:	e002      	b.n	8025888 <etharp_query+0x1dc>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8025882:	23ff      	movs	r3, #255	; 0xff
 8025884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8025888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802588c:	b25b      	sxtb	r3, r3
}
 802588e:	4618      	mov	r0, r3
 8025890:	3728      	adds	r7, #40	; 0x28
 8025892:	46bd      	mov	sp, r7
 8025894:	bd80      	pop	{r7, pc}
 8025896:	bf00      	nop
 8025898:	1ffe9b38 	.word	0x1ffe9b38
 802589c:	1ffe9c00 	.word	0x1ffe9c00

080258a0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80258a0:	b580      	push	{r7, lr}
 80258a2:	b088      	sub	sp, #32
 80258a4:	af00      	add	r7, sp, #0
 80258a6:	60f8      	str	r0, [r7, #12]
 80258a8:	60b9      	str	r1, [r7, #8]
 80258aa:	607a      	str	r2, [r7, #4]
 80258ac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80258ae:	2300      	movs	r3, #0
 80258b0:	77fb      	strb	r3, [r7, #31]
#endif /* LWIP_AUTOIP */

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
 80258b2:	2003      	movs	r0, #3
 80258b4:	212c      	movs	r1, #44	; 0x2c
 80258b6:	2200      	movs	r2, #0
 80258b8:	f001 fdae 	bl	8027418 <pbuf_alloc>
 80258bc:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80258be:	69bb      	ldr	r3, [r7, #24]
 80258c0:	2b00      	cmp	r3, #0
 80258c2:	d101      	bne.n	80258c8 <etharp_raw+0x28>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80258c4:	23ff      	movs	r3, #255	; 0xff
 80258c6:	e061      	b.n	802598c <etharp_raw+0xec>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_PACKET));

  ethhdr = (struct eth_hdr *)p->payload;
 80258c8:	69bb      	ldr	r3, [r7, #24]
 80258ca:	685b      	ldr	r3, [r3, #4]
 80258cc:	617b      	str	r3, [r7, #20]
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
 80258ce:	697b      	ldr	r3, [r7, #20]
 80258d0:	3310      	adds	r3, #16
 80258d2:	613b      	str	r3, [r7, #16]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = htons(opcode);
 80258d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80258d6:	4618      	mov	r0, r3
 80258d8:	f001 f920 	bl	8026b1c <lwip_htons>
 80258dc:	4603      	mov	r3, r0
 80258de:	461a      	mov	r2, r3
 80258e0:	693b      	ldr	r3, [r7, #16]
 80258e2:	80da      	strh	r2, [r3, #6]
   * 'sender IP address' MUST be sent using link-layer broadcast instead of
   * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
  ethdst_hwaddr = ip_addr_islinklocal(ipsrc_addr) ? (u8_t*)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80258e4:	693b      	ldr	r3, [r7, #16]
 80258e6:	3308      	adds	r3, #8
 80258e8:	4618      	mov	r0, r3
 80258ea:	6839      	ldr	r1, [r7, #0]
 80258ec:	2206      	movs	r2, #6
 80258ee:	f7ff fa57 	bl	8024da0 <thumb2_memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80258f2:	693b      	ldr	r3, [r7, #16]
 80258f4:	3312      	adds	r3, #18
 80258f6:	4618      	mov	r0, r3
 80258f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80258fa:	2206      	movs	r2, #6
 80258fc:	f7ff fa50 	bl	8024da0 <thumb2_memcpy>
  /* Write the Ethernet MAC-Addresses */
#if LWIP_AUTOIP
  ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
 8025900:	697b      	ldr	r3, [r7, #20]
 8025902:	3302      	adds	r3, #2
 8025904:	4618      	mov	r0, r3
 8025906:	6879      	ldr	r1, [r7, #4]
 8025908:	2206      	movs	r2, #6
 802590a:	f7ff fa49 	bl	8024da0 <thumb2_memcpy>
#endif /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);
 802590e:	697b      	ldr	r3, [r7, #20]
 8025910:	3308      	adds	r3, #8
 8025912:	4618      	mov	r0, r3
 8025914:	68b9      	ldr	r1, [r7, #8]
 8025916:	2206      	movs	r2, #6
 8025918:	f7ff fa42 	bl	8024da0 <thumb2_memcpy>
  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing. */ 
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 802591c:	693b      	ldr	r3, [r7, #16]
 802591e:	330e      	adds	r3, #14
 8025920:	4618      	mov	r0, r3
 8025922:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8025924:	2204      	movs	r2, #4
 8025926:	f7ff fa3b 	bl	8024da0 <thumb2_memcpy>
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 802592a:	693b      	ldr	r3, [r7, #16]
 802592c:	3318      	adds	r3, #24
 802592e:	4618      	mov	r0, r3
 8025930:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8025932:	2204      	movs	r2, #4
 8025934:	f7ff fa34 	bl	8024da0 <thumb2_memcpy>

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8025938:	693b      	ldr	r3, [r7, #16]
 802593a:	2200      	movs	r2, #0
 802593c:	701a      	strb	r2, [r3, #0]
 802593e:	2200      	movs	r2, #0
 8025940:	f042 0201 	orr.w	r2, r2, #1
 8025944:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8025946:	693b      	ldr	r3, [r7, #16]
 8025948:	2200      	movs	r2, #0
 802594a:	f042 0208 	orr.w	r2, r2, #8
 802594e:	709a      	strb	r2, [r3, #2]
 8025950:	2200      	movs	r2, #0
 8025952:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETHARP_HWADDR_LEN;
 8025954:	693b      	ldr	r3, [r7, #16]
 8025956:	2206      	movs	r2, #6
 8025958:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip_addr_t);
 802595a:	693b      	ldr	r3, [r7, #16]
 802595c:	2204      	movs	r2, #4
 802595e:	715a      	strb	r2, [r3, #5]

  ethhdr->type = PP_HTONS(ETHTYPE_ARP);
 8025960:	697b      	ldr	r3, [r7, #20]
 8025962:	2200      	movs	r2, #0
 8025964:	f042 0208 	orr.w	r2, r2, #8
 8025968:	739a      	strb	r2, [r3, #14]
 802596a:	2200      	movs	r2, #0
 802596c:	f042 0206 	orr.w	r2, r2, #6
 8025970:	73da      	strb	r2, [r3, #15]
  /* send ARP query */
  result = netif->linkoutput(netif, p);
 8025972:	68fb      	ldr	r3, [r7, #12]
 8025974:	699b      	ldr	r3, [r3, #24]
 8025976:	68f8      	ldr	r0, [r7, #12]
 8025978:	69b9      	ldr	r1, [r7, #24]
 802597a:	4798      	blx	r3
 802597c:	4603      	mov	r3, r0
 802597e:	77fb      	strb	r3, [r7, #31]
  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8025980:	69b8      	ldr	r0, [r7, #24]
 8025982:	f001 ff0d 	bl	80277a0 <pbuf_free>
  p = NULL;
 8025986:	2300      	movs	r3, #0
 8025988:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 802598a:	7ffb      	ldrb	r3, [r7, #31]
 802598c:	b25b      	sxtb	r3, r3
}
 802598e:	4618      	mov	r0, r3
 8025990:	3720      	adds	r7, #32
 8025992:	46bd      	mov	sp, r7
 8025994:	bd80      	pop	{r7, pc}
 8025996:	bf00      	nop

08025998 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
 8025998:	b590      	push	{r4, r7, lr}
 802599a:	b087      	sub	sp, #28
 802599c:	af04      	add	r7, sp, #16
 802599e:	6078      	str	r0, [r7, #4]
 80259a0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
 80259a2:	687b      	ldr	r3, [r7, #4]
 80259a4:	f103 0227 	add.w	r2, r3, #39	; 0x27
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
 80259a8:	687b      	ldr	r3, [r7, #4]
 80259aa:	f103 0427 	add.w	r4, r3, #39	; 0x27
 80259ae:	687b      	ldr	r3, [r7, #4]
 80259b0:	3304      	adds	r3, #4
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
 80259b2:	9300      	str	r3, [sp, #0]
 80259b4:	4b08      	ldr	r3, [pc, #32]	; (80259d8 <etharp_request+0x40>)
 80259b6:	9301      	str	r3, [sp, #4]
 80259b8:	683b      	ldr	r3, [r7, #0]
 80259ba:	9302      	str	r3, [sp, #8]
 80259bc:	2301      	movs	r3, #1
 80259be:	9303      	str	r3, [sp, #12]
 80259c0:	6878      	ldr	r0, [r7, #4]
 80259c2:	4611      	mov	r1, r2
 80259c4:	4a05      	ldr	r2, [pc, #20]	; (80259dc <etharp_request+0x44>)
 80259c6:	4623      	mov	r3, r4
 80259c8:	f7ff ff6a 	bl	80258a0 <etharp_raw>
 80259cc:	4603      	mov	r3, r0
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
                    ipaddr, ARP_REQUEST);
}
 80259ce:	4618      	mov	r0, r3
 80259d0:	370c      	adds	r7, #12
 80259d2:	46bd      	mov	sp, r7
 80259d4:	bd90      	pop	{r4, r7, pc}
 80259d6:	bf00      	nop
 80259d8:	08029ffc 	.word	0x08029ffc
 80259dc:	08029ff4 	.word	0x08029ff4

080259e0 <ethernet_input>:
 * @param p the recevied packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80259e0:	b580      	push	{r7, lr}
 80259e2:	b086      	sub	sp, #24
 80259e4:	af00      	add	r7, sp, #0
 80259e6:	6078      	str	r0, [r7, #4]
 80259e8:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 80259ea:	2310      	movs	r3, #16
 80259ec:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 80259ee:	687b      	ldr	r3, [r7, #4]
 80259f0:	895b      	ldrh	r3, [r3, #10]
 80259f2:	2b10      	cmp	r3, #16
 80259f4:	d800      	bhi.n	80259f8 <ethernet_input+0x18>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    goto free_and_return;
 80259f6:	e066      	b.n	8025ac6 <ethernet_input+0xe6>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80259f8:	687b      	ldr	r3, [r7, #4]
 80259fa:	685b      	ldr	r3, [r3, #4]
 80259fc:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0], (unsigned)ethhdr->src.addr[1], (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3], (unsigned)ethhdr->src.addr[4], (unsigned)ethhdr->src.addr[5],
     (unsigned)htons(ethhdr->type)));

  type = ethhdr->type;
 80259fe:	693b      	ldr	r3, [r7, #16]
 8025a00:	7b9a      	ldrb	r2, [r3, #14]
 8025a02:	7bdb      	ldrb	r3, [r3, #15]
 8025a04:	021b      	lsls	r3, r3, #8
 8025a06:	4313      	orrs	r3, r2
 8025a08:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8025a0a:	693b      	ldr	r3, [r7, #16]
 8025a0c:	789b      	ldrb	r3, [r3, #2]
 8025a0e:	f003 0301 	and.w	r3, r3, #1
 8025a12:	2b00      	cmp	r3, #0
 8025a14:	d024      	beq.n	8025a60 <ethernet_input+0x80>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
 8025a16:	693b      	ldr	r3, [r7, #16]
 8025a18:	789b      	ldrb	r3, [r3, #2]
 8025a1a:	2b01      	cmp	r3, #1
 8025a1c:	d10f      	bne.n	8025a3e <ethernet_input+0x5e>
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
 8025a1e:	693b      	ldr	r3, [r7, #16]
 8025a20:	78db      	ldrb	r3, [r3, #3]
 8025a22:	2b00      	cmp	r3, #0
 8025a24:	d11c      	bne.n	8025a60 <ethernet_input+0x80>
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
 8025a26:	693b      	ldr	r3, [r7, #16]
 8025a28:	791b      	ldrb	r3, [r3, #4]
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
 8025a2a:	2b5e      	cmp	r3, #94	; 0x5e
 8025a2c:	d118      	bne.n	8025a60 <ethernet_input+0x80>
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8025a2e:	687b      	ldr	r3, [r7, #4]
 8025a30:	7b5b      	ldrb	r3, [r3, #13]
 8025a32:	f043 0310 	orr.w	r3, r3, #16
 8025a36:	b2da      	uxtb	r2, r3
 8025a38:	687b      	ldr	r3, [r7, #4]
 8025a3a:	735a      	strb	r2, [r3, #13]
 8025a3c:	e010      	b.n	8025a60 <ethernet_input+0x80>
      }
    } else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8025a3e:	693b      	ldr	r3, [r7, #16]
 8025a40:	3302      	adds	r3, #2
 8025a42:	4618      	mov	r0, r3
 8025a44:	4924      	ldr	r1, [pc, #144]	; (8025ad8 <ethernet_input+0xf8>)
 8025a46:	2206      	movs	r2, #6
 8025a48:	f004 f836 	bl	8029ab8 <memcmp>
 8025a4c:	4603      	mov	r3, r0
 8025a4e:	2b00      	cmp	r3, #0
 8025a50:	d106      	bne.n	8025a60 <ethernet_input+0x80>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8025a52:	687b      	ldr	r3, [r7, #4]
 8025a54:	7b5b      	ldrb	r3, [r3, #13]
 8025a56:	f043 0308 	orr.w	r3, r3, #8
 8025a5a:	b2da      	uxtb	r2, r3
 8025a5c:	687b      	ldr	r3, [r7, #4]
 8025a5e:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8025a60:	89fb      	ldrh	r3, [r7, #14]
 8025a62:	2b08      	cmp	r3, #8
 8025a64:	d003      	beq.n	8025a6e <ethernet_input+0x8e>
 8025a66:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8025a6a:	d01a      	beq.n	8025aa2 <ethernet_input+0xc2>
#endif /* PPPOE_SUPPORT */

    default:
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      goto free_and_return;
 8025a6c:	e02b      	b.n	8025ac6 <ethernet_input+0xe6>

  switch (type) {
#if LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8025a6e:	683b      	ldr	r3, [r7, #0]
 8025a70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8025a74:	f003 0320 	and.w	r3, r3, #32
 8025a78:	2b00      	cmp	r3, #0
 8025a7a:	d100      	bne.n	8025a7e <ethernet_input+0x9e>
        goto free_and_return;
 8025a7c:	e023      	b.n	8025ac6 <ethernet_input+0xe6>
#if ETHARP_TRUST_IP_MAC
      /* update ARP table */
      etharp_ip_input(netif, p);
#endif /* ETHARP_TRUST_IP_MAC */
      /* skip Ethernet header */
      if(pbuf_header(p, -ip_hdr_offset)) {
 8025a7e:	8afb      	ldrh	r3, [r7, #22]
 8025a80:	425b      	negs	r3, r3
 8025a82:	b29b      	uxth	r3, r3
 8025a84:	b29b      	uxth	r3, r3
 8025a86:	b21b      	sxth	r3, r3
 8025a88:	6878      	ldr	r0, [r7, #4]
 8025a8a:	4619      	mov	r1, r3
 8025a8c:	f001 fe16 	bl	80276bc <pbuf_header>
 8025a90:	4603      	mov	r3, r0
 8025a92:	2b00      	cmp	r3, #0
 8025a94:	d000      	beq.n	8025a98 <ethernet_input+0xb8>
        LWIP_ASSERT("Can't move over header in packet", 0);
        goto free_and_return;
 8025a96:	e016      	b.n	8025ac6 <ethernet_input+0xe6>
      } else {
        /* pass to IP layer */
        ip_input(p, netif);
 8025a98:	6878      	ldr	r0, [r7, #4]
 8025a9a:	6839      	ldr	r1, [r7, #0]
 8025a9c:	f000 fcce 	bl	802643c <ip_input>
      }
      break;
 8025aa0:	e00f      	b.n	8025ac2 <ethernet_input+0xe2>
      
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8025aa2:	683b      	ldr	r3, [r7, #0]
 8025aa4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8025aa8:	f003 0320 	and.w	r3, r3, #32
 8025aac:	2b00      	cmp	r3, #0
 8025aae:	d100      	bne.n	8025ab2 <ethernet_input+0xd2>
        goto free_and_return;
 8025ab0:	e009      	b.n	8025ac6 <ethernet_input+0xe6>
      }
      /* pass p to ARP module */
      etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
 8025ab2:	683b      	ldr	r3, [r7, #0]
 8025ab4:	3327      	adds	r3, #39	; 0x27
 8025ab6:	6838      	ldr	r0, [r7, #0]
 8025ab8:	4619      	mov	r1, r3
 8025aba:	687a      	ldr	r2, [r7, #4]
 8025abc:	f7ff fc1e 	bl	80252fc <etharp_arp_input>
      break;
 8025ac0:	bf00      	nop
      goto free_and_return;
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8025ac2:	2300      	movs	r3, #0
 8025ac4:	e003      	b.n	8025ace <ethernet_input+0xee>

free_and_return:
  pbuf_free(p);
 8025ac6:	6878      	ldr	r0, [r7, #4]
 8025ac8:	f001 fe6a 	bl	80277a0 <pbuf_free>
  return ERR_OK;
 8025acc:	2300      	movs	r3, #0
 8025ace:	b25b      	sxtb	r3, r3
}
 8025ad0:	4618      	mov	r0, r3
 8025ad2:	3718      	adds	r7, #24
 8025ad4:	46bd      	mov	sp, r7
 8025ad6:	bd80      	pop	{r7, pc}
 8025ad8:	08029ff4 	.word	0x08029ff4

08025adc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the ip header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8025adc:	b580      	push	{r7, lr}
 8025ade:	b08c      	sub	sp, #48	; 0x30
 8025ae0:	af04      	add	r7, sp, #16
 8025ae2:	6078      	str	r0, [r7, #4]
 8025ae4:	6039      	str	r1, [r7, #0]

  ICMP_STATS_INC(icmp.recv);
  snmp_inc_icmpinmsgs();


  iphdr = (struct ip_hdr *)p->payload;
 8025ae6:	687b      	ldr	r3, [r7, #4]
 8025ae8:	685b      	ldr	r3, [r3, #4]
 8025aea:	61fb      	str	r3, [r7, #28]
  hlen = IPH_HL(iphdr) * 4;
 8025aec:	69fb      	ldr	r3, [r7, #28]
 8025aee:	781b      	ldrb	r3, [r3, #0]
 8025af0:	b29b      	uxth	r3, r3
 8025af2:	f003 030f 	and.w	r3, r3, #15
 8025af6:	b29b      	uxth	r3, r3
 8025af8:	009b      	lsls	r3, r3, #2
 8025afa:	b29b      	uxth	r3, r3
 8025afc:	82fb      	strh	r3, [r7, #22]
  if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t)*2)) {
 8025afe:	8afb      	ldrh	r3, [r7, #22]
 8025b00:	425b      	negs	r3, r3
 8025b02:	b29b      	uxth	r3, r3
 8025b04:	b29b      	uxth	r3, r3
 8025b06:	b21b      	sxth	r3, r3
 8025b08:	6878      	ldr	r0, [r7, #4]
 8025b0a:	4619      	mov	r1, r3
 8025b0c:	f001 fdd6 	bl	80276bc <pbuf_header>
 8025b10:	4603      	mov	r3, r0
 8025b12:	2b00      	cmp	r3, #0
 8025b14:	f040 80b7 	bne.w	8025c86 <icmp_input+0x1aa>
 8025b18:	687b      	ldr	r3, [r7, #4]
 8025b1a:	891b      	ldrh	r3, [r3, #8]
 8025b1c:	2b03      	cmp	r3, #3
 8025b1e:	f240 80b2 	bls.w	8025c86 <icmp_input+0x1aa>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8025b22:	687b      	ldr	r3, [r7, #4]
 8025b24:	685b      	ldr	r3, [r3, #4]
 8025b26:	781b      	ldrb	r3, [r3, #0]
 8025b28:	757b      	strb	r3, [r7, #21]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8025b2a:	7d7b      	ldrb	r3, [r7, #21]
 8025b2c:	2b00      	cmp	r3, #0
 8025b2e:	f000 80a5 	beq.w	8025c7c <icmp_input+0x1a0>
 8025b32:	2b08      	cmp	r3, #8
 8025b34:	f040 80a3 	bne.w	8025c7e <icmp_input+0x1a2>
       (as obviously, an echo request has been sent, too). */
    break; 
  case ICMP_ECHO:
#if !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
    {
      int accepted = 1;
 8025b38:	2301      	movs	r3, #1
 8025b3a:	61bb      	str	r3, [r7, #24]
#if !LWIP_MULTICAST_PING
      /* multicast destination address? */
      if (ip_addr_ismulticast(&current_iphdr_dest)) {
 8025b3c:	4b57      	ldr	r3, [pc, #348]	; (8025c9c <icmp_input+0x1c0>)
 8025b3e:	681b      	ldr	r3, [r3, #0]
 8025b40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8025b44:	2be0      	cmp	r3, #224	; 0xe0
 8025b46:	d101      	bne.n	8025b4c <icmp_input+0x70>
        accepted = 0;
 8025b48:	2300      	movs	r3, #0
 8025b4a:	61bb      	str	r3, [r7, #24]
      }
#endif /* LWIP_MULTICAST_PING */
#if !LWIP_BROADCAST_PING
      /* broadcast destination address? */
      if (ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
 8025b4c:	4b53      	ldr	r3, [pc, #332]	; (8025c9c <icmp_input+0x1c0>)
 8025b4e:	681b      	ldr	r3, [r3, #0]
 8025b50:	4618      	mov	r0, r3
 8025b52:	6839      	ldr	r1, [r7, #0]
 8025b54:	f000 fe8a 	bl	802686c <ip4_addr_isbroadcast>
 8025b58:	4603      	mov	r3, r0
 8025b5a:	2b00      	cmp	r3, #0
 8025b5c:	d001      	beq.n	8025b62 <icmp_input+0x86>
        accepted = 0;
 8025b5e:	2300      	movs	r3, #0
 8025b60:	61bb      	str	r3, [r7, #24]
      }
#endif /* LWIP_BROADCAST_PING */
      /* broadcast or multicast destination address not acceptd? */
      if (!accepted) {
 8025b62:	69bb      	ldr	r3, [r7, #24]
 8025b64:	2b00      	cmp	r3, #0
 8025b66:	d103      	bne.n	8025b70 <icmp_input+0x94>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast or broadcast pings\n"));
        ICMP_STATS_INC(icmp.err);
        pbuf_free(p);
 8025b68:	6878      	ldr	r0, [r7, #4]
 8025b6a:	f001 fe19 	bl	80277a0 <pbuf_free>
        return;
 8025b6e:	e092      	b.n	8025c96 <icmp_input+0x1ba>
      }
    }
#endif /* !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8025b70:	687b      	ldr	r3, [r7, #4]
 8025b72:	891b      	ldrh	r3, [r3, #8]
 8025b74:	2b07      	cmp	r3, #7
 8025b76:	d800      	bhi.n	8025b7a <icmp_input+0x9e>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
 8025b78:	e085      	b.n	8025c86 <icmp_input+0x1aa>
    }
    if (inet_chksum_pbuf(p) != 0) {
 8025b7a:	6878      	ldr	r0, [r7, #4]
 8025b7c:	f000 fbd6 	bl	802632c <inet_chksum_pbuf>
 8025b80:	4603      	mov	r3, r0
 8025b82:	2b00      	cmp	r3, #0
 8025b84:	d003      	beq.n	8025b8e <icmp_input+0xb2>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
      pbuf_free(p);
 8025b86:	6878      	ldr	r0, [r7, #4]
 8025b88:	f001 fe0a 	bl	80277a0 <pbuf_free>
      ICMP_STATS_INC(icmp.chkerr);
      snmp_inc_icmpinerrors();
      return;
 8025b8c:	e083      	b.n	8025c96 <icmp_input+0x1ba>
    }
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
 8025b8e:	6878      	ldr	r0, [r7, #4]
 8025b90:	2124      	movs	r1, #36	; 0x24
 8025b92:	f001 fd93 	bl	80276bc <pbuf_header>
 8025b96:	4603      	mov	r3, r0
 8025b98:	2b00      	cmp	r3, #0
 8025b9a:	d033      	beq.n	8025c04 <icmp_input+0x128>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* switch p->payload to ip header */
      if (pbuf_header(p, hlen)) {
 8025b9c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8025ba0:	6878      	ldr	r0, [r7, #4]
 8025ba2:	4619      	mov	r1, r3
 8025ba4:	f001 fd8a 	bl	80276bc <pbuf_header>
 8025ba8:	4603      	mov	r3, r0
 8025baa:	2b00      	cmp	r3, #0
 8025bac:	d000      	beq.n	8025bb0 <icmp_input+0xd4>
        LWIP_ASSERT("icmp_input: moving p->payload to ip header failed\n", 0);
        goto memerr;
 8025bae:	e06e      	b.n	8025c8e <icmp_input+0x1b2>
      }
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8025bb0:	687b      	ldr	r3, [r7, #4]
 8025bb2:	891b      	ldrh	r3, [r3, #8]
 8025bb4:	2002      	movs	r0, #2
 8025bb6:	4619      	mov	r1, r3
 8025bb8:	2200      	movs	r2, #0
 8025bba:	f001 fc2d 	bl	8027418 <pbuf_alloc>
 8025bbe:	6138      	str	r0, [r7, #16]
      if (r == NULL) {
 8025bc0:	693b      	ldr	r3, [r7, #16]
 8025bc2:	2b00      	cmp	r3, #0
 8025bc4:	d100      	bne.n	8025bc8 <icmp_input+0xec>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto memerr;
 8025bc6:	e062      	b.n	8025c8e <icmp_input+0x1b2>
      }
      LWIP_ASSERT("check that first pbuf can hold struct the ICMP header",
                  (r->len >= hlen + sizeof(struct icmp_echo_hdr)));
      /* copy the whole packet including ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8025bc8:	6938      	ldr	r0, [r7, #16]
 8025bca:	6879      	ldr	r1, [r7, #4]
 8025bcc:	f001 fe7e 	bl	80278cc <pbuf_copy>
 8025bd0:	4603      	mov	r3, r0
 8025bd2:	2b00      	cmp	r3, #0
 8025bd4:	d000      	beq.n	8025bd8 <icmp_input+0xfc>
        LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
        goto memerr;
 8025bd6:	e05a      	b.n	8025c8e <icmp_input+0x1b2>
      }
      iphdr = (struct ip_hdr *)r->payload;
 8025bd8:	693b      	ldr	r3, [r7, #16]
 8025bda:	685b      	ldr	r3, [r3, #4]
 8025bdc:	61fb      	str	r3, [r7, #28]
      /* switch r->payload back to icmp header */
      if (pbuf_header(r, -hlen)) {
 8025bde:	8afb      	ldrh	r3, [r7, #22]
 8025be0:	425b      	negs	r3, r3
 8025be2:	b29b      	uxth	r3, r3
 8025be4:	b29b      	uxth	r3, r3
 8025be6:	b21b      	sxth	r3, r3
 8025be8:	6938      	ldr	r0, [r7, #16]
 8025bea:	4619      	mov	r1, r3
 8025bec:	f001 fd66 	bl	80276bc <pbuf_header>
 8025bf0:	4603      	mov	r3, r0
 8025bf2:	2b00      	cmp	r3, #0
 8025bf4:	d000      	beq.n	8025bf8 <icmp_input+0x11c>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
 8025bf6:	e04a      	b.n	8025c8e <icmp_input+0x1b2>
      }
      /* free the original p */
      pbuf_free(p);
 8025bf8:	6878      	ldr	r0, [r7, #4]
 8025bfa:	f001 fdd1 	bl	80277a0 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8025bfe:	693b      	ldr	r3, [r7, #16]
 8025c00:	607b      	str	r3, [r7, #4]
 8025c02:	e008      	b.n	8025c16 <icmp_input+0x13a>
    } else {
      /* restore p->payload to point to icmp header */
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
 8025c04:	6878      	ldr	r0, [r7, #4]
 8025c06:	f06f 0123 	mvn.w	r1, #35	; 0x23
 8025c0a:	f001 fd57 	bl	80276bc <pbuf_header>
 8025c0e:	4603      	mov	r3, r0
 8025c10:	2b00      	cmp	r3, #0
 8025c12:	d000      	beq.n	8025c16 <icmp_input+0x13a>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
 8025c14:	e03b      	b.n	8025c8e <icmp_input+0x1b2>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8025c16:	687b      	ldr	r3, [r7, #4]
 8025c18:	685b      	ldr	r3, [r3, #4]
 8025c1a:	60fb      	str	r3, [r7, #12]
    ip_addr_copy(iphdr->src, *ip_current_dest_addr());
 8025c1c:	4b1f      	ldr	r3, [pc, #124]	; (8025c9c <icmp_input+0x1c0>)
 8025c1e:	681a      	ldr	r2, [r3, #0]
 8025c20:	69fb      	ldr	r3, [r7, #28]
 8025c22:	60da      	str	r2, [r3, #12]
    ip_addr_copy(iphdr->dest, *ip_current_src_addr());
 8025c24:	4b1e      	ldr	r3, [pc, #120]	; (8025ca0 <icmp_input+0x1c4>)
 8025c26:	681a      	ldr	r2, [r3, #0]
 8025c28:	69fb      	ldr	r3, [r7, #28]
 8025c2a:	611a      	str	r2, [r3, #16]
    ICMPH_TYPE_SET(iecho, ICMP_ER);
 8025c2c:	68fb      	ldr	r3, [r7, #12]
 8025c2e:	2200      	movs	r2, #0
 8025c30:	701a      	strb	r2, [r3, #0]
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
    } else {
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
    }
#else /* CHECKSUM_GEN_ICMP */
    iecho->chksum = 0;
 8025c32:	68fb      	ldr	r3, [r7, #12]
 8025c34:	2200      	movs	r2, #0
 8025c36:	709a      	strb	r2, [r3, #2]
 8025c38:	2200      	movs	r2, #0
 8025c3a:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

    /* Set the correct TTL and recalculate the header checksum. */
    IPH_TTL_SET(iphdr, ICMP_TTL);
 8025c3c:	69fb      	ldr	r3, [r7, #28]
 8025c3e:	22ff      	movs	r2, #255	; 0xff
 8025c40:	721a      	strb	r2, [r3, #8]
    IPH_CHKSUM_SET(iphdr, 0);
 8025c42:	69fb      	ldr	r3, [r7, #28]
 8025c44:	2200      	movs	r2, #0
 8025c46:	729a      	strb	r2, [r3, #10]
 8025c48:	2200      	movs	r2, #0
 8025c4a:	72da      	strb	r2, [r3, #11]
    /* increase number of messages attempted to send */
    snmp_inc_icmpoutmsgs();
    /* increase number of echo replies attempted to send */
    snmp_inc_icmpoutechoreps();

    if(pbuf_header(p, hlen)) {
 8025c4c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8025c50:	6878      	ldr	r0, [r7, #4]
 8025c52:	4619      	mov	r1, r3
 8025c54:	f001 fd32 	bl	80276bc <pbuf_header>
 8025c58:	4603      	mov	r3, r0
 8025c5a:	2b00      	cmp	r3, #0
 8025c5c:	d10d      	bne.n	8025c7a <icmp_input+0x19e>
      LWIP_ASSERT("Can't move over header in packet", 0);
    } else {
      err_t ret;
      /* send an ICMP packet, src addr is the dest addr of the curren packet */
      ret = ip_output_if(p, ip_current_dest_addr(), IP_HDRINCL,
 8025c5e:	2300      	movs	r3, #0
 8025c60:	9300      	str	r3, [sp, #0]
 8025c62:	2301      	movs	r3, #1
 8025c64:	9301      	str	r3, [sp, #4]
 8025c66:	683b      	ldr	r3, [r7, #0]
 8025c68:	9302      	str	r3, [sp, #8]
 8025c6a:	6878      	ldr	r0, [r7, #4]
 8025c6c:	490b      	ldr	r1, [pc, #44]	; (8025c9c <icmp_input+0x1c0>)
 8025c6e:	2200      	movs	r2, #0
 8025c70:	23ff      	movs	r3, #255	; 0xff
 8025c72:	f000 fd07 	bl	8026684 <ip_output_if>
 8025c76:	4603      	mov	r3, r0
 8025c78:	72fb      	strb	r3, [r7, #11]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %c.\n", ret));
      }
    }
    break;
 8025c7a:	e000      	b.n	8025c7e <icmp_input+0x1a2>
#endif /* LWIP_DEBUG */
  switch (type) {
  case ICMP_ER:
    /* This is OK, echo reply might have been parsed by a raw PCB
       (as obviously, an echo request has been sent, too). */
    break; 
 8025c7c:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n", 
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8025c7e:	6878      	ldr	r0, [r7, #4]
 8025c80:	f001 fd8e 	bl	80277a0 <pbuf_free>
  return;
 8025c84:	e007      	b.n	8025c96 <icmp_input+0x1ba>
lenerr:
  pbuf_free(p);
 8025c86:	6878      	ldr	r0, [r7, #4]
 8025c88:	f001 fd8a 	bl	80277a0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  snmp_inc_icmpinerrors();
  return;
 8025c8c:	e003      	b.n	8025c96 <icmp_input+0x1ba>
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
memerr:
  pbuf_free(p);
 8025c8e:	6878      	ldr	r0, [r7, #4]
 8025c90:	f001 fd86 	bl	80277a0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  snmp_inc_icmpinerrors();
  return;
 8025c94:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
}
 8025c96:	3720      	adds	r7, #32
 8025c98:	46bd      	mov	sp, r7
 8025c9a:	bd80      	pop	{r7, pc}
 8025c9c:	1fff0120 	.word	0x1fff0120
 8025ca0:	1fff0118 	.word	0x1fff0118

08025ca4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8025ca4:	b580      	push	{r7, lr}
 8025ca6:	b082      	sub	sp, #8
 8025ca8:	af00      	add	r7, sp, #0
 8025caa:	6078      	str	r0, [r7, #4]
 8025cac:	460b      	mov	r3, r1
 8025cae:	70fb      	strb	r3, [r7, #3]
  icmp_send_response(p, ICMP_DUR, t);
 8025cb0:	78fb      	ldrb	r3, [r7, #3]
 8025cb2:	6878      	ldr	r0, [r7, #4]
 8025cb4:	2103      	movs	r1, #3
 8025cb6:	461a      	mov	r2, r3
 8025cb8:	f000 f804 	bl	8025cc4 <icmp_send_response>
}
 8025cbc:	3708      	adds	r7, #8
 8025cbe:	46bd      	mov	sp, r7
 8025cc0:	bd80      	pop	{r7, pc}
 8025cc2:	bf00      	nop

08025cc4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8025cc4:	b580      	push	{r7, lr}
 8025cc6:	b088      	sub	sp, #32
 8025cc8:	af02      	add	r7, sp, #8
 8025cca:	6078      	str	r0, [r7, #4]
 8025ccc:	460b      	mov	r3, r1
 8025cce:	70fb      	strb	r3, [r7, #3]
 8025cd0:	4613      	mov	r3, r2
 8025cd2:	70bb      	strb	r3, [r7, #2]
  /* we can use the echo header here */
  struct icmp_echo_hdr *icmphdr;
  ip_addr_t iphdr_src;

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8025cd4:	2001      	movs	r0, #1
 8025cd6:	2124      	movs	r1, #36	; 0x24
 8025cd8:	2200      	movs	r2, #0
 8025cda:	f001 fb9d 	bl	8027418 <pbuf_alloc>
 8025cde:	6178      	str	r0, [r7, #20]
                 PBUF_RAM);
  if (q == NULL) {
 8025ce0:	697b      	ldr	r3, [r7, #20]
 8025ce2:	2b00      	cmp	r3, #0
 8025ce4:	d040      	beq.n	8025d68 <icmp_send_response+0xa4>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8025ce6:	687b      	ldr	r3, [r7, #4]
 8025ce8:	685b      	ldr	r3, [r3, #4]
 8025cea:	613b      	str	r3, [r7, #16]
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->src));
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8025cec:	697b      	ldr	r3, [r7, #20]
 8025cee:	685b      	ldr	r3, [r3, #4]
 8025cf0:	60fb      	str	r3, [r7, #12]
  icmphdr->type = type;
 8025cf2:	68fb      	ldr	r3, [r7, #12]
 8025cf4:	78fa      	ldrb	r2, [r7, #3]
 8025cf6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8025cf8:	68fb      	ldr	r3, [r7, #12]
 8025cfa:	78ba      	ldrb	r2, [r7, #2]
 8025cfc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8025cfe:	68fb      	ldr	r3, [r7, #12]
 8025d00:	2200      	movs	r2, #0
 8025d02:	711a      	strb	r2, [r3, #4]
 8025d04:	2200      	movs	r2, #0
 8025d06:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8025d08:	68fb      	ldr	r3, [r7, #12]
 8025d0a:	2200      	movs	r2, #0
 8025d0c:	719a      	strb	r2, [r3, #6]
 8025d0e:	2200      	movs	r2, #0
 8025d10:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8025d12:	697b      	ldr	r3, [r7, #20]
 8025d14:	685b      	ldr	r3, [r3, #4]
 8025d16:	f103 0208 	add.w	r2, r3, #8
 8025d1a:	687b      	ldr	r3, [r7, #4]
 8025d1c:	685b      	ldr	r3, [r3, #4]
 8025d1e:	4610      	mov	r0, r2
 8025d20:	4619      	mov	r1, r3
 8025d22:	221c      	movs	r2, #28
 8025d24:	f7ff f83c 	bl	8024da0 <thumb2_memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  /* calculate checksum */
  icmphdr->chksum = 0;
 8025d28:	68fb      	ldr	r3, [r7, #12]
 8025d2a:	2200      	movs	r2, #0
 8025d2c:	709a      	strb	r2, [r3, #2]
 8025d2e:	2200      	movs	r2, #0
 8025d30:	70da      	strb	r2, [r3, #3]
  icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8025d32:	697b      	ldr	r3, [r7, #20]
 8025d34:	895b      	ldrh	r3, [r3, #10]
 8025d36:	68f8      	ldr	r0, [r7, #12]
 8025d38:	4619      	mov	r1, r3
 8025d3a:	f000 fae5 	bl	8026308 <inet_chksum>
 8025d3e:	4603      	mov	r3, r0
 8025d40:	461a      	mov	r2, r3
 8025d42:	68fb      	ldr	r3, [r7, #12]
 8025d44:	805a      	strh	r2, [r3, #2]
  ICMP_STATS_INC(icmp.xmit);
  /* increase number of messages attempted to send */
  snmp_inc_icmpoutmsgs();
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
 8025d46:	693b      	ldr	r3, [r7, #16]
 8025d48:	68db      	ldr	r3, [r3, #12]
 8025d4a:	60bb      	str	r3, [r7, #8]
  ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
 8025d4c:	f107 0208 	add.w	r2, r7, #8
 8025d50:	2300      	movs	r3, #0
 8025d52:	9300      	str	r3, [sp, #0]
 8025d54:	2301      	movs	r3, #1
 8025d56:	9301      	str	r3, [sp, #4]
 8025d58:	6978      	ldr	r0, [r7, #20]
 8025d5a:	2100      	movs	r1, #0
 8025d5c:	23ff      	movs	r3, #255	; 0xff
 8025d5e:	f000 fd5f 	bl	8026820 <ip_output>
  pbuf_free(q);
 8025d62:	6978      	ldr	r0, [r7, #20]
 8025d64:	f001 fd1c 	bl	80277a0 <pbuf_free>
}
 8025d68:	3718      	adds	r7, #24
 8025d6a:	46bd      	mov	sp, r7
 8025d6c:	bd80      	pop	{r7, pc}
 8025d6e:	bf00      	nop

08025d70 <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
 8025d70:	b480      	push	{r7}
 8025d72:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
 8025d74:	4b04      	ldr	r3, [pc, #16]	; (8025d88 <igmp_init+0x18>)
 8025d76:	4a05      	ldr	r2, [pc, #20]	; (8025d8c <igmp_init+0x1c>)
 8025d78:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
 8025d7a:	4b05      	ldr	r3, [pc, #20]	; (8025d90 <igmp_init+0x20>)
 8025d7c:	4a05      	ldr	r2, [pc, #20]	; (8025d94 <igmp_init+0x24>)
 8025d7e:	601a      	str	r2, [r3, #0]
}
 8025d80:	46bd      	mov	sp, r7
 8025d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d86:	4770      	bx	lr
 8025d88:	1ffe9c08 	.word	0x1ffe9c08
 8025d8c:	010000e0 	.word	0x010000e0
 8025d90:	1ffe9c0c 	.word	0x1ffe9c0c
 8025d94:	020000e0 	.word	0x020000e0

08025d98 <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
 8025d98:	b580      	push	{r7, lr}
 8025d9a:	b084      	sub	sp, #16
 8025d9c:	af00      	add	r7, sp, #0
 8025d9e:	6078      	str	r0, [r7, #4]
  struct igmp_group* group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", netif));

  group = igmp_lookup_group(netif, &allsystems);
 8025da0:	6878      	ldr	r0, [r7, #4]
 8025da2:	4911      	ldr	r1, [pc, #68]	; (8025de8 <igmp_start+0x50>)
 8025da4:	f000 f864 	bl	8025e70 <igmp_lookup_group>
 8025da8:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 8025daa:	68fb      	ldr	r3, [r7, #12]
 8025dac:	2b00      	cmp	r3, #0
 8025dae:	d014      	beq.n	8025dda <igmp_start+0x42>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 8025db0:	68fb      	ldr	r3, [r7, #12]
 8025db2:	2202      	movs	r2, #2
 8025db4:	735a      	strb	r2, [r3, #13]
    group->use++;
 8025db6:	68fb      	ldr	r3, [r7, #12]
 8025db8:	7c1b      	ldrb	r3, [r3, #16]
 8025dba:	3301      	adds	r3, #1
 8025dbc:	b2da      	uxtb	r2, r3
 8025dbe:	68fb      	ldr	r3, [r7, #12]
 8025dc0:	741a      	strb	r2, [r3, #16]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
 8025dc2:	687b      	ldr	r3, [r7, #4]
 8025dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8025dc6:	2b00      	cmp	r3, #0
 8025dc8:	d005      	beq.n	8025dd6 <igmp_start+0x3e>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip_addr_debug_print(IGMP_DEBUG, &allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", netif));
      netif->igmp_mac_filter(netif, &allsystems, IGMP_ADD_MAC_FILTER);
 8025dca:	687b      	ldr	r3, [r7, #4]
 8025dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8025dce:	6878      	ldr	r0, [r7, #4]
 8025dd0:	4905      	ldr	r1, [pc, #20]	; (8025de8 <igmp_start+0x50>)
 8025dd2:	2201      	movs	r2, #1
 8025dd4:	4798      	blx	r3
    }

    return ERR_OK;
 8025dd6:	2300      	movs	r3, #0
 8025dd8:	e000      	b.n	8025ddc <igmp_start+0x44>
  }

  return ERR_MEM;
 8025dda:	23ff      	movs	r3, #255	; 0xff
 8025ddc:	b25b      	sxtb	r3, r3
}
 8025dde:	4618      	mov	r0, r3
 8025de0:	3710      	adds	r7, #16
 8025de2:	46bd      	mov	sp, r7
 8025de4:	bd80      	pop	{r7, pc}
 8025de6:	bf00      	nop
 8025de8:	1ffe9c08 	.word	0x1ffe9c08

08025dec <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
 8025dec:	b580      	push	{r7, lr}
 8025dee:	b084      	sub	sp, #16
 8025df0:	af00      	add	r7, sp, #0
 8025df2:	6078      	str	r0, [r7, #4]
  struct igmp_group *group = igmp_group_list;
 8025df4:	4b0a      	ldr	r3, [pc, #40]	; (8025e20 <igmp_report_groups+0x34>)
 8025df6:	681b      	ldr	r3, [r3, #0]
 8025df8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", netif));

  while (group != NULL) {
 8025dfa:	e00b      	b.n	8025e14 <igmp_report_groups+0x28>
    if (group->netif == netif) {
 8025dfc:	68fb      	ldr	r3, [r7, #12]
 8025dfe:	685a      	ldr	r2, [r3, #4]
 8025e00:	687b      	ldr	r3, [r7, #4]
 8025e02:	429a      	cmp	r2, r3
 8025e04:	d103      	bne.n	8025e0e <igmp_report_groups+0x22>
      igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 8025e06:	68f8      	ldr	r0, [r7, #12]
 8025e08:	2105      	movs	r1, #5
 8025e0a:	f000 f977 	bl	80260fc <igmp_delaying_member>
    }
    group = group->next;
 8025e0e:	68fb      	ldr	r3, [r7, #12]
 8025e10:	681b      	ldr	r3, [r3, #0]
 8025e12:	60fb      	str	r3, [r7, #12]
{
  struct igmp_group *group = igmp_group_list;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", netif));

  while (group != NULL) {
 8025e14:	68fb      	ldr	r3, [r7, #12]
 8025e16:	2b00      	cmp	r3, #0
 8025e18:	d1f0      	bne.n	8025dfc <igmp_report_groups+0x10>
    if (group->netif == netif) {
      igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
    }
    group = group->next;
  }
}
 8025e1a:	3710      	adds	r7, #16
 8025e1c:	46bd      	mov	sp, r7
 8025e1e:	bd80      	pop	{r7, pc}
 8025e20:	1ffe9c04 	.word	0x1ffe9c04

08025e24 <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, ip_addr_t *addr)
{
 8025e24:	b480      	push	{r7}
 8025e26:	b085      	sub	sp, #20
 8025e28:	af00      	add	r7, sp, #0
 8025e2a:	6078      	str	r0, [r7, #4]
 8025e2c:	6039      	str	r1, [r7, #0]
  struct igmp_group *group = igmp_group_list;
 8025e2e:	4b0f      	ldr	r3, [pc, #60]	; (8025e6c <igmp_lookfor_group+0x48>)
 8025e30:	681b      	ldr	r3, [r3, #0]
 8025e32:	60fb      	str	r3, [r7, #12]

  while (group != NULL) {
 8025e34:	e00f      	b.n	8025e56 <igmp_lookfor_group+0x32>
    if ((group->netif == ifp) && (ip_addr_cmp(&(group->group_address), addr))) {
 8025e36:	68fb      	ldr	r3, [r7, #12]
 8025e38:	685a      	ldr	r2, [r3, #4]
 8025e3a:	687b      	ldr	r3, [r7, #4]
 8025e3c:	429a      	cmp	r2, r3
 8025e3e:	d107      	bne.n	8025e50 <igmp_lookfor_group+0x2c>
 8025e40:	68fb      	ldr	r3, [r7, #12]
 8025e42:	689a      	ldr	r2, [r3, #8]
 8025e44:	683b      	ldr	r3, [r7, #0]
 8025e46:	681b      	ldr	r3, [r3, #0]
 8025e48:	429a      	cmp	r2, r3
 8025e4a:	d101      	bne.n	8025e50 <igmp_lookfor_group+0x2c>
      return group;
 8025e4c:	68fb      	ldr	r3, [r7, #12]
 8025e4e:	e006      	b.n	8025e5e <igmp_lookfor_group+0x3a>
    }
    group = group->next;
 8025e50:	68fb      	ldr	r3, [r7, #12]
 8025e52:	681b      	ldr	r3, [r3, #0]
 8025e54:	60fb      	str	r3, [r7, #12]
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, ip_addr_t *addr)
{
  struct igmp_group *group = igmp_group_list;

  while (group != NULL) {
 8025e56:	68fb      	ldr	r3, [r7, #12]
 8025e58:	2b00      	cmp	r3, #0
 8025e5a:	d1ec      	bne.n	8025e36 <igmp_lookfor_group+0x12>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
 8025e5c:	2300      	movs	r3, #0
}
 8025e5e:	4618      	mov	r0, r3
 8025e60:	3714      	adds	r7, #20
 8025e62:	46bd      	mov	sp, r7
 8025e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e68:	4770      	bx	lr
 8025e6a:	bf00      	nop
 8025e6c:	1ffe9c04 	.word	0x1ffe9c04

08025e70 <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
struct igmp_group *
igmp_lookup_group(struct netif *ifp, ip_addr_t *addr)
{
 8025e70:	b580      	push	{r7, lr}
 8025e72:	b084      	sub	sp, #16
 8025e74:	af00      	add	r7, sp, #0
 8025e76:	6078      	str	r0, [r7, #4]
 8025e78:	6039      	str	r1, [r7, #0]
  struct igmp_group *group = igmp_group_list;
 8025e7a:	4b1c      	ldr	r3, [pc, #112]	; (8025eec <igmp_lookup_group+0x7c>)
 8025e7c:	681b      	ldr	r3, [r3, #0]
 8025e7e:	60fb      	str	r3, [r7, #12]
  
  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
 8025e80:	6878      	ldr	r0, [r7, #4]
 8025e82:	6839      	ldr	r1, [r7, #0]
 8025e84:	f7ff ffce 	bl	8025e24 <igmp_lookfor_group>
 8025e88:	60f8      	str	r0, [r7, #12]
  if (group != NULL) {
 8025e8a:	68fb      	ldr	r3, [r7, #12]
 8025e8c:	2b00      	cmp	r3, #0
 8025e8e:	d001      	beq.n	8025e94 <igmp_lookup_group+0x24>
    /* Group already exists. */
    return group;
 8025e90:	68fb      	ldr	r3, [r7, #12]
 8025e92:	e026      	b.n	8025ee2 <igmp_lookup_group+0x72>
  }

  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
 8025e94:	2002      	movs	r0, #2
 8025e96:	f001 f901 	bl	802709c <memp_malloc>
 8025e9a:	60f8      	str	r0, [r7, #12]
  if (group != NULL) {
 8025e9c:	68fb      	ldr	r3, [r7, #12]
 8025e9e:	2b00      	cmp	r3, #0
 8025ea0:	d01e      	beq.n	8025ee0 <igmp_lookup_group+0x70>
    group->netif              = ifp;
 8025ea2:	68fb      	ldr	r3, [r7, #12]
 8025ea4:	687a      	ldr	r2, [r7, #4]
 8025ea6:	605a      	str	r2, [r3, #4]
    ip_addr_set(&(group->group_address), addr);
 8025ea8:	683b      	ldr	r3, [r7, #0]
 8025eaa:	2b00      	cmp	r3, #0
 8025eac:	d002      	beq.n	8025eb4 <igmp_lookup_group+0x44>
 8025eae:	683b      	ldr	r3, [r7, #0]
 8025eb0:	681b      	ldr	r3, [r3, #0]
 8025eb2:	e000      	b.n	8025eb6 <igmp_lookup_group+0x46>
 8025eb4:	2300      	movs	r3, #0
 8025eb6:	68fa      	ldr	r2, [r7, #12]
 8025eb8:	6093      	str	r3, [r2, #8]
    group->timer              = 0; /* Not running */
 8025eba:	68fb      	ldr	r3, [r7, #12]
 8025ebc:	2200      	movs	r2, #0
 8025ebe:	81da      	strh	r2, [r3, #14]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
 8025ec0:	68fb      	ldr	r3, [r7, #12]
 8025ec2:	2200      	movs	r2, #0
 8025ec4:	735a      	strb	r2, [r3, #13]
    group->last_reporter_flag = 0;
 8025ec6:	68fb      	ldr	r3, [r7, #12]
 8025ec8:	2200      	movs	r2, #0
 8025eca:	731a      	strb	r2, [r3, #12]
    group->use                = 0;
 8025ecc:	68fb      	ldr	r3, [r7, #12]
 8025ece:	2200      	movs	r2, #0
 8025ed0:	741a      	strb	r2, [r3, #16]
    group->next               = igmp_group_list;
 8025ed2:	4b06      	ldr	r3, [pc, #24]	; (8025eec <igmp_lookup_group+0x7c>)
 8025ed4:	681a      	ldr	r2, [r3, #0]
 8025ed6:	68fb      	ldr	r3, [r7, #12]
 8025ed8:	601a      	str	r2, [r3, #0]
    
    igmp_group_list = group;
 8025eda:	4a04      	ldr	r2, [pc, #16]	; (8025eec <igmp_lookup_group+0x7c>)
 8025edc:	68fb      	ldr	r3, [r7, #12]
 8025ede:	6013      	str	r3, [r2, #0]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group?"":"impossible to ")));
  ip_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", ifp));

  return group;
 8025ee0:	68fb      	ldr	r3, [r7, #12]
}
 8025ee2:	4618      	mov	r0, r3
 8025ee4:	3710      	adds	r7, #16
 8025ee6:	46bd      	mov	sp, r7
 8025ee8:	bd80      	pop	{r7, pc}
 8025eea:	bf00      	nop
 8025eec:	1ffe9c04 	.word	0x1ffe9c04

08025ef0 <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, ip_addr_t *dest)
{
 8025ef0:	b580      	push	{r7, lr}
 8025ef2:	b08a      	sub	sp, #40	; 0x28
 8025ef4:	af00      	add	r7, sp, #0
 8025ef6:	60f8      	str	r0, [r7, #12]
 8025ef8:	60b9      	str	r1, [r7, #8]
 8025efa:	607a      	str	r2, [r7, #4]
  struct igmp_group* groupref;

  IGMP_STATS_INC(igmp.recv);

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */    
  iphdr = (struct ip_hdr *)p->payload;
 8025efc:	68fb      	ldr	r3, [r7, #12]
 8025efe:	685b      	ldr	r3, [r3, #4]
 8025f00:	61fb      	str	r3, [r7, #28]
  if (pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4)) || (p->len < IGMP_MINLEN)) {
 8025f02:	69fb      	ldr	r3, [r7, #28]
 8025f04:	781b      	ldrb	r3, [r3, #0]
 8025f06:	b29b      	uxth	r3, r3
 8025f08:	f003 030f 	and.w	r3, r3, #15
 8025f0c:	b29b      	uxth	r3, r3
 8025f0e:	009b      	lsls	r3, r3, #2
 8025f10:	b29b      	uxth	r3, r3
 8025f12:	425b      	negs	r3, r3
 8025f14:	b29b      	uxth	r3, r3
 8025f16:	b29b      	uxth	r3, r3
 8025f18:	b21b      	sxth	r3, r3
 8025f1a:	68f8      	ldr	r0, [r7, #12]
 8025f1c:	4619      	mov	r1, r3
 8025f1e:	f001 fbcd 	bl	80276bc <pbuf_header>
 8025f22:	4603      	mov	r3, r0
 8025f24:	2b00      	cmp	r3, #0
 8025f26:	d103      	bne.n	8025f30 <igmp_input+0x40>
 8025f28:	68fb      	ldr	r3, [r7, #12]
 8025f2a:	895b      	ldrh	r3, [r3, #10]
 8025f2c:	2b07      	cmp	r3, #7
 8025f2e:	d803      	bhi.n	8025f38 <igmp_input+0x48>
    pbuf_free(p);
 8025f30:	68f8      	ldr	r0, [r7, #12]
 8025f32:	f001 fc35 	bl	80277a0 <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
 8025f36:	e088      	b.n	802604a <igmp_input+0x15a>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip_addr_debug_print(IGMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
 8025f38:	68fb      	ldr	r3, [r7, #12]
 8025f3a:	685b      	ldr	r3, [r3, #4]
 8025f3c:	61bb      	str	r3, [r7, #24]
  if (inet_chksum(igmp, p->len)) {
 8025f3e:	68fb      	ldr	r3, [r7, #12]
 8025f40:	895b      	ldrh	r3, [r3, #10]
 8025f42:	69b8      	ldr	r0, [r7, #24]
 8025f44:	4619      	mov	r1, r3
 8025f46:	f000 f9df 	bl	8026308 <inet_chksum>
 8025f4a:	4603      	mov	r3, r0
 8025f4c:	2b00      	cmp	r3, #0
 8025f4e:	d003      	beq.n	8025f58 <igmp_input+0x68>
    pbuf_free(p);
 8025f50:	68f8      	ldr	r0, [r7, #12]
 8025f52:	f001 fc25 	bl	80277a0 <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
 8025f56:	e078      	b.n	802604a <igmp_input+0x15a>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
 8025f58:	68b8      	ldr	r0, [r7, #8]
 8025f5a:	6879      	ldr	r1, [r7, #4]
 8025f5c:	f7ff ff62 	bl	8025e24 <igmp_lookfor_group>
 8025f60:	6278      	str	r0, [r7, #36]	; 0x24
  
  /* If group can be found or create... */
  if (!group) {
 8025f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f64:	2b00      	cmp	r3, #0
 8025f66:	d103      	bne.n	8025f70 <igmp_input+0x80>
    pbuf_free(p);
 8025f68:	68f8      	ldr	r0, [r7, #12]
 8025f6a:	f001 fc19 	bl	80277a0 <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
 8025f6e:	e06c      	b.n	802604a <igmp_input+0x15a>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
 8025f70:	69bb      	ldr	r3, [r7, #24]
 8025f72:	781b      	ldrb	r3, [r3, #0]
 8025f74:	2b11      	cmp	r3, #17
 8025f76:	d002      	beq.n	8025f7e <igmp_input+0x8e>
 8025f78:	2b16      	cmp	r3, #22
 8025f7a:	d053      	beq.n	8026024 <igmp_input+0x134>
   }
   default: {
     LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
       igmp->igmp_msgtype, group->group_state, &group, group->netif));
     IGMP_STATS_INC(igmp.proterr);
     break;
 8025f7c:	e061      	b.n	8026042 <igmp_input+0x152>

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
   case IGMP_MEMB_QUERY: {
     /* IGMP_MEMB_QUERY to the "all systems" address ? */
     if ((ip_addr_cmp(dest, &allsystems)) && ip_addr_isany(&igmp->igmp_group_address)) {
 8025f7e:	687b      	ldr	r3, [r7, #4]
 8025f80:	681a      	ldr	r2, [r3, #0]
 8025f82:	4b33      	ldr	r3, [pc, #204]	; (8026050 <igmp_input+0x160>)
 8025f84:	681b      	ldr	r3, [r3, #0]
 8025f86:	429a      	cmp	r2, r3
 8025f88:	d12a      	bne.n	8025fe0 <igmp_input+0xf0>
 8025f8a:	69bb      	ldr	r3, [r7, #24]
 8025f8c:	3304      	adds	r3, #4
 8025f8e:	2b00      	cmp	r3, #0
 8025f90:	d003      	beq.n	8025f9a <igmp_input+0xaa>
 8025f92:	69bb      	ldr	r3, [r7, #24]
 8025f94:	685b      	ldr	r3, [r3, #4]
 8025f96:	2b00      	cmp	r3, #0
 8025f98:	d122      	bne.n	8025fe0 <igmp_input+0xf0>
       /* THIS IS THE GENERAL QUERY */
       LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: General IGMP_MEMB_QUERY on \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));

       if (igmp->igmp_maxresp == 0) {
 8025f9a:	69bb      	ldr	r3, [r7, #24]
 8025f9c:	785b      	ldrb	r3, [r3, #1]
 8025f9e:	2b00      	cmp	r3, #0
 8025fa0:	d102      	bne.n	8025fa8 <igmp_input+0xb8>
         IGMP_STATS_INC(igmp.rx_v1);
         LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: got an all hosts query with time== 0 - this is V1 and not implemented - treat as v2\n"));
         igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
 8025fa2:	69bb      	ldr	r3, [r7, #24]
 8025fa4:	220a      	movs	r2, #10
 8025fa6:	705a      	strb	r2, [r3, #1]
       } else {
         IGMP_STATS_INC(igmp.rx_general);
       }

       groupref = igmp_group_list;
 8025fa8:	4b2a      	ldr	r3, [pc, #168]	; (8026054 <igmp_input+0x164>)
 8025faa:	681b      	ldr	r3, [r3, #0]
 8025fac:	623b      	str	r3, [r7, #32]
       while (groupref) {
 8025fae:	e013      	b.n	8025fd8 <igmp_input+0xe8>
         /* Do not send messages on the all systems group address! */
         if ((groupref->netif == inp) && (!(ip_addr_cmp(&(groupref->group_address), &allsystems)))) {
 8025fb0:	6a3b      	ldr	r3, [r7, #32]
 8025fb2:	685a      	ldr	r2, [r3, #4]
 8025fb4:	68bb      	ldr	r3, [r7, #8]
 8025fb6:	429a      	cmp	r2, r3
 8025fb8:	d10b      	bne.n	8025fd2 <igmp_input+0xe2>
 8025fba:	6a3b      	ldr	r3, [r7, #32]
 8025fbc:	689a      	ldr	r2, [r3, #8]
 8025fbe:	4b24      	ldr	r3, [pc, #144]	; (8026050 <igmp_input+0x160>)
 8025fc0:	681b      	ldr	r3, [r3, #0]
 8025fc2:	429a      	cmp	r2, r3
 8025fc4:	d005      	beq.n	8025fd2 <igmp_input+0xe2>
           igmp_delaying_member(groupref, igmp->igmp_maxresp);
 8025fc6:	69bb      	ldr	r3, [r7, #24]
 8025fc8:	785b      	ldrb	r3, [r3, #1]
 8025fca:	6a38      	ldr	r0, [r7, #32]
 8025fcc:	4619      	mov	r1, r3
 8025fce:	f000 f895 	bl	80260fc <igmp_delaying_member>
         }
         groupref = groupref->next;
 8025fd2:	6a3b      	ldr	r3, [r7, #32]
 8025fd4:	681b      	ldr	r3, [r3, #0]
 8025fd6:	623b      	str	r3, [r7, #32]
       } else {
         IGMP_STATS_INC(igmp.rx_general);
       }

       groupref = igmp_group_list;
       while (groupref) {
 8025fd8:	6a3b      	ldr	r3, [r7, #32]
 8025fda:	2b00      	cmp	r3, #0
 8025fdc:	d1e8      	bne.n	8025fb0 <igmp_input+0xc0>

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
   case IGMP_MEMB_QUERY: {
     /* IGMP_MEMB_QUERY to the "all systems" address ? */
     if ((ip_addr_cmp(dest, &allsystems)) && ip_addr_isany(&igmp->igmp_group_address)) {
 8025fde:	e020      	b.n	8026022 <igmp_input+0x132>
         }
         groupref = groupref->next;
       }
     } else {
       /* IGMP_MEMB_QUERY to a specific group ? */
       if (!ip_addr_isany(&igmp->igmp_group_address)) {
 8025fe0:	69bb      	ldr	r3, [r7, #24]
 8025fe2:	3304      	adds	r3, #4
 8025fe4:	2b00      	cmp	r3, #0
 8025fe6:	d01c      	beq.n	8026022 <igmp_input+0x132>
 8025fe8:	69bb      	ldr	r3, [r7, #24]
 8025fea:	685b      	ldr	r3, [r3, #4]
 8025fec:	2b00      	cmp	r3, #0
 8025fee:	d018      	beq.n	8026022 <igmp_input+0x132>
         LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_MEMB_QUERY to a specific group "));
         ip_addr_debug_print(IGMP_DEBUG, &igmp->igmp_group_address);
         if (ip_addr_cmp(dest, &allsystems)) {
 8025ff0:	687b      	ldr	r3, [r7, #4]
 8025ff2:	681a      	ldr	r2, [r3, #0]
 8025ff4:	4b16      	ldr	r3, [pc, #88]	; (8026050 <igmp_input+0x160>)
 8025ff6:	681b      	ldr	r3, [r3, #0]
 8025ff8:	429a      	cmp	r2, r3
 8025ffa:	d109      	bne.n	8026010 <igmp_input+0x120>
           ip_addr_t groupaddr;
           LWIP_DEBUGF(IGMP_DEBUG, (" using \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
           /* we first need to re-look for the group since we used dest last time */
           ip_addr_copy(groupaddr, igmp->igmp_group_address);
 8025ffc:	69bb      	ldr	r3, [r7, #24]
 8025ffe:	685b      	ldr	r3, [r3, #4]
 8026000:	617b      	str	r3, [r7, #20]
           group = igmp_lookfor_group(inp, &groupaddr);
 8026002:	f107 0314 	add.w	r3, r7, #20
 8026006:	68b8      	ldr	r0, [r7, #8]
 8026008:	4619      	mov	r1, r3
 802600a:	f7ff ff0b 	bl	8025e24 <igmp_lookfor_group>
 802600e:	6278      	str	r0, [r7, #36]	; 0x24
         } else {
           LWIP_DEBUGF(IGMP_DEBUG, (" with the group address as destination [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
         }

         if (group != NULL) {
 8026010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026012:	2b00      	cmp	r3, #0
 8026014:	d005      	beq.n	8026022 <igmp_input+0x132>
           IGMP_STATS_INC(igmp.rx_group);
           igmp_delaying_member(group, igmp->igmp_maxresp);
 8026016:	69bb      	ldr	r3, [r7, #24]
 8026018:	785b      	ldrb	r3, [r3, #1]
 802601a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802601c:	4619      	mov	r1, r3
 802601e:	f000 f86d 	bl	80260fc <igmp_delaying_member>
         }
       } else {
         IGMP_STATS_INC(igmp.proterr);
       }
     }
     break;
 8026022:	e00e      	b.n	8026042 <igmp_input+0x152>
   }
   case IGMP_V2_MEMB_REPORT: {
     LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_V2_MEMB_REPORT\n"));
     IGMP_STATS_INC(igmp.rx_report);
     if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 8026024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026026:	7b5b      	ldrb	r3, [r3, #13]
 8026028:	2b01      	cmp	r3, #1
 802602a:	d109      	bne.n	8026040 <igmp_input+0x150>
       /* This is on a specific group we have already looked up */
       group->timer = 0; /* stopped */
 802602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802602e:	2200      	movs	r2, #0
 8026030:	81da      	strh	r2, [r3, #14]
       group->group_state = IGMP_GROUP_IDLE_MEMBER;
 8026032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026034:	2202      	movs	r2, #2
 8026036:	735a      	strb	r2, [r3, #13]
       group->last_reporter_flag = 0;
 8026038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802603a:	2200      	movs	r2, #0
 802603c:	731a      	strb	r2, [r3, #12]
     }
     break;
 802603e:	e7ff      	b.n	8026040 <igmp_input+0x150>
 8026040:	bf00      	nop
     IGMP_STATS_INC(igmp.proterr);
     break;
   }
  }

  pbuf_free(p);
 8026042:	68f8      	ldr	r0, [r7, #12]
 8026044:	f001 fbac 	bl	80277a0 <pbuf_free>
  return;
 8026048:	bf00      	nop
}
 802604a:	3728      	adds	r7, #40	; 0x28
 802604c:	46bd      	mov	sp, r7
 802604e:	bd80      	pop	{r7, pc}
 8026050:	1ffe9c08 	.word	0x1ffe9c08
 8026054:	1ffe9c04 	.word	0x1ffe9c04

08026058 <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
 8026058:	b580      	push	{r7, lr}
 802605a:	b082      	sub	sp, #8
 802605c:	af00      	add	r7, sp, #0
  struct igmp_group *group = igmp_group_list;
 802605e:	4b0f      	ldr	r3, [pc, #60]	; (802609c <igmp_tmr+0x44>)
 8026060:	681b      	ldr	r3, [r3, #0]
 8026062:	607b      	str	r3, [r7, #4]

  while (group != NULL) {
 8026064:	e013      	b.n	802608e <igmp_tmr+0x36>
    if (group->timer > 0) {
 8026066:	687b      	ldr	r3, [r7, #4]
 8026068:	89db      	ldrh	r3, [r3, #14]
 802606a:	2b00      	cmp	r3, #0
 802606c:	d00c      	beq.n	8026088 <igmp_tmr+0x30>
      group->timer--;
 802606e:	687b      	ldr	r3, [r7, #4]
 8026070:	89db      	ldrh	r3, [r3, #14]
 8026072:	3b01      	subs	r3, #1
 8026074:	b29a      	uxth	r2, r3
 8026076:	687b      	ldr	r3, [r7, #4]
 8026078:	81da      	strh	r2, [r3, #14]
      if (group->timer == 0) {
 802607a:	687b      	ldr	r3, [r7, #4]
 802607c:	89db      	ldrh	r3, [r3, #14]
 802607e:	2b00      	cmp	r3, #0
 8026080:	d102      	bne.n	8026088 <igmp_tmr+0x30>
        igmp_timeout(group);
 8026082:	6878      	ldr	r0, [r7, #4]
 8026084:	f000 f80c 	bl	80260a0 <igmp_timeout>
      }
    }
    group = group->next;
 8026088:	687b      	ldr	r3, [r7, #4]
 802608a:	681b      	ldr	r3, [r3, #0]
 802608c:	607b      	str	r3, [r7, #4]
void
igmp_tmr(void)
{
  struct igmp_group *group = igmp_group_list;

  while (group != NULL) {
 802608e:	687b      	ldr	r3, [r7, #4]
 8026090:	2b00      	cmp	r3, #0
 8026092:	d1e8      	bne.n	8026066 <igmp_tmr+0xe>
        igmp_timeout(group);
      }
    }
    group = group->next;
  }
}
 8026094:	3708      	adds	r7, #8
 8026096:	46bd      	mov	sp, r7
 8026098:	bd80      	pop	{r7, pc}
 802609a:	bf00      	nop
 802609c:	1ffe9c04 	.word	0x1ffe9c04

080260a0 <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct igmp_group *group)
{
 80260a0:	b580      	push	{r7, lr}
 80260a2:	b082      	sub	sp, #8
 80260a4:	af00      	add	r7, sp, #0
 80260a6:	6078      	str	r0, [r7, #4]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group */
  if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 80260a8:	687b      	ldr	r3, [r7, #4]
 80260aa:	7b5b      	ldrb	r3, [r3, #13]
 80260ac:	2b01      	cmp	r3, #1
 80260ae:	d103      	bne.n	80260b8 <igmp_timeout+0x18>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip_addr_debug_print(IGMP_DEBUG, &(group->group_address));
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", group->netif));

    IGMP_STATS_INC(igmp.tx_report);
    igmp_send(group, IGMP_V2_MEMB_REPORT);
 80260b0:	6878      	ldr	r0, [r7, #4]
 80260b2:	2116      	movs	r1, #22
 80260b4:	f000 f868 	bl	8026188 <igmp_send>
  }
}
 80260b8:	3708      	adds	r7, #8
 80260ba:	46bd      	mov	sp, r7
 80260bc:	bd80      	pop	{r7, pc}
 80260be:	bf00      	nop

080260c0 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
 80260c0:	b580      	push	{r7, lr}
 80260c2:	b082      	sub	sp, #8
 80260c4:	af00      	add	r7, sp, #0
 80260c6:	6078      	str	r0, [r7, #4]
 80260c8:	460b      	mov	r3, r1
 80260ca:	70fb      	strb	r3, [r7, #3]
  /* ensure the input value is > 0 */
  if (max_time == 0) {
 80260cc:	78fb      	ldrb	r3, [r7, #3]
 80260ce:	2b00      	cmp	r3, #0
 80260d0:	d101      	bne.n	80260d6 <igmp_start_timer+0x16>
    max_time = 1;
 80260d2:	2301      	movs	r3, #1
 80260d4:	70fb      	strb	r3, [r7, #3]
  }
  /* ensure the random value is > 0 */
  group->timer = (LWIP_RAND() % (max_time - 1)) + 1;
 80260d6:	f003 fd13 	bl	8029b00 <rand>
 80260da:	4603      	mov	r3, r0
 80260dc:	78fa      	ldrb	r2, [r7, #3]
 80260de:	3a01      	subs	r2, #1
 80260e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80260e4:	fb02 f201 	mul.w	r2, r2, r1
 80260e8:	1a9b      	subs	r3, r3, r2
 80260ea:	b29b      	uxth	r3, r3
 80260ec:	3301      	adds	r3, #1
 80260ee:	b29a      	uxth	r2, r3
 80260f0:	687b      	ldr	r3, [r7, #4]
 80260f2:	81da      	strh	r2, [r3, #14]
}
 80260f4:	3708      	adds	r7, #8
 80260f6:	46bd      	mov	sp, r7
 80260f8:	bd80      	pop	{r7, pc}
 80260fa:	bf00      	nop

080260fc <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
 80260fc:	b580      	push	{r7, lr}
 80260fe:	b082      	sub	sp, #8
 8026100:	af00      	add	r7, sp, #0
 8026102:	6078      	str	r0, [r7, #4]
 8026104:	460b      	mov	r3, r1
 8026106:	70fb      	strb	r3, [r7, #3]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8026108:	687b      	ldr	r3, [r7, #4]
 802610a:	7b5b      	ldrb	r3, [r3, #13]
 802610c:	2b02      	cmp	r3, #2
 802610e:	d00d      	beq.n	802612c <igmp_delaying_member+0x30>
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8026110:	687b      	ldr	r3, [r7, #4]
 8026112:	7b5b      	ldrb	r3, [r3, #13]
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8026114:	2b01      	cmp	r3, #1
 8026116:	d111      	bne.n	802613c <igmp_delaying_member+0x40>
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
      ((group->timer == 0) || (maxresp < group->timer)))) {
 8026118:	687b      	ldr	r3, [r7, #4]
 802611a:	89db      	ldrh	r3, [r3, #14]
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 802611c:	2b00      	cmp	r3, #0
 802611e:	d005      	beq.n	802612c <igmp_delaying_member+0x30>
      ((group->timer == 0) || (maxresp < group->timer)))) {
 8026120:	78fb      	ldrb	r3, [r7, #3]
 8026122:	b29a      	uxth	r2, r3
 8026124:	687b      	ldr	r3, [r7, #4]
 8026126:	89db      	ldrh	r3, [r3, #14]
 8026128:	429a      	cmp	r2, r3
 802612a:	d207      	bcs.n	802613c <igmp_delaying_member+0x40>
    igmp_start_timer(group, maxresp);
 802612c:	78fb      	ldrb	r3, [r7, #3]
 802612e:	6878      	ldr	r0, [r7, #4]
 8026130:	4619      	mov	r1, r3
 8026132:	f7ff ffc5 	bl	80260c0 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 8026136:	687b      	ldr	r3, [r7, #4]
 8026138:	2201      	movs	r2, #1
 802613a:	735a      	strb	r2, [r3, #13]
  }
}
 802613c:	3708      	adds	r7, #8
 802613e:	46bd      	mov	sp, r7
 8026140:	bd80      	pop	{r7, pc}
 8026142:	bf00      	nop

08026144 <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest, struct netif *netif)
{
 8026144:	b580      	push	{r7, lr}
 8026146:	b08c      	sub	sp, #48	; 0x30
 8026148:	af06      	add	r7, sp, #24
 802614a:	60f8      	str	r0, [r7, #12]
 802614c:	60b9      	str	r1, [r7, #8]
 802614e:	607a      	str	r2, [r7, #4]
 8026150:	603b      	str	r3, [r7, #0]
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
 8026152:	f240 4394 	movw	r3, #1172	; 0x494
 8026156:	82bb      	strh	r3, [r7, #20]
  ra[1] = 0x0000; /* Router shall examine packet */
 8026158:	2300      	movs	r3, #0
 802615a:	82fb      	strh	r3, [r7, #22]
  IGMP_STATS_INC(igmp.xmit);
  return ip_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
 802615c:	2300      	movs	r3, #0
 802615e:	9300      	str	r3, [sp, #0]
 8026160:	2302      	movs	r3, #2
 8026162:	9301      	str	r3, [sp, #4]
 8026164:	683b      	ldr	r3, [r7, #0]
 8026166:	9302      	str	r3, [sp, #8]
 8026168:	f107 0314 	add.w	r3, r7, #20
 802616c:	9303      	str	r3, [sp, #12]
 802616e:	2304      	movs	r3, #4
 8026170:	9304      	str	r3, [sp, #16]
 8026172:	68f8      	ldr	r0, [r7, #12]
 8026174:	68b9      	ldr	r1, [r7, #8]
 8026176:	687a      	ldr	r2, [r7, #4]
 8026178:	2301      	movs	r3, #1
 802617a:	f000 faa3 	bl	80266c4 <ip_output_if_opt>
 802617e:	4603      	mov	r3, r0
}
 8026180:	4618      	mov	r0, r3
 8026182:	3718      	adds	r7, #24
 8026184:	46bd      	mov	sp, r7
 8026186:	bd80      	pop	{r7, pc}

08026188 <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct igmp_group *group, u8_t type)
{
 8026188:	b580      	push	{r7, lr}
 802618a:	b086      	sub	sp, #24
 802618c:	af00      	add	r7, sp, #0
 802618e:	6078      	str	r0, [r7, #4]
 8026190:	460b      	mov	r3, r1
 8026192:	70fb      	strb	r3, [r7, #3]
  struct pbuf*     p    = NULL;
 8026194:	2300      	movs	r3, #0
 8026196:	613b      	str	r3, [r7, #16]
  struct igmp_msg* igmp = NULL;
 8026198:	2300      	movs	r3, #0
 802619a:	60fb      	str	r3, [r7, #12]
  ip_addr_t   src  = *IP_ADDR_ANY;
 802619c:	4b29      	ldr	r3, [pc, #164]	; (8026244 <igmp_send+0xbc>)
 802619e:	681b      	ldr	r3, [r3, #0]
 80261a0:	60bb      	str	r3, [r7, #8]
  ip_addr_t*  dest = NULL;
 80261a2:	2300      	movs	r3, #0
 80261a4:	617b      	str	r3, [r7, #20]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
 80261a6:	2000      	movs	r0, #0
 80261a8:	2108      	movs	r1, #8
 80261aa:	2200      	movs	r2, #0
 80261ac:	f001 f934 	bl	8027418 <pbuf_alloc>
 80261b0:	6138      	str	r0, [r7, #16]
  
  if (p) {
 80261b2:	693b      	ldr	r3, [r7, #16]
 80261b4:	2b00      	cmp	r3, #0
 80261b6:	d042      	beq.n	802623e <igmp_send+0xb6>
    igmp = (struct igmp_msg *)p->payload;
 80261b8:	693b      	ldr	r3, [r7, #16]
 80261ba:	685b      	ldr	r3, [r3, #4]
 80261bc:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
               (p->len >= sizeof(struct igmp_msg)));
    ip_addr_copy(src, group->netif->ip_addr);
 80261be:	687b      	ldr	r3, [r7, #4]
 80261c0:	685b      	ldr	r3, [r3, #4]
 80261c2:	685b      	ldr	r3, [r3, #4]
 80261c4:	60bb      	str	r3, [r7, #8]
     
    if (type == IGMP_V2_MEMB_REPORT) {
 80261c6:	78fb      	ldrb	r3, [r7, #3]
 80261c8:	2b16      	cmp	r3, #22
 80261ca:	d10a      	bne.n	80261e2 <igmp_send+0x5a>
      dest = &(group->group_address);
 80261cc:	687b      	ldr	r3, [r7, #4]
 80261ce:	3308      	adds	r3, #8
 80261d0:	617b      	str	r3, [r7, #20]
      ip_addr_copy(igmp->igmp_group_address, group->group_address);
 80261d2:	687b      	ldr	r3, [r7, #4]
 80261d4:	689a      	ldr	r2, [r3, #8]
 80261d6:	68fb      	ldr	r3, [r7, #12]
 80261d8:	605a      	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
 80261da:	687b      	ldr	r3, [r7, #4]
 80261dc:	2201      	movs	r2, #1
 80261de:	731a      	strb	r2, [r3, #12]
 80261e0:	e008      	b.n	80261f4 <igmp_send+0x6c>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
 80261e2:	78fb      	ldrb	r3, [r7, #3]
 80261e4:	2b17      	cmp	r3, #23
 80261e6:	d105      	bne.n	80261f4 <igmp_send+0x6c>
        dest = &allrouters;
 80261e8:	4b17      	ldr	r3, [pc, #92]	; (8026248 <igmp_send+0xc0>)
 80261ea:	617b      	str	r3, [r7, #20]
        ip_addr_copy(igmp->igmp_group_address, group->group_address);
 80261ec:	687b      	ldr	r3, [r7, #4]
 80261ee:	689a      	ldr	r2, [r3, #8]
 80261f0:	68fb      	ldr	r3, [r7, #12]
 80261f2:	605a      	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
 80261f4:	78fb      	ldrb	r3, [r7, #3]
 80261f6:	2b16      	cmp	r3, #22
 80261f8:	d002      	beq.n	8026200 <igmp_send+0x78>
 80261fa:	78fb      	ldrb	r3, [r7, #3]
 80261fc:	2b17      	cmp	r3, #23
 80261fe:	d11b      	bne.n	8026238 <igmp_send+0xb0>
      igmp->igmp_msgtype  = type;
 8026200:	68fb      	ldr	r3, [r7, #12]
 8026202:	78fa      	ldrb	r2, [r7, #3]
 8026204:	701a      	strb	r2, [r3, #0]
      igmp->igmp_maxresp  = 0;
 8026206:	68fb      	ldr	r3, [r7, #12]
 8026208:	2200      	movs	r2, #0
 802620a:	705a      	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
 802620c:	68fb      	ldr	r3, [r7, #12]
 802620e:	2200      	movs	r2, #0
 8026210:	709a      	strb	r2, [r3, #2]
 8026212:	2200      	movs	r2, #0
 8026214:	70da      	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
 8026216:	68f8      	ldr	r0, [r7, #12]
 8026218:	2108      	movs	r1, #8
 802621a:	f000 f875 	bl	8026308 <inet_chksum>
 802621e:	4603      	mov	r3, r0
 8026220:	461a      	mov	r2, r3
 8026222:	68fb      	ldr	r3, [r7, #12]
 8026224:	805a      	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, group->netif);
 8026226:	687b      	ldr	r3, [r7, #4]
 8026228:	685b      	ldr	r3, [r3, #4]
 802622a:	f107 0208 	add.w	r2, r7, #8
 802622e:	6938      	ldr	r0, [r7, #16]
 8026230:	4611      	mov	r1, r2
 8026232:	697a      	ldr	r2, [r7, #20]
 8026234:	f7ff ff86 	bl	8026144 <igmp_ip_output_if>
    }

    pbuf_free(p);
 8026238:	6938      	ldr	r0, [r7, #16]
 802623a:	f001 fab1 	bl	80277a0 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
 802623e:	3718      	adds	r7, #24
 8026240:	46bd      	mov	sp, r7
 8026242:	bd80      	pop	{r7, pc}
 8026244:	0802a004 	.word	0x0802a004
 8026248:	1ffe9c0c 	.word	0x1ffe9c0c

0802624c <lwip_standard_chksum>:
 * @return host order (!) lwip checksum (non-inverted Internet sum) 
 */

static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
 802624c:	b480      	push	{r7}
 802624e:	b089      	sub	sp, #36	; 0x24
 8026250:	af00      	add	r7, sp, #0
 8026252:	6078      	str	r0, [r7, #4]
 8026254:	6039      	str	r1, [r7, #0]
  u8_t *pb = (u8_t *)dataptr;
 8026256:	687b      	ldr	r3, [r7, #4]
 8026258:	61fb      	str	r3, [r7, #28]
  u16_t *ps, t = 0;
 802625a:	2300      	movs	r3, #0
 802625c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 802625e:	2300      	movs	r3, #0
 8026260:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8026262:	69fb      	ldr	r3, [r7, #28]
 8026264:	f003 0301 	and.w	r3, r3, #1
 8026268:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 802626a:	693b      	ldr	r3, [r7, #16]
 802626c:	2b00      	cmp	r3, #0
 802626e:	d00d      	beq.n	802628c <lwip_standard_chksum+0x40>
 8026270:	683b      	ldr	r3, [r7, #0]
 8026272:	2b00      	cmp	r3, #0
 8026274:	dd0a      	ble.n	802628c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8026276:	f107 030e 	add.w	r3, r7, #14
 802627a:	3301      	adds	r3, #1
 802627c:	69fa      	ldr	r2, [r7, #28]
 802627e:	1c51      	adds	r1, r2, #1
 8026280:	61f9      	str	r1, [r7, #28]
 8026282:	7812      	ldrb	r2, [r2, #0]
 8026284:	701a      	strb	r2, [r3, #0]
    len--;
 8026286:	683b      	ldr	r3, [r7, #0]
 8026288:	3b01      	subs	r3, #1
 802628a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
 802628c:	69fb      	ldr	r3, [r7, #28]
 802628e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8026290:	e00a      	b.n	80262a8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8026292:	69bb      	ldr	r3, [r7, #24]
 8026294:	1c9a      	adds	r2, r3, #2
 8026296:	61ba      	str	r2, [r7, #24]
 8026298:	881b      	ldrh	r3, [r3, #0]
 802629a:	461a      	mov	r2, r3
 802629c:	697b      	ldr	r3, [r7, #20]
 802629e:	4413      	add	r3, r2
 80262a0:	617b      	str	r3, [r7, #20]
    len -= 2;
 80262a2:	683b      	ldr	r3, [r7, #0]
 80262a4:	3b02      	subs	r3, #2
 80262a6:	603b      	str	r3, [r7, #0]
    len--;
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
  while (len > 1) {
 80262a8:	683b      	ldr	r3, [r7, #0]
 80262aa:	2b01      	cmp	r3, #1
 80262ac:	dcf1      	bgt.n	8026292 <lwip_standard_chksum+0x46>
    sum += *ps++;
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80262ae:	683b      	ldr	r3, [r7, #0]
 80262b0:	2b00      	cmp	r3, #0
 80262b2:	dd04      	ble.n	80262be <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(u8_t *)ps;
 80262b4:	f107 030e 	add.w	r3, r7, #14
 80262b8:	69ba      	ldr	r2, [r7, #24]
 80262ba:	7812      	ldrb	r2, [r2, #0]
 80262bc:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80262be:	89fb      	ldrh	r3, [r7, #14]
 80262c0:	461a      	mov	r2, r3
 80262c2:	697b      	ldr	r3, [r7, #20]
 80262c4:	4413      	add	r3, r2
 80262c6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  sum = FOLD_U32T(sum);
 80262c8:	697b      	ldr	r3, [r7, #20]
 80262ca:	0c1a      	lsrs	r2, r3, #16
 80262cc:	697b      	ldr	r3, [r7, #20]
 80262ce:	b29b      	uxth	r3, r3
 80262d0:	4413      	add	r3, r2
 80262d2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80262d4:	697b      	ldr	r3, [r7, #20]
 80262d6:	0c1a      	lsrs	r2, r3, #16
 80262d8:	697b      	ldr	r3, [r7, #20]
 80262da:	b29b      	uxth	r3, r3
 80262dc:	4413      	add	r3, r2
 80262de:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80262e0:	693b      	ldr	r3, [r7, #16]
 80262e2:	2b00      	cmp	r3, #0
 80262e4:	d008      	beq.n	80262f8 <lwip_standard_chksum+0xac>
    sum = SWAP_BYTES_IN_WORD(sum);
 80262e6:	697b      	ldr	r3, [r7, #20]
 80262e8:	021b      	lsls	r3, r3, #8
 80262ea:	b29a      	uxth	r2, r3
 80262ec:	697b      	ldr	r3, [r7, #20]
 80262ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80262f2:	0a1b      	lsrs	r3, r3, #8
 80262f4:	4313      	orrs	r3, r2
 80262f6:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80262f8:	697b      	ldr	r3, [r7, #20]
 80262fa:	b29b      	uxth	r3, r3
}
 80262fc:	4618      	mov	r0, r3
 80262fe:	3724      	adds	r7, #36	; 0x24
 8026300:	46bd      	mov	sp, r7
 8026302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026306:	4770      	bx	lr

08026308 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(void *dataptr, u16_t len)
{
 8026308:	b580      	push	{r7, lr}
 802630a:	b082      	sub	sp, #8
 802630c:	af00      	add	r7, sp, #0
 802630e:	6078      	str	r0, [r7, #4]
 8026310:	460b      	mov	r3, r1
 8026312:	807b      	strh	r3, [r7, #2]
  return ~LWIP_CHKSUM(dataptr, len);
 8026314:	887b      	ldrh	r3, [r7, #2]
 8026316:	6878      	ldr	r0, [r7, #4]
 8026318:	4619      	mov	r1, r3
 802631a:	f7ff ff97 	bl	802624c <lwip_standard_chksum>
 802631e:	4603      	mov	r3, r0
 8026320:	43db      	mvns	r3, r3
 8026322:	b29b      	uxth	r3, r3
}
 8026324:	4618      	mov	r0, r3
 8026326:	3708      	adds	r7, #8
 8026328:	46bd      	mov	sp, r7
 802632a:	bd80      	pop	{r7, pc}

0802632c <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 802632c:	b580      	push	{r7, lr}
 802632e:	b086      	sub	sp, #24
 8026330:	af00      	add	r7, sp, #0
 8026332:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
 8026334:	2300      	movs	r3, #0
 8026336:	617b      	str	r3, [r7, #20]
  swapped = 0;
 8026338:	2300      	movs	r3, #0
 802633a:	73fb      	strb	r3, [r7, #15]
  for(q = p; q != NULL; q = q->next) {
 802633c:	687b      	ldr	r3, [r7, #4]
 802633e:	613b      	str	r3, [r7, #16]
 8026340:	e029      	b.n	8026396 <inet_chksum_pbuf+0x6a>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8026342:	693b      	ldr	r3, [r7, #16]
 8026344:	685a      	ldr	r2, [r3, #4]
 8026346:	693b      	ldr	r3, [r7, #16]
 8026348:	895b      	ldrh	r3, [r3, #10]
 802634a:	4610      	mov	r0, r2
 802634c:	4619      	mov	r1, r3
 802634e:	f7ff ff7d 	bl	802624c <lwip_standard_chksum>
 8026352:	4603      	mov	r3, r0
 8026354:	461a      	mov	r2, r3
 8026356:	697b      	ldr	r3, [r7, #20]
 8026358:	4413      	add	r3, r2
 802635a:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 802635c:	697b      	ldr	r3, [r7, #20]
 802635e:	0c1a      	lsrs	r2, r3, #16
 8026360:	697b      	ldr	r3, [r7, #20]
 8026362:	b29b      	uxth	r3, r3
 8026364:	4413      	add	r3, r2
 8026366:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8026368:	693b      	ldr	r3, [r7, #16]
 802636a:	895b      	ldrh	r3, [r3, #10]
 802636c:	f003 0301 	and.w	r3, r3, #1
 8026370:	b29b      	uxth	r3, r3
 8026372:	2b00      	cmp	r3, #0
 8026374:	d00c      	beq.n	8026390 <inet_chksum_pbuf+0x64>
      swapped = 1 - swapped;
 8026376:	7bfb      	ldrb	r3, [r7, #15]
 8026378:	f1c3 0301 	rsb	r3, r3, #1
 802637c:	73fb      	strb	r3, [r7, #15]
      acc = SWAP_BYTES_IN_WORD(acc);
 802637e:	697b      	ldr	r3, [r7, #20]
 8026380:	021b      	lsls	r3, r3, #8
 8026382:	b29a      	uxth	r2, r3
 8026384:	697b      	ldr	r3, [r7, #20]
 8026386:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802638a:	0a1b      	lsrs	r3, r3, #8
 802638c:	4313      	orrs	r3, r2
 802638e:	617b      	str	r3, [r7, #20]
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
 8026390:	693b      	ldr	r3, [r7, #16]
 8026392:	681b      	ldr	r3, [r3, #0]
 8026394:	613b      	str	r3, [r7, #16]
 8026396:	693b      	ldr	r3, [r7, #16]
 8026398:	2b00      	cmp	r3, #0
 802639a:	d1d2      	bne.n	8026342 <inet_chksum_pbuf+0x16>
      swapped = 1 - swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 802639c:	7bfb      	ldrb	r3, [r7, #15]
 802639e:	2b00      	cmp	r3, #0
 80263a0:	d008      	beq.n	80263b4 <inet_chksum_pbuf+0x88>
    acc = SWAP_BYTES_IN_WORD(acc);
 80263a2:	697b      	ldr	r3, [r7, #20]
 80263a4:	021b      	lsls	r3, r3, #8
 80263a6:	b29a      	uxth	r2, r3
 80263a8:	697b      	ldr	r3, [r7, #20]
 80263aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80263ae:	0a1b      	lsrs	r3, r3, #8
 80263b0:	4313      	orrs	r3, r2
 80263b2:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80263b4:	697b      	ldr	r3, [r7, #20]
 80263b6:	b29b      	uxth	r3, r3
 80263b8:	43db      	mvns	r3, r3
 80263ba:	b29b      	uxth	r3, r3
}
 80263bc:	4618      	mov	r0, r3
 80263be:	3718      	adds	r7, #24
 80263c0:	46bd      	mov	sp, r7
 80263c2:	bd80      	pop	{r7, pc}

080263c4 <ip_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip_route(ip_addr_t *dest)
{
 80263c4:	b480      	push	{r7}
 80263c6:	b085      	sub	sp, #20
 80263c8:	af00      	add	r7, sp, #0
 80263ca:	6078      	str	r0, [r7, #4]
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80263cc:	4b19      	ldr	r3, [pc, #100]	; (8026434 <ip_route+0x70>)
 80263ce:	681b      	ldr	r3, [r3, #0]
 80263d0:	60fb      	str	r3, [r7, #12]
 80263d2:	e015      	b.n	8026400 <ip_route+0x3c>
    /* network mask matches? */
    if (netif_is_up(netif)) {
 80263d4:	68fb      	ldr	r3, [r7, #12]
 80263d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80263da:	f003 0301 	and.w	r3, r3, #1
 80263de:	2b00      	cmp	r3, #0
 80263e0:	d00b      	beq.n	80263fa <ip_route+0x36>
      if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
 80263e2:	687b      	ldr	r3, [r7, #4]
 80263e4:	681a      	ldr	r2, [r3, #0]
 80263e6:	68fb      	ldr	r3, [r7, #12]
 80263e8:	685b      	ldr	r3, [r3, #4]
 80263ea:	405a      	eors	r2, r3
 80263ec:	68fb      	ldr	r3, [r7, #12]
 80263ee:	689b      	ldr	r3, [r3, #8]
 80263f0:	4013      	ands	r3, r2
 80263f2:	2b00      	cmp	r3, #0
 80263f4:	d101      	bne.n	80263fa <ip_route+0x36>
        /* return netif on which to forward IP packet */
        return netif;
 80263f6:	68fb      	ldr	r3, [r7, #12]
 80263f8:	e015      	b.n	8026426 <ip_route+0x62>
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80263fa:	68fb      	ldr	r3, [r7, #12]
 80263fc:	681b      	ldr	r3, [r3, #0]
 80263fe:	60fb      	str	r3, [r7, #12]
 8026400:	68fb      	ldr	r3, [r7, #12]
 8026402:	2b00      	cmp	r3, #0
 8026404:	d1e6      	bne.n	80263d4 <ip_route+0x10>
        /* return netif on which to forward IP packet */
        return netif;
      }
    }
  }
  if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
 8026406:	4b0c      	ldr	r3, [pc, #48]	; (8026438 <ip_route+0x74>)
 8026408:	681b      	ldr	r3, [r3, #0]
 802640a:	2b00      	cmp	r3, #0
 802640c:	d007      	beq.n	802641e <ip_route+0x5a>
 802640e:	4b0a      	ldr	r3, [pc, #40]	; (8026438 <ip_route+0x74>)
 8026410:	681b      	ldr	r3, [r3, #0]
 8026412:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8026416:	f003 0301 	and.w	r3, r3, #1
 802641a:	2b00      	cmp	r3, #0
 802641c:	d101      	bne.n	8026422 <ip_route+0x5e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    snmp_inc_ipoutnoroutes();
    return NULL;
 802641e:	2300      	movs	r3, #0
 8026420:	e001      	b.n	8026426 <ip_route+0x62>
  }
  /* no matching netif found, use default netif */
  return netif_default;
 8026422:	4b05      	ldr	r3, [pc, #20]	; (8026438 <ip_route+0x74>)
 8026424:	681b      	ldr	r3, [r3, #0]
}
 8026426:	4618      	mov	r0, r3
 8026428:	3714      	adds	r7, #20
 802642a:	46bd      	mov	sp, r7
 802642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026430:	4770      	bx	lr
 8026432:	bf00      	nop
 8026434:	1fff077c 	.word	0x1fff077c
 8026438:	1fff0780 	.word	0x1fff0780

0802643c <ip_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
 802643c:	b580      	push	{r7, lr}
 802643e:	b086      	sub	sp, #24
 8026440:	af00      	add	r7, sp, #0
 8026442:	6078      	str	r0, [r7, #4]
 8026444:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  snmp_inc_ipinreceives();

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8026446:	687b      	ldr	r3, [r7, #4]
 8026448:	685b      	ldr	r3, [r3, #4]
 802644a:	60fb      	str	r3, [r7, #12]
  if (IPH_V(iphdr) != 4) {
 802644c:	68fb      	ldr	r3, [r7, #12]
 802644e:	781b      	ldrb	r3, [r3, #0]
 8026450:	091b      	lsrs	r3, r3, #4
 8026452:	b2db      	uxtb	r3, r3
 8026454:	2b04      	cmp	r3, #4
 8026456:	d004      	beq.n	8026462 <ip_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
    ip_debug_print(p);
    pbuf_free(p);
 8026458:	6878      	ldr	r0, [r7, #4]
 802645a:	f001 f9a1 	bl	80277a0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
 802645e:	2300      	movs	r3, #0
 8026460:	e100      	b.n	8026664 <ip_input+0x228>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8026462:	68fb      	ldr	r3, [r7, #12]
 8026464:	781b      	ldrb	r3, [r3, #0]
 8026466:	b29b      	uxth	r3, r3
 8026468:	f003 030f 	and.w	r3, r3, #15
 802646c:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 802646e:	897b      	ldrh	r3, [r7, #10]
 8026470:	009b      	lsls	r3, r3, #2
 8026472:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
 8026474:	68fb      	ldr	r3, [r7, #12]
 8026476:	885b      	ldrh	r3, [r3, #2]
 8026478:	b29b      	uxth	r3, r3
 802647a:	4618      	mov	r0, r3
 802647c:	f000 fb64 	bl	8026b48 <lwip_ntohs>
 8026480:	4603      	mov	r3, r0
 8026482:	813b      	strh	r3, [r7, #8]

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
 8026484:	687b      	ldr	r3, [r7, #4]
 8026486:	895b      	ldrh	r3, [r3, #10]
 8026488:	897a      	ldrh	r2, [r7, #10]
 802648a:	429a      	cmp	r2, r3
 802648c:	d804      	bhi.n	8026498 <ip_input+0x5c>
 802648e:	687b      	ldr	r3, [r7, #4]
 8026490:	891b      	ldrh	r3, [r3, #8]
 8026492:	893a      	ldrh	r2, [r7, #8]
 8026494:	429a      	cmp	r2, r3
 8026496:	d904      	bls.n	80264a2 <ip_input+0x66>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8026498:	6878      	ldr	r0, [r7, #4]
 802649a:	f001 f981 	bl	80277a0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    snmp_inc_ipindiscards();
    return ERR_OK;
 802649e:	2300      	movs	r3, #0
 80264a0:	e0e0      	b.n	8026664 <ip_input+0x228>
  }
#endif

  /* Trim pbuf. This should have been done at the netif layer,
   * but we'll do it anyway just to be sure that its done. */
  pbuf_realloc(p, iphdr_len);
 80264a2:	893b      	ldrh	r3, [r7, #8]
 80264a4:	6878      	ldr	r0, [r7, #4]
 80264a6:	4619      	mov	r1, r3
 80264a8:	f001 f8b0 	bl	802760c <pbuf_realloc>

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy(current_iphdr_dest, iphdr->dest);
 80264ac:	68fb      	ldr	r3, [r7, #12]
 80264ae:	691b      	ldr	r3, [r3, #16]
 80264b0:	4a6f      	ldr	r2, [pc, #444]	; (8026670 <ip_input+0x234>)
 80264b2:	6013      	str	r3, [r2, #0]
  ip_addr_copy(current_iphdr_src, iphdr->src);
 80264b4:	68fb      	ldr	r3, [r7, #12]
 80264b6:	68db      	ldr	r3, [r3, #12]
 80264b8:	4a6e      	ldr	r2, [pc, #440]	; (8026674 <ip_input+0x238>)
 80264ba:	6013      	str	r3, [r2, #0]

  /* match packet against an interface, i.e. is this packet for us? */
#if LWIP_IGMP
  if (ip_addr_ismulticast(&current_iphdr_dest)) {
 80264bc:	4b6c      	ldr	r3, [pc, #432]	; (8026670 <ip_input+0x234>)
 80264be:	681b      	ldr	r3, [r3, #0]
 80264c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80264c4:	2be0      	cmp	r3, #224	; 0xe0
 80264c6:	d113      	bne.n	80264f0 <ip_input+0xb4>
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, &current_iphdr_dest))) {
 80264c8:	683b      	ldr	r3, [r7, #0]
 80264ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80264ce:	b2db      	uxtb	r3, r3
 80264d0:	b25b      	sxtb	r3, r3
 80264d2:	2b00      	cmp	r3, #0
 80264d4:	da09      	bge.n	80264ea <ip_input+0xae>
 80264d6:	6838      	ldr	r0, [r7, #0]
 80264d8:	4965      	ldr	r1, [pc, #404]	; (8026670 <ip_input+0x234>)
 80264da:	f7ff fca3 	bl	8025e24 <igmp_lookfor_group>
 80264de:	4603      	mov	r3, r0
 80264e0:	2b00      	cmp	r3, #0
 80264e2:	d002      	beq.n	80264ea <ip_input+0xae>
      netif = inp;
 80264e4:	683b      	ldr	r3, [r7, #0]
 80264e6:	617b      	str	r3, [r7, #20]
 80264e8:	e03a      	b.n	8026560 <ip_input+0x124>
    } else {
      netif = NULL;
 80264ea:	2300      	movs	r3, #0
 80264ec:	617b      	str	r3, [r7, #20]
 80264ee:	e037      	b.n	8026560 <ip_input+0x124>
#endif /* LWIP_IGMP */
  {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 80264f0:	2301      	movs	r3, #1
 80264f2:	613b      	str	r3, [r7, #16]
    netif = inp;
 80264f4:	683b      	ldr	r3, [r7, #0]
 80264f6:	617b      	str	r3, [r7, #20]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&netif->ip_addr) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
 80264f8:	697b      	ldr	r3, [r7, #20]
 80264fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80264fe:	f003 0301 	and.w	r3, r3, #1
 8026502:	2b00      	cmp	r3, #0
 8026504:	d016      	beq.n	8026534 <ip_input+0xf8>
 8026506:	697b      	ldr	r3, [r7, #20]
 8026508:	3304      	adds	r3, #4
 802650a:	2b00      	cmp	r3, #0
 802650c:	d012      	beq.n	8026534 <ip_input+0xf8>
 802650e:	697b      	ldr	r3, [r7, #20]
 8026510:	685b      	ldr	r3, [r3, #4]
 8026512:	2b00      	cmp	r3, #0
 8026514:	d00e      	beq.n	8026534 <ip_input+0xf8>
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
 8026516:	4b56      	ldr	r3, [pc, #344]	; (8026670 <ip_input+0x234>)
 8026518:	681a      	ldr	r2, [r3, #0]
 802651a:	697b      	ldr	r3, [r7, #20]
 802651c:	685b      	ldr	r3, [r3, #4]
 802651e:	429a      	cmp	r2, r3
 8026520:	d01e      	beq.n	8026560 <ip_input+0x124>
            /* or broadcast on this interface network address? */
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
 8026522:	4b53      	ldr	r3, [pc, #332]	; (8026670 <ip_input+0x234>)
 8026524:	681b      	ldr	r3, [r3, #0]
 8026526:	4618      	mov	r0, r3
 8026528:	6979      	ldr	r1, [r7, #20]
 802652a:	f000 f99f 	bl	802686c <ip4_addr_isbroadcast>
 802652e:	4603      	mov	r3, r0
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
 8026530:	2b00      	cmp	r3, #0
 8026532:	d115      	bne.n	8026560 <ip_input+0x124>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8026534:	693b      	ldr	r3, [r7, #16]
 8026536:	2b00      	cmp	r3, #0
 8026538:	d005      	beq.n	8026546 <ip_input+0x10a>
        first = 0;
 802653a:	2300      	movs	r3, #0
 802653c:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 802653e:	4b4e      	ldr	r3, [pc, #312]	; (8026678 <ip_input+0x23c>)
 8026540:	681b      	ldr	r3, [r3, #0]
 8026542:	617b      	str	r3, [r7, #20]
 8026544:	e002      	b.n	802654c <ip_input+0x110>
      } else {
        netif = netif->next;
 8026546:	697b      	ldr	r3, [r7, #20]
 8026548:	681b      	ldr	r3, [r3, #0]
 802654a:	617b      	str	r3, [r7, #20]
      }
      if (netif == inp) {
 802654c:	697a      	ldr	r2, [r7, #20]
 802654e:	683b      	ldr	r3, [r7, #0]
 8026550:	429a      	cmp	r2, r3
 8026552:	d102      	bne.n	802655a <ip_input+0x11e>
        netif = netif->next;
 8026554:	697b      	ldr	r3, [r7, #20]
 8026556:	681b      	ldr	r3, [r3, #0]
 8026558:	617b      	str	r3, [r7, #20]
      }
    } while(netif != NULL);
 802655a:	697b      	ldr	r3, [r7, #20]
 802655c:	2b00      	cmp	r3, #0
 802655e:	d1cb      	bne.n	80264f8 <ip_input+0xbc>
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
 8026560:	4b44      	ldr	r3, [pc, #272]	; (8026674 <ip_input+0x238>)
 8026562:	681b      	ldr	r3, [r3, #0]
 8026564:	4618      	mov	r0, r3
 8026566:	6839      	ldr	r1, [r7, #0]
 8026568:	f000 f980 	bl	802686c <ip4_addr_isbroadcast>
 802656c:	4603      	mov	r3, r0
 802656e:	2b00      	cmp	r3, #0
 8026570:	d105      	bne.n	802657e <ip_input+0x142>
         (ip_addr_ismulticast(&current_iphdr_src))) {
 8026572:	4b40      	ldr	r3, [pc, #256]	; (8026674 <ip_input+0x238>)
 8026574:	681b      	ldr	r3, [r3, #0]
 8026576:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
 802657a:	2be0      	cmp	r3, #224	; 0xe0
 802657c:	d104      	bne.n	8026588 <ip_input+0x14c>
         (ip_addr_ismulticast(&current_iphdr_src))) {
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 802657e:	6878      	ldr	r0, [r7, #4]
 8026580:	f001 f90e 	bl	80277a0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
      return ERR_OK;
 8026584:	2300      	movs	r3, #0
 8026586:	e06d      	b.n	8026664 <ip_input+0x228>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8026588:	697b      	ldr	r3, [r7, #20]
 802658a:	2b00      	cmp	r3, #0
 802658c:	d104      	bne.n	8026598 <ip_input+0x15c>
#endif /* IP_FORWARD */
    {
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
    }
    pbuf_free(p);
 802658e:	6878      	ldr	r0, [r7, #4]
 8026590:	f001 f906 	bl	80277a0 <pbuf_free>
    return ERR_OK;
 8026594:	2300      	movs	r3, #0
 8026596:	e065      	b.n	8026664 <ip_input+0x228>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8026598:	68fb      	ldr	r3, [r7, #12]
 802659a:	88db      	ldrh	r3, [r3, #6]
 802659c:	b29b      	uxth	r3, r3
 802659e:	461a      	mov	r2, r3
 80265a0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80265a4:	4013      	ands	r3, r2
 80265a6:	2b00      	cmp	r3, #0
 80265a8:	d004      	beq.n	80265b4 <ip_input+0x178>
    if (p == NULL) {
      return ERR_OK;
    }
    iphdr = (struct ip_hdr *)p->payload;
#else /* IP_REASSEMBLY == 0, no packet fragment reassembly code present */
    pbuf_free(p);
 80265aa:	6878      	ldr	r0, [r7, #4]
 80265ac:	f001 f8f8 	bl	80277a0 <pbuf_free>
      ntohs(IPH_OFFSET(iphdr))));
    IP_STATS_INC(ip.opterr);
    IP_STATS_INC(ip.drop);
    /* unsupported protocol feature */
    snmp_inc_ipinunknownprotos();
    return ERR_OK;
 80265b0:	2300      	movs	r3, #0
 80265b2:	e057      	b.n	8026664 <ip_input+0x228>

#if IP_OPTIONS_ALLOWED == 0 /* no support for IP options in the IP header? */

#if LWIP_IGMP
  /* there is an extra "router alert" option in IGMP messages which we allow for but do not police */
  if((iphdr_hlen > IP_HLEN) &&  (IPH_PROTO(iphdr) != IP_PROTO_IGMP)) {
 80265b4:	897b      	ldrh	r3, [r7, #10]
 80265b6:	2b14      	cmp	r3, #20
 80265b8:	d908      	bls.n	80265cc <ip_input+0x190>
 80265ba:	68fb      	ldr	r3, [r7, #12]
 80265bc:	7a5b      	ldrb	r3, [r3, #9]
 80265be:	2b02      	cmp	r3, #2
 80265c0:	d004      	beq.n	80265cc <ip_input+0x190>
#else
  if (iphdr_hlen > IP_HLEN) {
#endif /* LWIP_IGMP */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since there were IP options (while IP_OPTIONS_ALLOWED == 0).\n"));
    pbuf_free(p);
 80265c2:	6878      	ldr	r0, [r7, #4]
 80265c4:	f001 f8ec 	bl	80277a0 <pbuf_free>
    IP_STATS_INC(ip.opterr);
    IP_STATS_INC(ip.drop);
    /* unsupported protocol feature */
    snmp_inc_ipinunknownprotos();
    return ERR_OK;
 80265c8:	2300      	movs	r3, #0
 80265ca:	e04b      	b.n	8026664 <ip_input+0x228>
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
  ip_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  current_netif = inp;
 80265cc:	4a2b      	ldr	r2, [pc, #172]	; (802667c <ip_input+0x240>)
 80265ce:	683b      	ldr	r3, [r7, #0]
 80265d0:	6013      	str	r3, [r2, #0]
  current_header = iphdr;
 80265d2:	4a2b      	ldr	r2, [pc, #172]	; (8026680 <ip_input+0x244>)
 80265d4:	68fb      	ldr	r3, [r7, #12]
 80265d6:	6013      	str	r3, [r2, #0]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
 80265d8:	6878      	ldr	r0, [r7, #4]
 80265da:	6839      	ldr	r1, [r7, #0]
 80265dc:	f001 fa02 	bl	80279e4 <raw_input>
 80265e0:	4603      	mov	r3, r0
 80265e2:	2b00      	cmp	r3, #0
 80265e4:	d131      	bne.n	802664a <ip_input+0x20e>
#endif /* LWIP_RAW */
  {
    switch (IPH_PROTO(iphdr)) {
 80265e6:	68fb      	ldr	r3, [r7, #12]
 80265e8:	7a5b      	ldrb	r3, [r3, #9]
 80265ea:	2b02      	cmp	r3, #2
 80265ec:	d00e      	beq.n	802660c <ip_input+0x1d0>
 80265ee:	2b11      	cmp	r3, #17
 80265f0:	d002      	beq.n	80265f8 <ip_input+0x1bc>
 80265f2:	2b01      	cmp	r3, #1
 80265f4:	d005      	beq.n	8026602 <ip_input+0x1c6>
 80265f6:	e00f      	b.n	8026618 <ip_input+0x1dc>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      snmp_inc_ipindelivers();
      udp_input(p, inp);
 80265f8:	6878      	ldr	r0, [r7, #4]
 80265fa:	6839      	ldr	r1, [r7, #0]
 80265fc:	f001 fb82 	bl	8027d04 <udp_input>
      break;
 8026600:	e023      	b.n	802664a <ip_input+0x20e>
      break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      snmp_inc_ipindelivers();
      icmp_input(p, inp);
 8026602:	6878      	ldr	r0, [r7, #4]
 8026604:	6839      	ldr	r1, [r7, #0]
 8026606:	f7ff fa69 	bl	8025adc <icmp_input>
      break;
 802660a:	e01e      	b.n	802664a <ip_input+0x20e>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
    case IP_PROTO_IGMP:
      igmp_input(p, inp, &current_iphdr_dest);
 802660c:	6878      	ldr	r0, [r7, #4]
 802660e:	6839      	ldr	r1, [r7, #0]
 8026610:	4a17      	ldr	r2, [pc, #92]	; (8026670 <ip_input+0x234>)
 8026612:	f7ff fc6d 	bl	8025ef0 <igmp_input>
      break;
 8026616:	e018      	b.n	802664a <ip_input+0x20e>
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
 8026618:	4b15      	ldr	r3, [pc, #84]	; (8026670 <ip_input+0x234>)
 802661a:	681b      	ldr	r3, [r3, #0]
 802661c:	4618      	mov	r0, r3
 802661e:	6839      	ldr	r1, [r7, #0]
 8026620:	f000 f924 	bl	802686c <ip4_addr_isbroadcast>
 8026624:	4603      	mov	r3, r0
 8026626:	2b00      	cmp	r3, #0
 8026628:	d10c      	bne.n	8026644 <ip_input+0x208>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
 802662a:	4b11      	ldr	r3, [pc, #68]	; (8026670 <ip_input+0x234>)
 802662c:	681b      	ldr	r3, [r3, #0]
 802662e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
 8026632:	2be0      	cmp	r3, #224	; 0xe0
 8026634:	d006      	beq.n	8026644 <ip_input+0x208>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        p->payload = iphdr;
 8026636:	687b      	ldr	r3, [r7, #4]
 8026638:	68fa      	ldr	r2, [r7, #12]
 802663a:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 802663c:	6878      	ldr	r0, [r7, #4]
 802663e:	2102      	movs	r1, #2
 8026640:	f7ff fb30 	bl	8025ca4 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8026644:	6878      	ldr	r0, [r7, #4]
 8026646:	f001 f8ab 	bl	80277a0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      snmp_inc_ipinunknownprotos();
    }
  }

  current_netif = NULL;
 802664a:	4b0c      	ldr	r3, [pc, #48]	; (802667c <ip_input+0x240>)
 802664c:	2200      	movs	r2, #0
 802664e:	601a      	str	r2, [r3, #0]
  current_header = NULL;
 8026650:	4b0b      	ldr	r3, [pc, #44]	; (8026680 <ip_input+0x244>)
 8026652:	2200      	movs	r2, #0
 8026654:	601a      	str	r2, [r3, #0]
  ip_addr_set_any(&current_iphdr_src);
 8026656:	4b07      	ldr	r3, [pc, #28]	; (8026674 <ip_input+0x238>)
 8026658:	2200      	movs	r2, #0
 802665a:	601a      	str	r2, [r3, #0]
  ip_addr_set_any(&current_iphdr_dest);
 802665c:	4b04      	ldr	r3, [pc, #16]	; (8026670 <ip_input+0x234>)
 802665e:	2200      	movs	r2, #0
 8026660:	601a      	str	r2, [r3, #0]

  return ERR_OK;
 8026662:	2300      	movs	r3, #0
 8026664:	b25b      	sxtb	r3, r3
}
 8026666:	4618      	mov	r0, r3
 8026668:	3718      	adds	r7, #24
 802666a:	46bd      	mov	sp, r7
 802666c:	bd80      	pop	{r7, pc}
 802666e:	bf00      	nop
 8026670:	1fff0120 	.word	0x1fff0120
 8026674:	1fff0118 	.word	0x1fff0118
 8026678:	1fff077c 	.word	0x1fff077c
 802667c:	1fff011c 	.word	0x1fff011c
 8026680:	1fff0124 	.word	0x1fff0124

08026684 <ip_output_if>:
 */
err_t
ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8026684:	b590      	push	{r4, r7, lr}
 8026686:	b08b      	sub	sp, #44	; 0x2c
 8026688:	af06      	add	r7, sp, #24
 802668a:	60f8      	str	r0, [r7, #12]
 802668c:	60b9      	str	r1, [r7, #8]
 802668e:	607a      	str	r2, [r7, #4]
 8026690:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 8026692:	78fc      	ldrb	r4, [r7, #3]
 8026694:	f897 3020 	ldrb.w	r3, [r7, #32]
 8026698:	9300      	str	r3, [sp, #0]
 802669a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802669e:	9301      	str	r3, [sp, #4]
 80266a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80266a2:	9302      	str	r3, [sp, #8]
 80266a4:	2300      	movs	r3, #0
 80266a6:	9303      	str	r3, [sp, #12]
 80266a8:	2300      	movs	r3, #0
 80266aa:	9304      	str	r3, [sp, #16]
 80266ac:	68f8      	ldr	r0, [r7, #12]
 80266ae:	68b9      	ldr	r1, [r7, #8]
 80266b0:	687a      	ldr	r2, [r7, #4]
 80266b2:	4623      	mov	r3, r4
 80266b4:	f000 f806 	bl	80266c4 <ip_output_if_opt>
 80266b8:	4603      	mov	r3, r0
}
 80266ba:	4618      	mov	r0, r3
 80266bc:	3714      	adds	r7, #20
 80266be:	46bd      	mov	sp, r7
 80266c0:	bd90      	pop	{r4, r7, pc}
 80266c2:	bf00      	nop

080266c4 <ip_output_if_opt>:
 * @ param optlen length of ip_options
 */
err_t ip_output_if_opt(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
 80266c4:	b580      	push	{r7, lr}
 80266c6:	b088      	sub	sp, #32
 80266c8:	af00      	add	r7, sp, #0
 80266ca:	60f8      	str	r0, [r7, #12]
 80266cc:	60b9      	str	r1, [r7, #8]
 80266ce:	607a      	str	r2, [r7, #4]
 80266d0:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  snmp_inc_ipoutrequests();

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
 80266d2:	687b      	ldr	r3, [r7, #4]
 80266d4:	2b00      	cmp	r3, #0
 80266d6:	f000 808b 	beq.w	80267f0 <ip_output_if_opt+0x12c>
    u16_t ip_hlen = IP_HLEN;
 80266da:	2314      	movs	r3, #20
 80266dc:	83fb      	strh	r3, [r7, #30]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
 80266de:	2300      	movs	r3, #0
 80266e0:	83bb      	strh	r3, [r7, #28]
    if (optlen != 0) {
 80266e2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80266e4:	2b00      	cmp	r3, #0
 80266e6:	d02c      	beq.n	8026742 <ip_output_if_opt+0x7e>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      /* round up to a multiple of 4 */
      optlen_aligned = ((optlen + 3) & ~3);
 80266e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80266ea:	3303      	adds	r3, #3
 80266ec:	b29b      	uxth	r3, r3
 80266ee:	f023 0303 	bic.w	r3, r3, #3
 80266f2:	83bb      	strh	r3, [r7, #28]
      ip_hlen += optlen_aligned;
 80266f4:	8bfa      	ldrh	r2, [r7, #30]
 80266f6:	8bbb      	ldrh	r3, [r7, #28]
 80266f8:	4413      	add	r3, r2
 80266fa:	83fb      	strh	r3, [r7, #30]
      /* First write in the IP options */
      if (pbuf_header(p, optlen_aligned)) {
 80266fc:	8bbb      	ldrh	r3, [r7, #28]
 80266fe:	b21b      	sxth	r3, r3
 8026700:	68f8      	ldr	r0, [r7, #12]
 8026702:	4619      	mov	r1, r3
 8026704:	f000 ffda 	bl	80276bc <pbuf_header>
 8026708:	4603      	mov	r3, r0
 802670a:	2b00      	cmp	r3, #0
 802670c:	d001      	beq.n	8026712 <ip_output_if_opt+0x4e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
        snmp_inc_ipoutdiscards();
        return ERR_BUF;
 802670e:	23fe      	movs	r3, #254	; 0xfe
 8026710:	e07e      	b.n	8026810 <ip_output_if_opt+0x14c>
      }
      MEMCPY(p->payload, ip_options, optlen);
 8026712:	68fb      	ldr	r3, [r7, #12]
 8026714:	685a      	ldr	r2, [r3, #4]
 8026716:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8026718:	4610      	mov	r0, r2
 802671a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 802671c:	461a      	mov	r2, r3
 802671e:	f7fe fb3f 	bl	8024da0 <thumb2_memcpy>
      if (optlen < optlen_aligned) {
 8026722:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8026724:	8bbb      	ldrh	r3, [r7, #28]
 8026726:	429a      	cmp	r2, r3
 8026728:	d20b      	bcs.n	8026742 <ip_output_if_opt+0x7e>
        /* zero the remaining bytes */
        memset(((char*)p->payload) + optlen, 0, optlen_aligned - optlen);
 802672a:	68fb      	ldr	r3, [r7, #12]
 802672c:	685a      	ldr	r2, [r3, #4]
 802672e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8026730:	18d1      	adds	r1, r2, r3
 8026732:	8bba      	ldrh	r2, [r7, #28]
 8026734:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8026736:	1ad3      	subs	r3, r2, r3
 8026738:	4608      	mov	r0, r1
 802673a:	2100      	movs	r1, #0
 802673c:	461a      	mov	r2, r3
 802673e:	f003 f9d6 	bl	8029aee <memset>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8026742:	68f8      	ldr	r0, [r7, #12]
 8026744:	2114      	movs	r1, #20
 8026746:	f000 ffb9 	bl	80276bc <pbuf_header>
 802674a:	4603      	mov	r3, r0
 802674c:	2b00      	cmp	r3, #0
 802674e:	d001      	beq.n	8026754 <ip_output_if_opt+0x90>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
 8026750:	23fe      	movs	r3, #254	; 0xfe
 8026752:	e05d      	b.n	8026810 <ip_output_if_opt+0x14c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8026754:	68fb      	ldr	r3, [r7, #12]
 8026756:	685b      	ldr	r3, [r3, #4]
 8026758:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 802675a:	69bb      	ldr	r3, [r7, #24]
 802675c:	78fa      	ldrb	r2, [r7, #3]
 802675e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8026760:	69bb      	ldr	r3, [r7, #24]
 8026762:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8026766:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip_addr_copy(iphdr->dest, *dest);
 8026768:	687b      	ldr	r3, [r7, #4]
 802676a:	681a      	ldr	r2, [r3, #0]
 802676c:	69bb      	ldr	r3, [r7, #24]
 802676e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8026770:	8bfb      	ldrh	r3, [r7, #30]
 8026772:	089b      	lsrs	r3, r3, #2
 8026774:	b29b      	uxth	r3, r3
 8026776:	b2db      	uxtb	r3, r3
 8026778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802677c:	b2da      	uxtb	r2, r3
 802677e:	69bb      	ldr	r3, [r7, #24]
 8026780:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8026782:	69bb      	ldr	r3, [r7, #24]
 8026784:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8026788:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
 802678a:	68fb      	ldr	r3, [r7, #12]
 802678c:	891b      	ldrh	r3, [r3, #8]
 802678e:	4618      	mov	r0, r3
 8026790:	f000 f9c4 	bl	8026b1c <lwip_htons>
 8026794:	4603      	mov	r3, r0
 8026796:	461a      	mov	r2, r3
 8026798:	69bb      	ldr	r3, [r7, #24]
 802679a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 802679c:	69bb      	ldr	r3, [r7, #24]
 802679e:	2200      	movs	r2, #0
 80267a0:	719a      	strb	r2, [r3, #6]
 80267a2:	2200      	movs	r2, #0
 80267a4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, htons(ip_id));
 80267a6:	4b1d      	ldr	r3, [pc, #116]	; (802681c <ip_output_if_opt+0x158>)
 80267a8:	881b      	ldrh	r3, [r3, #0]
 80267aa:	4618      	mov	r0, r3
 80267ac:	f000 f9b6 	bl	8026b1c <lwip_htons>
 80267b0:	4603      	mov	r3, r0
 80267b2:	461a      	mov	r2, r3
 80267b4:	69bb      	ldr	r3, [r7, #24]
 80267b6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80267b8:	4b18      	ldr	r3, [pc, #96]	; (802681c <ip_output_if_opt+0x158>)
 80267ba:	881b      	ldrh	r3, [r3, #0]
 80267bc:	3301      	adds	r3, #1
 80267be:	b29a      	uxth	r2, r3
 80267c0:	4b16      	ldr	r3, [pc, #88]	; (802681c <ip_output_if_opt+0x158>)
 80267c2:	801a      	strh	r2, [r3, #0]

    if (ip_addr_isany(src)) {
 80267c4:	68bb      	ldr	r3, [r7, #8]
 80267c6:	2b00      	cmp	r3, #0
 80267c8:	d003      	beq.n	80267d2 <ip_output_if_opt+0x10e>
 80267ca:	68bb      	ldr	r3, [r7, #8]
 80267cc:	681b      	ldr	r3, [r3, #0]
 80267ce:	2b00      	cmp	r3, #0
 80267d0:	d104      	bne.n	80267dc <ip_output_if_opt+0x118>
      ip_addr_copy(iphdr->src, netif->ip_addr);
 80267d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80267d4:	685a      	ldr	r2, [r3, #4]
 80267d6:	69bb      	ldr	r3, [r7, #24]
 80267d8:	60da      	str	r2, [r3, #12]
 80267da:	e003      	b.n	80267e4 <ip_output_if_opt+0x120>
    } else {
      /* src cannot be NULL here */
      ip_addr_copy(iphdr->src, *src);
 80267dc:	68bb      	ldr	r3, [r7, #8]
 80267de:	681a      	ldr	r2, [r3, #0]
 80267e0:	69bb      	ldr	r3, [r7, #24]
 80267e2:	60da      	str	r2, [r3, #12]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
    chk_sum = (chk_sum >> 16) + chk_sum;
    chk_sum = ~chk_sum;
    iphdr->_chksum = chk_sum; /* network order */
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80267e4:	69bb      	ldr	r3, [r7, #24]
 80267e6:	2200      	movs	r2, #0
 80267e8:	729a      	strb	r2, [r3, #10]
 80267ea:	2200      	movs	r2, #0
 80267ec:	72da      	strb	r2, [r3, #11]
 80267ee:	e008      	b.n	8026802 <ip_output_if_opt+0x13e>
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, ip_hlen));
#endif
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 80267f0:	68fb      	ldr	r3, [r7, #12]
 80267f2:	685b      	ldr	r3, [r3, #4]
 80267f4:	61bb      	str	r3, [r7, #24]
    ip_addr_copy(dest_addr, iphdr->dest);
 80267f6:	69bb      	ldr	r3, [r7, #24]
 80267f8:	691b      	ldr	r3, [r3, #16]
 80267fa:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80267fc:	f107 0314 	add.w	r3, r7, #20
 8026800:	607b      	str	r3, [r7, #4]
    return ip_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
  return netif->output(netif, p, dest);
 8026802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026804:	695b      	ldr	r3, [r3, #20]
 8026806:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8026808:	68f9      	ldr	r1, [r7, #12]
 802680a:	687a      	ldr	r2, [r7, #4]
 802680c:	4798      	blx	r3
 802680e:	4603      	mov	r3, r0
 8026810:	b25b      	sxtb	r3, r3
}
 8026812:	4618      	mov	r0, r3
 8026814:	3720      	adds	r7, #32
 8026816:	46bd      	mov	sp, r7
 8026818:	bd80      	pop	{r7, pc}
 802681a:	bf00      	nop
 802681c:	1ffe9c10 	.word	0x1ffe9c10

08026820 <ip_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
 8026820:	b590      	push	{r4, r7, lr}
 8026822:	b08b      	sub	sp, #44	; 0x2c
 8026824:	af04      	add	r7, sp, #16
 8026826:	60f8      	str	r0, [r7, #12]
 8026828:	60b9      	str	r1, [r7, #8]
 802682a:	607a      	str	r2, [r7, #4]
 802682c:	70fb      	strb	r3, [r7, #3]

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  if ((netif = ip_route(dest)) == NULL) {
 802682e:	6878      	ldr	r0, [r7, #4]
 8026830:	f7ff fdc8 	bl	80263c4 <ip_route>
 8026834:	6178      	str	r0, [r7, #20]
 8026836:	697b      	ldr	r3, [r7, #20]
 8026838:	2b00      	cmp	r3, #0
 802683a:	d101      	bne.n	8026840 <ip_output+0x20>
    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    return ERR_RTE;
 802683c:	23fc      	movs	r3, #252	; 0xfc
 802683e:	e00f      	b.n	8026860 <ip_output+0x40>
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
 8026840:	78fc      	ldrb	r4, [r7, #3]
 8026842:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8026846:	9300      	str	r3, [sp, #0]
 8026848:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802684c:	9301      	str	r3, [sp, #4]
 802684e:	697b      	ldr	r3, [r7, #20]
 8026850:	9302      	str	r3, [sp, #8]
 8026852:	68f8      	ldr	r0, [r7, #12]
 8026854:	68b9      	ldr	r1, [r7, #8]
 8026856:	687a      	ldr	r2, [r7, #4]
 8026858:	4623      	mov	r3, r4
 802685a:	f7ff ff13 	bl	8026684 <ip_output_if>
 802685e:	4603      	mov	r3, r0
 8026860:	b25b      	sxtb	r3, r3
}
 8026862:	4618      	mov	r0, r3
 8026864:	371c      	adds	r7, #28
 8026866:	46bd      	mov	sp, r7
 8026868:	bd90      	pop	{r4, r7, pc}
 802686a:	bf00      	nop

0802686c <ip4_addr_isbroadcast>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast(u32_t addr, const struct netif *netif)
{
 802686c:	b480      	push	{r7}
 802686e:	b085      	sub	sp, #20
 8026870:	af00      	add	r7, sp, #0
 8026872:	6078      	str	r0, [r7, #4]
 8026874:	6039      	str	r1, [r7, #0]
  ip_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8026876:	687b      	ldr	r3, [r7, #4]
 8026878:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 802687a:	687b      	ldr	r3, [r7, #4]
 802687c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026880:	d002      	beq.n	8026888 <ip4_addr_isbroadcast+0x1c>
 8026882:	687b      	ldr	r3, [r7, #4]
 8026884:	2b00      	cmp	r3, #0
 8026886:	d101      	bne.n	802688c <ip4_addr_isbroadcast+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8026888:	2301      	movs	r3, #1
 802688a:	e025      	b.n	80268d8 <ip4_addr_isbroadcast+0x6c>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 802688c:	683b      	ldr	r3, [r7, #0]
 802688e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8026892:	f003 0302 	and.w	r3, r3, #2
 8026896:	2b00      	cmp	r3, #0
 8026898:	d101      	bne.n	802689e <ip4_addr_isbroadcast+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 802689a:	2300      	movs	r3, #0
 802689c:	e01c      	b.n	80268d8 <ip4_addr_isbroadcast+0x6c>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
 802689e:	683b      	ldr	r3, [r7, #0]
 80268a0:	685a      	ldr	r2, [r3, #4]
 80268a2:	687b      	ldr	r3, [r7, #4]
 80268a4:	429a      	cmp	r2, r3
 80268a6:	d101      	bne.n	80268ac <ip4_addr_isbroadcast+0x40>
    return 0;
 80268a8:	2300      	movs	r3, #0
 80268aa:	e015      	b.n	80268d8 <ip4_addr_isbroadcast+0x6c>
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
 80268ac:	68fa      	ldr	r2, [r7, #12]
 80268ae:	683b      	ldr	r3, [r7, #0]
 80268b0:	685b      	ldr	r3, [r3, #4]
 80268b2:	405a      	eors	r2, r3
 80268b4:	683b      	ldr	r3, [r7, #0]
 80268b6:	689b      	ldr	r3, [r3, #8]
 80268b8:	4013      	ands	r3, r2
 80268ba:	2b00      	cmp	r3, #0
 80268bc:	d10b      	bne.n	80268d6 <ip4_addr_isbroadcast+0x6a>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
 80268be:	683b      	ldr	r3, [r7, #0]
 80268c0:	689b      	ldr	r3, [r3, #8]
 80268c2:	43da      	mvns	r2, r3
 80268c4:	687b      	ldr	r3, [r7, #4]
 80268c6:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
 80268c8:	683b      	ldr	r3, [r7, #0]
 80268ca:	689b      	ldr	r3, [r3, #8]
 80268cc:	43db      	mvns	r3, r3
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
    return 0;
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
 80268ce:	429a      	cmp	r2, r3
 80268d0:	d101      	bne.n	80268d6 <ip4_addr_isbroadcast+0x6a>
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
    /* => network broadcast address */
    return 1;
 80268d2:	2301      	movs	r3, #1
 80268d4:	e000      	b.n	80268d8 <ip4_addr_isbroadcast+0x6c>
  } else {
    return 0;
 80268d6:	2300      	movs	r3, #0
  }
}
 80268d8:	4618      	mov	r0, r3
 80268da:	3714      	adds	r7, #20
 80268dc:	46bd      	mov	sp, r7
 80268de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80268e2:	4770      	bx	lr

080268e4 <ipaddr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ipaddr_aton(const char *cp, ip_addr_t *addr)
{
 80268e4:	b580      	push	{r7, lr}
 80268e6:	b08a      	sub	sp, #40	; 0x28
 80268e8:	af00      	add	r7, sp, #0
 80268ea:	6078      	str	r0, [r7, #4]
 80268ec:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 80268ee:	f107 030c 	add.w	r3, r7, #12
 80268f2:	61fb      	str	r3, [r7, #28]

  c = *cp;
 80268f4:	687b      	ldr	r3, [r7, #4]
 80268f6:	781b      	ldrb	r3, [r3, #0]
 80268f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c))
 80268fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8026900:	2b2f      	cmp	r3, #47	; 0x2f
 8026902:	d903      	bls.n	802690c <ipaddr_aton+0x28>
 8026904:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8026908:	2b39      	cmp	r3, #57	; 0x39
 802690a:	d901      	bls.n	8026910 <ipaddr_aton+0x2c>
      return (0);
 802690c:	2300      	movs	r3, #0
 802690e:	e100      	b.n	8026b12 <ipaddr_aton+0x22e>
    val = 0;
 8026910:	2300      	movs	r3, #0
 8026912:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8026914:	230a      	movs	r3, #10
 8026916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 802691a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 802691e:	2b30      	cmp	r3, #48	; 0x30
 8026920:	d11c      	bne.n	802695c <ipaddr_aton+0x78>
      c = *++cp;
 8026922:	687b      	ldr	r3, [r7, #4]
 8026924:	3301      	adds	r3, #1
 8026926:	607b      	str	r3, [r7, #4]
 8026928:	687b      	ldr	r3, [r7, #4]
 802692a:	781b      	ldrb	r3, [r3, #0]
 802692c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8026930:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8026934:	2b78      	cmp	r3, #120	; 0x78
 8026936:	d003      	beq.n	8026940 <ipaddr_aton+0x5c>
 8026938:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 802693c:	2b58      	cmp	r3, #88	; 0x58
 802693e:	d10a      	bne.n	8026956 <ipaddr_aton+0x72>
        base = 16;
 8026940:	2310      	movs	r3, #16
 8026942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 8026946:	687b      	ldr	r3, [r7, #4]
 8026948:	3301      	adds	r3, #1
 802694a:	607b      	str	r3, [r7, #4]
 802694c:	687b      	ldr	r3, [r7, #4]
 802694e:	781b      	ldrb	r3, [r3, #0]
 8026950:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8026954:	e002      	b.n	802695c <ipaddr_aton+0x78>
      } else
        base = 8;
 8026956:	2308      	movs	r3, #8
 8026958:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    for (;;) {
      if (isdigit(c)) {
 802695c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8026960:	2b2f      	cmp	r3, #47	; 0x2f
 8026962:	d915      	bls.n	8026990 <ipaddr_aton+0xac>
 8026964:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8026968:	2b39      	cmp	r3, #57	; 0x39
 802696a:	d811      	bhi.n	8026990 <ipaddr_aton+0xac>
        val = (val * base) + (int)(c - '0');
 802696c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8026970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026972:	fb02 f203 	mul.w	r2, r2, r3
 8026976:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 802697a:	4413      	add	r3, r2
 802697c:	3b30      	subs	r3, #48	; 0x30
 802697e:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8026980:	687b      	ldr	r3, [r7, #4]
 8026982:	3301      	adds	r3, #1
 8026984:	607b      	str	r3, [r7, #4]
 8026986:	687b      	ldr	r3, [r7, #4]
 8026988:	781b      	ldrb	r3, [r3, #0]
 802698a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 802698e:	e036      	b.n	80269fe <ipaddr_aton+0x11a>
      } else if (base == 16 && isxdigit(c)) {
 8026990:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8026994:	2b10      	cmp	r3, #16
 8026996:	d133      	bne.n	8026a00 <ipaddr_aton+0x11c>
 8026998:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 802699c:	2b2f      	cmp	r3, #47	; 0x2f
 802699e:	d903      	bls.n	80269a8 <ipaddr_aton+0xc4>
 80269a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80269a4:	2b39      	cmp	r3, #57	; 0x39
 80269a6:	d90f      	bls.n	80269c8 <ipaddr_aton+0xe4>
 80269a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80269ac:	2b60      	cmp	r3, #96	; 0x60
 80269ae:	d903      	bls.n	80269b8 <ipaddr_aton+0xd4>
 80269b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80269b4:	2b66      	cmp	r3, #102	; 0x66
 80269b6:	d907      	bls.n	80269c8 <ipaddr_aton+0xe4>
 80269b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80269bc:	2b40      	cmp	r3, #64	; 0x40
 80269be:	d91f      	bls.n	8026a00 <ipaddr_aton+0x11c>
 80269c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80269c4:	2b46      	cmp	r3, #70	; 0x46
 80269c6:	d81b      	bhi.n	8026a00 <ipaddr_aton+0x11c>
        val = (val << 4) | (int)(c + 10 - (islower(c) ? 'a' : 'A'));
 80269c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80269ca:	011b      	lsls	r3, r3, #4
 80269cc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80269d0:	f102 010a 	add.w	r1, r2, #10
 80269d4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80269d8:	2a60      	cmp	r2, #96	; 0x60
 80269da:	d905      	bls.n	80269e8 <ipaddr_aton+0x104>
 80269dc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80269e0:	2a7a      	cmp	r2, #122	; 0x7a
 80269e2:	d801      	bhi.n	80269e8 <ipaddr_aton+0x104>
 80269e4:	2261      	movs	r2, #97	; 0x61
 80269e6:	e000      	b.n	80269ea <ipaddr_aton+0x106>
 80269e8:	2241      	movs	r2, #65	; 0x41
 80269ea:	1a8a      	subs	r2, r1, r2
 80269ec:	4313      	orrs	r3, r2
 80269ee:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 80269f0:	687b      	ldr	r3, [r7, #4]
 80269f2:	3301      	adds	r3, #1
 80269f4:	607b      	str	r3, [r7, #4]
 80269f6:	687b      	ldr	r3, [r7, #4]
 80269f8:	781b      	ldrb	r3, [r3, #0]
 80269fa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      } else
        break;
    }
 80269fe:	e7ad      	b.n	802695c <ipaddr_aton+0x78>
    if (c == '.') {
 8026a00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8026a04:	2b2e      	cmp	r3, #46	; 0x2e
 8026a06:	d114      	bne.n	8026a32 <ipaddr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8026a08:	f107 030c 	add.w	r3, r7, #12
 8026a0c:	330c      	adds	r3, #12
 8026a0e:	69fa      	ldr	r2, [r7, #28]
 8026a10:	429a      	cmp	r2, r3
 8026a12:	d301      	bcc.n	8026a18 <ipaddr_aton+0x134>
        return (0);
 8026a14:	2300      	movs	r3, #0
 8026a16:	e07c      	b.n	8026b12 <ipaddr_aton+0x22e>
      }
      *pp++ = val;
 8026a18:	69fb      	ldr	r3, [r7, #28]
 8026a1a:	1d1a      	adds	r2, r3, #4
 8026a1c:	61fa      	str	r2, [r7, #28]
 8026a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026a20:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8026a22:	687b      	ldr	r3, [r7, #4]
 8026a24:	3301      	adds	r3, #1
 8026a26:	607b      	str	r3, [r7, #4]
 8026a28:	687b      	ldr	r3, [r7, #4]
 8026a2a:	781b      	ldrb	r3, [r3, #0]
 8026a2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8026a30:	e005      	b.n	8026a3e <ipaddr_aton+0x15a>
    } else
      break;
 8026a32:	bf00      	nop
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 8026a34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8026a38:	2b00      	cmp	r3, #0
 8026a3a:	d01b      	beq.n	8026a74 <ipaddr_aton+0x190>
 8026a3c:	e000      	b.n	8026a40 <ipaddr_aton+0x15c>
      }
      *pp++ = val;
      c = *++cp;
    } else
      break;
  }
 8026a3e:	e75d      	b.n	80268fc <ipaddr_aton+0x18>
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 8026a40:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8026a44:	2b20      	cmp	r3, #32
 8026a46:	d015      	beq.n	8026a74 <ipaddr_aton+0x190>
 8026a48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8026a4c:	2b0c      	cmp	r3, #12
 8026a4e:	d011      	beq.n	8026a74 <ipaddr_aton+0x190>
 8026a50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8026a54:	2b0a      	cmp	r3, #10
 8026a56:	d00d      	beq.n	8026a74 <ipaddr_aton+0x190>
 8026a58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8026a5c:	2b0d      	cmp	r3, #13
 8026a5e:	d009      	beq.n	8026a74 <ipaddr_aton+0x190>
 8026a60:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8026a64:	2b09      	cmp	r3, #9
 8026a66:	d005      	beq.n	8026a74 <ipaddr_aton+0x190>
 8026a68:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8026a6c:	2b0b      	cmp	r3, #11
 8026a6e:	d001      	beq.n	8026a74 <ipaddr_aton+0x190>
    return (0);
 8026a70:	2300      	movs	r3, #0
 8026a72:	e04e      	b.n	8026b12 <ipaddr_aton+0x22e>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8026a74:	69fa      	ldr	r2, [r7, #28]
 8026a76:	f107 030c 	add.w	r3, r7, #12
 8026a7a:	1ad3      	subs	r3, r2, r3
 8026a7c:	109b      	asrs	r3, r3, #2
 8026a7e:	3301      	adds	r3, #1
 8026a80:	2b04      	cmp	r3, #4
 8026a82:	d83b      	bhi.n	8026afc <ipaddr_aton+0x218>
 8026a84:	a201      	add	r2, pc, #4	; (adr r2, 8026a8c <ipaddr_aton+0x1a8>)
 8026a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8026a8a:	bf00      	nop
 8026a8c:	08026aa1 	.word	0x08026aa1
 8026a90:	08026afd 	.word	0x08026afd
 8026a94:	08026aa5 	.word	0x08026aa5
 8026a98:	08026abd 	.word	0x08026abd
 8026a9c:	08026adb 	.word	0x08026adb

  case 0:
    return (0);       /* initial nondigit */
 8026aa0:	2300      	movs	r3, #0
 8026aa2:	e036      	b.n	8026b12 <ipaddr_aton+0x22e>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 8026aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026aa6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8026aaa:	d301      	bcc.n	8026ab0 <ipaddr_aton+0x1cc>
      return (0);
 8026aac:	2300      	movs	r3, #0
 8026aae:	e030      	b.n	8026b12 <ipaddr_aton+0x22e>
    }
    val |= parts[0] << 24;
 8026ab0:	68fb      	ldr	r3, [r7, #12]
 8026ab2:	061b      	lsls	r3, r3, #24
 8026ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026ab6:	4313      	orrs	r3, r2
 8026ab8:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8026aba:	e020      	b.n	8026afe <ipaddr_aton+0x21a>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 8026abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8026ac2:	d301      	bcc.n	8026ac8 <ipaddr_aton+0x1e4>
      return (0);
 8026ac4:	2300      	movs	r3, #0
 8026ac6:	e024      	b.n	8026b12 <ipaddr_aton+0x22e>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 8026ac8:	68fb      	ldr	r3, [r7, #12]
 8026aca:	061a      	lsls	r2, r3, #24
 8026acc:	693b      	ldr	r3, [r7, #16]
 8026ace:	041b      	lsls	r3, r3, #16
 8026ad0:	4313      	orrs	r3, r2
 8026ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026ad4:	4313      	orrs	r3, r2
 8026ad6:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8026ad8:	e011      	b.n	8026afe <ipaddr_aton+0x21a>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 8026ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026adc:	2bff      	cmp	r3, #255	; 0xff
 8026ade:	d901      	bls.n	8026ae4 <ipaddr_aton+0x200>
      return (0);
 8026ae0:	2300      	movs	r3, #0
 8026ae2:	e016      	b.n	8026b12 <ipaddr_aton+0x22e>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8026ae4:	68fb      	ldr	r3, [r7, #12]
 8026ae6:	061a      	lsls	r2, r3, #24
 8026ae8:	693b      	ldr	r3, [r7, #16]
 8026aea:	041b      	lsls	r3, r3, #16
 8026aec:	431a      	orrs	r2, r3
 8026aee:	697b      	ldr	r3, [r7, #20]
 8026af0:	021b      	lsls	r3, r3, #8
 8026af2:	4313      	orrs	r3, r2
 8026af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026af6:	4313      	orrs	r3, r2
 8026af8:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8026afa:	e000      	b.n	8026afe <ipaddr_aton+0x21a>
  default:
    LWIP_ASSERT("unhandled", 0);
    break;
 8026afc:	bf00      	nop
  }
  if (addr) {
 8026afe:	683b      	ldr	r3, [r7, #0]
 8026b00:	2b00      	cmp	r3, #0
 8026b02:	d005      	beq.n	8026b10 <ipaddr_aton+0x22c>
    ip4_addr_set_u32(addr, htonl(val));
 8026b04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8026b06:	f000 f82d 	bl	8026b64 <lwip_htonl>
 8026b0a:	4602      	mov	r2, r0
 8026b0c:	683b      	ldr	r3, [r7, #0]
 8026b0e:	601a      	str	r2, [r3, #0]
  }
  return (1);
 8026b10:	2301      	movs	r3, #1
}
 8026b12:	4618      	mov	r0, r3
 8026b14:	3728      	adds	r7, #40	; 0x28
 8026b16:	46bd      	mov	sp, r7
 8026b18:	bd80      	pop	{r7, pc}
 8026b1a:	bf00      	nop

08026b1c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8026b1c:	b480      	push	{r7}
 8026b1e:	b083      	sub	sp, #12
 8026b20:	af00      	add	r7, sp, #0
 8026b22:	4603      	mov	r3, r0
 8026b24:	80fb      	strh	r3, [r7, #6]
  return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
 8026b26:	88fb      	ldrh	r3, [r7, #6]
 8026b28:	021b      	lsls	r3, r3, #8
 8026b2a:	b29a      	uxth	r2, r3
 8026b2c:	88fb      	ldrh	r3, [r7, #6]
 8026b2e:	0a1b      	lsrs	r3, r3, #8
 8026b30:	b29b      	uxth	r3, r3
 8026b32:	b29b      	uxth	r3, r3
 8026b34:	4313      	orrs	r3, r2
 8026b36:	b29b      	uxth	r3, r3
 8026b38:	b29b      	uxth	r3, r3
}
 8026b3a:	4618      	mov	r0, r3
 8026b3c:	370c      	adds	r7, #12
 8026b3e:	46bd      	mov	sp, r7
 8026b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b44:	4770      	bx	lr
 8026b46:	bf00      	nop

08026b48 <lwip_ntohs>:
 * @param n u16_t in network byte order
 * @return n in host byte order
 */
u16_t
lwip_ntohs(u16_t n)
{
 8026b48:	b580      	push	{r7, lr}
 8026b4a:	b082      	sub	sp, #8
 8026b4c:	af00      	add	r7, sp, #0
 8026b4e:	4603      	mov	r3, r0
 8026b50:	80fb      	strh	r3, [r7, #6]
  return lwip_htons(n);
 8026b52:	88fb      	ldrh	r3, [r7, #6]
 8026b54:	4618      	mov	r0, r3
 8026b56:	f7ff ffe1 	bl	8026b1c <lwip_htons>
 8026b5a:	4603      	mov	r3, r0
}
 8026b5c:	4618      	mov	r0, r3
 8026b5e:	3708      	adds	r7, #8
 8026b60:	46bd      	mov	sp, r7
 8026b62:	bd80      	pop	{r7, pc}

08026b64 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8026b64:	b480      	push	{r7}
 8026b66:	b083      	sub	sp, #12
 8026b68:	af00      	add	r7, sp, #0
 8026b6a:	6078      	str	r0, [r7, #4]
  return ((n & 0xff) << 24) |
 8026b6c:	687b      	ldr	r3, [r7, #4]
 8026b6e:	061a      	lsls	r2, r3, #24
    ((n & 0xff00) << 8) |
 8026b70:	687b      	ldr	r3, [r7, #4]
 8026b72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026b76:	021b      	lsls	r3, r3, #8
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return ((n & 0xff) << 24) |
 8026b78:	431a      	orrs	r2, r3
    ((n & 0xff00) << 8) |
    ((n & 0xff0000UL) >> 8) |
 8026b7a:	687b      	ldr	r3, [r7, #4]
 8026b7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8026b80:	0a1b      	lsrs	r3, r3, #8
 */
u32_t
lwip_htonl(u32_t n)
{
  return ((n & 0xff) << 24) |
    ((n & 0xff00) << 8) |
 8026b82:	431a      	orrs	r2, r3
    ((n & 0xff0000UL) >> 8) |
    ((n & 0xff000000UL) >> 24);
 8026b84:	687b      	ldr	r3, [r7, #4]
 8026b86:	0e1b      	lsrs	r3, r3, #24
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return ((n & 0xff) << 24) |
 8026b88:	4313      	orrs	r3, r2
    ((n & 0xff00) << 8) |
    ((n & 0xff0000UL) >> 8) |
    ((n & 0xff000000UL) >> 24);
}
 8026b8a:	4618      	mov	r0, r3
 8026b8c:	370c      	adds	r7, #12
 8026b8e:	46bd      	mov	sp, r7
 8026b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b94:	4770      	bx	lr
 8026b96:	bf00      	nop

08026b98 <lwip_init>:
/**
 * Perform Sanity check of user-configurable values, and initialize all modules.
 */
void
lwip_init(void)
{
 8026b98:	b580      	push	{r7, lr}
 8026b9a:	af00      	add	r7, sp, #0
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8026b9c:	f000 f86a 	bl	8026c74 <mem_init>
  memp_init();
 8026ba0:	f000 fa30 	bl	8027004 <memp_init>
  pbuf_init();
  netif_init();
 8026ba4:	f000 faba 	bl	802711c <netif_init>
#endif /* LWIP_ARP */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8026ba8:	f001 f86c 	bl	8027c84 <udp_init>
#endif /* LWIP_SNMP */
#if LWIP_AUTOIP
  autoip_init();
#endif /* LWIP_AUTOIP */
#if LWIP_IGMP
  igmp_init();
 8026bac:	f7ff f8e0 	bl	8025d70 <igmp_init>
#if LWIP_DNS
  dns_init();
#endif /* LWIP_DNS */

#if LWIP_TIMERS
  sys_timeouts_init();
 8026bb0:	f000 ff9a 	bl	8027ae8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8026bb4:	bd80      	pop	{r7, pc}
 8026bb6:	bf00      	nop

08026bb8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8026bb8:	b480      	push	{r7}
 8026bba:	b085      	sub	sp, #20
 8026bbc:	af00      	add	r7, sp, #0
 8026bbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

  nmem = (struct mem *)(void *)&ram[mem->next];
 8026bc0:	4b29      	ldr	r3, [pc, #164]	; (8026c68 <plug_holes+0xb0>)
 8026bc2:	681b      	ldr	r3, [r3, #0]
 8026bc4:	687a      	ldr	r2, [r7, #4]
 8026bc6:	8812      	ldrh	r2, [r2, #0]
 8026bc8:	4413      	add	r3, r2
 8026bca:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8026bcc:	687a      	ldr	r2, [r7, #4]
 8026bce:	68fb      	ldr	r3, [r7, #12]
 8026bd0:	429a      	cmp	r2, r3
 8026bd2:	d01f      	beq.n	8026c14 <plug_holes+0x5c>
 8026bd4:	68fb      	ldr	r3, [r7, #12]
 8026bd6:	791b      	ldrb	r3, [r3, #4]
 8026bd8:	2b00      	cmp	r3, #0
 8026bda:	d11b      	bne.n	8026c14 <plug_holes+0x5c>
 8026bdc:	4b23      	ldr	r3, [pc, #140]	; (8026c6c <plug_holes+0xb4>)
 8026bde:	681b      	ldr	r3, [r3, #0]
 8026be0:	68fa      	ldr	r2, [r7, #12]
 8026be2:	429a      	cmp	r2, r3
 8026be4:	d016      	beq.n	8026c14 <plug_holes+0x5c>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8026be6:	4b22      	ldr	r3, [pc, #136]	; (8026c70 <plug_holes+0xb8>)
 8026be8:	681a      	ldr	r2, [r3, #0]
 8026bea:	68fb      	ldr	r3, [r7, #12]
 8026bec:	429a      	cmp	r2, r3
 8026bee:	d102      	bne.n	8026bf6 <plug_holes+0x3e>
      lfree = mem;
 8026bf0:	4a1f      	ldr	r2, [pc, #124]	; (8026c70 <plug_holes+0xb8>)
 8026bf2:	687b      	ldr	r3, [r7, #4]
 8026bf4:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8026bf6:	68fb      	ldr	r3, [r7, #12]
 8026bf8:	881a      	ldrh	r2, [r3, #0]
 8026bfa:	687b      	ldr	r3, [r7, #4]
 8026bfc:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8026bfe:	4b1a      	ldr	r3, [pc, #104]	; (8026c68 <plug_holes+0xb0>)
 8026c00:	681b      	ldr	r3, [r3, #0]
 8026c02:	68fa      	ldr	r2, [r7, #12]
 8026c04:	8812      	ldrh	r2, [r2, #0]
 8026c06:	4413      	add	r3, r2
 8026c08:	687a      	ldr	r2, [r7, #4]
 8026c0a:	4917      	ldr	r1, [pc, #92]	; (8026c68 <plug_holes+0xb0>)
 8026c0c:	6809      	ldr	r1, [r1, #0]
 8026c0e:	1a52      	subs	r2, r2, r1
 8026c10:	b292      	uxth	r2, r2
 8026c12:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8026c14:	4b14      	ldr	r3, [pc, #80]	; (8026c68 <plug_holes+0xb0>)
 8026c16:	681b      	ldr	r3, [r3, #0]
 8026c18:	687a      	ldr	r2, [r7, #4]
 8026c1a:	8852      	ldrh	r2, [r2, #2]
 8026c1c:	4413      	add	r3, r2
 8026c1e:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8026c20:	68ba      	ldr	r2, [r7, #8]
 8026c22:	687b      	ldr	r3, [r7, #4]
 8026c24:	429a      	cmp	r2, r3
 8026c26:	d01a      	beq.n	8026c5e <plug_holes+0xa6>
 8026c28:	68bb      	ldr	r3, [r7, #8]
 8026c2a:	791b      	ldrb	r3, [r3, #4]
 8026c2c:	2b00      	cmp	r3, #0
 8026c2e:	d116      	bne.n	8026c5e <plug_holes+0xa6>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8026c30:	4b0f      	ldr	r3, [pc, #60]	; (8026c70 <plug_holes+0xb8>)
 8026c32:	681a      	ldr	r2, [r3, #0]
 8026c34:	687b      	ldr	r3, [r7, #4]
 8026c36:	429a      	cmp	r2, r3
 8026c38:	d102      	bne.n	8026c40 <plug_holes+0x88>
      lfree = pmem;
 8026c3a:	4a0d      	ldr	r2, [pc, #52]	; (8026c70 <plug_holes+0xb8>)
 8026c3c:	68bb      	ldr	r3, [r7, #8]
 8026c3e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8026c40:	687b      	ldr	r3, [r7, #4]
 8026c42:	881a      	ldrh	r2, [r3, #0]
 8026c44:	68bb      	ldr	r3, [r7, #8]
 8026c46:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8026c48:	4b07      	ldr	r3, [pc, #28]	; (8026c68 <plug_holes+0xb0>)
 8026c4a:	681b      	ldr	r3, [r3, #0]
 8026c4c:	687a      	ldr	r2, [r7, #4]
 8026c4e:	8812      	ldrh	r2, [r2, #0]
 8026c50:	4413      	add	r3, r2
 8026c52:	68ba      	ldr	r2, [r7, #8]
 8026c54:	4904      	ldr	r1, [pc, #16]	; (8026c68 <plug_holes+0xb0>)
 8026c56:	6809      	ldr	r1, [r1, #0]
 8026c58:	1a52      	subs	r2, r2, r1
 8026c5a:	b292      	uxth	r2, r2
 8026c5c:	805a      	strh	r2, [r3, #2]
  }
}
 8026c5e:	3714      	adds	r7, #20
 8026c60:	46bd      	mov	sp, r7
 8026c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c66:	4770      	bx	lr
 8026c68:	1ffe9c14 	.word	0x1ffe9c14
 8026c6c:	1ffe9c18 	.word	0x1ffe9c18
 8026c70:	1ffe9c1c 	.word	0x1ffe9c1c

08026c74 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8026c74:	b480      	push	{r7}
 8026c76:	b083      	sub	sp, #12
 8026c78:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8026c7a:	4b18      	ldr	r3, [pc, #96]	; (8026cdc <mem_init+0x68>)
 8026c7c:	3303      	adds	r3, #3
 8026c7e:	f023 0303 	bic.w	r3, r3, #3
 8026c82:	461a      	mov	r2, r3
 8026c84:	4b16      	ldr	r3, [pc, #88]	; (8026ce0 <mem_init+0x6c>)
 8026c86:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8026c88:	4b15      	ldr	r3, [pc, #84]	; (8026ce0 <mem_init+0x6c>)
 8026c8a:	681b      	ldr	r3, [r3, #0]
 8026c8c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8026c8e:	687b      	ldr	r3, [r7, #4]
 8026c90:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8026c94:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8026c96:	687b      	ldr	r3, [r7, #4]
 8026c98:	2200      	movs	r2, #0
 8026c9a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8026c9c:	687b      	ldr	r3, [r7, #4]
 8026c9e:	2200      	movs	r2, #0
 8026ca0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8026ca2:	4b0f      	ldr	r3, [pc, #60]	; (8026ce0 <mem_init+0x6c>)
 8026ca4:	681b      	ldr	r3, [r3, #0]
 8026ca6:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8026caa:	4a0e      	ldr	r2, [pc, #56]	; (8026ce4 <mem_init+0x70>)
 8026cac:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8026cae:	4b0d      	ldr	r3, [pc, #52]	; (8026ce4 <mem_init+0x70>)
 8026cb0:	681b      	ldr	r3, [r3, #0]
 8026cb2:	2201      	movs	r2, #1
 8026cb4:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8026cb6:	4b0b      	ldr	r3, [pc, #44]	; (8026ce4 <mem_init+0x70>)
 8026cb8:	681b      	ldr	r3, [r3, #0]
 8026cba:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8026cbe:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8026cc0:	4b08      	ldr	r3, [pc, #32]	; (8026ce4 <mem_init+0x70>)
 8026cc2:	681b      	ldr	r3, [r3, #0]
 8026cc4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8026cc8:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8026cca:	4b05      	ldr	r3, [pc, #20]	; (8026ce0 <mem_init+0x6c>)
 8026ccc:	681b      	ldr	r3, [r3, #0]
 8026cce:	4a06      	ldr	r2, [pc, #24]	; (8026ce8 <mem_init+0x74>)
 8026cd0:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if(sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8026cd2:	370c      	adds	r7, #12
 8026cd4:	46bd      	mov	sp, r7
 8026cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cda:	4770      	bx	lr
 8026cdc:	1fff0128 	.word	0x1fff0128
 8026ce0:	1ffe9c14 	.word	0x1ffe9c14
 8026ce4:	1ffe9c18 	.word	0x1ffe9c18
 8026ce8:	1ffe9c1c 	.word	0x1ffe9c1c

08026cec <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8026cec:	b580      	push	{r7, lr}
 8026cee:	b084      	sub	sp, #16
 8026cf0:	af00      	add	r7, sp, #0
 8026cf2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8026cf4:	687b      	ldr	r3, [r7, #4]
 8026cf6:	2b00      	cmp	r3, #0
 8026cf8:	d100      	bne.n	8026cfc <mem_free+0x10>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
 8026cfa:	e01b      	b.n	8026d34 <mem_free+0x48>
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8026cfc:	4b0f      	ldr	r3, [pc, #60]	; (8026d3c <mem_free+0x50>)
 8026cfe:	681b      	ldr	r3, [r3, #0]
 8026d00:	687a      	ldr	r2, [r7, #4]
 8026d02:	429a      	cmp	r2, r3
 8026d04:	d304      	bcc.n	8026d10 <mem_free+0x24>
 8026d06:	4b0e      	ldr	r3, [pc, #56]	; (8026d40 <mem_free+0x54>)
 8026d08:	681b      	ldr	r3, [r3, #0]
 8026d0a:	687a      	ldr	r2, [r7, #4]
 8026d0c:	429a      	cmp	r2, r3
 8026d0e:	d300      	bcc.n	8026d12 <mem_free+0x26>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return;
 8026d10:	e010      	b.n	8026d34 <mem_free+0x48>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8026d12:	687b      	ldr	r3, [r7, #4]
 8026d14:	3b08      	subs	r3, #8
 8026d16:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
 8026d18:	68fb      	ldr	r3, [r7, #12]
 8026d1a:	2200      	movs	r2, #0
 8026d1c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8026d1e:	4b09      	ldr	r3, [pc, #36]	; (8026d44 <mem_free+0x58>)
 8026d20:	681b      	ldr	r3, [r3, #0]
 8026d22:	68fa      	ldr	r2, [r7, #12]
 8026d24:	429a      	cmp	r2, r3
 8026d26:	d202      	bcs.n	8026d2e <mem_free+0x42>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8026d28:	4a06      	ldr	r2, [pc, #24]	; (8026d44 <mem_free+0x58>)
 8026d2a:	68fb      	ldr	r3, [r7, #12]
 8026d2c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8026d2e:	68f8      	ldr	r0, [r7, #12]
 8026d30:	f7ff ff42 	bl	8026bb8 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8026d34:	3710      	adds	r7, #16
 8026d36:	46bd      	mov	sp, r7
 8026d38:	bd80      	pop	{r7, pc}
 8026d3a:	bf00      	nop
 8026d3c:	1ffe9c14 	.word	0x1ffe9c14
 8026d40:	1ffe9c18 	.word	0x1ffe9c18
 8026d44:	1ffe9c1c 	.word	0x1ffe9c1c

08026d48 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8026d48:	b480      	push	{r7}
 8026d4a:	b087      	sub	sp, #28
 8026d4c:	af00      	add	r7, sp, #0
 8026d4e:	6078      	str	r0, [r7, #4]
 8026d50:	460b      	mov	r3, r1
 8026d52:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8026d54:	887b      	ldrh	r3, [r7, #2]
 8026d56:	3303      	adds	r3, #3
 8026d58:	b29b      	uxth	r3, r3
 8026d5a:	f023 0303 	bic.w	r3, r3, #3
 8026d5e:	807b      	strh	r3, [r7, #2]

  if(newsize < MIN_SIZE_ALIGNED) {
 8026d60:	887b      	ldrh	r3, [r7, #2]
 8026d62:	2b0b      	cmp	r3, #11
 8026d64:	d801      	bhi.n	8026d6a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8026d66:	230c      	movs	r3, #12
 8026d68:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8026d6a:	887b      	ldrh	r3, [r7, #2]
 8026d6c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8026d70:	d901      	bls.n	8026d76 <mem_trim+0x2e>
    return NULL;
 8026d72:	2300      	movs	r3, #0
 8026d74:	e096      	b.n	8026ea4 <mem_trim+0x15c>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8026d76:	4b4e      	ldr	r3, [pc, #312]	; (8026eb0 <mem_trim+0x168>)
 8026d78:	681b      	ldr	r3, [r3, #0]
 8026d7a:	687a      	ldr	r2, [r7, #4]
 8026d7c:	429a      	cmp	r2, r3
 8026d7e:	d304      	bcc.n	8026d8a <mem_trim+0x42>
 8026d80:	4b4c      	ldr	r3, [pc, #304]	; (8026eb4 <mem_trim+0x16c>)
 8026d82:	681b      	ldr	r3, [r3, #0]
 8026d84:	687a      	ldr	r2, [r7, #4]
 8026d86:	429a      	cmp	r2, r3
 8026d88:	d301      	bcc.n	8026d8e <mem_trim+0x46>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8026d8a:	687b      	ldr	r3, [r7, #4]
 8026d8c:	e08a      	b.n	8026ea4 <mem_trim+0x15c>
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8026d8e:	687b      	ldr	r3, [r7, #4]
 8026d90:	3b08      	subs	r3, #8
 8026d92:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8026d94:	697b      	ldr	r3, [r7, #20]
 8026d96:	4a46      	ldr	r2, [pc, #280]	; (8026eb0 <mem_trim+0x168>)
 8026d98:	6812      	ldr	r2, [r2, #0]
 8026d9a:	1a9b      	subs	r3, r3, r2
 8026d9c:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8026d9e:	697b      	ldr	r3, [r7, #20]
 8026da0:	881a      	ldrh	r2, [r3, #0]
 8026da2:	8a7b      	ldrh	r3, [r7, #18]
 8026da4:	1ad3      	subs	r3, r2, r3
 8026da6:	b29b      	uxth	r3, r3
 8026da8:	3b08      	subs	r3, #8
 8026daa:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
 8026dac:	887a      	ldrh	r2, [r7, #2]
 8026dae:	8a3b      	ldrh	r3, [r7, #16]
 8026db0:	429a      	cmp	r2, r3
 8026db2:	d901      	bls.n	8026db8 <mem_trim+0x70>
    /* not supported */
    return NULL;
 8026db4:	2300      	movs	r3, #0
 8026db6:	e075      	b.n	8026ea4 <mem_trim+0x15c>
  }
  if (newsize == size) {
 8026db8:	887a      	ldrh	r2, [r7, #2]
 8026dba:	8a3b      	ldrh	r3, [r7, #16]
 8026dbc:	429a      	cmp	r2, r3
 8026dbe:	d101      	bne.n	8026dc4 <mem_trim+0x7c>
    /* No change in size, simply return */
    return rmem;
 8026dc0:	687b      	ldr	r3, [r7, #4]
 8026dc2:	e06f      	b.n	8026ea4 <mem_trim+0x15c>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8026dc4:	4b3a      	ldr	r3, [pc, #232]	; (8026eb0 <mem_trim+0x168>)
 8026dc6:	681b      	ldr	r3, [r3, #0]
 8026dc8:	697a      	ldr	r2, [r7, #20]
 8026dca:	8812      	ldrh	r2, [r2, #0]
 8026dcc:	4413      	add	r3, r2
 8026dce:	60fb      	str	r3, [r7, #12]
  if(mem2->used == 0) {
 8026dd0:	68fb      	ldr	r3, [r7, #12]
 8026dd2:	791b      	ldrb	r3, [r3, #4]
 8026dd4:	2b00      	cmp	r3, #0
 8026dd6:	d132      	bne.n	8026e3e <mem_trim+0xf6>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8026dd8:	68fb      	ldr	r3, [r7, #12]
 8026dda:	881b      	ldrh	r3, [r3, #0]
 8026ddc:	817b      	strh	r3, [r7, #10]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8026dde:	8a7a      	ldrh	r2, [r7, #18]
 8026de0:	887b      	ldrh	r3, [r7, #2]
 8026de2:	4413      	add	r3, r2
 8026de4:	b29b      	uxth	r3, r3
 8026de6:	3308      	adds	r3, #8
 8026de8:	813b      	strh	r3, [r7, #8]
    if (lfree == mem2) {
 8026dea:	4b33      	ldr	r3, [pc, #204]	; (8026eb8 <mem_trim+0x170>)
 8026dec:	681a      	ldr	r2, [r3, #0]
 8026dee:	68fb      	ldr	r3, [r7, #12]
 8026df0:	429a      	cmp	r2, r3
 8026df2:	d105      	bne.n	8026e00 <mem_trim+0xb8>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8026df4:	4b2e      	ldr	r3, [pc, #184]	; (8026eb0 <mem_trim+0x168>)
 8026df6:	681a      	ldr	r2, [r3, #0]
 8026df8:	893b      	ldrh	r3, [r7, #8]
 8026dfa:	4413      	add	r3, r2
 8026dfc:	4a2e      	ldr	r2, [pc, #184]	; (8026eb8 <mem_trim+0x170>)
 8026dfe:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8026e00:	4b2b      	ldr	r3, [pc, #172]	; (8026eb0 <mem_trim+0x168>)
 8026e02:	681a      	ldr	r2, [r3, #0]
 8026e04:	893b      	ldrh	r3, [r7, #8]
 8026e06:	4413      	add	r3, r2
 8026e08:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8026e0a:	68fb      	ldr	r3, [r7, #12]
 8026e0c:	2200      	movs	r2, #0
 8026e0e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8026e10:	68fb      	ldr	r3, [r7, #12]
 8026e12:	897a      	ldrh	r2, [r7, #10]
 8026e14:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8026e16:	68fb      	ldr	r3, [r7, #12]
 8026e18:	8a7a      	ldrh	r2, [r7, #18]
 8026e1a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8026e1c:	697b      	ldr	r3, [r7, #20]
 8026e1e:	893a      	ldrh	r2, [r7, #8]
 8026e20:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8026e22:	68fb      	ldr	r3, [r7, #12]
 8026e24:	881b      	ldrh	r3, [r3, #0]
 8026e26:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8026e2a:	d007      	beq.n	8026e3c <mem_trim+0xf4>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8026e2c:	4b20      	ldr	r3, [pc, #128]	; (8026eb0 <mem_trim+0x168>)
 8026e2e:	681b      	ldr	r3, [r3, #0]
 8026e30:	68fa      	ldr	r2, [r7, #12]
 8026e32:	8812      	ldrh	r2, [r2, #0]
 8026e34:	4413      	add	r3, r2
 8026e36:	893a      	ldrh	r2, [r7, #8]
 8026e38:	805a      	strh	r2, [r3, #2]
 8026e3a:	e032      	b.n	8026ea2 <mem_trim+0x15a>
 8026e3c:	e031      	b.n	8026ea2 <mem_trim+0x15a>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8026e3e:	887b      	ldrh	r3, [r7, #2]
 8026e40:	f103 0214 	add.w	r2, r3, #20
 8026e44:	8a3b      	ldrh	r3, [r7, #16]
 8026e46:	429a      	cmp	r2, r3
 8026e48:	d82b      	bhi.n	8026ea2 <mem_trim+0x15a>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8026e4a:	8a7a      	ldrh	r2, [r7, #18]
 8026e4c:	887b      	ldrh	r3, [r7, #2]
 8026e4e:	4413      	add	r3, r2
 8026e50:	b29b      	uxth	r3, r3
 8026e52:	3308      	adds	r3, #8
 8026e54:	813b      	strh	r3, [r7, #8]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8026e56:	4b16      	ldr	r3, [pc, #88]	; (8026eb0 <mem_trim+0x168>)
 8026e58:	681a      	ldr	r2, [r3, #0]
 8026e5a:	893b      	ldrh	r3, [r7, #8]
 8026e5c:	4413      	add	r3, r2
 8026e5e:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8026e60:	4b15      	ldr	r3, [pc, #84]	; (8026eb8 <mem_trim+0x170>)
 8026e62:	681b      	ldr	r3, [r3, #0]
 8026e64:	68fa      	ldr	r2, [r7, #12]
 8026e66:	429a      	cmp	r2, r3
 8026e68:	d202      	bcs.n	8026e70 <mem_trim+0x128>
      lfree = mem2;
 8026e6a:	4a13      	ldr	r2, [pc, #76]	; (8026eb8 <mem_trim+0x170>)
 8026e6c:	68fb      	ldr	r3, [r7, #12]
 8026e6e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8026e70:	68fb      	ldr	r3, [r7, #12]
 8026e72:	2200      	movs	r2, #0
 8026e74:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8026e76:	697b      	ldr	r3, [r7, #20]
 8026e78:	881a      	ldrh	r2, [r3, #0]
 8026e7a:	68fb      	ldr	r3, [r7, #12]
 8026e7c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8026e7e:	68fb      	ldr	r3, [r7, #12]
 8026e80:	8a7a      	ldrh	r2, [r7, #18]
 8026e82:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8026e84:	697b      	ldr	r3, [r7, #20]
 8026e86:	893a      	ldrh	r2, [r7, #8]
 8026e88:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8026e8a:	68fb      	ldr	r3, [r7, #12]
 8026e8c:	881b      	ldrh	r3, [r3, #0]
 8026e8e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8026e92:	d006      	beq.n	8026ea2 <mem_trim+0x15a>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8026e94:	4b06      	ldr	r3, [pc, #24]	; (8026eb0 <mem_trim+0x168>)
 8026e96:	681b      	ldr	r3, [r3, #0]
 8026e98:	68fa      	ldr	r2, [r7, #12]
 8026e9a:	8812      	ldrh	r2, [r2, #0]
 8026e9c:	4413      	add	r3, r2
 8026e9e:	893a      	ldrh	r2, [r7, #8]
 8026ea0:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8026ea2:	687b      	ldr	r3, [r7, #4]
}
 8026ea4:	4618      	mov	r0, r3
 8026ea6:	371c      	adds	r7, #28
 8026ea8:	46bd      	mov	sp, r7
 8026eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026eae:	4770      	bx	lr
 8026eb0:	1ffe9c14 	.word	0x1ffe9c14
 8026eb4:	1ffe9c18 	.word	0x1ffe9c18
 8026eb8:	1ffe9c1c 	.word	0x1ffe9c1c

08026ebc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8026ebc:	b480      	push	{r7}
 8026ebe:	b089      	sub	sp, #36	; 0x24
 8026ec0:	af00      	add	r7, sp, #0
 8026ec2:	4603      	mov	r3, r0
 8026ec4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8026ec6:	88fb      	ldrh	r3, [r7, #6]
 8026ec8:	2b00      	cmp	r3, #0
 8026eca:	d101      	bne.n	8026ed0 <mem_malloc+0x14>
    return NULL;
 8026ecc:	2300      	movs	r3, #0
 8026ece:	e08c      	b.n	8026fea <mem_malloc+0x12e>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8026ed0:	88fb      	ldrh	r3, [r7, #6]
 8026ed2:	3303      	adds	r3, #3
 8026ed4:	b29b      	uxth	r3, r3
 8026ed6:	f023 0303 	bic.w	r3, r3, #3
 8026eda:	80fb      	strh	r3, [r7, #6]

  if(size < MIN_SIZE_ALIGNED) {
 8026edc:	88fb      	ldrh	r3, [r7, #6]
 8026ede:	2b0b      	cmp	r3, #11
 8026ee0:	d801      	bhi.n	8026ee6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8026ee2:	230c      	movs	r3, #12
 8026ee4:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8026ee6:	88fb      	ldrh	r3, [r7, #6]
 8026ee8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8026eec:	d901      	bls.n	8026ef2 <mem_malloc+0x36>
    return NULL;
 8026eee:	2300      	movs	r3, #0
 8026ef0:	e07b      	b.n	8026fea <mem_malloc+0x12e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8026ef2:	4b41      	ldr	r3, [pc, #260]	; (8026ff8 <mem_malloc+0x13c>)
 8026ef4:	681b      	ldr	r3, [r3, #0]
 8026ef6:	461a      	mov	r2, r3
 8026ef8:	4b40      	ldr	r3, [pc, #256]	; (8026ffc <mem_malloc+0x140>)
 8026efa:	681b      	ldr	r3, [r3, #0]
 8026efc:	1ad3      	subs	r3, r2, r3
 8026efe:	83fb      	strh	r3, [r7, #30]
 8026f00:	e06c      	b.n	8026fdc <mem_malloc+0x120>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8026f02:	4b3e      	ldr	r3, [pc, #248]	; (8026ffc <mem_malloc+0x140>)
 8026f04:	681a      	ldr	r2, [r3, #0]
 8026f06:	8bfb      	ldrh	r3, [r7, #30]
 8026f08:	4413      	add	r3, r2
 8026f0a:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8026f0c:	697b      	ldr	r3, [r7, #20]
 8026f0e:	791b      	ldrb	r3, [r3, #4]
 8026f10:	2b00      	cmp	r3, #0
 8026f12:	d15d      	bne.n	8026fd0 <mem_malloc+0x114>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8026f14:	697b      	ldr	r3, [r7, #20]
 8026f16:	881b      	ldrh	r3, [r3, #0]
 8026f18:	461a      	mov	r2, r3
 8026f1a:	8bfb      	ldrh	r3, [r7, #30]
 8026f1c:	1ad3      	subs	r3, r2, r3
 8026f1e:	f1a3 0208 	sub.w	r2, r3, #8
 8026f22:	88fb      	ldrh	r3, [r7, #6]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8026f24:	429a      	cmp	r2, r3
 8026f26:	d353      	bcc.n	8026fd0 <mem_malloc+0x114>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8026f28:	697b      	ldr	r3, [r7, #20]
 8026f2a:	881b      	ldrh	r3, [r3, #0]
 8026f2c:	461a      	mov	r2, r3
 8026f2e:	8bfb      	ldrh	r3, [r7, #30]
 8026f30:	1ad3      	subs	r3, r2, r3
 8026f32:	f1a3 0208 	sub.w	r2, r3, #8
 8026f36:	88fb      	ldrh	r3, [r7, #6]
 8026f38:	3314      	adds	r3, #20
 8026f3a:	429a      	cmp	r2, r3
 8026f3c:	d327      	bcc.n	8026f8e <mem_malloc+0xd2>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8026f3e:	8bfa      	ldrh	r2, [r7, #30]
 8026f40:	88fb      	ldrh	r3, [r7, #6]
 8026f42:	4413      	add	r3, r2
 8026f44:	b29b      	uxth	r3, r3
 8026f46:	3308      	adds	r3, #8
 8026f48:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8026f4a:	4b2c      	ldr	r3, [pc, #176]	; (8026ffc <mem_malloc+0x140>)
 8026f4c:	681a      	ldr	r2, [r3, #0]
 8026f4e:	8a7b      	ldrh	r3, [r7, #18]
 8026f50:	4413      	add	r3, r2
 8026f52:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8026f54:	68fb      	ldr	r3, [r7, #12]
 8026f56:	2200      	movs	r2, #0
 8026f58:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8026f5a:	697b      	ldr	r3, [r7, #20]
 8026f5c:	881a      	ldrh	r2, [r3, #0]
 8026f5e:	68fb      	ldr	r3, [r7, #12]
 8026f60:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8026f62:	68fb      	ldr	r3, [r7, #12]
 8026f64:	8bfa      	ldrh	r2, [r7, #30]
 8026f66:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8026f68:	697b      	ldr	r3, [r7, #20]
 8026f6a:	8a7a      	ldrh	r2, [r7, #18]
 8026f6c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8026f6e:	697b      	ldr	r3, [r7, #20]
 8026f70:	2201      	movs	r2, #1
 8026f72:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8026f74:	68fb      	ldr	r3, [r7, #12]
 8026f76:	881b      	ldrh	r3, [r3, #0]
 8026f78:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8026f7c:	d00a      	beq.n	8026f94 <mem_malloc+0xd8>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8026f7e:	4b1f      	ldr	r3, [pc, #124]	; (8026ffc <mem_malloc+0x140>)
 8026f80:	681b      	ldr	r3, [r3, #0]
 8026f82:	68fa      	ldr	r2, [r7, #12]
 8026f84:	8812      	ldrh	r2, [r2, #0]
 8026f86:	4413      	add	r3, r2
 8026f88:	8a7a      	ldrh	r2, [r7, #18]
 8026f8a:	805a      	strh	r2, [r3, #2]
 8026f8c:	e002      	b.n	8026f94 <mem_malloc+0xd8>
           * take care of this).
           * -> near fit or excact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8026f8e:	697b      	ldr	r3, [r7, #20]
 8026f90:	2201      	movs	r2, #1
 8026f92:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8026f94:	4b18      	ldr	r3, [pc, #96]	; (8026ff8 <mem_malloc+0x13c>)
 8026f96:	681b      	ldr	r3, [r3, #0]
 8026f98:	697a      	ldr	r2, [r7, #20]
 8026f9a:	429a      	cmp	r2, r3
 8026f9c:	d115      	bne.n	8026fca <mem_malloc+0x10e>
          struct mem *cur = lfree;
 8026f9e:	4b16      	ldr	r3, [pc, #88]	; (8026ff8 <mem_malloc+0x13c>)
 8026fa0:	681b      	ldr	r3, [r3, #0]
 8026fa2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8026fa4:	e005      	b.n	8026fb2 <mem_malloc+0xf6>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8026fa6:	4b15      	ldr	r3, [pc, #84]	; (8026ffc <mem_malloc+0x140>)
 8026fa8:	681b      	ldr	r3, [r3, #0]
 8026faa:	69ba      	ldr	r2, [r7, #24]
 8026fac:	8812      	ldrh	r2, [r2, #0]
 8026fae:	4413      	add	r3, r2
 8026fb0:	61bb      	str	r3, [r7, #24]
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8026fb2:	69bb      	ldr	r3, [r7, #24]
 8026fb4:	791b      	ldrb	r3, [r3, #4]
 8026fb6:	2b00      	cmp	r3, #0
 8026fb8:	d004      	beq.n	8026fc4 <mem_malloc+0x108>
 8026fba:	4b11      	ldr	r3, [pc, #68]	; (8027000 <mem_malloc+0x144>)
 8026fbc:	681b      	ldr	r3, [r3, #0]
 8026fbe:	69ba      	ldr	r2, [r7, #24]
 8026fc0:	429a      	cmp	r2, r3
 8026fc2:	d1f0      	bne.n	8026fa6 <mem_malloc+0xea>
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
          }
          lfree = cur;
 8026fc4:	4a0c      	ldr	r2, [pc, #48]	; (8026ff8 <mem_malloc+0x13c>)
 8026fc6:	69bb      	ldr	r3, [r7, #24]
 8026fc8:	6013      	str	r3, [r2, #0]
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8026fca:	697b      	ldr	r3, [r7, #20]
 8026fcc:	3308      	adds	r3, #8
 8026fce:	e00c      	b.n	8026fea <mem_malloc+0x12e>

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8026fd0:	4b0a      	ldr	r3, [pc, #40]	; (8026ffc <mem_malloc+0x140>)
 8026fd2:	681a      	ldr	r2, [r3, #0]
 8026fd4:	8bfb      	ldrh	r3, [r7, #30]
 8026fd6:	4413      	add	r3, r2
 8026fd8:	881b      	ldrh	r3, [r3, #0]
 8026fda:	83fb      	strh	r3, [r7, #30]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8026fdc:	8bfa      	ldrh	r2, [r7, #30]
 8026fde:	88fb      	ldrh	r3, [r7, #6]
 8026fe0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8026fe4:	429a      	cmp	r2, r3
 8026fe6:	db8c      	blt.n	8026f02 <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8026fe8:	2300      	movs	r3, #0
}
 8026fea:	4618      	mov	r0, r3
 8026fec:	3724      	adds	r7, #36	; 0x24
 8026fee:	46bd      	mov	sp, r7
 8026ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ff4:	4770      	bx	lr
 8026ff6:	bf00      	nop
 8026ff8:	1ffe9c1c 	.word	0x1ffe9c1c
 8026ffc:	1ffe9c14 	.word	0x1ffe9c14
 8027000:	1ffe9c18 	.word	0x1ffe9c18

08027004 <memp_init>:
 * 
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8027004:	b480      	push	{r7}
 8027006:	b083      	sub	sp, #12
 8027008:	af00      	add	r7, sp, #0
  struct memp *memp;
  u16_t i, j;

  for (i = 0; i < MEMP_MAX; ++i) {
 802700a:	2300      	movs	r3, #0
 802700c:	807b      	strh	r3, [r7, #2]
 802700e:	e002      	b.n	8027016 <memp_init+0x12>
 8027010:	887b      	ldrh	r3, [r7, #2]
 8027012:	3301      	adds	r3, #1
 8027014:	807b      	strh	r3, [r7, #2]
 8027016:	887b      	ldrh	r3, [r7, #2]
 8027018:	2b05      	cmp	r3, #5
 802701a:	d9f9      	bls.n	8027010 <memp_init+0xc>
    MEMP_STATS_AVAIL(err, i, 0);
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
  }

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
 802701c:	4b1b      	ldr	r3, [pc, #108]	; (802708c <memp_init+0x88>)
 802701e:	3303      	adds	r3, #3
 8027020:	f023 0303 	bic.w	r3, r3, #3
 8027024:	607b      	str	r3, [r7, #4]
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
 8027026:	2300      	movs	r3, #0
 8027028:	807b      	strh	r3, [r7, #2]
 802702a:	e027      	b.n	802707c <memp_init+0x78>
    memp_tab[i] = NULL;
 802702c:	887b      	ldrh	r3, [r7, #2]
 802702e:	4a18      	ldr	r2, [pc, #96]	; (8027090 <memp_init+0x8c>)
 8027030:	2100      	movs	r1, #0
 8027032:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
 8027036:	2300      	movs	r3, #0
 8027038:	803b      	strh	r3, [r7, #0]
 802703a:	e015      	b.n	8027068 <memp_init+0x64>
      memp->next = memp_tab[i];
 802703c:	887b      	ldrh	r3, [r7, #2]
 802703e:	4a14      	ldr	r2, [pc, #80]	; (8027090 <memp_init+0x8c>)
 8027040:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8027044:	687b      	ldr	r3, [r7, #4]
 8027046:	601a      	str	r2, [r3, #0]
      memp_tab[i] = memp;
 8027048:	887b      	ldrh	r3, [r7, #2]
 802704a:	4911      	ldr	r1, [pc, #68]	; (8027090 <memp_init+0x8c>)
 802704c:	687a      	ldr	r2, [r7, #4]
 802704e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
 8027052:	887b      	ldrh	r3, [r7, #2]
 8027054:	4a0f      	ldr	r2, [pc, #60]	; (8027094 <memp_init+0x90>)
 8027056:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802705a:	461a      	mov	r2, r3
 802705c:	687b      	ldr	r3, [r7, #4]
 802705e:	4413      	add	r3, r2
 8027060:	607b      	str	r3, [r7, #4]
    memp_tab[i] = NULL;
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
 8027062:	883b      	ldrh	r3, [r7, #0]
 8027064:	3301      	adds	r3, #1
 8027066:	803b      	strh	r3, [r7, #0]
 8027068:	887b      	ldrh	r3, [r7, #2]
 802706a:	4a0b      	ldr	r2, [pc, #44]	; (8027098 <memp_init+0x94>)
 802706c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8027070:	883a      	ldrh	r2, [r7, #0]
 8027072:	429a      	cmp	r2, r3
 8027074:	d3e2      	bcc.n	802703c <memp_init+0x38>

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
 8027076:	887b      	ldrh	r3, [r7, #2]
 8027078:	3301      	adds	r3, #1
 802707a:	807b      	strh	r3, [r7, #2]
 802707c:	887b      	ldrh	r3, [r7, #2]
 802707e:	2b05      	cmp	r3, #5
 8027080:	d9d4      	bls.n	802702c <memp_init+0x28>
#if MEMP_OVERFLOW_CHECK
  memp_overflow_init();
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK */
}
 8027082:	370c      	adds	r7, #12
 8027084:	46bd      	mov	sp, r7
 8027086:	f85d 7b04 	ldr.w	r7, [sp], #4
 802708a:	4770      	bx	lr
 802708c:	1ffe9c38 	.word	0x1ffe9c38
 8027090:	1ffe9c20 	.word	0x1ffe9c20
 8027094:	0802a008 	.word	0x0802a008
 8027098:	0802a014 	.word	0x0802a014

0802709c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 802709c:	b480      	push	{r7}
 802709e:	b085      	sub	sp, #20
 80270a0:	af00      	add	r7, sp, #0
 80270a2:	4603      	mov	r3, r0
 80270a4:	71fb      	strb	r3, [r7, #7]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);
 
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80270a6:	79fb      	ldrb	r3, [r7, #7]
 80270a8:	2b05      	cmp	r3, #5
 80270aa:	d902      	bls.n	80270b2 <memp_malloc+0x16>
 80270ac:	be00      	bkpt	0x0000
 80270ae:	2300      	movs	r3, #0
 80270b0:	e00e      	b.n	80270d0 <memp_malloc+0x34>
  SYS_ARCH_PROTECT(old_level);
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

  memp = memp_tab[type];
 80270b2:	79fb      	ldrb	r3, [r7, #7]
 80270b4:	4a09      	ldr	r2, [pc, #36]	; (80270dc <memp_malloc+0x40>)
 80270b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80270ba:	60fb      	str	r3, [r7, #12]
  
  if (memp != NULL) {
 80270bc:	68fb      	ldr	r3, [r7, #12]
 80270be:	2b00      	cmp	r3, #0
 80270c0:	d005      	beq.n	80270ce <memp_malloc+0x32>
    memp_tab[type] = memp->next;
 80270c2:	79fb      	ldrb	r3, [r7, #7]
 80270c4:	68fa      	ldr	r2, [r7, #12]
 80270c6:	6812      	ldr	r2, [r2, #0]
 80270c8:	4904      	ldr	r1, [pc, #16]	; (80270dc <memp_malloc+0x40>)
 80270ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    MEMP_STATS_INC(err, type);
  }

  SYS_ARCH_UNPROTECT(old_level);

  return memp;
 80270ce:	68fb      	ldr	r3, [r7, #12]
}
 80270d0:	4618      	mov	r0, r3
 80270d2:	3714      	adds	r7, #20
 80270d4:	46bd      	mov	sp, r7
 80270d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80270da:	4770      	bx	lr
 80270dc:	1ffe9c20 	.word	0x1ffe9c20

080270e0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80270e0:	b480      	push	{r7}
 80270e2:	b085      	sub	sp, #20
 80270e4:	af00      	add	r7, sp, #0
 80270e6:	4603      	mov	r3, r0
 80270e8:	6039      	str	r1, [r7, #0]
 80270ea:	71fb      	strb	r3, [r7, #7]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
 80270ec:	683b      	ldr	r3, [r7, #0]
 80270ee:	2b00      	cmp	r3, #0
 80270f0:	d100      	bne.n	80270f4 <memp_free+0x14>
    return;
 80270f2:	e00c      	b.n	802710e <memp_free+0x2e>
  }
  LWIP_ASSERT("memp_free: mem properly aligned",
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 80270f4:	683b      	ldr	r3, [r7, #0]
 80270f6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
#endif /* MEMP_OVERFLOW_CHECK */

  MEMP_STATS_DEC(used, type); 
  
  memp->next = memp_tab[type]; 
 80270f8:	79fb      	ldrb	r3, [r7, #7]
 80270fa:	4a07      	ldr	r2, [pc, #28]	; (8027118 <memp_free+0x38>)
 80270fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8027100:	68fb      	ldr	r3, [r7, #12]
 8027102:	601a      	str	r2, [r3, #0]
  memp_tab[type] = memp;
 8027104:	79fb      	ldrb	r3, [r7, #7]
 8027106:	4904      	ldr	r1, [pc, #16]	; (8027118 <memp_free+0x38>)
 8027108:	68fa      	ldr	r2, [r7, #12]
 802710a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity());
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
}
 802710e:	3714      	adds	r7, #20
 8027110:	46bd      	mov	sp, r7
 8027112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027116:	4770      	bx	lr
 8027118:	1ffe9c20 	.word	0x1ffe9c20

0802711c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 802711c:	b480      	push	{r7}
 802711e:	af00      	add	r7, sp, #0
  netif_add(&loop_netif, &loop_ipaddr, &loop_netmask, &loop_gw, NULL, netif_loopif_init, tcpip_input);
#endif /* NO_SYS */
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8027120:	46bd      	mov	sp, r7
 8027122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027126:	4770      	bx	lr

08027128 <netif_add>:
 * @return netif, or NULL if failed.
 */
struct netif *
netif_add(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
  ip_addr_t *gw, void *state, netif_init_fn init, netif_input_fn input)
{
 8027128:	b580      	push	{r7, lr}
 802712a:	b084      	sub	sp, #16
 802712c:	af00      	add	r7, sp, #0
 802712e:	60f8      	str	r0, [r7, #12]
 8027130:	60b9      	str	r1, [r7, #8]
 8027132:	607a      	str	r2, [r7, #4]
 8027134:	603b      	str	r3, [r7, #0]

  LWIP_ASSERT("No init function given", init != NULL);

  /* reset new interface configuration state */
  ip_addr_set_zero(&netif->ip_addr);
 8027136:	68fb      	ldr	r3, [r7, #12]
 8027138:	2200      	movs	r2, #0
 802713a:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero(&netif->netmask);
 802713c:	68fb      	ldr	r3, [r7, #12]
 802713e:	2200      	movs	r2, #0
 8027140:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero(&netif->gw);
 8027142:	68fb      	ldr	r3, [r7, #12]
 8027144:	2200      	movs	r2, #0
 8027146:	60da      	str	r2, [r3, #12]
  netif->flags = 0;
 8027148:	68fb      	ldr	r3, [r7, #12]
 802714a:	2200      	movs	r2, #0
 802714c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_AUTOIP */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8027150:	68fb      	ldr	r3, [r7, #12]
 8027152:	2200      	movs	r2, #0
 8027154:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
 8027156:	68fb      	ldr	r3, [r7, #12]
 8027158:	2200      	movs	r2, #0
 802715a:	635a      	str	r2, [r3, #52]	; 0x34
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 802715c:	68fb      	ldr	r3, [r7, #12]
 802715e:	69ba      	ldr	r2, [r7, #24]
 8027160:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 8027162:	4b18      	ldr	r3, [pc, #96]	; (80271c4 <netif_add+0x9c>)
 8027164:	781b      	ldrb	r3, [r3, #0]
 8027166:	1c5a      	adds	r2, r3, #1
 8027168:	b2d1      	uxtb	r1, r2
 802716a:	4a16      	ldr	r2, [pc, #88]	; (80271c4 <netif_add+0x9c>)
 802716c:	7011      	strb	r1, [r2, #0]
 802716e:	68fa      	ldr	r2, [r7, #12]
 8027170:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
  netif->input = input;
 8027174:	68fb      	ldr	r3, [r7, #12]
 8027176:	6a3a      	ldr	r2, [r7, #32]
 8027178:	611a      	str	r2, [r3, #16]
  NETIF_SET_HWADDRHINT(netif, NULL);
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

  netif_set_addr(netif, ipaddr, netmask, gw);
 802717a:	68f8      	ldr	r0, [r7, #12]
 802717c:	68b9      	ldr	r1, [r7, #8]
 802717e:	687a      	ldr	r2, [r7, #4]
 8027180:	683b      	ldr	r3, [r7, #0]
 8027182:	f000 f823 	bl	80271cc <netif_set_addr>

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8027186:	69fb      	ldr	r3, [r7, #28]
 8027188:	68f8      	ldr	r0, [r7, #12]
 802718a:	4798      	blx	r3
 802718c:	4603      	mov	r3, r0
 802718e:	2b00      	cmp	r3, #0
 8027190:	d001      	beq.n	8027196 <netif_add+0x6e>
    return NULL;
 8027192:	2300      	movs	r3, #0
 8027194:	e011      	b.n	80271ba <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8027196:	4b0c      	ldr	r3, [pc, #48]	; (80271c8 <netif_add+0xa0>)
 8027198:	681a      	ldr	r2, [r3, #0]
 802719a:	68fb      	ldr	r3, [r7, #12]
 802719c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 802719e:	4a0a      	ldr	r2, [pc, #40]	; (80271c8 <netif_add+0xa0>)
 80271a0:	68fb      	ldr	r3, [r7, #12]
 80271a2:	6013      	str	r3, [r2, #0]
  snmp_inc_iflist();

#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
 80271a4:	68fb      	ldr	r3, [r7, #12]
 80271a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80271aa:	b2db      	uxtb	r3, r3
 80271ac:	b25b      	sxtb	r3, r3
 80271ae:	2b00      	cmp	r3, #0
 80271b0:	da02      	bge.n	80271b8 <netif_add+0x90>
    igmp_start(netif);
 80271b2:	68f8      	ldr	r0, [r7, #12]
 80271b4:	f7fe fdf0 	bl	8025d98 <igmp_start>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
  ip_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip_addr_debug_print(NETIF_DEBUG, gw);
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 80271b8:	68fb      	ldr	r3, [r7, #12]
}
 80271ba:	4618      	mov	r0, r3
 80271bc:	3710      	adds	r7, #16
 80271be:	46bd      	mov	sp, r7
 80271c0:	bd80      	pop	{r7, pc}
 80271c2:	bf00      	nop
 80271c4:	1fff004c 	.word	0x1fff004c
 80271c8:	1fff077c 	.word	0x1fff077c

080271cc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
    ip_addr_t *gw)
{
 80271cc:	b580      	push	{r7, lr}
 80271ce:	b084      	sub	sp, #16
 80271d0:	af00      	add	r7, sp, #0
 80271d2:	60f8      	str	r0, [r7, #12]
 80271d4:	60b9      	str	r1, [r7, #8]
 80271d6:	607a      	str	r2, [r7, #4]
 80271d8:	603b      	str	r3, [r7, #0]
  netif_set_ipaddr(netif, ipaddr);
 80271da:	68f8      	ldr	r0, [r7, #12]
 80271dc:	68b9      	ldr	r1, [r7, #8]
 80271de:	f000 f80b 	bl	80271f8 <netif_set_ipaddr>
  netif_set_netmask(netif, netmask);
 80271e2:	68f8      	ldr	r0, [r7, #12]
 80271e4:	6879      	ldr	r1, [r7, #4]
 80271e6:	f000 f82f 	bl	8027248 <netif_set_netmask>
  netif_set_gw(netif, gw);
 80271ea:	68f8      	ldr	r0, [r7, #12]
 80271ec:	6839      	ldr	r1, [r7, #0]
 80271ee:	f000 f817 	bl	8027220 <netif_set_gw>
}
 80271f2:	3710      	adds	r7, #16
 80271f4:	46bd      	mov	sp, r7
 80271f6:	bd80      	pop	{r7, pc}

080271f8 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)
{
 80271f8:	b480      	push	{r7}
 80271fa:	b083      	sub	sp, #12
 80271fc:	af00      	add	r7, sp, #0
 80271fe:	6078      	str	r0, [r7, #4]
 8027200:	6039      	str	r1, [r7, #0]
  }
#endif
  snmp_delete_ipaddridx_tree(netif);
  snmp_delete_iprteidx_tree(0,netif);
  /* set new IP address to netif */
  ip_addr_set(&(netif->ip_addr), ipaddr);
 8027202:	683b      	ldr	r3, [r7, #0]
 8027204:	2b00      	cmp	r3, #0
 8027206:	d002      	beq.n	802720e <netif_set_ipaddr+0x16>
 8027208:	683b      	ldr	r3, [r7, #0]
 802720a:	681b      	ldr	r3, [r3, #0]
 802720c:	e000      	b.n	8027210 <netif_set_ipaddr+0x18>
 802720e:	2300      	movs	r3, #0
 8027210:	687a      	ldr	r2, [r7, #4]
 8027212:	6053      	str	r3, [r2, #4]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->ip_addr),
    ip4_addr2_16(&netif->ip_addr),
    ip4_addr3_16(&netif->ip_addr),
    ip4_addr4_16(&netif->ip_addr)));
}
 8027214:	370c      	adds	r7, #12
 8027216:	46bd      	mov	sp, r7
 8027218:	f85d 7b04 	ldr.w	r7, [sp], #4
 802721c:	4770      	bx	lr
 802721e:	bf00      	nop

08027220 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, ip_addr_t *gw)
{
 8027220:	b480      	push	{r7}
 8027222:	b083      	sub	sp, #12
 8027224:	af00      	add	r7, sp, #0
 8027226:	6078      	str	r0, [r7, #4]
 8027228:	6039      	str	r1, [r7, #0]
  ip_addr_set(&(netif->gw), gw);
 802722a:	683b      	ldr	r3, [r7, #0]
 802722c:	2b00      	cmp	r3, #0
 802722e:	d002      	beq.n	8027236 <netif_set_gw+0x16>
 8027230:	683b      	ldr	r3, [r7, #0]
 8027232:	681b      	ldr	r3, [r3, #0]
 8027234:	e000      	b.n	8027238 <netif_set_gw+0x18>
 8027236:	2300      	movs	r3, #0
 8027238:	687a      	ldr	r2, [r7, #4]
 802723a:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->gw),
    ip4_addr2_16(&netif->gw),
    ip4_addr3_16(&netif->gw),
    ip4_addr4_16(&netif->gw)));
}
 802723c:	370c      	adds	r7, #12
 802723e:	46bd      	mov	sp, r7
 8027240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027244:	4770      	bx	lr
 8027246:	bf00      	nop

08027248 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
{
 8027248:	b480      	push	{r7}
 802724a:	b083      	sub	sp, #12
 802724c:	af00      	add	r7, sp, #0
 802724e:	6078      	str	r0, [r7, #4]
 8027250:	6039      	str	r1, [r7, #0]
  snmp_delete_iprteidx_tree(0, netif);
  /* set new netmask to netif */
  ip_addr_set(&(netif->netmask), netmask);
 8027252:	683b      	ldr	r3, [r7, #0]
 8027254:	2b00      	cmp	r3, #0
 8027256:	d002      	beq.n	802725e <netif_set_netmask+0x16>
 8027258:	683b      	ldr	r3, [r7, #0]
 802725a:	681b      	ldr	r3, [r3, #0]
 802725c:	e000      	b.n	8027260 <netif_set_netmask+0x18>
 802725e:	2300      	movs	r3, #0
 8027260:	687a      	ldr	r2, [r7, #4]
 8027262:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->netmask),
    ip4_addr2_16(&netif->netmask),
    ip4_addr3_16(&netif->netmask),
    ip4_addr4_16(&netif->netmask)));
}
 8027264:	370c      	adds	r7, #12
 8027266:	46bd      	mov	sp, r7
 8027268:	f85d 7b04 	ldr.w	r7, [sp], #4
 802726c:	4770      	bx	lr
 802726e:	bf00      	nop

08027270 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8027270:	b480      	push	{r7}
 8027272:	b083      	sub	sp, #12
 8027274:	af00      	add	r7, sp, #0
 8027276:	6078      	str	r0, [r7, #4]
    snmp_delete_iprteidx_tree(1, netif);
  } else {
    /* install default route */
    snmp_insert_iprteidx_tree(1, netif);
  }
  netif_default = netif;
 8027278:	4a03      	ldr	r2, [pc, #12]	; (8027288 <netif_set_default+0x18>)
 802727a:	687b      	ldr	r3, [r7, #4]
 802727c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 802727e:	370c      	adds	r7, #12
 8027280:	46bd      	mov	sp, r7
 8027282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027286:	4770      	bx	lr
 8027288:	1fff0780 	.word	0x1fff0780

0802728c <netif_set_up>:
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_up(struct netif *netif)
{
 802728c:	b580      	push	{r7, lr}
 802728e:	b082      	sub	sp, #8
 8027290:	af00      	add	r7, sp, #0
 8027292:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8027294:	687b      	ldr	r3, [r7, #4]
 8027296:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802729a:	f003 0301 	and.w	r3, r3, #1
 802729e:	2b00      	cmp	r3, #0
 80272a0:	d126      	bne.n	80272f0 <netif_set_up+0x64>
    netif->flags |= NETIF_FLAG_UP;
 80272a2:	687b      	ldr	r3, [r7, #4]
 80272a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80272a8:	f043 0301 	orr.w	r3, r3, #1
 80272ac:	b2da      	uxtb	r2, r3
 80272ae:	687b      	ldr	r3, [r7, #4]
 80272b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    snmp_get_sysuptime(&netif->ts);
#endif /* LWIP_SNMP */

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 80272b4:	687b      	ldr	r3, [r7, #4]
 80272b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80272ba:	f003 0310 	and.w	r3, r3, #16
 80272be:	2b00      	cmp	r3, #0
 80272c0:	d016      	beq.n	80272f0 <netif_set_up+0x64>
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80272c2:	687b      	ldr	r3, [r7, #4]
 80272c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80272c8:	f003 0320 	and.w	r3, r3, #32
 80272cc:	2b00      	cmp	r3, #0
 80272ce:	d005      	beq.n	80272dc <netif_set_up+0x50>
        etharp_gratuitous(netif);
 80272d0:	687b      	ldr	r3, [r7, #4]
 80272d2:	3304      	adds	r3, #4
 80272d4:	6878      	ldr	r0, [r7, #4]
 80272d6:	4619      	mov	r1, r3
 80272d8:	f7fe fb5e 	bl	8025998 <etharp_request>
      }
#endif /* LWIP_ARP */

#if LWIP_IGMP
      /* resend IGMP memberships */
      if (netif->flags & NETIF_FLAG_IGMP) {
 80272dc:	687b      	ldr	r3, [r7, #4]
 80272de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80272e2:	b2db      	uxtb	r3, r3
 80272e4:	b25b      	sxtb	r3, r3
 80272e6:	2b00      	cmp	r3, #0
 80272e8:	da02      	bge.n	80272f0 <netif_set_up+0x64>
        igmp_report_groups( netif);
 80272ea:	6878      	ldr	r0, [r7, #4]
 80272ec:	f7fe fd7e 	bl	8025dec <igmp_report_groups>
      }
#endif /* LWIP_IGMP */
    }
  }
}
 80272f0:	3708      	adds	r7, #8
 80272f2:	46bd      	mov	sp, r7
 80272f4:	bd80      	pop	{r7, pc}
 80272f6:	bf00      	nop

080272f8 <netif_set_down>:
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_down(struct netif *netif)
{
 80272f8:	b580      	push	{r7, lr}
 80272fa:	b082      	sub	sp, #8
 80272fc:	af00      	add	r7, sp, #0
 80272fe:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8027300:	687b      	ldr	r3, [r7, #4]
 8027302:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8027306:	f003 0301 	and.w	r3, r3, #1
 802730a:	2b00      	cmp	r3, #0
 802730c:	d012      	beq.n	8027334 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 802730e:	687b      	ldr	r3, [r7, #4]
 8027310:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8027314:	f023 0301 	bic.w	r3, r3, #1
 8027318:	b2da      	uxtb	r2, r3
 802731a:	687b      	ldr	r3, [r7, #4]
 802731c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#if LWIP_SNMP
    snmp_get_sysuptime(&netif->ts);
#endif

#if LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8027320:	687b      	ldr	r3, [r7, #4]
 8027322:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8027326:	f003 0320 	and.w	r3, r3, #32
 802732a:	2b00      	cmp	r3, #0
 802732c:	d002      	beq.n	8027334 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 802732e:	6878      	ldr	r0, [r7, #4]
 8027330:	f7fd ffb4 	bl	802529c <etharp_cleanup_netif>
    }
#endif /* LWIP_ARP */
    NETIF_STATUS_CALLBACK(netif);
  }
}
 8027334:	3708      	adds	r7, #8
 8027336:	46bd      	mov	sp, r7
 8027338:	bd80      	pop	{r7, pc}
 802733a:	bf00      	nop

0802733c <netif_set_link_up>:

/**
 * Called by a driver when its link goes up
 */
void netif_set_link_up(struct netif *netif )
{
 802733c:	b580      	push	{r7, lr}
 802733e:	b082      	sub	sp, #8
 8027340:	af00      	add	r7, sp, #0
 8027342:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8027344:	687b      	ldr	r3, [r7, #4]
 8027346:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802734a:	f003 0310 	and.w	r3, r3, #16
 802734e:	2b00      	cmp	r3, #0
 8027350:	d12e      	bne.n	80273b0 <netif_set_link_up+0x74>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8027352:	687b      	ldr	r3, [r7, #4]
 8027354:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8027358:	f043 0310 	orr.w	r3, r3, #16
 802735c:	b2da      	uxtb	r2, r3
 802735e:	687b      	ldr	r3, [r7, #4]
 8027360:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    if (netif->autoip) {
      autoip_network_changed(netif);
    }
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 8027364:	687b      	ldr	r3, [r7, #4]
 8027366:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802736a:	f003 0301 	and.w	r3, r3, #1
 802736e:	2b00      	cmp	r3, #0
 8027370:	d016      	beq.n	80273a0 <netif_set_link_up+0x64>
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & NETIF_FLAG_ETHARP) {
 8027372:	687b      	ldr	r3, [r7, #4]
 8027374:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8027378:	f003 0320 	and.w	r3, r3, #32
 802737c:	2b00      	cmp	r3, #0
 802737e:	d005      	beq.n	802738c <netif_set_link_up+0x50>
        etharp_gratuitous(netif);
 8027380:	687b      	ldr	r3, [r7, #4]
 8027382:	3304      	adds	r3, #4
 8027384:	6878      	ldr	r0, [r7, #4]
 8027386:	4619      	mov	r1, r3
 8027388:	f7fe fb06 	bl	8025998 <etharp_request>
      }
#endif /* LWIP_ARP */

#if LWIP_IGMP
      /* resend IGMP memberships */
      if (netif->flags & NETIF_FLAG_IGMP) {
 802738c:	687b      	ldr	r3, [r7, #4]
 802738e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8027392:	b2db      	uxtb	r3, r3
 8027394:	b25b      	sxtb	r3, r3
 8027396:	2b00      	cmp	r3, #0
 8027398:	da02      	bge.n	80273a0 <netif_set_link_up+0x64>
        igmp_report_groups( netif);
 802739a:	6878      	ldr	r0, [r7, #4]
 802739c:	f7fe fd26 	bl	8025dec <igmp_report_groups>
      }
#endif /* LWIP_IGMP */
    }
    NETIF_LINK_CALLBACK(netif);
 80273a0:	687b      	ldr	r3, [r7, #4]
 80273a2:	69db      	ldr	r3, [r3, #28]
 80273a4:	2b00      	cmp	r3, #0
 80273a6:	d003      	beq.n	80273b0 <netif_set_link_up+0x74>
 80273a8:	687b      	ldr	r3, [r7, #4]
 80273aa:	69db      	ldr	r3, [r3, #28]
 80273ac:	6878      	ldr	r0, [r7, #4]
 80273ae:	4798      	blx	r3
  }
}
 80273b0:	3708      	adds	r7, #8
 80273b2:	46bd      	mov	sp, r7
 80273b4:	bd80      	pop	{r7, pc}
 80273b6:	bf00      	nop

080273b8 <netif_set_link_down>:

/**
 * Called by a driver when its link goes down
 */
void netif_set_link_down(struct netif *netif )
{
 80273b8:	b580      	push	{r7, lr}
 80273ba:	b082      	sub	sp, #8
 80273bc:	af00      	add	r7, sp, #0
 80273be:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80273c0:	687b      	ldr	r3, [r7, #4]
 80273c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80273c6:	f003 0310 	and.w	r3, r3, #16
 80273ca:	2b00      	cmp	r3, #0
 80273cc:	d010      	beq.n	80273f0 <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 80273ce:	687b      	ldr	r3, [r7, #4]
 80273d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80273d4:	f023 0310 	bic.w	r3, r3, #16
 80273d8:	b2da      	uxtb	r2, r3
 80273da:	687b      	ldr	r3, [r7, #4]
 80273dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80273e0:	687b      	ldr	r3, [r7, #4]
 80273e2:	69db      	ldr	r3, [r3, #28]
 80273e4:	2b00      	cmp	r3, #0
 80273e6:	d003      	beq.n	80273f0 <netif_set_link_down+0x38>
 80273e8:	687b      	ldr	r3, [r7, #4]
 80273ea:	69db      	ldr	r3, [r3, #28]
 80273ec:	6878      	ldr	r0, [r7, #4]
 80273ee:	4798      	blx	r3
  }
}
 80273f0:	3708      	adds	r7, #8
 80273f2:	46bd      	mov	sp, r7
 80273f4:	bd80      	pop	{r7, pc}
 80273f6:	bf00      	nop

080273f8 <netif_set_link_callback>:
#if LWIP_NETIF_LINK_CALLBACK
/**
 * Set callback to be called when link is brought up/down
 */
void netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80273f8:	b480      	push	{r7}
 80273fa:	b083      	sub	sp, #12
 80273fc:	af00      	add	r7, sp, #0
 80273fe:	6078      	str	r0, [r7, #4]
 8027400:	6039      	str	r1, [r7, #0]
  if (netif) {
 8027402:	687b      	ldr	r3, [r7, #4]
 8027404:	2b00      	cmp	r3, #0
 8027406:	d002      	beq.n	802740e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8027408:	687b      	ldr	r3, [r7, #4]
 802740a:	683a      	ldr	r2, [r7, #0]
 802740c:	61da      	str	r2, [r3, #28]
  }
}
 802740e:	370c      	adds	r7, #12
 8027410:	46bd      	mov	sp, r7
 8027412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027416:	4770      	bx	lr

08027418 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8027418:	b580      	push	{r7, lr}
 802741a:	b088      	sub	sp, #32
 802741c:	af00      	add	r7, sp, #0
 802741e:	4603      	mov	r3, r0
 8027420:	71fb      	strb	r3, [r7, #7]
 8027422:	460b      	mov	r3, r1
 8027424:	80bb      	strh	r3, [r7, #4]
 8027426:	4613      	mov	r3, r2
 8027428:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 802742a:	79fb      	ldrb	r3, [r7, #7]
 802742c:	2b03      	cmp	r3, #3
 802742e:	d817      	bhi.n	8027460 <pbuf_alloc+0x48>
 8027430:	a201      	add	r2, pc, #4	; (adr r2, 8027438 <pbuf_alloc+0x20>)
 8027432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027436:	bf00      	nop
 8027438:	08027449 	.word	0x08027449
 802743c:	0802744f 	.word	0x0802744f
 8027440:	08027455 	.word	0x08027455
 8027444:	0802745b 	.word	0x0802745b
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8027448:	2338      	movs	r3, #56	; 0x38
 802744a:	82fb      	strh	r3, [r7, #22]
    break;
 802744c:	e00a      	b.n	8027464 <pbuf_alloc+0x4c>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
 802744e:	2324      	movs	r3, #36	; 0x24
 8027450:	82fb      	strh	r3, [r7, #22]
    break;
 8027452:	e007      	b.n	8027464 <pbuf_alloc+0x4c>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_HLEN;
 8027454:	2310      	movs	r3, #16
 8027456:	82fb      	strh	r3, [r7, #22]
    break;
 8027458:	e004      	b.n	8027464 <pbuf_alloc+0x4c>
  case PBUF_RAW:
    offset = 0;
 802745a:	2300      	movs	r3, #0
 802745c:	82fb      	strh	r3, [r7, #22]
    break;
 802745e:	e001      	b.n	8027464 <pbuf_alloc+0x4c>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
    return NULL;
 8027460:	2300      	movs	r3, #0
 8027462:	e0cf      	b.n	8027604 <pbuf_alloc+0x1ec>
  }

  switch (type) {
 8027464:	79bb      	ldrb	r3, [r7, #6]
 8027466:	2b03      	cmp	r3, #3
 8027468:	f200 80c3 	bhi.w	80275f2 <pbuf_alloc+0x1da>
 802746c:	a201      	add	r2, pc, #4	; (adr r2, 8027474 <pbuf_alloc+0x5c>)
 802746e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027472:	bf00      	nop
 8027474:	08027561 	.word	0x08027561
 8027478:	080275bf 	.word	0x080275bf
 802747c:	080275bf 	.word	0x080275bf
 8027480:	08027485 	.word	0x08027485
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8027484:	2005      	movs	r0, #5
 8027486:	f7ff fe09 	bl	802709c <memp_malloc>
 802748a:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 802748c:	69fb      	ldr	r3, [r7, #28]
 802748e:	2b00      	cmp	r3, #0
 8027490:	d101      	bne.n	8027496 <pbuf_alloc+0x7e>
      PBUF_POOL_IS_EMPTY();
      return NULL;
 8027492:	2300      	movs	r3, #0
 8027494:	e0b6      	b.n	8027604 <pbuf_alloc+0x1ec>
    }
    p->type = type;
 8027496:	69fb      	ldr	r3, [r7, #28]
 8027498:	79ba      	ldrb	r2, [r7, #6]
 802749a:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 802749c:	69fb      	ldr	r3, [r7, #28]
 802749e:	2200      	movs	r2, #0
 80274a0:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80274a2:	8afb      	ldrh	r3, [r7, #22]
 80274a4:	3310      	adds	r3, #16
 80274a6:	69fa      	ldr	r2, [r7, #28]
 80274a8:	4413      	add	r3, r2
 80274aa:	3303      	adds	r3, #3
 80274ac:	f023 0303 	bic.w	r3, r3, #3
 80274b0:	461a      	mov	r2, r3
 80274b2:	69fb      	ldr	r3, [r7, #28]
 80274b4:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 80274b6:	69fb      	ldr	r3, [r7, #28]
 80274b8:	88ba      	ldrh	r2, [r7, #4]
 80274ba:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80274bc:	8afb      	ldrh	r3, [r7, #22]
 80274be:	3303      	adds	r3, #3
 80274c0:	f023 0303 	bic.w	r3, r3, #3
 80274c4:	f5c3 62c0 	rsb	r2, r3, #1536	; 0x600
 80274c8:	88bb      	ldrh	r3, [r7, #4]
 80274ca:	4293      	cmp	r3, r2
 80274cc:	bfa8      	it	ge
 80274ce:	4613      	movge	r3, r2
 80274d0:	b29a      	uxth	r2, r3
 80274d2:	69fb      	ldr	r3, [r7, #28]
 80274d4:	815a      	strh	r2, [r3, #10]
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 80274d6:	69fb      	ldr	r3, [r7, #28]
 80274d8:	2201      	movs	r2, #1
 80274da:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 80274dc:	69fb      	ldr	r3, [r7, #28]
 80274de:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 80274e0:	88bb      	ldrh	r3, [r7, #4]
 80274e2:	69fa      	ldr	r2, [r7, #28]
 80274e4:	8952      	ldrh	r2, [r2, #10]
 80274e6:	1a9b      	subs	r3, r3, r2
 80274e8:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 80274ea:	e035      	b.n	8027558 <pbuf_alloc+0x140>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80274ec:	2005      	movs	r0, #5
 80274ee:	f7ff fdd5 	bl	802709c <memp_malloc>
 80274f2:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 80274f4:	68fb      	ldr	r3, [r7, #12]
 80274f6:	2b00      	cmp	r3, #0
 80274f8:	d104      	bne.n	8027504 <pbuf_alloc+0xec>
        PBUF_POOL_IS_EMPTY();
        /* free chain so far allocated */
        pbuf_free(p);
 80274fa:	69f8      	ldr	r0, [r7, #28]
 80274fc:	f000 f950 	bl	80277a0 <pbuf_free>
        /* bail out unsuccesfully */
        return NULL;
 8027500:	2300      	movs	r3, #0
 8027502:	e07f      	b.n	8027604 <pbuf_alloc+0x1ec>
      }
      q->type = type;
 8027504:	68fb      	ldr	r3, [r7, #12]
 8027506:	79ba      	ldrb	r2, [r7, #6]
 8027508:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 802750a:	68fb      	ldr	r3, [r7, #12]
 802750c:	2200      	movs	r2, #0
 802750e:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8027510:	68fb      	ldr	r3, [r7, #12]
 8027512:	2200      	movs	r2, #0
 8027514:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8027516:	69bb      	ldr	r3, [r7, #24]
 8027518:	68fa      	ldr	r2, [r7, #12]
 802751a:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
 802751c:	693b      	ldr	r3, [r7, #16]
 802751e:	b29a      	uxth	r2, r3
 8027520:	68fb      	ldr	r3, [r7, #12]
 8027522:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8027524:	693b      	ldr	r3, [r7, #16]
 8027526:	b29b      	uxth	r3, r3
 8027528:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 802752c:	bf28      	it	cs
 802752e:	f44f 63c0 	movcs.w	r3, #1536	; 0x600
 8027532:	b29a      	uxth	r2, r3
 8027534:	68fb      	ldr	r3, [r7, #12]
 8027536:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8027538:	68fb      	ldr	r3, [r7, #12]
 802753a:	f103 0210 	add.w	r2, r3, #16
 802753e:	68fb      	ldr	r3, [r7, #12]
 8027540:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8027542:	68fb      	ldr	r3, [r7, #12]
 8027544:	2201      	movs	r2, #1
 8027546:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8027548:	68fb      	ldr	r3, [r7, #12]
 802754a:	895b      	ldrh	r3, [r3, #10]
 802754c:	461a      	mov	r2, r3
 802754e:	693b      	ldr	r3, [r7, #16]
 8027550:	1a9b      	subs	r3, r3, r2
 8027552:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8027554:	68fb      	ldr	r3, [r7, #12]
 8027556:	61bb      	str	r3, [r7, #24]
    /* remember first pbuf for linkage in next iteration */
    r = p;
    /* remaining length to be allocated */
    rem_len = length - p->len;
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8027558:	693b      	ldr	r3, [r7, #16]
 802755a:	2b00      	cmp	r3, #0
 802755c:	dcc6      	bgt.n	80274ec <pbuf_alloc+0xd4>
      r = q;
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 802755e:	e04a      	b.n	80275f6 <pbuf_alloc+0x1de>
  case PBUF_RAM:
    /* If pbuf is to be allocated in RAM, allocate memory for it. */
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
 8027560:	8afb      	ldrh	r3, [r7, #22]
 8027562:	3313      	adds	r3, #19
 8027564:	b29b      	uxth	r3, r3
 8027566:	f023 0303 	bic.w	r3, r3, #3
 802756a:	b29a      	uxth	r2, r3
 802756c:	88bb      	ldrh	r3, [r7, #4]
 802756e:	3303      	adds	r3, #3
 8027570:	b29b      	uxth	r3, r3
 8027572:	f023 0303 	bic.w	r3, r3, #3
 8027576:	b29b      	uxth	r3, r3
 8027578:	4413      	add	r3, r2
 802757a:	b29b      	uxth	r3, r3
 802757c:	4618      	mov	r0, r3
 802757e:	f7ff fc9d 	bl	8026ebc <mem_malloc>
 8027582:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8027584:	69fb      	ldr	r3, [r7, #28]
 8027586:	2b00      	cmp	r3, #0
 8027588:	d101      	bne.n	802758e <pbuf_alloc+0x176>
      return NULL;
 802758a:	2300      	movs	r3, #0
 802758c:	e03a      	b.n	8027604 <pbuf_alloc+0x1ec>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 802758e:	8afb      	ldrh	r3, [r7, #22]
 8027590:	3310      	adds	r3, #16
 8027592:	69fa      	ldr	r2, [r7, #28]
 8027594:	4413      	add	r3, r2
 8027596:	3303      	adds	r3, #3
 8027598:	f023 0303 	bic.w	r3, r3, #3
 802759c:	461a      	mov	r2, r3
 802759e:	69fb      	ldr	r3, [r7, #28]
 80275a0:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80275a2:	69fb      	ldr	r3, [r7, #28]
 80275a4:	88ba      	ldrh	r2, [r7, #4]
 80275a6:	811a      	strh	r2, [r3, #8]
 80275a8:	69fb      	ldr	r3, [r7, #28]
 80275aa:	891a      	ldrh	r2, [r3, #8]
 80275ac:	69fb      	ldr	r3, [r7, #28]
 80275ae:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80275b0:	69fb      	ldr	r3, [r7, #28]
 80275b2:	2200      	movs	r2, #0
 80275b4:	601a      	str	r2, [r3, #0]
    p->type = type;
 80275b6:	69fb      	ldr	r3, [r7, #28]
 80275b8:	79ba      	ldrb	r2, [r7, #6]
 80275ba:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 80275bc:	e01b      	b.n	80275f6 <pbuf_alloc+0x1de>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80275be:	2004      	movs	r0, #4
 80275c0:	f7ff fd6c 	bl	802709c <memp_malloc>
 80275c4:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 80275c6:	69fb      	ldr	r3, [r7, #28]
 80275c8:	2b00      	cmp	r3, #0
 80275ca:	d101      	bne.n	80275d0 <pbuf_alloc+0x1b8>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 80275cc:	2300      	movs	r3, #0
 80275ce:	e019      	b.n	8027604 <pbuf_alloc+0x1ec>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 80275d0:	69fb      	ldr	r3, [r7, #28]
 80275d2:	2200      	movs	r2, #0
 80275d4:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80275d6:	69fb      	ldr	r3, [r7, #28]
 80275d8:	88ba      	ldrh	r2, [r7, #4]
 80275da:	811a      	strh	r2, [r3, #8]
 80275dc:	69fb      	ldr	r3, [r7, #28]
 80275de:	891a      	ldrh	r2, [r3, #8]
 80275e0:	69fb      	ldr	r3, [r7, #28]
 80275e2:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80275e4:	69fb      	ldr	r3, [r7, #28]
 80275e6:	2200      	movs	r2, #0
 80275e8:	601a      	str	r2, [r3, #0]
    p->type = type;
 80275ea:	69fb      	ldr	r3, [r7, #28]
 80275ec:	79ba      	ldrb	r2, [r7, #6]
 80275ee:	731a      	strb	r2, [r3, #12]
    break;
 80275f0:	e001      	b.n	80275f6 <pbuf_alloc+0x1de>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
 80275f2:	2300      	movs	r3, #0
 80275f4:	e006      	b.n	8027604 <pbuf_alloc+0x1ec>
  }
  /* set reference count */
  p->ref = 1;
 80275f6:	69fb      	ldr	r3, [r7, #28]
 80275f8:	2201      	movs	r2, #1
 80275fa:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 80275fc:	69fb      	ldr	r3, [r7, #28]
 80275fe:	2200      	movs	r2, #0
 8027600:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8027602:	69fb      	ldr	r3, [r7, #28]
}
 8027604:	4618      	mov	r0, r3
 8027606:	3720      	adds	r7, #32
 8027608:	46bd      	mov	sp, r7
 802760a:	bd80      	pop	{r7, pc}

0802760c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 802760c:	b580      	push	{r7, lr}
 802760e:	b086      	sub	sp, #24
 8027610:	af00      	add	r7, sp, #0
 8027612:	6078      	str	r0, [r7, #4]
 8027614:	460b      	mov	r3, r1
 8027616:	807b      	strh	r3, [r7, #2]
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8027618:	687b      	ldr	r3, [r7, #4]
 802761a:	891b      	ldrh	r3, [r3, #8]
 802761c:	887a      	ldrh	r2, [r7, #2]
 802761e:	429a      	cmp	r2, r3
 8027620:	d300      	bcc.n	8027624 <pbuf_realloc+0x18>
    /* enlarging not yet supported */
    return;
 8027622:	e048      	b.n	80276b6 <pbuf_realloc+0xaa>
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8027624:	887b      	ldrh	r3, [r7, #2]
 8027626:	687a      	ldr	r2, [r7, #4]
 8027628:	8912      	ldrh	r2, [r2, #8]
 802762a:	1a9b      	subs	r3, r3, r2
 802762c:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 802762e:	887b      	ldrh	r3, [r7, #2]
 8027630:	827b      	strh	r3, [r7, #18]
  q = p;
 8027632:	687b      	ldr	r3, [r7, #4]
 8027634:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8027636:	e00f      	b.n	8027658 <pbuf_realloc+0x4c>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8027638:	697b      	ldr	r3, [r7, #20]
 802763a:	895b      	ldrh	r3, [r3, #10]
 802763c:	8a7a      	ldrh	r2, [r7, #18]
 802763e:	1ad3      	subs	r3, r2, r3
 8027640:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
    q->tot_len += (u16_t)grow;
 8027642:	697b      	ldr	r3, [r7, #20]
 8027644:	891a      	ldrh	r2, [r3, #8]
 8027646:	68fb      	ldr	r3, [r7, #12]
 8027648:	b29b      	uxth	r3, r3
 802764a:	4413      	add	r3, r2
 802764c:	b29a      	uxth	r2, r3
 802764e:	697b      	ldr	r3, [r7, #20]
 8027650:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8027652:	697b      	ldr	r3, [r7, #20]
 8027654:	681b      	ldr	r3, [r3, #0]
 8027656:	617b      	str	r3, [r7, #20]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  q = p;
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8027658:	697b      	ldr	r3, [r7, #20]
 802765a:	895b      	ldrh	r3, [r3, #10]
 802765c:	8a7a      	ldrh	r2, [r7, #18]
 802765e:	429a      	cmp	r2, r3
 8027660:	d8ea      	bhi.n	8027638 <pbuf_realloc+0x2c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)) {
 8027662:	697b      	ldr	r3, [r7, #20]
 8027664:	7b1b      	ldrb	r3, [r3, #12]
 8027666:	2b00      	cmp	r3, #0
 8027668:	d112      	bne.n	8027690 <pbuf_realloc+0x84>
 802766a:	697b      	ldr	r3, [r7, #20]
 802766c:	895b      	ldrh	r3, [r3, #10]
 802766e:	8a7a      	ldrh	r2, [r7, #18]
 8027670:	429a      	cmp	r2, r3
 8027672:	d00d      	beq.n	8027690 <pbuf_realloc+0x84>
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8027674:	697b      	ldr	r3, [r7, #20]
 8027676:	685b      	ldr	r3, [r3, #4]
 8027678:	461a      	mov	r2, r3
 802767a:	697b      	ldr	r3, [r7, #20]
 802767c:	1ad3      	subs	r3, r2, r3
 802767e:	b29a      	uxth	r2, r3
 8027680:	8a7b      	ldrh	r3, [r7, #18]
 8027682:	4413      	add	r3, r2
 8027684:	b29b      	uxth	r3, r3
 8027686:	6978      	ldr	r0, [r7, #20]
 8027688:	4619      	mov	r1, r3
 802768a:	f7ff fb5d 	bl	8026d48 <mem_trim>
 802768e:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8027690:	697b      	ldr	r3, [r7, #20]
 8027692:	8a7a      	ldrh	r2, [r7, #18]
 8027694:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8027696:	697b      	ldr	r3, [r7, #20]
 8027698:	895a      	ldrh	r2, [r3, #10]
 802769a:	697b      	ldr	r3, [r7, #20]
 802769c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 802769e:	697b      	ldr	r3, [r7, #20]
 80276a0:	681b      	ldr	r3, [r3, #0]
 80276a2:	2b00      	cmp	r3, #0
 80276a4:	d004      	beq.n	80276b0 <pbuf_realloc+0xa4>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80276a6:	697b      	ldr	r3, [r7, #20]
 80276a8:	681b      	ldr	r3, [r3, #0]
 80276aa:	4618      	mov	r0, r3
 80276ac:	f000 f878 	bl	80277a0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80276b0:	697b      	ldr	r3, [r7, #20]
 80276b2:	2200      	movs	r2, #0
 80276b4:	601a      	str	r2, [r3, #0]

}
 80276b6:	3718      	adds	r7, #24
 80276b8:	46bd      	mov	sp, r7
 80276ba:	bd80      	pop	{r7, pc}

080276bc <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 80276bc:	b480      	push	{r7}
 80276be:	b085      	sub	sp, #20
 80276c0:	af00      	add	r7, sp, #0
 80276c2:	6078      	str	r0, [r7, #4]
 80276c4:	460b      	mov	r3, r1
 80276c6:	807b      	strh	r3, [r7, #2]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
 80276c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80276cc:	2b00      	cmp	r3, #0
 80276ce:	d002      	beq.n	80276d6 <pbuf_header+0x1a>
 80276d0:	687b      	ldr	r3, [r7, #4]
 80276d2:	2b00      	cmp	r3, #0
 80276d4:	d101      	bne.n	80276da <pbuf_header+0x1e>
    return 0;
 80276d6:	2300      	movs	r3, #0
 80276d8:	e05b      	b.n	8027792 <pbuf_header+0xd6>
  }
 
  if (header_size_increment < 0){
 80276da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80276de:	2b00      	cmp	r3, #0
 80276e0:	da0a      	bge.n	80276f8 <pbuf_header+0x3c>
    increment_magnitude = -header_size_increment;
 80276e2:	887b      	ldrh	r3, [r7, #2]
 80276e4:	425b      	negs	r3, r3
 80276e6:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80276e8:	687b      	ldr	r3, [r7, #4]
 80276ea:	895b      	ldrh	r3, [r3, #10]
 80276ec:	89fa      	ldrh	r2, [r7, #14]
 80276ee:	429a      	cmp	r2, r3
 80276f0:	d904      	bls.n	80276fc <pbuf_header+0x40>
 80276f2:	be00      	bkpt	0x0000
 80276f4:	2301      	movs	r3, #1
 80276f6:	e04c      	b.n	8027792 <pbuf_header+0xd6>
  } else {
    increment_magnitude = header_size_increment;
 80276f8:	887b      	ldrh	r3, [r7, #2]
 80276fa:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 80276fc:	687b      	ldr	r3, [r7, #4]
 80276fe:	7b1b      	ldrb	r3, [r3, #12]
 8027700:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8027702:	687b      	ldr	r3, [r7, #4]
 8027704:	685b      	ldr	r3, [r3, #4]
 8027706:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8027708:	89bb      	ldrh	r3, [r7, #12]
 802770a:	2b00      	cmp	r3, #0
 802770c:	d002      	beq.n	8027714 <pbuf_header+0x58>
 802770e:	89bb      	ldrh	r3, [r7, #12]
 8027710:	2b03      	cmp	r3, #3
 8027712:	d113      	bne.n	802773c <pbuf_header+0x80>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8027714:	687b      	ldr	r3, [r7, #4]
 8027716:	685a      	ldr	r2, [r3, #4]
 8027718:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 802771c:	425b      	negs	r3, r3
 802771e:	441a      	add	r2, r3
 8027720:	687b      	ldr	r3, [r7, #4]
 8027722:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8027724:	687b      	ldr	r3, [r7, #4]
 8027726:	685a      	ldr	r2, [r3, #4]
 8027728:	687b      	ldr	r3, [r7, #4]
 802772a:	3310      	adds	r3, #16
 802772c:	429a      	cmp	r2, r3
 802772e:	d204      	bcs.n	802773a <pbuf_header+0x7e>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)(p + 1)));
      /* restore old payload pointer */
      p->payload = payload;
 8027730:	687b      	ldr	r3, [r7, #4]
 8027732:	68ba      	ldr	r2, [r7, #8]
 8027734:	605a      	str	r2, [r3, #4]
      /* bail out unsuccesfully */
      return 1;
 8027736:	2301      	movs	r3, #1
 8027738:	e02b      	b.n	8027792 <pbuf_header+0xd6>
  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 802773a:	e01b      	b.n	8027774 <pbuf_header+0xb8>
      p->payload = payload;
      /* bail out unsuccesfully */
      return 1;
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 802773c:	89bb      	ldrh	r3, [r7, #12]
 802773e:	2b02      	cmp	r3, #2
 8027740:	d002      	beq.n	8027748 <pbuf_header+0x8c>
 8027742:	89bb      	ldrh	r3, [r7, #12]
 8027744:	2b01      	cmp	r3, #1
 8027746:	d113      	bne.n	8027770 <pbuf_header+0xb4>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8027748:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 802774c:	2b00      	cmp	r3, #0
 802774e:	da0d      	bge.n	802776c <pbuf_header+0xb0>
 8027750:	687b      	ldr	r3, [r7, #4]
 8027752:	895b      	ldrh	r3, [r3, #10]
 8027754:	89fa      	ldrh	r2, [r7, #14]
 8027756:	429a      	cmp	r2, r3
 8027758:	d808      	bhi.n	802776c <pbuf_header+0xb0>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 802775a:	687b      	ldr	r3, [r7, #4]
 802775c:	685a      	ldr	r2, [r3, #4]
 802775e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8027762:	425b      	negs	r3, r3
 8027764:	441a      	add	r2, r3
 8027766:	687b      	ldr	r3, [r7, #4]
 8027768:	605a      	str	r2, [r3, #4]
      return 1;
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 802776a:	e003      	b.n	8027774 <pbuf_header+0xb8>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccesfully */
      return 1;
 802776c:	2301      	movs	r3, #1
 802776e:	e010      	b.n	8027792 <pbuf_header+0xd6>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
 8027770:	2301      	movs	r3, #1
 8027772:	e00e      	b.n	8027792 <pbuf_header+0xd6>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8027774:	687b      	ldr	r3, [r7, #4]
 8027776:	895a      	ldrh	r2, [r3, #10]
 8027778:	887b      	ldrh	r3, [r7, #2]
 802777a:	4413      	add	r3, r2
 802777c:	b29a      	uxth	r2, r3
 802777e:	687b      	ldr	r3, [r7, #4]
 8027780:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8027782:	687b      	ldr	r3, [r7, #4]
 8027784:	891a      	ldrh	r2, [r3, #8]
 8027786:	887b      	ldrh	r3, [r7, #2]
 8027788:	4413      	add	r3, r2
 802778a:	b29a      	uxth	r2, r3
 802778c:	687b      	ldr	r3, [r7, #4]
 802778e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8027790:	2300      	movs	r3, #0
}
 8027792:	4618      	mov	r0, r3
 8027794:	3714      	adds	r7, #20
 8027796:	46bd      	mov	sp, r7
 8027798:	f85d 7b04 	ldr.w	r7, [sp], #4
 802779c:	4770      	bx	lr
 802779e:	bf00      	nop

080277a0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80277a0:	b580      	push	{r7, lr}
 80277a2:	b086      	sub	sp, #24
 80277a4:	af00      	add	r7, sp, #0
 80277a6:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80277a8:	687b      	ldr	r3, [r7, #4]
 80277aa:	2b00      	cmp	r3, #0
 80277ac:	d101      	bne.n	80277b2 <pbuf_free+0x12>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80277ae:	2300      	movs	r3, #0
 80277b0:	e036      	b.n	8027820 <pbuf_free+0x80>

  LWIP_ASSERT("pbuf_free: sane type",
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 80277b2:	2300      	movs	r3, #0
 80277b4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80277b6:	e02f      	b.n	8027818 <pbuf_free+0x78>
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80277b8:	687b      	ldr	r3, [r7, #4]
 80277ba:	89db      	ldrh	r3, [r3, #14]
 80277bc:	3b01      	subs	r3, #1
 80277be:	b29a      	uxth	r2, r3
 80277c0:	687b      	ldr	r3, [r7, #4]
 80277c2:	81da      	strh	r2, [r3, #14]
 80277c4:	687b      	ldr	r3, [r7, #4]
 80277c6:	89db      	ldrh	r3, [r3, #14]
 80277c8:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80277ca:	8abb      	ldrh	r3, [r7, #20]
 80277cc:	2b00      	cmp	r3, #0
 80277ce:	d121      	bne.n	8027814 <pbuf_free+0x74>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80277d0:	687b      	ldr	r3, [r7, #4]
 80277d2:	681b      	ldr	r3, [r3, #0]
 80277d4:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 80277d6:	687b      	ldr	r3, [r7, #4]
 80277d8:	7b1b      	ldrb	r3, [r3, #12]
 80277da:	81fb      	strh	r3, [r7, #14]
        pc->custom_free_function(p);
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 80277dc:	89fb      	ldrh	r3, [r7, #14]
 80277de:	2b03      	cmp	r3, #3
 80277e0:	d104      	bne.n	80277ec <pbuf_free+0x4c>
          memp_free(MEMP_PBUF_POOL, p);
 80277e2:	2005      	movs	r0, #5
 80277e4:	6879      	ldr	r1, [r7, #4]
 80277e6:	f7ff fc7b 	bl	80270e0 <memp_free>
 80277ea:	e00d      	b.n	8027808 <pbuf_free+0x68>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80277ec:	89fb      	ldrh	r3, [r7, #14]
 80277ee:	2b01      	cmp	r3, #1
 80277f0:	d002      	beq.n	80277f8 <pbuf_free+0x58>
 80277f2:	89fb      	ldrh	r3, [r7, #14]
 80277f4:	2b02      	cmp	r3, #2
 80277f6:	d104      	bne.n	8027802 <pbuf_free+0x62>
          memp_free(MEMP_PBUF, p);
 80277f8:	2004      	movs	r0, #4
 80277fa:	6879      	ldr	r1, [r7, #4]
 80277fc:	f7ff fc70 	bl	80270e0 <memp_free>
 8027800:	e002      	b.n	8027808 <pbuf_free+0x68>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8027802:	6878      	ldr	r0, [r7, #4]
 8027804:	f7ff fa72 	bl	8026cec <mem_free>
        }
      }
      count++;
 8027808:	7dfb      	ldrb	r3, [r7, #23]
 802780a:	3301      	adds	r3, #1
 802780c:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 802780e:	693b      	ldr	r3, [r7, #16]
 8027810:	607b      	str	r3, [r7, #4]
 8027812:	e001      	b.n	8027818 <pbuf_free+0x78>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8027814:	2300      	movs	r3, #0
 8027816:	607b      	str	r3, [r7, #4]
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8027818:	687b      	ldr	r3, [r7, #4]
 802781a:	2b00      	cmp	r3, #0
 802781c:	d1cc      	bne.n	80277b8 <pbuf_free+0x18>
      p = NULL;
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 802781e:	7dfb      	ldrb	r3, [r7, #23]
}
 8027820:	4618      	mov	r0, r3
 8027822:	3718      	adds	r7, #24
 8027824:	46bd      	mov	sp, r7
 8027826:	bd80      	pop	{r7, pc}

08027828 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8027828:	b480      	push	{r7}
 802782a:	b083      	sub	sp, #12
 802782c:	af00      	add	r7, sp, #0
 802782e:	6078      	str	r0, [r7, #4]
  SYS_ARCH_DECL_PROTECT(old_level);
  /* pbuf given? */
  if (p != NULL) {
 8027830:	687b      	ldr	r3, [r7, #4]
 8027832:	2b00      	cmp	r3, #0
 8027834:	d005      	beq.n	8027842 <pbuf_ref+0x1a>
    SYS_ARCH_PROTECT(old_level);
    ++(p->ref);
 8027836:	687b      	ldr	r3, [r7, #4]
 8027838:	89db      	ldrh	r3, [r3, #14]
 802783a:	3301      	adds	r3, #1
 802783c:	b29a      	uxth	r2, r3
 802783e:	687b      	ldr	r3, [r7, #4]
 8027840:	81da      	strh	r2, [r3, #14]
    SYS_ARCH_UNPROTECT(old_level);
  }
}
 8027842:	370c      	adds	r7, #12
 8027844:	46bd      	mov	sp, r7
 8027846:	f85d 7b04 	ldr.w	r7, [sp], #4
 802784a:	4770      	bx	lr

0802784c <pbuf_cat>:
 * @see pbuf_chain()
 */

void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 802784c:	b480      	push	{r7}
 802784e:	b085      	sub	sp, #20
 8027850:	af00      	add	r7, sp, #0
 8027852:	6078      	str	r0, [r7, #4]
 8027854:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8027856:	687b      	ldr	r3, [r7, #4]
 8027858:	2b00      	cmp	r3, #0
 802785a:	d002      	beq.n	8027862 <pbuf_cat+0x16>
 802785c:	683b      	ldr	r3, [r7, #0]
 802785e:	2b00      	cmp	r3, #0
 8027860:	d101      	bne.n	8027866 <pbuf_cat+0x1a>
 8027862:	be00      	bkpt	0x0000
 8027864:	e01c      	b.n	80278a0 <pbuf_cat+0x54>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8027866:	687b      	ldr	r3, [r7, #4]
 8027868:	60fb      	str	r3, [r7, #12]
 802786a:	e00a      	b.n	8027882 <pbuf_cat+0x36>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 802786c:	68fb      	ldr	r3, [r7, #12]
 802786e:	891a      	ldrh	r2, [r3, #8]
 8027870:	683b      	ldr	r3, [r7, #0]
 8027872:	891b      	ldrh	r3, [r3, #8]
 8027874:	4413      	add	r3, r2
 8027876:	b29a      	uxth	r2, r3
 8027878:	68fb      	ldr	r3, [r7, #12]
 802787a:	811a      	strh	r2, [r3, #8]

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 802787c:	68fb      	ldr	r3, [r7, #12]
 802787e:	681b      	ldr	r3, [r3, #0]
 8027880:	60fb      	str	r3, [r7, #12]
 8027882:	68fb      	ldr	r3, [r7, #12]
 8027884:	681b      	ldr	r3, [r3, #0]
 8027886:	2b00      	cmp	r3, #0
 8027888:	d1f0      	bne.n	802786c <pbuf_cat+0x20>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 802788a:	68fb      	ldr	r3, [r7, #12]
 802788c:	891a      	ldrh	r2, [r3, #8]
 802788e:	683b      	ldr	r3, [r7, #0]
 8027890:	891b      	ldrh	r3, [r3, #8]
 8027892:	4413      	add	r3, r2
 8027894:	b29a      	uxth	r2, r3
 8027896:	68fb      	ldr	r3, [r7, #12]
 8027898:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 802789a:	68fb      	ldr	r3, [r7, #12]
 802789c:	683a      	ldr	r2, [r7, #0]
 802789e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80278a0:	3714      	adds	r7, #20
 80278a2:	46bd      	mov	sp, r7
 80278a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80278a8:	4770      	bx	lr
 80278aa:	bf00      	nop

080278ac <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80278ac:	b580      	push	{r7, lr}
 80278ae:	b082      	sub	sp, #8
 80278b0:	af00      	add	r7, sp, #0
 80278b2:	6078      	str	r0, [r7, #4]
 80278b4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80278b6:	6878      	ldr	r0, [r7, #4]
 80278b8:	6839      	ldr	r1, [r7, #0]
 80278ba:	f7ff ffc7 	bl	802784c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80278be:	6838      	ldr	r0, [r7, #0]
 80278c0:	f7ff ffb2 	bl	8027828 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80278c4:	3708      	adds	r7, #8
 80278c6:	46bd      	mov	sp, r7
 80278c8:	bd80      	pop	{r7, pc}
 80278ca:	bf00      	nop

080278cc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, struct pbuf *p_from)
{
 80278cc:	b580      	push	{r7, lr}
 80278ce:	b084      	sub	sp, #16
 80278d0:	af00      	add	r7, sp, #0
 80278d2:	6078      	str	r0, [r7, #4]
 80278d4:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 80278d6:	2300      	movs	r3, #0
 80278d8:	81fb      	strh	r3, [r7, #14]
 80278da:	2300      	movs	r3, #0
 80278dc:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (void*)p_to, (void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80278de:	687b      	ldr	r3, [r7, #4]
 80278e0:	2b00      	cmp	r3, #0
 80278e2:	d008      	beq.n	80278f6 <pbuf_copy+0x2a>
 80278e4:	683b      	ldr	r3, [r7, #0]
 80278e6:	2b00      	cmp	r3, #0
 80278e8:	d005      	beq.n	80278f6 <pbuf_copy+0x2a>
 80278ea:	687b      	ldr	r3, [r7, #4]
 80278ec:	891a      	ldrh	r2, [r3, #8]
 80278ee:	683b      	ldr	r3, [r7, #0]
 80278f0:	891b      	ldrh	r3, [r3, #8]
 80278f2:	429a      	cmp	r2, r3
 80278f4:	d202      	bcs.n	80278fc <pbuf_copy+0x30>
 80278f6:	be00      	bkpt	0x0000
 80278f8:	23f2      	movs	r3, #242	; 0xf2
 80278fa:	e06d      	b.n	80279d8 <pbuf_copy+0x10c>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80278fc:	687b      	ldr	r3, [r7, #4]
 80278fe:	895b      	ldrh	r3, [r3, #10]
 8027900:	461a      	mov	r2, r3
 8027902:	89fb      	ldrh	r3, [r7, #14]
 8027904:	1ad2      	subs	r2, r2, r3
 8027906:	683b      	ldr	r3, [r7, #0]
 8027908:	895b      	ldrh	r3, [r3, #10]
 802790a:	4619      	mov	r1, r3
 802790c:	89bb      	ldrh	r3, [r7, #12]
 802790e:	1acb      	subs	r3, r1, r3
 8027910:	429a      	cmp	r2, r3
 8027912:	db05      	blt.n	8027920 <pbuf_copy+0x54>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8027914:	683b      	ldr	r3, [r7, #0]
 8027916:	895a      	ldrh	r2, [r3, #10]
 8027918:	89bb      	ldrh	r3, [r7, #12]
 802791a:	1ad3      	subs	r3, r2, r3
 802791c:	817b      	strh	r3, [r7, #10]
 802791e:	e004      	b.n	802792a <pbuf_copy+0x5e>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8027920:	687b      	ldr	r3, [r7, #4]
 8027922:	895a      	ldrh	r2, [r3, #10]
 8027924:	89fb      	ldrh	r3, [r7, #14]
 8027926:	1ad3      	subs	r3, r2, r3
 8027928:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 802792a:	687b      	ldr	r3, [r7, #4]
 802792c:	685a      	ldr	r2, [r3, #4]
 802792e:	89fb      	ldrh	r3, [r7, #14]
 8027930:	18d1      	adds	r1, r2, r3
 8027932:	683b      	ldr	r3, [r7, #0]
 8027934:	685a      	ldr	r2, [r3, #4]
 8027936:	89bb      	ldrh	r3, [r7, #12]
 8027938:	441a      	add	r2, r3
 802793a:	897b      	ldrh	r3, [r7, #10]
 802793c:	4608      	mov	r0, r1
 802793e:	4611      	mov	r1, r2
 8027940:	461a      	mov	r2, r3
 8027942:	f7fd fa2d 	bl	8024da0 <thumb2_memcpy>
    offset_to += len;
 8027946:	89fa      	ldrh	r2, [r7, #14]
 8027948:	897b      	ldrh	r3, [r7, #10]
 802794a:	4413      	add	r3, r2
 802794c:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 802794e:	89ba      	ldrh	r2, [r7, #12]
 8027950:	897b      	ldrh	r3, [r7, #10]
 8027952:	4413      	add	r3, r2
 8027954:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
 8027956:	683b      	ldr	r3, [r7, #0]
 8027958:	895b      	ldrh	r3, [r3, #10]
 802795a:	89ba      	ldrh	r2, [r7, #12]
 802795c:	429a      	cmp	r2, r3
 802795e:	d304      	bcc.n	802796a <pbuf_copy+0x9e>
      /* on to next p_from (if any) */
      offset_from = 0;
 8027960:	2300      	movs	r3, #0
 8027962:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8027964:	683b      	ldr	r3, [r7, #0]
 8027966:	681b      	ldr	r3, [r3, #0]
 8027968:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 802796a:	687b      	ldr	r3, [r7, #4]
 802796c:	895b      	ldrh	r3, [r3, #10]
 802796e:	89fa      	ldrh	r2, [r7, #14]
 8027970:	429a      	cmp	r2, r3
 8027972:	d10d      	bne.n	8027990 <pbuf_copy+0xc4>
      /* on to next p_to (if any) */
      offset_to = 0;
 8027974:	2300      	movs	r3, #0
 8027976:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8027978:	687b      	ldr	r3, [r7, #4]
 802797a:	681b      	ldr	r3, [r3, #0]
 802797c:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 802797e:	687b      	ldr	r3, [r7, #4]
 8027980:	2b00      	cmp	r3, #0
 8027982:	d105      	bne.n	8027990 <pbuf_copy+0xc4>
 8027984:	683b      	ldr	r3, [r7, #0]
 8027986:	2b00      	cmp	r3, #0
 8027988:	d002      	beq.n	8027990 <pbuf_copy+0xc4>
 802798a:	be00      	bkpt	0x0000
 802798c:	23f2      	movs	r3, #242	; 0xf2
 802798e:	e023      	b.n	80279d8 <pbuf_copy+0x10c>
    }

    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8027990:	683b      	ldr	r3, [r7, #0]
 8027992:	2b00      	cmp	r3, #0
 8027994:	d00c      	beq.n	80279b0 <pbuf_copy+0xe4>
 8027996:	683b      	ldr	r3, [r7, #0]
 8027998:	895a      	ldrh	r2, [r3, #10]
 802799a:	683b      	ldr	r3, [r7, #0]
 802799c:	891b      	ldrh	r3, [r3, #8]
 802799e:	429a      	cmp	r2, r3
 80279a0:	d106      	bne.n	80279b0 <pbuf_copy+0xe4>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
 80279a2:	683b      	ldr	r3, [r7, #0]
 80279a4:	681b      	ldr	r3, [r3, #0]
 80279a6:	2b00      	cmp	r3, #0
 80279a8:	d002      	beq.n	80279b0 <pbuf_copy+0xe4>
 80279aa:	be00      	bkpt	0x0000
 80279ac:	23fa      	movs	r3, #250	; 0xfa
 80279ae:	e013      	b.n	80279d8 <pbuf_copy+0x10c>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80279b0:	687b      	ldr	r3, [r7, #4]
 80279b2:	2b00      	cmp	r3, #0
 80279b4:	d00c      	beq.n	80279d0 <pbuf_copy+0x104>
 80279b6:	687b      	ldr	r3, [r7, #4]
 80279b8:	895a      	ldrh	r2, [r3, #10]
 80279ba:	687b      	ldr	r3, [r7, #4]
 80279bc:	891b      	ldrh	r3, [r3, #8]
 80279be:	429a      	cmp	r2, r3
 80279c0:	d106      	bne.n	80279d0 <pbuf_copy+0x104>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
 80279c2:	687b      	ldr	r3, [r7, #4]
 80279c4:	681b      	ldr	r3, [r3, #0]
 80279c6:	2b00      	cmp	r3, #0
 80279c8:	d002      	beq.n	80279d0 <pbuf_copy+0x104>
 80279ca:	be00      	bkpt	0x0000
 80279cc:	23fa      	movs	r3, #250	; 0xfa
 80279ce:	e003      	b.n	80279d8 <pbuf_copy+0x10c>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80279d0:	683b      	ldr	r3, [r7, #0]
 80279d2:	2b00      	cmp	r3, #0
 80279d4:	d192      	bne.n	80278fc <pbuf_copy+0x30>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80279d6:	2300      	movs	r3, #0
 80279d8:	b25b      	sxtb	r3, r3
}
 80279da:	4618      	mov	r0, r3
 80279dc:	3710      	adds	r7, #16
 80279de:	46bd      	mov	sp, r7
 80279e0:	bd80      	pop	{r7, pc}
 80279e2:	bf00      	nop

080279e4 <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
 80279e4:	b590      	push	{r4, r7, lr}
 80279e6:	b089      	sub	sp, #36	; 0x24
 80279e8:	af00      	add	r7, sp, #0
 80279ea:	6078      	str	r0, [r7, #4]
 80279ec:	6039      	str	r1, [r7, #0]
  struct raw_pcb *pcb, *prev;
  struct ip_hdr *iphdr;
  s16_t proto;
  u8_t eaten = 0;
 80279ee:	2300      	movs	r3, #0
 80279f0:	75fb      	strb	r3, [r7, #23]

  LWIP_UNUSED_ARG(inp);

  iphdr = (struct ip_hdr *)p->payload;
 80279f2:	687b      	ldr	r3, [r7, #4]
 80279f4:	685b      	ldr	r3, [r3, #4]
 80279f6:	613b      	str	r3, [r7, #16]
  proto = IPH_PROTO(iphdr);
 80279f8:	693b      	ldr	r3, [r7, #16]
 80279fa:	7a5b      	ldrb	r3, [r3, #9]
 80279fc:	81fb      	strh	r3, [r7, #14]

  prev = NULL;
 80279fe:	2300      	movs	r3, #0
 8027a00:	61bb      	str	r3, [r7, #24]
  pcb = raw_pcbs;
 8027a02:	4b25      	ldr	r3, [pc, #148]	; (8027a98 <raw_input+0xb4>)
 8027a04:	681b      	ldr	r3, [r3, #0]
 8027a06:	61fb      	str	r3, [r7, #28]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
 8027a08:	e03a      	b.n	8027a80 <raw_input+0x9c>
    if ((pcb->protocol == proto) &&
 8027a0a:	69fb      	ldr	r3, [r7, #28]
 8027a0c:	7c1b      	ldrb	r3, [r3, #16]
 8027a0e:	461a      	mov	r2, r3
 8027a10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8027a14:	429a      	cmp	r2, r3
 8027a16:	d12e      	bne.n	8027a76 <raw_input+0x92>
        (ip_addr_isany(&pcb->local_ip) ||
 8027a18:	69fb      	ldr	r3, [r7, #28]
  prev = NULL;
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
    if ((pcb->protocol == proto) &&
 8027a1a:	2b00      	cmp	r3, #0
 8027a1c:	d009      	beq.n	8027a32 <raw_input+0x4e>
        (ip_addr_isany(&pcb->local_ip) ||
 8027a1e:	69fb      	ldr	r3, [r7, #28]
 8027a20:	681b      	ldr	r3, [r3, #0]
 8027a22:	2b00      	cmp	r3, #0
 8027a24:	d005      	beq.n	8027a32 <raw_input+0x4e>
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest))) {
 8027a26:	69fb      	ldr	r3, [r7, #28]
 8027a28:	681a      	ldr	r2, [r3, #0]
 8027a2a:	4b1c      	ldr	r3, [pc, #112]	; (8027a9c <raw_input+0xb8>)
 8027a2c:	681b      	ldr	r3, [r3, #0]
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
    if ((pcb->protocol == proto) &&
        (ip_addr_isany(&pcb->local_ip) ||
 8027a2e:	429a      	cmp	r2, r3
 8027a30:	d121      	bne.n	8027a76 <raw_input+0x92>
      /* broadcast filter? */
      if (ip_get_option(pcb, SOF_BROADCAST) || !ip_addr_isbroadcast(&current_iphdr_dest, inp))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        /* receive callback function available? */
        if (pcb->recv != NULL) {
 8027a32:	69fb      	ldr	r3, [r7, #28]
 8027a34:	695b      	ldr	r3, [r3, #20]
 8027a36:	2b00      	cmp	r3, #0
 8027a38:	d01d      	beq.n	8027a76 <raw_input+0x92>
          /* the receive callback function did not eat the packet? */
          if (pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr()) != 0) {
 8027a3a:	69fb      	ldr	r3, [r7, #28]
 8027a3c:	695c      	ldr	r4, [r3, #20]
 8027a3e:	69fb      	ldr	r3, [r7, #28]
 8027a40:	699b      	ldr	r3, [r3, #24]
 8027a42:	4618      	mov	r0, r3
 8027a44:	69f9      	ldr	r1, [r7, #28]
 8027a46:	687a      	ldr	r2, [r7, #4]
 8027a48:	4b15      	ldr	r3, [pc, #84]	; (8027aa0 <raw_input+0xbc>)
 8027a4a:	47a0      	blx	r4
 8027a4c:	4603      	mov	r3, r0
 8027a4e:	2b00      	cmp	r3, #0
 8027a50:	d011      	beq.n	8027a76 <raw_input+0x92>
            /* receive function ate the packet */
            p = NULL;
 8027a52:	2300      	movs	r3, #0
 8027a54:	607b      	str	r3, [r7, #4]
            eaten = 1;
 8027a56:	2301      	movs	r3, #1
 8027a58:	75fb      	strb	r3, [r7, #23]
            if (prev != NULL) {
 8027a5a:	69bb      	ldr	r3, [r7, #24]
 8027a5c:	2b00      	cmp	r3, #0
 8027a5e:	d00a      	beq.n	8027a76 <raw_input+0x92>
            /* move the pcb to the front of raw_pcbs so that is
               found faster next time */
              prev->next = pcb->next;
 8027a60:	69fb      	ldr	r3, [r7, #28]
 8027a62:	68da      	ldr	r2, [r3, #12]
 8027a64:	69bb      	ldr	r3, [r7, #24]
 8027a66:	60da      	str	r2, [r3, #12]
              pcb->next = raw_pcbs;
 8027a68:	4b0b      	ldr	r3, [pc, #44]	; (8027a98 <raw_input+0xb4>)
 8027a6a:	681a      	ldr	r2, [r3, #0]
 8027a6c:	69fb      	ldr	r3, [r7, #28]
 8027a6e:	60da      	str	r2, [r3, #12]
              raw_pcbs = pcb;
 8027a70:	4a09      	ldr	r2, [pc, #36]	; (8027a98 <raw_input+0xb4>)
 8027a72:	69fb      	ldr	r3, [r7, #28]
 8027a74:	6013      	str	r3, [r2, #0]
        }
        /* no receive callback function was set for this raw PCB */
      }
      /* drop the packet */
    }
    prev = pcb;
 8027a76:	69fb      	ldr	r3, [r7, #28]
 8027a78:	61bb      	str	r3, [r7, #24]
    pcb = pcb->next;
 8027a7a:	69fb      	ldr	r3, [r7, #28]
 8027a7c:	68db      	ldr	r3, [r3, #12]
 8027a7e:	61fb      	str	r3, [r7, #28]

  prev = NULL;
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
 8027a80:	7dfb      	ldrb	r3, [r7, #23]
 8027a82:	2b00      	cmp	r3, #0
 8027a84:	d102      	bne.n	8027a8c <raw_input+0xa8>
 8027a86:	69fb      	ldr	r3, [r7, #28]
 8027a88:	2b00      	cmp	r3, #0
 8027a8a:	d1be      	bne.n	8027a0a <raw_input+0x26>
      /* drop the packet */
    }
    prev = pcb;
    pcb = pcb->next;
  }
  return eaten;
 8027a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8027a8e:	4618      	mov	r0, r3
 8027a90:	3724      	adds	r7, #36	; 0x24
 8027a92:	46bd      	mov	sp, r7
 8027a94:	bd90      	pop	{r4, r7, pc}
 8027a96:	bf00      	nop
 8027a98:	1fff0050 	.word	0x1fff0050
 8027a9c:	1fff0120 	.word	0x1fff0120
 8027aa0:	1fff0118 	.word	0x1fff0118

08027aa4 <arp_timer>:
 *
 * @param arg unused argument
 */
static void
arp_timer(void *arg)
{
 8027aa4:	b580      	push	{r7, lr}
 8027aa6:	b082      	sub	sp, #8
 8027aa8:	af00      	add	r7, sp, #0
 8027aaa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: etharp_tmr()\n"));
  etharp_tmr();
 8027aac:	f7fd f9dc 	bl	8024e68 <etharp_tmr>
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 8027ab0:	f241 3088 	movw	r0, #5000	; 0x1388
 8027ab4:	4903      	ldr	r1, [pc, #12]	; (8027ac4 <arp_timer+0x20>)
 8027ab6:	2200      	movs	r2, #0
 8027ab8:	f000 f830 	bl	8027b1c <sys_timeout>
}
 8027abc:	3708      	adds	r7, #8
 8027abe:	46bd      	mov	sp, r7
 8027ac0:	bd80      	pop	{r7, pc}
 8027ac2:	bf00      	nop
 8027ac4:	08027aa5 	.word	0x08027aa5

08027ac8 <igmp_timer>:
 *
 * @param arg unused argument
 */
static void
igmp_timer(void *arg)
{
 8027ac8:	b580      	push	{r7, lr}
 8027aca:	b082      	sub	sp, #8
 8027acc:	af00      	add	r7, sp, #0
 8027ace:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: igmp_tmr()\n"));
  igmp_tmr();
 8027ad0:	f7fe fac2 	bl	8026058 <igmp_tmr>
  sys_timeout(IGMP_TMR_INTERVAL, igmp_timer, NULL);
 8027ad4:	2064      	movs	r0, #100	; 0x64
 8027ad6:	4903      	ldr	r1, [pc, #12]	; (8027ae4 <igmp_timer+0x1c>)
 8027ad8:	2200      	movs	r2, #0
 8027ada:	f000 f81f 	bl	8027b1c <sys_timeout>
}
 8027ade:	3708      	adds	r7, #8
 8027ae0:	46bd      	mov	sp, r7
 8027ae2:	bd80      	pop	{r7, pc}
 8027ae4:	08027ac9 	.word	0x08027ac9

08027ae8 <sys_timeouts_init>:
}
#endif /* LWIP_DNS */

/** Initialize this module */
void sys_timeouts_init(void)
{
 8027ae8:	b580      	push	{r7, lr}
 8027aea:	af00      	add	r7, sp, #0
#if IP_REASSEMBLY
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
#endif /* IP_REASSEMBLY */
#if LWIP_ARP
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 8027aec:	f241 3088 	movw	r0, #5000	; 0x1388
 8027af0:	4907      	ldr	r1, [pc, #28]	; (8027b10 <sys_timeouts_init+0x28>)
 8027af2:	2200      	movs	r2, #0
 8027af4:	f000 f812 	bl	8027b1c <sys_timeout>
#endif /* LWIP_DHCP */
#if LWIP_AUTOIP
  sys_timeout(AUTOIP_TMR_INTERVAL, autoip_timer, NULL);
#endif /* LWIP_AUTOIP */
#if LWIP_IGMP
  sys_timeout(IGMP_TMR_INTERVAL, igmp_timer, NULL);
 8027af8:	2064      	movs	r0, #100	; 0x64
 8027afa:	4906      	ldr	r1, [pc, #24]	; (8027b14 <sys_timeouts_init+0x2c>)
 8027afc:	2200      	movs	r2, #0
 8027afe:	f000 f80d 	bl	8027b1c <sys_timeout>
  sys_timeout(DNS_TMR_INTERVAL, dns_timer, NULL);
#endif /* LWIP_DNS */

#if NO_SYS
  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = (u16_t)sys_now();
 8027b02:	f7fd f96b 	bl	8024ddc <sys_now>
 8027b06:	4603      	mov	r3, r0
 8027b08:	b29a      	uxth	r2, r3
 8027b0a:	4b03      	ldr	r3, [pc, #12]	; (8027b18 <sys_timeouts_init+0x30>)
 8027b0c:	801a      	strh	r2, [r3, #0]
#endif
}
 8027b0e:	bd80      	pop	{r7, pc}
 8027b10:	08027aa5 	.word	0x08027aa5
 8027b14:	08027ac9 	.word	0x08027ac9
 8027b18:	1fff0058 	.word	0x1fff0058

08027b1c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8027b1c:	b580      	push	{r7, lr}
 8027b1e:	b086      	sub	sp, #24
 8027b20:	af00      	add	r7, sp, #0
 8027b22:	60f8      	str	r0, [r7, #12]
 8027b24:	60b9      	str	r1, [r7, #8]
 8027b26:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8027b28:	2003      	movs	r0, #3
 8027b2a:	f7ff fab7 	bl	802709c <memp_malloc>
 8027b2e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8027b30:	693b      	ldr	r3, [r7, #16]
 8027b32:	2b00      	cmp	r3, #0
 8027b34:	d100      	bne.n	8027b38 <sys_timeout+0x1c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
 8027b36:	e05a      	b.n	8027bee <sys_timeout+0xd2>
  }
  timeout->next = NULL;
 8027b38:	693b      	ldr	r3, [r7, #16]
 8027b3a:	2200      	movs	r2, #0
 8027b3c:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8027b3e:	693b      	ldr	r3, [r7, #16]
 8027b40:	68ba      	ldr	r2, [r7, #8]
 8027b42:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8027b44:	693b      	ldr	r3, [r7, #16]
 8027b46:	687a      	ldr	r2, [r7, #4]
 8027b48:	60da      	str	r2, [r3, #12]
  timeout->time = msecs;
 8027b4a:	693b      	ldr	r3, [r7, #16]
 8027b4c:	68fa      	ldr	r2, [r7, #12]
 8027b4e:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8027b50:	4b28      	ldr	r3, [pc, #160]	; (8027bf4 <sys_timeout+0xd8>)
 8027b52:	681b      	ldr	r3, [r3, #0]
 8027b54:	2b00      	cmp	r3, #0
 8027b56:	d103      	bne.n	8027b60 <sys_timeout+0x44>
    next_timeout = timeout;
 8027b58:	4a26      	ldr	r2, [pc, #152]	; (8027bf4 <sys_timeout+0xd8>)
 8027b5a:	693b      	ldr	r3, [r7, #16]
 8027b5c:	6013      	str	r3, [r2, #0]
    return;
 8027b5e:	e046      	b.n	8027bee <sys_timeout+0xd2>
  }

  if (next_timeout->time > msecs) {
 8027b60:	4b24      	ldr	r3, [pc, #144]	; (8027bf4 <sys_timeout+0xd8>)
 8027b62:	681b      	ldr	r3, [r3, #0]
 8027b64:	685a      	ldr	r2, [r3, #4]
 8027b66:	68fb      	ldr	r3, [r7, #12]
 8027b68:	429a      	cmp	r2, r3
 8027b6a:	d90f      	bls.n	8027b8c <sys_timeout+0x70>
    next_timeout->time -= msecs;
 8027b6c:	4b21      	ldr	r3, [pc, #132]	; (8027bf4 <sys_timeout+0xd8>)
 8027b6e:	681b      	ldr	r3, [r3, #0]
 8027b70:	4a20      	ldr	r2, [pc, #128]	; (8027bf4 <sys_timeout+0xd8>)
 8027b72:	6812      	ldr	r2, [r2, #0]
 8027b74:	6851      	ldr	r1, [r2, #4]
 8027b76:	68fa      	ldr	r2, [r7, #12]
 8027b78:	1a8a      	subs	r2, r1, r2
 8027b7a:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8027b7c:	4b1d      	ldr	r3, [pc, #116]	; (8027bf4 <sys_timeout+0xd8>)
 8027b7e:	681a      	ldr	r2, [r3, #0]
 8027b80:	693b      	ldr	r3, [r7, #16]
 8027b82:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8027b84:	4a1b      	ldr	r2, [pc, #108]	; (8027bf4 <sys_timeout+0xd8>)
 8027b86:	693b      	ldr	r3, [r7, #16]
 8027b88:	6013      	str	r3, [r2, #0]
 8027b8a:	e030      	b.n	8027bee <sys_timeout+0xd2>
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
 8027b8c:	4b19      	ldr	r3, [pc, #100]	; (8027bf4 <sys_timeout+0xd8>)
 8027b8e:	681b      	ldr	r3, [r3, #0]
 8027b90:	617b      	str	r3, [r7, #20]
 8027b92:	e029      	b.n	8027be8 <sys_timeout+0xcc>
      timeout->time -= t->time;
 8027b94:	693b      	ldr	r3, [r7, #16]
 8027b96:	685a      	ldr	r2, [r3, #4]
 8027b98:	697b      	ldr	r3, [r7, #20]
 8027b9a:	685b      	ldr	r3, [r3, #4]
 8027b9c:	1ad2      	subs	r2, r2, r3
 8027b9e:	693b      	ldr	r3, [r7, #16]
 8027ba0:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8027ba2:	697b      	ldr	r3, [r7, #20]
 8027ba4:	681b      	ldr	r3, [r3, #0]
 8027ba6:	2b00      	cmp	r3, #0
 8027ba8:	d006      	beq.n	8027bb8 <sys_timeout+0x9c>
 8027baa:	697b      	ldr	r3, [r7, #20]
 8027bac:	681b      	ldr	r3, [r3, #0]
 8027bae:	685a      	ldr	r2, [r3, #4]
 8027bb0:	693b      	ldr	r3, [r7, #16]
 8027bb2:	685b      	ldr	r3, [r3, #4]
 8027bb4:	429a      	cmp	r2, r3
 8027bb6:	d914      	bls.n	8027be2 <sys_timeout+0xc6>
        if (t->next != NULL) {
 8027bb8:	697b      	ldr	r3, [r7, #20]
 8027bba:	681b      	ldr	r3, [r3, #0]
 8027bbc:	2b00      	cmp	r3, #0
 8027bbe:	d008      	beq.n	8027bd2 <sys_timeout+0xb6>
          t->next->time -= timeout->time;
 8027bc0:	697b      	ldr	r3, [r7, #20]
 8027bc2:	681b      	ldr	r3, [r3, #0]
 8027bc4:	697a      	ldr	r2, [r7, #20]
 8027bc6:	6812      	ldr	r2, [r2, #0]
 8027bc8:	6851      	ldr	r1, [r2, #4]
 8027bca:	693a      	ldr	r2, [r7, #16]
 8027bcc:	6852      	ldr	r2, [r2, #4]
 8027bce:	1a8a      	subs	r2, r1, r2
 8027bd0:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8027bd2:	697b      	ldr	r3, [r7, #20]
 8027bd4:	681a      	ldr	r2, [r3, #0]
 8027bd6:	693b      	ldr	r3, [r7, #16]
 8027bd8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8027bda:	697b      	ldr	r3, [r7, #20]
 8027bdc:	693a      	ldr	r2, [r7, #16]
 8027bde:	601a      	str	r2, [r3, #0]
        break;
 8027be0:	e005      	b.n	8027bee <sys_timeout+0xd2>
  if (next_timeout->time > msecs) {
    next_timeout->time -= msecs;
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
 8027be2:	697b      	ldr	r3, [r7, #20]
 8027be4:	681b      	ldr	r3, [r3, #0]
 8027be6:	617b      	str	r3, [r7, #20]
 8027be8:	697b      	ldr	r3, [r7, #20]
 8027bea:	2b00      	cmp	r3, #0
 8027bec:	d1d2      	bne.n	8027b94 <sys_timeout+0x78>
        t->next = timeout;
        break;
      }
    }
  }
}
 8027bee:	3718      	adds	r7, #24
 8027bf0:	46bd      	mov	sp, r7
 8027bf2:	bd80      	pop	{r7, pc}
 8027bf4:	1fff0054 	.word	0x1fff0054

08027bf8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8027bf8:	b580      	push	{r7, lr}
 8027bfa:	b086      	sub	sp, #24
 8027bfc:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8027bfe:	4b1f      	ldr	r3, [pc, #124]	; (8027c7c <sys_check_timeouts+0x84>)
 8027c00:	681b      	ldr	r3, [r3, #0]
 8027c02:	2b00      	cmp	r3, #0
 8027c04:	d037      	beq.n	8027c76 <sys_check_timeouts+0x7e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u16_t now;

    now = (u16_t)sys_now();
 8027c06:	f7fd f8e9 	bl	8024ddc <sys_now>
 8027c0a:	4603      	mov	r3, r0
 8027c0c:	827b      	strh	r3, [r7, #18]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8027c0e:	4b1c      	ldr	r3, [pc, #112]	; (8027c80 <sys_check_timeouts+0x88>)
 8027c10:	881b      	ldrh	r3, [r3, #0]
 8027c12:	8a7a      	ldrh	r2, [r7, #18]
 8027c14:	1ad3      	subs	r3, r2, r3
 8027c16:	82fb      	strh	r3, [r7, #22]
    do
    {
#if PBUF_POOL_FREE_OOSEQ
      PBUF_CHECK_FREE_OOSEQ();
#endif /* PBUF_POOL_FREE_OOSEQ */
      had_one = 0;
 8027c18:	2300      	movs	r3, #0
 8027c1a:	757b      	strb	r3, [r7, #21]
      tmptimeout = next_timeout;
 8027c1c:	4b17      	ldr	r3, [pc, #92]	; (8027c7c <sys_check_timeouts+0x84>)
 8027c1e:	681b      	ldr	r3, [r3, #0]
 8027c20:	60fb      	str	r3, [r7, #12]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8027c22:	68fb      	ldr	r3, [r7, #12]
 8027c24:	2b00      	cmp	r3, #0
 8027c26:	d023      	beq.n	8027c70 <sys_check_timeouts+0x78>
 8027c28:	68fb      	ldr	r3, [r7, #12]
 8027c2a:	685a      	ldr	r2, [r3, #4]
 8027c2c:	8afb      	ldrh	r3, [r7, #22]
 8027c2e:	429a      	cmp	r2, r3
 8027c30:	d81e      	bhi.n	8027c70 <sys_check_timeouts+0x78>
        /* timeout has expired */
        had_one = 1;
 8027c32:	2301      	movs	r3, #1
 8027c34:	757b      	strb	r3, [r7, #21]
        timeouts_last_time = now;
 8027c36:	4a12      	ldr	r2, [pc, #72]	; (8027c80 <sys_check_timeouts+0x88>)
 8027c38:	8a7b      	ldrh	r3, [r7, #18]
 8027c3a:	8013      	strh	r3, [r2, #0]
        diff -= tmptimeout->time;
 8027c3c:	68fb      	ldr	r3, [r7, #12]
 8027c3e:	685b      	ldr	r3, [r3, #4]
 8027c40:	b29b      	uxth	r3, r3
 8027c42:	8afa      	ldrh	r2, [r7, #22]
 8027c44:	1ad3      	subs	r3, r2, r3
 8027c46:	82fb      	strh	r3, [r7, #22]
        next_timeout = tmptimeout->next;
 8027c48:	68fb      	ldr	r3, [r7, #12]
 8027c4a:	681b      	ldr	r3, [r3, #0]
 8027c4c:	4a0b      	ldr	r2, [pc, #44]	; (8027c7c <sys_check_timeouts+0x84>)
 8027c4e:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8027c50:	68fb      	ldr	r3, [r7, #12]
 8027c52:	689b      	ldr	r3, [r3, #8]
 8027c54:	60bb      	str	r3, [r7, #8]
        arg = tmptimeout->arg;
 8027c56:	68fb      	ldr	r3, [r7, #12]
 8027c58:	68db      	ldr	r3, [r3, #12]
 8027c5a:	607b      	str	r3, [r7, #4]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8027c5c:	2003      	movs	r0, #3
 8027c5e:	68f9      	ldr	r1, [r7, #12]
 8027c60:	f7ff fa3e 	bl	80270e0 <memp_free>
        if (handler != NULL) {
 8027c64:	68bb      	ldr	r3, [r7, #8]
 8027c66:	2b00      	cmp	r3, #0
 8027c68:	d002      	beq.n	8027c70 <sys_check_timeouts+0x78>
          handler(arg);
 8027c6a:	68bb      	ldr	r3, [r7, #8]
 8027c6c:	6878      	ldr	r0, [r7, #4]
 8027c6e:	4798      	blx	r3
        }
      }
    /* repeat until all expired timers have been called */
    }while(had_one);
 8027c70:	7d7b      	ldrb	r3, [r7, #21]
 8027c72:	2b00      	cmp	r3, #0
 8027c74:	d1d0      	bne.n	8027c18 <sys_check_timeouts+0x20>
  }
}
 8027c76:	3718      	adds	r7, #24
 8027c78:	46bd      	mov	sp, r7
 8027c7a:	bd80      	pop	{r7, pc}
 8027c7c:	1fff0054 	.word	0x1fff0054
 8027c80:	1fff0058 	.word	0x1fff0058

08027c84 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8027c84:	b480      	push	{r7}
 8027c86:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8027c88:	46bd      	mov	sp, r7
 8027c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c8e:	4770      	bx	lr

08027c90 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8027c90:	b480      	push	{r7}
 8027c92:	b083      	sub	sp, #12
 8027c94:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8027c96:	2300      	movs	r3, #0
 8027c98:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;
  
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8027c9a:	4b18      	ldr	r3, [pc, #96]	; (8027cfc <udp_new_port+0x6c>)
 8027c9c:	881b      	ldrh	r3, [r3, #0]
 8027c9e:	1c5a      	adds	r2, r3, #1
 8027ca0:	b291      	uxth	r1, r2
 8027ca2:	4a16      	ldr	r2, [pc, #88]	; (8027cfc <udp_new_port+0x6c>)
 8027ca4:	8011      	strh	r1, [r2, #0]
 8027ca6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8027caa:	4293      	cmp	r3, r2
 8027cac:	d103      	bne.n	8027cb6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8027cae:	4b13      	ldr	r3, [pc, #76]	; (8027cfc <udp_new_port+0x6c>)
 8027cb0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8027cb4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8027cb6:	4b12      	ldr	r3, [pc, #72]	; (8027d00 <udp_new_port+0x70>)
 8027cb8:	681b      	ldr	r3, [r3, #0]
 8027cba:	603b      	str	r3, [r7, #0]
 8027cbc:	e012      	b.n	8027ce4 <udp_new_port+0x54>
    if (pcb->local_port == udp_port) {
 8027cbe:	683b      	ldr	r3, [r7, #0]
 8027cc0:	8a5a      	ldrh	r2, [r3, #18]
 8027cc2:	4b0e      	ldr	r3, [pc, #56]	; (8027cfc <udp_new_port+0x6c>)
 8027cc4:	881b      	ldrh	r3, [r3, #0]
 8027cc6:	429a      	cmp	r2, r3
 8027cc8:	d109      	bne.n	8027cde <udp_new_port+0x4e>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8027cca:	88fb      	ldrh	r3, [r7, #6]
 8027ccc:	3301      	adds	r3, #1
 8027cce:	80fb      	strh	r3, [r7, #6]
 8027cd0:	88fb      	ldrh	r3, [r7, #6]
 8027cd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8027cd6:	d301      	bcc.n	8027cdc <udp_new_port+0x4c>
        return 0;
 8027cd8:	2300      	movs	r3, #0
 8027cda:	e008      	b.n	8027cee <udp_new_port+0x5e>
      }
      goto again;
 8027cdc:	e7dd      	b.n	8027c9a <udp_new_port+0xa>
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8027cde:	683b      	ldr	r3, [r7, #0]
 8027ce0:	68db      	ldr	r3, [r3, #12]
 8027ce2:	603b      	str	r3, [r7, #0]
 8027ce4:	683b      	ldr	r3, [r7, #0]
 8027ce6:	2b00      	cmp	r3, #0
 8027ce8:	d1e9      	bne.n	8027cbe <udp_new_port+0x2e>
        return 0;
      }
      goto again;
    }
  }
  return udp_port;
 8027cea:	4b04      	ldr	r3, [pc, #16]	; (8027cfc <udp_new_port+0x6c>)
 8027cec:	881b      	ldrh	r3, [r3, #0]
  if (ipcb != NULL) {
    return 0;
  }
  return udp_port;
#endif
}
 8027cee:	4618      	mov	r0, r3
 8027cf0:	370c      	adds	r7, #12
 8027cf2:	46bd      	mov	sp, r7
 8027cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027cf8:	4770      	bx	lr
 8027cfa:	bf00      	nop
 8027cfc:	1ffe8a88 	.word	0x1ffe8a88
 8027d00:	1fff0784 	.word	0x1fff0784

08027d04 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8027d04:	b590      	push	{r4, r7, lr}
 8027d06:	b08d      	sub	sp, #52	; 0x34
 8027d08:	af02      	add	r7, sp, #8
 8027d0a:	6078      	str	r0, [r7, #4]
 8027d0c:	6039      	str	r1, [r7, #0]

  PERF_START;

  UDP_STATS_INC(udp.recv);

  iphdr = (struct ip_hdr *)p->payload;
 8027d0e:	687b      	ldr	r3, [r7, #4]
 8027d10:	685b      	ldr	r3, [r3, #4]
 8027d12:	617b      	str	r3, [r7, #20]

  /* Check minimum length (IP header + UDP header)
   * and move payload pointer to UDP header */
  if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
 8027d14:	687b      	ldr	r3, [r7, #4]
 8027d16:	891b      	ldrh	r3, [r3, #8]
 8027d18:	461a      	mov	r2, r3
 8027d1a:	697b      	ldr	r3, [r7, #20]
 8027d1c:	781b      	ldrb	r3, [r3, #0]
 8027d1e:	f003 030f 	and.w	r3, r3, #15
 8027d22:	3302      	adds	r3, #2
 8027d24:	009b      	lsls	r3, r3, #2
 8027d26:	429a      	cmp	r2, r3
 8027d28:	db12      	blt.n	8027d50 <udp_input+0x4c>
 8027d2a:	697b      	ldr	r3, [r7, #20]
 8027d2c:	781b      	ldrb	r3, [r3, #0]
 8027d2e:	b29b      	uxth	r3, r3
 8027d30:	f003 030f 	and.w	r3, r3, #15
 8027d34:	b29b      	uxth	r3, r3
 8027d36:	009b      	lsls	r3, r3, #2
 8027d38:	b29b      	uxth	r3, r3
 8027d3a:	425b      	negs	r3, r3
 8027d3c:	b29b      	uxth	r3, r3
 8027d3e:	b29b      	uxth	r3, r3
 8027d40:	b21b      	sxth	r3, r3
 8027d42:	6878      	ldr	r0, [r7, #4]
 8027d44:	4619      	mov	r1, r3
 8027d46:	f7ff fcb9 	bl	80276bc <pbuf_header>
 8027d4a:	4603      	mov	r3, r0
 8027d4c:	2b00      	cmp	r3, #0
 8027d4e:	d003      	beq.n	8027d58 <udp_input+0x54>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    snmp_inc_udpinerrors();
    pbuf_free(p);
 8027d50:	6878      	ldr	r0, [r7, #4]
 8027d52:	f7ff fd25 	bl	80277a0 <pbuf_free>
    goto end;
 8027d56:	e0e2      	b.n	8027f1e <udp_input+0x21a>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8027d58:	687b      	ldr	r3, [r7, #4]
 8027d5a:	685b      	ldr	r3, [r3, #4]
 8027d5c:	613b      	str	r3, [r7, #16]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
 8027d5e:	4b71      	ldr	r3, [pc, #452]	; (8027f24 <udp_input+0x220>)
 8027d60:	681b      	ldr	r3, [r3, #0]
 8027d62:	4618      	mov	r0, r3
 8027d64:	6839      	ldr	r1, [r7, #0]
 8027d66:	f7fe fd81 	bl	802686c <ip4_addr_isbroadcast>
 8027d6a:	4603      	mov	r3, r0
 8027d6c:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = ntohs(udphdr->src);
 8027d6e:	693b      	ldr	r3, [r7, #16]
 8027d70:	881b      	ldrh	r3, [r3, #0]
 8027d72:	b29b      	uxth	r3, r3
 8027d74:	4618      	mov	r0, r3
 8027d76:	f7fe fee7 	bl	8026b48 <lwip_ntohs>
 8027d7a:	4603      	mov	r3, r0
 8027d7c:	81bb      	strh	r3, [r7, #12]
  dest = ntohs(udphdr->dest);
 8027d7e:	693b      	ldr	r3, [r7, #16]
 8027d80:	885b      	ldrh	r3, [r3, #2]
 8027d82:	b29b      	uxth	r3, r3
 8027d84:	4618      	mov	r0, r3
 8027d86:	f7fe fedf 	bl	8026b48 <lwip_ntohs>
 8027d8a:	4603      	mov	r3, r0
 8027d8c:	817b      	strh	r3, [r7, #10]
      }
    }
  } else
#endif /* LWIP_DHCP */
  {
    prev = NULL;
 8027d8e:	2300      	movs	r3, #0
 8027d90:	623b      	str	r3, [r7, #32]
    local_match = 0;
 8027d92:	2300      	movs	r3, #0
 8027d94:	76fb      	strb	r3, [r7, #27]
    uncon_pcb = NULL;
 8027d96:	2300      	movs	r3, #0
 8027d98:	61fb      	str	r3, [r7, #28]
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8027d9a:	4b63      	ldr	r3, [pc, #396]	; (8027f28 <udp_input+0x224>)
 8027d9c:	681b      	ldr	r3, [r3, #0]
 8027d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8027da0:	e067      	b.n	8027e72 <udp_input+0x16e>
      local_match = 0;
 8027da2:	2300      	movs	r3, #0
 8027da4:	76fb      	strb	r3, [r7, #27]
                   ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip), pcb->local_port,
                   ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
 8027da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027da8:	8a5b      	ldrh	r3, [r3, #18]
 8027daa:	897a      	ldrh	r2, [r7, #10]
 8027dac:	429a      	cmp	r2, r3
 8027dae:	d136      	bne.n	8027e1e <udp_input+0x11a>
        if (
 8027db0:	7bfb      	ldrb	r3, [r7, #15]
 8027db2:	2b00      	cmp	r3, #0
 8027db4:	d106      	bne.n	8027dc4 <udp_input+0xc0>
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
 8027db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027db8:	2b00      	cmp	r3, #0
 8027dba:	d023      	beq.n	8027e04 <udp_input+0x100>
 8027dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027dbe:	681b      	ldr	r3, [r3, #0]
 8027dc0:	2b00      	cmp	r3, #0
 8027dc2:	d01f      	beq.n	8027e04 <udp_input+0x100>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
 8027dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027dc6:	681a      	ldr	r2, [r3, #0]
 8027dc8:	4b56      	ldr	r3, [pc, #344]	; (8027f24 <udp_input+0x220>)
 8027dca:	681b      	ldr	r3, [r3, #0]
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
        if (
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
 8027dcc:	429a      	cmp	r2, r3
 8027dce:	d019      	beq.n	8027e04 <udp_input+0x100>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
#if LWIP_IGMP
           ip_addr_ismulticast(&current_iphdr_dest) ||
 8027dd0:	4b54      	ldr	r3, [pc, #336]	; (8027f24 <udp_input+0x220>)
 8027dd2:	681b      	ldr	r3, [r3, #0]
 8027dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
        if (
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
 8027dd8:	2be0      	cmp	r3, #224	; 0xe0
 8027dda:	d013      	beq.n	8027e04 <udp_input+0x100>
#if LWIP_IGMP
           ip_addr_ismulticast(&current_iphdr_dest) ||
 8027ddc:	7bfb      	ldrb	r3, [r7, #15]
 8027dde:	2b00      	cmp	r3, #0
 8027de0:	d01d      	beq.n	8027e1e <udp_input+0x11a>
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
             (ip_addr_isany(&pcb->local_ip) ||
 8027de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
#if IP_SOF_BROADCAST_RECV
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
 8027de4:	2b00      	cmp	r3, #0
 8027de6:	d00d      	beq.n	8027e04 <udp_input+0x100>
             (ip_addr_isany(&pcb->local_ip) ||
 8027de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027dea:	681b      	ldr	r3, [r3, #0]
 8027dec:	2b00      	cmp	r3, #0
 8027dee:	d009      	beq.n	8027e04 <udp_input+0x100>
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
 8027df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027df2:	681a      	ldr	r2, [r3, #0]
 8027df4:	4b4b      	ldr	r3, [pc, #300]	; (8027f24 <udp_input+0x220>)
 8027df6:	681b      	ldr	r3, [r3, #0]
 8027df8:	405a      	eors	r2, r3
 8027dfa:	683b      	ldr	r3, [r7, #0]
 8027dfc:	689b      	ldr	r3, [r3, #8]
 8027dfe:	4013      	ands	r3, r2
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
             (ip_addr_isany(&pcb->local_ip) ||
 8027e00:	2b00      	cmp	r3, #0
 8027e02:	d10c      	bne.n	8027e1e <udp_input+0x11a>
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#endif /* IP_SOF_BROADCAST_RECV */ 
          local_match = 1;
 8027e04:	2301      	movs	r3, #1
 8027e06:	76fb      	strb	r3, [r7, #27]
          if ((uncon_pcb == NULL) && 
 8027e08:	69fb      	ldr	r3, [r7, #28]
 8027e0a:	2b00      	cmp	r3, #0
 8027e0c:	d107      	bne.n	8027e1e <udp_input+0x11a>
              ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
 8027e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027e10:	7c1b      	ldrb	r3, [r3, #16]
 8027e12:	f003 0304 	and.w	r3, r3, #4
            (broadcast &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#endif /* IP_SOF_BROADCAST_RECV */ 
          local_match = 1;
          if ((uncon_pcb == NULL) && 
 8027e16:	2b00      	cmp	r3, #0
 8027e18:	d101      	bne.n	8027e1e <udp_input+0x11a>
              ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
            /* the first unconnected matching PCB */
            uncon_pcb = pcb;
 8027e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027e1c:	61fb      	str	r3, [r7, #28]
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
 8027e1e:	7efb      	ldrb	r3, [r7, #27]
 8027e20:	2b00      	cmp	r3, #0
 8027e22:	d021      	beq.n	8027e68 <udp_input+0x164>
          (pcb->remote_port == src) &&
 8027e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027e26:	8a9b      	ldrh	r3, [r3, #20]
            uncon_pcb = pcb;
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
 8027e28:	89ba      	ldrh	r2, [r7, #12]
 8027e2a:	429a      	cmp	r2, r3
 8027e2c:	d11c      	bne.n	8027e68 <udp_input+0x164>
          (pcb->remote_port == src) &&
          (ip_addr_isany(&pcb->remote_ip) ||
 8027e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027e30:	3304      	adds	r3, #4
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
 8027e32:	2b00      	cmp	r3, #0
 8027e34:	d009      	beq.n	8027e4a <udp_input+0x146>
          (ip_addr_isany(&pcb->remote_ip) ||
 8027e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027e38:	685b      	ldr	r3, [r3, #4]
 8027e3a:	2b00      	cmp	r3, #0
 8027e3c:	d005      	beq.n	8027e4a <udp_input+0x146>
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
 8027e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027e40:	685a      	ldr	r2, [r3, #4]
 8027e42:	4b3a      	ldr	r3, [pc, #232]	; (8027f2c <udp_input+0x228>)
 8027e44:	681b      	ldr	r3, [r3, #0]
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
          (ip_addr_isany(&pcb->remote_ip) ||
 8027e46:	429a      	cmp	r2, r3
 8027e48:	d10e      	bne.n	8027e68 <udp_input+0x164>
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 8027e4a:	6a3b      	ldr	r3, [r7, #32]
 8027e4c:	2b00      	cmp	r3, #0
 8027e4e:	d00a      	beq.n	8027e66 <udp_input+0x162>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8027e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027e52:	68da      	ldr	r2, [r3, #12]
 8027e54:	6a3b      	ldr	r3, [r7, #32]
 8027e56:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8027e58:	4b33      	ldr	r3, [pc, #204]	; (8027f28 <udp_input+0x224>)
 8027e5a:	681a      	ldr	r2, [r3, #0]
 8027e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027e5e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8027e60:	4a31      	ldr	r2, [pc, #196]	; (8027f28 <udp_input+0x224>)
 8027e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027e64:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8027e66:	e007      	b.n	8027e78 <udp_input+0x174>
      }
      prev = pcb;
 8027e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027e6a:	623b      	str	r3, [r7, #32]
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8027e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027e6e:	68db      	ldr	r3, [r3, #12]
 8027e70:	627b      	str	r3, [r7, #36]	; 0x24
 8027e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027e74:	2b00      	cmp	r3, #0
 8027e76:	d194      	bne.n	8027da2 <udp_input+0x9e>
        break;
      }
      prev = pcb;
    }
    /* no fully matching pcb found? then look for an unconnected pcb */
    if (pcb == NULL) {
 8027e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027e7a:	2b00      	cmp	r3, #0
 8027e7c:	d101      	bne.n	8027e82 <udp_input+0x17e>
      pcb = uncon_pcb;
 8027e7e:	69fb      	ldr	r3, [r7, #28]
 8027e80:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
 8027e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027e84:	2b00      	cmp	r3, #0
 8027e86:	d105      	bne.n	8027e94 <udp_input+0x190>
 8027e88:	683b      	ldr	r3, [r7, #0]
 8027e8a:	685a      	ldr	r2, [r3, #4]
 8027e8c:	4b25      	ldr	r3, [pc, #148]	; (8027f24 <udp_input+0x220>)
 8027e8e:	681b      	ldr	r3, [r3, #0]
 8027e90:	429a      	cmp	r2, r3
 8027e92:	d141      	bne.n	8027f18 <udp_input+0x214>
          goto end;
        }
      }
#endif /* CHECKSUM_CHECK_UDP */
    }
    if(pbuf_header(p, -UDP_HLEN)) {
 8027e94:	6878      	ldr	r0, [r7, #4]
 8027e96:	f06f 0107 	mvn.w	r1, #7
 8027e9a:	f7ff fc0f 	bl	80276bc <pbuf_header>
 8027e9e:	4603      	mov	r3, r0
 8027ea0:	2b00      	cmp	r3, #0
 8027ea2:	d003      	beq.n	8027eac <udp_input+0x1a8>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
 8027ea4:	6878      	ldr	r0, [r7, #4]
 8027ea6:	f7ff fc7b 	bl	80277a0 <pbuf_free>
      goto end;
 8027eaa:	e038      	b.n	8027f1e <udp_input+0x21a>
    }
    if (pcb != NULL) {
 8027eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027eae:	2b00      	cmp	r3, #0
 8027eb0:	d013      	beq.n	8027eda <udp_input+0x1d6>
          pbuf_header(p, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8027eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027eb4:	69db      	ldr	r3, [r3, #28]
 8027eb6:	2b00      	cmp	r3, #0
 8027eb8:	d00b      	beq.n	8027ed2 <udp_input+0x1ce>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8027eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027ebc:	69dc      	ldr	r4, [r3, #28]
 8027ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027ec0:	6a1a      	ldr	r2, [r3, #32]
 8027ec2:	89bb      	ldrh	r3, [r7, #12]
 8027ec4:	9300      	str	r3, [sp, #0]
 8027ec6:	4610      	mov	r0, r2
 8027ec8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8027eca:	687a      	ldr	r2, [r7, #4]
 8027ecc:	4b17      	ldr	r3, [pc, #92]	; (8027f2c <udp_input+0x228>)
 8027ece:	47a0      	blx	r4
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
      goto end;
    }
    if (pcb != NULL) {
 8027ed0:	e025      	b.n	8027f1e <udp_input+0x21a>
      if (pcb->recv != NULL) {
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
      } else {
        /* no recv function registered? then we have to free the pbuf! */
        pbuf_free(p);
 8027ed2:	6878      	ldr	r0, [r7, #4]
 8027ed4:	f7ff fc64 	bl	80277a0 <pbuf_free>
        goto end;
 8027ed8:	e021      	b.n	8027f1e <udp_input+0x21a>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
 8027eda:	7bfb      	ldrb	r3, [r7, #15]
 8027edc:	2b00      	cmp	r3, #0
 8027ede:	d117      	bne.n	8027f10 <udp_input+0x20c>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
 8027ee0:	4b10      	ldr	r3, [pc, #64]	; (8027f24 <udp_input+0x220>)
 8027ee2:	681b      	ldr	r3, [r3, #0]
 8027ee4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
 8027ee8:	2be0      	cmp	r3, #224	; 0xe0
 8027eea:	d011      	beq.n	8027f10 <udp_input+0x20c>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        /* move payload pointer back to ip header */
        pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
 8027eec:	697b      	ldr	r3, [r7, #20]
 8027eee:	781b      	ldrb	r3, [r3, #0]
 8027ef0:	f003 030f 	and.w	r3, r3, #15
 8027ef4:	3302      	adds	r3, #2
 8027ef6:	b29b      	uxth	r3, r3
 8027ef8:	009b      	lsls	r3, r3, #2
 8027efa:	b29b      	uxth	r3, r3
 8027efc:	b29b      	uxth	r3, r3
 8027efe:	b21b      	sxth	r3, r3
 8027f00:	6878      	ldr	r0, [r7, #4]
 8027f02:	4619      	mov	r1, r3
 8027f04:	f7ff fbda 	bl	80276bc <pbuf_header>
        LWIP_ASSERT("p->payload == iphdr", (p->payload == iphdr));
        icmp_dest_unreach(p, ICMP_DUR_PORT);
 8027f08:	6878      	ldr	r0, [r7, #4]
 8027f0a:	2103      	movs	r1, #3
 8027f0c:	f7fd feca 	bl	8025ca4 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      UDP_STATS_INC(udp.proterr);
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpnoports();
      pbuf_free(p);
 8027f10:	6878      	ldr	r0, [r7, #4]
 8027f12:	f7ff fc45 	bl	80277a0 <pbuf_free>
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
      goto end;
    }
    if (pcb != NULL) {
 8027f16:	e002      	b.n	8027f1e <udp_input+0x21a>
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpnoports();
      pbuf_free(p);
    }
  } else {
    pbuf_free(p);
 8027f18:	6878      	ldr	r0, [r7, #4]
 8027f1a:	f7ff fc41 	bl	80277a0 <pbuf_free>
  }
end:
  PERF_STOP("udp_input");
}
 8027f1e:	372c      	adds	r7, #44	; 0x2c
 8027f20:	46bd      	mov	sp, r7
 8027f22:	bd90      	pop	{r4, r7, pc}
 8027f24:	1fff0120 	.word	0x1fff0120
 8027f28:	1fff0784 	.word	0x1fff0784
 8027f2c:	1fff0118 	.word	0x1fff0118

08027f30 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8027f30:	b590      	push	{r4, r7, lr}
 8027f32:	b08d      	sub	sp, #52	; 0x34
 8027f34:	af04      	add	r7, sp, #16
 8027f36:	60f8      	str	r0, [r7, #12]
 8027f38:	60b9      	str	r1, [r7, #8]
 8027f3a:	607a      	str	r2, [r7, #4]
 8027f3c:	807b      	strh	r3, [r7, #2]
    return ERR_VAL;
  }
#endif /* IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8027f3e:	68fb      	ldr	r3, [r7, #12]
 8027f40:	8a5b      	ldrh	r3, [r3, #18]
 8027f42:	2b00      	cmp	r3, #0
 8027f44:	d10f      	bne.n	8027f66 <udp_sendto_if+0x36>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8027f46:	68fa      	ldr	r2, [r7, #12]
 8027f48:	68fb      	ldr	r3, [r7, #12]
 8027f4a:	8a5b      	ldrh	r3, [r3, #18]
 8027f4c:	68f8      	ldr	r0, [r7, #12]
 8027f4e:	4611      	mov	r1, r2
 8027f50:	461a      	mov	r2, r3
 8027f52:	f000 f899 	bl	8028088 <udp_bind>
 8027f56:	4603      	mov	r3, r0
 8027f58:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 8027f5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8027f5e:	2b00      	cmp	r3, #0
 8027f60:	d001      	beq.n	8027f66 <udp_sendto_if+0x36>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8027f62:	7dfb      	ldrb	r3, [r7, #23]
 8027f64:	e08a      	b.n	802807c <udp_sendto_if+0x14c>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 8027f66:	68b8      	ldr	r0, [r7, #8]
 8027f68:	2108      	movs	r1, #8
 8027f6a:	f7ff fba7 	bl	80276bc <pbuf_header>
 8027f6e:	4603      	mov	r3, r0
 8027f70:	2b00      	cmp	r3, #0
 8027f72:	d013      	beq.n	8027f9c <udp_sendto_if+0x6c>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8027f74:	2001      	movs	r0, #1
 8027f76:	2108      	movs	r1, #8
 8027f78:	2200      	movs	r2, #0
 8027f7a:	f7ff fa4d 	bl	8027418 <pbuf_alloc>
 8027f7e:	61b8      	str	r0, [r7, #24]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8027f80:	69bb      	ldr	r3, [r7, #24]
 8027f82:	2b00      	cmp	r3, #0
 8027f84:	d101      	bne.n	8027f8a <udp_sendto_if+0x5a>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8027f86:	23ff      	movs	r3, #255	; 0xff
 8027f88:	e078      	b.n	802807c <udp_sendto_if+0x14c>
    }
    if (p->tot_len != 0) {
 8027f8a:	68bb      	ldr	r3, [r7, #8]
 8027f8c:	891b      	ldrh	r3, [r3, #8]
 8027f8e:	2b00      	cmp	r3, #0
 8027f90:	d006      	beq.n	8027fa0 <udp_sendto_if+0x70>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8027f92:	69b8      	ldr	r0, [r7, #24]
 8027f94:	68b9      	ldr	r1, [r7, #8]
 8027f96:	f7ff fc89 	bl	80278ac <pbuf_chain>
 8027f9a:	e001      	b.n	8027fa0 <udp_sendto_if+0x70>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8027f9c:	68bb      	ldr	r3, [r7, #8]
 8027f9e:	61bb      	str	r3, [r7, #24]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8027fa0:	69bb      	ldr	r3, [r7, #24]
 8027fa2:	685b      	ldr	r3, [r3, #4]
 8027fa4:	613b      	str	r3, [r7, #16]
  udphdr->src = htons(pcb->local_port);
 8027fa6:	68fb      	ldr	r3, [r7, #12]
 8027fa8:	8a5b      	ldrh	r3, [r3, #18]
 8027faa:	4618      	mov	r0, r3
 8027fac:	f7fe fdb6 	bl	8026b1c <lwip_htons>
 8027fb0:	4603      	mov	r3, r0
 8027fb2:	461a      	mov	r2, r3
 8027fb4:	693b      	ldr	r3, [r7, #16]
 8027fb6:	801a      	strh	r2, [r3, #0]
  udphdr->dest = htons(dst_port);
 8027fb8:	887b      	ldrh	r3, [r7, #2]
 8027fba:	4618      	mov	r0, r3
 8027fbc:	f7fe fdae 	bl	8026b1c <lwip_htons>
 8027fc0:	4603      	mov	r3, r0
 8027fc2:	461a      	mov	r2, r3
 8027fc4:	693b      	ldr	r3, [r7, #16]
 8027fc6:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000; 
 8027fc8:	693b      	ldr	r3, [r7, #16]
 8027fca:	2200      	movs	r2, #0
 8027fcc:	719a      	strb	r2, [r3, #6]
 8027fce:	2200      	movs	r2, #0
 8027fd0:	71da      	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if LWIP_IGMP
  if (ip_addr_ismulticast(dst_ip) && ((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0)) {
 8027fd2:	687b      	ldr	r3, [r7, #4]
 8027fd4:	681b      	ldr	r3, [r3, #0]
 8027fd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8027fda:	2be0      	cmp	r3, #224	; 0xe0
 8027fdc:	d10c      	bne.n	8027ff8 <udp_sendto_if+0xc8>
 8027fde:	68fb      	ldr	r3, [r7, #12]
 8027fe0:	7c1b      	ldrb	r3, [r3, #16]
 8027fe2:	f003 0308 	and.w	r3, r3, #8
 8027fe6:	2b00      	cmp	r3, #0
 8027fe8:	d006      	beq.n	8027ff8 <udp_sendto_if+0xc8>
    q->flags |= PBUF_FLAG_MCASTLOOP;
 8027fea:	69bb      	ldr	r3, [r7, #24]
 8027fec:	7b5b      	ldrb	r3, [r3, #13]
 8027fee:	f043 0304 	orr.w	r3, r3, #4
 8027ff2:	b2da      	uxtb	r2, r3
 8027ff4:	69bb      	ldr	r3, [r7, #24]
 8027ff6:	735a      	strb	r2, [r3, #13]
  }
#endif /* LWIP_IGMP */


  /* PCB local address is IP_ANY_ADDR? */
  if (ip_addr_isany(&pcb->local_ip)) {
 8027ff8:	68fb      	ldr	r3, [r7, #12]
 8027ffa:	2b00      	cmp	r3, #0
 8027ffc:	d003      	beq.n	8028006 <udp_sendto_if+0xd6>
 8027ffe:	68fb      	ldr	r3, [r7, #12]
 8028000:	681b      	ldr	r3, [r3, #0]
 8028002:	2b00      	cmp	r3, #0
 8028004:	d103      	bne.n	802800e <udp_sendto_if+0xde>
    /* use outgoing network interface IP address as source address */
    src_ip = &(netif->ip_addr);
 8028006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028008:	3304      	adds	r3, #4
 802800a:	61fb      	str	r3, [r7, #28]
 802800c:	e012      	b.n	8028034 <udp_sendto_if+0x104>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
 802800e:	68fb      	ldr	r3, [r7, #12]
 8028010:	681a      	ldr	r2, [r3, #0]
 8028012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028014:	685b      	ldr	r3, [r3, #4]
 8028016:	429a      	cmp	r2, r3
 8028018:	d00a      	beq.n	8028030 <udp_sendto_if+0x100>
      /* local_ip doesn't match, drop the packet */
      if (q != p) {
 802801a:	69ba      	ldr	r2, [r7, #24]
 802801c:	68bb      	ldr	r3, [r7, #8]
 802801e:	429a      	cmp	r2, r3
 8028020:	d004      	beq.n	802802c <udp_sendto_if+0xfc>
        /* free the header pbuf */
        pbuf_free(q);
 8028022:	69b8      	ldr	r0, [r7, #24]
 8028024:	f7ff fbbc 	bl	80277a0 <pbuf_free>
        q = NULL;
 8028028:	2300      	movs	r3, #0
 802802a:	61bb      	str	r3, [r7, #24]
        /* p is still referenced by the caller, and will live on */
      }
      return ERR_VAL;
 802802c:	23fa      	movs	r3, #250	; 0xfa
 802802e:	e025      	b.n	802807c <udp_sendto_if+0x14c>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &(pcb->local_ip);
 8028030:	68fb      	ldr	r3, [r7, #12]
 8028032:	61fb      	str	r3, [r7, #28]
    NETIF_SET_HWADDRHINT(netif, NULL);
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = htons(q->tot_len);
 8028034:	69bb      	ldr	r3, [r7, #24]
 8028036:	891b      	ldrh	r3, [r3, #8]
 8028038:	4618      	mov	r0, r3
 802803a:	f7fe fd6f 	bl	8026b1c <lwip_htons>
 802803e:	4603      	mov	r3, r0
 8028040:	461a      	mov	r2, r3
 8028042:	693b      	ldr	r3, [r7, #16]
 8028044:	809a      	strh	r2, [r3, #4]
#endif /* CHECKSUM_GEN_UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));
    /* output to IP */
    NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
    err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
 8028046:	68fb      	ldr	r3, [r7, #12]
 8028048:	7a9c      	ldrb	r4, [r3, #10]
 802804a:	68fb      	ldr	r3, [r7, #12]
 802804c:	7a5b      	ldrb	r3, [r3, #9]
 802804e:	9300      	str	r3, [sp, #0]
 8028050:	2311      	movs	r3, #17
 8028052:	9301      	str	r3, [sp, #4]
 8028054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028056:	9302      	str	r3, [sp, #8]
 8028058:	69b8      	ldr	r0, [r7, #24]
 802805a:	69f9      	ldr	r1, [r7, #28]
 802805c:	687a      	ldr	r2, [r7, #4]
 802805e:	4623      	mov	r3, r4
 8028060:	f7fe fb10 	bl	8026684 <ip_output_if>
 8028064:	4603      	mov	r3, r0
 8028066:	75fb      	strb	r3, [r7, #23]
  }
  /* TODO: must this be increased even if error occured? */
  snmp_inc_udpoutdatagrams();

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8028068:	69ba      	ldr	r2, [r7, #24]
 802806a:	68bb      	ldr	r3, [r7, #8]
 802806c:	429a      	cmp	r2, r3
 802806e:	d004      	beq.n	802807a <udp_sendto_if+0x14a>
    /* free the header pbuf */
    pbuf_free(q);
 8028070:	69b8      	ldr	r0, [r7, #24]
 8028072:	f7ff fb95 	bl	80277a0 <pbuf_free>
    q = NULL;
 8028076:	2300      	movs	r3, #0
 8028078:	61bb      	str	r3, [r7, #24]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 802807a:	7dfb      	ldrb	r3, [r7, #23]
 802807c:	b25b      	sxtb	r3, r3
}
 802807e:	4618      	mov	r0, r3
 8028080:	3724      	adds	r7, #36	; 0x24
 8028082:	46bd      	mov	sp, r7
 8028084:	bd90      	pop	{r4, r7, pc}
 8028086:	bf00      	nop

08028088 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
 8028088:	b580      	push	{r7, lr}
 802808a:	b086      	sub	sp, #24
 802808c:	af00      	add	r7, sp, #0
 802808e:	60f8      	str	r0, [r7, #12]
 8028090:	60b9      	str	r1, [r7, #8]
 8028092:	4613      	mov	r3, r2
 8028094:	80fb      	strh	r3, [r7, #6]

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8028096:	2300      	movs	r3, #0
 8028098:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802809a:	4b2a      	ldr	r3, [pc, #168]	; (8028144 <udp_bind+0xbc>)
 802809c:	681b      	ldr	r3, [r3, #0]
 802809e:	617b      	str	r3, [r7, #20]
 80280a0:	e024      	b.n	80280ec <udp_bind+0x64>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80280a2:	68fa      	ldr	r2, [r7, #12]
 80280a4:	697b      	ldr	r3, [r7, #20]
 80280a6:	429a      	cmp	r2, r3
 80280a8:	d102      	bne.n	80280b0 <udp_bind+0x28>
      /* pcb may occur at most once in active list */
      LWIP_ASSERT("rebind == 0", rebind == 0);
      /* pcb already in list, just rebind */
      rebind = 1;
 80280aa:	2301      	movs	r3, #1
 80280ac:	74fb      	strb	r3, [r7, #19]
 80280ae:	e01a      	b.n	80280e6 <udp_bind+0x5e>
             !ip_get_option(ipcb, SOF_REUSEADDR)) {
#else /* SO_REUSE */
    /* port matches that of PCB in list and REUSEADDR not set -> reject */
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
 80280b0:	697b      	ldr	r3, [r7, #20]
 80280b2:	8a5b      	ldrh	r3, [r3, #18]
 80280b4:	88fa      	ldrh	r2, [r7, #6]
 80280b6:	429a      	cmp	r2, r3
 80280b8:	d115      	bne.n	80280e6 <udp_bind+0x5e>
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
 80280ba:	697b      	ldr	r3, [r7, #20]
             !ip_get_option(ipcb, SOF_REUSEADDR)) {
#else /* SO_REUSE */
    /* port matches that of PCB in list and REUSEADDR not set -> reject */
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
 80280bc:	2b00      	cmp	r3, #0
 80280be:	d010      	beq.n	80280e2 <udp_bind+0x5a>
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
 80280c0:	697b      	ldr	r3, [r7, #20]
 80280c2:	681b      	ldr	r3, [r3, #0]
 80280c4:	2b00      	cmp	r3, #0
 80280c6:	d00c      	beq.n	80280e2 <udp_bind+0x5a>
 80280c8:	68bb      	ldr	r3, [r7, #8]
 80280ca:	2b00      	cmp	r3, #0
 80280cc:	d009      	beq.n	80280e2 <udp_bind+0x5a>
           ip_addr_isany(ipaddr) ||
 80280ce:	68bb      	ldr	r3, [r7, #8]
 80280d0:	681b      	ldr	r3, [r3, #0]
 80280d2:	2b00      	cmp	r3, #0
 80280d4:	d005      	beq.n	80280e2 <udp_bind+0x5a>
           ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
 80280d6:	697b      	ldr	r3, [r7, #20]
 80280d8:	681a      	ldr	r2, [r3, #0]
 80280da:	68bb      	ldr	r3, [r7, #8]
 80280dc:	681b      	ldr	r3, [r3, #0]
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
           ip_addr_isany(ipaddr) ||
 80280de:	429a      	cmp	r2, r3
 80280e0:	d101      	bne.n	80280e6 <udp_bind+0x5e>
           ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
        /* other PCB already binds to this local IP and port */
        LWIP_DEBUGF(UDP_DEBUG,
                    ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
        return ERR_USE;
 80280e2:	23f8      	movs	r3, #248	; 0xf8
 80280e4:	e028      	b.n	8028138 <udp_bind+0xb0>
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80280e6:	697b      	ldr	r3, [r7, #20]
 80280e8:	68db      	ldr	r3, [r3, #12]
 80280ea:	617b      	str	r3, [r7, #20]
 80280ec:	697b      	ldr	r3, [r7, #20]
 80280ee:	2b00      	cmp	r3, #0
 80280f0:	d1d7      	bne.n	80280a2 <udp_bind+0x1a>
        return ERR_USE;
      }
    }
  }

  ip_addr_set(&pcb->local_ip, ipaddr);
 80280f2:	68bb      	ldr	r3, [r7, #8]
 80280f4:	2b00      	cmp	r3, #0
 80280f6:	d002      	beq.n	80280fe <udp_bind+0x76>
 80280f8:	68bb      	ldr	r3, [r7, #8]
 80280fa:	681b      	ldr	r3, [r3, #0]
 80280fc:	e000      	b.n	8028100 <udp_bind+0x78>
 80280fe:	2300      	movs	r3, #0
 8028100:	68fa      	ldr	r2, [r7, #12]
 8028102:	6013      	str	r3, [r2, #0]

  /* no port specified? */
  if (port == 0) {
 8028104:	88fb      	ldrh	r3, [r7, #6]
 8028106:	2b00      	cmp	r3, #0
 8028108:	d108      	bne.n	802811c <udp_bind+0x94>
    port = udp_new_port();
 802810a:	f7ff fdc1 	bl	8027c90 <udp_new_port>
 802810e:	4603      	mov	r3, r0
 8028110:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8028112:	88fb      	ldrh	r3, [r7, #6]
 8028114:	2b00      	cmp	r3, #0
 8028116:	d101      	bne.n	802811c <udp_bind+0x94>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8028118:	23f8      	movs	r3, #248	; 0xf8
 802811a:	e00d      	b.n	8028138 <udp_bind+0xb0>
    }
  }
  pcb->local_port = port;
 802811c:	68fb      	ldr	r3, [r7, #12]
 802811e:	88fa      	ldrh	r2, [r7, #6]
 8028120:	825a      	strh	r2, [r3, #18]
  snmp_insert_udpidx_tree(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8028122:	7cfb      	ldrb	r3, [r7, #19]
 8028124:	2b00      	cmp	r3, #0
 8028126:	d106      	bne.n	8028136 <udp_bind+0xae>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8028128:	4b06      	ldr	r3, [pc, #24]	; (8028144 <udp_bind+0xbc>)
 802812a:	681a      	ldr	r2, [r3, #0]
 802812c:	68fb      	ldr	r3, [r7, #12]
 802812e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8028130:	4a04      	ldr	r2, [pc, #16]	; (8028144 <udp_bind+0xbc>)
 8028132:	68fb      	ldr	r3, [r7, #12]
 8028134:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
              ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));
  return ERR_OK;
 8028136:	2300      	movs	r3, #0
 8028138:	b25b      	sxtb	r3, r3
}
 802813a:	4618      	mov	r0, r3
 802813c:	3718      	adds	r7, #24
 802813e:	46bd      	mov	sp, r7
 8028140:	bd80      	pop	{r7, pc}
 8028142:	bf00      	nop
 8028144:	1fff0784 	.word	0x1fff0784

08028148 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8028148:	b480      	push	{r7}
 802814a:	b085      	sub	sp, #20
 802814c:	af00      	add	r7, sp, #0
 802814e:	60f8      	str	r0, [r7, #12]
 8028150:	60b9      	str	r1, [r7, #8]
 8028152:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8028154:	68fb      	ldr	r3, [r7, #12]
 8028156:	68ba      	ldr	r2, [r7, #8]
 8028158:	61da      	str	r2, [r3, #28]
  pcb->recv_arg = recv_arg;
 802815a:	68fb      	ldr	r3, [r7, #12]
 802815c:	687a      	ldr	r2, [r7, #4]
 802815e:	621a      	str	r2, [r3, #32]
}
 8028160:	3714      	adds	r7, #20
 8028162:	46bd      	mov	sp, r7
 8028164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028168:	4770      	bx	lr
 802816a:	bf00      	nop

0802816c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 802816c:	b580      	push	{r7, lr}
 802816e:	b082      	sub	sp, #8
 8028170:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8028172:	2001      	movs	r0, #1
 8028174:	f7fe ff92 	bl	802709c <memp_malloc>
 8028178:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 802817a:	687b      	ldr	r3, [r7, #4]
 802817c:	2b00      	cmp	r3, #0
 802817e:	d007      	beq.n	8028190 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8028180:	6878      	ldr	r0, [r7, #4]
 8028182:	2100      	movs	r1, #0
 8028184:	2224      	movs	r2, #36	; 0x24
 8028186:	f001 fcb2 	bl	8029aee <memset>
    pcb->ttl = UDP_TTL;
 802818a:	687b      	ldr	r3, [r7, #4]
 802818c:	22ff      	movs	r2, #255	; 0xff
 802818e:	729a      	strb	r2, [r3, #10]
  }
  return pcb;
 8028190:	687b      	ldr	r3, [r7, #4]
}
 8028192:	4618      	mov	r0, r3
 8028194:	3708      	adds	r7, #8
 8028196:	46bd      	mov	sp, r7
 8028198:	bd80      	pop	{r7, pc}
 802819a:	bf00      	nop

0802819c <ETH_LWIP_Init>:
  }
  return status;
}
#else
ETH_LWIP_STATUS_t ETH_LWIP_Init(ETH_LWIP_t* handle)
{
 802819c:	b590      	push	{r4, r7, lr}
 802819e:	b08b      	sub	sp, #44	; 0x2c
 80281a0:	af04      	add	r7, sp, #16
 80281a2:	6078      	str	r0, [r7, #4]
  ETH_LWIP_STATUS_t status = ETH_LWIP_STATUS_SUCCESS;
 80281a4:	2300      	movs	r3, #0
 80281a6:	75fb      	strb	r3, [r7, #23]

  struct ip_addr ipaddr;
  struct ip_addr netmask;
  struct ip_addr gw;

  if (handle->initialized == false)
 80281a8:	687b      	ldr	r3, [r7, #4]
 80281aa:	7a1b      	ldrb	r3, [r3, #8]
 80281ac:	f083 0301 	eor.w	r3, r3, #1
 80281b0:	b2db      	uxtb	r3, r3
 80281b2:	2b00      	cmp	r3, #0
 80281b4:	d032      	beq.n	802821c <ETH_LWIP_Init+0x80>
#if ((LWIP_DHCP == 1) || (LWIP_AUTOIP == 1))
    ipaddr.addr = 0;
    netmask.addr = 0;
    gw.addr = 0;
#else
    IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 80281b6:	4b1c      	ldr	r3, [pc, #112]	; (8028228 <ETH_LWIP_Init+0x8c>)
 80281b8:	613b      	str	r3, [r7, #16]
    IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1 , NETMASK_ADDR2, NETMASK_ADDR3);
 80281ba:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80281be:	60fb      	str	r3, [r7, #12]
    IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 80281c0:	4b1a      	ldr	r3, [pc, #104]	; (802822c <ETH_LWIP_Init+0x90>)
 80281c2:	60bb      	str	r3, [r7, #8]
#endif
    /*Initialize SYSTIMER APP*/
    status = (ETH_LWIP_STATUS_t)SYSTIMER_Init(&ETH_SYSTIMER_NAME);
 80281c4:	481a      	ldr	r0, [pc, #104]	; (8028230 <ETH_LWIP_Init+0x94>)
 80281c6:	f7fa fd85 	bl	8022cd4 <SYSTIMER_Init>
 80281ca:	4603      	mov	r3, r0
 80281cc:	75fb      	strb	r3, [r7, #23]

    lwip_init();
 80281ce:	f7fe fce3 	bl	8026b98 <lwip_init>

    /* Adds network interface to the netif_list */
    (void)netif_add(&xnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80281d2:	f107 0110 	add.w	r1, r7, #16
 80281d6:	f107 020c 	add.w	r2, r7, #12
 80281da:	f107 0408 	add.w	r4, r7, #8
 80281de:	2300      	movs	r3, #0
 80281e0:	9300      	str	r3, [sp, #0]
 80281e2:	4b14      	ldr	r3, [pc, #80]	; (8028234 <ETH_LWIP_Init+0x98>)
 80281e4:	9301      	str	r3, [sp, #4]
 80281e6:	4b14      	ldr	r3, [pc, #80]	; (8028238 <ETH_LWIP_Init+0x9c>)
 80281e8:	9302      	str	r3, [sp, #8]
 80281ea:	4814      	ldr	r0, [pc, #80]	; (802823c <ETH_LWIP_Init+0xa0>)
 80281ec:	4623      	mov	r3, r4
 80281ee:	f7fe ff9b 	bl	8027128 <netif_add>

    /*  Registers the default network interface.*/
    netif_set_default(&xnetif);
 80281f2:	4812      	ldr	r0, [pc, #72]	; (802823c <ETH_LWIP_Init+0xa0>)
 80281f4:	f7ff f83c 	bl	8027270 <netif_set_default>
    /* Initialize interface status change callback */
    netif_set_status_callback(&xnetif, ETH_NETIF_STATUS_CB_FUNCTION);
#endif

    /* device capabilities */
    xnetif.flags |= NETIF_FLAG_ETHARP;
 80281f8:	4b10      	ldr	r3, [pc, #64]	; (802823c <ETH_LWIP_Init+0xa0>)
 80281fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80281fe:	f043 0320 	orr.w	r3, r3, #32
 8028202:	b2da      	uxtb	r2, r3
 8028204:	4b0d      	ldr	r3, [pc, #52]	; (802823c <ETH_LWIP_Init+0xa0>)
 8028206:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#if LWIP_DHCP == 1
    /* Enable DHCP flag if DHCP is configured*/
    xnetif.flags |= NETIF_FLAG_DHCP;
#endif

    handle->initialized = true;
 802820a:	687b      	ldr	r3, [r7, #4]
 802820c:	2201      	movs	r2, #1
 802820e:	721a      	strb	r2, [r3, #8]
    handle->eth_mac = &eth_mac;
 8028210:	687b      	ldr	r3, [r7, #4]
 8028212:	4a0b      	ldr	r2, [pc, #44]	; (8028240 <ETH_LWIP_Init+0xa4>)
 8028214:	601a      	str	r2, [r3, #0]
    handle->xnetif = &xnetif;
 8028216:	687b      	ldr	r3, [r7, #4]
 8028218:	4a08      	ldr	r2, [pc, #32]	; (802823c <ETH_LWIP_Init+0xa0>)
 802821a:	605a      	str	r2, [r3, #4]
  }
  return status;
 802821c:	7dfb      	ldrb	r3, [r7, #23]
}
 802821e:	4618      	mov	r0, r3
 8028220:	371c      	adds	r7, #28
 8028222:	46bd      	mov	sp, r7
 8028224:	bd90      	pop	{r4, r7, pc}
 8028226:	bf00      	nop
 8028228:	190a0a0a 	.word	0x190a0a0a
 802822c:	4b0a0a0a 	.word	0x4b0a0a0a
 8028230:	1ffe8b08 	.word	0x1ffe8b08
 8028234:	08024d15 	.word	0x08024d15
 8028238:	080259e1 	.word	0x080259e1
 802823c:	1ffe8a50 	.word	0x1ffe8a50
 8028240:	1ffe8a20 	.word	0x1ffe8a20

08028244 <XMC_ETH_PHY_IsDeviceIdValid>:
 * API IMPLEMENTATION
 *******************************************************************************/

 /* Check if the device identifier is valid */
static int32_t XMC_ETH_PHY_IsDeviceIdValid(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 8028244:	b580      	push	{r7, lr}
 8028246:	b084      	sub	sp, #16
 8028248:	af00      	add	r7, sp, #0
 802824a:	6078      	str	r0, [r7, #4]
 802824c:	460b      	mov	r3, r1
 802824e:	70fb      	strb	r3, [r7, #3]
  uint16_t phy_id1;
  uint16_t phy_id2;
  XMC_ETH_PHY_STATUS_t status;

  /* Check Device Identification. */
  if ((XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR1, &phy_id1) == XMC_ETH_MAC_STATUS_OK) &&
 8028250:	78fa      	ldrb	r2, [r7, #3]
 8028252:	f107 030c 	add.w	r3, r7, #12
 8028256:	6878      	ldr	r0, [r7, #4]
 8028258:	4611      	mov	r1, r2
 802825a:	2202      	movs	r2, #2
 802825c:	f7f9 fdaa 	bl	8021db4 <XMC_ETH_MAC_ReadPhy>
 8028260:	4603      	mov	r3, r0
 8028262:	2b00      	cmp	r3, #0
 8028264:	d11b      	bne.n	802829e <XMC_ETH_PHY_IsDeviceIdValid+0x5a>
      (XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR2, &phy_id2) == XMC_ETH_MAC_STATUS_OK))
 8028266:	78fa      	ldrb	r2, [r7, #3]
 8028268:	f107 030a 	add.w	r3, r7, #10
 802826c:	6878      	ldr	r0, [r7, #4]
 802826e:	4611      	mov	r1, r2
 8028270:	2203      	movs	r2, #3
 8028272:	f7f9 fd9f 	bl	8021db4 <XMC_ETH_MAC_ReadPhy>
 8028276:	4603      	mov	r3, r0
  uint16_t phy_id1;
  uint16_t phy_id2;
  XMC_ETH_PHY_STATUS_t status;

  /* Check Device Identification. */
  if ((XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR1, &phy_id1) == XMC_ETH_MAC_STATUS_OK) &&
 8028278:	2b00      	cmp	r3, #0
 802827a:	d110      	bne.n	802829e <XMC_ETH_PHY_IsDeviceIdValid+0x5a>
      (XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR2, &phy_id2) == XMC_ETH_MAC_STATUS_OK))
  {
    if ((phy_id1 == PHY_ID1) && ((phy_id2 & (uint16_t)0xfff0) == PHY_ID2))
 802827c:	89bb      	ldrh	r3, [r7, #12]
 802827e:	2b22      	cmp	r3, #34	; 0x22
 8028280:	d10a      	bne.n	8028298 <XMC_ETH_PHY_IsDeviceIdValid+0x54>
 8028282:	897b      	ldrh	r3, [r7, #10]
 8028284:	461a      	mov	r2, r3
 8028286:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 802828a:	4013      	ands	r3, r2
 802828c:	f5b3 5fab 	cmp.w	r3, #5472	; 0x1560
 8028290:	d102      	bne.n	8028298 <XMC_ETH_PHY_IsDeviceIdValid+0x54>
    {
      status = XMC_ETH_PHY_STATUS_OK;
 8028292:	2300      	movs	r3, #0
 8028294:	73fb      	strb	r3, [r7, #15]

  /* Check Device Identification. */
  if ((XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR1, &phy_id1) == XMC_ETH_MAC_STATUS_OK) &&
      (XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR2, &phy_id2) == XMC_ETH_MAC_STATUS_OK))
  {
    if ((phy_id1 == PHY_ID1) && ((phy_id2 & (uint16_t)0xfff0) == PHY_ID2))
 8028296:	e004      	b.n	80282a2 <XMC_ETH_PHY_IsDeviceIdValid+0x5e>
    {
      status = XMC_ETH_PHY_STATUS_OK;
    }
    else
    {
      status = XMC_ETH_PHY_STATUS_ERROR_DEVICE_ID;
 8028298:	2303      	movs	r3, #3
 802829a:	73fb      	strb	r3, [r7, #15]

  /* Check Device Identification. */
  if ((XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR1, &phy_id1) == XMC_ETH_MAC_STATUS_OK) &&
      (XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR2, &phy_id2) == XMC_ETH_MAC_STATUS_OK))
  {
    if ((phy_id1 == PHY_ID1) && ((phy_id2 & (uint16_t)0xfff0) == PHY_ID2))
 802829c:	e001      	b.n	80282a2 <XMC_ETH_PHY_IsDeviceIdValid+0x5e>
      status = XMC_ETH_PHY_STATUS_ERROR_DEVICE_ID;
    }
  }
  else
  {
    status = XMC_ETH_PHY_STATUS_ERROR_TIMEOUT;
 802829e:	2304      	movs	r3, #4
 80282a0:	73fb      	strb	r3, [r7, #15]
  }

  return (int32_t)status;
 80282a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80282a4:	4618      	mov	r0, r3
 80282a6:	3710      	adds	r7, #16
 80282a8:	46bd      	mov	sp, r7
 80282aa:	bd80      	pop	{r7, pc}

080282ac <XMC_ETH_PHY_Init>:

/* PHY initialize */
int32_t XMC_ETH_PHY_Init(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr, const XMC_ETH_PHY_CONFIG_t *const config)
{
 80282ac:	b580      	push	{r7, lr}
 80282ae:	b086      	sub	sp, #24
 80282b0:	af00      	add	r7, sp, #0
 80282b2:	60f8      	str	r0, [r7, #12]
 80282b4:	460b      	mov	r3, r1
 80282b6:	607a      	str	r2, [r7, #4]
 80282b8:	72fb      	strb	r3, [r7, #11]
  int32_t status;
  uint16_t reg_bmcr;

  status = XMC_ETH_PHY_IsDeviceIdValid(eth_mac, phy_addr);
 80282ba:	7afb      	ldrb	r3, [r7, #11]
 80282bc:	68f8      	ldr	r0, [r7, #12]
 80282be:	4619      	mov	r1, r3
 80282c0:	f7ff ffc0 	bl	8028244 <XMC_ETH_PHY_IsDeviceIdValid>
 80282c4:	6178      	str	r0, [r7, #20]

  if (status == (int32_t)XMC_ETH_PHY_STATUS_OK)
 80282c6:	697b      	ldr	r3, [r7, #20]
 80282c8:	2b00      	cmp	r3, #0
 80282ca:	d135      	bne.n	8028338 <XMC_ETH_PHY_Init+0x8c>
  {
    status = XMC_ETH_PHY_Reset(eth_mac, phy_addr);
 80282cc:	7afb      	ldrb	r3, [r7, #11]
 80282ce:	68f8      	ldr	r0, [r7, #12]
 80282d0:	4619      	mov	r1, r3
 80282d2:	f000 f837 	bl	8028344 <XMC_ETH_PHY_Reset>
 80282d6:	6178      	str	r0, [r7, #20]
    
    if (status == (int32_t)XMC_ETH_PHY_STATUS_OK)
 80282d8:	697b      	ldr	r3, [r7, #20]
 80282da:	2b00      	cmp	r3, #0
 80282dc:	d12c      	bne.n	8028338 <XMC_ETH_PHY_Init+0x8c>
    {
      reg_bmcr = 0U;
 80282de:	2300      	movs	r3, #0
 80282e0:	827b      	strh	r3, [r7, #18]
      if (config->speed == XMC_ETH_LINK_SPEED_100M)
 80282e2:	687b      	ldr	r3, [r7, #4]
 80282e4:	885b      	ldrh	r3, [r3, #2]
 80282e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80282ea:	d103      	bne.n	80282f4 <XMC_ETH_PHY_Init+0x48>
      {
        reg_bmcr |= BMCR_SPEED_SEL;
 80282ec:	8a7b      	ldrh	r3, [r7, #18]
 80282ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80282f2:	827b      	strh	r3, [r7, #18]
      }

      if (config->duplex == XMC_ETH_LINK_DUPLEX_FULL)
 80282f4:	687b      	ldr	r3, [r7, #4]
 80282f6:	889b      	ldrh	r3, [r3, #4]
 80282f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80282fc:	d103      	bne.n	8028306 <XMC_ETH_PHY_Init+0x5a>
      {
        reg_bmcr |= BMCR_DUPLEX;
 80282fe:	8a7b      	ldrh	r3, [r7, #18]
 8028300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8028304:	827b      	strh	r3, [r7, #18]
      }

      if (config->enable_auto_negotiate == true)
 8028306:	687b      	ldr	r3, [r7, #4]
 8028308:	799b      	ldrb	r3, [r3, #6]
 802830a:	2b00      	cmp	r3, #0
 802830c:	d003      	beq.n	8028316 <XMC_ETH_PHY_Init+0x6a>
      {
        reg_bmcr |= BMCR_ANEG_EN;
 802830e:	8a7b      	ldrh	r3, [r7, #18]
 8028310:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8028314:	827b      	strh	r3, [r7, #18]
      }

      if (config->enable_loop_back == true)
 8028316:	687b      	ldr	r3, [r7, #4]
 8028318:	79db      	ldrb	r3, [r3, #7]
 802831a:	2b00      	cmp	r3, #0
 802831c:	d003      	beq.n	8028326 <XMC_ETH_PHY_Init+0x7a>
      {
        reg_bmcr |= BMCR_LOOPBACK;
 802831e:	8a7b      	ldrh	r3, [r7, #18]
 8028320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8028324:	827b      	strh	r3, [r7, #18]
      }

      status = (int32_t)XMC_ETH_MAC_WritePhy(eth_mac, phy_addr, REG_BMCR, reg_bmcr);
 8028326:	7afa      	ldrb	r2, [r7, #11]
 8028328:	8a7b      	ldrh	r3, [r7, #18]
 802832a:	68f8      	ldr	r0, [r7, #12]
 802832c:	4611      	mov	r1, r2
 802832e:	2200      	movs	r2, #0
 8028330:	f7f9 fd7a 	bl	8021e28 <XMC_ETH_MAC_WritePhy>
 8028334:	4603      	mov	r3, r0
 8028336:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8028338:	697b      	ldr	r3, [r7, #20]
}
 802833a:	4618      	mov	r0, r3
 802833c:	3718      	adds	r7, #24
 802833e:	46bd      	mov	sp, r7
 8028340:	bd80      	pop	{r7, pc}
 8028342:	bf00      	nop

08028344 <XMC_ETH_PHY_Reset>:

/* Reset */
int32_t XMC_ETH_PHY_Reset(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 8028344:	b580      	push	{r7, lr}
 8028346:	b084      	sub	sp, #16
 8028348:	af00      	add	r7, sp, #0
 802834a:	6078      	str	r0, [r7, #4]
 802834c:	460b      	mov	r3, r1
 802834e:	70fb      	strb	r3, [r7, #3]
  int32_t status;
  uint16_t reg_bmcr;

  /* Reset PHY*/
  status = (int32_t)XMC_ETH_MAC_WritePhy(eth_mac, phy_addr, REG_BMCR, BMCR_RESET);
 8028350:	78fb      	ldrb	r3, [r7, #3]
 8028352:	6878      	ldr	r0, [r7, #4]
 8028354:	4619      	mov	r1, r3
 8028356:	2200      	movs	r2, #0
 8028358:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802835c:	f7f9 fd64 	bl	8021e28 <XMC_ETH_MAC_WritePhy>
 8028360:	4603      	mov	r3, r0
 8028362:	60fb      	str	r3, [r7, #12]
  if (status == (int32_t)XMC_ETH_PHY_STATUS_OK)
 8028364:	68fb      	ldr	r3, [r7, #12]
 8028366:	2b00      	cmp	r3, #0
 8028368:	d10e      	bne.n	8028388 <XMC_ETH_PHY_Reset+0x44>
  {      
    /* Wait for the reset to complete */
    do 
    {
      status = XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_BMCR, &reg_bmcr);
 802836a:	78fa      	ldrb	r2, [r7, #3]
 802836c:	f107 030a 	add.w	r3, r7, #10
 8028370:	6878      	ldr	r0, [r7, #4]
 8028372:	4611      	mov	r1, r2
 8028374:	2200      	movs	r2, #0
 8028376:	f7f9 fd1d 	bl	8021db4 <XMC_ETH_MAC_ReadPhy>
 802837a:	4603      	mov	r3, r0
 802837c:	60fb      	str	r3, [r7, #12]
    } while ((reg_bmcr & BMCR_RESET) != 0);
 802837e:	897b      	ldrh	r3, [r7, #10]
 8028380:	b29b      	uxth	r3, r3
 8028382:	b21b      	sxth	r3, r3
 8028384:	2b00      	cmp	r3, #0
 8028386:	dbf0      	blt.n	802836a <XMC_ETH_PHY_Reset+0x26>
  }
    
  return status;
 8028388:	68fb      	ldr	r3, [r7, #12]
}
 802838a:	4618      	mov	r0, r3
 802838c:	3710      	adds	r7, #16
 802838e:	46bd      	mov	sp, r7
 8028390:	bd80      	pop	{r7, pc}
 8028392:	bf00      	nop

08028394 <XMC_ETH_PHY_GetLinkStatus>:
  return status;
}

/* Get link status */
XMC_ETH_LINK_STATUS_t XMC_ETH_PHY_GetLinkStatus(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 8028394:	b580      	push	{r7, lr}
 8028396:	b084      	sub	sp, #16
 8028398:	af00      	add	r7, sp, #0
 802839a:	6078      	str	r0, [r7, #4]
 802839c:	460b      	mov	r3, r1
 802839e:	70fb      	strb	r3, [r7, #3]
  uint16_t val;

  XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_BMSR, &val);
 80283a0:	78fa      	ldrb	r2, [r7, #3]
 80283a2:	f107 030e 	add.w	r3, r7, #14
 80283a6:	6878      	ldr	r0, [r7, #4]
 80283a8:	4611      	mov	r1, r2
 80283aa:	2201      	movs	r2, #1
 80283ac:	f7f9 fd02 	bl	8021db4 <XMC_ETH_MAC_ReadPhy>

  return (XMC_ETH_LINK_STATUS_t)((val & BMSR_LINK_STAT) ? XMC_ETH_LINK_STATUS_UP : XMC_ETH_LINK_STATUS_DOWN);
 80283b0:	89fb      	ldrh	r3, [r7, #14]
 80283b2:	f003 0304 	and.w	r3, r3, #4
 80283b6:	2b00      	cmp	r3, #0
 80283b8:	d001      	beq.n	80283be <XMC_ETH_PHY_GetLinkStatus+0x2a>
 80283ba:	2301      	movs	r3, #1
 80283bc:	e000      	b.n	80283c0 <XMC_ETH_PHY_GetLinkStatus+0x2c>
 80283be:	2300      	movs	r3, #0
}
 80283c0:	4618      	mov	r0, r3
 80283c2:	3710      	adds	r7, #16
 80283c4:	46bd      	mov	sp, r7
 80283c6:	bd80      	pop	{r7, pc}

080283c8 <XMC_ETH_PHY_GetLinkSpeed>:

/* Get link speed */
XMC_ETH_LINK_SPEED_t XMC_ETH_PHY_GetLinkSpeed(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 80283c8:	b580      	push	{r7, lr}
 80283ca:	b084      	sub	sp, #16
 80283cc:	af00      	add	r7, sp, #0
 80283ce:	6078      	str	r0, [r7, #4]
 80283d0:	460b      	mov	r3, r1
 80283d2:	70fb      	strb	r3, [r7, #3]
  uint16_t val;

  XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYCTRL1, &val);
 80283d4:	78fa      	ldrb	r2, [r7, #3]
 80283d6:	f107 030e 	add.w	r3, r7, #14
 80283da:	6878      	ldr	r0, [r7, #4]
 80283dc:	4611      	mov	r1, r2
 80283de:	221e      	movs	r2, #30
 80283e0:	f7f9 fce8 	bl	8021db4 <XMC_ETH_MAC_ReadPhy>

  return (XMC_ETH_LINK_SPEED_t)(((val & PHYCTRL1_OPMODE_SPEED) - 1U) ? XMC_ETH_LINK_SPEED_100M : XMC_ETH_LINK_SPEED_10M);
 80283e4:	89fb      	ldrh	r3, [r7, #14]
 80283e6:	f003 0303 	and.w	r3, r3, #3
 80283ea:	2b01      	cmp	r3, #1
 80283ec:	d002      	beq.n	80283f4 <XMC_ETH_PHY_GetLinkSpeed+0x2c>
 80283ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80283f2:	e000      	b.n	80283f6 <XMC_ETH_PHY_GetLinkSpeed+0x2e>
 80283f4:	2300      	movs	r3, #0
}
 80283f6:	4618      	mov	r0, r3
 80283f8:	3710      	adds	r7, #16
 80283fa:	46bd      	mov	sp, r7
 80283fc:	bd80      	pop	{r7, pc}
 80283fe:	bf00      	nop

08028400 <XMC_ETH_PHY_GetLinkDuplex>:

/* Get link duplex settings */
XMC_ETH_LINK_DUPLEX_t XMC_ETH_PHY_GetLinkDuplex(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 8028400:	b580      	push	{r7, lr}
 8028402:	b084      	sub	sp, #16
 8028404:	af00      	add	r7, sp, #0
 8028406:	6078      	str	r0, [r7, #4]
 8028408:	460b      	mov	r3, r1
 802840a:	70fb      	strb	r3, [r7, #3]
  uint16_t val;

  XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYCTRL1, &val);
 802840c:	78fa      	ldrb	r2, [r7, #3]
 802840e:	f107 030e 	add.w	r3, r7, #14
 8028412:	6878      	ldr	r0, [r7, #4]
 8028414:	4611      	mov	r1, r2
 8028416:	221e      	movs	r2, #30
 8028418:	f7f9 fccc 	bl	8021db4 <XMC_ETH_MAC_ReadPhy>

  return (XMC_ETH_LINK_DUPLEX_t)((val & PHYCTRL1_OPMODE_DUPLEX) ? XMC_ETH_LINK_DUPLEX_FULL : XMC_ETH_LINK_DUPLEX_HALF);
 802841c:	89fb      	ldrh	r3, [r7, #14]
 802841e:	f003 0304 	and.w	r3, r3, #4
 8028422:	2b00      	cmp	r3, #0
 8028424:	d002      	beq.n	802842c <XMC_ETH_PHY_GetLinkDuplex+0x2c>
 8028426:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802842a:	e000      	b.n	802842e <XMC_ETH_PHY_GetLinkDuplex+0x2e>
 802842c:	2300      	movs	r3, #0
}
 802842e:	4618      	mov	r0, r3
 8028430:	3710      	adds	r7, #16
 8028432:	46bd      	mov	sp, r7
 8028434:	bd80      	pop	{r7, pc}
 8028436:	bf00      	nop

08028438 <XMC_ETH_PHY_IsAutonegotiationCompleted>:

bool XMC_ETH_PHY_IsAutonegotiationCompleted(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 8028438:	b580      	push	{r7, lr}
 802843a:	b084      	sub	sp, #16
 802843c:	af00      	add	r7, sp, #0
 802843e:	6078      	str	r0, [r7, #4]
 8028440:	460b      	mov	r3, r1
 8028442:	70fb      	strb	r3, [r7, #3]
  uint16_t val;

  XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_BMSR, &val);
 8028444:	78fa      	ldrb	r2, [r7, #3]
 8028446:	f107 030e 	add.w	r3, r7, #14
 802844a:	6878      	ldr	r0, [r7, #4]
 802844c:	4611      	mov	r1, r2
 802844e:	2201      	movs	r2, #1
 8028450:	f7f9 fcb0 	bl	8021db4 <XMC_ETH_MAC_ReadPhy>
  return ((val & BMSR_ANEG_COMPL) == BMSR_ANEG_COMPL);
 8028454:	89fb      	ldrh	r3, [r7, #14]
 8028456:	f003 0320 	and.w	r3, r3, #32
 802845a:	2b00      	cmp	r3, #0
 802845c:	bf14      	ite	ne
 802845e:	2301      	movne	r3, #1
 8028460:	2300      	moveq	r3, #0
 8028462:	b2db      	uxtb	r3, r3
}
 8028464:	4618      	mov	r0, r3
 8028466:	3710      	adds	r7, #16
 8028468:	46bd      	mov	sp, r7
 802846a:	bd80      	pop	{r7, pc}

0802846c <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 802846c:	b580      	push	{r7, lr}
 802846e:	b082      	sub	sp, #8
 8028470:	af00      	add	r7, sp, #0
 8028472:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8028474:	687b      	ldr	r3, [r7, #4]
 8028476:	6819      	ldr	r1, [r3, #0]
 8028478:	687b      	ldr	r3, [r7, #4]
 802847a:	7c1a      	ldrb	r2, [r3, #16]
 802847c:	687b      	ldr	r3, [r7, #4]
 802847e:	3304      	adds	r3, #4
 8028480:	4608      	mov	r0, r1
 8028482:	4611      	mov	r1, r2
 8028484:	461a      	mov	r2, r3
 8028486:	f7f7 ff31 	bl	80202ec <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 802848a:	687b      	ldr	r3, [r7, #4]
 802848c:	6819      	ldr	r1, [r3, #0]
 802848e:	687b      	ldr	r3, [r7, #4]
 8028490:	7c1a      	ldrb	r2, [r3, #16]
 8028492:	687b      	ldr	r3, [r7, #4]
 8028494:	7c5b      	ldrb	r3, [r3, #17]
 8028496:	4608      	mov	r0, r1
 8028498:	4611      	mov	r1, r2
 802849a:	461a      	mov	r2, r3
 802849c:	f7f9 fe52 	bl	8022144 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 80284a0:	2300      	movs	r3, #0
}
 80284a2:	4618      	mov	r0, r3
 80284a4:	3708      	adds	r7, #8
 80284a6:	46bd      	mov	sp, r7
 80284a8:	bd80      	pop	{r7, pc}
 80284aa:	bf00      	nop

080284ac <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80284ac:	b480      	push	{r7}
 80284ae:	b085      	sub	sp, #20
 80284b0:	af00      	add	r7, sp, #0
 80284b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80284b4:	687b      	ldr	r3, [r7, #4]
 80284b6:	f003 0307 	and.w	r3, r3, #7
 80284ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80284bc:	4b0c      	ldr	r3, [pc, #48]	; (80284f0 <NVIC_SetPriorityGrouping+0x44>)
 80284be:	68db      	ldr	r3, [r3, #12]
 80284c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80284c2:	68ba      	ldr	r2, [r7, #8]
 80284c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80284c8:	4013      	ands	r3, r2
 80284ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80284cc:	68fb      	ldr	r3, [r7, #12]
 80284ce:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80284d0:	68bb      	ldr	r3, [r7, #8]
 80284d2:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80284d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80284d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80284dc:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80284de:	4a04      	ldr	r2, [pc, #16]	; (80284f0 <NVIC_SetPriorityGrouping+0x44>)
 80284e0:	68bb      	ldr	r3, [r7, #8]
 80284e2:	60d3      	str	r3, [r2, #12]
}
 80284e4:	3714      	adds	r7, #20
 80284e6:	46bd      	mov	sp, r7
 80284e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80284ec:	4770      	bx	lr
 80284ee:	bf00      	nop
 80284f0:	e000ed00 	.word	0xe000ed00

080284f4 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 80284f4:	b580      	push	{r7, lr}
 80284f6:	b082      	sub	sp, #8
 80284f8:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 80284fa:	2001      	movs	r0, #1
 80284fc:	f7ff ffd6 	bl	80284ac <NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8028500:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8028502:	4b21      	ldr	r3, [pc, #132]	; (8028588 <SystemCoreSetup+0x94>)
 8028504:	4a21      	ldr	r2, [pc, #132]	; (802858c <SystemCoreSetup+0x98>)
 8028506:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8028508:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 802850c:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 802850e:	4a1e      	ldr	r2, [pc, #120]	; (8028588 <SystemCoreSetup+0x94>)
 8028510:	4b1d      	ldr	r3, [pc, #116]	; (8028588 <SystemCoreSetup+0x94>)
 8028512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8028516:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802851a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 802851e:	4b1c      	ldr	r3, [pc, #112]	; (8028590 <SystemCoreSetup+0x9c>)
 8028520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8028524:	3314      	adds	r3, #20
 8028526:	681b      	ldr	r3, [r3, #0]
 8028528:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 802852a:	687b      	ldr	r3, [r7, #4]
 802852c:	f023 030f 	bic.w	r3, r3, #15
 8028530:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8028532:	687b      	ldr	r3, [r7, #4]
 8028534:	f043 0304 	orr.w	r3, r3, #4
 8028538:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 802853a:	4b15      	ldr	r3, [pc, #84]	; (8028590 <SystemCoreSetup+0x9c>)
 802853c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8028540:	3314      	adds	r3, #20
 8028542:	687a      	ldr	r2, [r7, #4]
 8028544:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8028546:	4a10      	ldr	r2, [pc, #64]	; (8028588 <SystemCoreSetup+0x94>)
 8028548:	4b0f      	ldr	r3, [pc, #60]	; (8028588 <SystemCoreSetup+0x94>)
 802854a:	695b      	ldr	r3, [r3, #20]
 802854c:	f023 0310 	bic.w	r3, r3, #16
 8028550:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8028552:	4a0d      	ldr	r2, [pc, #52]	; (8028588 <SystemCoreSetup+0x94>)
 8028554:	4b0c      	ldr	r3, [pc, #48]	; (8028588 <SystemCoreSetup+0x94>)
 8028556:	695b      	ldr	r3, [r3, #20]
 8028558:	f023 0308 	bic.w	r3, r3, #8
 802855c:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 802855e:	4a0a      	ldr	r2, [pc, #40]	; (8028588 <SystemCoreSetup+0x94>)
 8028560:	4b09      	ldr	r3, [pc, #36]	; (8028588 <SystemCoreSetup+0x94>)
 8028562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8028568:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 802856a:	4a07      	ldr	r2, [pc, #28]	; (8028588 <SystemCoreSetup+0x94>)
 802856c:	4b06      	ldr	r3, [pc, #24]	; (8028588 <SystemCoreSetup+0x94>)
 802856e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028570:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8028574:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8028576:	4a04      	ldr	r2, [pc, #16]	; (8028588 <SystemCoreSetup+0x94>)
 8028578:	4b03      	ldr	r3, [pc, #12]	; (8028588 <SystemCoreSetup+0x94>)
 802857a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802857c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8028580:	6253      	str	r3, [r2, #36]	; 0x24
}
 8028582:	3708      	adds	r7, #8
 8028584:	46bd      	mov	sp, r7
 8028586:	bd80      	pop	{r7, pc}
 8028588:	e000ed00 	.word	0xe000ed00
 802858c:	08000000 	.word	0x08000000
 8028590:	58001000 	.word	0x58001000

08028594 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8028594:	b480      	push	{r7}
 8028596:	b085      	sub	sp, #20
 8028598:	af00      	add	r7, sp, #0
 802859a:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 802859c:	2300      	movs	r3, #0
 802859e:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 80285a0:	687b      	ldr	r3, [r7, #4]
 80285a2:	2201      	movs	r2, #1
 80285a4:	701a      	strb	r2, [r3, #0]

  return (status);
 80285a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80285a8:	4618      	mov	r0, r3
 80285aa:	3714      	adds	r7, #20
 80285ac:	46bd      	mov	sp, r7
 80285ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80285b2:	4770      	bx	lr

080285b4 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 80285b4:	b480      	push	{r7}
 80285b6:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 80285b8:	4b02      	ldr	r3, [pc, #8]	; (80285c4 <OSCHP_GetFrequency+0x10>)
}
 80285ba:	4618      	mov	r0, r3
 80285bc:	46bd      	mov	sp, r7
 80285be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80285c2:	4770      	bx	lr
 80285c4:	00b71b00 	.word	0x00b71b00

080285c8 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80285c8:	b5b0      	push	{r4, r5, r7, lr}
 80285ca:	b086      	sub	sp, #24
 80285cc:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 80285ce:	4b12      	ldr	r3, [pc, #72]	; (8028618 <SystemCoreClockSetup+0x50>)
 80285d0:	1d3c      	adds	r4, r7, #4
 80285d2:	461d      	mov	r5, r3
 80285d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80285d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80285d8:	682b      	ldr	r3, [r5, #0]
 80285da:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 80285dc:	1d3b      	adds	r3, r7, #4
 80285de:	4618      	mov	r0, r3
 80285e0:	f7f7 ff52 	bl	8020488 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 80285e4:	2000      	movs	r0, #0
 80285e6:	f7f8 f86b 	bl	80206c0 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 80285ea:	2000      	movs	r0, #0
 80285ec:	f7f8 f820 	bl	8020630 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 80285f0:	2004      	movs	r0, #4
 80285f2:	f7f8 f8f1 	bl	80207d8 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 80285f6:	2001      	movs	r0, #1
 80285f8:	2120      	movs	r1, #32
 80285fa:	f7f8 f979 	bl	80208f0 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 80285fe:	2000      	movs	r0, #0
 8028600:	f7f8 f82a 	bl	8020658 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8028604:	2001      	movs	r0, #1
 8028606:	f7f8 f90f 	bl	8020828 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 802860a:	2001      	movs	r0, #1
 802860c:	f7f8 f8f8 	bl	8020800 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8028610:	3718      	adds	r7, #24
 8028612:	46bd      	mov	sp, r7
 8028614:	bdb0      	pop	{r4, r5, r7, pc}
 8028616:	bf00      	nop
 8028618:	0802a034 	.word	0x0802a034

0802861c <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 802861c:	b580      	push	{r7, lr}
 802861e:	b082      	sub	sp, #8
 8028620:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8028622:	2300      	movs	r3, #0
 8028624:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8028626:	4835      	ldr	r0, [pc, #212]	; (80286fc <DAVE_Init+0xe0>)
 8028628:	f7ff ffb4 	bl	8028594 <CLOCK_XMC4_Init>
 802862c:	4603      	mov	r3, r0
 802862e:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8028630:	79fb      	ldrb	r3, [r7, #7]
 8028632:	2b00      	cmp	r3, #0
 8028634:	d104      	bne.n	8028640 <DAVE_Init+0x24>
  {
	 /**  Initialization of ETH_LWIP APP instance ETH_LWIP_0 */
	 init_status = (DAVE_STATUS_t)ETH_LWIP_Init(&ETH_LWIP_0); 
 8028636:	4832      	ldr	r0, [pc, #200]	; (8028700 <DAVE_Init+0xe4>)
 8028638:	f7ff fdb0 	bl	802819c <ETH_LWIP_Init>
 802863c:	4603      	mov	r3, r0
 802863e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8028640:	79fb      	ldrb	r3, [r7, #7]
 8028642:	2b00      	cmp	r3, #0
 8028644:	d104      	bne.n	8028650 <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED_INDICATOR */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_INDICATOR); 
 8028646:	482f      	ldr	r0, [pc, #188]	; (8028704 <DAVE_Init+0xe8>)
 8028648:	f7ff ff10 	bl	802846c <DIGITAL_IO_Init>
 802864c:	4603      	mov	r3, r0
 802864e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8028650:	79fb      	ldrb	r3, [r7, #7]
 8028652:	2b00      	cmp	r3, #0
 8028654:	d104      	bne.n	8028660 <DAVE_Init+0x44>
  {
	 /**  Initialization of SPI_MASTER APP instance SPI_MASTER_ADC */
	 init_status = (DAVE_STATUS_t)SPI_MASTER_Init(&SPI_MASTER_ADC); 
 8028656:	482c      	ldr	r0, [pc, #176]	; (8028708 <DAVE_Init+0xec>)
 8028658:	f7fa fcc6 	bl	8022fe8 <SPI_MASTER_Init>
 802865c:	4603      	mov	r3, r0
 802865e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8028660:	79fb      	ldrb	r3, [r7, #7]
 8028662:	2b00      	cmp	r3, #0
 8028664:	d104      	bne.n	8028670 <DAVE_Init+0x54>
  {
	 /**  Initialization of TIMER APP instance TIMER_TC */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_TC); 
 8028666:	4829      	ldr	r0, [pc, #164]	; (802870c <DAVE_Init+0xf0>)
 8028668:	f7f9 fffe 	bl	8022668 <TIMER_Init>
 802866c:	4603      	mov	r3, r0
 802866e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8028670:	79fb      	ldrb	r3, [r7, #7]
 8028672:	2b00      	cmp	r3, #0
 8028674:	d104      	bne.n	8028680 <DAVE_Init+0x64>
  {
	 /**  Initialization of TIMER APP instance TIMER_TIMESTAMP */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_TIMESTAMP); 
 8028676:	4826      	ldr	r0, [pc, #152]	; (8028710 <DAVE_Init+0xf4>)
 8028678:	f7f9 fff6 	bl	8022668 <TIMER_Init>
 802867c:	4603      	mov	r3, r0
 802867e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8028680:	79fb      	ldrb	r3, [r7, #7]
 8028682:	2b00      	cmp	r3, #0
 8028684:	d104      	bne.n	8028690 <DAVE_Init+0x74>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance PIN_INTERRUPT_ADC0 */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&PIN_INTERRUPT_ADC0); 
 8028686:	4823      	ldr	r0, [pc, #140]	; (8028714 <DAVE_Init+0xf8>)
 8028688:	f7fb fa70 	bl	8023b6c <PIN_INTERRUPT_Init>
 802868c:	4603      	mov	r3, r0
 802868e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8028690:	79fb      	ldrb	r3, [r7, #7]
 8028692:	2b00      	cmp	r3, #0
 8028694:	d104      	bne.n	80286a0 <DAVE_Init+0x84>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance PIN_INTERRUPT_ADC1 */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&PIN_INTERRUPT_ADC1); 
 8028696:	4820      	ldr	r0, [pc, #128]	; (8028718 <DAVE_Init+0xfc>)
 8028698:	f7fb fa68 	bl	8023b6c <PIN_INTERRUPT_Init>
 802869c:	4603      	mov	r3, r0
 802869e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80286a0:	79fb      	ldrb	r3, [r7, #7]
 80286a2:	2b00      	cmp	r3, #0
 80286a4:	d104      	bne.n	80286b0 <DAVE_Init+0x94>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_TC */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_TC); 
 80286a6:	481d      	ldr	r0, [pc, #116]	; (802871c <DAVE_Init+0x100>)
 80286a8:	f7fb fb40 	bl	8023d2c <INTERRUPT_Init>
 80286ac:	4603      	mov	r3, r0
 80286ae:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80286b0:	79fb      	ldrb	r3, [r7, #7]
 80286b2:	2b00      	cmp	r3, #0
 80286b4:	d104      	bne.n	80286c0 <DAVE_Init+0xa4>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_TIMESTAMP */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_TIMESTAMP); 
 80286b6:	481a      	ldr	r0, [pc, #104]	; (8028720 <DAVE_Init+0x104>)
 80286b8:	f7fb fb38 	bl	8023d2c <INTERRUPT_Init>
 80286bc:	4603      	mov	r3, r0
 80286be:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80286c0:	79fb      	ldrb	r3, [r7, #7]
 80286c2:	2b00      	cmp	r3, #0
 80286c4:	d104      	bne.n	80286d0 <DAVE_Init+0xb4>
  {
	 /**  Initialization of SPI_MASTER APP instance SPI_MASTER_TC */
	 init_status = (DAVE_STATUS_t)SPI_MASTER_Init(&SPI_MASTER_TC); 
 80286c6:	4817      	ldr	r0, [pc, #92]	; (8028724 <DAVE_Init+0x108>)
 80286c8:	f7fa fc8e 	bl	8022fe8 <SPI_MASTER_Init>
 80286cc:	4603      	mov	r3, r0
 80286ce:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80286d0:	79fb      	ldrb	r3, [r7, #7]
 80286d2:	2b00      	cmp	r3, #0
 80286d4:	d104      	bne.n	80286e0 <DAVE_Init+0xc4>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_ETH */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_ETH); 
 80286d6:	4814      	ldr	r0, [pc, #80]	; (8028728 <DAVE_Init+0x10c>)
 80286d8:	f7fb fb28 	bl	8023d2c <INTERRUPT_Init>
 80286dc:	4603      	mov	r3, r0
 80286de:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80286e0:	79fb      	ldrb	r3, [r7, #7]
 80286e2:	2b00      	cmp	r3, #0
 80286e4:	d104      	bne.n	80286f0 <DAVE_Init+0xd4>
  {
	 /**  Initialization of E_EEPROM_XMC4 APP instance E_EEPROM_XMC4_0 */
	 init_status = (DAVE_STATUS_t)E_EEPROM_XMC4_Init(&E_EEPROM_XMC4_0); 
 80286e6:	4811      	ldr	r0, [pc, #68]	; (802872c <DAVE_Init+0x110>)
 80286e8:	f7fb fc8e 	bl	8024008 <E_EEPROM_XMC4_Init>
 80286ec:	4603      	mov	r3, r0
 80286ee:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 80286f0:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80286f2:	4618      	mov	r0, r3
 80286f4:	3708      	adds	r7, #8
 80286f6:	46bd      	mov	sp, r7
 80286f8:	bd80      	pop	{r7, pc}
 80286fa:	bf00      	nop
 80286fc:	1fff0068 	.word	0x1fff0068
 8028700:	1fff005c 	.word	0x1fff005c
 8028704:	0802a020 	.word	0x0802a020
 8028708:	1ffe8900 	.word	0x1ffe8900
 802870c:	1ffe8808 	.word	0x1ffe8808
 8028710:	1ffe8838 	.word	0x1ffe8838
 8028714:	08029f8c 	.word	0x08029f8c
 8028718:	08029fb0 	.word	0x08029fb0
 802871c:	08029fd4 	.word	0x08029fd4
 8028720:	08029fd8 	.word	0x08029fd8
 8028724:	1ffe89bc 	.word	0x1ffe89bc
 8028728:	08029fdc 	.word	0x08029fdc
 802872c:	1ffe9b34 	.word	0x1ffe9b34

08028730 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8028730:	b480      	push	{r7}
 8028732:	b083      	sub	sp, #12
 8028734:	af00      	add	r7, sp, #0
 8028736:	4603      	mov	r3, r0
 8028738:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 802873a:	4908      	ldr	r1, [pc, #32]	; (802875c <NVIC_EnableIRQ+0x2c>)
 802873c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8028740:	095b      	lsrs	r3, r3, #5
 8028742:	79fa      	ldrb	r2, [r7, #7]
 8028744:	f002 021f 	and.w	r2, r2, #31
 8028748:	2001      	movs	r0, #1
 802874a:	fa00 f202 	lsl.w	r2, r0, r2
 802874e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8028752:	370c      	adds	r7, #12
 8028754:	46bd      	mov	sp, r7
 8028756:	f85d 7b04 	ldr.w	r7, [sp], #4
 802875a:	4770      	bx	lr
 802875c:	e000e100 	.word	0xe000e100

08028760 <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8028760:	b480      	push	{r7}
 8028762:	b083      	sub	sp, #12
 8028764:	af00      	add	r7, sp, #0
 8028766:	6078      	str	r0, [r7, #4]
 8028768:	460b      	mov	r3, r1
 802876a:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 802876c:	687b      	ldr	r3, [r7, #4]
 802876e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028770:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
 8028774:	78fb      	ldrb	r3, [r7, #3]
 8028776:	3b01      	subs	r3, #1
 8028778:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 802877a:	431a      	orrs	r2, r3
 802877c:	687b      	ldr	r3, [r7, #4]
 802877e:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
 8028780:	370c      	adds	r7, #12
 8028782:	46bd      	mov	sp, r7
 8028784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028788:	4770      	bx	lr
 802878a:	bf00      	nop

0802878c <XMC_SPI_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSelect()
 */
__STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 802878c:	b580      	push	{r7, lr}
 802878e:	b082      	sub	sp, #8
 8028790:	af00      	add	r7, sp, #0
 8028792:	6078      	str	r0, [r7, #4]
 8028794:	460b      	mov	r3, r1
 8028796:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetFrameLength(channel, frame_length);
 8028798:	78fb      	ldrb	r3, [r7, #3]
 802879a:	6878      	ldr	r0, [r7, #4]
 802879c:	4619      	mov	r1, r3
 802879e:	f7ff ffdf 	bl	8028760 <XMC_USIC_CH_SetFrameLength>
}
 80287a2:	3708      	adds	r7, #8
 80287a4:	46bd      	mov	sp, r7
 80287a6:	bd80      	pop	{r7, pc}

080287a8 <SPI_MASTER_IsRxBusy>:
 *    return 1U;
 * }
 * @endcode<BR>
 */
__STATIC_INLINE bool SPI_MASTER_IsRxBusy(const SPI_MASTER_t* const handle)
{
 80287a8:	b480      	push	{r7}
 80287aa:	b083      	sub	sp, #12
 80287ac:	af00      	add	r7, sp, #0
 80287ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("SPI_MASTER_IsTxBusy:handle NULL", (handle != NULL))
  return (handle->runtime->rx_busy);
 80287b0:	687b      	ldr	r3, [r7, #4]
 80287b2:	689b      	ldr	r3, [r3, #8]
 80287b4:	7fdb      	ldrb	r3, [r3, #31]
 80287b6:	b2db      	uxtb	r3, r3
}
 80287b8:	4618      	mov	r0, r3
 80287ba:	370c      	adds	r7, #12
 80287bc:	46bd      	mov	sp, r7
 80287be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80287c2:	4770      	bx	lr

080287c4 <SPI_MASTER_EnableSlaveSelectSignal>:
 * }
 * @endcode<BR>
 *
 */
__STATIC_INLINE void SPI_MASTER_EnableSlaveSelectSignal(const SPI_MASTER_t* handle, const SPI_MASTER_SS_SIGNAL_t slave)
{
 80287c4:	b580      	push	{r7, lr}
 80287c6:	b082      	sub	sp, #8
 80287c8:	af00      	add	r7, sp, #0
 80287ca:	6078      	str	r0, [r7, #4]
 80287cc:	460b      	mov	r3, r1
 80287ce:	70fb      	strb	r3, [r7, #3]
                                                                               (slave == SPI_MASTER_SS_SIGNAL_4) ||
                                                                               (slave == SPI_MASTER_SS_SIGNAL_5) ||
                                                                               (slave == SPI_MASTER_SS_SIGNAL_6) ||
                                                                               (slave == SPI_MASTER_SS_SIGNAL_7))
                                                                              );
    XMC_SPI_CH_EnableSlaveSelect(handle->channel, handle->config->slave_select_pin_config[slave]->slave_select_ch);
 80287d0:	687b      	ldr	r3, [r7, #4]
 80287d2:	6819      	ldr	r1, [r3, #0]
 80287d4:	687b      	ldr	r3, [r7, #4]
 80287d6:	685b      	ldr	r3, [r3, #4]
 80287d8:	78fa      	ldrb	r2, [r7, #3]
 80287da:	3214      	adds	r2, #20
 80287dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80287e0:	691b      	ldr	r3, [r3, #16]
 80287e2:	4608      	mov	r0, r1
 80287e4:	4619      	mov	r1, r3
 80287e6:	f7f9 fd03 	bl	80221f0 <XMC_SPI_CH_EnableSlaveSelect>
}
 80287ea:	3708      	adds	r7, #8
 80287ec:	46bd      	mov	sp, r7
 80287ee:	bd80      	pop	{r7, pc}

080287f0 <PIN_INTERRUPT_Enable>:
 *    return (1);
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void PIN_INTERRUPT_Enable(const PIN_INTERRUPT_t *const handle)
{
 80287f0:	b580      	push	{r7, lr}
 80287f2:	b082      	sub	sp, #8
 80287f4:	af00      	add	r7, sp, #0
 80287f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_Enable: Handler null pointer", handle != NULL);
  NVIC_EnableIRQ(handle->IRQn);
 80287f8:	687b      	ldr	r3, [r7, #4]
 80287fa:	7f1b      	ldrb	r3, [r3, #28]
 80287fc:	b25b      	sxtb	r3, r3
 80287fe:	4618      	mov	r0, r3
 8028800:	f7ff ff96 	bl	8028730 <NVIC_EnableIRQ>
}
 8028804:	3708      	adds	r7, #8
 8028806:	46bd      	mov	sp, r7
 8028808:	bd80      	pop	{r7, pc}
 802880a:	bf00      	nop

0802880c <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 802880c:	b580      	push	{r7, lr}
 802880e:	b082      	sub	sp, #8
 8028810:	af00      	add	r7, sp, #0
 8028812:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8028814:	687b      	ldr	r3, [r7, #4]
 8028816:	781b      	ldrb	r3, [r3, #0]
 8028818:	b25b      	sxtb	r3, r3
 802881a:	4618      	mov	r0, r3
 802881c:	f7ff ff88 	bl	8028730 <NVIC_EnableIRQ>
}
 8028820:	3708      	adds	r7, #8
 8028822:	46bd      	mov	sp, r7
 8028824:	bd80      	pop	{r7, pc}
 8028826:	bf00      	nop

08028828 <parse_config_commands>:
void local_udp_reset();
void tftp_err(const char* msg, ip_addr_t* addr, uint16_t port);

// parse the commands in the TFTP buffer
// returns 1 on success, 0 on failure
uint8_t parse_config_commands(ip_addr_t* addr, uint16_t port) {
 8028828:	b580      	push	{r7, lr}
 802882a:	b08c      	sub	sp, #48	; 0x30
 802882c:	af00      	add	r7, sp, #0
 802882e:	6078      	str	r0, [r7, #4]
 8028830:	460b      	mov	r3, r1
 8028832:	807b      	strh	r3, [r7, #2]
	uint8_t ret = 1;
 8028834:	2301      	movs	r3, #1
 8028836:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	size_t index = 0;
 802883a:	2300      	movs	r3, #0
 802883c:	62bb      	str	r3, [r7, #40]	; 0x28
	char* str = NULL;
 802883e:	2300      	movs	r3, #0
 8028840:	61bb      	str	r3, [r7, #24]

	while(index < tftp_buff_index) {
 8028842:	e11a      	b.n	8028a7a <parse_config_commands+0x252>
		str = (char*)&tftp_buff[index];
 8028844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028846:	4a9d      	ldr	r2, [pc, #628]	; (8028abc <parse_config_commands+0x294>)
 8028848:	4413      	add	r3, r2
 802884a:	61bb      	str	r3, [r7, #24]

		uint8_t newline = 0;
 802884c:	2300      	movs	r3, #0
 802884e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for(; index < tftp_buff_index; index++) {
 8028852:	e014      	b.n	802887e <parse_config_commands+0x56>
			if((char)tftp_buff[index] == '\n') {
 8028854:	4a99      	ldr	r2, [pc, #612]	; (8028abc <parse_config_commands+0x294>)
 8028856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028858:	4413      	add	r3, r2
 802885a:	781b      	ldrb	r3, [r3, #0]
 802885c:	2b0a      	cmp	r3, #10
 802885e:	d10b      	bne.n	8028878 <parse_config_commands+0x50>
				tftp_buff[index] = '\0';
 8028860:	4a96      	ldr	r2, [pc, #600]	; (8028abc <parse_config_commands+0x294>)
 8028862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028864:	4413      	add	r3, r2
 8028866:	2200      	movs	r2, #0
 8028868:	701a      	strb	r2, [r3, #0]
				newline = 1;
 802886a:	2301      	movs	r3, #1
 802886c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				index++;
 8028870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028872:	3301      	adds	r3, #1
 8028874:	62bb      	str	r3, [r7, #40]	; 0x28
				break;
 8028876:	e007      	b.n	8028888 <parse_config_commands+0x60>

	while(index < tftp_buff_index) {
		str = (char*)&tftp_buff[index];

		uint8_t newline = 0;
		for(; index < tftp_buff_index; index++) {
 8028878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802887a:	3301      	adds	r3, #1
 802887c:	62bb      	str	r3, [r7, #40]	; 0x28
 802887e:	4b90      	ldr	r3, [pc, #576]	; (8028ac0 <parse_config_commands+0x298>)
 8028880:	681b      	ldr	r3, [r3, #0]
 8028882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8028884:	429a      	cmp	r2, r3
 8028886:	d3e5      	bcc.n	8028854 <parse_config_commands+0x2c>
				index++;
				break;
			}
		}

		if(!newline) {
 8028888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802888c:	2b00      	cmp	r3, #0
 802888e:	d109      	bne.n	80288a4 <parse_config_commands+0x7c>
			// reached the end of the buffer with no newline
			tftp_err("command not newline terminated", addr, port);
 8028890:	887b      	ldrh	r3, [r7, #2]
 8028892:	488c      	ldr	r0, [pc, #560]	; (8028ac4 <parse_config_commands+0x29c>)
 8028894:	6879      	ldr	r1, [r7, #4]
 8028896:	461a      	mov	r2, r3
 8028898:	f000 f9f4 	bl	8028c84 <tftp_err>
			ret = 0;
 802889c:	2300      	movs	r3, #0
 802889e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80288a2:	e0f0      	b.n	8028a86 <parse_config_commands+0x25e>
		} else {
			char* val = NULL;
 80288a4:	2300      	movs	r3, #0
 80288a6:	623b      	str	r3, [r7, #32]
			for(size_t i = 0; i < strlen(str); i++) {
 80288a8:	2300      	movs	r3, #0
 80288aa:	61fb      	str	r3, [r7, #28]
 80288ac:	e013      	b.n	80288d6 <parse_config_commands+0xae>
				if(str[i] == '=') {
 80288ae:	69ba      	ldr	r2, [r7, #24]
 80288b0:	69fb      	ldr	r3, [r7, #28]
 80288b2:	4413      	add	r3, r2
 80288b4:	781b      	ldrb	r3, [r3, #0]
 80288b6:	2b3d      	cmp	r3, #61	; 0x3d
 80288b8:	d10a      	bne.n	80288d0 <parse_config_commands+0xa8>
					val = &str[i + 1];
 80288ba:	69fb      	ldr	r3, [r7, #28]
 80288bc:	3301      	adds	r3, #1
 80288be:	69ba      	ldr	r2, [r7, #24]
 80288c0:	4413      	add	r3, r2
 80288c2:	623b      	str	r3, [r7, #32]
					str[i] = '\0';
 80288c4:	69ba      	ldr	r2, [r7, #24]
 80288c6:	69fb      	ldr	r3, [r7, #28]
 80288c8:	4413      	add	r3, r2
 80288ca:	2200      	movs	r2, #0
 80288cc:	701a      	strb	r2, [r3, #0]
					break;
 80288ce:	e009      	b.n	80288e4 <parse_config_commands+0xbc>
			tftp_err("command not newline terminated", addr, port);
			ret = 0;
			break;
		} else {
			char* val = NULL;
			for(size_t i = 0; i < strlen(str); i++) {
 80288d0:	69fb      	ldr	r3, [r7, #28]
 80288d2:	3301      	adds	r3, #1
 80288d4:	61fb      	str	r3, [r7, #28]
 80288d6:	69b8      	ldr	r0, [r7, #24]
 80288d8:	f001 f956 	bl	8029b88 <strlen>
 80288dc:	4602      	mov	r2, r0
 80288de:	69fb      	ldr	r3, [r7, #28]
 80288e0:	429a      	cmp	r2, r3
 80288e2:	d8e4      	bhi.n	80288ae <parse_config_commands+0x86>
					str[i] = '\0';
					break;
				}
			}

			if(!val) {
 80288e4:	6a3b      	ldr	r3, [r7, #32]
 80288e6:	2b00      	cmp	r3, #0
 80288e8:	d109      	bne.n	80288fe <parse_config_commands+0xd6>
				tftp_err("invalid command", addr, port);
 80288ea:	887b      	ldrh	r3, [r7, #2]
 80288ec:	4876      	ldr	r0, [pc, #472]	; (8028ac8 <parse_config_commands+0x2a0>)
 80288ee:	6879      	ldr	r1, [r7, #4]
 80288f0:	461a      	mov	r2, r3
 80288f2:	f000 f9c7 	bl	8028c84 <tftp_err>
				ret = 0;
 80288f6:	2300      	movs	r3, #0
 80288f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80288fc:	e0c3      	b.n	8028a86 <parse_config_commands+0x25e>
			}

			if(strcmp(str, "ip.src") == 0) {
 80288fe:	69b8      	ldr	r0, [r7, #24]
 8028900:	4972      	ldr	r1, [pc, #456]	; (8028acc <parse_config_commands+0x2a4>)
 8028902:	f001 f937 	bl	8029b74 <strcmp>
 8028906:	4603      	mov	r3, r0
 8028908:	2b00      	cmp	r3, #0
 802890a:	d116      	bne.n	802893a <parse_config_commands+0x112>
				ip_addr_t ip;
				if(!ipaddr_aton(val, &ip)) {
 802890c:	f107 0314 	add.w	r3, r7, #20
 8028910:	6a38      	ldr	r0, [r7, #32]
 8028912:	4619      	mov	r1, r3
 8028914:	f7fd ffe6 	bl	80268e4 <ipaddr_aton>
 8028918:	4603      	mov	r3, r0
 802891a:	2b00      	cmp	r3, #0
 802891c:	d109      	bne.n	8028932 <parse_config_commands+0x10a>
					tftp_err("unable to parse ip.src", addr, port);
 802891e:	887b      	ldrh	r3, [r7, #2]
 8028920:	486b      	ldr	r0, [pc, #428]	; (8028ad0 <parse_config_commands+0x2a8>)
 8028922:	6879      	ldr	r1, [r7, #4]
 8028924:	461a      	mov	r2, r3
 8028926:	f000 f9ad 	bl	8028c84 <tftp_err>
					ret = 0;
 802892a:	2300      	movs	r3, #0
 802892c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8028930:	e0a9      	b.n	8028a86 <parse_config_commands+0x25e>
					break;
				}

				flash.src_ip = ip;
 8028932:	4a68      	ldr	r2, [pc, #416]	; (8028ad4 <parse_config_commands+0x2ac>)
 8028934:	697b      	ldr	r3, [r7, #20]
 8028936:	6013      	str	r3, [r2, #0]
 8028938:	e09f      	b.n	8028a7a <parse_config_commands+0x252>
			} else if(strcmp(str, "ip.dst") == 0) {
 802893a:	69b8      	ldr	r0, [r7, #24]
 802893c:	4966      	ldr	r1, [pc, #408]	; (8028ad8 <parse_config_commands+0x2b0>)
 802893e:	f001 f919 	bl	8029b74 <strcmp>
 8028942:	4603      	mov	r3, r0
 8028944:	2b00      	cmp	r3, #0
 8028946:	d116      	bne.n	8028976 <parse_config_commands+0x14e>
				ip_addr_t ip;
				if(!ipaddr_aton(val, &ip)) {
 8028948:	f107 0310 	add.w	r3, r7, #16
 802894c:	6a38      	ldr	r0, [r7, #32]
 802894e:	4619      	mov	r1, r3
 8028950:	f7fd ffc8 	bl	80268e4 <ipaddr_aton>
 8028954:	4603      	mov	r3, r0
 8028956:	2b00      	cmp	r3, #0
 8028958:	d109      	bne.n	802896e <parse_config_commands+0x146>
					tftp_err("unable to parse ip.dst", addr, port);
 802895a:	887b      	ldrh	r3, [r7, #2]
 802895c:	485f      	ldr	r0, [pc, #380]	; (8028adc <parse_config_commands+0x2b4>)
 802895e:	6879      	ldr	r1, [r7, #4]
 8028960:	461a      	mov	r2, r3
 8028962:	f000 f98f 	bl	8028c84 <tftp_err>
					ret = 0;
 8028966:	2300      	movs	r3, #0
 8028968:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 802896c:	e08b      	b.n	8028a86 <parse_config_commands+0x25e>
					break;
				}

				flash.dst_ip = ip;
 802896e:	4a59      	ldr	r2, [pc, #356]	; (8028ad4 <parse_config_commands+0x2ac>)
 8028970:	693b      	ldr	r3, [r7, #16]
 8028972:	6053      	str	r3, [r2, #4]
 8028974:	e081      	b.n	8028a7a <parse_config_commands+0x252>
			} else if(strcmp(str, "ip.gw") == 0) {
 8028976:	69b8      	ldr	r0, [r7, #24]
 8028978:	4959      	ldr	r1, [pc, #356]	; (8028ae0 <parse_config_commands+0x2b8>)
 802897a:	f001 f8fb 	bl	8029b74 <strcmp>
 802897e:	4603      	mov	r3, r0
 8028980:	2b00      	cmp	r3, #0
 8028982:	d116      	bne.n	80289b2 <parse_config_commands+0x18a>
				ip_addr_t ip;
				if(!ipaddr_aton(val, &ip)) {
 8028984:	f107 030c 	add.w	r3, r7, #12
 8028988:	6a38      	ldr	r0, [r7, #32]
 802898a:	4619      	mov	r1, r3
 802898c:	f7fd ffaa 	bl	80268e4 <ipaddr_aton>
 8028990:	4603      	mov	r3, r0
 8028992:	2b00      	cmp	r3, #0
 8028994:	d109      	bne.n	80289aa <parse_config_commands+0x182>
					tftp_err("unable to parse ip.gw", addr, port);
 8028996:	887b      	ldrh	r3, [r7, #2]
 8028998:	4852      	ldr	r0, [pc, #328]	; (8028ae4 <parse_config_commands+0x2bc>)
 802899a:	6879      	ldr	r1, [r7, #4]
 802899c:	461a      	mov	r2, r3
 802899e:	f000 f971 	bl	8028c84 <tftp_err>
					ret = 0;
 80289a2:	2300      	movs	r3, #0
 80289a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80289a8:	e06d      	b.n	8028a86 <parse_config_commands+0x25e>
					break;
				}

				flash.default_gw = ip;
 80289aa:	4a4a      	ldr	r2, [pc, #296]	; (8028ad4 <parse_config_commands+0x2ac>)
 80289ac:	68fb      	ldr	r3, [r7, #12]
 80289ae:	6093      	str	r3, [r2, #8]
 80289b0:	e063      	b.n	8028a7a <parse_config_commands+0x252>
			} else if(strcmp(str, "ip.subnet") == 0) {
 80289b2:	69b8      	ldr	r0, [r7, #24]
 80289b4:	494c      	ldr	r1, [pc, #304]	; (8028ae8 <parse_config_commands+0x2c0>)
 80289b6:	f001 f8dd 	bl	8029b74 <strcmp>
 80289ba:	4603      	mov	r3, r0
 80289bc:	2b00      	cmp	r3, #0
 80289be:	d116      	bne.n	80289ee <parse_config_commands+0x1c6>
				ip_addr_t ip;
				if(!ipaddr_aton(val, &ip)) {
 80289c0:	f107 0308 	add.w	r3, r7, #8
 80289c4:	6a38      	ldr	r0, [r7, #32]
 80289c6:	4619      	mov	r1, r3
 80289c8:	f7fd ff8c 	bl	80268e4 <ipaddr_aton>
 80289cc:	4603      	mov	r3, r0
 80289ce:	2b00      	cmp	r3, #0
 80289d0:	d109      	bne.n	80289e6 <parse_config_commands+0x1be>
					tftp_err("unable to parse ip.subnet", addr, port);
 80289d2:	887b      	ldrh	r3, [r7, #2]
 80289d4:	4845      	ldr	r0, [pc, #276]	; (8028aec <parse_config_commands+0x2c4>)
 80289d6:	6879      	ldr	r1, [r7, #4]
 80289d8:	461a      	mov	r2, r3
 80289da:	f000 f953 	bl	8028c84 <tftp_err>
					ret = 0;
 80289de:	2300      	movs	r3, #0
 80289e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80289e4:	e04f      	b.n	8028a86 <parse_config_commands+0x25e>
					break;
				}

				flash.subnet = ip;
 80289e6:	4a3b      	ldr	r2, [pc, #236]	; (8028ad4 <parse_config_commands+0x2ac>)
 80289e8:	68bb      	ldr	r3, [r7, #8]
 80289ea:	60d3      	str	r3, [r2, #12]
 80289ec:	e045      	b.n	8028a7a <parse_config_commands+0x252>
			} else if(strcmp(str, "udp.src") == 0) {
 80289ee:	69b8      	ldr	r0, [r7, #24]
 80289f0:	493f      	ldr	r1, [pc, #252]	; (8028af0 <parse_config_commands+0x2c8>)
 80289f2:	f001 f8bf 	bl	8029b74 <strcmp>
 80289f6:	4603      	mov	r3, r0
 80289f8:	2b00      	cmp	r3, #0
 80289fa:	d107      	bne.n	8028a0c <parse_config_commands+0x1e4>
				flash.src_port = (uint16_t)atoi(val);
 80289fc:	6a38      	ldr	r0, [r7, #32]
 80289fe:	f001 f82b 	bl	8029a58 <atoi>
 8028a02:	4603      	mov	r3, r0
 8028a04:	b29a      	uxth	r2, r3
 8028a06:	4b33      	ldr	r3, [pc, #204]	; (8028ad4 <parse_config_commands+0x2ac>)
 8028a08:	821a      	strh	r2, [r3, #16]
 8028a0a:	e036      	b.n	8028a7a <parse_config_commands+0x252>
			} else if(strcmp(str, "udp.adc0") == 0) {
 8028a0c:	69b8      	ldr	r0, [r7, #24]
 8028a0e:	4939      	ldr	r1, [pc, #228]	; (8028af4 <parse_config_commands+0x2cc>)
 8028a10:	f001 f8b0 	bl	8029b74 <strcmp>
 8028a14:	4603      	mov	r3, r0
 8028a16:	2b00      	cmp	r3, #0
 8028a18:	d107      	bne.n	8028a2a <parse_config_commands+0x202>
				flash.adc0_port = (uint16_t)atoi(val);
 8028a1a:	6a38      	ldr	r0, [r7, #32]
 8028a1c:	f001 f81c 	bl	8029a58 <atoi>
 8028a20:	4603      	mov	r3, r0
 8028a22:	b29a      	uxth	r2, r3
 8028a24:	4b2b      	ldr	r3, [pc, #172]	; (8028ad4 <parse_config_commands+0x2ac>)
 8028a26:	825a      	strh	r2, [r3, #18]
 8028a28:	e027      	b.n	8028a7a <parse_config_commands+0x252>
			} else if(strcmp(str, "udp.adc1") == 0) {
 8028a2a:	69b8      	ldr	r0, [r7, #24]
 8028a2c:	4932      	ldr	r1, [pc, #200]	; (8028af8 <parse_config_commands+0x2d0>)
 8028a2e:	f001 f8a1 	bl	8029b74 <strcmp>
 8028a32:	4603      	mov	r3, r0
 8028a34:	2b00      	cmp	r3, #0
 8028a36:	d107      	bne.n	8028a48 <parse_config_commands+0x220>
				flash.adc1_port = (uint16_t)atoi(val);
 8028a38:	6a38      	ldr	r0, [r7, #32]
 8028a3a:	f001 f80d 	bl	8029a58 <atoi>
 8028a3e:	4603      	mov	r3, r0
 8028a40:	b29a      	uxth	r2, r3
 8028a42:	4b24      	ldr	r3, [pc, #144]	; (8028ad4 <parse_config_commands+0x2ac>)
 8028a44:	829a      	strh	r2, [r3, #20]
 8028a46:	e018      	b.n	8028a7a <parse_config_commands+0x252>
			} else if(strcmp(str, "udp.tc") == 0) {
 8028a48:	69b8      	ldr	r0, [r7, #24]
 8028a4a:	492c      	ldr	r1, [pc, #176]	; (8028afc <parse_config_commands+0x2d4>)
 8028a4c:	f001 f892 	bl	8029b74 <strcmp>
 8028a50:	4603      	mov	r3, r0
 8028a52:	2b00      	cmp	r3, #0
 8028a54:	d107      	bne.n	8028a66 <parse_config_commands+0x23e>
				flash.tc_port = (uint16_t)atoi(val);
 8028a56:	6a38      	ldr	r0, [r7, #32]
 8028a58:	f000 fffe 	bl	8029a58 <atoi>
 8028a5c:	4603      	mov	r3, r0
 8028a5e:	b29a      	uxth	r2, r3
 8028a60:	4b1c      	ldr	r3, [pc, #112]	; (8028ad4 <parse_config_commands+0x2ac>)
 8028a62:	82da      	strh	r2, [r3, #22]
 8028a64:	e009      	b.n	8028a7a <parse_config_commands+0x252>
			} else {
				tftp_err("unknown config parameter", addr, port);
 8028a66:	887b      	ldrh	r3, [r7, #2]
 8028a68:	4825      	ldr	r0, [pc, #148]	; (8028b00 <parse_config_commands+0x2d8>)
 8028a6a:	6879      	ldr	r1, [r7, #4]
 8028a6c:	461a      	mov	r2, r3
 8028a6e:	f000 f909 	bl	8028c84 <tftp_err>
				ret = 0;
 8028a72:	2300      	movs	r3, #0
 8028a74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8028a78:	e005      	b.n	8028a86 <parse_config_commands+0x25e>
	uint8_t ret = 1;

	size_t index = 0;
	char* str = NULL;

	while(index < tftp_buff_index) {
 8028a7a:	4b11      	ldr	r3, [pc, #68]	; (8028ac0 <parse_config_commands+0x298>)
 8028a7c:	681b      	ldr	r3, [r3, #0]
 8028a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8028a80:	429a      	cmp	r2, r3
 8028a82:	f4ff aedf 	bcc.w	8028844 <parse_config_commands+0x1c>
				break;
			}
		}
	}

	if(ret) {
 8028a86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8028a8a:	2b00      	cmp	r3, #0
 8028a8c:	d00f      	beq.n	8028aae <parse_config_commands+0x286>
		// update network interface w/ new addresses
		local_udp_reset();
 8028a8e:	f000 fc15 	bl	80292bc <local_udp_reset>

		if(write_flash_config() < 0) {
 8028a92:	f000 fbf9 	bl	8029288 <write_flash_config>
 8028a96:	4603      	mov	r3, r0
 8028a98:	2b00      	cmp	r3, #0
 8028a9a:	da08      	bge.n	8028aae <parse_config_commands+0x286>
			// failed to save config, still set though

			tftp_err("failed to save configuration to flash", addr, port);
 8028a9c:	887b      	ldrh	r3, [r7, #2]
 8028a9e:	4819      	ldr	r0, [pc, #100]	; (8028b04 <parse_config_commands+0x2dc>)
 8028aa0:	6879      	ldr	r1, [r7, #4]
 8028aa2:	461a      	mov	r2, r3
 8028aa4:	f000 f8ee 	bl	8028c84 <tftp_err>
			ret = 0;
 8028aa8:	2300      	movs	r3, #0
 8028aaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
	}

	return ret;
 8028aae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8028ab2:	4618      	mov	r0, r3
 8028ab4:	3730      	adds	r7, #48	; 0x30
 8028ab6:	46bd      	mov	sp, r7
 8028ab8:	bd80      	pop	{r7, pc}
 8028aba:	bf00      	nop
 8028abc:	1fff07d4 	.word	0x1fff07d4
 8028ac0:	1fff00b0 	.word	0x1fff00b0
 8028ac4:	0802a2dc 	.word	0x0802a2dc
 8028ac8:	0802a2fc 	.word	0x0802a2fc
 8028acc:	0802a30c 	.word	0x0802a30c
 8028ad0:	0802a314 	.word	0x0802a314
 8028ad4:	1fff17d8 	.word	0x1fff17d8
 8028ad8:	0802a32c 	.word	0x0802a32c
 8028adc:	0802a334 	.word	0x0802a334
 8028ae0:	0802a34c 	.word	0x0802a34c
 8028ae4:	0802a354 	.word	0x0802a354
 8028ae8:	0802a36c 	.word	0x0802a36c
 8028aec:	0802a378 	.word	0x0802a378
 8028af0:	0802a394 	.word	0x0802a394
 8028af4:	0802a39c 	.word	0x0802a39c
 8028af8:	0802a3a8 	.word	0x0802a3a8
 8028afc:	0802a3b4 	.word	0x0802a3b4
 8028b00:	0802a3bc 	.word	0x0802a3bc
 8028b04:	0802a3d8 	.word	0x0802a3d8

08028b08 <tftp_send_data>:

// send TFTP data blocks in response to a read request
// assumes 'str' is a NULL-terminated string
// NOTE: does not wait for ACKs, just sends all data immediately
void tftp_send_data(const char* str, ip_addr_t* addr, uint16_t port) {
 8028b08:	b590      	push	{r4, r7, lr}
 8028b0a:	b08b      	sub	sp, #44	; 0x2c
 8028b0c:	af02      	add	r7, sp, #8
 8028b0e:	60f8      	str	r0, [r7, #12]
 8028b10:	60b9      	str	r1, [r7, #8]
 8028b12:	4613      	mov	r3, r2
 8028b14:	80fb      	strh	r3, [r7, #6]
	uint16_t block_num = 1;
 8028b16:	2301      	movs	r3, #1
 8028b18:	83fb      	strh	r3, [r7, #30]

	tftp_data_t header;
	header.opcode = htons(TFTP_DATA);
 8028b1a:	2003      	movs	r0, #3
 8028b1c:	f7fd fffe 	bl	8026b1c <lwip_htons>
 8028b20:	4603      	mov	r3, r0
 8028b22:	823b      	strh	r3, [r7, #16]

	ssize_t len = strlen(str);
 8028b24:	68f8      	ldr	r0, [r7, #12]
 8028b26:	f001 f82f 	bl	8029b88 <strlen>
 8028b2a:	4603      	mov	r3, r0
 8028b2c:	61bb      	str	r3, [r7, #24]

	while(1) {
		header.block_num = htons(block_num);
 8028b2e:	8bfb      	ldrh	r3, [r7, #30]
 8028b30:	4618      	mov	r0, r3
 8028b32:	f7fd fff3 	bl	8026b1c <lwip_htons>
 8028b36:	4603      	mov	r3, r0
 8028b38:	827b      	strh	r3, [r7, #18]
		block_num++;
 8028b3a:	8bfb      	ldrh	r3, [r7, #30]
 8028b3c:	3301      	adds	r3, #1
 8028b3e:	83fb      	strh	r3, [r7, #30]
		memcpy(tftp_p->payload, (void*)&header, sizeof(tftp_data_t));
 8028b40:	4b4a      	ldr	r3, [pc, #296]	; (8028c6c <tftp_send_data+0x164>)
 8028b42:	681b      	ldr	r3, [r3, #0]
 8028b44:	685a      	ldr	r2, [r3, #4]
 8028b46:	f107 0310 	add.w	r3, r7, #16
 8028b4a:	4610      	mov	r0, r2
 8028b4c:	4619      	mov	r1, r3
 8028b4e:	2204      	movs	r2, #4
 8028b50:	f000 ffc2 	bl	8029ad8 <memcpy>

		if(len > 511) {
 8028b54:	69bb      	ldr	r3, [r7, #24]
 8028b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8028b5a:	db45      	blt.n	8028be8 <tftp_send_data+0xe0>
			// send 512 bytes in this packet then send another one
			memcpy(tftp_p->payload + sizeof(tftp_data_t), (void*)str, 512);
 8028b5c:	4b43      	ldr	r3, [pc, #268]	; (8028c6c <tftp_send_data+0x164>)
 8028b5e:	681b      	ldr	r3, [r3, #0]
 8028b60:	685b      	ldr	r3, [r3, #4]
 8028b62:	3304      	adds	r3, #4
 8028b64:	4618      	mov	r0, r3
 8028b66:	68f9      	ldr	r1, [r7, #12]
 8028b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8028b6c:	f000 ffb4 	bl	8029ad8 <memcpy>

			tftp_p->len = tftp_p->tot_len = sizeof(tftp_data_t) + 512;
 8028b70:	4b3e      	ldr	r3, [pc, #248]	; (8028c6c <tftp_send_data+0x164>)
 8028b72:	681a      	ldr	r2, [r3, #0]
 8028b74:	4b3d      	ldr	r3, [pc, #244]	; (8028c6c <tftp_send_data+0x164>)
 8028b76:	681b      	ldr	r3, [r3, #0]
 8028b78:	f44f 7101 	mov.w	r1, #516	; 0x204
 8028b7c:	8119      	strh	r1, [r3, #8]
 8028b7e:	891b      	ldrh	r3, [r3, #8]
 8028b80:	8153      	strh	r3, [r2, #10]

			udp_sendto_if(tftp_pcb, tftp_p, addr, port, netif);
 8028b82:	4b3b      	ldr	r3, [pc, #236]	; (8028c70 <tftp_send_data+0x168>)
 8028b84:	6819      	ldr	r1, [r3, #0]
 8028b86:	4b39      	ldr	r3, [pc, #228]	; (8028c6c <tftp_send_data+0x164>)
 8028b88:	681a      	ldr	r2, [r3, #0]
 8028b8a:	4b3a      	ldr	r3, [pc, #232]	; (8028c74 <tftp_send_data+0x16c>)
 8028b8c:	681b      	ldr	r3, [r3, #0]
 8028b8e:	88fc      	ldrh	r4, [r7, #6]
 8028b90:	9300      	str	r3, [sp, #0]
 8028b92:	4608      	mov	r0, r1
 8028b94:	4611      	mov	r1, r2
 8028b96:	68ba      	ldr	r2, [r7, #8]
 8028b98:	4623      	mov	r3, r4
 8028b9a:	f7ff f9c9 	bl	8027f30 <udp_sendto_if>

			// wait for the ACK to come in or timeout
			uint32_t start = millisec;
 8028b9e:	4b36      	ldr	r3, [pc, #216]	; (8028c78 <tftp_send_data+0x170>)
 8028ba0:	681b      	ldr	r3, [r3, #0]
 8028ba2:	617b      	str	r3, [r7, #20]
			while(ack_num != block_num - 1) {
 8028ba4:	e00d      	b.n	8028bc2 <tftp_send_data+0xba>
				if(millisec - start > 2000) {
 8028ba6:	4b34      	ldr	r3, [pc, #208]	; (8028c78 <tftp_send_data+0x170>)
 8028ba8:	681a      	ldr	r2, [r3, #0]
 8028baa:	697b      	ldr	r3, [r7, #20]
 8028bac:	1ad3      	subs	r3, r2, r3
 8028bae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8028bb2:	d906      	bls.n	8028bc2 <tftp_send_data+0xba>
					// 2s elapsed
					// don't resend, just wait for another request
					tftp_err("timed out waiting for acknowledgment", addr, port);
 8028bb4:	88fb      	ldrh	r3, [r7, #6]
 8028bb6:	4831      	ldr	r0, [pc, #196]	; (8028c7c <tftp_send_data+0x174>)
 8028bb8:	68b9      	ldr	r1, [r7, #8]
 8028bba:	461a      	mov	r2, r3
 8028bbc:	f000 f862 	bl	8028c84 <tftp_err>
					return;
 8028bc0:	e051      	b.n	8028c66 <tftp_send_data+0x15e>

			udp_sendto_if(tftp_pcb, tftp_p, addr, port, netif);

			// wait for the ACK to come in or timeout
			uint32_t start = millisec;
			while(ack_num != block_num - 1) {
 8028bc2:	4b2f      	ldr	r3, [pc, #188]	; (8028c80 <tftp_send_data+0x178>)
 8028bc4:	881b      	ldrh	r3, [r3, #0]
 8028bc6:	461a      	mov	r2, r3
 8028bc8:	8bfb      	ldrh	r3, [r7, #30]
 8028bca:	3b01      	subs	r3, #1
 8028bcc:	429a      	cmp	r2, r3
 8028bce:	d1ea      	bne.n	8028ba6 <tftp_send_data+0x9e>
					tftp_err("timed out waiting for acknowledgment", addr, port);
					return;
				}
			};

			ack_num = 0;
 8028bd0:	4b2b      	ldr	r3, [pc, #172]	; (8028c80 <tftp_send_data+0x178>)
 8028bd2:	2200      	movs	r2, #0
 8028bd4:	801a      	strh	r2, [r3, #0]
			len -= 512;
 8028bd6:	69bb      	ldr	r3, [r7, #24]
 8028bd8:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8028bdc:	61bb      	str	r3, [r7, #24]
			str = &str[512];
 8028bde:	68fb      	ldr	r3, [r7, #12]
 8028be0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8028be4:	60fb      	str	r3, [r7, #12]
 8028be6:	e03d      	b.n	8028c64 <tftp_send_data+0x15c>
		} else if(len == 0) {
 8028be8:	69bb      	ldr	r3, [r7, #24]
 8028bea:	2b00      	cmp	r3, #0
 8028bec:	d116      	bne.n	8028c1c <tftp_send_data+0x114>
			// special case where we send just the header
			tftp_p->len = tftp_p->tot_len = sizeof(tftp_data_t);
 8028bee:	4b1f      	ldr	r3, [pc, #124]	; (8028c6c <tftp_send_data+0x164>)
 8028bf0:	681a      	ldr	r2, [r3, #0]
 8028bf2:	4b1e      	ldr	r3, [pc, #120]	; (8028c6c <tftp_send_data+0x164>)
 8028bf4:	681b      	ldr	r3, [r3, #0]
 8028bf6:	2104      	movs	r1, #4
 8028bf8:	8119      	strh	r1, [r3, #8]
 8028bfa:	891b      	ldrh	r3, [r3, #8]
 8028bfc:	8153      	strh	r3, [r2, #10]

			udp_sendto_if(tftp_pcb, tftp_p, addr, port, netif);
 8028bfe:	4b1c      	ldr	r3, [pc, #112]	; (8028c70 <tftp_send_data+0x168>)
 8028c00:	6819      	ldr	r1, [r3, #0]
 8028c02:	4b1a      	ldr	r3, [pc, #104]	; (8028c6c <tftp_send_data+0x164>)
 8028c04:	681a      	ldr	r2, [r3, #0]
 8028c06:	4b1b      	ldr	r3, [pc, #108]	; (8028c74 <tftp_send_data+0x16c>)
 8028c08:	681b      	ldr	r3, [r3, #0]
 8028c0a:	88fc      	ldrh	r4, [r7, #6]
 8028c0c:	9300      	str	r3, [sp, #0]
 8028c0e:	4608      	mov	r0, r1
 8028c10:	4611      	mov	r1, r2
 8028c12:	68ba      	ldr	r2, [r7, #8]
 8028c14:	4623      	mov	r3, r4
 8028c16:	f7ff f98b 	bl	8027f30 <udp_sendto_if>

			// we're done sending at this point
			break;
 8028c1a:	e024      	b.n	8028c66 <tftp_send_data+0x15e>
		} else {
			// we can send this all in one packet (511 bytes or less)
			memcpy(tftp_p->payload + sizeof(tftp_data_t), (void*)str, len);
 8028c1c:	4b13      	ldr	r3, [pc, #76]	; (8028c6c <tftp_send_data+0x164>)
 8028c1e:	681b      	ldr	r3, [r3, #0]
 8028c20:	685b      	ldr	r3, [r3, #4]
 8028c22:	1d1a      	adds	r2, r3, #4
 8028c24:	69bb      	ldr	r3, [r7, #24]
 8028c26:	4610      	mov	r0, r2
 8028c28:	68f9      	ldr	r1, [r7, #12]
 8028c2a:	461a      	mov	r2, r3
 8028c2c:	f000 ff54 	bl	8029ad8 <memcpy>

			tftp_p->len = tftp_p->tot_len = sizeof(tftp_data_t) + len;
 8028c30:	4b0e      	ldr	r3, [pc, #56]	; (8028c6c <tftp_send_data+0x164>)
 8028c32:	681a      	ldr	r2, [r3, #0]
 8028c34:	4b0d      	ldr	r3, [pc, #52]	; (8028c6c <tftp_send_data+0x164>)
 8028c36:	681b      	ldr	r3, [r3, #0]
 8028c38:	69b9      	ldr	r1, [r7, #24]
 8028c3a:	b289      	uxth	r1, r1
 8028c3c:	3104      	adds	r1, #4
 8028c3e:	b289      	uxth	r1, r1
 8028c40:	8119      	strh	r1, [r3, #8]
 8028c42:	891b      	ldrh	r3, [r3, #8]
 8028c44:	8153      	strh	r3, [r2, #10]

			udp_sendto_if(tftp_pcb, tftp_p, addr, port, netif);
 8028c46:	4b0a      	ldr	r3, [pc, #40]	; (8028c70 <tftp_send_data+0x168>)
 8028c48:	6819      	ldr	r1, [r3, #0]
 8028c4a:	4b08      	ldr	r3, [pc, #32]	; (8028c6c <tftp_send_data+0x164>)
 8028c4c:	681a      	ldr	r2, [r3, #0]
 8028c4e:	4b09      	ldr	r3, [pc, #36]	; (8028c74 <tftp_send_data+0x16c>)
 8028c50:	681b      	ldr	r3, [r3, #0]
 8028c52:	88fc      	ldrh	r4, [r7, #6]
 8028c54:	9300      	str	r3, [sp, #0]
 8028c56:	4608      	mov	r0, r1
 8028c58:	4611      	mov	r1, r2
 8028c5a:	68ba      	ldr	r2, [r7, #8]
 8028c5c:	4623      	mov	r3, r4
 8028c5e:	f7ff f967 	bl	8027f30 <udp_sendto_if>

			// we're done sending at this point
			break;
 8028c62:	e000      	b.n	8028c66 <tftp_send_data+0x15e>
		}
	}
 8028c64:	e763      	b.n	8028b2e <tftp_send_data+0x26>
}
 8028c66:	3724      	adds	r7, #36	; 0x24
 8028c68:	46bd      	mov	sp, r7
 8028c6a:	bd90      	pop	{r4, r7, pc}
 8028c6c:	1fff1810 	.word	0x1fff1810
 8028c70:	1fff0790 	.word	0x1fff0790
 8028c74:	1fff0788 	.word	0x1fff0788
 8028c78:	1fff0070 	.word	0x1fff0070
 8028c7c:	0802a400 	.word	0x0802a400
 8028c80:	1fff00b6 	.word	0x1fff00b6

08028c84 <tftp_err>:

// send TFTP error message
void tftp_err(const char* msg, ip_addr_t* addr, uint16_t port) {
 8028c84:	b590      	push	{r4, r7, lr}
 8028c86:	b089      	sub	sp, #36	; 0x24
 8028c88:	af02      	add	r7, sp, #8
 8028c8a:	60f8      	str	r0, [r7, #12]
 8028c8c:	60b9      	str	r1, [r7, #8]
 8028c8e:	4613      	mov	r3, r2
 8028c90:	80fb      	strh	r3, [r7, #6]
	tftp_err_t header;
	header.opcode = htons(TFTP_ERR); // ERROR opcode
 8028c92:	2005      	movs	r0, #5
 8028c94:	f7fd ff42 	bl	8026b1c <lwip_htons>
 8028c98:	4603      	mov	r3, r0
 8028c9a:	823b      	strh	r3, [r7, #16]
	header.error_code = htons(4); // Illegal TFTP operation error code
 8028c9c:	2004      	movs	r0, #4
 8028c9e:	f7fd ff3d 	bl	8026b1c <lwip_htons>
 8028ca2:	4603      	mov	r3, r0
 8028ca4:	827b      	strh	r3, [r7, #18]

	memcpy(tftp_p->payload, (void*)&header, sizeof(tftp_err_t));
 8028ca6:	4b21      	ldr	r3, [pc, #132]	; (8028d2c <tftp_err+0xa8>)
 8028ca8:	681b      	ldr	r3, [r3, #0]
 8028caa:	685a      	ldr	r2, [r3, #4]
 8028cac:	f107 0310 	add.w	r3, r7, #16
 8028cb0:	4610      	mov	r0, r2
 8028cb2:	4619      	mov	r1, r3
 8028cb4:	2204      	movs	r2, #4
 8028cb6:	f000 ff0f 	bl	8029ad8 <memcpy>

	size_t len = strlen(msg);
 8028cba:	68f8      	ldr	r0, [r7, #12]
 8028cbc:	f000 ff64 	bl	8029b88 <strlen>
 8028cc0:	6178      	str	r0, [r7, #20]
	if(len > TFTP_MAX_ERR_MSG_LEN - 1) {
 8028cc2:	697b      	ldr	r3, [r7, #20]
 8028cc4:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8028cc8:	d902      	bls.n	8028cd0 <tftp_err+0x4c>
		len = TFTP_MAX_ERR_MSG_LEN - 1;
 8028cca:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8028cce:	617b      	str	r3, [r7, #20]
	}
	memcpy(tftp_p->payload + sizeof(tftp_err_t), (void*)msg, len);
 8028cd0:	4b16      	ldr	r3, [pc, #88]	; (8028d2c <tftp_err+0xa8>)
 8028cd2:	681b      	ldr	r3, [r3, #0]
 8028cd4:	685b      	ldr	r3, [r3, #4]
 8028cd6:	3304      	adds	r3, #4
 8028cd8:	4618      	mov	r0, r3
 8028cda:	68f9      	ldr	r1, [r7, #12]
 8028cdc:	697a      	ldr	r2, [r7, #20]
 8028cde:	f000 fefb 	bl	8029ad8 <memcpy>
	((char*)tftp_p->payload)[len + sizeof(tftp_err_t)] = '\0';
 8028ce2:	4b12      	ldr	r3, [pc, #72]	; (8028d2c <tftp_err+0xa8>)
 8028ce4:	681b      	ldr	r3, [r3, #0]
 8028ce6:	685a      	ldr	r2, [r3, #4]
 8028ce8:	697b      	ldr	r3, [r7, #20]
 8028cea:	3304      	adds	r3, #4
 8028cec:	4413      	add	r3, r2
 8028cee:	2200      	movs	r2, #0
 8028cf0:	701a      	strb	r2, [r3, #0]

	tftp_p->len = tftp_p->tot_len = sizeof(tftp_err_t) + len + 1;
 8028cf2:	4b0e      	ldr	r3, [pc, #56]	; (8028d2c <tftp_err+0xa8>)
 8028cf4:	681a      	ldr	r2, [r3, #0]
 8028cf6:	4b0d      	ldr	r3, [pc, #52]	; (8028d2c <tftp_err+0xa8>)
 8028cf8:	681b      	ldr	r3, [r3, #0]
 8028cfa:	6979      	ldr	r1, [r7, #20]
 8028cfc:	b289      	uxth	r1, r1
 8028cfe:	3105      	adds	r1, #5
 8028d00:	b289      	uxth	r1, r1
 8028d02:	8119      	strh	r1, [r3, #8]
 8028d04:	891b      	ldrh	r3, [r3, #8]
 8028d06:	8153      	strh	r3, [r2, #10]

	udp_sendto_if(tftp_pcb, tftp_p, addr, port, netif);
 8028d08:	4b09      	ldr	r3, [pc, #36]	; (8028d30 <tftp_err+0xac>)
 8028d0a:	6819      	ldr	r1, [r3, #0]
 8028d0c:	4b07      	ldr	r3, [pc, #28]	; (8028d2c <tftp_err+0xa8>)
 8028d0e:	681a      	ldr	r2, [r3, #0]
 8028d10:	4b08      	ldr	r3, [pc, #32]	; (8028d34 <tftp_err+0xb0>)
 8028d12:	681b      	ldr	r3, [r3, #0]
 8028d14:	88fc      	ldrh	r4, [r7, #6]
 8028d16:	9300      	str	r3, [sp, #0]
 8028d18:	4608      	mov	r0, r1
 8028d1a:	4611      	mov	r1, r2
 8028d1c:	68ba      	ldr	r2, [r7, #8]
 8028d1e:	4623      	mov	r3, r4
 8028d20:	f7ff f906 	bl	8027f30 <udp_sendto_if>
}
 8028d24:	371c      	adds	r7, #28
 8028d26:	46bd      	mov	sp, r7
 8028d28:	bd90      	pop	{r4, r7, pc}
 8028d2a:	bf00      	nop
 8028d2c:	1fff1810 	.word	0x1fff1810
 8028d30:	1fff0790 	.word	0x1fff0790
 8028d34:	1fff0788 	.word	0x1fff0788

08028d38 <tftp_ack>:

// send TFTP ack for a block number
void tftp_ack(uint16_t block, ip_addr_t* addr, uint16_t port) {
 8028d38:	b590      	push	{r4, r7, lr}
 8028d3a:	b087      	sub	sp, #28
 8028d3c:	af02      	add	r7, sp, #8
 8028d3e:	4603      	mov	r3, r0
 8028d40:	6039      	str	r1, [r7, #0]
 8028d42:	80fb      	strh	r3, [r7, #6]
 8028d44:	4613      	mov	r3, r2
 8028d46:	80bb      	strh	r3, [r7, #4]
	tftp_ack_t header;
	header.opcode = htons(TFTP_ACK); // ACK opcode
 8028d48:	2004      	movs	r0, #4
 8028d4a:	f7fd fee7 	bl	8026b1c <lwip_htons>
 8028d4e:	4603      	mov	r3, r0
 8028d50:	81bb      	strh	r3, [r7, #12]
	header.block_num = htons(block);
 8028d52:	88fb      	ldrh	r3, [r7, #6]
 8028d54:	4618      	mov	r0, r3
 8028d56:	f7fd fee1 	bl	8026b1c <lwip_htons>
 8028d5a:	4603      	mov	r3, r0
 8028d5c:	81fb      	strh	r3, [r7, #14]

	memcpy(tftp_p->payload, (void*)&header, sizeof(tftp_ack_t));
 8028d5e:	4b11      	ldr	r3, [pc, #68]	; (8028da4 <tftp_ack+0x6c>)
 8028d60:	681b      	ldr	r3, [r3, #0]
 8028d62:	685a      	ldr	r2, [r3, #4]
 8028d64:	f107 030c 	add.w	r3, r7, #12
 8028d68:	4610      	mov	r0, r2
 8028d6a:	4619      	mov	r1, r3
 8028d6c:	2204      	movs	r2, #4
 8028d6e:	f000 feb3 	bl	8029ad8 <memcpy>

	tftp_p->len = tftp_p->tot_len = sizeof(tftp_ack_t);
 8028d72:	4b0c      	ldr	r3, [pc, #48]	; (8028da4 <tftp_ack+0x6c>)
 8028d74:	681a      	ldr	r2, [r3, #0]
 8028d76:	4b0b      	ldr	r3, [pc, #44]	; (8028da4 <tftp_ack+0x6c>)
 8028d78:	681b      	ldr	r3, [r3, #0]
 8028d7a:	2104      	movs	r1, #4
 8028d7c:	8119      	strh	r1, [r3, #8]
 8028d7e:	891b      	ldrh	r3, [r3, #8]
 8028d80:	8153      	strh	r3, [r2, #10]

	udp_sendto_if(tftp_pcb, tftp_p, addr, port, netif);
 8028d82:	4b09      	ldr	r3, [pc, #36]	; (8028da8 <tftp_ack+0x70>)
 8028d84:	6819      	ldr	r1, [r3, #0]
 8028d86:	4b07      	ldr	r3, [pc, #28]	; (8028da4 <tftp_ack+0x6c>)
 8028d88:	681a      	ldr	r2, [r3, #0]
 8028d8a:	4b08      	ldr	r3, [pc, #32]	; (8028dac <tftp_ack+0x74>)
 8028d8c:	681b      	ldr	r3, [r3, #0]
 8028d8e:	88bc      	ldrh	r4, [r7, #4]
 8028d90:	9300      	str	r3, [sp, #0]
 8028d92:	4608      	mov	r0, r1
 8028d94:	4611      	mov	r1, r2
 8028d96:	683a      	ldr	r2, [r7, #0]
 8028d98:	4623      	mov	r3, r4
 8028d9a:	f7ff f8c9 	bl	8027f30 <udp_sendto_if>
}
 8028d9e:	3714      	adds	r7, #20
 8028da0:	46bd      	mov	sp, r7
 8028da2:	bd90      	pop	{r4, r7, pc}
 8028da4:	1fff1810 	.word	0x1fff1810
 8028da8:	1fff0790 	.word	0x1fff0790
 8028dac:	1fff0788 	.word	0x1fff0788

08028db0 <my_tolower>:

// convert a character to lower case
// NOTE: only converts basic alphabet
char my_tolower(char c) {
 8028db0:	b480      	push	{r7}
 8028db2:	b083      	sub	sp, #12
 8028db4:	af00      	add	r7, sp, #0
 8028db6:	4603      	mov	r3, r0
 8028db8:	71fb      	strb	r3, [r7, #7]
	if(c >= 'A' && c <= 'Z') {
 8028dba:	79fb      	ldrb	r3, [r7, #7]
 8028dbc:	2b40      	cmp	r3, #64	; 0x40
 8028dbe:	d906      	bls.n	8028dce <my_tolower+0x1e>
 8028dc0:	79fb      	ldrb	r3, [r7, #7]
 8028dc2:	2b5a      	cmp	r3, #90	; 0x5a
 8028dc4:	d803      	bhi.n	8028dce <my_tolower+0x1e>
		return c + ('a' - 'A');
 8028dc6:	79fb      	ldrb	r3, [r7, #7]
 8028dc8:	3320      	adds	r3, #32
 8028dca:	b2db      	uxtb	r3, r3
 8028dcc:	e000      	b.n	8028dd0 <my_tolower+0x20>
	}

	return c;
 8028dce:	79fb      	ldrb	r3, [r7, #7]
}
 8028dd0:	4618      	mov	r0, r3
 8028dd2:	370c      	adds	r7, #12
 8028dd4:	46bd      	mov	sp, r7
 8028dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028dda:	4770      	bx	lr

08028ddc <tftp_check_octet_mode>:

// checks that a TFTP RRQ/WRQ packet has a mode of 'octet'
// ignores the filename
// assumes the packet at 'data' is a WRQ/RRQ packet at least 4 bytes long
// returns 0 on failure, 1 on success
uint8_t tftp_check_octet_mode(char* data, size_t len, ip_addr_t* addr, uint16_t port) {
 8028ddc:	b590      	push	{r4, r7, lr}
 8028dde:	b089      	sub	sp, #36	; 0x24
 8028de0:	af00      	add	r7, sp, #0
 8028de2:	60f8      	str	r0, [r7, #12]
 8028de4:	60b9      	str	r1, [r7, #8]
 8028de6:	607a      	str	r2, [r7, #4]
 8028de8:	807b      	strh	r3, [r7, #2]
	if(len < 4) {
 8028dea:	68bb      	ldr	r3, [r7, #8]
 8028dec:	2b03      	cmp	r3, #3
 8028dee:	d801      	bhi.n	8028df4 <tftp_check_octet_mode+0x18>
		return 0;
 8028df0:	2300      	movs	r3, #0
 8028df2:	e05c      	b.n	8028eae <tftp_check_octet_mode+0xd2>
	}

	// we don't care what the filename is, always change our config info
	char* mode = NULL;
 8028df4:	2300      	movs	r3, #0
 8028df6:	61fb      	str	r3, [r7, #28]
	size_t i = 2; // start reading at filename
 8028df8:	2302      	movs	r3, #2
 8028dfa:	61bb      	str	r3, [r7, #24]
	for(; i < len; i++) {
 8028dfc:	e010      	b.n	8028e20 <tftp_check_octet_mode+0x44>
		if(data[i] == '\0') {
 8028dfe:	68fa      	ldr	r2, [r7, #12]
 8028e00:	69bb      	ldr	r3, [r7, #24]
 8028e02:	4413      	add	r3, r2
 8028e04:	781b      	ldrb	r3, [r3, #0]
 8028e06:	2b00      	cmp	r3, #0
 8028e08:	d107      	bne.n	8028e1a <tftp_check_octet_mode+0x3e>
			mode = &data[++i];
 8028e0a:	69bb      	ldr	r3, [r7, #24]
 8028e0c:	3301      	adds	r3, #1
 8028e0e:	61bb      	str	r3, [r7, #24]
 8028e10:	68fa      	ldr	r2, [r7, #12]
 8028e12:	69bb      	ldr	r3, [r7, #24]
 8028e14:	4413      	add	r3, r2
 8028e16:	61fb      	str	r3, [r7, #28]
			break;
 8028e18:	e006      	b.n	8028e28 <tftp_check_octet_mode+0x4c>
	}

	// we don't care what the filename is, always change our config info
	char* mode = NULL;
	size_t i = 2; // start reading at filename
	for(; i < len; i++) {
 8028e1a:	69bb      	ldr	r3, [r7, #24]
 8028e1c:	3301      	adds	r3, #1
 8028e1e:	61bb      	str	r3, [r7, #24]
 8028e20:	69ba      	ldr	r2, [r7, #24]
 8028e22:	68bb      	ldr	r3, [r7, #8]
 8028e24:	429a      	cmp	r2, r3
 8028e26:	d3ea      	bcc.n	8028dfe <tftp_check_octet_mode+0x22>
			mode = &data[++i];
			break;
		}
	}

	if(mode == NULL) {
 8028e28:	69fb      	ldr	r3, [r7, #28]
 8028e2a:	2b00      	cmp	r3, #0
 8028e2c:	d107      	bne.n	8028e3e <tftp_check_octet_mode+0x62>
		tftp_err("no filename given", addr, port);
 8028e2e:	887b      	ldrh	r3, [r7, #2]
 8028e30:	4821      	ldr	r0, [pc, #132]	; (8028eb8 <tftp_check_octet_mode+0xdc>)
 8028e32:	6879      	ldr	r1, [r7, #4]
 8028e34:	461a      	mov	r2, r3
 8028e36:	f7ff ff25 	bl	8028c84 <tftp_err>
		return 0;
 8028e3a:	2300      	movs	r3, #0
 8028e3c:	e037      	b.n	8028eae <tftp_check_octet_mode+0xd2>
	}

	if(data[len - 1] != '\0') {
 8028e3e:	68bb      	ldr	r3, [r7, #8]
 8028e40:	3b01      	subs	r3, #1
 8028e42:	68fa      	ldr	r2, [r7, #12]
 8028e44:	4413      	add	r3, r2
 8028e46:	781b      	ldrb	r3, [r3, #0]
 8028e48:	2b00      	cmp	r3, #0
 8028e4a:	d007      	beq.n	8028e5c <tftp_check_octet_mode+0x80>
		tftp_err("mode string not null-terminated", addr, port);
 8028e4c:	887b      	ldrh	r3, [r7, #2]
 8028e4e:	481b      	ldr	r0, [pc, #108]	; (8028ebc <tftp_check_octet_mode+0xe0>)
 8028e50:	6879      	ldr	r1, [r7, #4]
 8028e52:	461a      	mov	r2, r3
 8028e54:	f7ff ff16 	bl	8028c84 <tftp_err>
		return 0;
 8028e58:	2300      	movs	r3, #0
 8028e5a:	e028      	b.n	8028eae <tftp_check_octet_mode+0xd2>
	}

	// convert to lower case
	for(size_t j = 0; j < strlen(mode); j++) {
 8028e5c:	2300      	movs	r3, #0
 8028e5e:	617b      	str	r3, [r7, #20]
 8028e60:	e00e      	b.n	8028e80 <tftp_check_octet_mode+0xa4>
		mode[j] = my_tolower(mode[j]);
 8028e62:	69fa      	ldr	r2, [r7, #28]
 8028e64:	697b      	ldr	r3, [r7, #20]
 8028e66:	18d4      	adds	r4, r2, r3
 8028e68:	69fa      	ldr	r2, [r7, #28]
 8028e6a:	697b      	ldr	r3, [r7, #20]
 8028e6c:	4413      	add	r3, r2
 8028e6e:	781b      	ldrb	r3, [r3, #0]
 8028e70:	4618      	mov	r0, r3
 8028e72:	f7ff ff9d 	bl	8028db0 <my_tolower>
 8028e76:	4603      	mov	r3, r0
 8028e78:	7023      	strb	r3, [r4, #0]
		tftp_err("mode string not null-terminated", addr, port);
		return 0;
	}

	// convert to lower case
	for(size_t j = 0; j < strlen(mode); j++) {
 8028e7a:	697b      	ldr	r3, [r7, #20]
 8028e7c:	3301      	adds	r3, #1
 8028e7e:	617b      	str	r3, [r7, #20]
 8028e80:	69f8      	ldr	r0, [r7, #28]
 8028e82:	f000 fe81 	bl	8029b88 <strlen>
 8028e86:	4602      	mov	r2, r0
 8028e88:	697b      	ldr	r3, [r7, #20]
 8028e8a:	429a      	cmp	r2, r3
 8028e8c:	d8e9      	bhi.n	8028e62 <tftp_check_octet_mode+0x86>
		mode[j] = my_tolower(mode[j]);
	}

	if(strcmp(mode, "octet") != 0) {
 8028e8e:	69f8      	ldr	r0, [r7, #28]
 8028e90:	490b      	ldr	r1, [pc, #44]	; (8028ec0 <tftp_check_octet_mode+0xe4>)
 8028e92:	f000 fe6f 	bl	8029b74 <strcmp>
 8028e96:	4603      	mov	r3, r0
 8028e98:	2b00      	cmp	r3, #0
 8028e9a:	d007      	beq.n	8028eac <tftp_check_octet_mode+0xd0>
		tftp_err("only supported mode is octet", addr, port);
 8028e9c:	887b      	ldrh	r3, [r7, #2]
 8028e9e:	4809      	ldr	r0, [pc, #36]	; (8028ec4 <tftp_check_octet_mode+0xe8>)
 8028ea0:	6879      	ldr	r1, [r7, #4]
 8028ea2:	461a      	mov	r2, r3
 8028ea4:	f7ff feee 	bl	8028c84 <tftp_err>
		return 0;
 8028ea8:	2300      	movs	r3, #0
 8028eaa:	e000      	b.n	8028eae <tftp_check_octet_mode+0xd2>
	}

	return 1;
 8028eac:	2301      	movs	r3, #1
}
 8028eae:	4618      	mov	r0, r3
 8028eb0:	3724      	adds	r7, #36	; 0x24
 8028eb2:	46bd      	mov	sp, r7
 8028eb4:	bd90      	pop	{r4, r7, pc}
 8028eb6:	bf00      	nop
 8028eb8:	0802a428 	.word	0x0802a428
 8028ebc:	0802a43c 	.word	0x0802a43c
 8028ec0:	0802a45c 	.word	0x0802a45c
 8028ec4:	0802a464 	.word	0x0802a464

08028ec8 <tftp_recv>:

// TFTP UDP interface receive callback
void tftp_recv(void* arg, struct udp_pcb* pcb, struct pbuf* p, ip_addr_t* addr, uint16_t port) {
 8028ec8:	b580      	push	{r7, lr}
 8028eca:	b086      	sub	sp, #24
 8028ecc:	af00      	add	r7, sp, #0
 8028ece:	60f8      	str	r0, [r7, #12]
 8028ed0:	60b9      	str	r1, [r7, #8]
 8028ed2:	607a      	str	r2, [r7, #4]
 8028ed4:	603b      	str	r3, [r7, #0]
	if(p->len != p->tot_len) {
 8028ed6:	687b      	ldr	r3, [r7, #4]
 8028ed8:	895a      	ldrh	r2, [r3, #10]
 8028eda:	687b      	ldr	r3, [r7, #4]
 8028edc:	891b      	ldrh	r3, [r3, #8]
 8028ede:	429a      	cmp	r2, r3
 8028ee0:	d006      	beq.n	8028ef0 <tftp_recv+0x28>
		tftp_err("cannot fragment packets", addr, port);
 8028ee2:	8c3b      	ldrh	r3, [r7, #32]
 8028ee4:	4893      	ldr	r0, [pc, #588]	; (8029134 <tftp_recv+0x26c>)
 8028ee6:	6839      	ldr	r1, [r7, #0]
 8028ee8:	461a      	mov	r2, r3
 8028eea:	f7ff fecb 	bl	8028c84 <tftp_err>
		return;
 8028eee:	e11e      	b.n	802912e <tftp_recv+0x266>
	}

	if(p->len < 4) {
 8028ef0:	687b      	ldr	r3, [r7, #4]
 8028ef2:	895b      	ldrh	r3, [r3, #10]
 8028ef4:	2b03      	cmp	r3, #3
 8028ef6:	d805      	bhi.n	8028f04 <tftp_recv+0x3c>
		// need at least an opcode, and two zeros / a block number
		tftp_err("packet too small", addr, port);
 8028ef8:	8c3b      	ldrh	r3, [r7, #32]
 8028efa:	488f      	ldr	r0, [pc, #572]	; (8029138 <tftp_recv+0x270>)
 8028efc:	6839      	ldr	r1, [r7, #0]
 8028efe:	461a      	mov	r2, r3
 8028f00:	f7ff fec0 	bl	8028c84 <tftp_err>
	}

	uint16_t opcode = ntohs(*((uint16_t*)p->payload));
 8028f04:	687b      	ldr	r3, [r7, #4]
 8028f06:	685b      	ldr	r3, [r3, #4]
 8028f08:	881b      	ldrh	r3, [r3, #0]
 8028f0a:	4618      	mov	r0, r3
 8028f0c:	f7fd fe1c 	bl	8026b48 <lwip_ntohs>
 8028f10:	4603      	mov	r3, r0
 8028f12:	82fb      	strh	r3, [r7, #22]

	if(opcode == TFTP_WRQ) {
 8028f14:	8afb      	ldrh	r3, [r7, #22]
 8028f16:	2b02      	cmp	r3, #2
 8028f18:	d135      	bne.n	8028f86 <tftp_recv+0xbe>
		if(curr_block == 0) {
 8028f1a:	4b88      	ldr	r3, [pc, #544]	; (802913c <tftp_recv+0x274>)
 8028f1c:	881b      	ldrh	r3, [r3, #0]
 8028f1e:	2b00      	cmp	r3, #0
 8028f20:	d127      	bne.n	8028f72 <tftp_recv+0xaa>
			if(tftp_send) {
 8028f22:	4b87      	ldr	r3, [pc, #540]	; (8029140 <tftp_recv+0x278>)
 8028f24:	781b      	ldrb	r3, [r3, #0]
 8028f26:	2b00      	cmp	r3, #0
 8028f28:	d006      	beq.n	8028f38 <tftp_recv+0x70>
				tftp_err("server busy", addr, port);
 8028f2a:	8c3b      	ldrh	r3, [r7, #32]
 8028f2c:	4885      	ldr	r0, [pc, #532]	; (8029144 <tftp_recv+0x27c>)
 8028f2e:	6839      	ldr	r1, [r7, #0]
 8028f30:	461a      	mov	r2, r3
 8028f32:	f7ff fea7 	bl	8028c84 <tftp_err>
				return;
 8028f36:	e0fa      	b.n	802912e <tftp_recv+0x266>
			}

			// we don't care what the filename is, always change our config info
			// we just care that the data is in octet mode
			if(!tftp_check_octet_mode((char*)p->payload, p->len, addr, port)) {
 8028f38:	687b      	ldr	r3, [r7, #4]
 8028f3a:	685a      	ldr	r2, [r3, #4]
 8028f3c:	687b      	ldr	r3, [r7, #4]
 8028f3e:	895b      	ldrh	r3, [r3, #10]
 8028f40:	4619      	mov	r1, r3
 8028f42:	8c3b      	ldrh	r3, [r7, #32]
 8028f44:	4610      	mov	r0, r2
 8028f46:	683a      	ldr	r2, [r7, #0]
 8028f48:	f7ff ff48 	bl	8028ddc <tftp_check_octet_mode>
 8028f4c:	4603      	mov	r3, r0
 8028f4e:	2b00      	cmp	r3, #0
 8028f50:	d100      	bne.n	8028f54 <tftp_recv+0x8c>
				return;
 8028f52:	e0ec      	b.n	802912e <tftp_recv+0x266>
			}

			tftp_ack(curr_block, addr, port);
 8028f54:	4b79      	ldr	r3, [pc, #484]	; (802913c <tftp_recv+0x274>)
 8028f56:	881a      	ldrh	r2, [r3, #0]
 8028f58:	8c3b      	ldrh	r3, [r7, #32]
 8028f5a:	4610      	mov	r0, r2
 8028f5c:	6839      	ldr	r1, [r7, #0]
 8028f5e:	461a      	mov	r2, r3
 8028f60:	f7ff feea 	bl	8028d38 <tftp_ack>
			curr_block++;
 8028f64:	4b75      	ldr	r3, [pc, #468]	; (802913c <tftp_recv+0x274>)
 8028f66:	881b      	ldrh	r3, [r3, #0]
 8028f68:	3301      	adds	r3, #1
 8028f6a:	b29a      	uxth	r2, r3
 8028f6c:	4b73      	ldr	r3, [pc, #460]	; (802913c <tftp_recv+0x274>)
 8028f6e:	801a      	strh	r2, [r3, #0]
 8028f70:	e0dd      	b.n	802912e <tftp_recv+0x266>
		} else {
			tftp_err("write request already in progress, abandoning", addr, port);
 8028f72:	8c3b      	ldrh	r3, [r7, #32]
 8028f74:	4874      	ldr	r0, [pc, #464]	; (8029148 <tftp_recv+0x280>)
 8028f76:	6839      	ldr	r1, [r7, #0]
 8028f78:	461a      	mov	r2, r3
 8028f7a:	f7ff fe83 	bl	8028c84 <tftp_err>
			curr_block = 0; // reset and abandon the current WRQ
 8028f7e:	4b6f      	ldr	r3, [pc, #444]	; (802913c <tftp_recv+0x274>)
 8028f80:	2200      	movs	r2, #0
 8028f82:	801a      	strh	r2, [r3, #0]

			return;
 8028f84:	e0d3      	b.n	802912e <tftp_recv+0x266>
		}
	} else if(opcode == TFTP_DATA) {
 8028f86:	8afb      	ldrh	r3, [r7, #22]
 8028f88:	2b03      	cmp	r3, #3
 8028f8a:	f040 8094 	bne.w	80290b6 <tftp_recv+0x1ee>
		if(curr_block == 0) {
 8028f8e:	4b6b      	ldr	r3, [pc, #428]	; (802913c <tftp_recv+0x274>)
 8028f90:	881b      	ldrh	r3, [r3, #0]
 8028f92:	2b00      	cmp	r3, #0
 8028f94:	d106      	bne.n	8028fa4 <tftp_recv+0xdc>
			tftp_err("no write request in progress", addr, port);
 8028f96:	8c3b      	ldrh	r3, [r7, #32]
 8028f98:	486c      	ldr	r0, [pc, #432]	; (802914c <tftp_recv+0x284>)
 8028f9a:	6839      	ldr	r1, [r7, #0]
 8028f9c:	461a      	mov	r2, r3
 8028f9e:	f7ff fe71 	bl	8028c84 <tftp_err>
			return;
 8028fa2:	e0c4      	b.n	802912e <tftp_recv+0x266>
		}

		if(tftp_send) {
 8028fa4:	4b66      	ldr	r3, [pc, #408]	; (8029140 <tftp_recv+0x278>)
 8028fa6:	781b      	ldrb	r3, [r3, #0]
 8028fa8:	2b00      	cmp	r3, #0
 8028faa:	d006      	beq.n	8028fba <tftp_recv+0xf2>
			tftp_err("server busy", addr, port);
 8028fac:	8c3b      	ldrh	r3, [r7, #32]
 8028fae:	4865      	ldr	r0, [pc, #404]	; (8029144 <tftp_recv+0x27c>)
 8028fb0:	6839      	ldr	r1, [r7, #0]
 8028fb2:	461a      	mov	r2, r3
 8028fb4:	f7ff fe66 	bl	8028c84 <tftp_err>
			return;
 8028fb8:	e0b9      	b.n	802912e <tftp_recv+0x266>
		}

		if(p->len - 4 > 512) {
 8028fba:	687b      	ldr	r3, [r7, #4]
 8028fbc:	895b      	ldrh	r3, [r3, #10]
 8028fbe:	3b04      	subs	r3, #4
 8028fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8028fc4:	dd06      	ble.n	8028fd4 <tftp_recv+0x10c>
			tftp_err("too much data in one packet", addr, port);
 8028fc6:	8c3b      	ldrh	r3, [r7, #32]
 8028fc8:	4861      	ldr	r0, [pc, #388]	; (8029150 <tftp_recv+0x288>)
 8028fca:	6839      	ldr	r1, [r7, #0]
 8028fcc:	461a      	mov	r2, r3
 8028fce:	f7ff fe59 	bl	8028c84 <tftp_err>
			return;
 8028fd2:	e0ac      	b.n	802912e <tftp_recv+0x266>
		}

		uint16_t block_num = ntohs(*((uint16_t*)(p->payload + 2)));
 8028fd4:	687b      	ldr	r3, [r7, #4]
 8028fd6:	685b      	ldr	r3, [r3, #4]
 8028fd8:	3302      	adds	r3, #2
 8028fda:	881b      	ldrh	r3, [r3, #0]
 8028fdc:	4618      	mov	r0, r3
 8028fde:	f7fd fdb3 	bl	8026b48 <lwip_ntohs>
 8028fe2:	4603      	mov	r3, r0
 8028fe4:	82bb      	strh	r3, [r7, #20]

		if(block_num != curr_block) {
 8028fe6:	4b55      	ldr	r3, [pc, #340]	; (802913c <tftp_recv+0x274>)
 8028fe8:	881b      	ldrh	r3, [r3, #0]
 8028fea:	8aba      	ldrh	r2, [r7, #20]
 8028fec:	429a      	cmp	r2, r3
 8028fee:	d006      	beq.n	8028ffe <tftp_recv+0x136>
			tftp_err("unexpected block number", addr, port);
 8028ff0:	8c3b      	ldrh	r3, [r7, #32]
 8028ff2:	4858      	ldr	r0, [pc, #352]	; (8029154 <tftp_recv+0x28c>)
 8028ff4:	6839      	ldr	r1, [r7, #0]
 8028ff6:	461a      	mov	r2, r3
 8028ff8:	f7ff fe44 	bl	8028c84 <tftp_err>
			return;
 8028ffc:	e097      	b.n	802912e <tftp_recv+0x266>
		}

		// copy the data into the buffer
		if(tftp_buff_index + p->len - 4 >= TFTP_BUFFER_SIZE) {
 8028ffe:	687b      	ldr	r3, [r7, #4]
 8029000:	895b      	ldrh	r3, [r3, #10]
 8029002:	461a      	mov	r2, r3
 8029004:	4b54      	ldr	r3, [pc, #336]	; (8029158 <tftp_recv+0x290>)
 8029006:	681b      	ldr	r3, [r3, #0]
 8029008:	4413      	add	r3, r2
 802900a:	3b04      	subs	r3, #4
 802900c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029010:	d30c      	bcc.n	802902c <tftp_recv+0x164>
			tftp_err("file too large", addr, port);
 8029012:	8c3b      	ldrh	r3, [r7, #32]
 8029014:	4851      	ldr	r0, [pc, #324]	; (802915c <tftp_recv+0x294>)
 8029016:	6839      	ldr	r1, [r7, #0]
 8029018:	461a      	mov	r2, r3
 802901a:	f7ff fe33 	bl	8028c84 <tftp_err>
			tftp_buff_index = 0;
 802901e:	4b4e      	ldr	r3, [pc, #312]	; (8029158 <tftp_recv+0x290>)
 8029020:	2200      	movs	r2, #0
 8029022:	601a      	str	r2, [r3, #0]
			curr_block = 0;
 8029024:	4b45      	ldr	r3, [pc, #276]	; (802913c <tftp_recv+0x274>)
 8029026:	2200      	movs	r2, #0
 8029028:	801a      	strh	r2, [r3, #0]

			return;
 802902a:	e080      	b.n	802912e <tftp_recv+0x266>
		}

		uint8_t* data = (uint8_t*)(p->payload + 4);
 802902c:	687b      	ldr	r3, [r7, #4]
 802902e:	685b      	ldr	r3, [r3, #4]
 8029030:	3304      	adds	r3, #4
 8029032:	613b      	str	r3, [r7, #16]
		memcpy(tftp_buff + tftp_buff_index, data, p->len - 4);
 8029034:	4b48      	ldr	r3, [pc, #288]	; (8029158 <tftp_recv+0x290>)
 8029036:	681b      	ldr	r3, [r3, #0]
 8029038:	4a49      	ldr	r2, [pc, #292]	; (8029160 <tftp_recv+0x298>)
 802903a:	441a      	add	r2, r3
 802903c:	687b      	ldr	r3, [r7, #4]
 802903e:	895b      	ldrh	r3, [r3, #10]
 8029040:	3b04      	subs	r3, #4
 8029042:	4610      	mov	r0, r2
 8029044:	6939      	ldr	r1, [r7, #16]
 8029046:	461a      	mov	r2, r3
 8029048:	f000 fd46 	bl	8029ad8 <memcpy>

		tftp_buff_index += (p->len - 4);
 802904c:	687b      	ldr	r3, [r7, #4]
 802904e:	895b      	ldrh	r3, [r3, #10]
 8029050:	461a      	mov	r2, r3
 8029052:	4b41      	ldr	r3, [pc, #260]	; (8029158 <tftp_recv+0x290>)
 8029054:	681b      	ldr	r3, [r3, #0]
 8029056:	4413      	add	r3, r2
 8029058:	3b04      	subs	r3, #4
 802905a:	4a3f      	ldr	r2, [pc, #252]	; (8029158 <tftp_recv+0x290>)
 802905c:	6013      	str	r3, [r2, #0]

		// send the ACK
		tftp_ack(curr_block, addr, port);
 802905e:	4b37      	ldr	r3, [pc, #220]	; (802913c <tftp_recv+0x274>)
 8029060:	881a      	ldrh	r2, [r3, #0]
 8029062:	8c3b      	ldrh	r3, [r7, #32]
 8029064:	4610      	mov	r0, r2
 8029066:	6839      	ldr	r1, [r7, #0]
 8029068:	461a      	mov	r2, r3
 802906a:	f7ff fe65 	bl	8028d38 <tftp_ack>

		if(p->len - 4 < 512) {
 802906e:	687b      	ldr	r3, [r7, #4]
 8029070:	895b      	ldrh	r3, [r3, #10]
 8029072:	3b04      	subs	r3, #4
 8029074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8029078:	da16      	bge.n	80290a8 <tftp_recv+0x1e0>
			// last data packet, end of transfer

			if(parse_config_commands(addr, port)) {
 802907a:	8c3b      	ldrh	r3, [r7, #32]
 802907c:	6838      	ldr	r0, [r7, #0]
 802907e:	4619      	mov	r1, r3
 8029080:	f7ff fbd2 	bl	8028828 <parse_config_commands>
 8029084:	4603      	mov	r3, r0
 8029086:	2b00      	cmp	r3, #0
 8029088:	d007      	beq.n	802909a <tftp_recv+0x1d2>
				tftp_ack(curr_block, addr, port);
 802908a:	4b2c      	ldr	r3, [pc, #176]	; (802913c <tftp_recv+0x274>)
 802908c:	881a      	ldrh	r2, [r3, #0]
 802908e:	8c3b      	ldrh	r3, [r7, #32]
 8029090:	4610      	mov	r0, r2
 8029092:	6839      	ldr	r1, [r7, #0]
 8029094:	461a      	mov	r2, r3
 8029096:	f7ff fe4f 	bl	8028d38 <tftp_ack>
			} // otherwise sent an error message

			// mark the end of the transfer regardless
			tftp_buff_index = 0;
 802909a:	4b2f      	ldr	r3, [pc, #188]	; (8029158 <tftp_recv+0x290>)
 802909c:	2200      	movs	r2, #0
 802909e:	601a      	str	r2, [r3, #0]
			curr_block = 0;
 80290a0:	4b26      	ldr	r3, [pc, #152]	; (802913c <tftp_recv+0x274>)
 80290a2:	2200      	movs	r2, #0
 80290a4:	801a      	strh	r2, [r3, #0]
 80290a6:	e042      	b.n	802912e <tftp_recv+0x266>
		} else {
			// otherwise we have more data to receive and expect the next block
			curr_block++;
 80290a8:	4b24      	ldr	r3, [pc, #144]	; (802913c <tftp_recv+0x274>)
 80290aa:	881b      	ldrh	r3, [r3, #0]
 80290ac:	3301      	adds	r3, #1
 80290ae:	b29a      	uxth	r2, r3
 80290b0:	4b22      	ldr	r3, [pc, #136]	; (802913c <tftp_recv+0x274>)
 80290b2:	801a      	strh	r2, [r3, #0]
 80290b4:	e03b      	b.n	802912e <tftp_recv+0x266>
		}
	} else if(opcode == TFTP_RRQ) {
 80290b6:	8afb      	ldrh	r3, [r7, #22]
 80290b8:	2b01      	cmp	r3, #1
 80290ba:	d123      	bne.n	8029104 <tftp_recv+0x23c>
		if(tftp_send) {
 80290bc:	4b20      	ldr	r3, [pc, #128]	; (8029140 <tftp_recv+0x278>)
 80290be:	781b      	ldrb	r3, [r3, #0]
 80290c0:	2b00      	cmp	r3, #0
 80290c2:	d006      	beq.n	80290d2 <tftp_recv+0x20a>
			tftp_err("server busy", addr, port);
 80290c4:	8c3b      	ldrh	r3, [r7, #32]
 80290c6:	481f      	ldr	r0, [pc, #124]	; (8029144 <tftp_recv+0x27c>)
 80290c8:	6839      	ldr	r1, [r7, #0]
 80290ca:	461a      	mov	r2, r3
 80290cc:	f7ff fdda 	bl	8028c84 <tftp_err>
			return;
 80290d0:	e02d      	b.n	802912e <tftp_recv+0x266>
		}

		// we don't care what the filename is as long as the mode is octet
		if(!tftp_check_octet_mode((char*)p->payload, p->len, addr, port)) {
 80290d2:	687b      	ldr	r3, [r7, #4]
 80290d4:	685a      	ldr	r2, [r3, #4]
 80290d6:	687b      	ldr	r3, [r7, #4]
 80290d8:	895b      	ldrh	r3, [r3, #10]
 80290da:	4619      	mov	r1, r3
 80290dc:	8c3b      	ldrh	r3, [r7, #32]
 80290de:	4610      	mov	r0, r2
 80290e0:	683a      	ldr	r2, [r7, #0]
 80290e2:	f7ff fe7b 	bl	8028ddc <tftp_check_octet_mode>
 80290e6:	4603      	mov	r3, r0
 80290e8:	2b00      	cmp	r3, #0
 80290ea:	d100      	bne.n	80290ee <tftp_recv+0x226>
			return;
 80290ec:	e01f      	b.n	802912e <tftp_recv+0x266>
		}

		last_addr = *addr;
 80290ee:	4a1d      	ldr	r2, [pc, #116]	; (8029164 <tftp_recv+0x29c>)
 80290f0:	683b      	ldr	r3, [r7, #0]
 80290f2:	681b      	ldr	r3, [r3, #0]
 80290f4:	6013      	str	r3, [r2, #0]
		last_port = port;
 80290f6:	4a1c      	ldr	r2, [pc, #112]	; (8029168 <tftp_recv+0x2a0>)
 80290f8:	8c3b      	ldrh	r3, [r7, #32]
 80290fa:	8013      	strh	r3, [r2, #0]

		// we can't send immediately because we need to listen for ACKs
		tftp_send = 1;
 80290fc:	4b10      	ldr	r3, [pc, #64]	; (8029140 <tftp_recv+0x278>)
 80290fe:	2201      	movs	r2, #1
 8029100:	701a      	strb	r2, [r3, #0]
 8029102:	e014      	b.n	802912e <tftp_recv+0x266>
	} else if(opcode == TFTP_ACK) {
 8029104:	8afb      	ldrh	r3, [r7, #22]
 8029106:	2b04      	cmp	r3, #4
 8029108:	d10b      	bne.n	8029122 <tftp_recv+0x25a>
		ack_num = ntohs(*(uint16_t*)(p->payload + 2));
 802910a:	687b      	ldr	r3, [r7, #4]
 802910c:	685b      	ldr	r3, [r3, #4]
 802910e:	3302      	adds	r3, #2
 8029110:	881b      	ldrh	r3, [r3, #0]
 8029112:	4618      	mov	r0, r3
 8029114:	f7fd fd18 	bl	8026b48 <lwip_ntohs>
 8029118:	4603      	mov	r3, r0
 802911a:	461a      	mov	r2, r3
 802911c:	4b13      	ldr	r3, [pc, #76]	; (802916c <tftp_recv+0x2a4>)
 802911e:	801a      	strh	r2, [r3, #0]
 8029120:	e005      	b.n	802912e <tftp_recv+0x266>
	} else {
		tftp_err("unsupported opcode", addr, port);
 8029122:	8c3b      	ldrh	r3, [r7, #32]
 8029124:	4812      	ldr	r0, [pc, #72]	; (8029170 <tftp_recv+0x2a8>)
 8029126:	6839      	ldr	r1, [r7, #0]
 8029128:	461a      	mov	r2, r3
 802912a:	f7ff fdab 	bl	8028c84 <tftp_err>
	}
}
 802912e:	3718      	adds	r7, #24
 8029130:	46bd      	mov	sp, r7
 8029132:	bd80      	pop	{r7, pc}
 8029134:	0802a484 	.word	0x0802a484
 8029138:	0802a49c 	.word	0x0802a49c
 802913c:	1fff00b4 	.word	0x1fff00b4
 8029140:	1fff00b8 	.word	0x1fff00b8
 8029144:	0802a4b0 	.word	0x0802a4b0
 8029148:	0802a4bc 	.word	0x0802a4bc
 802914c:	0802a4ec 	.word	0x0802a4ec
 8029150:	0802a50c 	.word	0x0802a50c
 8029154:	0802a528 	.word	0x0802a528
 8029158:	1fff00b0 	.word	0x1fff00b0
 802915c:	0802a540 	.word	0x0802a540
 8029160:	1fff07d4 	.word	0x1fff07d4
 8029164:	1fff07d0 	.word	0x1fff07d0
 8029168:	1fff17d4 	.word	0x1fff17d4
 802916c:	1fff00b6 	.word	0x1fff00b6
 8029170:	0802a550 	.word	0x0802a550

08029174 <tftp_init>:

// initialize TFTP server
// should only be called once
void tftp_init() {
 8029174:	b580      	push	{r7, lr}
 8029176:	af00      	add	r7, sp, #0
	tftp_pcb = udp_new();
 8029178:	f7fe fff8 	bl	802816c <udp_new>
 802917c:	4602      	mov	r2, r0
 802917e:	4b0d      	ldr	r3, [pc, #52]	; (80291b4 <tftp_init+0x40>)
 8029180:	601a      	str	r2, [r3, #0]
	udp_bind(tftp_pcb, IP_ADDR_ANY, TFTP_PORT);
 8029182:	4b0c      	ldr	r3, [pc, #48]	; (80291b4 <tftp_init+0x40>)
 8029184:	681b      	ldr	r3, [r3, #0]
 8029186:	4618      	mov	r0, r3
 8029188:	490b      	ldr	r1, [pc, #44]	; (80291b8 <tftp_init+0x44>)
 802918a:	2245      	movs	r2, #69	; 0x45
 802918c:	f7fe ff7c 	bl	8028088 <udp_bind>
	tftp_p = pbuf_alloc(PBUF_TRANSPORT, sizeof(tftp_data_t) + 512, PBUF_RAM);
 8029190:	2000      	movs	r0, #0
 8029192:	f44f 7101 	mov.w	r1, #516	; 0x204
 8029196:	2200      	movs	r2, #0
 8029198:	f7fe f93e 	bl	8027418 <pbuf_alloc>
 802919c:	4602      	mov	r2, r0
 802919e:	4b07      	ldr	r3, [pc, #28]	; (80291bc <tftp_init+0x48>)
 80291a0:	601a      	str	r2, [r3, #0]

	// set the TFTP callback for any packets we receive
	udp_recv(tftp_pcb, &tftp_recv, NULL);
 80291a2:	4b04      	ldr	r3, [pc, #16]	; (80291b4 <tftp_init+0x40>)
 80291a4:	681b      	ldr	r3, [r3, #0]
 80291a6:	4618      	mov	r0, r3
 80291a8:	4905      	ldr	r1, [pc, #20]	; (80291c0 <tftp_init+0x4c>)
 80291aa:	2200      	movs	r2, #0
 80291ac:	f7fe ffcc 	bl	8028148 <udp_recv>
}
 80291b0:	bd80      	pop	{r7, pc}
 80291b2:	bf00      	nop
 80291b4:	1fff0790 	.word	0x1fff0790
 80291b8:	0802a004 	.word	0x0802a004
 80291bc:	1fff1810 	.word	0x1fff1810
 80291c0:	08028ec9 	.word	0x08028ec9

080291c4 <load_flash_config>:

// loads network configuration from persistent flash memory into 'flash' variable
// if there is no configuration in flash (e.g. after re-flashing), writes defaults to flash
// returns: 1 on success, -1 on error
int load_flash_config(uint8_t force_default) {
 80291c4:	b580      	push	{r7, lr}
 80291c6:	b082      	sub	sp, #8
 80291c8:	af00      	add	r7, sp, #0
 80291ca:	4603      	mov	r3, r0
 80291cc:	71fb      	strb	r3, [r7, #7]
	if(E_EEPROM_XMC4_IsFlashEmpty() || force_default) {
 80291ce:	f7fb f82f 	bl	8024230 <E_EEPROM_XMC4_IsFlashEmpty>
 80291d2:	4603      	mov	r3, r0
 80291d4:	2b00      	cmp	r3, #0
 80291d6:	d102      	bne.n	80291de <load_flash_config+0x1a>
 80291d8:	79fb      	ldrb	r3, [r7, #7]
 80291da:	2b00      	cmp	r3, #0
 80291dc:	d03b      	beq.n	8029256 <load_flash_config+0x92>
		// nothing in flash, set the defaults and save them to flash
		if(!ipaddr_aton(DEF_SRC_IP, &flash.src_ip)) {
 80291de:	4823      	ldr	r0, [pc, #140]	; (802926c <load_flash_config+0xa8>)
 80291e0:	4923      	ldr	r1, [pc, #140]	; (8029270 <load_flash_config+0xac>)
 80291e2:	f7fd fb7f 	bl	80268e4 <ipaddr_aton>
 80291e6:	4603      	mov	r3, r0
 80291e8:	2b00      	cmp	r3, #0
 80291ea:	d102      	bne.n	80291f2 <load_flash_config+0x2e>
			// bad address
			return -1;
 80291ec:	f04f 33ff 	mov.w	r3, #4294967295
 80291f0:	e037      	b.n	8029262 <load_flash_config+0x9e>
		}

		if(!ipaddr_aton(DEF_DST_IP, &flash.dst_ip)) {
 80291f2:	4820      	ldr	r0, [pc, #128]	; (8029274 <load_flash_config+0xb0>)
 80291f4:	4920      	ldr	r1, [pc, #128]	; (8029278 <load_flash_config+0xb4>)
 80291f6:	f7fd fb75 	bl	80268e4 <ipaddr_aton>
 80291fa:	4603      	mov	r3, r0
 80291fc:	2b00      	cmp	r3, #0
 80291fe:	d102      	bne.n	8029206 <load_flash_config+0x42>
			// bad address
			return -1;
 8029200:	f04f 33ff 	mov.w	r3, #4294967295
 8029204:	e02d      	b.n	8029262 <load_flash_config+0x9e>
		}

		if(!ipaddr_aton(DEF_DEF_GW, &flash.default_gw)) {
 8029206:	481b      	ldr	r0, [pc, #108]	; (8029274 <load_flash_config+0xb0>)
 8029208:	491c      	ldr	r1, [pc, #112]	; (802927c <load_flash_config+0xb8>)
 802920a:	f7fd fb6b 	bl	80268e4 <ipaddr_aton>
 802920e:	4603      	mov	r3, r0
 8029210:	2b00      	cmp	r3, #0
 8029212:	d102      	bne.n	802921a <load_flash_config+0x56>
			// bad address
			return -1;
 8029214:	f04f 33ff 	mov.w	r3, #4294967295
 8029218:	e023      	b.n	8029262 <load_flash_config+0x9e>
		}

		if(!ipaddr_aton(DEF_SUBNET, &flash.subnet)) {
 802921a:	4819      	ldr	r0, [pc, #100]	; (8029280 <load_flash_config+0xbc>)
 802921c:	4919      	ldr	r1, [pc, #100]	; (8029284 <load_flash_config+0xc0>)
 802921e:	f7fd fb61 	bl	80268e4 <ipaddr_aton>
 8029222:	4603      	mov	r3, r0
 8029224:	2b00      	cmp	r3, #0
 8029226:	d102      	bne.n	802922e <load_flash_config+0x6a>
			// bad address
			return -1;
 8029228:	f04f 33ff 	mov.w	r3, #4294967295
 802922c:	e019      	b.n	8029262 <load_flash_config+0x9e>
		}

		flash.src_port = DEF_SRC_PORT;
 802922e:	4b10      	ldr	r3, [pc, #64]	; (8029270 <load_flash_config+0xac>)
 8029230:	f641 7290 	movw	r2, #8080	; 0x1f90
 8029234:	821a      	strh	r2, [r3, #16]
		flash.adc0_port = DEF_ADC0_PORT;
 8029236:	4b0e      	ldr	r3, [pc, #56]	; (8029270 <load_flash_config+0xac>)
 8029238:	f641 7290 	movw	r2, #8080	; 0x1f90
 802923c:	825a      	strh	r2, [r3, #18]
		flash.adc1_port = DEF_ADC1_PORT;
 802923e:	4b0c      	ldr	r3, [pc, #48]	; (8029270 <load_flash_config+0xac>)
 8029240:	f641 7291 	movw	r2, #8081	; 0x1f91
 8029244:	829a      	strh	r2, [r3, #20]
		flash.tc_port = DEF_TC_PORT;
 8029246:	4b0a      	ldr	r3, [pc, #40]	; (8029270 <load_flash_config+0xac>)
 8029248:	f641 7292 	movw	r2, #8082	; 0x1f92
 802924c:	82da      	strh	r2, [r3, #22]

		// write out the default configuration to flash
		return write_flash_config();
 802924e:	f000 f81b 	bl	8029288 <write_flash_config>
 8029252:	4603      	mov	r3, r0
 8029254:	e005      	b.n	8029262 <load_flash_config+0x9e>
	} else {
		// we have a previously set configuration to load
		E_EEPROM_XMC4_ReadArray(0, (unsigned char*)&flash, sizeof(config_t));
 8029256:	2000      	movs	r0, #0
 8029258:	4905      	ldr	r1, [pc, #20]	; (8029270 <load_flash_config+0xac>)
 802925a:	2218      	movs	r2, #24
 802925c:	f7fa ff70 	bl	8024140 <E_EEPROM_XMC4_ReadArray>
	}

	return 1;
 8029260:	2301      	movs	r3, #1
}
 8029262:	4618      	mov	r0, r3
 8029264:	3708      	adds	r7, #8
 8029266:	46bd      	mov	sp, r7
 8029268:	bd80      	pop	{r7, pc}
 802926a:	bf00      	nop
 802926c:	0802a564 	.word	0x0802a564
 8029270:	1fff17d8 	.word	0x1fff17d8
 8029274:	0802a570 	.word	0x0802a570
 8029278:	1fff17dc 	.word	0x1fff17dc
 802927c:	1fff17e0 	.word	0x1fff17e0
 8029280:	0802a57c 	.word	0x0802a57c
 8029284:	1fff17e4 	.word	0x1fff17e4

08029288 <write_flash_config>:

int write_flash_config() {
 8029288:	b580      	push	{r7, lr}
 802928a:	af00      	add	r7, sp, #0
	if(E_EEPROM_XMC4_WriteArray(0x0, (unsigned char*)&flash, sizeof(config_t))) {
 802928c:	2000      	movs	r0, #0
 802928e:	490a      	ldr	r1, [pc, #40]	; (80292b8 <write_flash_config+0x30>)
 8029290:	2218      	movs	r2, #24
 8029292:	f7fa ff23 	bl	80240dc <E_EEPROM_XMC4_WriteArray>
 8029296:	4603      	mov	r3, r0
 8029298:	2b00      	cmp	r3, #0
 802929a:	d007      	beq.n	80292ac <write_flash_config+0x24>
		if(E_EEPROM_XMC4_STATUS_OK != E_EEPROM_XMC4_UpdateFlashContents()) {
 802929c:	f7fa ff76 	bl	802418c <E_EEPROM_XMC4_UpdateFlashContents>
 80292a0:	4603      	mov	r3, r0
 80292a2:	2b00      	cmp	r3, #0
 80292a4:	d005      	beq.n	80292b2 <write_flash_config+0x2a>
			return -1;
 80292a6:	f04f 33ff 	mov.w	r3, #4294967295
 80292aa:	e003      	b.n	80292b4 <write_flash_config+0x2c>
		}
	} else {
		return -1;
 80292ac:	f04f 33ff 	mov.w	r3, #4294967295
 80292b0:	e000      	b.n	80292b4 <write_flash_config+0x2c>
	}

	return 1;
 80292b2:	2301      	movs	r3, #1
}
 80292b4:	4618      	mov	r0, r3
 80292b6:	bd80      	pop	{r7, pc}
 80292b8:	1fff17d8 	.word	0x1fff17d8

080292bc <local_udp_reset>:

// reset UDP configuration
// assumes 'local_udp_init' has been called but one of the addresses/ports in 'flash' has changed
void local_udp_reset() {
 80292bc:	b580      	push	{r7, lr}
 80292be:	af00      	add	r7, sp, #0
	// bind to the source port
	udp_bind(pcb, IP_ADDR_ANY, flash.src_port);
 80292c0:	4b08      	ldr	r3, [pc, #32]	; (80292e4 <local_udp_reset+0x28>)
 80292c2:	681a      	ldr	r2, [r3, #0]
 80292c4:	4b08      	ldr	r3, [pc, #32]	; (80292e8 <local_udp_reset+0x2c>)
 80292c6:	8a1b      	ldrh	r3, [r3, #16]
 80292c8:	4610      	mov	r0, r2
 80292ca:	4908      	ldr	r1, [pc, #32]	; (80292ec <local_udp_reset+0x30>)
 80292cc:	461a      	mov	r2, r3
 80292ce:	f7fe fedb 	bl	8028088 <udp_bind>

	// set IP addresses
	netif_set_addr(netif, &flash.src_ip, &flash.subnet, &flash.default_gw);
 80292d2:	4b07      	ldr	r3, [pc, #28]	; (80292f0 <local_udp_reset+0x34>)
 80292d4:	681b      	ldr	r3, [r3, #0]
 80292d6:	4618      	mov	r0, r3
 80292d8:	4903      	ldr	r1, [pc, #12]	; (80292e8 <local_udp_reset+0x2c>)
 80292da:	4a06      	ldr	r2, [pc, #24]	; (80292f4 <local_udp_reset+0x38>)
 80292dc:	4b06      	ldr	r3, [pc, #24]	; (80292f8 <local_udp_reset+0x3c>)
 80292de:	f7fd ff75 	bl	80271cc <netif_set_addr>
}
 80292e2:	bd80      	pop	{r7, pc}
 80292e4:	1fff1814 	.word	0x1fff1814
 80292e8:	1fff17d8 	.word	0x1fff17d8
 80292ec:	0802a004 	.word	0x0802a004
 80292f0:	1fff0788 	.word	0x1fff0788
 80292f4:	1fff17e4 	.word	0x1fff17e4
 80292f8:	1fff17e0 	.word	0x1fff17e0

080292fc <local_udp_init>:

// initialize UDP interface
// should only be called once, if network configuration changes call 'local_udp_reset'
void local_udp_init() {
 80292fc:	b580      	push	{r7, lr}
 80292fe:	af00      	add	r7, sp, #0
	pcb = udp_new();
 8029300:	f7fe ff34 	bl	802816c <udp_new>
 8029304:	4602      	mov	r2, r0
 8029306:	4b08      	ldr	r3, [pc, #32]	; (8029328 <local_udp_init+0x2c>)
 8029308:	601a      	str	r2, [r3, #0]

	// allocate buffer at least the size of the largest packet we'll send
	if(sizeof(ADC_data_t) + sizeof(header_t) > sizeof(thermocouple_packet_t)) {
		p = pbuf_alloc(PBUF_TRANSPORT, sizeof(ADC_data_t) + sizeof(header_t), PBUF_RAM);
	} else {
		p = pbuf_alloc(PBUF_TRANSPORT, sizeof(thermocouple_packet_t), PBUF_RAM);
 802930a:	2000      	movs	r0, #0
 802930c:	211c      	movs	r1, #28
 802930e:	2200      	movs	r2, #0
 8029310:	f7fe f882 	bl	8027418 <pbuf_alloc>
 8029314:	4602      	mov	r2, r0
 8029316:	4b05      	ldr	r3, [pc, #20]	; (802932c <local_udp_init+0x30>)
 8029318:	601a      	str	r2, [r3, #0]
	}

	// set the interface to send on
	netif = ETH_LWIP_0.xnetif;
 802931a:	4b05      	ldr	r3, [pc, #20]	; (8029330 <local_udp_init+0x34>)
 802931c:	685b      	ldr	r3, [r3, #4]
 802931e:	4a05      	ldr	r2, [pc, #20]	; (8029334 <local_udp_init+0x38>)
 8029320:	6013      	str	r3, [r2, #0]

	// set addresses and things
	local_udp_reset();
 8029322:	f7ff ffcb 	bl	80292bc <local_udp_reset>
}
 8029326:	bd80      	pop	{r7, pc}
 8029328:	1fff1814 	.word	0x1fff1814
 802932c:	1fff078c 	.word	0x1fff078c
 8029330:	1fff005c 	.word	0x1fff005c
 8029334:	1fff0788 	.word	0x1fff0788

08029338 <send_data>:

// send data over the Ethernet
void send_data(void* data, uint16_t size, uint16_t port) {
 8029338:	b590      	push	{r4, r7, lr}
 802933a:	b085      	sub	sp, #20
 802933c:	af02      	add	r7, sp, #8
 802933e:	6078      	str	r0, [r7, #4]
 8029340:	460b      	mov	r3, r1
 8029342:	807b      	strh	r3, [r7, #2]
 8029344:	4613      	mov	r3, r2
 8029346:	803b      	strh	r3, [r7, #0]
	memcpy(p->payload, data, size);
 8029348:	4b10      	ldr	r3, [pc, #64]	; (802938c <send_data+0x54>)
 802934a:	681b      	ldr	r3, [r3, #0]
 802934c:	685a      	ldr	r2, [r3, #4]
 802934e:	887b      	ldrh	r3, [r7, #2]
 8029350:	4610      	mov	r0, r2
 8029352:	6879      	ldr	r1, [r7, #4]
 8029354:	461a      	mov	r2, r3
 8029356:	f000 fbbf 	bl	8029ad8 <memcpy>
	p->len = p->tot_len = size;
 802935a:	4b0c      	ldr	r3, [pc, #48]	; (802938c <send_data+0x54>)
 802935c:	681a      	ldr	r2, [r3, #0]
 802935e:	4b0b      	ldr	r3, [pc, #44]	; (802938c <send_data+0x54>)
 8029360:	681b      	ldr	r3, [r3, #0]
 8029362:	8879      	ldrh	r1, [r7, #2]
 8029364:	8119      	strh	r1, [r3, #8]
 8029366:	891b      	ldrh	r3, [r3, #8]
 8029368:	8153      	strh	r3, [r2, #10]

	udp_sendto_if(pcb, p, &flash.dst_ip, port, netif);
 802936a:	4b09      	ldr	r3, [pc, #36]	; (8029390 <send_data+0x58>)
 802936c:	6819      	ldr	r1, [r3, #0]
 802936e:	4b07      	ldr	r3, [pc, #28]	; (802938c <send_data+0x54>)
 8029370:	681a      	ldr	r2, [r3, #0]
 8029372:	4b08      	ldr	r3, [pc, #32]	; (8029394 <send_data+0x5c>)
 8029374:	681b      	ldr	r3, [r3, #0]
 8029376:	883c      	ldrh	r4, [r7, #0]
 8029378:	9300      	str	r3, [sp, #0]
 802937a:	4608      	mov	r0, r1
 802937c:	4611      	mov	r1, r2
 802937e:	4a06      	ldr	r2, [pc, #24]	; (8029398 <send_data+0x60>)
 8029380:	4623      	mov	r3, r4
 8029382:	f7fe fdd5 	bl	8027f30 <udp_sendto_if>
}
 8029386:	370c      	adds	r7, #12
 8029388:	46bd      	mov	sp, r7
 802938a:	bd90      	pop	{r4, r7, pc}
 802938c:	1fff078c 	.word	0x1fff078c
 8029390:	1fff1814 	.word	0x1fff1814
 8029394:	1fff0788 	.word	0x1fff0788
 8029398:	1fff17dc 	.word	0x1fff17dc

0802939c <main>:
* <b>Details of function</b><br>
* This routine is the application entry point. It is invoked by the device startup code. It is responsible for
* invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder for user application
* code.
*/
int main(void) {
 802939c:	b590      	push	{r4, r7, lr}
 802939e:	b091      	sub	sp, #68	; 0x44
 80293a0:	af00      	add	r7, sp, #0
	DAVE_STATUS_t status;
	uint32_t timer_systimer_lwip; 				// Timer for Ethernet Checkouts???
	uint8_t null[18] = {0x00}; 					// Null packet to "send" during ADC Transfers
 80293a2:	f107 0310 	add.w	r3, r7, #16
 80293a6:	2200      	movs	r2, #0
 80293a8:	601a      	str	r2, [r3, #0]
 80293aa:	3304      	adds	r3, #4
 80293ac:	2200      	movs	r2, #0
 80293ae:	601a      	str	r2, [r3, #0]
 80293b0:	3304      	adds	r3, #4
 80293b2:	2200      	movs	r2, #0
 80293b4:	601a      	str	r2, [r3, #0]
 80293b6:	3304      	adds	r3, #4
 80293b8:	2200      	movs	r2, #0
 80293ba:	601a      	str	r2, [r3, #0]
 80293bc:	3304      	adds	r3, #4
 80293be:	2200      	movs	r2, #0
 80293c0:	801a      	strh	r2, [r3, #0]
 80293c2:	3302      	adds	r3, #2

	// DAVE STARTUP
	status = DAVE_Init(); /* Initialization of DAVE APPs  */
 80293c4:	f7ff f92a 	bl	802861c <DAVE_Init>
 80293c8:	4603      	mov	r3, r0
 80293ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	if(status != DAVE_STATUS_SUCCESS) {
 80293ce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80293d2:	2b00      	cmp	r3, #0
 80293d4:	d000      	beq.n	80293d8 <main+0x3c>
		/* Placeholder for error handler code.
		* The while loop below can be replaced with an user error handler. */
		XMC_DEBUG("DAVE APPs initialization failed\n");
		while(1) {};
 80293d6:	e7fe      	b.n	80293d6 <main+0x3a>
	}

	// load config from flash
	load_flash_config(REFLASH);
 80293d8:	2000      	movs	r0, #0
 80293da:	f7ff fef3 	bl	80291c4 <load_flash_config>

	// Initialize UDP interface
	local_udp_init();
 80293de:	f7ff ff8d 	bl	80292fc <local_udp_init>

	// Init TFTP server
	tftp_init();
 80293e2:	f7ff fec7 	bl	8029174 <tftp_init>

	//Initialize ADCs
	//Unlock / Config
	// ADC0
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_ADC,  SPI_MASTER_SS_SIGNAL_0); // Change slave
 80293e6:	4890      	ldr	r0, [pc, #576]	; (8029628 <main+0x28c>)
 80293e8:	2100      	movs	r1, #0
 80293ea:	f7ff f9eb 	bl	80287c4 <SPI_MASTER_EnableSlaveSelectSignal>
	for(int i = 0; i < 9000; i++) {}; // Dumb Delay (Remove?)
 80293ee:	2300      	movs	r3, #0
 80293f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80293f2:	e002      	b.n	80293fa <main+0x5e>
 80293f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80293f6:	3301      	adds	r3, #1
 80293f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80293fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80293fc:	f242 3227 	movw	r2, #8999	; 0x2327
 8029400:	4293      	cmp	r3, r2
 8029402:	ddf7      	ble.n	80293f4 <main+0x58>
	adc_register_config();
 8029404:	f000 f9aa 	bl	802975c <adc_register_config>

	// ADC 1
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_ADC,  SPI_MASTER_SS_SIGNAL_1); // Change slave
 8029408:	4887      	ldr	r0, [pc, #540]	; (8029628 <main+0x28c>)
 802940a:	2101      	movs	r1, #1
 802940c:	f7ff f9da 	bl	80287c4 <SPI_MASTER_EnableSlaveSelectSignal>
	for(int i = 0; i < 9000; i++) {}; // Dumb Delay (Remove?)
 8029410:	2300      	movs	r3, #0
 8029412:	63bb      	str	r3, [r7, #56]	; 0x38
 8029414:	e002      	b.n	802941c <main+0x80>
 8029416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029418:	3301      	adds	r3, #1
 802941a:	63bb      	str	r3, [r7, #56]	; 0x38
 802941c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802941e:	f242 3227 	movw	r2, #8999	; 0x2327
 8029422:	4293      	cmp	r3, r2
 8029424:	ddf7      	ble.n	8029416 <main+0x7a>
	adc_register_config();
 8029426:	f000 f999 	bl	802975c <adc_register_config>

	// Turn on ADCs
	// ADC0
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_ADC,  SPI_MASTER_SS_SIGNAL_0); // Change slave
 802942a:	487f      	ldr	r0, [pc, #508]	; (8029628 <main+0x28c>)
 802942c:	2100      	movs	r1, #0
 802942e:	f7ff f9c9 	bl	80287c4 <SPI_MASTER_EnableSlaveSelectSignal>
	for(int i = 0; i < 9000; i++) {}; // Dumb Delay (Remove?)
 8029432:	2300      	movs	r3, #0
 8029434:	637b      	str	r3, [r7, #52]	; 0x34
 8029436:	e002      	b.n	802943e <main+0xa2>
 8029438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802943a:	3301      	adds	r3, #1
 802943c:	637b      	str	r3, [r7, #52]	; 0x34
 802943e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029440:	f242 3227 	movw	r2, #8999	; 0x2327
 8029444:	4293      	cmp	r3, r2
 8029446:	ddf7      	ble.n	8029438 <main+0x9c>
	xmc_ADC_setup();
 8029448:	f000 fa96 	bl	8029978 <xmc_ADC_setup>

	// ADC 1
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_ADC,  SPI_MASTER_SS_SIGNAL_1); // Change slave
 802944c:	4876      	ldr	r0, [pc, #472]	; (8029628 <main+0x28c>)
 802944e:	2101      	movs	r1, #1
 8029450:	f7ff f9b8 	bl	80287c4 <SPI_MASTER_EnableSlaveSelectSignal>
	for (int i = 0; i < 9000; i++) {}; // Dumb Delay (Remove?)
 8029454:	2300      	movs	r3, #0
 8029456:	633b      	str	r3, [r7, #48]	; 0x30
 8029458:	e002      	b.n	8029460 <main+0xc4>
 802945a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802945c:	3301      	adds	r3, #1
 802945e:	633b      	str	r3, [r7, #48]	; 0x30
 8029460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029462:	f242 3227 	movw	r2, #8999	; 0x2327
 8029466:	4293      	cmp	r3, r2
 8029468:	ddf7      	ble.n	802945a <main+0xbe>
	xmc_ADC_setup();
 802946a:	f000 fa85 	bl	8029978 <xmc_ADC_setup>

	// RETURN TO ADC0
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_ADC,  SPI_MASTER_SS_SIGNAL_0); // Change slave
 802946e:	486e      	ldr	r0, [pc, #440]	; (8029628 <main+0x28c>)
 8029470:	2100      	movs	r1, #0
 8029472:	f7ff f9a7 	bl	80287c4 <SPI_MASTER_EnableSlaveSelectSignal>
	for(int i = 0; i < 9000; i++) {}; // Dumb Delay (Remove?)
 8029476:	2300      	movs	r3, #0
 8029478:	62fb      	str	r3, [r7, #44]	; 0x2c
 802947a:	e002      	b.n	8029482 <main+0xe6>
 802947c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802947e:	3301      	adds	r3, #1
 8029480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8029482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029484:	f242 3227 	movw	r2, #8999	; 0x2327
 8029488:	4293      	cmp	r3, r2
 802948a:	ddf7      	ble.n	802947c <main+0xe0>


	// Initialize and start lwip system timer
	// don't need for UDP (no packets timeout, don't need to ask lwip to check)
	timer_systimer_lwip = SYSTIMER_CreateTimer(10000, SYSTIMER_MODE_PERIODIC, (SYSTIMER_CALLBACK_t)sys_check_timeouts, 0); // WAS  //1000000
 802948c:	f242 7010 	movw	r0, #10000	; 0x2710
 8029490:	2101      	movs	r1, #1
 8029492:	4a66      	ldr	r2, [pc, #408]	; (802962c <main+0x290>)
 8029494:	2300      	movs	r3, #0
 8029496:	f7f9 fc55 	bl	8022d44 <SYSTIMER_CreateTimer>
 802949a:	6278      	str	r0, [r7, #36]	; 0x24
	SYSTIMER_StartTimer(timer_systimer_lwip);
 802949c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802949e:	f7f9 fcef 	bl	8022e80 <SYSTIMER_StartTimer>

	// Enable interrupts once configuration complete
	PIN_INTERRUPT_Enable(&PIN_INTERRUPT_ADC0); 	// ADC0 DRDY Interrupt
 80294a2:	4863      	ldr	r0, [pc, #396]	; (8029630 <main+0x294>)
 80294a4:	f7ff f9a4 	bl	80287f0 <PIN_INTERRUPT_Enable>
	PIN_INTERRUPT_Enable(&PIN_INTERRUPT_ADC1); 	// ADC1 DRDY Interrupt
 80294a8:	4862      	ldr	r0, [pc, #392]	; (8029634 <main+0x298>)
 80294aa:	f7ff f9a1 	bl	80287f0 <PIN_INTERRUPT_Enable>
	INTERRUPT_Enable(&INTERRUPT_TC);			// Thermocouple Timer Interrupt
 80294ae:	4862      	ldr	r0, [pc, #392]	; (8029638 <main+0x29c>)
 80294b0:	f7ff f9ac 	bl	802880c <INTERRUPT_Enable>
	INTERRUPT_Enable(&INTERRUPT_TIMESTAMP);		// Millisecond Timestamping Interrupt Enabled
 80294b4:	4861      	ldr	r0, [pc, #388]	; (802963c <main+0x2a0>)
 80294b6:	f7ff f9a9 	bl	802880c <INTERRUPT_Enable>

	enum XMC_SPI_CH_SLAVE_SELECT slave_select[NUM_TC] = {SPI_MASTER_SS_SIGNAL_0, SPI_MASTER_SS_SIGNAL_1, SPI_MASTER_SS_SIGNAL_2, SPI_MASTER_SS_SIGNAL_3};
 80294ba:	4b61      	ldr	r3, [pc, #388]	; (8029640 <main+0x2a4>)
 80294bc:	463c      	mov	r4, r7
 80294be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80294c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t tc_index = 0;
 80294c4:	2300      	movs	r3, #0
 80294c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	while(1) {
		// Thermocouple SPI Transfers
		if(read_tc == 1){ // Does timer say we should transfer?
 80294ca:	4b5e      	ldr	r3, [pc, #376]	; (8029644 <main+0x2a8>)
 80294cc:	781b      	ldrb	r3, [r3, #0]
 80294ce:	2b01      	cmp	r3, #1
 80294d0:	d140      	bne.n	8029554 <main+0x1b8>
			if (!SPI_MASTER_IsRxBusy(&SPI_MASTER_TC)) { // Check if SPI is not busy
 80294d2:	485d      	ldr	r0, [pc, #372]	; (8029648 <main+0x2ac>)
 80294d4:	f7ff f968 	bl	80287a8 <SPI_MASTER_IsRxBusy>
 80294d8:	4603      	mov	r3, r0
 80294da:	f083 0301 	eor.w	r3, r3, #1
 80294de:	b2db      	uxtb	r3, r3
 80294e0:	2b00      	cmp	r3, #0
 80294e2:	d037      	beq.n	8029554 <main+0x1b8>
				SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_TC, slave_select[tc_index]);
 80294e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80294e8:	009b      	lsls	r3, r3, #2
 80294ea:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80294ee:	4413      	add	r3, r2
 80294f0:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80294f4:	b2db      	uxtb	r3, r3
 80294f6:	4854      	ldr	r0, [pc, #336]	; (8029648 <main+0x2ac>)
 80294f8:	4619      	mov	r1, r3
 80294fa:	f7ff f963 	bl	80287c4 <SPI_MASTER_EnableSlaveSelectSignal>
				SPI_MASTER_Receive(&SPI_MASTER_TC, (uint8_t*)&(TC_buff.data[tc_index]), sizeof(uint32_t));
 80294fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8029502:	3302      	adds	r3, #2
 8029504:	009b      	lsls	r3, r3, #2
 8029506:	4a51      	ldr	r2, [pc, #324]	; (802964c <main+0x2b0>)
 8029508:	4413      	add	r3, r2
 802950a:	3304      	adds	r3, #4
 802950c:	484e      	ldr	r0, [pc, #312]	; (8029648 <main+0x2ac>)
 802950e:	4619      	mov	r1, r3
 8029510:	2204      	movs	r2, #4
 8029512:	f7f9 fd93 	bl	802303c <SPI_MASTER_Receive>

				tc_index++;
 8029516:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 802951a:	3301      	adds	r3, #1
 802951c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

				if(tc_index == NUM_TC) {
 8029520:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8029524:	2b04      	cmp	r3, #4
 8029526:	d115      	bne.n	8029554 <main+0x1b8>
					tc_index = 0;
 8029528:	2300      	movs	r3, #0
 802952a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					read_tc = 0;
 802952e:	4b45      	ldr	r3, [pc, #276]	; (8029644 <main+0x2a8>)
 8029530:	2200      	movs	r2, #0
 8029532:	701a      	strb	r2, [r3, #0]

					// Send out TC packet
					TC_buff.header.seq_num = sequence_number;
 8029534:	4b46      	ldr	r3, [pc, #280]	; (8029650 <main+0x2b4>)
 8029536:	681b      	ldr	r3, [r3, #0]
 8029538:	4a44      	ldr	r2, [pc, #272]	; (802964c <main+0x2b0>)
 802953a:	6093      	str	r3, [r2, #8]
					sequence_number++;
 802953c:	4b44      	ldr	r3, [pc, #272]	; (8029650 <main+0x2b4>)
 802953e:	681b      	ldr	r3, [r3, #0]
 8029540:	3301      	adds	r3, #1
 8029542:	4a43      	ldr	r2, [pc, #268]	; (8029650 <main+0x2b4>)
 8029544:	6013      	str	r3, [r2, #0]
					send_data((void*)&TC_buff, sizeof(thermocouple_packet_t), flash.tc_port);
 8029546:	4b43      	ldr	r3, [pc, #268]	; (8029654 <main+0x2b8>)
 8029548:	8adb      	ldrh	r3, [r3, #22]
 802954a:	4840      	ldr	r0, [pc, #256]	; (802964c <main+0x2b0>)
 802954c:	211c      	movs	r1, #28
 802954e:	461a      	mov	r2, r3
 8029550:	f7ff fef2 	bl	8029338 <send_data>
		// ADC SPI Transfers
		// NEED TO SET SOME SORT OF PRIORITY HERE, WHERE WE NEED TO HAVE ADC1 HAPPEN, EVEN IF ADC1 IS READY -- NOT SURE IF THIS IS A REAL PROBLEM ONCE WE ACTUALLY HAVE INTERRUPTS INSTEAD OF READ0 and READ1 AUTO-SET TO 1 AT BEGINNING OF LOOP
		// NOTE: I HAD TO MAKE THE FIFO IN THE DAVE APP 32, NOT 16, BECAUSE 16 WOULD NOT HOLD ENOUGH DATA AND THE SPI TRANSFER WOULD SPLIT

		// ADC0 SPI Transfers
		if (read_adc0) { // Flag set
 8029554:	4b40      	ldr	r3, [pc, #256]	; (8029658 <main+0x2bc>)
 8029556:	781b      	ldrb	r3, [r3, #0]
 8029558:	2b00      	cmp	r3, #0
 802955a:	d027      	beq.n	80295ac <main+0x210>
			if (!SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)) { // SPI not already in transaction
 802955c:	4832      	ldr	r0, [pc, #200]	; (8029628 <main+0x28c>)
 802955e:	f7ff f923 	bl	80287a8 <SPI_MASTER_IsRxBusy>
 8029562:	4603      	mov	r3, r0
 8029564:	f083 0301 	eor.w	r3, r3, #1
 8029568:	b2db      	uxtb	r3, r3
 802956a:	2b00      	cmp	r3, #0
 802956c:	d01e      	beq.n	80295ac <main+0x210>
				SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_ADC, SPI_MASTER_SS_SIGNAL_0); // Change to ADC0
 802956e:	482e      	ldr	r0, [pc, #184]	; (8029628 <main+0x28c>)
 8029570:	2100      	movs	r1, #0
 8029572:	f7ff f927 	bl	80287c4 <SPI_MASTER_EnableSlaveSelectSignal>
				SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, (uint8_t*)&ADC0_buff.data, sizeof(ADC_data_t) + 3);
 8029576:	f107 0310 	add.w	r3, r7, #16
 802957a:	482b      	ldr	r0, [pc, #172]	; (8029628 <main+0x28c>)
 802957c:	4619      	mov	r1, r3
 802957e:	4a37      	ldr	r2, [pc, #220]	; (802965c <main+0x2c0>)
 8029580:	2312      	movs	r3, #18
 8029582:	f7f9 fe9f 	bl	80232c4 <SPI_MASTER_Transfer>
				read_adc0 = 0; // Reset Flag
 8029586:	4b34      	ldr	r3, [pc, #208]	; (8029658 <main+0x2bc>)
 8029588:	2200      	movs	r2, #0
 802958a:	701a      	strb	r2, [r3, #0]

				// send out ADC0 packet
				ADC0_buff.header.seq_num = sequence_number;
 802958c:	4b30      	ldr	r3, [pc, #192]	; (8029650 <main+0x2b4>)
 802958e:	681b      	ldr	r3, [r3, #0]
 8029590:	4a33      	ldr	r2, [pc, #204]	; (8029660 <main+0x2c4>)
 8029592:	6093      	str	r3, [r2, #8]
				sequence_number++;
 8029594:	4b2e      	ldr	r3, [pc, #184]	; (8029650 <main+0x2b4>)
 8029596:	681b      	ldr	r3, [r3, #0]
 8029598:	3301      	adds	r3, #1
 802959a:	4a2d      	ldr	r2, [pc, #180]	; (8029650 <main+0x2b4>)
 802959c:	6013      	str	r3, [r2, #0]
				// be careful not to send zeros
				send_data((void*)&ADC0_buff, sizeof(ADC_data_t) + sizeof(header_t), flash.adc0_port);
 802959e:	4b2d      	ldr	r3, [pc, #180]	; (8029654 <main+0x2b8>)
 80295a0:	8a5b      	ldrh	r3, [r3, #18]
 80295a2:	482f      	ldr	r0, [pc, #188]	; (8029660 <main+0x2c4>)
 80295a4:	211b      	movs	r1, #27
 80295a6:	461a      	mov	r2, r3
 80295a8:	f7ff fec6 	bl	8029338 <send_data>
			}
		}

		// ADC1 SPI Transfers
		if (read_adc1) {
 80295ac:	4b2d      	ldr	r3, [pc, #180]	; (8029664 <main+0x2c8>)
 80295ae:	781b      	ldrb	r3, [r3, #0]
 80295b0:	2b00      	cmp	r3, #0
 80295b2:	d027      	beq.n	8029604 <main+0x268>
			if (!SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)) { // SPI not already in transaction
 80295b4:	481c      	ldr	r0, [pc, #112]	; (8029628 <main+0x28c>)
 80295b6:	f7ff f8f7 	bl	80287a8 <SPI_MASTER_IsRxBusy>
 80295ba:	4603      	mov	r3, r0
 80295bc:	f083 0301 	eor.w	r3, r3, #1
 80295c0:	b2db      	uxtb	r3, r3
 80295c2:	2b00      	cmp	r3, #0
 80295c4:	d01e      	beq.n	8029604 <main+0x268>
				SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_ADC, SPI_MASTER_SS_SIGNAL_1); // Change to ADC1
 80295c6:	4818      	ldr	r0, [pc, #96]	; (8029628 <main+0x28c>)
 80295c8:	2101      	movs	r1, #1
 80295ca:	f7ff f8fb 	bl	80287c4 <SPI_MASTER_EnableSlaveSelectSignal>
				SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, (uint8_t*)&ADC0_buff.data, sizeof(ADC_data_t) + 3);
 80295ce:	f107 0310 	add.w	r3, r7, #16
 80295d2:	4815      	ldr	r0, [pc, #84]	; (8029628 <main+0x28c>)
 80295d4:	4619      	mov	r1, r3
 80295d6:	4a21      	ldr	r2, [pc, #132]	; (802965c <main+0x2c0>)
 80295d8:	2312      	movs	r3, #18
 80295da:	f7f9 fe73 	bl	80232c4 <SPI_MASTER_Transfer>
				read_adc1 = 0; // Reset Flag
 80295de:	4b21      	ldr	r3, [pc, #132]	; (8029664 <main+0x2c8>)
 80295e0:	2200      	movs	r2, #0
 80295e2:	701a      	strb	r2, [r3, #0]

				// send out ADC0 packet
				ADC1_buff.header.seq_num = sequence_number;
 80295e4:	4b1a      	ldr	r3, [pc, #104]	; (8029650 <main+0x2b4>)
 80295e6:	681b      	ldr	r3, [r3, #0]
 80295e8:	4a1f      	ldr	r2, [pc, #124]	; (8029668 <main+0x2cc>)
 80295ea:	6093      	str	r3, [r2, #8]
				sequence_number++;
 80295ec:	4b18      	ldr	r3, [pc, #96]	; (8029650 <main+0x2b4>)
 80295ee:	681b      	ldr	r3, [r3, #0]
 80295f0:	3301      	adds	r3, #1
 80295f2:	4a17      	ldr	r2, [pc, #92]	; (8029650 <main+0x2b4>)
 80295f4:	6013      	str	r3, [r2, #0]
				// be careful not to send zeros
				send_data((void*)&ADC1_buff, sizeof(ADC_data_t) + sizeof(header_t), flash.adc1_port);
 80295f6:	4b17      	ldr	r3, [pc, #92]	; (8029654 <main+0x2b8>)
 80295f8:	8a9b      	ldrh	r3, [r3, #20]
 80295fa:	481b      	ldr	r0, [pc, #108]	; (8029668 <main+0x2cc>)
 80295fc:	211b      	movs	r1, #27
 80295fe:	461a      	mov	r2, r3
 8029600:	f7ff fe9a 	bl	8029338 <send_data>
			}
		}

		if(tftp_send) {
 8029604:	4b19      	ldr	r3, [pc, #100]	; (802966c <main+0x2d0>)
 8029606:	781b      	ldrb	r3, [r3, #0]
 8029608:	2b00      	cmp	r3, #0
 802960a:	d00b      	beq.n	8029624 <main+0x288>
			// always just send out the help message
			tftp_send_data(help_msg, &last_addr, last_port);
 802960c:	4b18      	ldr	r3, [pc, #96]	; (8029670 <main+0x2d4>)
 802960e:	681a      	ldr	r2, [r3, #0]
 8029610:	4b18      	ldr	r3, [pc, #96]	; (8029674 <main+0x2d8>)
 8029612:	881b      	ldrh	r3, [r3, #0]
 8029614:	4610      	mov	r0, r2
 8029616:	4918      	ldr	r1, [pc, #96]	; (8029678 <main+0x2dc>)
 8029618:	461a      	mov	r2, r3
 802961a:	f7ff fa75 	bl	8028b08 <tftp_send_data>
			tftp_send = 0;
 802961e:	4b13      	ldr	r3, [pc, #76]	; (802966c <main+0x2d0>)
 8029620:	2200      	movs	r2, #0
 8029622:	701a      	strb	r2, [r3, #0]
		}
	} // End While Loop
 8029624:	e751      	b.n	80294ca <main+0x12e>
 8029626:	bf00      	nop
 8029628:	1ffe8900 	.word	0x1ffe8900
 802962c:	08027bf9 	.word	0x08027bf9
 8029630:	08029f8c 	.word	0x08029f8c
 8029634:	08029fb0 	.word	0x08029fb0
 8029638:	08029fd4 	.word	0x08029fd4
 802963c:	08029fd8 	.word	0x08029fd8
 8029640:	0802a58c 	.word	0x0802a58c
 8029644:	1fff0074 	.word	0x1fff0074
 8029648:	1ffe89bc 	.word	0x1ffe89bc
 802964c:	1fff07b4 	.word	0x1fff07b4
 8029650:	1fff006c 	.word	0x1fff006c
 8029654:	1fff17d8 	.word	0x1fff17d8
 8029658:	1fff0075 	.word	0x1fff0075
 802965c:	1fff17fc 	.word	0x1fff17fc
 8029660:	1fff17f0 	.word	0x1fff17f0
 8029664:	1fff0076 	.word	0x1fff0076
 8029668:	1fff0794 	.word	0x1fff0794
 802966c:	1fff00b8 	.word	0x1fff00b8
 8029670:	1ffe8a8c 	.word	0x1ffe8a8c
 8029674:	1fff17d4 	.word	0x1fff17d4
 8029678:	1fff07d0 	.word	0x1fff07d0

0802967c <CCU43_1_IRQHandler>:


// INTERRUPTS /////////////////////////////////////////////////////////////////////////////////////

	// Timer configured with 1000us period = 1ms
		void TimeStampIRQ(void) {
 802967c:	b580      	push	{r7, lr}
 802967e:	af00      	add	r7, sp, #0
			TIMER_ClearEvent(&TIMER_TIMESTAMP); // Clear Event Flag
 8029680:	4804      	ldr	r0, [pc, #16]	; (8029694 <CCU43_1_IRQHandler+0x18>)
 8029682:	f7f9 f80f 	bl	80226a4 <TIMER_ClearEvent>
			millisec++; 						// New device uptime
 8029686:	4b04      	ldr	r3, [pc, #16]	; (8029698 <CCU43_1_IRQHandler+0x1c>)
 8029688:	681b      	ldr	r3, [r3, #0]
 802968a:	3301      	adds	r3, #1
 802968c:	4a02      	ldr	r2, [pc, #8]	; (8029698 <CCU43_1_IRQHandler+0x1c>)
 802968e:	6013      	str	r3, [r2, #0]
			return;
 8029690:	bf00      	nop
		}
 8029692:	bd80      	pop	{r7, pc}
 8029694:	1ffe8838 	.word	0x1ffe8838
 8029698:	1fff0070 	.word	0x1fff0070

0802969c <CCU43_0_IRQHandler>:

	// Thermocouple trigger -- Timer configured with 100000us period = 100ms = 10Hz
		void TCIRQ(void) {
 802969c:	b580      	push	{r7, lr}
 802969e:	af00      	add	r7, sp, #0
			TIMER_ClearEvent(&TIMER_TC);		// Clear Event Flag
 80296a0:	480a      	ldr	r0, [pc, #40]	; (80296cc <CCU43_0_IRQHandler+0x30>)
 80296a2:	f7f8 ffff 	bl	80226a4 <TIMER_ClearEvent>
			TC_buff.header.ms = millisec;
 80296a6:	4b0a      	ldr	r3, [pc, #40]	; (80296d0 <CCU43_0_IRQHandler+0x34>)
 80296a8:	681b      	ldr	r3, [r3, #0]
 80296aa:	4a0a      	ldr	r2, [pc, #40]	; (80296d4 <CCU43_0_IRQHandler+0x38>)
 80296ac:	6013      	str	r3, [r2, #0]
			TC_buff.header.us = TIMER_GetTime(&TIMER_TIMESTAMP) / 100;
 80296ae:	480a      	ldr	r0, [pc, #40]	; (80296d8 <CCU43_0_IRQHandler+0x3c>)
 80296b0:	f7f9 f80a 	bl	80226c8 <TIMER_GetTime>
 80296b4:	4602      	mov	r2, r0
 80296b6:	4b09      	ldr	r3, [pc, #36]	; (80296dc <CCU43_0_IRQHandler+0x40>)
 80296b8:	fba3 2302 	umull	r2, r3, r3, r2
 80296bc:	095b      	lsrs	r3, r3, #5
 80296be:	4a05      	ldr	r2, [pc, #20]	; (80296d4 <CCU43_0_IRQHandler+0x38>)
 80296c0:	6053      	str	r3, [r2, #4]
			read_tc = 1;		// Set flag to read Thermocouples
 80296c2:	4b07      	ldr	r3, [pc, #28]	; (80296e0 <CCU43_0_IRQHandler+0x44>)
 80296c4:	2201      	movs	r2, #1
 80296c6:	701a      	strb	r2, [r3, #0]
		}
 80296c8:	bd80      	pop	{r7, pc}
 80296ca:	bf00      	nop
 80296cc:	1ffe8808 	.word	0x1ffe8808
 80296d0:	1fff0070 	.word	0x1fff0070
 80296d4:	1fff07b4 	.word	0x1fff07b4
 80296d8:	1ffe8838 	.word	0x1ffe8838
 80296dc:	51eb851f 	.word	0x51eb851f
 80296e0:	1fff0074 	.word	0x1fff0074

080296e4 <ERU0_3_IRQHandler>:


	// Data Ready Interrupt for ADC0
		void ADC0_DRDY_INT(){
 80296e4:	b580      	push	{r7, lr}
 80296e6:	af00      	add	r7, sp, #0
			ADC0_buff.header.ms = millisec;
 80296e8:	4b08      	ldr	r3, [pc, #32]	; (802970c <ERU0_3_IRQHandler+0x28>)
 80296ea:	681b      	ldr	r3, [r3, #0]
 80296ec:	4a08      	ldr	r2, [pc, #32]	; (8029710 <ERU0_3_IRQHandler+0x2c>)
 80296ee:	6013      	str	r3, [r2, #0]
			ADC0_buff.header.us = TIMER_GetTime(&TIMER_TIMESTAMP) / 100;
 80296f0:	4808      	ldr	r0, [pc, #32]	; (8029714 <ERU0_3_IRQHandler+0x30>)
 80296f2:	f7f8 ffe9 	bl	80226c8 <TIMER_GetTime>
 80296f6:	4602      	mov	r2, r0
 80296f8:	4b07      	ldr	r3, [pc, #28]	; (8029718 <ERU0_3_IRQHandler+0x34>)
 80296fa:	fba3 2302 	umull	r2, r3, r3, r2
 80296fe:	095b      	lsrs	r3, r3, #5
 8029700:	4a03      	ldr	r2, [pc, #12]	; (8029710 <ERU0_3_IRQHandler+0x2c>)
 8029702:	6053      	str	r3, [r2, #4]
			read_adc0 = 1; // Set flag to read ADC0
 8029704:	4b05      	ldr	r3, [pc, #20]	; (802971c <ERU0_3_IRQHandler+0x38>)
 8029706:	2201      	movs	r2, #1
 8029708:	701a      	strb	r2, [r3, #0]
		}
 802970a:	bd80      	pop	{r7, pc}
 802970c:	1fff0070 	.word	0x1fff0070
 8029710:	1fff17f0 	.word	0x1fff17f0
 8029714:	1ffe8838 	.word	0x1ffe8838
 8029718:	51eb851f 	.word	0x51eb851f
 802971c:	1fff0075 	.word	0x1fff0075

08029720 <ERU0_2_IRQHandler>:

	// Data Ready Interrupt for ADC1
		void ADC1_DRDY_INT(){
 8029720:	b580      	push	{r7, lr}
 8029722:	af00      	add	r7, sp, #0
			ADC1_buff.header.ms = millisec;
 8029724:	4b08      	ldr	r3, [pc, #32]	; (8029748 <ERU0_2_IRQHandler+0x28>)
 8029726:	681b      	ldr	r3, [r3, #0]
 8029728:	4a08      	ldr	r2, [pc, #32]	; (802974c <ERU0_2_IRQHandler+0x2c>)
 802972a:	6013      	str	r3, [r2, #0]
			ADC1_buff.header.us = TIMER_GetTime(&TIMER_TIMESTAMP) / 100;
 802972c:	4808      	ldr	r0, [pc, #32]	; (8029750 <ERU0_2_IRQHandler+0x30>)
 802972e:	f7f8 ffcb 	bl	80226c8 <TIMER_GetTime>
 8029732:	4602      	mov	r2, r0
 8029734:	4b07      	ldr	r3, [pc, #28]	; (8029754 <ERU0_2_IRQHandler+0x34>)
 8029736:	fba3 2302 	umull	r2, r3, r3, r2
 802973a:	095b      	lsrs	r3, r3, #5
 802973c:	4a03      	ldr	r2, [pc, #12]	; (802974c <ERU0_2_IRQHandler+0x2c>)
 802973e:	6053      	str	r3, [r2, #4]
			read_adc1 = 1; // Set flag to read ADC1
 8029740:	4b05      	ldr	r3, [pc, #20]	; (8029758 <ERU0_2_IRQHandler+0x38>)
 8029742:	2201      	movs	r2, #1
 8029744:	701a      	strb	r2, [r3, #0]
		}
 8029746:	bd80      	pop	{r7, pc}
 8029748:	1fff0070 	.word	0x1fff0070
 802974c:	1fff0794 	.word	0x1fff0794
 8029750:	1ffe8838 	.word	0x1ffe8838
 8029754:	51eb851f 	.word	0x51eb851f
 8029758:	1fff0076 	.word	0x1fff0076

0802975c <adc_register_config>:


// FUNCIONS ///////////////////////////////////////////////////////////////////////////////////////

void adc_register_config() {
 802975c:	b580      	push	{r7, lr}
 802975e:	b08a      	sub	sp, #40	; 0x28
 8029760:	af00      	add	r7, sp, #0
	// Register Configurations
		uint8_t unlock[3] = {0x06, 0x55, 0x0}; 				// Unlocks ADC
 8029762:	4a75      	ldr	r2, [pc, #468]	; (8029938 <adc_register_config+0x1dc>)
 8029764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8029768:	8811      	ldrh	r1, [r2, #0]
 802976a:	7892      	ldrb	r2, [r2, #2]
 802976c:	8019      	strh	r1, [r3, #0]
 802976e:	709a      	strb	r2, [r3, #2]
		uint8_t null[18] = {0x00};							// Sends null for reads
 8029770:	f107 0310 	add.w	r3, r7, #16
 8029774:	2200      	movs	r2, #0
 8029776:	601a      	str	r2, [r3, #0]
 8029778:	3304      	adds	r3, #4
 802977a:	2200      	movs	r2, #0
 802977c:	601a      	str	r2, [r3, #0]
 802977e:	3304      	adds	r3, #4
 8029780:	2200      	movs	r2, #0
 8029782:	601a      	str	r2, [r3, #0]
 8029784:	3304      	adds	r3, #4
 8029786:	2200      	movs	r2, #0
 8029788:	601a      	str	r2, [r3, #0]
 802978a:	3304      	adds	r3, #4
 802978c:	2200      	movs	r2, #0
 802978e:	801a      	strh	r2, [r3, #0]
 8029790:	3302      	adds	r3, #2
		uint8_t write_A_SYS_CFG[3] = {0x4B, 0x68, 0x00};	// b(01101000) -- Neg Charge Pump Powered Down | High-Res | 2.442 Internal Reference | Internal Voltage Enabled | 5/95% Comparator Threshold
 8029792:	4a6a      	ldr	r2, [pc, #424]	; (802993c <adc_register_config+0x1e0>)
 8029794:	f107 030c 	add.w	r3, r7, #12
 8029798:	8811      	ldrh	r1, [r2, #0]
 802979a:	7892      	ldrb	r2, [r2, #2]
 802979c:	8019      	strh	r1, [r3, #0]
 802979e:	709a      	strb	r2, [r3, #2]
		uint8_t write_D_SYS_CFG[3] = {0x4C, 0x3C, 0x00};	// b(00111100) -- Watchdog Disabled | No CRC | 12ns delay for DONE (not used) | 12ns delay for Hi-Z on DOUT | Fixed Frame Size (6 frames) | CRC disabled
 80297a0:	4a67      	ldr	r2, [pc, #412]	; (8029940 <adc_register_config+0x1e4>)
 80297a2:	f107 0308 	add.w	r3, r7, #8
 80297a6:	8811      	ldrh	r1, [r2, #0]
 80297a8:	7892      	ldrb	r2, [r2, #2]
 80297aa:	8019      	strh	r1, [r3, #0]
 80297ac:	709a      	strb	r2, [r3, #2]
		uint8_t write_CLK1[3] = {0x4D, 0x02, 0x00};			// b(00000010) -- XTAL CLK Source | CLKIN /2
 80297ae:	4a65      	ldr	r2, [pc, #404]	; (8029944 <adc_register_config+0x1e8>)
 80297b0:	1d3b      	adds	r3, r7, #4
 80297b2:	8811      	ldrh	r1, [r2, #0]
 80297b4:	7892      	ldrb	r2, [r2, #2]
 80297b6:	8019      	strh	r1, [r3, #0]
 80297b8:	709a      	strb	r2, [r3, #2]
		uint8_t write_CLK2_43kHz[3] = {0x4E, 0x4E, 0x00};	// b(01001110) -- ICLK / 4 | OSR = fMOD / 48
 80297ba:	4a63      	ldr	r2, [pc, #396]	; (8029948 <adc_register_config+0x1ec>)
 80297bc:	463b      	mov	r3, r7
 80297be:	8811      	ldrh	r1, [r2, #0]
 80297c0:	7892      	ldrb	r2, [r2, #2]
 80297c2:	8019      	strh	r1, [r3, #0]
 80297c4:	709a      	strb	r2, [r3, #2]
		// NOTE -- write_CLK2_43kHz gives a final sample rate of 42.667kHz
		// NOTE -- write_CLK2_8kHz gives a final sample rate of 8kHz


	// Clear configArray for debug
		for (uint8_t i = 0; i<  56; i++){
 80297c6:	2300      	movs	r3, #0
 80297c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80297cc:	e009      	b.n	80297e2 <adc_register_config+0x86>
			configArray[i] = 0x00;
 80297ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80297d2:	4a5e      	ldr	r2, [pc, #376]	; (802994c <adc_register_config+0x1f0>)
 80297d4:	2100      	movs	r1, #0
 80297d6:	54d1      	strb	r1, [r2, r3]
		// NOTE -- write_CLK2_43kHz gives a final sample rate of 42.667kHz
		// NOTE -- write_CLK2_8kHz gives a final sample rate of 8kHz


	// Clear configArray for debug
		for (uint8_t i = 0; i<  56; i++){
 80297d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80297dc:	3301      	adds	r3, #1
 80297de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80297e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80297e6:	2b37      	cmp	r3, #55	; 0x37
 80297e8:	d9f1      	bls.n	80297ce <adc_register_config+0x72>
			configArray[i] = 0x00;
		}

	// Transfer Null
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, configArray, 3U);
 80297ea:	f107 0310 	add.w	r3, r7, #16
 80297ee:	4858      	ldr	r0, [pc, #352]	; (8029950 <adc_register_config+0x1f4>)
 80297f0:	4619      	mov	r1, r3
 80297f2:	4a56      	ldr	r2, [pc, #344]	; (802994c <adc_register_config+0x1f0>)
 80297f4:	2303      	movs	r3, #3
 80297f6:	f7f9 fd65 	bl	80232c4 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 80297fa:	bf00      	nop
 80297fc:	4854      	ldr	r0, [pc, #336]	; (8029950 <adc_register_config+0x1f4>)
 80297fe:	f7fe ffd3 	bl	80287a8 <SPI_MASTER_IsRxBusy>
 8029802:	4603      	mov	r3, r0
 8029804:	2b00      	cmp	r3, #0
 8029806:	d1f9      	bne.n	80297fc <adc_register_config+0xa0>

	//  Unlock ADC for configuration
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, unlock, configArray, 3U);
 8029808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802980c:	4850      	ldr	r0, [pc, #320]	; (8029950 <adc_register_config+0x1f4>)
 802980e:	4619      	mov	r1, r3
 8029810:	4a4e      	ldr	r2, [pc, #312]	; (802994c <adc_register_config+0x1f0>)
 8029812:	2303      	movs	r3, #3
 8029814:	f7f9 fd56 	bl	80232c4 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8029818:	bf00      	nop
 802981a:	484d      	ldr	r0, [pc, #308]	; (8029950 <adc_register_config+0x1f4>)
 802981c:	f7fe ffc4 	bl	80287a8 <SPI_MASTER_IsRxBusy>
 8029820:	4603      	mov	r3, r0
 8029822:	2b00      	cmp	r3, #0
 8029824:	d1f9      	bne.n	802981a <adc_register_config+0xbe>

	// Transfer Null
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, configArray+3, 3U);
 8029826:	f107 0310 	add.w	r3, r7, #16
 802982a:	4849      	ldr	r0, [pc, #292]	; (8029950 <adc_register_config+0x1f4>)
 802982c:	4619      	mov	r1, r3
 802982e:	4a49      	ldr	r2, [pc, #292]	; (8029954 <adc_register_config+0x1f8>)
 8029830:	2303      	movs	r3, #3
 8029832:	f7f9 fd47 	bl	80232c4 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8029836:	bf00      	nop
 8029838:	4845      	ldr	r0, [pc, #276]	; (8029950 <adc_register_config+0x1f4>)
 802983a:	f7fe ffb5 	bl	80287a8 <SPI_MASTER_IsRxBusy>
 802983e:	4603      	mov	r3, r0
 8029840:	2b00      	cmp	r3, #0
 8029842:	d1f9      	bne.n	8029838 <adc_register_config+0xdc>

	// Write to A_SYS_CFG (See Above)
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, write_A_SYS_CFG, configArray+6, 3U);
 8029844:	f107 030c 	add.w	r3, r7, #12
 8029848:	4841      	ldr	r0, [pc, #260]	; (8029950 <adc_register_config+0x1f4>)
 802984a:	4619      	mov	r1, r3
 802984c:	4a42      	ldr	r2, [pc, #264]	; (8029958 <adc_register_config+0x1fc>)
 802984e:	2303      	movs	r3, #3
 8029850:	f7f9 fd38 	bl	80232c4 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8029854:	bf00      	nop
 8029856:	483e      	ldr	r0, [pc, #248]	; (8029950 <adc_register_config+0x1f4>)
 8029858:	f7fe ffa6 	bl	80287a8 <SPI_MASTER_IsRxBusy>
 802985c:	4603      	mov	r3, r0
 802985e:	2b00      	cmp	r3, #0
 8029860:	d1f9      	bne.n	8029856 <adc_register_config+0xfa>
		// Transfer Null
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, configArray+9, 3U);
 8029862:	f107 0310 	add.w	r3, r7, #16
 8029866:	483a      	ldr	r0, [pc, #232]	; (8029950 <adc_register_config+0x1f4>)
 8029868:	4619      	mov	r1, r3
 802986a:	4a3c      	ldr	r2, [pc, #240]	; (802995c <adc_register_config+0x200>)
 802986c:	2303      	movs	r3, #3
 802986e:	f7f9 fd29 	bl	80232c4 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8029872:	bf00      	nop
 8029874:	4836      	ldr	r0, [pc, #216]	; (8029950 <adc_register_config+0x1f4>)
 8029876:	f7fe ff97 	bl	80287a8 <SPI_MASTER_IsRxBusy>
 802987a:	4603      	mov	r3, r0
 802987c:	2b00      	cmp	r3, #0
 802987e:	d1f9      	bne.n	8029874 <adc_register_config+0x118>

	// Write to D_SYS_CFG (See Above)
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, write_D_SYS_CFG, configArray+12, 3U);
 8029880:	f107 0308 	add.w	r3, r7, #8
 8029884:	4832      	ldr	r0, [pc, #200]	; (8029950 <adc_register_config+0x1f4>)
 8029886:	4619      	mov	r1, r3
 8029888:	4a35      	ldr	r2, [pc, #212]	; (8029960 <adc_register_config+0x204>)
 802988a:	2303      	movs	r3, #3
 802988c:	f7f9 fd1a 	bl	80232c4 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8029890:	bf00      	nop
 8029892:	482f      	ldr	r0, [pc, #188]	; (8029950 <adc_register_config+0x1f4>)
 8029894:	f7fe ff88 	bl	80287a8 <SPI_MASTER_IsRxBusy>
 8029898:	4603      	mov	r3, r0
 802989a:	2b00      	cmp	r3, #0
 802989c:	d1f9      	bne.n	8029892 <adc_register_config+0x136>

	// Transfer Null
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, configArray+15, 3U);
 802989e:	f107 0310 	add.w	r3, r7, #16
 80298a2:	482b      	ldr	r0, [pc, #172]	; (8029950 <adc_register_config+0x1f4>)
 80298a4:	4619      	mov	r1, r3
 80298a6:	4a2f      	ldr	r2, [pc, #188]	; (8029964 <adc_register_config+0x208>)
 80298a8:	2303      	movs	r3, #3
 80298aa:	f7f9 fd0b 	bl	80232c4 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 80298ae:	bf00      	nop
 80298b0:	4827      	ldr	r0, [pc, #156]	; (8029950 <adc_register_config+0x1f4>)
 80298b2:	f7fe ff79 	bl	80287a8 <SPI_MASTER_IsRxBusy>
 80298b6:	4603      	mov	r3, r0
 80298b8:	2b00      	cmp	r3, #0
 80298ba:	d1f9      	bne.n	80298b0 <adc_register_config+0x154>

	// Write to CLK1 (See Above)
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, write_CLK1, configArray+18, 3U);
 80298bc:	1d3b      	adds	r3, r7, #4
 80298be:	4824      	ldr	r0, [pc, #144]	; (8029950 <adc_register_config+0x1f4>)
 80298c0:	4619      	mov	r1, r3
 80298c2:	4a29      	ldr	r2, [pc, #164]	; (8029968 <adc_register_config+0x20c>)
 80298c4:	2303      	movs	r3, #3
 80298c6:	f7f9 fcfd 	bl	80232c4 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 80298ca:	bf00      	nop
 80298cc:	4820      	ldr	r0, [pc, #128]	; (8029950 <adc_register_config+0x1f4>)
 80298ce:	f7fe ff6b 	bl	80287a8 <SPI_MASTER_IsRxBusy>
 80298d2:	4603      	mov	r3, r0
 80298d4:	2b00      	cmp	r3, #0
 80298d6:	d1f9      	bne.n	80298cc <adc_register_config+0x170>

	// Transfer Null
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, configArray+21, 3U);
 80298d8:	f107 0310 	add.w	r3, r7, #16
 80298dc:	481c      	ldr	r0, [pc, #112]	; (8029950 <adc_register_config+0x1f4>)
 80298de:	4619      	mov	r1, r3
 80298e0:	4a22      	ldr	r2, [pc, #136]	; (802996c <adc_register_config+0x210>)
 80298e2:	2303      	movs	r3, #3
 80298e4:	f7f9 fcee 	bl	80232c4 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 80298e8:	bf00      	nop
 80298ea:	4819      	ldr	r0, [pc, #100]	; (8029950 <adc_register_config+0x1f4>)
 80298ec:	f7fe ff5c 	bl	80287a8 <SPI_MASTER_IsRxBusy>
 80298f0:	4603      	mov	r3, r0
 80298f2:	2b00      	cmp	r3, #0
 80298f4:	d1f9      	bne.n	80298ea <adc_register_config+0x18e>

	// Write to CLK2 (See Above)
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, write_CLK2_43kHz, configArray+24, 3U);
 80298f6:	463b      	mov	r3, r7
 80298f8:	4815      	ldr	r0, [pc, #84]	; (8029950 <adc_register_config+0x1f4>)
 80298fa:	4619      	mov	r1, r3
 80298fc:	4a1c      	ldr	r2, [pc, #112]	; (8029970 <adc_register_config+0x214>)
 80298fe:	2303      	movs	r3, #3
 8029900:	f7f9 fce0 	bl	80232c4 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8029904:	bf00      	nop
 8029906:	4812      	ldr	r0, [pc, #72]	; (8029950 <adc_register_config+0x1f4>)
 8029908:	f7fe ff4e 	bl	80287a8 <SPI_MASTER_IsRxBusy>
 802990c:	4603      	mov	r3, r0
 802990e:	2b00      	cmp	r3, #0
 8029910:	d1f9      	bne.n	8029906 <adc_register_config+0x1aa>

	// Transfer Null
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, configArray+27, 3U);
 8029912:	f107 0310 	add.w	r3, r7, #16
 8029916:	480e      	ldr	r0, [pc, #56]	; (8029950 <adc_register_config+0x1f4>)
 8029918:	4619      	mov	r1, r3
 802991a:	4a16      	ldr	r2, [pc, #88]	; (8029974 <adc_register_config+0x218>)
 802991c:	2303      	movs	r3, #3
 802991e:	f7f9 fcd1 	bl	80232c4 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8029922:	bf00      	nop
 8029924:	480a      	ldr	r0, [pc, #40]	; (8029950 <adc_register_config+0x1f4>)
 8029926:	f7fe ff3f 	bl	80287a8 <SPI_MASTER_IsRxBusy>
 802992a:	4603      	mov	r3, r0
 802992c:	2b00      	cmp	r3, #0
 802992e:	d1f9      	bne.n	8029924 <adc_register_config+0x1c8>

}
 8029930:	3728      	adds	r7, #40	; 0x28
 8029932:	46bd      	mov	sp, r7
 8029934:	bd80      	pop	{r7, pc}
 8029936:	bf00      	nop
 8029938:	0802a59c 	.word	0x0802a59c
 802993c:	0802a5a0 	.word	0x0802a5a0
 8029940:	0802a5a4 	.word	0x0802a5a4
 8029944:	0802a5a8 	.word	0x0802a5a8
 8029948:	0802a5ac 	.word	0x0802a5ac
 802994c:	1fff0078 	.word	0x1fff0078
 8029950:	1ffe8900 	.word	0x1ffe8900
 8029954:	1fff007b 	.word	0x1fff007b
 8029958:	1fff007e 	.word	0x1fff007e
 802995c:	1fff0081 	.word	0x1fff0081
 8029960:	1fff0084 	.word	0x1fff0084
 8029964:	1fff0087 	.word	0x1fff0087
 8029968:	1fff008a 	.word	0x1fff008a
 802996c:	1fff008d 	.word	0x1fff008d
 8029970:	1fff0090 	.word	0x1fff0090
 8029974:	1fff0093 	.word	0x1fff0093

08029978 <xmc_ADC_setup>:

void xmc_ADC_setup(){
 8029978:	b580      	push	{r7, lr}
 802997a:	b088      	sub	sp, #32
 802997c:	af00      	add	r7, sp, #0
	uint8_t null[18] = {0x00};						// Sends null for reads
 802997e:	f107 030c 	add.w	r3, r7, #12
 8029982:	2200      	movs	r2, #0
 8029984:	601a      	str	r2, [r3, #0]
 8029986:	3304      	adds	r3, #4
 8029988:	2200      	movs	r2, #0
 802998a:	601a      	str	r2, [r3, #0]
 802998c:	3304      	adds	r3, #4
 802998e:	2200      	movs	r2, #0
 8029990:	601a      	str	r2, [r3, #0]
 8029992:	3304      	adds	r3, #4
 8029994:	2200      	movs	r2, #0
 8029996:	601a      	str	r2, [r3, #0]
 8029998:	3304      	adds	r3, #4
 802999a:	2200      	movs	r2, #0
 802999c:	801a      	strh	r2, [r3, #0]
 802999e:	3302      	adds	r3, #2
	uint8_t write_ADC_ENA[3] = {0x4F, 0x0F, 0x00};	// b(00001111) -- Enables all ADC channels (note: no option to enable certain channels, all or nothing)
 80299a0:	4a27      	ldr	r2, [pc, #156]	; (8029a40 <xmc_ADC_setup+0xc8>)
 80299a2:	f107 0308 	add.w	r3, r7, #8
 80299a6:	8811      	ldrh	r1, [r2, #0]
 80299a8:	7892      	ldrb	r2, [r2, #2]
 80299aa:	8019      	strh	r1, [r3, #0]
 80299ac:	709a      	strb	r2, [r3, #2]
	uint8_t wakeup[3] = {0x00, 0x33, 0x00};			// b(00110011) -- Bring ADC out of standby (start collection)
 80299ae:	2300      	movs	r3, #0
 80299b0:	713b      	strb	r3, [r7, #4]
 80299b2:	2333      	movs	r3, #51	; 0x33
 80299b4:	717b      	strb	r3, [r7, #5]
 80299b6:	2300      	movs	r3, #0
 80299b8:	71bb      	strb	r3, [r7, #6]

	// Write to ADC_ENA (See Above)
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, write_ADC_ENA, configArray, 3U);
 80299ba:	f107 0308 	add.w	r3, r7, #8
 80299be:	4821      	ldr	r0, [pc, #132]	; (8029a44 <xmc_ADC_setup+0xcc>)
 80299c0:	4619      	mov	r1, r3
 80299c2:	4a21      	ldr	r2, [pc, #132]	; (8029a48 <xmc_ADC_setup+0xd0>)
 80299c4:	2303      	movs	r3, #3
 80299c6:	f7f9 fc7d 	bl	80232c4 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 80299ca:	bf00      	nop
 80299cc:	481d      	ldr	r0, [pc, #116]	; (8029a44 <xmc_ADC_setup+0xcc>)
 80299ce:	f7fe feeb 	bl	80287a8 <SPI_MASTER_IsRxBusy>
 80299d2:	4603      	mov	r3, r0
 80299d4:	2b00      	cmp	r3, #0
 80299d6:	d1f9      	bne.n	80299cc <xmc_ADC_setup+0x54>

	// Transfer Null
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, configArray+30, 3U);
 80299d8:	f107 030c 	add.w	r3, r7, #12
 80299dc:	4819      	ldr	r0, [pc, #100]	; (8029a44 <xmc_ADC_setup+0xcc>)
 80299de:	4619      	mov	r1, r3
 80299e0:	4a1a      	ldr	r2, [pc, #104]	; (8029a4c <xmc_ADC_setup+0xd4>)
 80299e2:	2303      	movs	r3, #3
 80299e4:	f7f9 fc6e 	bl	80232c4 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 80299e8:	bf00      	nop
 80299ea:	4816      	ldr	r0, [pc, #88]	; (8029a44 <xmc_ADC_setup+0xcc>)
 80299ec:	f7fe fedc 	bl	80287a8 <SPI_MASTER_IsRxBusy>
 80299f0:	4603      	mov	r3, r0
 80299f2:	2b00      	cmp	r3, #0
 80299f4:	d1f9      	bne.n	80299ea <xmc_ADC_setup+0x72>

	// Wakeup ADC and start conversions
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, wakeup, configArray, 3U);
 80299f6:	1d3b      	adds	r3, r7, #4
 80299f8:	4812      	ldr	r0, [pc, #72]	; (8029a44 <xmc_ADC_setup+0xcc>)
 80299fa:	4619      	mov	r1, r3
 80299fc:	4a12      	ldr	r2, [pc, #72]	; (8029a48 <xmc_ADC_setup+0xd0>)
 80299fe:	2303      	movs	r3, #3
 8029a00:	f7f9 fc60 	bl	80232c4 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8029a04:	bf00      	nop
 8029a06:	480f      	ldr	r0, [pc, #60]	; (8029a44 <xmc_ADC_setup+0xcc>)
 8029a08:	f7fe fece 	bl	80287a8 <SPI_MASTER_IsRxBusy>
 8029a0c:	4603      	mov	r3, r0
 8029a0e:	2b00      	cmp	r3, #0
 8029a10:	d1f9      	bne.n	8029a06 <xmc_ADC_setup+0x8e>

	// Transfer Null
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, configArray+33, 3U);
 8029a12:	f107 030c 	add.w	r3, r7, #12
 8029a16:	480b      	ldr	r0, [pc, #44]	; (8029a44 <xmc_ADC_setup+0xcc>)
 8029a18:	4619      	mov	r1, r3
 8029a1a:	4a0d      	ldr	r2, [pc, #52]	; (8029a50 <xmc_ADC_setup+0xd8>)
 8029a1c:	2303      	movs	r3, #3
 8029a1e:	f7f9 fc51 	bl	80232c4 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8029a22:	bf00      	nop
 8029a24:	4807      	ldr	r0, [pc, #28]	; (8029a44 <xmc_ADC_setup+0xcc>)
 8029a26:	f7fe febf 	bl	80287a8 <SPI_MASTER_IsRxBusy>
 8029a2a:	4603      	mov	r3, r0
 8029a2c:	2b00      	cmp	r3, #0
 8029a2e:	d1f9      	bne.n	8029a24 <xmc_ADC_setup+0xac>

	// Set to "infinite" frame length
		XMC_SPI_CH_SetFrameLength(XMC_SPI2_CH0, 64); // When set to 64, frame does not end based on DAVE App Configuration -- this allows us to grab all 144 bits of data out of the ADC during data collection
 8029a30:	4808      	ldr	r0, [pc, #32]	; (8029a54 <xmc_ADC_setup+0xdc>)
 8029a32:	2140      	movs	r1, #64	; 0x40
 8029a34:	f7fe feaa 	bl	802878c <XMC_SPI_CH_SetFrameLength>

}
 8029a38:	3720      	adds	r7, #32
 8029a3a:	46bd      	mov	sp, r7
 8029a3c:	bd80      	pop	{r7, pc}
 8029a3e:	bf00      	nop
 8029a40:	0802a5b0 	.word	0x0802a5b0
 8029a44:	1ffe8900 	.word	0x1ffe8900
 8029a48:	1fff0078 	.word	0x1fff0078
 8029a4c:	1fff0096 	.word	0x1fff0096
 8029a50:	1fff0099 	.word	0x1fff0099
 8029a54:	48024000 	.word	0x48024000

08029a58 <atoi>:
 8029a58:	2100      	movs	r1, #0
 8029a5a:	220a      	movs	r2, #10
 8029a5c:	f000 b922 	b.w	8029ca4 <strtol>

08029a60 <__errno>:
 8029a60:	4b01      	ldr	r3, [pc, #4]	; (8029a68 <__errno+0x8>)
 8029a62:	6818      	ldr	r0, [r3, #0]
 8029a64:	4770      	bx	lr
 8029a66:	bf00      	nop
 8029a68:	1ffe8af0 	.word	0x1ffe8af0

08029a6c <__libc_init_array>:
 8029a6c:	b570      	push	{r4, r5, r6, lr}
 8029a6e:	4b0e      	ldr	r3, [pc, #56]	; (8029aa8 <__libc_init_array+0x3c>)
 8029a70:	4c0e      	ldr	r4, [pc, #56]	; (8029aac <__libc_init_array+0x40>)
 8029a72:	1ae4      	subs	r4, r4, r3
 8029a74:	10a4      	asrs	r4, r4, #2
 8029a76:	2500      	movs	r5, #0
 8029a78:	461e      	mov	r6, r3
 8029a7a:	42a5      	cmp	r5, r4
 8029a7c:	d004      	beq.n	8029a88 <__libc_init_array+0x1c>
 8029a7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8029a82:	4798      	blx	r3
 8029a84:	3501      	adds	r5, #1
 8029a86:	e7f8      	b.n	8029a7a <__libc_init_array+0xe>
 8029a88:	f7f8 fd58 	bl	802253c <_init>
 8029a8c:	4c08      	ldr	r4, [pc, #32]	; (8029ab0 <__libc_init_array+0x44>)
 8029a8e:	4b09      	ldr	r3, [pc, #36]	; (8029ab4 <__libc_init_array+0x48>)
 8029a90:	1ae4      	subs	r4, r4, r3
 8029a92:	10a4      	asrs	r4, r4, #2
 8029a94:	2500      	movs	r5, #0
 8029a96:	461e      	mov	r6, r3
 8029a98:	42a5      	cmp	r5, r4
 8029a9a:	d004      	beq.n	8029aa6 <__libc_init_array+0x3a>
 8029a9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8029aa0:	4798      	blx	r3
 8029aa2:	3501      	adds	r5, #1
 8029aa4:	e7f8      	b.n	8029a98 <__libc_init_array+0x2c>
 8029aa6:	bd70      	pop	{r4, r5, r6, pc}
 8029aa8:	1ffe8af8 	.word	0x1ffe8af8
 8029aac:	1ffe8af8 	.word	0x1ffe8af8
 8029ab0:	1ffe8af8 	.word	0x1ffe8af8
 8029ab4:	1ffe8af8 	.word	0x1ffe8af8

08029ab8 <memcmp>:
 8029ab8:	b510      	push	{r4, lr}
 8029aba:	440a      	add	r2, r1
 8029abc:	1e44      	subs	r4, r0, #1
 8029abe:	4291      	cmp	r1, r2
 8029ac0:	d008      	beq.n	8029ad4 <memcmp+0x1c>
 8029ac2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8029ac6:	7808      	ldrb	r0, [r1, #0]
 8029ac8:	4283      	cmp	r3, r0
 8029aca:	d001      	beq.n	8029ad0 <memcmp+0x18>
 8029acc:	1a18      	subs	r0, r3, r0
 8029ace:	bd10      	pop	{r4, pc}
 8029ad0:	3101      	adds	r1, #1
 8029ad2:	e7f4      	b.n	8029abe <memcmp+0x6>
 8029ad4:	2000      	movs	r0, #0
 8029ad6:	bd10      	pop	{r4, pc}

08029ad8 <memcpy>:
 8029ad8:	b510      	push	{r4, lr}
 8029ada:	1e43      	subs	r3, r0, #1
 8029adc:	440a      	add	r2, r1
 8029ade:	4291      	cmp	r1, r2
 8029ae0:	d004      	beq.n	8029aec <memcpy+0x14>
 8029ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029ae6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8029aea:	e7f8      	b.n	8029ade <memcpy+0x6>
 8029aec:	bd10      	pop	{r4, pc}

08029aee <memset>:
 8029aee:	4402      	add	r2, r0
 8029af0:	4603      	mov	r3, r0
 8029af2:	4293      	cmp	r3, r2
 8029af4:	d002      	beq.n	8029afc <memset+0xe>
 8029af6:	f803 1b01 	strb.w	r1, [r3], #1
 8029afa:	e7fa      	b.n	8029af2 <memset+0x4>
 8029afc:	4770      	bx	lr
	...

08029b00 <rand>:
 8029b00:	4b19      	ldr	r3, [pc, #100]	; (8029b68 <rand+0x68>)
 8029b02:	b510      	push	{r4, lr}
 8029b04:	681c      	ldr	r4, [r3, #0]
 8029b06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8029b08:	b9d3      	cbnz	r3, 8029b40 <rand+0x40>
 8029b0a:	2018      	movs	r0, #24
 8029b0c:	f000 f8d8 	bl	8029cc0 <malloc>
 8029b10:	f243 330e 	movw	r3, #13070	; 0x330e
 8029b14:	63a0      	str	r0, [r4, #56]	; 0x38
 8029b16:	8003      	strh	r3, [r0, #0]
 8029b18:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8029b1c:	8043      	strh	r3, [r0, #2]
 8029b1e:	f241 2334 	movw	r3, #4660	; 0x1234
 8029b22:	8083      	strh	r3, [r0, #4]
 8029b24:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8029b28:	80c3      	strh	r3, [r0, #6]
 8029b2a:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8029b2e:	8103      	strh	r3, [r0, #8]
 8029b30:	2305      	movs	r3, #5
 8029b32:	8143      	strh	r3, [r0, #10]
 8029b34:	230b      	movs	r3, #11
 8029b36:	8183      	strh	r3, [r0, #12]
 8029b38:	2201      	movs	r2, #1
 8029b3a:	2300      	movs	r3, #0
 8029b3c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8029b40:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8029b42:	4c0a      	ldr	r4, [pc, #40]	; (8029b6c <rand+0x6c>)
 8029b44:	690b      	ldr	r3, [r1, #16]
 8029b46:	6948      	ldr	r0, [r1, #20]
 8029b48:	4a09      	ldr	r2, [pc, #36]	; (8029b70 <rand+0x70>)
 8029b4a:	435c      	muls	r4, r3
 8029b4c:	fb02 4000 	mla	r0, r2, r0, r4
 8029b50:	fba3 2302 	umull	r2, r3, r3, r2
 8029b54:	3201      	adds	r2, #1
 8029b56:	4403      	add	r3, r0
 8029b58:	f143 0300 	adc.w	r3, r3, #0
 8029b5c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8029b60:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8029b64:	bd10      	pop	{r4, pc}
 8029b66:	bf00      	nop
 8029b68:	1ffe8af0 	.word	0x1ffe8af0
 8029b6c:	5851f42d 	.word	0x5851f42d
 8029b70:	4c957f2d 	.word	0x4c957f2d

08029b74 <strcmp>:
 8029b74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029b78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029b7c:	2a01      	cmp	r2, #1
 8029b7e:	bf28      	it	cs
 8029b80:	429a      	cmpcs	r2, r3
 8029b82:	d0f7      	beq.n	8029b74 <strcmp>
 8029b84:	1ad0      	subs	r0, r2, r3
 8029b86:	4770      	bx	lr

08029b88 <strlen>:
 8029b88:	4603      	mov	r3, r0
 8029b8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029b8e:	2a00      	cmp	r2, #0
 8029b90:	d1fb      	bne.n	8029b8a <strlen+0x2>
 8029b92:	1a18      	subs	r0, r3, r0
 8029b94:	3801      	subs	r0, #1
 8029b96:	4770      	bx	lr

08029b98 <_strtol_r>:
 8029b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029b9c:	4c40      	ldr	r4, [pc, #256]	; (8029ca0 <_strtol_r+0x108>)
 8029b9e:	f8d4 9000 	ldr.w	r9, [r4]
 8029ba2:	460f      	mov	r7, r1
 8029ba4:	463d      	mov	r5, r7
 8029ba6:	f815 eb01 	ldrb.w	lr, [r5], #1
 8029baa:	eb09 040e 	add.w	r4, r9, lr
 8029bae:	7866      	ldrb	r6, [r4, #1]
 8029bb0:	f006 0408 	and.w	r4, r6, #8
 8029bb4:	f004 06ff 	and.w	r6, r4, #255	; 0xff
 8029bb8:	b10c      	cbz	r4, 8029bbe <_strtol_r+0x26>
 8029bba:	462f      	mov	r7, r5
 8029bbc:	e7f2      	b.n	8029ba4 <_strtol_r+0xc>
 8029bbe:	4674      	mov	r4, lr
 8029bc0:	2c2d      	cmp	r4, #45	; 0x2d
 8029bc2:	d103      	bne.n	8029bcc <_strtol_r+0x34>
 8029bc4:	1cbd      	adds	r5, r7, #2
 8029bc6:	787c      	ldrb	r4, [r7, #1]
 8029bc8:	2601      	movs	r6, #1
 8029bca:	e003      	b.n	8029bd4 <_strtol_r+0x3c>
 8029bcc:	2c2b      	cmp	r4, #43	; 0x2b
 8029bce:	bf04      	itt	eq
 8029bd0:	787c      	ldrbeq	r4, [r7, #1]
 8029bd2:	1cbd      	addeq	r5, r7, #2
 8029bd4:	b113      	cbz	r3, 8029bdc <_strtol_r+0x44>
 8029bd6:	2b10      	cmp	r3, #16
 8029bd8:	d10a      	bne.n	8029bf0 <_strtol_r+0x58>
 8029bda:	e05a      	b.n	8029c92 <_strtol_r+0xfa>
 8029bdc:	2c30      	cmp	r4, #48	; 0x30
 8029bde:	d156      	bne.n	8029c8e <_strtol_r+0xf6>
 8029be0:	782c      	ldrb	r4, [r5, #0]
 8029be2:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8029be6:	2c58      	cmp	r4, #88	; 0x58
 8029be8:	d14c      	bne.n	8029c84 <_strtol_r+0xec>
 8029bea:	786c      	ldrb	r4, [r5, #1]
 8029bec:	2310      	movs	r3, #16
 8029bee:	3502      	adds	r5, #2
 8029bf0:	2e00      	cmp	r6, #0
 8029bf2:	bf14      	ite	ne
 8029bf4:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
 8029bf8:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
 8029bfc:	2700      	movs	r7, #0
 8029bfe:	fbb8 faf3 	udiv	sl, r8, r3
 8029c02:	46be      	mov	lr, r7
 8029c04:	fb03 881a 	mls	r8, r3, sl, r8
 8029c08:	eb09 0c04 	add.w	ip, r9, r4
 8029c0c:	f89c c001 	ldrb.w	ip, [ip, #1]
 8029c10:	f01c 0f04 	tst.w	ip, #4
 8029c14:	d001      	beq.n	8029c1a <_strtol_r+0x82>
 8029c16:	3c30      	subs	r4, #48	; 0x30
 8029c18:	e00b      	b.n	8029c32 <_strtol_r+0x9a>
 8029c1a:	f01c 0c03 	ands.w	ip, ip, #3
 8029c1e:	d01b      	beq.n	8029c58 <_strtol_r+0xc0>
 8029c20:	f1bc 0f01 	cmp.w	ip, #1
 8029c24:	bf0c      	ite	eq
 8029c26:	f04f 0c37 	moveq.w	ip, #55	; 0x37
 8029c2a:	f04f 0c57 	movne.w	ip, #87	; 0x57
 8029c2e:	ebcc 0404 	rsb	r4, ip, r4
 8029c32:	429c      	cmp	r4, r3
 8029c34:	da10      	bge.n	8029c58 <_strtol_r+0xc0>
 8029c36:	f1b7 3fff 	cmp.w	r7, #4294967295
 8029c3a:	d00a      	beq.n	8029c52 <_strtol_r+0xba>
 8029c3c:	45d6      	cmp	lr, sl
 8029c3e:	d806      	bhi.n	8029c4e <_strtol_r+0xb6>
 8029c40:	d101      	bne.n	8029c46 <_strtol_r+0xae>
 8029c42:	4544      	cmp	r4, r8
 8029c44:	dc03      	bgt.n	8029c4e <_strtol_r+0xb6>
 8029c46:	fb03 4e0e 	mla	lr, r3, lr, r4
 8029c4a:	2701      	movs	r7, #1
 8029c4c:	e001      	b.n	8029c52 <_strtol_r+0xba>
 8029c4e:	f04f 37ff 	mov.w	r7, #4294967295
 8029c52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8029c56:	e7d7      	b.n	8029c08 <_strtol_r+0x70>
 8029c58:	1c7c      	adds	r4, r7, #1
 8029c5a:	4673      	mov	r3, lr
 8029c5c:	d10a      	bne.n	8029c74 <_strtol_r+0xdc>
 8029c5e:	2e00      	cmp	r6, #0
 8029c60:	f04f 0122 	mov.w	r1, #34	; 0x22
 8029c64:	bf14      	ite	ne
 8029c66:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
 8029c6a:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
 8029c6e:	6001      	str	r1, [r0, #0]
 8029c70:	b92a      	cbnz	r2, 8029c7e <_strtol_r+0xe6>
 8029c72:	e011      	b.n	8029c98 <_strtol_r+0x100>
 8029c74:	b10e      	cbz	r6, 8029c7a <_strtol_r+0xe2>
 8029c76:	f1ce 0300 	rsb	r3, lr, #0
 8029c7a:	b16a      	cbz	r2, 8029c98 <_strtol_r+0x100>
 8029c7c:	b107      	cbz	r7, 8029c80 <_strtol_r+0xe8>
 8029c7e:	1e69      	subs	r1, r5, #1
 8029c80:	6011      	str	r1, [r2, #0]
 8029c82:	e009      	b.n	8029c98 <_strtol_r+0x100>
 8029c84:	2430      	movs	r4, #48	; 0x30
 8029c86:	2b00      	cmp	r3, #0
 8029c88:	d1b2      	bne.n	8029bf0 <_strtol_r+0x58>
 8029c8a:	2308      	movs	r3, #8
 8029c8c:	e7b0      	b.n	8029bf0 <_strtol_r+0x58>
 8029c8e:	230a      	movs	r3, #10
 8029c90:	e7ae      	b.n	8029bf0 <_strtol_r+0x58>
 8029c92:	2c30      	cmp	r4, #48	; 0x30
 8029c94:	d1ac      	bne.n	8029bf0 <_strtol_r+0x58>
 8029c96:	e7a3      	b.n	8029be0 <_strtol_r+0x48>
 8029c98:	4618      	mov	r0, r3
 8029c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029c9e:	bf00      	nop
 8029ca0:	1ffe8af4 	.word	0x1ffe8af4

08029ca4 <strtol>:
 8029ca4:	b530      	push	{r4, r5, lr}
 8029ca6:	4613      	mov	r3, r2
 8029ca8:	4a04      	ldr	r2, [pc, #16]	; (8029cbc <strtol+0x18>)
 8029caa:	4605      	mov	r5, r0
 8029cac:	460c      	mov	r4, r1
 8029cae:	6810      	ldr	r0, [r2, #0]
 8029cb0:	4629      	mov	r1, r5
 8029cb2:	4622      	mov	r2, r4
 8029cb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029cb8:	f7ff bf6e 	b.w	8029b98 <_strtol_r>
 8029cbc:	1ffe8af0 	.word	0x1ffe8af0

08029cc0 <malloc>:
 8029cc0:	4b02      	ldr	r3, [pc, #8]	; (8029ccc <malloc+0xc>)
 8029cc2:	4601      	mov	r1, r0
 8029cc4:	6818      	ldr	r0, [r3, #0]
 8029cc6:	f000 b803 	b.w	8029cd0 <_malloc_r>
 8029cca:	bf00      	nop
 8029ccc:	1ffe8af0 	.word	0x1ffe8af0

08029cd0 <_malloc_r>:
 8029cd0:	b570      	push	{r4, r5, r6, lr}
 8029cd2:	1ccc      	adds	r4, r1, #3
 8029cd4:	f024 0403 	bic.w	r4, r4, #3
 8029cd8:	3408      	adds	r4, #8
 8029cda:	2c0c      	cmp	r4, #12
 8029cdc:	bf38      	it	cc
 8029cde:	240c      	movcc	r4, #12
 8029ce0:	2c00      	cmp	r4, #0
 8029ce2:	4606      	mov	r6, r0
 8029ce4:	da03      	bge.n	8029cee <_malloc_r+0x1e>
 8029ce6:	230c      	movs	r3, #12
 8029ce8:	6033      	str	r3, [r6, #0]
 8029cea:	2000      	movs	r0, #0
 8029cec:	bd70      	pop	{r4, r5, r6, pc}
 8029cee:	428c      	cmp	r4, r1
 8029cf0:	d3f9      	bcc.n	8029ce6 <_malloc_r+0x16>
 8029cf2:	4a20      	ldr	r2, [pc, #128]	; (8029d74 <_malloc_r+0xa4>)
 8029cf4:	6813      	ldr	r3, [r2, #0]
 8029cf6:	4610      	mov	r0, r2
 8029cf8:	4619      	mov	r1, r3
 8029cfa:	b1a1      	cbz	r1, 8029d26 <_malloc_r+0x56>
 8029cfc:	680a      	ldr	r2, [r1, #0]
 8029cfe:	1b12      	subs	r2, r2, r4
 8029d00:	d40e      	bmi.n	8029d20 <_malloc_r+0x50>
 8029d02:	2a0b      	cmp	r2, #11
 8029d04:	d903      	bls.n	8029d0e <_malloc_r+0x3e>
 8029d06:	600a      	str	r2, [r1, #0]
 8029d08:	188b      	adds	r3, r1, r2
 8029d0a:	508c      	str	r4, [r1, r2]
 8029d0c:	e01f      	b.n	8029d4e <_malloc_r+0x7e>
 8029d0e:	428b      	cmp	r3, r1
 8029d10:	bf0d      	iteet	eq
 8029d12:	685a      	ldreq	r2, [r3, #4]
 8029d14:	684a      	ldrne	r2, [r1, #4]
 8029d16:	605a      	strne	r2, [r3, #4]
 8029d18:	6002      	streq	r2, [r0, #0]
 8029d1a:	bf18      	it	ne
 8029d1c:	460b      	movne	r3, r1
 8029d1e:	e016      	b.n	8029d4e <_malloc_r+0x7e>
 8029d20:	460b      	mov	r3, r1
 8029d22:	6849      	ldr	r1, [r1, #4]
 8029d24:	e7e9      	b.n	8029cfa <_malloc_r+0x2a>
 8029d26:	4d14      	ldr	r5, [pc, #80]	; (8029d78 <_malloc_r+0xa8>)
 8029d28:	682b      	ldr	r3, [r5, #0]
 8029d2a:	b91b      	cbnz	r3, 8029d34 <_malloc_r+0x64>
 8029d2c:	4630      	mov	r0, r6
 8029d2e:	f000 f825 	bl	8029d7c <_sbrk_r>
 8029d32:	6028      	str	r0, [r5, #0]
 8029d34:	4630      	mov	r0, r6
 8029d36:	4621      	mov	r1, r4
 8029d38:	f000 f820 	bl	8029d7c <_sbrk_r>
 8029d3c:	1c42      	adds	r2, r0, #1
 8029d3e:	4603      	mov	r3, r0
 8029d40:	d0d1      	beq.n	8029ce6 <_malloc_r+0x16>
 8029d42:	1cc5      	adds	r5, r0, #3
 8029d44:	f025 0503 	bic.w	r5, r5, #3
 8029d48:	4285      	cmp	r5, r0
 8029d4a:	d10a      	bne.n	8029d62 <_malloc_r+0x92>
 8029d4c:	601c      	str	r4, [r3, #0]
 8029d4e:	f103 000b 	add.w	r0, r3, #11
 8029d52:	1d1a      	adds	r2, r3, #4
 8029d54:	f020 0007 	bic.w	r0, r0, #7
 8029d58:	1a82      	subs	r2, r0, r2
 8029d5a:	d00a      	beq.n	8029d72 <_malloc_r+0xa2>
 8029d5c:	4251      	negs	r1, r2
 8029d5e:	5099      	str	r1, [r3, r2]
 8029d60:	bd70      	pop	{r4, r5, r6, pc}
 8029d62:	4630      	mov	r0, r6
 8029d64:	1ae9      	subs	r1, r5, r3
 8029d66:	f000 f809 	bl	8029d7c <_sbrk_r>
 8029d6a:	3001      	adds	r0, #1
 8029d6c:	d0bb      	beq.n	8029ce6 <_malloc_r+0x16>
 8029d6e:	462b      	mov	r3, r5
 8029d70:	e7ec      	b.n	8029d4c <_malloc_r+0x7c>
 8029d72:	bd70      	pop	{r4, r5, r6, pc}
 8029d74:	1fff00c0 	.word	0x1fff00c0
 8029d78:	1fff00bc 	.word	0x1fff00bc

08029d7c <_sbrk_r>:
 8029d7c:	b538      	push	{r3, r4, r5, lr}
 8029d7e:	4c06      	ldr	r4, [pc, #24]	; (8029d98 <_sbrk_r+0x1c>)
 8029d80:	2300      	movs	r3, #0
 8029d82:	4605      	mov	r5, r0
 8029d84:	4608      	mov	r0, r1
 8029d86:	6023      	str	r3, [r4, #0]
 8029d88:	f7f8 fba4 	bl	80224d4 <_sbrk>
 8029d8c:	1c43      	adds	r3, r0, #1
 8029d8e:	d102      	bne.n	8029d96 <_sbrk_r+0x1a>
 8029d90:	6823      	ldr	r3, [r4, #0]
 8029d92:	b103      	cbz	r3, 8029d96 <_sbrk_r+0x1a>
 8029d94:	602b      	str	r3, [r5, #0]
 8029d96:	bd38      	pop	{r3, r4, r5, pc}
 8029d98:	1fff1818 	.word	0x1fff1818

08029d9c <SPI_MASTER_ADC_MOSI>:
 8029d9c:	48028300 00000008                       ...H....

08029da4 <SPI_MASTER_ADC_MISO>:
 8029da4:	48028300 00000007                       ...H....

08029dac <SPI_MASTER_ADC_SCLKOUT>:
 8029dac:	48028300 00000009                       ...H....

08029db4 <SPI_MASTER_ADC_SCLKOUT_Config>:
 8029db4:	00000088 00000001 00000001 00000000     ................
 8029dc4:	00000000                                ....

08029dc8 <SPI_MASTER_ADC_SS_0>:
 8029dc8:	48028500 00000003                       ...H....

08029dd0 <SPI_MASTER_ADC_SS_0_Config>:
 8029dd0:	00000088 00000001 00000001 00000000     ................
 8029de0:	00010000                                ....

08029de4 <SPI_MASTER_ADC_SS_1>:
 8029de4:	48028500 00000004                       ...H....

08029dec <SPI_MASTER_ADC_Config>:
 8029dec:	1ffe888c 08023689 08029d9c 1ffe8864     .....6......d...
 8029dfc:	08029da4 1ffe8b0c 00000000 00000000     ................
	...
 8029e14:	08029dac 08029db4 08029dc8 08029de4     ................
	...
 8029e3c:	08029dd0 1ffe8878 00000000 00000000     ....x...........
	...
 8029e70:	02000101 00000102                       ........

08029e78 <SPI_MASTER_TC_MOSI>:
 8029e78:	48028000 00000005                       ...H....

08029e80 <SPI_MASTER_TC_MISO>:
 8029e80:	48028000 00000004                       ...H....

08029e88 <SPI_MASTER_TC_SCLKOUT>:
 8029e88:	48028000 0000000b                       ...H....

08029e90 <SPI_MASTER_TC_SCLKOUT_Config>:
 8029e90:	00000090 00000001 00000001 00000000     ................
 8029ea0:	00000000                                ....

08029ea4 <SPI_MASTER_TC_SS_0>:
 8029ea4:	48028000 00000006                       ...H....

08029eac <SPI_MASTER_TC_SS_0_Config>:
 8029eac:	00000090 00000001 00000001 00000000     ................
 8029ebc:	00010000                                ....

08029ec0 <SPI_MASTER_TC_SS_1>:
 8029ec0:	48028000 0000000e                       ...H....

08029ec8 <SPI_MASTER_TC_SS_2>:
 8029ec8:	48028000 0000000f                       ...H....

08029ed0 <SPI_MASTER_TC_SS_2_Config>:
 8029ed0:	00000090 00000001 00000001 00000000     ................
 8029ee0:	00040000                                ....

08029ee4 <SPI_MASTER_TC_SS_3>:
 8029ee4:	48028300 0000000e                       ...H....

08029eec <SPI_MASTER_TC_SS_3_Config>:
 8029eec:	00000090 00000001 00000001 00000000     ................
 8029efc:	00080000                                ....

08029f00 <SPI_MASTER_TC_Config>:
 8029f00:	1ffe8948 08023855 08029e78 1ffe8920     H...U8..x... ...
 8029f10:	08029e80 1ffe8b20 00000000 00000000     .... ...........
	...
 8029f28:	08029e88 08029e90 08029ea4 08029ec0     ................
 8029f38:	08029ec8 08029ee4 00000000 00000000     ................
	...
 8029f50:	08029eac 1ffe8934 08029ed0 08029eec     ....4...........
	...
 8029f84:	04000101 00010002                       ........

08029f8c <PIN_INTERRUPT_ADC0>:
 8029f8c:	50004800 48028300 00000000 00000000     .H.P...H........
 8029f9c:	00000000 00000004 00000139 00003f04     ........9....?..
 8029fac:	00000103                                ....

08029fb0 <PIN_INTERRUPT_ADC1>:
 8029fb0:	50004800 48028000 00000000 00000000     .H.P...H........
	...
 8029fc8:	00000029 01003e03 00000a02              )....>......

08029fd4 <INTERRUPT_TC>:
 8029fd4:	00003d38                                8=..

08029fd8 <INTERRUPT_TIMESTAMP>:
 8029fd8:	00003f39                                9?..

08029fdc <INTERRUPT_ETH>:
 8029fdc:	00003e40                                @>..

08029fe0 <e_eeprom_xmc4_fce>:
 8029fe0:	50020020 00000700 00000000               ..P........

08029fec <eth_phy_config>:
 8029fec:	00000001 00010000                       ........

08029ff4 <ethbroadcast>:
 8029ff4:	ffffffff 0000ffff                       ........

08029ffc <ethzero>:
	...

0802a004 <ip_addr_any>:
 802a004:	00000000                                ....

0802a008 <memp_sizes>:
 802a008:	0024001c 00100014 06100010              ..$.........

0802a014 <memp_num>:
 802a014:	00040004 00070008 00100010              ............

0802a020 <LED_INDICATOR>:
 802a020:	48028500 00000080 00010000 00000000     ...H............
 802a030:	00000008 01010230 00010000 00000000     ....0...........
 802a040:	00010000 01010102 74697277 65722065     ........write re
 802a050:	73657571 61207374 66206572 73656c69     quests are files
 802a060:	64616d20 70752065 20666f20 6f72657a      made up of zero
 802a070:	20726f20 65726f6d 6d6f6320 646e616d      or more command
 802a080:	61650a73 63206863 616d6d6f 6d20646e     s.each command m
 802a090:	20747375 6e206562 696c7765 7420656e     ust be newline t
 802a0a0:	696d7265 6574616e 68740a64 6e6f2065     erminated.the on
 802a0b0:	7320796c 6f707075 64657472 54465420     ly supported TFT
 802a0c0:	6f6d2050 69206564 636f2073 0a746574     P mode is octet.
 802a0d0:	20796e61 74697277 65722065 73657571     any write reques
 802a0e0:	69772074 62206c6c 6e692065 70726574     t will be interp
 802a0f0:	65746572 73612064 6d6f6320 646e616d     reted as command
 802a100:	61202c73 6120646e 7220796e 20646165     s, and any read 
 802a110:	75716572 20747365 6c6c6977 6e657320     request will sen
 802a120:	68742064 6d207369 0a756e65 74697277     d this menu.writ
 802a130:	206e6574 656c6966 61632073 6562206e     ten files can be
 802a140:	20707520 34206f74 20363930 65747962      up to 4096 byte
 802a150:	38282073 54465420 61642050 74206174     s (8 TFTP data t
 802a160:	736e6172 73726566 736f7029 6c626973     ransfers)possibl
 802a170:	6f632065 6e616d6d 61207364 0a3a6572     e commands are:.
 802a180:	20202020 732e7069 5b3d6372 72756f73         ip.src=[sour
 802a190:	49206563 64612050 73657264 65202c73     ce IP address, e
 802a1a0:	202e672e 312e3031 30312e30 5d35322e     .g. 10.10.10.25]
 802a1b0:	2020200a 2e706920 3d747364 7365645b     .    ip.dst=[des
 802a1c0:	616e6974 6e6f6974 20504920 72646461     tination IP addr
 802a1d0:	5d737365 2020200a 2e706920 5b3d7767     ess].    ip.gw=[
 802a1e0:	61666564 20746c75 65746167 20796177     default gateway 
 802a1f0:	61205049 65726464 0a5d7373 20202020     IP address].    
 802a200:	732e7069 656e6275 735b3d74 656e6275     ip.subnet=[subne
 802a210:	616d2074 49206b73 64612050 73657264     t mask IP addres
 802a220:	200a5d73 75202020 732e7064 5b3d6372     s].    udp.src=[
 802a230:	72756f73 55206563 70205044 5d74726f     source UDP port]
 802a240:	2020200a 70647520 6364612e 645b3d30     .    udp.adc0=[d
 802a250:	69747365 6974616e 70206e6f 2074726f     estination port 
 802a260:	20726f66 30434441 63617020 7374656b     for ADC0 packets
 802a270:	20200a5d 64752020 64612e70 5b3d3163     ].    udp.adc1=[
 802a280:	74736564 74616e69 206e6f69 74726f70     destination port
 802a290:	726f6620 43444120 61702031 74656b63      for ADC1 packet
 802a2a0:	200a5d73 75202020 742e7064 645b3d63     s].    udp.tc=[d
 802a2b0:	69747365 6974616e 70206e6f 2074726f     estination port 
 802a2c0:	20726f66 72656874 6f636f6d 656c7075     for thermocouple
 802a2d0:	63617020 7374656b 00000a5d 6d6d6f63      packets]...comm
 802a2e0:	20646e61 20746f6e 6c77656e 20656e69     and not newline 
 802a2f0:	6d726574 74616e69 00006465 61766e69     terminated..inva
 802a300:	2064696c 6d6d6f63 00646e61 732e7069     lid command.ip.s
 802a310:	00006372 62616e75 7420656c 6170206f     rc..unable to pa
 802a320:	20657372 732e7069 00006372 642e7069     rse ip.src..ip.d
 802a330:	00007473 62616e75 7420656c 6170206f     st..unable to pa
 802a340:	20657372 642e7069 00007473 672e7069     rse ip.dst..ip.g
 802a350:	00000077 62616e75 7420656c 6170206f     w...unable to pa
 802a360:	20657372 672e7069 00000077 732e7069     rse ip.gw...ip.s
 802a370:	656e6275 00000074 62616e75 7420656c     ubnet...unable t
 802a380:	6170206f 20657372 732e7069 656e6275     o parse ip.subne
 802a390:	00000074 2e706475 00637273 2e706475     t...udp.src.udp.
 802a3a0:	30636461 00000000 2e706475 31636461     adc0....udp.adc1
 802a3b0:	00000000 2e706475 00006374 6e6b6e75     ....udp.tc..unkn
 802a3c0:	206e776f 666e6f63 70206769 6d617261     own config param
 802a3d0:	72657465 00000000 6c696166 74206465     eter....failed t
 802a3e0:	6173206f 63206576 69666e6f 61727567     o save configura
 802a3f0:	6e6f6974 206f7420 73616c66 00000068     tion to flash...
 802a400:	656d6974 756f2064 61772074 6e697469     timed out waitin
 802a410:	6f662067 63612072 776f6e6b 6764656c     g for acknowledg
 802a420:	746e656d 00000000 66206f6e 6e656c69     ment....no filen
 802a430:	20656d61 65766967 0000006e 65646f6d     ame given...mode
 802a440:	72747320 20676e69 20746f6e 6c6c756e      string not null
 802a450:	7265742d 616e696d 00646574 6574636f     -terminated.octe
 802a460:	00000074 796c6e6f 70757320 74726f70     t...only support
 802a470:	6d206465 2065646f 6f207369 74657463     ed mode is octet
 802a480:	00000000 6e6e6163 6620746f 6d676172     ....cannot fragm
 802a490:	20746e65 6b636170 00737465 6b636170     ent packets.pack
 802a4a0:	74207465 73206f6f 6c6c616d 00000000     et too small....
 802a4b0:	76726573 62207265 00797375 74697277     server busy.writ
 802a4c0:	65722065 73657571 6c612074 64616572     e request alread
 802a4d0:	6e692079 6f727020 73657267 61202c73     y in progress, a
 802a4e0:	646e6162 6e696e6f 00000067 77206f6e     bandoning...no w
 802a4f0:	65746972 71657220 74736575 206e6920     rite request in 
 802a500:	676f7270 73736572 00000000 206f6f74     progress....too 
 802a510:	6863756d 74616420 6e692061 656e6f20     much data in one
 802a520:	63617020 0074656b 78656e75 74636570      packet.unexpect
 802a530:	62206465 6b636f6c 6d756e20 00726562     ed block number.
 802a540:	656c6966 6f6f7420 72616c20 00006567     file too large..
 802a550:	75736e75 726f7070 20646574 6f63706f     unsupported opco
 802a560:	00006564 312e3031 30312e30 0035372e     de..10.10.10.75.
 802a570:	312e3031 30312e30 0035322e 2e353532     10.10.10.25.255.
 802a580:	2e353532 2e353532 00000030 00000000     255.255.0.......
 802a590:	00000001 00000002 00000003 00005506     .............U..
 802a5a0:	0000684b 00003c4c 0000024d 00004e4e     Kh..L<..M...NN..
 802a5b0:	00000f4f 20000043                                O...C.

0802a5b6 <_ctype_>:
 802a5b6:	20202000 20202020 28282020 20282828     .         ((((( 
 802a5c6:	20202020 20202020 20202020 20202020                     
 802a5d6:	10108820 10101010 10101010 10101010      ...............
 802a5e6:	04040410 04040404 10040404 10101010     ................
 802a5f6:	41411010 41414141 01010101 01010101     ..AAAAAA........
 802a606:	01010101 01010101 01010101 10101010     ................
 802a616:	42421010 42424242 02020202 02020202     ..BBBBBB........
 802a626:	02020202 02020202 02020202 10101010     ................
 802a636:	00000020 00000000 00000000 00000000      ...............
	...
