
jme_DAQ_Integrated_XMC4700-F144x2048_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000300  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a700  08020000  0c020000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .eh_frame     00000028  0802a700  0c02a700  0001a700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 Stack         00000800  1ffe8000  1ffe8000  00028000  2**0
                  ALLOC
  4 .data         00000310  1ffe8800  0c02a728  00020800  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00007e28  1ffe8b10  0c02aa38  00020b10  2**2
                  ALLOC
  6 ETH_RAM       000030a0  20000000  20000000  00028000  2**2
                  ALLOC
  7 .no_init      00000014  2003ffc0  2003ffc0  00027fc0  2**2
                  ALLOC
  8 .debug_aranges 00001c40  00000000  00000000  00020b10  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00031535  00000000  00000000  00022750  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007047  00000000  00000000  00053c85  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000f139  00000000  00000000  0005accc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00007424  00000000  00000000  00069e08  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000100f3  00000000  00000000  0007122c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e9d1  00000000  00000000  0008131f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001810  00000000  00000000  0008fcf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 0000104e  00000000  00000000  00091500  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08020000 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8020000:	b598      	push	{r3, r4, r7, lr}
 8020002:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8020004:	4a05      	ldr	r2, [pc, #20]	; (802001c <SystemInit+0x1c>)
 8020006:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 802000a:	4614      	mov	r4, r2
 802000c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802000e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  SystemCoreSetup();
 8020012:	f008 ff5f 	bl	8028ed4 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8020016:	f008 ffc7 	bl	8028fa8 <SystemCoreClockSetup>
}
 802001a:	bd98      	pop	{r3, r4, r7, pc}
 802001c:	2003ffc4 	.word	0x2003ffc4

08020020 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 8020020:	b580      	push	{r7, lr}
 8020022:	b084      	sub	sp, #16
 8020024:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8020026:	4b2f      	ldr	r3, [pc, #188]	; (80200e4 <SystemCoreClockUpdate+0xc4>)
 8020028:	68db      	ldr	r3, [r3, #12]
 802002a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802002e:	2b00      	cmp	r3, #0
 8020030:	d03e      	beq.n	80200b0 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8020032:	4b2d      	ldr	r3, [pc, #180]	; (80200e8 <SystemCoreClockUpdate+0xc8>)
 8020034:	68db      	ldr	r3, [r3, #12]
 8020036:	f003 0301 	and.w	r3, r3, #1
 802003a:	2b00      	cmp	r3, #0
 802003c:	d002      	beq.n	8020044 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 802003e:	4b2b      	ldr	r3, [pc, #172]	; (80200ec <SystemCoreClockUpdate+0xcc>)
 8020040:	60fb      	str	r3, [r7, #12]
 8020042:	e002      	b.n	802004a <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8020044:	f008 ffa6 	bl	8028f94 <OSCHP_GetFrequency>
 8020048:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 802004a:	4b27      	ldr	r3, [pc, #156]	; (80200e8 <SystemCoreClockUpdate+0xc8>)
 802004c:	681b      	ldr	r3, [r3, #0]
 802004e:	f003 0304 	and.w	r3, r3, #4
 8020052:	2b00      	cmp	r3, #0
 8020054:	d020      	beq.n	8020098 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8020056:	4b24      	ldr	r3, [pc, #144]	; (80200e8 <SystemCoreClockUpdate+0xc8>)
 8020058:	689b      	ldr	r3, [r3, #8]
 802005a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 802005e:	0e1b      	lsrs	r3, r3, #24
 8020060:	3301      	adds	r3, #1
 8020062:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8020064:	4b20      	ldr	r3, [pc, #128]	; (80200e8 <SystemCoreClockUpdate+0xc8>)
 8020066:	689b      	ldr	r3, [r3, #8]
 8020068:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 802006c:	0a1b      	lsrs	r3, r3, #8
 802006e:	3301      	adds	r3, #1
 8020070:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8020072:	4b1d      	ldr	r3, [pc, #116]	; (80200e8 <SystemCoreClockUpdate+0xc8>)
 8020074:	689b      	ldr	r3, [r3, #8]
 8020076:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 802007a:	0c1b      	lsrs	r3, r3, #16
 802007c:	3301      	adds	r3, #1
 802007e:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8020080:	68bb      	ldr	r3, [r7, #8]
 8020082:	683a      	ldr	r2, [r7, #0]
 8020084:	fb02 f303 	mul.w	r3, r2, r3
 8020088:	68fa      	ldr	r2, [r7, #12]
 802008a:	fbb2 f3f3 	udiv	r3, r2, r3
 802008e:	687a      	ldr	r2, [r7, #4]
 8020090:	fb02 f303 	mul.w	r3, r2, r3
 8020094:	60fb      	str	r3, [r7, #12]
 8020096:	e00d      	b.n	80200b4 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8020098:	4b13      	ldr	r3, [pc, #76]	; (80200e8 <SystemCoreClockUpdate+0xc8>)
 802009a:	689b      	ldr	r3, [r3, #8]
 802009c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80200a0:	3301      	adds	r3, #1
 80200a2:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 80200a4:	68fa      	ldr	r2, [r7, #12]
 80200a6:	683b      	ldr	r3, [r7, #0]
 80200a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80200ac:	60fb      	str	r3, [r7, #12]
 80200ae:	e001      	b.n	80200b4 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 80200b0:	4b0e      	ldr	r3, [pc, #56]	; (80200ec <SystemCoreClockUpdate+0xcc>)
 80200b2:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80200b4:	4b0b      	ldr	r3, [pc, #44]	; (80200e4 <SystemCoreClockUpdate+0xc4>)
 80200b6:	68db      	ldr	r3, [r3, #12]
 80200b8:	b2db      	uxtb	r3, r3
 80200ba:	3301      	adds	r3, #1
 80200bc:	68fa      	ldr	r2, [r7, #12]
 80200be:	fbb2 f3f3 	udiv	r3, r2, r3
 80200c2:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80200c4:	4b07      	ldr	r3, [pc, #28]	; (80200e4 <SystemCoreClockUpdate+0xc4>)
 80200c6:	691b      	ldr	r3, [r3, #16]
 80200c8:	f003 0301 	and.w	r3, r3, #1
 80200cc:	3301      	adds	r3, #1
 80200ce:	68fa      	ldr	r2, [r7, #12]
 80200d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80200d4:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80200d6:	4a06      	ldr	r2, [pc, #24]	; (80200f0 <SystemCoreClockUpdate+0xd0>)
 80200d8:	68fb      	ldr	r3, [r7, #12]
 80200da:	6013      	str	r3, [r2, #0]
}
 80200dc:	3710      	adds	r7, #16
 80200de:	46bd      	mov	sp, r7
 80200e0:	bd80      	pop	{r7, pc}
 80200e2:	bf00      	nop
 80200e4:	50004600 	.word	0x50004600
 80200e8:	50004710 	.word	0x50004710
 80200ec:	016e3600 	.word	0x016e3600
 80200f0:	2003ffc0 	.word	0x2003ffc0

080200f4 <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 80200f4:	b580      	push	{r7, lr}
 80200f6:	b082      	sub	sp, #8
 80200f8:	af00      	add	r7, sp, #0
 80200fa:	6078      	str	r0, [r7, #4]
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 80200fc:	687b      	ldr	r3, [r7, #4]
 80200fe:	4a07      	ldr	r2, [pc, #28]	; (802011c <XMC_ERU_Enable+0x28>)
 8020100:	4293      	cmp	r3, r2
 8020102:	d107      	bne.n	8020114 <XMC_ERU_Enable+0x20>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ERU1);
 8020104:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8020108:	f000 fbea 	bl	80208e0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 802010c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8020110:	f000 fa62 	bl	80205d8 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#else
  XMC_UNUSED_ARG(eru);
#endif
}
 8020114:	3708      	adds	r7, #8
 8020116:	46bd      	mov	sp, r7
 8020118:	bd80      	pop	{r7, pc}
 802011a:	bf00      	nop
 802011c:	40044000 	.word	0x40044000

08020120 <XMC_FLASH_lEnterPageModeCommand>:

/*
 * Command to program the PFLASH in to page mode, so that assembly buffer is used
 */
void XMC_FLASH_lEnterPageModeCommand(void)
{
 8020120:	b480      	push	{r7}
 8020122:	b083      	sub	sp, #12
 8020124:	af00      	add	r7, sp, #0
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8020126:	4b05      	ldr	r3, [pc, #20]	; (802013c <XMC_FLASH_lEnterPageModeCommand+0x1c>)
 8020128:	607b      	str	r3, [r7, #4]
  *address = (uint32_t)0x50U;
 802012a:	687b      	ldr	r3, [r7, #4]
 802012c:	2250      	movs	r2, #80	; 0x50
 802012e:	601a      	str	r2, [r3, #0]
}
 8020130:	370c      	adds	r7, #12
 8020132:	46bd      	mov	sp, r7
 8020134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020138:	4770      	bx	lr
 802013a:	bf00      	nop
 802013c:	0c005554 	.word	0x0c005554

08020140 <XMC_FLASH_lLoadPageCommand>:

/*
 * Command to load the data into the page assembly buffer
 */
void XMC_FLASH_lLoadPageCommand(uint32_t low_word, uint32_t high_word)
{
 8020140:	b480      	push	{r7}
 8020142:	b085      	sub	sp, #20
 8020144:	af00      	add	r7, sp, #0
 8020146:	6078      	str	r0, [r7, #4]
 8020148:	6039      	str	r1, [r7, #0]
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f0U);
 802014a:	4b07      	ldr	r3, [pc, #28]	; (8020168 <XMC_FLASH_lLoadPageCommand+0x28>)
 802014c:	60fb      	str	r3, [r7, #12]
  *address = low_word;
 802014e:	68fb      	ldr	r3, [r7, #12]
 8020150:	687a      	ldr	r2, [r7, #4]
 8020152:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x55f4U);
 8020154:	4b05      	ldr	r3, [pc, #20]	; (802016c <XMC_FLASH_lLoadPageCommand+0x2c>)
 8020156:	60fb      	str	r3, [r7, #12]
  *address = high_word;
 8020158:	68fb      	ldr	r3, [r7, #12]
 802015a:	683a      	ldr	r2, [r7, #0]
 802015c:	601a      	str	r2, [r3, #0]
}
 802015e:	3714      	adds	r7, #20
 8020160:	46bd      	mov	sp, r7
 8020162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020166:	4770      	bx	lr
 8020168:	0c0055f0 	.word	0x0c0055f0
 802016c:	0c0055f4 	.word	0x0c0055f4

08020170 <XMC_FLASH_lWritePageCommand>:

/*
 * Command to start the programming of one page with data from the assembly buffer
 */
void XMC_FLASH_lWritePageCommand(uint32_t *page_start_address)
{
 8020170:	b480      	push	{r7}
 8020172:	b085      	sub	sp, #20
 8020174:	af00      	add	r7, sp, #0
 8020176:	6078      	str	r0, [r7, #4]
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8020178:	4b0c      	ldr	r3, [pc, #48]	; (80201ac <XMC_FLASH_lWritePageCommand+0x3c>)
 802017a:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 802017c:	68fb      	ldr	r3, [r7, #12]
 802017e:	22aa      	movs	r2, #170	; 0xaa
 8020180:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 8020182:	4b0b      	ldr	r3, [pc, #44]	; (80201b0 <XMC_FLASH_lWritePageCommand+0x40>)
 8020184:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 8020186:	68fb      	ldr	r3, [r7, #12]
 8020188:	2255      	movs	r2, #85	; 0x55
 802018a:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 802018c:	4b07      	ldr	r3, [pc, #28]	; (80201ac <XMC_FLASH_lWritePageCommand+0x3c>)
 802018e:	60fb      	str	r3, [r7, #12]
  *address = 0xa0U;
 8020190:	68fb      	ldr	r3, [r7, #12]
 8020192:	22a0      	movs	r2, #160	; 0xa0
 8020194:	601a      	str	r2, [r3, #0]
  address = page_start_address;
 8020196:	687b      	ldr	r3, [r7, #4]
 8020198:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 802019a:	68fb      	ldr	r3, [r7, #12]
 802019c:	22aa      	movs	r2, #170	; 0xaa
 802019e:	601a      	str	r2, [r3, #0]
}
 80201a0:	3714      	adds	r7, #20
 80201a2:	46bd      	mov	sp, r7
 80201a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201a8:	4770      	bx	lr
 80201aa:	bf00      	nop
 80201ac:	0c005554 	.word	0x0c005554
 80201b0:	0c00aaa8 	.word	0x0c00aaa8

080201b4 <XMC_FLASH_lEraseSectorCommand>:

/*
 * Command to erase sector which is starting with the specified address
 */
void XMC_FLASH_lEraseSectorCommand(uint32_t *sector_start_address)
{
 80201b4:	b480      	push	{r7}
 80201b6:	b085      	sub	sp, #20
 80201b8:	af00      	add	r7, sp, #0
 80201ba:	6078      	str	r0, [r7, #4]
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 80201bc:	4b11      	ldr	r3, [pc, #68]	; (8020204 <XMC_FLASH_lEraseSectorCommand+0x50>)
 80201be:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 80201c0:	68fb      	ldr	r3, [r7, #12]
 80201c2:	22aa      	movs	r2, #170	; 0xaa
 80201c4:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 80201c6:	4b10      	ldr	r3, [pc, #64]	; (8020208 <XMC_FLASH_lEraseSectorCommand+0x54>)
 80201c8:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 80201ca:	68fb      	ldr	r3, [r7, #12]
 80201cc:	2255      	movs	r2, #85	; 0x55
 80201ce:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 80201d0:	4b0c      	ldr	r3, [pc, #48]	; (8020204 <XMC_FLASH_lEraseSectorCommand+0x50>)
 80201d2:	60fb      	str	r3, [r7, #12]
  *address = 0x80U;
 80201d4:	68fb      	ldr	r3, [r7, #12]
 80201d6:	2280      	movs	r2, #128	; 0x80
 80201d8:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 80201da:	4b0a      	ldr	r3, [pc, #40]	; (8020204 <XMC_FLASH_lEraseSectorCommand+0x50>)
 80201dc:	60fb      	str	r3, [r7, #12]
  *address = 0xaaU;
 80201de:	68fb      	ldr	r3, [r7, #12]
 80201e0:	22aa      	movs	r2, #170	; 0xaa
 80201e2:	601a      	str	r2, [r3, #0]
  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0xaaa8U);
 80201e4:	4b08      	ldr	r3, [pc, #32]	; (8020208 <XMC_FLASH_lEraseSectorCommand+0x54>)
 80201e6:	60fb      	str	r3, [r7, #12]
  *address = 0x55U;
 80201e8:	68fb      	ldr	r3, [r7, #12]
 80201ea:	2255      	movs	r2, #85	; 0x55
 80201ec:	601a      	str	r2, [r3, #0]
  address = sector_start_address;
 80201ee:	687b      	ldr	r3, [r7, #4]
 80201f0:	60fb      	str	r3, [r7, #12]
  *address = 0x30U;
 80201f2:	68fb      	ldr	r3, [r7, #12]
 80201f4:	2230      	movs	r2, #48	; 0x30
 80201f6:	601a      	str	r2, [r3, #0]
}
 80201f8:	3714      	adds	r7, #20
 80201fa:	46bd      	mov	sp, r7
 80201fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020200:	4770      	bx	lr
 8020202:	bf00      	nop
 8020204:	0c005554 	.word	0x0c005554
 8020208:	0c00aaa8 	.word	0x0c00aaa8

0802020c <XMC_FLASH_lClearStatusCommand>:

/*
 * Command to clear FSR.PROG and FSR.ERASE and the error flags in FSR such as PFOPER, SQER, PROER, PFDBER, ORIER, VER
 */
void XMC_FLASH_lClearStatusCommand(void)
{
 802020c:	b480      	push	{r7}
 802020e:	b083      	sub	sp, #12
 8020210:	af00      	add	r7, sp, #0
  volatile uint32_t *address;

  address = (uint32_t *)(XMC_FLASH_UNCACHED_BASE + 0x5554U);
 8020212:	4b05      	ldr	r3, [pc, #20]	; (8020228 <XMC_FLASH_lClearStatusCommand+0x1c>)
 8020214:	607b      	str	r3, [r7, #4]
  *address = 0xf5U;
 8020216:	687b      	ldr	r3, [r7, #4]
 8020218:	22f5      	movs	r2, #245	; 0xf5
 802021a:	601a      	str	r2, [r3, #0]
}
 802021c:	370c      	adds	r7, #12
 802021e:	46bd      	mov	sp, r7
 8020220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020224:	4770      	bx	lr
 8020226:	bf00      	nop
 8020228:	0c005554 	.word	0x0c005554

0802022c <XMC_FLASH_ClearStatus>:

/*
* This API shall clear Program, erase and error flags(PFOPER, SQER, PROER, PFDBER, ORIER, VER) of FSR register.
*/
void XMC_FLASH_ClearStatus(void)
{
 802022c:	b580      	push	{r7, lr}
 802022e:	af00      	add	r7, sp, #0
  XMC_FLASH_lClearStatusCommand();
 8020230:	f7ff ffec 	bl	802020c <XMC_FLASH_lClearStatusCommand>
}
 8020234:	bd80      	pop	{r7, pc}
 8020236:	bf00      	nop

08020238 <XMC_FLASH_GetStatus>:

/*
 * This API returns the FSR register value
 */
uint32_t XMC_FLASH_GetStatus(void)
{
 8020238:	b480      	push	{r7}
 802023a:	af00      	add	r7, sp, #0
  return FLASH0->FSR;
 802023c:	4b04      	ldr	r3, [pc, #16]	; (8020250 <XMC_FLASH_GetStatus+0x18>)
 802023e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020242:	3310      	adds	r3, #16
 8020244:	681b      	ldr	r3, [r3, #0]
}
 8020246:	4618      	mov	r0, r3
 8020248:	46bd      	mov	sp, r7
 802024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802024e:	4770      	bx	lr
 8020250:	58001000 	.word	0x58001000

08020254 <XMC_FLASH_ProgramPage>:

/*
 * This API write the PFLASH page
 */
void XMC_FLASH_ProgramPage(uint32_t *address, const uint32_t *data)
{
 8020254:	b580      	push	{r7, lr}
 8020256:	b084      	sub	sp, #16
 8020258:	af00      	add	r7, sp, #0
 802025a:	6078      	str	r0, [r7, #4]
 802025c:	6039      	str	r1, [r7, #0]
  uint32_t idx;

  XMC_FLASH_lClearStatusCommand();
 802025e:	f7ff ffd5 	bl	802020c <XMC_FLASH_lClearStatusCommand>
  XMC_FLASH_lEnterPageModeCommand();
 8020262:	f7ff ff5d 	bl	8020120 <XMC_FLASH_lEnterPageModeCommand>

  for (idx = 0U; idx < XMC_FLASH_WORDS_PER_PAGE; idx += 2U)
 8020266:	2300      	movs	r3, #0
 8020268:	60fb      	str	r3, [r7, #12]
 802026a:	e011      	b.n	8020290 <XMC_FLASH_ProgramPage+0x3c>
  {
    XMC_FLASH_lLoadPageCommand(data[idx], data[idx + 1U]);
 802026c:	68fb      	ldr	r3, [r7, #12]
 802026e:	009b      	lsls	r3, r3, #2
 8020270:	683a      	ldr	r2, [r7, #0]
 8020272:	4413      	add	r3, r2
 8020274:	6819      	ldr	r1, [r3, #0]
 8020276:	68fb      	ldr	r3, [r7, #12]
 8020278:	3301      	adds	r3, #1
 802027a:	009b      	lsls	r3, r3, #2
 802027c:	683a      	ldr	r2, [r7, #0]
 802027e:	4413      	add	r3, r2
 8020280:	681b      	ldr	r3, [r3, #0]
 8020282:	4608      	mov	r0, r1
 8020284:	4619      	mov	r1, r3
 8020286:	f7ff ff5b 	bl	8020140 <XMC_FLASH_lLoadPageCommand>
  uint32_t idx;

  XMC_FLASH_lClearStatusCommand();
  XMC_FLASH_lEnterPageModeCommand();

  for (idx = 0U; idx < XMC_FLASH_WORDS_PER_PAGE; idx += 2U)
 802028a:	68fb      	ldr	r3, [r7, #12]
 802028c:	3302      	adds	r3, #2
 802028e:	60fb      	str	r3, [r7, #12]
 8020290:	68fb      	ldr	r3, [r7, #12]
 8020292:	2b3f      	cmp	r3, #63	; 0x3f
 8020294:	d9ea      	bls.n	802026c <XMC_FLASH_ProgramPage+0x18>
  {
    XMC_FLASH_lLoadPageCommand(data[idx], data[idx + 1U]);
  }

  XMC_FLASH_lWritePageCommand(address);
 8020296:	6878      	ldr	r0, [r7, #4]
 8020298:	f7ff ff6a 	bl	8020170 <XMC_FLASH_lWritePageCommand>

  /* wait until the operation is completed */
  while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U) {}
 802029c:	bf00      	nop
 802029e:	4b06      	ldr	r3, [pc, #24]	; (80202b8 <XMC_FLASH_ProgramPage+0x64>)
 80202a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80202a4:	3310      	adds	r3, #16
 80202a6:	681b      	ldr	r3, [r3, #0]
 80202a8:	f003 0301 	and.w	r3, r3, #1
 80202ac:	2b00      	cmp	r3, #0
 80202ae:	d1f6      	bne.n	802029e <XMC_FLASH_ProgramPage+0x4a>
}
 80202b0:	3710      	adds	r7, #16
 80202b2:	46bd      	mov	sp, r7
 80202b4:	bd80      	pop	{r7, pc}
 80202b6:	bf00      	nop
 80202b8:	58001000 	.word	0x58001000

080202bc <XMC_FLASH_EraseSector>:

/*
 * This API erase the logical sector
 */
void XMC_FLASH_EraseSector(uint32_t *address)
{
 80202bc:	b580      	push	{r7, lr}
 80202be:	b082      	sub	sp, #8
 80202c0:	af00      	add	r7, sp, #0
 80202c2:	6078      	str	r0, [r7, #4]
  XMC_FLASH_lClearStatusCommand();
 80202c4:	f7ff ffa2 	bl	802020c <XMC_FLASH_lClearStatusCommand>
  XMC_FLASH_lEraseSectorCommand(address);
 80202c8:	6878      	ldr	r0, [r7, #4]
 80202ca:	f7ff ff73 	bl	80201b4 <XMC_FLASH_lEraseSectorCommand>

  /* wait until the operation is completed */
  while ((FLASH0->FSR & (uint32_t)FLASH_FSR_PBUSY_Msk) != 0U) {}
 80202ce:	bf00      	nop
 80202d0:	4b05      	ldr	r3, [pc, #20]	; (80202e8 <XMC_FLASH_EraseSector+0x2c>)
 80202d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80202d6:	3310      	adds	r3, #16
 80202d8:	681b      	ldr	r3, [r3, #0]
 80202da:	f003 0301 	and.w	r3, r3, #1
 80202de:	2b00      	cmp	r3, #0
 80202e0:	d1f6      	bne.n	80202d0 <XMC_FLASH_EraseSector+0x14>
}
 80202e2:	3708      	adds	r7, #8
 80202e4:	46bd      	mov	sp, r7
 80202e6:	bd80      	pop	{r7, pc}
 80202e8:	58001000 	.word	0x58001000

080202ec <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80202ec:	b480      	push	{r7}
 80202ee:	b085      	sub	sp, #20
 80202f0:	af00      	add	r7, sp, #0
 80202f2:	60f8      	str	r0, [r7, #12]
 80202f4:	460b      	mov	r3, r1
 80202f6:	607a      	str	r2, [r7, #4]
 80202f8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80202fa:	7afb      	ldrb	r3, [r7, #11]
 80202fc:	089b      	lsrs	r3, r3, #2
 80202fe:	b2db      	uxtb	r3, r3
 8020300:	4618      	mov	r0, r3
 8020302:	7afb      	ldrb	r3, [r7, #11]
 8020304:	089b      	lsrs	r3, r3, #2
 8020306:	b2db      	uxtb	r3, r3
 8020308:	461a      	mov	r2, r3
 802030a:	68fb      	ldr	r3, [r7, #12]
 802030c:	3204      	adds	r2, #4
 802030e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8020312:	7afb      	ldrb	r3, [r7, #11]
 8020314:	f003 0303 	and.w	r3, r3, #3
 8020318:	00db      	lsls	r3, r3, #3
 802031a:	4619      	mov	r1, r3
 802031c:	23f8      	movs	r3, #248	; 0xf8
 802031e:	408b      	lsls	r3, r1
 8020320:	43db      	mvns	r3, r3
 8020322:	ea02 0103 	and.w	r1, r2, r3
 8020326:	68fb      	ldr	r3, [r7, #12]
 8020328:	1d02      	adds	r2, r0, #4
 802032a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 802032e:	68fb      	ldr	r3, [r7, #12]
 8020330:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8020332:	7afb      	ldrb	r3, [r7, #11]
 8020334:	005b      	lsls	r3, r3, #1
 8020336:	4619      	mov	r1, r3
 8020338:	2303      	movs	r3, #3
 802033a:	408b      	lsls	r3, r1
 802033c:	43db      	mvns	r3, r3
 802033e:	401a      	ands	r2, r3
 8020340:	68fb      	ldr	r3, [r7, #12]
 8020342:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8020344:	68fb      	ldr	r3, [r7, #12]
 8020346:	4a3a      	ldr	r2, [pc, #232]	; (8020430 <XMC_GPIO_Init+0x144>)
 8020348:	4293      	cmp	r3, r2
 802034a:	d003      	beq.n	8020354 <XMC_GPIO_Init+0x68>
 802034c:	68fb      	ldr	r3, [r7, #12]
 802034e:	4a39      	ldr	r2, [pc, #228]	; (8020434 <XMC_GPIO_Init+0x148>)
 8020350:	4293      	cmp	r3, r2
 8020352:	d10a      	bne.n	802036a <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8020354:	68fb      	ldr	r3, [r7, #12]
 8020356:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8020358:	7afb      	ldrb	r3, [r7, #11]
 802035a:	2101      	movs	r1, #1
 802035c:	fa01 f303 	lsl.w	r3, r1, r3
 8020360:	43db      	mvns	r3, r3
 8020362:	401a      	ands	r2, r3
 8020364:	68fb      	ldr	r3, [r7, #12]
 8020366:	661a      	str	r2, [r3, #96]	; 0x60
 8020368:	e042      	b.n	80203f0 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 802036a:	687b      	ldr	r3, [r7, #4]
 802036c:	781b      	ldrb	r3, [r3, #0]
 802036e:	b2db      	uxtb	r3, r3
 8020370:	b25b      	sxtb	r3, r3
 8020372:	2b00      	cmp	r3, #0
 8020374:	da3c      	bge.n	80203f0 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8020376:	687b      	ldr	r3, [r7, #4]
 8020378:	685a      	ldr	r2, [r3, #4]
 802037a:	7afb      	ldrb	r3, [r7, #11]
 802037c:	409a      	lsls	r2, r3
 802037e:	68fb      	ldr	r3, [r7, #12]
 8020380:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8020382:	7afb      	ldrb	r3, [r7, #11]
 8020384:	08db      	lsrs	r3, r3, #3
 8020386:	b2db      	uxtb	r3, r3
 8020388:	4618      	mov	r0, r3
 802038a:	7afb      	ldrb	r3, [r7, #11]
 802038c:	08db      	lsrs	r3, r3, #3
 802038e:	b2db      	uxtb	r3, r3
 8020390:	461a      	mov	r2, r3
 8020392:	68fb      	ldr	r3, [r7, #12]
 8020394:	3210      	adds	r2, #16
 8020396:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802039a:	7afb      	ldrb	r3, [r7, #11]
 802039c:	f003 0307 	and.w	r3, r3, #7
 80203a0:	009b      	lsls	r3, r3, #2
 80203a2:	4619      	mov	r1, r3
 80203a4:	2307      	movs	r3, #7
 80203a6:	408b      	lsls	r3, r1
 80203a8:	43db      	mvns	r3, r3
 80203aa:	ea02 0103 	and.w	r1, r2, r3
 80203ae:	68fb      	ldr	r3, [r7, #12]
 80203b0:	f100 0210 	add.w	r2, r0, #16
 80203b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80203b8:	7afb      	ldrb	r3, [r7, #11]
 80203ba:	08db      	lsrs	r3, r3, #3
 80203bc:	b2db      	uxtb	r3, r3
 80203be:	4618      	mov	r0, r3
 80203c0:	7afb      	ldrb	r3, [r7, #11]
 80203c2:	08db      	lsrs	r3, r3, #3
 80203c4:	b2db      	uxtb	r3, r3
 80203c6:	461a      	mov	r2, r3
 80203c8:	68fb      	ldr	r3, [r7, #12]
 80203ca:	3210      	adds	r2, #16
 80203cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80203d0:	687b      	ldr	r3, [r7, #4]
 80203d2:	7a1b      	ldrb	r3, [r3, #8]
 80203d4:	4619      	mov	r1, r3
 80203d6:	7afb      	ldrb	r3, [r7, #11]
 80203d8:	f003 0307 	and.w	r3, r3, #7
 80203dc:	009b      	lsls	r3, r3, #2
 80203de:	fa01 f303 	lsl.w	r3, r1, r3
 80203e2:	ea42 0103 	orr.w	r1, r2, r3
 80203e6:	68fb      	ldr	r3, [r7, #12]
 80203e8:	f100 0210 	add.w	r2, r0, #16
 80203ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80203f0:	7afb      	ldrb	r3, [r7, #11]
 80203f2:	089b      	lsrs	r3, r3, #2
 80203f4:	b2db      	uxtb	r3, r3
 80203f6:	4618      	mov	r0, r3
 80203f8:	7afb      	ldrb	r3, [r7, #11]
 80203fa:	089b      	lsrs	r3, r3, #2
 80203fc:	b2db      	uxtb	r3, r3
 80203fe:	461a      	mov	r2, r3
 8020400:	68fb      	ldr	r3, [r7, #12]
 8020402:	3204      	adds	r2, #4
 8020404:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8020408:	687b      	ldr	r3, [r7, #4]
 802040a:	781b      	ldrb	r3, [r3, #0]
 802040c:	4619      	mov	r1, r3
 802040e:	7afb      	ldrb	r3, [r7, #11]
 8020410:	f003 0303 	and.w	r3, r3, #3
 8020414:	00db      	lsls	r3, r3, #3
 8020416:	fa01 f303 	lsl.w	r3, r1, r3
 802041a:	ea42 0103 	orr.w	r1, r2, r3
 802041e:	68fb      	ldr	r3, [r7, #12]
 8020420:	1d02      	adds	r2, r0, #4
 8020422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8020426:	3714      	adds	r7, #20
 8020428:	46bd      	mov	sp, r7
 802042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802042e:	4770      	bx	lr
 8020430:	48028e00 	.word	0x48028e00
 8020434:	48028f00 	.word	0x48028f00

08020438 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8020438:	b480      	push	{r7}
 802043a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 802043c:	4b03      	ldr	r3, [pc, #12]	; (802044c <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 802043e:	681b      	ldr	r3, [r3, #0]
}
 8020440:	4618      	mov	r0, r3
 8020442:	46bd      	mov	sp, r7
 8020444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020448:	4770      	bx	lr
 802044a:	bf00      	nop
 802044c:	2003ffc0 	.word	0x2003ffc0

08020450 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8020450:	b480      	push	{r7}
 8020452:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 8020454:	4b03      	ldr	r3, [pc, #12]	; (8020464 <XMC_SCU_GetMirrorStatus+0x14>)
 8020456:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 802045a:	4618      	mov	r0, r3
 802045c:	46bd      	mov	sp, r7
 802045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020462:	4770      	bx	lr
 8020464:	50004000 	.word	0x50004000

08020468 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8020468:	b580      	push	{r7, lr}
 802046a:	b084      	sub	sp, #16
 802046c:	af00      	add	r7, sp, #0
 802046e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8020470:	f7ff fdd6 	bl	8020020 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8020474:	4b0b      	ldr	r3, [pc, #44]	; (80204a4 <XMC_SCU_lDelay+0x3c>)
 8020476:	681b      	ldr	r3, [r3, #0]
 8020478:	4a0b      	ldr	r2, [pc, #44]	; (80204a8 <XMC_SCU_lDelay+0x40>)
 802047a:	fba2 2303 	umull	r2, r3, r2, r3
 802047e:	0c9a      	lsrs	r2, r3, #18
 8020480:	687b      	ldr	r3, [r7, #4]
 8020482:	fb02 f303 	mul.w	r3, r2, r3
 8020486:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8020488:	2300      	movs	r3, #0
 802048a:	60fb      	str	r3, [r7, #12]
 802048c:	e003      	b.n	8020496 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 802048e:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8020490:	68fb      	ldr	r3, [r7, #12]
 8020492:	3301      	adds	r3, #1
 8020494:	60fb      	str	r3, [r7, #12]
 8020496:	68fa      	ldr	r2, [r7, #12]
 8020498:	687b      	ldr	r3, [r7, #4]
 802049a:	429a      	cmp	r2, r3
 802049c:	d3f7      	bcc.n	802048e <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 802049e:	3710      	adds	r7, #16
 80204a0:	46bd      	mov	sp, r7
 80204a2:	bd80      	pop	{r7, pc}
 80204a4:	2003ffc0 	.word	0x2003ffc0
 80204a8:	431bde83 	.word	0x431bde83

080204ac <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 80204ac:	b480      	push	{r7}
 80204ae:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 80204b0:	4b03      	ldr	r3, [pc, #12]	; (80204c0 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 80204b2:	685b      	ldr	r3, [r3, #4]
}
 80204b4:	4618      	mov	r0, r3
 80204b6:	46bd      	mov	sp, r7
 80204b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204bc:	4770      	bx	lr
 80204be:	bf00      	nop
 80204c0:	50004074 	.word	0x50004074

080204c4 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 80204c4:	b480      	push	{r7}
 80204c6:	b083      	sub	sp, #12
 80204c8:	af00      	add	r7, sp, #0
 80204ca:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 80204cc:	4a03      	ldr	r2, [pc, #12]	; (80204dc <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 80204ce:	687b      	ldr	r3, [r7, #4]
 80204d0:	60d3      	str	r3, [r2, #12]
}
 80204d2:	370c      	adds	r7, #12
 80204d4:	46bd      	mov	sp, r7
 80204d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204da:	4770      	bx	lr
 80204dc:	50004074 	.word	0x50004074

080204e0 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80204e0:	b5b0      	push	{r4, r5, r7, lr}
 80204e2:	b084      	sub	sp, #16
 80204e4:	af02      	add	r7, sp, #8
 80204e6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80204e8:	2000      	movs	r0, #0
 80204ea:	f000 f8c5 	bl	8020678 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 80204ee:	f000 fab7 	bl	8020a60 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 80204f2:	687b      	ldr	r3, [r7, #4]
 80204f4:	79db      	ldrb	r3, [r3, #7]
 80204f6:	2b00      	cmp	r3, #0
 80204f8:	d00a      	beq.n	8020510 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80204fa:	f000 faef 	bl	8020adc <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80204fe:	bf00      	nop
 8020500:	f000 fada 	bl	8020ab8 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8020504:	4603      	mov	r3, r0
 8020506:	f083 0301 	eor.w	r3, r3, #1
 802050a:	b2db      	uxtb	r3, r3
 802050c:	2b00      	cmp	r3, #0
 802050e:	d1f7      	bne.n	8020500 <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 8020510:	687b      	ldr	r3, [r7, #4]
 8020512:	7a5b      	ldrb	r3, [r3, #9]
 8020514:	4618      	mov	r0, r3
 8020516:	f000 f929 	bl	802076c <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 802051a:	bf00      	nop
 802051c:	f7ff ff98 	bl	8020450 <XMC_SCU_GetMirrorStatus>
 8020520:	4603      	mov	r3, r0
 8020522:	2b00      	cmp	r3, #0
 8020524:	d1fa      	bne.n	802051c <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8020526:	687b      	ldr	r3, [r7, #4]
 8020528:	7a1b      	ldrb	r3, [r3, #8]
 802052a:	4618      	mov	r0, r3
 802052c:	f000 fa72 	bl	8020a14 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8020530:	687b      	ldr	r3, [r7, #4]
 8020532:	7c1b      	ldrb	r3, [r3, #16]
 8020534:	4618      	mov	r0, r3
 8020536:	f000 f937 	bl	80207a8 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 802053a:	687b      	ldr	r3, [r7, #4]
 802053c:	7c5b      	ldrb	r3, [r3, #17]
 802053e:	4618      	mov	r0, r3
 8020540:	f000 f95a 	bl	80207f8 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8020544:	687b      	ldr	r3, [r7, #4]
 8020546:	7c9b      	ldrb	r3, [r3, #18]
 8020548:	4618      	mov	r0, r3
 802054a:	f000 f941 	bl	80207d0 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 802054e:	687b      	ldr	r3, [r7, #4]
 8020550:	7cdb      	ldrb	r3, [r3, #19]
 8020552:	4618      	mov	r0, r3
 8020554:	f000 f964 	bl	8020820 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8020558:	687b      	ldr	r3, [r7, #4]
 802055a:	799b      	ldrb	r3, [r3, #6]
 802055c:	2b00      	cmp	r3, #0
 802055e:	d00a      	beq.n	8020576 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8020560:	f000 faf4 	bl	8020b4c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8020564:	bf00      	nop
 8020566:	f000 fb19 	bl	8020b9c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 802056a:	4603      	mov	r3, r0
 802056c:	f083 0301 	eor.w	r3, r3, #1
 8020570:	b2db      	uxtb	r3, r3
 8020572:	2b00      	cmp	r3, #0
 8020574:	d1f7      	bne.n	8020566 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8020576:	687b      	ldr	r3, [r7, #4]
 8020578:	78db      	ldrb	r3, [r3, #3]
 802057a:	2b00      	cmp	r3, #0
 802057c:	d109      	bne.n	8020592 <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 802057e:	687b      	ldr	r3, [r7, #4]
 8020580:	799b      	ldrb	r3, [r3, #6]
 8020582:	f083 0301 	eor.w	r3, r3, #1
 8020586:	b2db      	uxtb	r3, r3
 8020588:	2b00      	cmp	r3, #0
 802058a:	d017      	beq.n	80205bc <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 802058c:	f000 fb2a 	bl	8020be4 <XMC_SCU_CLOCK_DisableSystemPll>
 8020590:	e014      	b.n	80205bc <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8020592:	f000 fb17 	bl	8020bc4 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8020596:	687b      	ldr	r3, [r7, #4]
 8020598:	8899      	ldrh	r1, [r3, #4]
 802059a:	687b      	ldr	r3, [r7, #4]
 802059c:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 802059e:	687b      	ldr	r3, [r7, #4]
 80205a0:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80205a2:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 80205a4:	687b      	ldr	r3, [r7, #4]
 80205a6:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80205a8:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 80205aa:	687b      	ldr	r3, [r7, #4]
 80205ac:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80205ae:	9300      	str	r3, [sp, #0]
 80205b0:	4608      	mov	r0, r1
 80205b2:	4611      	mov	r1, r2
 80205b4:	462a      	mov	r2, r5
 80205b6:	4623      	mov	r3, r4
 80205b8:	f000 fb24 	bl	8020c04 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 80205bc:	687b      	ldr	r3, [r7, #4]
 80205be:	68db      	ldr	r3, [r3, #12]
 80205c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80205c4:	d103      	bne.n	80205ce <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 80205c6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80205ca:	f000 f855 	bl	8020678 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 80205ce:	f7ff fd27 	bl	8020020 <SystemCoreClockUpdate>
}
 80205d2:	3708      	adds	r7, #8
 80205d4:	46bd      	mov	sp, r7
 80205d6:	bdb0      	pop	{r4, r5, r7, pc}

080205d8 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80205d8:	b480      	push	{r7}
 80205da:	b085      	sub	sp, #20
 80205dc:	af00      	add	r7, sp, #0
 80205de:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80205e0:	687b      	ldr	r3, [r7, #4]
 80205e2:	0f1b      	lsrs	r3, r3, #28
 80205e4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80205e6:	687b      	ldr	r3, [r7, #4]
 80205e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80205ec:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80205ee:	68fa      	ldr	r2, [r7, #12]
 80205f0:	4613      	mov	r3, r2
 80205f2:	005b      	lsls	r3, r3, #1
 80205f4:	4413      	add	r3, r2
 80205f6:	009b      	lsls	r3, r3, #2
 80205f8:	461a      	mov	r2, r3
 80205fa:	4b04      	ldr	r3, [pc, #16]	; (802060c <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80205fc:	4413      	add	r3, r2
 80205fe:	68ba      	ldr	r2, [r7, #8]
 8020600:	601a      	str	r2, [r3, #0]
}
 8020602:	3714      	adds	r7, #20
 8020604:	46bd      	mov	sp, r7
 8020606:	f85d 7b04 	ldr.w	r7, [sp], #4
 802060a:	4770      	bx	lr
 802060c:	50004414 	.word	0x50004414

08020610 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8020610:	b480      	push	{r7}
 8020612:	b085      	sub	sp, #20
 8020614:	af00      	add	r7, sp, #0
 8020616:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8020618:	687b      	ldr	r3, [r7, #4]
 802061a:	0f1b      	lsrs	r3, r3, #28
 802061c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 802061e:	687b      	ldr	r3, [r7, #4]
 8020620:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8020624:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8020626:	68fa      	ldr	r2, [r7, #12]
 8020628:	4613      	mov	r3, r2
 802062a:	005b      	lsls	r3, r3, #1
 802062c:	4413      	add	r3, r2
 802062e:	009b      	lsls	r3, r3, #2
 8020630:	461a      	mov	r2, r3
 8020632:	4b08      	ldr	r3, [pc, #32]	; (8020654 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8020634:	4413      	add	r3, r2
 8020636:	681a      	ldr	r2, [r3, #0]
 8020638:	68bb      	ldr	r3, [r7, #8]
 802063a:	4013      	ands	r3, r2
 802063c:	2b00      	cmp	r3, #0
 802063e:	bf14      	ite	ne
 8020640:	2301      	movne	r3, #1
 8020642:	2300      	moveq	r3, #0
 8020644:	b2db      	uxtb	r3, r3
}
 8020646:	4618      	mov	r0, r3
 8020648:	3714      	adds	r7, #20
 802064a:	46bd      	mov	sp, r7
 802064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020650:	4770      	bx	lr
 8020652:	bf00      	nop
 8020654:	5000440c 	.word	0x5000440c

08020658 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8020658:	b580      	push	{r7, lr}
 802065a:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 802065c:	f7ff feec 	bl	8020438 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8020660:	4602      	mov	r2, r0
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
 8020662:	4b04      	ldr	r3, [pc, #16]	; (8020674 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8020664:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8020666:	f003 0301 	and.w	r3, r3, #1
 802066a:	fa22 f303 	lsr.w	r3, r2, r3
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 802066e:	4618      	mov	r0, r3
 8020670:	bd80      	pop	{r7, pc}
 8020672:	bf00      	nop
 8020674:	50004600 	.word	0x50004600

08020678 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8020678:	b480      	push	{r7}
 802067a:	b083      	sub	sp, #12
 802067c:	af00      	add	r7, sp, #0
 802067e:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8020680:	4906      	ldr	r1, [pc, #24]	; (802069c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8020682:	4b06      	ldr	r3, [pc, #24]	; (802069c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8020684:	68db      	ldr	r3, [r3, #12]
 8020686:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802068a:	687b      	ldr	r3, [r7, #4]
 802068c:	4313      	orrs	r3, r2
 802068e:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8020690:	370c      	adds	r7, #12
 8020692:	46bd      	mov	sp, r7
 8020694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020698:	4770      	bx	lr
 802069a:	bf00      	nop
 802069c:	50004600 	.word	0x50004600

080206a0 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80206a0:	b480      	push	{r7}
 80206a2:	b083      	sub	sp, #12
 80206a4:	af00      	add	r7, sp, #0
 80206a6:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80206a8:	4906      	ldr	r1, [pc, #24]	; (80206c4 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80206aa:	4b06      	ldr	r3, [pc, #24]	; (80206c4 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80206ac:	699b      	ldr	r3, [r3, #24]
 80206ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80206b2:	687b      	ldr	r3, [r7, #4]
 80206b4:	4313      	orrs	r3, r2
 80206b6:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80206b8:	370c      	adds	r7, #12
 80206ba:	46bd      	mov	sp, r7
 80206bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206c0:	4770      	bx	lr
 80206c2:	bf00      	nop
 80206c4:	50004600 	.word	0x50004600

080206c8 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80206c8:	b480      	push	{r7}
 80206ca:	b083      	sub	sp, #12
 80206cc:	af00      	add	r7, sp, #0
 80206ce:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80206d0:	4906      	ldr	r1, [pc, #24]	; (80206ec <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80206d2:	4b06      	ldr	r3, [pc, #24]	; (80206ec <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80206d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80206d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80206da:	687b      	ldr	r3, [r7, #4]
 80206dc:	4313      	orrs	r3, r2
 80206de:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 80206e0:	370c      	adds	r7, #12
 80206e2:	46bd      	mov	sp, r7
 80206e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206e8:	4770      	bx	lr
 80206ea:	bf00      	nop
 80206ec:	50004600 	.word	0x50004600

080206f0 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 80206f0:	b480      	push	{r7}
 80206f2:	b083      	sub	sp, #12
 80206f4:	af00      	add	r7, sp, #0
 80206f6:	4603      	mov	r3, r0
 80206f8:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 80206fa:	88fb      	ldrh	r3, [r7, #6]
 80206fc:	2b00      	cmp	r3, #0
 80206fe:	d108      	bne.n	8020712 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8020700:	4a0a      	ldr	r2, [pc, #40]	; (802072c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8020702:	4b0a      	ldr	r3, [pc, #40]	; (802072c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8020704:	68db      	ldr	r3, [r3, #12]
 8020706:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802070a:	f023 0301 	bic.w	r3, r3, #1
 802070e:	60d3      	str	r3, [r2, #12]
 8020710:	e007      	b.n	8020722 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8020712:	4a06      	ldr	r2, [pc, #24]	; (802072c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8020714:	4b05      	ldr	r3, [pc, #20]	; (802072c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8020716:	68db      	ldr	r3, [r3, #12]
 8020718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802071c:	f043 0301 	orr.w	r3, r3, #1
 8020720:	60d3      	str	r3, [r2, #12]
  }
}
 8020722:	370c      	adds	r7, #12
 8020724:	46bd      	mov	sp, r7
 8020726:	f85d 7b04 	ldr.w	r7, [sp], #4
 802072a:	4770      	bx	lr
 802072c:	50004710 	.word	0x50004710

08020730 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 8020730:	b480      	push	{r7}
 8020732:	b083      	sub	sp, #12
 8020734:	af00      	add	r7, sp, #0
 8020736:	4603      	mov	r3, r0
 8020738:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 802073a:	bf00      	nop
 802073c:	4b09      	ldr	r3, [pc, #36]	; (8020764 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 802073e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8020742:	f003 0308 	and.w	r3, r3, #8
 8020746:	2b00      	cmp	r3, #0
 8020748:	d1f8      	bne.n	802073c <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 802074a:	4907      	ldr	r1, [pc, #28]	; (8020768 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 802074c:	4b06      	ldr	r3, [pc, #24]	; (8020768 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 802074e:	68db      	ldr	r3, [r3, #12]
 8020750:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8020754:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8020756:	4313      	orrs	r3, r2
 8020758:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 802075a:	370c      	adds	r7, #12
 802075c:	46bd      	mov	sp, r7
 802075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020762:	4770      	bx	lr
 8020764:	50004000 	.word	0x50004000
 8020768:	50004300 	.word	0x50004300

0802076c <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 802076c:	b480      	push	{r7}
 802076e:	b083      	sub	sp, #12
 8020770:	af00      	add	r7, sp, #0
 8020772:	4603      	mov	r3, r0
 8020774:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8020776:	bf00      	nop
 8020778:	4b09      	ldr	r3, [pc, #36]	; (80207a0 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 802077a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 802077e:	f003 0308 	and.w	r3, r3, #8
 8020782:	2b00      	cmp	r3, #0
 8020784:	d1f8      	bne.n	8020778 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8020786:	4907      	ldr	r1, [pc, #28]	; (80207a4 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8020788:	4b06      	ldr	r3, [pc, #24]	; (80207a4 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 802078a:	68db      	ldr	r3, [r3, #12]
 802078c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8020790:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8020792:	4313      	orrs	r3, r2
 8020794:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8020796:	370c      	adds	r7, #12
 8020798:	46bd      	mov	sp, r7
 802079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802079e:	4770      	bx	lr
 80207a0:	50004000 	.word	0x50004000
 80207a4:	50004300 	.word	0x50004300

080207a8 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80207a8:	b480      	push	{r7}
 80207aa:	b083      	sub	sp, #12
 80207ac:	af00      	add	r7, sp, #0
 80207ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80207b0:	4906      	ldr	r1, [pc, #24]	; (80207cc <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80207b2:	4b06      	ldr	r3, [pc, #24]	; (80207cc <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80207b4:	68db      	ldr	r3, [r3, #12]
 80207b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80207ba:	687b      	ldr	r3, [r7, #4]
 80207bc:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80207be:	4313      	orrs	r3, r2
 80207c0:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 80207c2:	370c      	adds	r7, #12
 80207c4:	46bd      	mov	sp, r7
 80207c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207ca:	4770      	bx	lr
 80207cc:	50004600 	.word	0x50004600

080207d0 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 80207d0:	b480      	push	{r7}
 80207d2:	b083      	sub	sp, #12
 80207d4:	af00      	add	r7, sp, #0
 80207d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80207d8:	4906      	ldr	r1, [pc, #24]	; (80207f4 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80207da:	4b06      	ldr	r3, [pc, #24]	; (80207f4 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80207dc:	6a1b      	ldr	r3, [r3, #32]
 80207de:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 80207e2:	687b      	ldr	r3, [r7, #4]
 80207e4:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80207e6:	4313      	orrs	r3, r2
 80207e8:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 80207ea:	370c      	adds	r7, #12
 80207ec:	46bd      	mov	sp, r7
 80207ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207f2:	4770      	bx	lr
 80207f4:	50004600 	.word	0x50004600

080207f8 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 80207f8:	b480      	push	{r7}
 80207fa:	b083      	sub	sp, #12
 80207fc:	af00      	add	r7, sp, #0
 80207fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8020800:	4906      	ldr	r1, [pc, #24]	; (802081c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8020802:	4b06      	ldr	r3, [pc, #24]	; (802081c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8020804:	691b      	ldr	r3, [r3, #16]
 8020806:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 802080a:	687b      	ldr	r3, [r7, #4]
 802080c:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 802080e:	4313      	orrs	r3, r2
 8020810:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8020812:	370c      	adds	r7, #12
 8020814:	46bd      	mov	sp, r7
 8020816:	f85d 7b04 	ldr.w	r7, [sp], #4
 802081a:	4770      	bx	lr
 802081c:	50004600 	.word	0x50004600

08020820 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8020820:	b480      	push	{r7}
 8020822:	b083      	sub	sp, #12
 8020824:	af00      	add	r7, sp, #0
 8020826:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8020828:	4906      	ldr	r1, [pc, #24]	; (8020844 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 802082a:	4b06      	ldr	r3, [pc, #24]	; (8020844 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 802082c:	695b      	ldr	r3, [r3, #20]
 802082e:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8020832:	687b      	ldr	r3, [r7, #4]
 8020834:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8020836:	4313      	orrs	r3, r2
 8020838:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 802083a:	370c      	adds	r7, #12
 802083c:	46bd      	mov	sp, r7
 802083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020842:	4770      	bx	lr
 8020844:	50004600 	.word	0x50004600

08020848 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8020848:	b480      	push	{r7}
 802084a:	b083      	sub	sp, #12
 802084c:	af00      	add	r7, sp, #0
 802084e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8020850:	4906      	ldr	r1, [pc, #24]	; (802086c <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8020852:	4b06      	ldr	r3, [pc, #24]	; (802086c <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8020854:	699b      	ldr	r3, [r3, #24]
 8020856:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 802085a:	687b      	ldr	r3, [r7, #4]
 802085c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 802085e:	4313      	orrs	r3, r2
 8020860:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 8020862:	370c      	adds	r7, #12
 8020864:	46bd      	mov	sp, r7
 8020866:	f85d 7b04 	ldr.w	r7, [sp], #4
 802086a:	4770      	bx	lr
 802086c:	50004600 	.word	0x50004600

08020870 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8020870:	b480      	push	{r7}
 8020872:	b083      	sub	sp, #12
 8020874:	af00      	add	r7, sp, #0
 8020876:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8020878:	4906      	ldr	r1, [pc, #24]	; (8020894 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 802087a:	4b06      	ldr	r3, [pc, #24]	; (8020894 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 802087c:	69db      	ldr	r3, [r3, #28]
 802087e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8020882:	687b      	ldr	r3, [r7, #4]
 8020884:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8020886:	4313      	orrs	r3, r2
 8020888:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 802088a:	370c      	adds	r7, #12
 802088c:	46bd      	mov	sp, r7
 802088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020892:	4770      	bx	lr
 8020894:	50004600 	.word	0x50004600

08020898 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8020898:	b480      	push	{r7}
 802089a:	b083      	sub	sp, #12
 802089c:	af00      	add	r7, sp, #0
 802089e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80208a0:	4906      	ldr	r1, [pc, #24]	; (80208bc <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80208a2:	4b06      	ldr	r3, [pc, #24]	; (80208bc <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80208a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80208a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80208aa:	687b      	ldr	r3, [r7, #4]
 80208ac:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80208ae:	4313      	orrs	r3, r2
 80208b0:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80208b2:	370c      	adds	r7, #12
 80208b4:	46bd      	mov	sp, r7
 80208b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208ba:	4770      	bx	lr
 80208bc:	50004600 	.word	0x50004600

080208c0 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80208c0:	b480      	push	{r7}
 80208c2:	b083      	sub	sp, #12
 80208c4:	af00      	add	r7, sp, #0
 80208c6:	4603      	mov	r3, r0
 80208c8:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80208ca:	4a04      	ldr	r2, [pc, #16]	; (80208dc <XMC_SCU_CLOCK_EnableClock+0x1c>)
 80208cc:	79fb      	ldrb	r3, [r7, #7]
 80208ce:	6053      	str	r3, [r2, #4]
}
 80208d0:	370c      	adds	r7, #12
 80208d2:	46bd      	mov	sp, r7
 80208d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208d8:	4770      	bx	lr
 80208da:	bf00      	nop
 80208dc:	50004600 	.word	0x50004600

080208e0 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(volatile uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 80208e0:	b480      	push	{r7}
 80208e2:	b085      	sub	sp, #20
 80208e4:	af00      	add	r7, sp, #0
 80208e6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 80208e8:	687b      	ldr	r3, [r7, #4]
 80208ea:	0f1b      	lsrs	r3, r3, #28
 80208ec:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80208ee:	687b      	ldr	r3, [r7, #4]
 80208f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80208f4:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 80208f6:	68fa      	ldr	r2, [r7, #12]
 80208f8:	4613      	mov	r3, r2
 80208fa:	005b      	lsls	r3, r3, #1
 80208fc:	4413      	add	r3, r2
 80208fe:	009b      	lsls	r3, r3, #2
 8020900:	461a      	mov	r2, r3
 8020902:	4b04      	ldr	r3, [pc, #16]	; (8020914 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8020904:	4413      	add	r3, r2
 8020906:	68ba      	ldr	r2, [r7, #8]
 8020908:	601a      	str	r2, [r3, #0]
}
 802090a:	3714      	adds	r7, #20
 802090c:	46bd      	mov	sp, r7
 802090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020912:	4770      	bx	lr
 8020914:	50004648 	.word	0x50004648

08020918 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* API to ungate a given module clock */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8020918:	b480      	push	{r7}
 802091a:	b085      	sub	sp, #20
 802091c:	af00      	add	r7, sp, #0
 802091e:	6078      	str	r0, [r7, #4]
  uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
 8020920:	687b      	ldr	r3, [r7, #4]
 8020922:	0f1b      	lsrs	r3, r3, #28
 8020924:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8020926:	687b      	ldr	r3, [r7, #4]
 8020928:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 802092c:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
 802092e:	68fa      	ldr	r2, [r7, #12]
 8020930:	4613      	mov	r3, r2
 8020932:	005b      	lsls	r3, r3, #1
 8020934:	4413      	add	r3, r2
 8020936:	009b      	lsls	r3, r3, #2
 8020938:	461a      	mov	r2, r3
 802093a:	4b08      	ldr	r3, [pc, #32]	; (802095c <XMC_SCU_CLOCK_IsPeripheralClockGated+0x44>)
 802093c:	4413      	add	r3, r2
 802093e:	681a      	ldr	r2, [r3, #0]
 8020940:	68bb      	ldr	r3, [r7, #8]
 8020942:	4013      	ands	r3, r2
 8020944:	2b00      	cmp	r3, #0
 8020946:	bf14      	ite	ne
 8020948:	2301      	movne	r3, #1
 802094a:	2300      	moveq	r3, #0
 802094c:	b2db      	uxtb	r3, r3
}
 802094e:	4618      	mov	r0, r3
 8020950:	3714      	adds	r7, #20
 8020952:	46bd      	mov	sp, r7
 8020954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020958:	4770      	bx	lr
 802095a:	bf00      	nop
 802095c:	50004640 	.word	0x50004640

08020960 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8020960:	b480      	push	{r7}
 8020962:	b083      	sub	sp, #12
 8020964:	af00      	add	r7, sp, #0
 8020966:	6078      	str	r0, [r7, #4]
 8020968:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 802096a:	4a28      	ldr	r2, [pc, #160]	; (8020a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 802096c:	4b27      	ldr	r3, [pc, #156]	; (8020a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 802096e:	695b      	ldr	r3, [r3, #20]
 8020970:	f043 0301 	orr.w	r3, r3, #1
 8020974:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8020976:	bf00      	nop
 8020978:	4b24      	ldr	r3, [pc, #144]	; (8020a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 802097a:	691b      	ldr	r3, [r3, #16]
 802097c:	f003 0301 	and.w	r3, r3, #1
 8020980:	2b00      	cmp	r3, #0
 8020982:	d0f9      	beq.n	8020978 <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8020984:	4a21      	ldr	r2, [pc, #132]	; (8020a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8020986:	4b21      	ldr	r3, [pc, #132]	; (8020a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8020988:	695b      	ldr	r3, [r3, #20]
 802098a:	f043 0310 	orr.w	r3, r3, #16
 802098e:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8020990:	491e      	ldr	r1, [pc, #120]	; (8020a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8020992:	683b      	ldr	r3, [r7, #0]
 8020994:	3b01      	subs	r3, #1
 8020996:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8020998:	687b      	ldr	r3, [r7, #4]
 802099a:	3b01      	subs	r3, #1
 802099c:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 802099e:	4313      	orrs	r3, r2
 80209a0:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80209a2:	4a1a      	ldr	r2, [pc, #104]	; (8020a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80209a4:	4b19      	ldr	r3, [pc, #100]	; (8020a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80209a6:	695b      	ldr	r3, [r3, #20]
 80209a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80209ac:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80209ae:	4a17      	ldr	r2, [pc, #92]	; (8020a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80209b0:	4b16      	ldr	r3, [pc, #88]	; (8020a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80209b2:	695b      	ldr	r3, [r3, #20]
 80209b4:	f023 0310 	bic.w	r3, r3, #16
 80209b8:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 80209ba:	4a14      	ldr	r2, [pc, #80]	; (8020a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80209bc:	4b13      	ldr	r3, [pc, #76]	; (8020a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80209be:	695b      	ldr	r3, [r3, #20]
 80209c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80209c4:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80209c6:	bf00      	nop
 80209c8:	4b10      	ldr	r3, [pc, #64]	; (8020a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80209ca:	691b      	ldr	r3, [r3, #16]
 80209cc:	f003 0304 	and.w	r3, r3, #4
 80209d0:	2b00      	cmp	r3, #0
 80209d2:	d0f9      	beq.n	80209c8 <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80209d4:	4a0d      	ldr	r2, [pc, #52]	; (8020a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80209d6:	4b0d      	ldr	r3, [pc, #52]	; (8020a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80209d8:	695b      	ldr	r3, [r3, #20]
 80209da:	f023 0301 	bic.w	r3, r3, #1
 80209de:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 80209e0:	bf00      	nop
 80209e2:	4b0a      	ldr	r3, [pc, #40]	; (8020a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80209e4:	691b      	ldr	r3, [r3, #16]
 80209e6:	f003 0301 	and.w	r3, r3, #1
 80209ea:	2b00      	cmp	r3, #0
 80209ec:	d1f9      	bne.n	80209e2 <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80209ee:	4a07      	ldr	r2, [pc, #28]	; (8020a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80209f0:	4b06      	ldr	r3, [pc, #24]	; (8020a0c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80209f2:	695b      	ldr	r3, [r3, #20]
 80209f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80209f8:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 80209fa:	4b05      	ldr	r3, [pc, #20]	; (8020a10 <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 80209fc:	2208      	movs	r2, #8
 80209fe:	60da      	str	r2, [r3, #12]
}
 8020a00:	370c      	adds	r7, #12
 8020a02:	46bd      	mov	sp, r7
 8020a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a08:	4770      	bx	lr
 8020a0a:	bf00      	nop
 8020a0c:	50004710 	.word	0x50004710
 8020a10:	50004160 	.word	0x50004160

08020a14 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8020a14:	b580      	push	{r7, lr}
 8020a16:	b082      	sub	sp, #8
 8020a18:	af00      	add	r7, sp, #0
 8020a1a:	4603      	mov	r3, r0
 8020a1c:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8020a1e:	4a0f      	ldr	r2, [pc, #60]	; (8020a5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8020a20:	4b0e      	ldr	r3, [pc, #56]	; (8020a5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8020a22:	685b      	ldr	r3, [r3, #4]
 8020a24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020a28:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8020a2a:	79fb      	ldrb	r3, [r7, #7]
 8020a2c:	2b01      	cmp	r3, #1
 8020a2e:	d10e      	bne.n	8020a4e <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8020a30:	4a0a      	ldr	r2, [pc, #40]	; (8020a5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8020a32:	4b0a      	ldr	r3, [pc, #40]	; (8020a5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8020a34:	685b      	ldr	r3, [r3, #4]
 8020a36:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8020a3a:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8020a3c:	2064      	movs	r0, #100	; 0x64
 8020a3e:	f7ff fd13 	bl	8020468 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8020a42:	4a06      	ldr	r2, [pc, #24]	; (8020a5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8020a44:	4b05      	ldr	r3, [pc, #20]	; (8020a5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8020a46:	685b      	ldr	r3, [r3, #4]
 8020a48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8020a4c:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8020a4e:	2064      	movs	r0, #100	; 0x64
 8020a50:	f7ff fd0a 	bl	8020468 <XMC_SCU_lDelay>
}
 8020a54:	3708      	adds	r7, #8
 8020a56:	46bd      	mov	sp, r7
 8020a58:	bd80      	pop	{r7, pc}
 8020a5a:	bf00      	nop
 8020a5c:	50004710 	.word	0x50004710

08020a60 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8020a60:	b480      	push	{r7}
 8020a62:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8020a64:	4b12      	ldr	r3, [pc, #72]	; (8020ab0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8020a66:	681b      	ldr	r3, [r3, #0]
 8020a68:	f003 0301 	and.w	r3, r3, #1
 8020a6c:	2b00      	cmp	r3, #0
 8020a6e:	d109      	bne.n	8020a84 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8020a70:	4b0f      	ldr	r3, [pc, #60]	; (8020ab0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8020a72:	2201      	movs	r2, #1
 8020a74:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8020a76:	bf00      	nop
 8020a78:	4b0d      	ldr	r3, [pc, #52]	; (8020ab0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8020a7a:	681b      	ldr	r3, [r3, #0]
 8020a7c:	f003 0301 	and.w	r3, r3, #1
 8020a80:	2b00      	cmp	r3, #0
 8020a82:	d0f9      	beq.n	8020a78 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8020a84:	4b0b      	ldr	r3, [pc, #44]	; (8020ab4 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8020a86:	681b      	ldr	r3, [r3, #0]
 8020a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8020a8c:	2b00      	cmp	r3, #0
 8020a8e:	d00a      	beq.n	8020aa6 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8020a90:	4b08      	ldr	r3, [pc, #32]	; (8020ab4 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8020a92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020a96:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8020a98:	bf00      	nop
 8020a9a:	4b06      	ldr	r3, [pc, #24]	; (8020ab4 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8020a9c:	681b      	ldr	r3, [r3, #0]
 8020a9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8020aa2:	2b00      	cmp	r3, #0
 8020aa4:	d1f9      	bne.n	8020a9a <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8020aa6:	46bd      	mov	sp, r7
 8020aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020aac:	4770      	bx	lr
 8020aae:	bf00      	nop
 8020ab0:	50004200 	.word	0x50004200
 8020ab4:	50004400 	.word	0x50004400

08020ab8 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8020ab8:	b480      	push	{r7}
 8020aba:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8020abc:	4b06      	ldr	r3, [pc, #24]	; (8020ad8 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8020abe:	681b      	ldr	r3, [r3, #0]
 8020ac0:	f003 0308 	and.w	r3, r3, #8
 8020ac4:	2b00      	cmp	r3, #0
 8020ac6:	bf0c      	ite	eq
 8020ac8:	2301      	moveq	r3, #1
 8020aca:	2300      	movne	r3, #0
 8020acc:	b2db      	uxtb	r3, r3
}
 8020ace:	4618      	mov	r0, r3
 8020ad0:	46bd      	mov	sp, r7
 8020ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ad6:	4770      	bx	lr
 8020ad8:	50004300 	.word	0x50004300

08020adc <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8020adc:	b580      	push	{r7, lr}
 8020ade:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8020ae0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8020ae4:	f7ff fcee 	bl	80204c4 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8020ae8:	4a17      	ldr	r2, [pc, #92]	; (8020b48 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8020aea:	4b17      	ldr	r3, [pc, #92]	; (8020b48 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8020aec:	69db      	ldr	r3, [r3, #28]
 8020aee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8020af2:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8020af4:	bf00      	nop
 8020af6:	f7ff fcd9 	bl	80204ac <XMC_SCU_INTERUPT_GetEventStatus>
 8020afa:	4603      	mov	r3, r0
 8020afc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8020b00:	2b00      	cmp	r3, #0
 8020b02:	d0f8      	beq.n	8020af6 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8020b04:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8020b08:	f7ff fcdc 	bl	80204c4 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8020b0c:	4b0e      	ldr	r3, [pc, #56]	; (8020b48 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8020b0e:	2208      	movs	r2, #8
 8020b10:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8020b12:	bf00      	nop
 8020b14:	f7ff fcca 	bl	80204ac <XMC_SCU_INTERUPT_GetEventStatus>
 8020b18:	4603      	mov	r3, r0
 8020b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020b1e:	2b00      	cmp	r3, #0
 8020b20:	d0f8      	beq.n	8020b14 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8020b22:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8020b26:	f7ff fccd 	bl	80204c4 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8020b2a:	4a07      	ldr	r2, [pc, #28]	; (8020b48 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8020b2c:	4b06      	ldr	r3, [pc, #24]	; (8020b48 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8020b2e:	68db      	ldr	r3, [r3, #12]
 8020b30:	f043 0308 	orr.w	r3, r3, #8
 8020b34:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8020b36:	bf00      	nop
 8020b38:	f7ff fcb8 	bl	80204ac <XMC_SCU_INTERUPT_GetEventStatus>
 8020b3c:	4603      	mov	r3, r0
 8020b3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8020b42:	2b00      	cmp	r3, #0
 8020b44:	d0f8      	beq.n	8020b38 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8020b46:	bd80      	pop	{r7, pc}
 8020b48:	50004300 	.word	0x50004300

08020b4c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8020b4c:	b5b0      	push	{r4, r5, r7, lr}
 8020b4e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8020b50:	4a0f      	ldr	r2, [pc, #60]	; (8020b90 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8020b52:	4b0f      	ldr	r3, [pc, #60]	; (8020b90 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8020b54:	685b      	ldr	r3, [r3, #4]
 8020b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8020b5a:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8020b5c:	4d0d      	ldr	r5, [pc, #52]	; (8020b94 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8020b5e:	4b0d      	ldr	r3, [pc, #52]	; (8020b94 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8020b60:	685b      	ldr	r3, [r3, #4]
 8020b62:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8020b66:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8020b6a:	f008 fa13 	bl	8028f94 <OSCHP_GetFrequency>
 8020b6e:	4602      	mov	r2, r0
 8020b70:	4b09      	ldr	r3, [pc, #36]	; (8020b98 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8020b72:	fba3 2302 	umull	r2, r3, r3, r2
 8020b76:	0d1b      	lsrs	r3, r3, #20
 8020b78:	3b01      	subs	r3, #1
 8020b7a:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8020b7c:	4323      	orrs	r3, r4
 8020b7e:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8020b80:	4a03      	ldr	r2, [pc, #12]	; (8020b90 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8020b82:	4b03      	ldr	r3, [pc, #12]	; (8020b90 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8020b84:	685b      	ldr	r3, [r3, #4]
 8020b86:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8020b8a:	6053      	str	r3, [r2, #4]
}
 8020b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8020b8e:	bf00      	nop
 8020b90:	50004710 	.word	0x50004710
 8020b94:	50004700 	.word	0x50004700
 8020b98:	6b5fca6b 	.word	0x6b5fca6b

08020b9c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8020b9c:	b480      	push	{r7}
 8020b9e:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8020ba0:	4b07      	ldr	r3, [pc, #28]	; (8020bc0 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8020ba2:	681b      	ldr	r3, [r3, #0]
 8020ba4:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8020ba8:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8020bac:	bf0c      	ite	eq
 8020bae:	2301      	moveq	r3, #1
 8020bb0:	2300      	movne	r3, #0
 8020bb2:	b2db      	uxtb	r3, r3
}
 8020bb4:	4618      	mov	r0, r3
 8020bb6:	46bd      	mov	sp, r7
 8020bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bbc:	4770      	bx	lr
 8020bbe:	bf00      	nop
 8020bc0:	50004710 	.word	0x50004710

08020bc4 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8020bc4:	b480      	push	{r7}
 8020bc6:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8020bc8:	4a05      	ldr	r2, [pc, #20]	; (8020be0 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8020bca:	4b05      	ldr	r3, [pc, #20]	; (8020be0 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8020bcc:	685b      	ldr	r3, [r3, #4]
 8020bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8020bd2:	f023 0302 	bic.w	r3, r3, #2
 8020bd6:	6053      	str	r3, [r2, #4]
}
 8020bd8:	46bd      	mov	sp, r7
 8020bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bde:	4770      	bx	lr
 8020be0:	50004710 	.word	0x50004710

08020be4 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8020be4:	b480      	push	{r7}
 8020be6:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8020be8:	4a05      	ldr	r2, [pc, #20]	; (8020c00 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8020bea:	4b05      	ldr	r3, [pc, #20]	; (8020c00 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8020bec:	685b      	ldr	r3, [r3, #4]
 8020bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8020bf2:	f043 0302 	orr.w	r3, r3, #2
 8020bf6:	6053      	str	r3, [r2, #4]
}
 8020bf8:	46bd      	mov	sp, r7
 8020bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bfe:	4770      	bx	lr
 8020c00:	50004710 	.word	0x50004710

08020c04 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8020c04:	b580      	push	{r7, lr}
 8020c06:	b086      	sub	sp, #24
 8020c08:	af00      	add	r7, sp, #0
 8020c0a:	60ba      	str	r2, [r7, #8]
 8020c0c:	607b      	str	r3, [r7, #4]
 8020c0e:	4603      	mov	r3, r0
 8020c10:	81fb      	strh	r3, [r7, #14]
 8020c12:	460b      	mov	r3, r1
 8020c14:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8020c16:	89fb      	ldrh	r3, [r7, #14]
 8020c18:	4618      	mov	r0, r3
 8020c1a:	f7ff fd69 	bl	80206f0 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8020c1e:	7b7b      	ldrb	r3, [r7, #13]
 8020c20:	2b01      	cmp	r3, #1
 8020c22:	f040 808b 	bne.w	8020d3c <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8020c26:	89fb      	ldrh	r3, [r7, #14]
 8020c28:	2b00      	cmp	r3, #0
 8020c2a:	d109      	bne.n	8020c40 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8020c2c:	f008 f9b2 	bl	8028f94 <OSCHP_GetFrequency>
 8020c30:	4602      	mov	r2, r0
 8020c32:	4b54      	ldr	r3, [pc, #336]	; (8020d84 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8020c34:	fba3 2302 	umull	r2, r3, r3, r2
 8020c38:	0c9b      	lsrs	r3, r3, #18
 8020c3a:	059b      	lsls	r3, r3, #22
 8020c3c:	617b      	str	r3, [r7, #20]
 8020c3e:	e002      	b.n	8020c46 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8020c40:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8020c44:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8020c46:	697b      	ldr	r3, [r7, #20]
 8020c48:	687a      	ldr	r2, [r7, #4]
 8020c4a:	fb02 f203 	mul.w	r2, r2, r3
 8020c4e:	68bb      	ldr	r3, [r7, #8]
 8020c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8020c54:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8020c56:	697b      	ldr	r3, [r7, #20]
 8020c58:	4a4b      	ldr	r2, [pc, #300]	; (8020d88 <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8020c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8020c5e:	091b      	lsrs	r3, r3, #4
 8020c60:	0d9b      	lsrs	r3, r3, #22
 8020c62:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8020c64:	4a49      	ldr	r2, [pc, #292]	; (8020d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8020c66:	4b49      	ldr	r3, [pc, #292]	; (8020d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8020c68:	685b      	ldr	r3, [r3, #4]
 8020c6a:	f043 0301 	orr.w	r3, r3, #1
 8020c6e:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8020c70:	bf00      	nop
 8020c72:	4b46      	ldr	r3, [pc, #280]	; (8020d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8020c74:	681b      	ldr	r3, [r3, #0]
 8020c76:	f003 0301 	and.w	r3, r3, #1
 8020c7a:	2b00      	cmp	r3, #0
 8020c7c:	d0f9      	beq.n	8020c72 <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8020c7e:	4a43      	ldr	r2, [pc, #268]	; (8020d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8020c80:	4b42      	ldr	r3, [pc, #264]	; (8020d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8020c82:	685b      	ldr	r3, [r3, #4]
 8020c84:	f043 0310 	orr.w	r3, r3, #16
 8020c88:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8020c8a:	4940      	ldr	r1, [pc, #256]	; (8020d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8020c8c:	4b3f      	ldr	r3, [pc, #252]	; (8020d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8020c8e:	689a      	ldr	r2, [r3, #8]
 8020c90:	4b3f      	ldr	r3, [pc, #252]	; (8020d90 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8020c92:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8020c94:	687a      	ldr	r2, [r7, #4]
 8020c96:	3a01      	subs	r2, #1
 8020c98:	0212      	lsls	r2, r2, #8
 8020c9a:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8020c9c:	693b      	ldr	r3, [r7, #16]
 8020c9e:	3b01      	subs	r3, #1
 8020ca0:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8020ca2:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8020ca4:	68bb      	ldr	r3, [r7, #8]
 8020ca6:	3b01      	subs	r3, #1
 8020ca8:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8020caa:	4313      	orrs	r3, r2
 8020cac:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8020cae:	4a37      	ldr	r2, [pc, #220]	; (8020d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8020cb0:	4b36      	ldr	r3, [pc, #216]	; (8020d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8020cb2:	685b      	ldr	r3, [r3, #4]
 8020cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020cb8:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8020cba:	4a34      	ldr	r2, [pc, #208]	; (8020d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8020cbc:	4b33      	ldr	r3, [pc, #204]	; (8020d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8020cbe:	685b      	ldr	r3, [r3, #4]
 8020cc0:	f023 0310 	bic.w	r3, r3, #16
 8020cc4:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8020cc6:	4a31      	ldr	r2, [pc, #196]	; (8020d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8020cc8:	4b30      	ldr	r3, [pc, #192]	; (8020d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8020cca:	685b      	ldr	r3, [r3, #4]
 8020ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8020cd0:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8020cd2:	bf00      	nop
 8020cd4:	4b2d      	ldr	r3, [pc, #180]	; (8020d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8020cd6:	681b      	ldr	r3, [r3, #0]
 8020cd8:	f003 0304 	and.w	r3, r3, #4
 8020cdc:	2b00      	cmp	r3, #0
 8020cde:	d0f9      	beq.n	8020cd4 <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8020ce0:	4a2a      	ldr	r2, [pc, #168]	; (8020d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8020ce2:	4b2a      	ldr	r3, [pc, #168]	; (8020d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8020ce4:	685b      	ldr	r3, [r3, #4]
 8020ce6:	f023 0301 	bic.w	r3, r3, #1
 8020cea:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8020cec:	bf00      	nop
 8020cee:	4b27      	ldr	r3, [pc, #156]	; (8020d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8020cf0:	681b      	ldr	r3, [r3, #0]
 8020cf2:	f003 0301 	and.w	r3, r3, #1
 8020cf6:	2b00      	cmp	r3, #0
 8020cf8:	d1f9      	bne.n	8020cee <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8020cfa:	697b      	ldr	r3, [r7, #20]
 8020cfc:	4a25      	ldr	r2, [pc, #148]	; (8020d94 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8020cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8020d02:	095b      	lsrs	r3, r3, #5
 8020d04:	0d9b      	lsrs	r3, r3, #22
 8020d06:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8020d08:	6a3a      	ldr	r2, [r7, #32]
 8020d0a:	693b      	ldr	r3, [r7, #16]
 8020d0c:	429a      	cmp	r2, r3
 8020d0e:	d202      	bcs.n	8020d16 <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8020d10:	6938      	ldr	r0, [r7, #16]
 8020d12:	f000 f845 	bl	8020da0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8020d16:	697b      	ldr	r3, [r7, #20]
 8020d18:	085b      	lsrs	r3, r3, #1
 8020d1a:	4a1f      	ldr	r2, [pc, #124]	; (8020d98 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8020d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8020d20:	095b      	lsrs	r3, r3, #5
 8020d22:	0d9b      	lsrs	r3, r3, #22
 8020d24:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8020d26:	6a3a      	ldr	r2, [r7, #32]
 8020d28:	693b      	ldr	r3, [r7, #16]
 8020d2a:	429a      	cmp	r2, r3
 8020d2c:	d202      	bcs.n	8020d34 <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8020d2e:	6938      	ldr	r0, [r7, #16]
 8020d30:	f000 f836 	bl	8020da0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8020d34:	6a38      	ldr	r0, [r7, #32]
 8020d36:	f000 f833 	bl	8020da0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8020d3a:	e01c      	b.n	8020d76 <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8020d3c:	4913      	ldr	r1, [pc, #76]	; (8020d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8020d3e:	4b13      	ldr	r3, [pc, #76]	; (8020d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8020d40:	689b      	ldr	r3, [r3, #8]
 8020d42:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8020d46:	6a3b      	ldr	r3, [r7, #32]
 8020d48:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8020d4a:	4313      	orrs	r3, r2
 8020d4c:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8020d4e:	bf00      	nop
 8020d50:	4b0e      	ldr	r3, [pc, #56]	; (8020d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8020d52:	681b      	ldr	r3, [r3, #0]
 8020d54:	f003 0310 	and.w	r3, r3, #16
 8020d58:	2b00      	cmp	r3, #0
 8020d5a:	d0f9      	beq.n	8020d50 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8020d5c:	4a0b      	ldr	r2, [pc, #44]	; (8020d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8020d5e:	4b0b      	ldr	r3, [pc, #44]	; (8020d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8020d60:	685b      	ldr	r3, [r3, #4]
 8020d62:	f043 0301 	orr.w	r3, r3, #1
 8020d66:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8020d68:	bf00      	nop
 8020d6a:	4b08      	ldr	r3, [pc, #32]	; (8020d8c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8020d6c:	681b      	ldr	r3, [r3, #0]
 8020d6e:	f003 0301 	and.w	r3, r3, #1
 8020d72:	2b00      	cmp	r3, #0
 8020d74:	d0f9      	beq.n	8020d6a <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8020d76:	4b09      	ldr	r3, [pc, #36]	; (8020d9c <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8020d78:	2205      	movs	r2, #5
 8020d7a:	60da      	str	r2, [r3, #12]
}
 8020d7c:	3718      	adds	r7, #24
 8020d7e:	46bd      	mov	sp, r7
 8020d80:	bd80      	pop	{r7, pc}
 8020d82:	bf00      	nop
 8020d84:	431bde83 	.word	0x431bde83
 8020d88:	aaaaaaab 	.word	0xaaaaaaab
 8020d8c:	50004710 	.word	0x50004710
 8020d90:	f08080ff 	.word	0xf08080ff
 8020d94:	88888889 	.word	0x88888889
 8020d98:	b60b60b7 	.word	0xb60b60b7
 8020d9c:	50004160 	.word	0x50004160

08020da0 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8020da0:	b580      	push	{r7, lr}
 8020da2:	b082      	sub	sp, #8
 8020da4:	af00      	add	r7, sp, #0
 8020da6:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8020da8:	490b      	ldr	r1, [pc, #44]	; (8020dd8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8020daa:	4b0b      	ldr	r3, [pc, #44]	; (8020dd8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8020dac:	689b      	ldr	r3, [r3, #8]
 8020dae:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8020db2:	687b      	ldr	r3, [r7, #4]
 8020db4:	3b01      	subs	r3, #1
 8020db6:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8020db8:	4313      	orrs	r3, r2
 8020dba:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8020dbc:	bf00      	nop
 8020dbe:	4b06      	ldr	r3, [pc, #24]	; (8020dd8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8020dc0:	681b      	ldr	r3, [r3, #0]
 8020dc2:	f003 0320 	and.w	r3, r3, #32
 8020dc6:	2b00      	cmp	r3, #0
 8020dc8:	d0f9      	beq.n	8020dbe <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8020dca:	2032      	movs	r0, #50	; 0x32
 8020dcc:	f7ff fb4c 	bl	8020468 <XMC_SCU_lDelay>
}
 8020dd0:	3708      	adds	r7, #8
 8020dd2:	46bd      	mov	sp, r7
 8020dd4:	bd80      	pop	{r7, pc}
 8020dd6:	bf00      	nop
 8020dd8:	50004710 	.word	0x50004710

08020ddc <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8020ddc:	b480      	push	{r7}
 8020dde:	b083      	sub	sp, #12
 8020de0:	af00      	add	r7, sp, #0
 8020de2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8020de4:	687b      	ldr	r3, [r7, #4]
 8020de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8020dea:	60da      	str	r2, [r3, #12]
}
 8020dec:	370c      	adds	r7, #12
 8020dee:	46bd      	mov	sp, r7
 8020df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020df4:	4770      	bx	lr
 8020df6:	bf00      	nop

08020df8 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8020df8:	b580      	push	{r7, lr}
 8020dfa:	b082      	sub	sp, #8
 8020dfc:	af00      	add	r7, sp, #0
 8020dfe:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8020e00:	687b      	ldr	r3, [r7, #4]
 8020e02:	4a10      	ldr	r2, [pc, #64]	; (8020e44 <XMC_CCU4_lDeassertReset+0x4c>)
 8020e04:	4293      	cmp	r3, r2
 8020e06:	d103      	bne.n	8020e10 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8020e08:	2004      	movs	r0, #4
 8020e0a:	f7ff fbe5 	bl	80205d8 <XMC_SCU_RESET_DeassertPeripheralReset>
 8020e0e:	e016      	b.n	8020e3e <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8020e10:	687b      	ldr	r3, [r7, #4]
 8020e12:	4a0d      	ldr	r2, [pc, #52]	; (8020e48 <XMC_CCU4_lDeassertReset+0x50>)
 8020e14:	4293      	cmp	r3, r2
 8020e16:	d103      	bne.n	8020e20 <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8020e18:	2008      	movs	r0, #8
 8020e1a:	f7ff fbdd 	bl	80205d8 <XMC_SCU_RESET_DeassertPeripheralReset>
 8020e1e:	e00e      	b.n	8020e3e <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8020e20:	687b      	ldr	r3, [r7, #4]
 8020e22:	4a0a      	ldr	r2, [pc, #40]	; (8020e4c <XMC_CCU4_lDeassertReset+0x54>)
 8020e24:	4293      	cmp	r3, r2
 8020e26:	d103      	bne.n	8020e30 <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8020e28:	2010      	movs	r0, #16
 8020e2a:	f7ff fbd5 	bl	80205d8 <XMC_SCU_RESET_DeassertPeripheralReset>
 8020e2e:	e006      	b.n	8020e3e <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8020e30:	687b      	ldr	r3, [r7, #4]
 8020e32:	4a07      	ldr	r2, [pc, #28]	; (8020e50 <XMC_CCU4_lDeassertReset+0x58>)
 8020e34:	4293      	cmp	r3, r2
 8020e36:	d102      	bne.n	8020e3e <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8020e38:	4806      	ldr	r0, [pc, #24]	; (8020e54 <XMC_CCU4_lDeassertReset+0x5c>)
 8020e3a:	f7ff fbcd 	bl	80205d8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8020e3e:	3708      	adds	r7, #8
 8020e40:	46bd      	mov	sp, r7
 8020e42:	bd80      	pop	{r7, pc}
 8020e44:	4000c000 	.word	0x4000c000
 8020e48:	40010000 	.word	0x40010000
 8020e4c:	40014000 	.word	0x40014000
 8020e50:	48004000 	.word	0x48004000
 8020e54:	10000001 	.word	0x10000001

08020e58 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 8020e58:	b580      	push	{r7, lr}
 8020e5a:	b082      	sub	sp, #8
 8020e5c:	af00      	add	r7, sp, #0
 8020e5e:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8020e60:	687b      	ldr	r3, [r7, #4]
 8020e62:	4a10      	ldr	r2, [pc, #64]	; (8020ea4 <XMC_CCU4_lUngateClock+0x4c>)
 8020e64:	4293      	cmp	r3, r2
 8020e66:	d103      	bne.n	8020e70 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 8020e68:	2004      	movs	r0, #4
 8020e6a:	f7ff fd39 	bl	80208e0 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8020e6e:	e016      	b.n	8020e9e <XMC_CCU4_lUngateClock+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8020e70:	687b      	ldr	r3, [r7, #4]
 8020e72:	4a0d      	ldr	r2, [pc, #52]	; (8020ea8 <XMC_CCU4_lUngateClock+0x50>)
 8020e74:	4293      	cmp	r3, r2
 8020e76:	d103      	bne.n	8020e80 <XMC_CCU4_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 8020e78:	2008      	movs	r0, #8
 8020e7a:	f7ff fd31 	bl	80208e0 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8020e7e:	e00e      	b.n	8020e9e <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8020e80:	687b      	ldr	r3, [r7, #4]
 8020e82:	4a0a      	ldr	r2, [pc, #40]	; (8020eac <XMC_CCU4_lUngateClock+0x54>)
 8020e84:	4293      	cmp	r3, r2
 8020e86:	d103      	bne.n	8020e90 <XMC_CCU4_lUngateClock+0x38>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 8020e88:	2010      	movs	r0, #16
 8020e8a:	f7ff fd29 	bl	80208e0 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8020e8e:	e006      	b.n	8020e9e <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8020e90:	687b      	ldr	r3, [r7, #4]
 8020e92:	4a07      	ldr	r2, [pc, #28]	; (8020eb0 <XMC_CCU4_lUngateClock+0x58>)
 8020e94:	4293      	cmp	r3, r2
 8020e96:	d102      	bne.n	8020e9e <XMC_CCU4_lUngateClock+0x46>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 8020e98:	4806      	ldr	r0, [pc, #24]	; (8020eb4 <XMC_CCU4_lUngateClock+0x5c>)
 8020e9a:	f7ff fd21 	bl	80208e0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8020e9e:	3708      	adds	r7, #8
 8020ea0:	46bd      	mov	sp, r7
 8020ea2:	bd80      	pop	{r7, pc}
 8020ea4:	4000c000 	.word	0x4000c000
 8020ea8:	40010000 	.word	0x40010000
 8020eac:	40014000 	.word	0x40014000
 8020eb0:	48004000 	.word	0x48004000
 8020eb4:	10000001 	.word	0x10000001

08020eb8 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8020eb8:	b580      	push	{r7, lr}
 8020eba:	b082      	sub	sp, #8
 8020ebc:	af00      	add	r7, sp, #0
 8020ebe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8020ec0:	2010      	movs	r0, #16
 8020ec2:	f7ff fcfd 	bl	80208c0 <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 8020ec6:	6878      	ldr	r0, [r7, #4]
 8020ec8:	f7ff ffc6 	bl	8020e58 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8020ecc:	6878      	ldr	r0, [r7, #4]
 8020ece:	f7ff ff93 	bl	8020df8 <XMC_CCU4_lDeassertReset>
#endif
}
 8020ed2:	3708      	adds	r7, #8
 8020ed4:	46bd      	mov	sp, r7
 8020ed6:	bd80      	pop	{r7, pc}

08020ed8 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8020ed8:	b580      	push	{r7, lr}
 8020eda:	b084      	sub	sp, #16
 8020edc:	af00      	add	r7, sp, #0
 8020ede:	6078      	str	r0, [r7, #4]
 8020ee0:	460b      	mov	r3, r1
 8020ee2:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8020ee4:	6878      	ldr	r0, [r7, #4]
 8020ee6:	f7ff ffe7 	bl	8020eb8 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8020eea:	6878      	ldr	r0, [r7, #4]
 8020eec:	f7ff ff76 	bl	8020ddc <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
 8020ef0:	687b      	ldr	r3, [r7, #4]
 8020ef2:	681b      	ldr	r3, [r3, #0]
 8020ef4:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8020ef6:	68fb      	ldr	r3, [r7, #12]
 8020ef8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8020efc:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8020efe:	78fb      	ldrb	r3, [r7, #3]
 8020f00:	039b      	lsls	r3, r3, #14
 8020f02:	68fa      	ldr	r2, [r7, #12]
 8020f04:	4313      	orrs	r3, r2
 8020f06:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 8020f08:	687b      	ldr	r3, [r7, #4]
 8020f0a:	68fa      	ldr	r2, [r7, #12]
 8020f0c:	601a      	str	r2, [r3, #0]
}
 8020f0e:	3710      	adds	r7, #16
 8020f10:	46bd      	mov	sp, r7
 8020f12:	bd80      	pop	{r7, pc}

08020f14 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8020f14:	b480      	push	{r7}
 8020f16:	b083      	sub	sp, #12
 8020f18:	af00      	add	r7, sp, #0
 8020f1a:	6078      	str	r0, [r7, #4]
 8020f1c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8020f1e:	683b      	ldr	r3, [r7, #0]
 8020f20:	681a      	ldr	r2, [r3, #0]
 8020f22:	687b      	ldr	r3, [r7, #4]
 8020f24:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8020f26:	683b      	ldr	r3, [r7, #0]
 8020f28:	795b      	ldrb	r3, [r3, #5]
 8020f2a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8020f2e:	b2db      	uxtb	r3, r3
 8020f30:	051a      	lsls	r2, r3, #20
 8020f32:	687b      	ldr	r3, [r7, #4]
 8020f34:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8020f36:	683b      	ldr	r3, [r7, #0]
 8020f38:	791b      	ldrb	r3, [r3, #4]
 8020f3a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8020f3e:	b2db      	uxtb	r3, r3
 8020f40:	461a      	mov	r2, r3
 8020f42:	687b      	ldr	r3, [r7, #4]
 8020f44:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8020f46:	683b      	ldr	r3, [r7, #0]
 8020f48:	795b      	ldrb	r3, [r3, #5]
 8020f4a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8020f4e:	b2db      	uxtb	r3, r3
 8020f50:	461a      	mov	r2, r3
 8020f52:	687b      	ldr	r3, [r7, #4]
 8020f54:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8020f56:	683b      	ldr	r3, [r7, #0]
 8020f58:	795b      	ldrb	r3, [r3, #5]
 8020f5a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8020f5e:	b2db      	uxtb	r3, r3
 8020f60:	461a      	mov	r2, r3
 8020f62:	687b      	ldr	r3, [r7, #4]
 8020f64:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8020f66:	683b      	ldr	r3, [r7, #0]
 8020f68:	791b      	ldrb	r3, [r3, #4]
 8020f6a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8020f6e:	b2db      	uxtb	r3, r3
 8020f70:	461a      	mov	r2, r3
 8020f72:	687b      	ldr	r3, [r7, #4]
 8020f74:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8020f76:	370c      	adds	r7, #12
 8020f78:	46bd      	mov	sp, r7
 8020f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f7e:	4770      	bx	lr

08020f80 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8020f80:	b480      	push	{r7}
 8020f82:	b087      	sub	sp, #28
 8020f84:	af00      	add	r7, sp, #0
 8020f86:	6078      	str	r0, [r7, #4]
 8020f88:	460b      	mov	r3, r1
 8020f8a:	70fb      	strb	r3, [r7, #3]
 8020f8c:	4613      	mov	r3, r2
 8020f8e:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  switch (event)
 8020f90:	78fb      	ldrb	r3, [r7, #3]
 8020f92:	2b0b      	cmp	r3, #11
 8020f94:	d836      	bhi.n	8021004 <XMC_CCU4_SLICE_SetInterruptNode+0x84>
 8020f96:	a201      	add	r2, pc, #4	; (adr r2, 8020f9c <XMC_CCU4_SLICE_SetInterruptNode+0x1c>)
 8020f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020f9c:	08020fcd 	.word	0x08020fcd
 8020fa0:	08020fcd 	.word	0x08020fcd
 8020fa4:	08020fd7 	.word	0x08020fd7
 8020fa8:	08020fd7 	.word	0x08020fd7
 8020fac:	08021005 	.word	0x08021005
 8020fb0:	08021005 	.word	0x08021005
 8020fb4:	08021005 	.word	0x08021005
 8020fb8:	08021005 	.word	0x08021005
 8020fbc:	08020fe1 	.word	0x08020fe1
 8020fc0:	08020fed 	.word	0x08020fed
 8020fc4:	08020ff9 	.word	0x08020ff9
 8020fc8:	08020ff9 	.word	0x08020ff9
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8020fcc:	2303      	movs	r3, #3
 8020fce:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8020fd0:	2300      	movs	r3, #0
 8020fd2:	617b      	str	r3, [r7, #20]
      break;
 8020fd4:	e01b      	b.n	802100e <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8020fd6:	230c      	movs	r3, #12
 8020fd8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8020fda:	2302      	movs	r3, #2
 8020fdc:	617b      	str	r3, [r7, #20]
      break;
 8020fde:	e016      	b.n	802100e <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8020fe0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8020fe4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8020fe6:	2308      	movs	r3, #8
 8020fe8:	617b      	str	r3, [r7, #20]
      break;
 8020fea:	e010      	b.n	802100e <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8020fec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8020ff0:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8020ff2:	230a      	movs	r3, #10
 8020ff4:	617b      	str	r3, [r7, #20]
      break;
 8020ff6:	e00a      	b.n	802100e <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU4_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8020ff8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8020ffc:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8020ffe:	230c      	movs	r3, #12
 8021000:	617b      	str	r3, [r7, #20]
      break;
 8021002:	e004      	b.n	802100e <XMC_CCU4_SLICE_SetInterruptNode+0x8e>
	  
	default:
	  mask = 0;
 8021004:	2300      	movs	r3, #0
 8021006:	613b      	str	r3, [r7, #16]
	  pos = 0;
 8021008:	2300      	movs	r3, #0
 802100a:	617b      	str	r3, [r7, #20]
	  break;
 802100c:	bf00      	nop
  }

  if (mask != 0)
 802100e:	693b      	ldr	r3, [r7, #16]
 8021010:	2b00      	cmp	r3, #0
 8021012:	d013      	beq.n	802103c <XMC_CCU4_SLICE_SetInterruptNode+0xbc>
  {
    srs = slice->SRS;
 8021014:	687b      	ldr	r3, [r7, #4]
 8021016:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 802101a:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
 802101c:	693b      	ldr	r3, [r7, #16]
 802101e:	43db      	mvns	r3, r3
 8021020:	68fa      	ldr	r2, [r7, #12]
 8021022:	4013      	ands	r3, r2
 8021024:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
 8021026:	78ba      	ldrb	r2, [r7, #2]
 8021028:	697b      	ldr	r3, [r7, #20]
 802102a:	fa02 f303 	lsl.w	r3, r2, r3
 802102e:	68fa      	ldr	r2, [r7, #12]
 8021030:	4313      	orrs	r3, r2
 8021032:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
 8021034:	687b      	ldr	r3, [r7, #4]
 8021036:	68fa      	ldr	r2, [r7, #12]
 8021038:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  }
}
 802103c:	371c      	adds	r7, #28
 802103e:	46bd      	mov	sp, r7
 8021040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021044:	4770      	bx	lr
 8021046:	bf00      	nop

08021048 <XMC_DMA_GetEventStatus>:
 * Source transaction complete -> ::XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE      <br>
 * Destination transaction complete -> ::XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE <br>
 * DMA error event -> ::XMC_DMA_CH_EVENT_ERROR                                     <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetEventStatus(XMC_DMA_t *const dma)
{
 8021048:	b480      	push	{r7}
 802104a:	b083      	sub	sp, #12
 802104c:	af00      	add	r7, sp, #0
 802104e:	6078      	str	r0, [r7, #4]
  return (dma->STATUSGLEV);
 8021050:	687b      	ldr	r3, [r7, #4]
 8021052:	f8d3 3360 	ldr.w	r3, [r3, #864]	; 0x360
}
 8021056:	4618      	mov	r0, r3
 8021058:	370c      	adds	r7, #12
 802105a:	46bd      	mov	sp, r7
 802105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021060:	4770      	bx	lr
 8021062:	bf00      	nop

08021064 <XMC_DMA_GetChannelsTransferCompleteStatus>:
 *
 * \par
 * The function returns GPDMA transfer complete interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsTransferCompleteStatus(XMC_DMA_t *const dma)
{
 8021064:	b480      	push	{r7}
 8021066:	b083      	sub	sp, #12
 8021068:	af00      	add	r7, sp, #0
 802106a:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[0]);
 802106c:	687b      	ldr	r3, [r7, #4]
 802106e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
}
 8021072:	4618      	mov	r0, r3
 8021074:	370c      	adds	r7, #12
 8021076:	46bd      	mov	sp, r7
 8021078:	f85d 7b04 	ldr.w	r7, [sp], #4
 802107c:	4770      	bx	lr
 802107e:	bf00      	nop

08021080 <XMC_DMA_GetChannelsBlockCompleteStatus>:
 *
 * \par
 * The function returns GPDMA block transfer complete interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsBlockCompleteStatus(XMC_DMA_t *const dma)
{
 8021080:	b480      	push	{r7}
 8021082:	b083      	sub	sp, #12
 8021084:	af00      	add	r7, sp, #0
 8021086:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[2]);
 8021088:	687b      	ldr	r3, [r7, #4]
 802108a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
}
 802108e:	4618      	mov	r0, r3
 8021090:	370c      	adds	r7, #12
 8021092:	46bd      	mov	sp, r7
 8021094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021098:	4770      	bx	lr
 802109a:	bf00      	nop

0802109c <XMC_DMA_GetChannelsSourceTransactionCompleteStatus>:
 * \par<b>Note: </b><br>
 * If the source peripheral is memory, the source transaction complete interrupt is
 * ignored.
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsSourceTransactionCompleteStatus(XMC_DMA_t *const dma)
{
 802109c:	b480      	push	{r7}
 802109e:	b083      	sub	sp, #12
 80210a0:	af00      	add	r7, sp, #0
 80210a2:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[4]);
 80210a4:	687b      	ldr	r3, [r7, #4]
 80210a6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
}
 80210aa:	4618      	mov	r0, r3
 80210ac:	370c      	adds	r7, #12
 80210ae:	46bd      	mov	sp, r7
 80210b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210b4:	4770      	bx	lr
 80210b6:	bf00      	nop

080210b8 <XMC_DMA_GetChannelsDestinationTransactionCompleteStatus>:
 * \par<b>Note: </b><br>
 * If the destination peripheral is memory, the destination transaction complete
 * interrupt is ignored.
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(XMC_DMA_t *const dma)
{
 80210b8:	b480      	push	{r7}
 80210ba:	b083      	sub	sp, #12
 80210bc:	af00      	add	r7, sp, #0
 80210be:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[6]);
 80210c0:	687b      	ldr	r3, [r7, #4]
 80210c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
}
 80210c6:	4618      	mov	r0, r3
 80210c8:	370c      	adds	r7, #12
 80210ca:	46bd      	mov	sp, r7
 80210cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210d0:	4770      	bx	lr
 80210d2:	bf00      	nop

080210d4 <XMC_DMA_GetChannelsErrorStatus>:
 *
 * \par
 * The function returns error interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsErrorStatus(XMC_DMA_t *const dma)
{
 80210d4:	b480      	push	{r7}
 80210d6:	b083      	sub	sp, #12
 80210d8:	af00      	add	r7, sp, #0
 80210da:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[8]);
 80210dc:	687b      	ldr	r3, [r7, #4]
 80210de:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
}
 80210e2:	4618      	mov	r0, r3
 80210e4:	370c      	adds	r7, #12
 80210e6:	46bd      	mov	sp, r7
 80210e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210ec:	4770      	bx	lr
 80210ee:	bf00      	nop

080210f0 <XMC_DMA_Init>:
 * API IMPLEMENTATION
 *******************************************************************************/

/* Initialize GPDMA */
void XMC_DMA_Init(XMC_DMA_t *const dma)
{
 80210f0:	b580      	push	{r7, lr}
 80210f2:	b082      	sub	sp, #8
 80210f4:	af00      	add	r7, sp, #0
 80210f6:	6078      	str	r0, [r7, #4]
  XMC_DMA_Enable(dma);
 80210f8:	6878      	ldr	r0, [r7, #4]
 80210fa:	f000 f803 	bl	8021104 <XMC_DMA_Enable>
}
 80210fe:	3708      	adds	r7, #8
 8021100:	46bd      	mov	sp, r7
 8021102:	bd80      	pop	{r7, pc}

08021104 <XMC_DMA_Enable>:

/* Enable GPDMA module */
void XMC_DMA_Enable(XMC_DMA_t *const dma)
{
 8021104:	b580      	push	{r7, lr}
 8021106:	b082      	sub	sp, #8
 8021108:	af00      	add	r7, sp, #0
 802110a:	6078      	str	r0, [r7, #4]
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 802110c:	687b      	ldr	r3, [r7, #4]
 802110e:	4a0b      	ldr	r2, [pc, #44]	; (802113c <XMC_DMA_Enable+0x38>)
 8021110:	4293      	cmp	r3, r2
 8021112:	d106      	bne.n	8021122 <XMC_DMA_Enable+0x1e>
  {
#endif
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 8021114:	480a      	ldr	r0, [pc, #40]	; (8021140 <XMC_DMA_Enable+0x3c>)
 8021116:	f7ff fbe3 	bl	80208e0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 802111a:	4809      	ldr	r0, [pc, #36]	; (8021140 <XMC_DMA_Enable+0x3c>)
 802111c:	f7ff fa5c 	bl	80205d8 <XMC_SCU_RESET_DeassertPeripheralReset>
 8021120:	e005      	b.n	802112e <XMC_DMA_Enable+0x2a>
#if defined(GPDMA1)
  }
  else
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 8021122:	4808      	ldr	r0, [pc, #32]	; (8021144 <XMC_DMA_Enable+0x40>)
 8021124:	f7ff fbdc 	bl	80208e0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 8021128:	4806      	ldr	r0, [pc, #24]	; (8021144 <XMC_DMA_Enable+0x40>)
 802112a:	f7ff fa55 	bl	80205d8 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#endif

  dma->DMACFGREG = 0x1U;
 802112e:	687b      	ldr	r3, [r7, #4]
 8021130:	2201      	movs	r2, #1
 8021132:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
}
 8021136:	3708      	adds	r7, #8
 8021138:	46bd      	mov	sp, r7
 802113a:	bd80      	pop	{r7, pc}
 802113c:	50014000 	.word	0x50014000
 8021140:	20000010 	.word	0x20000010
 8021144:	20000020 	.word	0x20000020

08021148 <XMC_DMA_IsEnabled>:
#endif
}

/* Check is the GPDMA peripheral is enabled */
bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma)
{
 8021148:	b580      	push	{r7, lr}
 802114a:	b084      	sub	sp, #16
 802114c:	af00      	add	r7, sp, #0
 802114e:	6078      	str	r0, [r7, #4]
  bool status;

#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8021150:	687b      	ldr	r3, [r7, #4]
 8021152:	4a33      	ldr	r2, [pc, #204]	; (8021220 <XMC_DMA_IsEnabled+0xd8>)
 8021154:	4293      	cmp	r3, r2
 8021156:	d125      	bne.n	80211a4 <XMC_DMA_IsEnabled+0x5c>
  {
#endif
    status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 8021158:	4832      	ldr	r0, [pc, #200]	; (8021224 <XMC_DMA_IsEnabled+0xdc>)
 802115a:	f7ff fa59 	bl	8020610 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 802115e:	4603      	mov	r3, r0
 8021160:	2b00      	cmp	r3, #0
 8021162:	bf14      	ite	ne
 8021164:	2301      	movne	r3, #1
 8021166:	2300      	moveq	r3, #0
 8021168:	b2db      	uxtb	r3, r3
 802116a:	f083 0301 	eor.w	r3, r3, #1
 802116e:	b2db      	uxtb	r3, r3
 8021170:	73fb      	strb	r3, [r7, #15]
 8021172:	7bfb      	ldrb	r3, [r7, #15]
 8021174:	f003 0301 	and.w	r3, r3, #1
 8021178:	73fb      	strb	r3, [r7, #15]
#if defined(CLOCK_GATING_SUPPORTED)
    status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 802117a:	7bfb      	ldrb	r3, [r7, #15]
 802117c:	2b00      	cmp	r3, #0
 802117e:	d00a      	beq.n	8021196 <XMC_DMA_IsEnabled+0x4e>
 8021180:	4828      	ldr	r0, [pc, #160]	; (8021224 <XMC_DMA_IsEnabled+0xdc>)
 8021182:	f7ff fbc9 	bl	8020918 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8021186:	4603      	mov	r3, r0
 8021188:	f083 0301 	eor.w	r3, r3, #1
 802118c:	b2db      	uxtb	r3, r3
 802118e:	2b00      	cmp	r3, #0
 8021190:	d001      	beq.n	8021196 <XMC_DMA_IsEnabled+0x4e>
 8021192:	2301      	movs	r3, #1
 8021194:	e000      	b.n	8021198 <XMC_DMA_IsEnabled+0x50>
 8021196:	2300      	movs	r3, #0
 8021198:	73fb      	strb	r3, [r7, #15]
 802119a:	7bfb      	ldrb	r3, [r7, #15]
 802119c:	f003 0301 	and.w	r3, r3, #1
 80211a0:	73fb      	strb	r3, [r7, #15]
 80211a2:	e024      	b.n	80211ee <XMC_DMA_IsEnabled+0xa6>
#endif
#if defined(GPDMA1)
  }
  else
  {
    status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 80211a4:	4820      	ldr	r0, [pc, #128]	; (8021228 <XMC_DMA_IsEnabled+0xe0>)
 80211a6:	f7ff fa33 	bl	8020610 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 80211aa:	4603      	mov	r3, r0
 80211ac:	2b00      	cmp	r3, #0
 80211ae:	bf14      	ite	ne
 80211b0:	2301      	movne	r3, #1
 80211b2:	2300      	moveq	r3, #0
 80211b4:	b2db      	uxtb	r3, r3
 80211b6:	f083 0301 	eor.w	r3, r3, #1
 80211ba:	b2db      	uxtb	r3, r3
 80211bc:	73fb      	strb	r3, [r7, #15]
 80211be:	7bfb      	ldrb	r3, [r7, #15]
 80211c0:	f003 0301 	and.w	r3, r3, #1
 80211c4:	73fb      	strb	r3, [r7, #15]
#if defined(CLOCK_GATING_SUPPORTED)
    status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 80211c6:	7bfb      	ldrb	r3, [r7, #15]
 80211c8:	2b00      	cmp	r3, #0
 80211ca:	d00a      	beq.n	80211e2 <XMC_DMA_IsEnabled+0x9a>
 80211cc:	4816      	ldr	r0, [pc, #88]	; (8021228 <XMC_DMA_IsEnabled+0xe0>)
 80211ce:	f7ff fba3 	bl	8020918 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 80211d2:	4603      	mov	r3, r0
 80211d4:	f083 0301 	eor.w	r3, r3, #1
 80211d8:	b2db      	uxtb	r3, r3
 80211da:	2b00      	cmp	r3, #0
 80211dc:	d001      	beq.n	80211e2 <XMC_DMA_IsEnabled+0x9a>
 80211de:	2301      	movs	r3, #1
 80211e0:	e000      	b.n	80211e4 <XMC_DMA_IsEnabled+0x9c>
 80211e2:	2300      	movs	r3, #0
 80211e4:	73fb      	strb	r3, [r7, #15]
 80211e6:	7bfb      	ldrb	r3, [r7, #15]
 80211e8:	f003 0301 	and.w	r3, r3, #1
 80211ec:	73fb      	strb	r3, [r7, #15]
#endif
  }
#endif

  /* DMA reset is not asserted and peripheral clock is not gated */
  if (status == true)
 80211ee:	7bfb      	ldrb	r3, [r7, #15]
 80211f0:	2b00      	cmp	r3, #0
 80211f2:	d00f      	beq.n	8021214 <XMC_DMA_IsEnabled+0xcc>
  {
    status = status && (dma->DMACFGREG != 0U);
 80211f4:	7bfb      	ldrb	r3, [r7, #15]
 80211f6:	2b00      	cmp	r3, #0
 80211f8:	d006      	beq.n	8021208 <XMC_DMA_IsEnabled+0xc0>
 80211fa:	687b      	ldr	r3, [r7, #4]
 80211fc:	f8d3 3398 	ldr.w	r3, [r3, #920]	; 0x398
 8021200:	2b00      	cmp	r3, #0
 8021202:	d001      	beq.n	8021208 <XMC_DMA_IsEnabled+0xc0>
 8021204:	2301      	movs	r3, #1
 8021206:	e000      	b.n	802120a <XMC_DMA_IsEnabled+0xc2>
 8021208:	2300      	movs	r3, #0
 802120a:	73fb      	strb	r3, [r7, #15]
 802120c:	7bfb      	ldrb	r3, [r7, #15]
 802120e:	f003 0301 	and.w	r3, r3, #1
 8021212:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8021214:	7bfb      	ldrb	r3, [r7, #15]
}
 8021216:	4618      	mov	r0, r3
 8021218:	3710      	adds	r7, #16
 802121a:	46bd      	mov	sp, r7
 802121c:	bd80      	pop	{r7, pc}
 802121e:	bf00      	nop
 8021220:	50014000 	.word	0x50014000
 8021224:	20000010 	.word	0x20000010
 8021228:	20000020 	.word	0x20000020

0802122c <XMC_DMA_EnableRequestLine>:

/* Enable request line */
void XMC_DMA_EnableRequestLine(XMC_DMA_t *const dma, uint8_t line, uint8_t peripheral)
{
 802122c:	b480      	push	{r7}
 802122e:	b083      	sub	sp, #12
 8021230:	af00      	add	r7, sp, #0
 8021232:	6078      	str	r0, [r7, #4]
 8021234:	460b      	mov	r3, r1
 8021236:	70fb      	strb	r3, [r7, #3]
 8021238:	4613      	mov	r3, r2
 802123a:	70bb      	strb	r3, [r7, #2]
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 802123c:	687b      	ldr	r3, [r7, #4]
 802123e:	4a1f      	ldr	r2, [pc, #124]	; (80212bc <XMC_DMA_EnableRequestLine+0x90>)
 8021240:	4293      	cmp	r3, r2
 8021242:	d11b      	bne.n	802127c <XMC_DMA_EnableRequestLine+0x50>
  {
#else
  XMC_UNUSED_ARG(dma);
#endif
    DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8021244:	481e      	ldr	r0, [pc, #120]	; (80212c0 <XMC_DMA_EnableRequestLine+0x94>)
 8021246:	4b1e      	ldr	r3, [pc, #120]	; (80212c0 <XMC_DMA_EnableRequestLine+0x94>)
 8021248:	689a      	ldr	r2, [r3, #8]
 802124a:	78fb      	ldrb	r3, [r7, #3]
 802124c:	009b      	lsls	r3, r3, #2
 802124e:	4619      	mov	r1, r3
 8021250:	230f      	movs	r3, #15
 8021252:	408b      	lsls	r3, r1
 8021254:	43db      	mvns	r3, r3
 8021256:	401a      	ands	r2, r3
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 8021258:	78bb      	ldrb	r3, [r7, #2]
 802125a:	78f9      	ldrb	r1, [r7, #3]
 802125c:	0089      	lsls	r1, r1, #2
 802125e:	408b      	lsls	r3, r1
  if (dma == XMC_DMA0)
  {
#else
  XMC_UNUSED_ARG(dma);
#endif
    DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8021260:	4313      	orrs	r3, r2
 8021262:	6083      	str	r3, [r0, #8]
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
    DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
 8021264:	4916      	ldr	r1, [pc, #88]	; (80212c0 <XMC_DMA_EnableRequestLine+0x94>)
 8021266:	4b16      	ldr	r3, [pc, #88]	; (80212c0 <XMC_DMA_EnableRequestLine+0x94>)
 8021268:	691a      	ldr	r2, [r3, #16]
 802126a:	78fb      	ldrb	r3, [r7, #3]
 802126c:	f003 0307 	and.w	r3, r3, #7
 8021270:	2001      	movs	r0, #1
 8021272:	fa00 f303 	lsl.w	r3, r0, r3
 8021276:	4313      	orrs	r3, r2
 8021278:	610b      	str	r3, [r1, #16]
 802127a:	e019      	b.n	80212b0 <XMC_DMA_EnableRequestLine+0x84>
#if defined(GPDMA1)
  }
  else
  {
    DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 802127c:	4810      	ldr	r0, [pc, #64]	; (80212c0 <XMC_DMA_EnableRequestLine+0x94>)
 802127e:	4b10      	ldr	r3, [pc, #64]	; (80212c0 <XMC_DMA_EnableRequestLine+0x94>)
 8021280:	68da      	ldr	r2, [r3, #12]
 8021282:	78fb      	ldrb	r3, [r7, #3]
 8021284:	009b      	lsls	r3, r3, #2
 8021286:	4619      	mov	r1, r3
 8021288:	230f      	movs	r3, #15
 802128a:	408b      	lsls	r3, r1
 802128c:	43db      	mvns	r3, r3
 802128e:	401a      	ands	r2, r3
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 8021290:	78bb      	ldrb	r3, [r7, #2]
 8021292:	78f9      	ldrb	r1, [r7, #3]
 8021294:	0089      	lsls	r1, r1, #2
 8021296:	408b      	lsls	r3, r1
    DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
#if defined(GPDMA1)
  }
  else
  {
    DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8021298:	4313      	orrs	r3, r2
 802129a:	60c3      	str	r3, [r0, #12]
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
    DLR->LNEN |= (0x100UL << line);
 802129c:	4908      	ldr	r1, [pc, #32]	; (80212c0 <XMC_DMA_EnableRequestLine+0x94>)
 802129e:	4b08      	ldr	r3, [pc, #32]	; (80212c0 <XMC_DMA_EnableRequestLine+0x94>)
 80212a0:	691a      	ldr	r2, [r3, #16]
 80212a2:	78fb      	ldrb	r3, [r7, #3]
 80212a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80212a8:	fa00 f303 	lsl.w	r3, r0, r3
 80212ac:	4313      	orrs	r3, r2
 80212ae:	610b      	str	r3, [r1, #16]
  }
#endif
}
 80212b0:	370c      	adds	r7, #12
 80212b2:	46bd      	mov	sp, r7
 80212b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212b8:	4770      	bx	lr
 80212ba:	bf00      	nop
 80212bc:	50014000 	.word	0x50014000
 80212c0:	50004900 	.word	0x50004900

080212c4 <XMC_DMA_CH_IsEnabled>:
  }
}

/* Check if a DMA channel is enabled */
bool XMC_DMA_CH_IsEnabled(XMC_DMA_t *const dma, const uint8_t channel)
{
 80212c4:	b480      	push	{r7}
 80212c6:	b083      	sub	sp, #12
 80212c8:	af00      	add	r7, sp, #0
 80212ca:	6078      	str	r0, [r7, #4]
 80212cc:	460b      	mov	r3, r1
 80212ce:	70fb      	strb	r3, [r7, #3]
  return (bool)(dma->CHENREG & ((uint32_t)1U << channel));
 80212d0:	687b      	ldr	r3, [r7, #4]
 80212d2:	f8d3 23a0 	ldr.w	r2, [r3, #928]	; 0x3a0
 80212d6:	78fb      	ldrb	r3, [r7, #3]
 80212d8:	fa22 f303 	lsr.w	r3, r2, r3
 80212dc:	f003 0301 	and.w	r3, r3, #1
 80212e0:	2b00      	cmp	r3, #0
 80212e2:	bf14      	ite	ne
 80212e4:	2301      	movne	r3, #1
 80212e6:	2300      	moveq	r3, #0
 80212e8:	b2db      	uxtb	r3, r3
}
 80212ea:	4618      	mov	r0, r3
 80212ec:	370c      	adds	r7, #12
 80212ee:	46bd      	mov	sp, r7
 80212f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212f4:	4770      	bx	lr
 80212f6:	bf00      	nop

080212f8 <XMC_DMA_CH_Init>:

/* Initialize DMA channel */
XMC_DMA_CH_STATUS_t XMC_DMA_CH_Init(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_CONFIG_t *const config)
{
 80212f8:	b580      	push	{r7, lr}
 80212fa:	b086      	sub	sp, #24
 80212fc:	af00      	add	r7, sp, #0
 80212fe:	60f8      	str	r0, [r7, #12]
 8021300:	460b      	mov	r3, r1
 8021302:	607a      	str	r2, [r7, #4]
 8021304:	72fb      	strb	r3, [r7, #11]
  XMC_DMA_CH_STATUS_t status;
  uint8_t line;
  uint8_t peripheral;

  if (XMC_DMA_IsEnabled(dma) == true)
 8021306:	68f8      	ldr	r0, [r7, #12]
 8021308:	f7ff ff1e 	bl	8021148 <XMC_DMA_IsEnabled>
 802130c:	4603      	mov	r3, r0
 802130e:	2b00      	cmp	r3, #0
 8021310:	f000 81f1 	beq.w	80216f6 <XMC_DMA_CH_Init+0x3fe>
  {
    if (XMC_DMA_CH_IsEnabled(dma, channel) == false)
 8021314:	7afb      	ldrb	r3, [r7, #11]
 8021316:	68f8      	ldr	r0, [r7, #12]
 8021318:	4619      	mov	r1, r3
 802131a:	f7ff ffd3 	bl	80212c4 <XMC_DMA_CH_IsEnabled>
 802131e:	4603      	mov	r3, r0
 8021320:	f083 0301 	eor.w	r3, r3, #1
 8021324:	b2db      	uxtb	r3, r3
 8021326:	2b00      	cmp	r3, #0
 8021328:	f000 81e2 	beq.w	80216f0 <XMC_DMA_CH_Init+0x3f8>
    {
      dma->CH[channel].SAR = config->src_addr;
 802132c:	7afb      	ldrb	r3, [r7, #11]
 802132e:	687a      	ldr	r2, [r7, #4]
 8021330:	6852      	ldr	r2, [r2, #4]
 8021332:	68f9      	ldr	r1, [r7, #12]
 8021334:	2058      	movs	r0, #88	; 0x58
 8021336:	fb00 f303 	mul.w	r3, r0, r3
 802133a:	440b      	add	r3, r1
 802133c:	601a      	str	r2, [r3, #0]
      dma->CH[channel].DAR = config->dst_addr;
 802133e:	7afb      	ldrb	r3, [r7, #11]
 8021340:	687a      	ldr	r2, [r7, #4]
 8021342:	6892      	ldr	r2, [r2, #8]
 8021344:	68f9      	ldr	r1, [r7, #12]
 8021346:	2058      	movs	r0, #88	; 0x58
 8021348:	fb00 f303 	mul.w	r3, r0, r3
 802134c:	440b      	add	r3, r1
 802134e:	3308      	adds	r3, #8
 8021350:	601a      	str	r2, [r3, #0]
      dma->CH[channel].LLP = (uint32_t)config->linked_list_pointer;
 8021352:	7afb      	ldrb	r3, [r7, #11]
 8021354:	687a      	ldr	r2, [r7, #4]
 8021356:	68d2      	ldr	r2, [r2, #12]
 8021358:	4610      	mov	r0, r2
 802135a:	68fa      	ldr	r2, [r7, #12]
 802135c:	2158      	movs	r1, #88	; 0x58
 802135e:	fb01 f303 	mul.w	r3, r1, r3
 8021362:	4413      	add	r3, r2
 8021364:	3310      	adds	r3, #16
 8021366:	6018      	str	r0, [r3, #0]
      dma->CH[channel].CTLH = (uint32_t)config->block_size;
 8021368:	7afb      	ldrb	r3, [r7, #11]
 802136a:	687a      	ldr	r2, [r7, #4]
 802136c:	8b12      	ldrh	r2, [r2, #24]
 802136e:	4610      	mov	r0, r2
 8021370:	68fa      	ldr	r2, [r7, #12]
 8021372:	2158      	movs	r1, #88	; 0x58
 8021374:	fb01 f303 	mul.w	r3, r1, r3
 8021378:	4413      	add	r3, r2
 802137a:	3318      	adds	r3, #24
 802137c:	6058      	str	r0, [r3, #4]
      dma->CH[channel].CTLL = config->control;
 802137e:	7afb      	ldrb	r3, [r7, #11]
 8021380:	687a      	ldr	r2, [r7, #4]
 8021382:	6812      	ldr	r2, [r2, #0]
 8021384:	68f9      	ldr	r1, [r7, #12]
 8021386:	2058      	movs	r0, #88	; 0x58
 8021388:	fb00 f303 	mul.w	r3, r0, r3
 802138c:	440b      	add	r3, r1
 802138e:	3318      	adds	r3, #24
 8021390:	601a      	str	r2, [r3, #0]

      dma->CH[channel].CFGL = (uint32_t)((uint32_t)config->priority |
 8021392:	7afb      	ldrb	r3, [r7, #11]
 8021394:	687a      	ldr	r2, [r7, #4]
 8021396:	7ed2      	ldrb	r2, [r2, #27]
 8021398:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
 802139c:	68f9      	ldr	r1, [r7, #12]
 802139e:	2058      	movs	r0, #88	; 0x58
 80213a0:	fb00 f303 	mul.w	r3, r0, r3
 80213a4:	440b      	add	r3, r1
 80213a6:	3340      	adds	r3, #64	; 0x40
 80213a8:	601a      	str	r2, [r3, #0]
                                         (uint32_t)GPDMA0_CH_CFGL_HS_SEL_SRC_Msk |
                                         (uint32_t)GPDMA0_CH_CFGL_HS_SEL_DST_Msk);

      if ((dma == XMC_DMA0) && (channel < (uint8_t)2))
 80213aa:	68fb      	ldr	r3, [r7, #12]
 80213ac:	4ab1      	ldr	r2, [pc, #708]	; (8021674 <XMC_DMA_CH_Init+0x37c>)
 80213ae:	4293      	cmp	r3, r2
 80213b0:	d116      	bne.n	80213e0 <XMC_DMA_CH_Init+0xe8>
 80213b2:	7afb      	ldrb	r3, [r7, #11]
 80213b4:	2b01      	cmp	r3, #1
 80213b6:	d813      	bhi.n	80213e0 <XMC_DMA_CH_Init+0xe8>
      {
        /* Configure scatter and gather */
        dma->CH[channel].SGR = config->src_gather_control;
 80213b8:	7afb      	ldrb	r3, [r7, #11]
 80213ba:	687a      	ldr	r2, [r7, #4]
 80213bc:	6912      	ldr	r2, [r2, #16]
 80213be:	68f9      	ldr	r1, [r7, #12]
 80213c0:	2058      	movs	r0, #88	; 0x58
 80213c2:	fb00 f303 	mul.w	r3, r0, r3
 80213c6:	440b      	add	r3, r1
 80213c8:	3348      	adds	r3, #72	; 0x48
 80213ca:	601a      	str	r2, [r3, #0]
        dma->CH[channel].DSR = config->dst_scatter_control;
 80213cc:	7afb      	ldrb	r3, [r7, #11]
 80213ce:	687a      	ldr	r2, [r7, #4]
 80213d0:	6952      	ldr	r2, [r2, #20]
 80213d2:	68f9      	ldr	r1, [r7, #12]
 80213d4:	2058      	movs	r0, #88	; 0x58
 80213d6:	fb00 f303 	mul.w	r3, r0, r3
 80213da:	440b      	add	r3, r1
 80213dc:	3350      	adds	r3, #80	; 0x50
 80213de:	601a      	str	r2, [r3, #0]
      }

      if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
 80213e0:	687b      	ldr	r3, [r7, #4]
 80213e2:	8c1b      	ldrh	r3, [r3, #32]
 80213e4:	2b00      	cmp	r3, #0
 80213e6:	d14f      	bne.n	8021488 <XMC_DMA_CH_Init+0x190>
      {
        /* Hardware handshaking interface configuration */
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 80213e8:	687b      	ldr	r3, [r7, #4]
 80213ea:	789b      	ldrb	r3, [r3, #2]
 80213ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80213f0:	b2db      	uxtb	r3, r3
 80213f2:	2b10      	cmp	r3, #16
 80213f4:	d006      	beq.n	8021404 <XMC_DMA_CH_Init+0x10c>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 80213f6:	687b      	ldr	r3, [r7, #4]
 80213f8:	789b      	ldrb	r3, [r3, #2]
 80213fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80213fe:	b2db      	uxtb	r3, r3
      }

      if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
      {
        /* Hardware handshaking interface configuration */
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 8021400:	2b30      	cmp	r3, #48	; 0x30
 8021402:	d141      	bne.n	8021488 <XMC_DMA_CH_Init+0x190>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
        {
#if defined(GPDMA1)
          if (dma == XMC_DMA0)
 8021404:	68fb      	ldr	r3, [r7, #12]
 8021406:	4a9b      	ldr	r2, [pc, #620]	; (8021674 <XMC_DMA_CH_Init+0x37c>)
 8021408:	4293      	cmp	r3, r2
 802140a:	d106      	bne.n	802141a <XMC_DMA_CH_Init+0x122>
          {
#endif
            line = config->dst_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 802140c:	687b      	ldr	r3, [r7, #4]
 802140e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8021412:	f003 0307 	and.w	r3, r3, #7
 8021416:	75bb      	strb	r3, [r7, #22]
 8021418:	e005      	b.n	8021426 <XMC_DMA_CH_Init+0x12e>
#if defined(GPDMA1)
          }
          else
          {
            line = config->dst_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 802141a:	687b      	ldr	r3, [r7, #4]
 802141c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8021420:	f003 0303 	and.w	r3, r3, #3
 8021424:	75bb      	strb	r3, [r7, #22]
          }
#endif
          peripheral = config->dst_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 8021426:	687b      	ldr	r3, [r7, #4]
 8021428:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 802142c:	091b      	lsrs	r3, r3, #4
 802142e:	757b      	strb	r3, [r7, #21]

          dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_DEST_PER_Pos);
 8021430:	7afb      	ldrb	r3, [r7, #11]
 8021432:	7afa      	ldrb	r2, [r7, #11]
 8021434:	68f9      	ldr	r1, [r7, #12]
 8021436:	2058      	movs	r0, #88	; 0x58
 8021438:	fb00 f202 	mul.w	r2, r0, r2
 802143c:	440a      	add	r2, r1
 802143e:	3240      	adds	r2, #64	; 0x40
 8021440:	6851      	ldr	r1, [r2, #4]
 8021442:	7dba      	ldrb	r2, [r7, #22]
 8021444:	02d2      	lsls	r2, r2, #11
 8021446:	430a      	orrs	r2, r1
 8021448:	68f9      	ldr	r1, [r7, #12]
 802144a:	2058      	movs	r0, #88	; 0x58
 802144c:	fb00 f303 	mul.w	r3, r0, r3
 8021450:	440b      	add	r3, r1
 8021452:	3340      	adds	r3, #64	; 0x40
 8021454:	605a      	str	r2, [r3, #4]
          XMC_DMA_EnableRequestLine(dma, line, peripheral);
 8021456:	7dba      	ldrb	r2, [r7, #22]
 8021458:	7d7b      	ldrb	r3, [r7, #21]
 802145a:	68f8      	ldr	r0, [r7, #12]
 802145c:	4611      	mov	r1, r2
 802145e:	461a      	mov	r2, r3
 8021460:	f7ff fee4 	bl	802122c <XMC_DMA_EnableRequestLine>
          dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_DST_Msk;
 8021464:	7afb      	ldrb	r3, [r7, #11]
 8021466:	7afa      	ldrb	r2, [r7, #11]
 8021468:	68f9      	ldr	r1, [r7, #12]
 802146a:	2058      	movs	r0, #88	; 0x58
 802146c:	fb00 f202 	mul.w	r2, r0, r2
 8021470:	440a      	add	r2, r1
 8021472:	3240      	adds	r2, #64	; 0x40
 8021474:	6812      	ldr	r2, [r2, #0]
 8021476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802147a:	68f9      	ldr	r1, [r7, #12]
 802147c:	2058      	movs	r0, #88	; 0x58
 802147e:	fb00 f303 	mul.w	r3, r0, r3
 8021482:	440b      	add	r3, r1
 8021484:	3340      	adds	r3, #64	; 0x40
 8021486:	601a      	str	r2, [r3, #0]
        }
      }


      if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
 8021488:	687b      	ldr	r3, [r7, #4]
 802148a:	8b9b      	ldrh	r3, [r3, #28]
 802148c:	2b00      	cmp	r3, #0
 802148e:	d14c      	bne.n	802152a <XMC_DMA_CH_Init+0x232>
      {
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 8021490:	687b      	ldr	r3, [r7, #4]
 8021492:	789b      	ldrb	r3, [r3, #2]
 8021494:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8021498:	b2db      	uxtb	r3, r3
 802149a:	2b20      	cmp	r3, #32
 802149c:	d006      	beq.n	80214ac <XMC_DMA_CH_Init+0x1b4>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 802149e:	687b      	ldr	r3, [r7, #4]
 80214a0:	789b      	ldrb	r3, [r3, #2]
 80214a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80214a6:	b2db      	uxtb	r3, r3
      }


      if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
      {
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 80214a8:	2b30      	cmp	r3, #48	; 0x30
 80214aa:	d13e      	bne.n	802152a <XMC_DMA_CH_Init+0x232>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
        {
#if defined(GPDMA1)
          if (dma == XMC_DMA0)
 80214ac:	68fb      	ldr	r3, [r7, #12]
 80214ae:	4a71      	ldr	r2, [pc, #452]	; (8021674 <XMC_DMA_CH_Init+0x37c>)
 80214b0:	4293      	cmp	r3, r2
 80214b2:	d105      	bne.n	80214c0 <XMC_DMA_CH_Init+0x1c8>
          {
#endif
            line = config->src_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 80214b4:	687b      	ldr	r3, [r7, #4]
 80214b6:	7f9b      	ldrb	r3, [r3, #30]
 80214b8:	f003 0307 	and.w	r3, r3, #7
 80214bc:	75bb      	strb	r3, [r7, #22]
 80214be:	e004      	b.n	80214ca <XMC_DMA_CH_Init+0x1d2>
#if defined(GPDMA1)
          }
          else
          {
            line = config->src_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 80214c0:	687b      	ldr	r3, [r7, #4]
 80214c2:	7f9b      	ldrb	r3, [r3, #30]
 80214c4:	f003 0303 	and.w	r3, r3, #3
 80214c8:	75bb      	strb	r3, [r7, #22]
          }
#endif
          peripheral = config->src_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 80214ca:	687b      	ldr	r3, [r7, #4]
 80214cc:	7f9b      	ldrb	r3, [r3, #30]
 80214ce:	091b      	lsrs	r3, r3, #4
 80214d0:	757b      	strb	r3, [r7, #21]

          dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_SRC_PER_Pos);
 80214d2:	7afb      	ldrb	r3, [r7, #11]
 80214d4:	7afa      	ldrb	r2, [r7, #11]
 80214d6:	68f9      	ldr	r1, [r7, #12]
 80214d8:	2058      	movs	r0, #88	; 0x58
 80214da:	fb00 f202 	mul.w	r2, r0, r2
 80214de:	440a      	add	r2, r1
 80214e0:	3240      	adds	r2, #64	; 0x40
 80214e2:	6851      	ldr	r1, [r2, #4]
 80214e4:	7dba      	ldrb	r2, [r7, #22]
 80214e6:	01d2      	lsls	r2, r2, #7
 80214e8:	430a      	orrs	r2, r1
 80214ea:	68f9      	ldr	r1, [r7, #12]
 80214ec:	2058      	movs	r0, #88	; 0x58
 80214ee:	fb00 f303 	mul.w	r3, r0, r3
 80214f2:	440b      	add	r3, r1
 80214f4:	3340      	adds	r3, #64	; 0x40
 80214f6:	605a      	str	r2, [r3, #4]
          XMC_DMA_EnableRequestLine(dma, line, peripheral);
 80214f8:	7dba      	ldrb	r2, [r7, #22]
 80214fa:	7d7b      	ldrb	r3, [r7, #21]
 80214fc:	68f8      	ldr	r0, [r7, #12]
 80214fe:	4611      	mov	r1, r2
 8021500:	461a      	mov	r2, r3
 8021502:	f7ff fe93 	bl	802122c <XMC_DMA_EnableRequestLine>
          dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_SRC_Msk;
 8021506:	7afb      	ldrb	r3, [r7, #11]
 8021508:	7afa      	ldrb	r2, [r7, #11]
 802150a:	68f9      	ldr	r1, [r7, #12]
 802150c:	2058      	movs	r0, #88	; 0x58
 802150e:	fb00 f202 	mul.w	r2, r0, r2
 8021512:	440a      	add	r2, r1
 8021514:	3240      	adds	r2, #64	; 0x40
 8021516:	6812      	ldr	r2, [r2, #0]
 8021518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802151c:	68f9      	ldr	r1, [r7, #12]
 802151e:	2058      	movs	r0, #88	; 0x58
 8021520:	fb00 f303 	mul.w	r3, r0, r3
 8021524:	440b      	add	r3, r1
 8021526:	3340      	adds	r3, #64	; 0x40
 8021528:	601a      	str	r2, [r3, #0]
        }
      }

      XMC_DMA_CH_ClearEventStatus(dma, channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE |
 802152a:	7afb      	ldrb	r3, [r7, #11]
 802152c:	68f8      	ldr	r0, [r7, #12]
 802152e:	4619      	mov	r1, r3
 8021530:	221f      	movs	r2, #31
 8021532:	f000 f90f 	bl	8021754 <XMC_DMA_CH_ClearEventStatus>
                                  (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
                                  (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
                                  (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE |
                                  (uint32_t)XMC_DMA_CH_EVENT_ERROR));

      switch (config->transfer_type)
 8021536:	687b      	ldr	r3, [r7, #4]
 8021538:	7e9b      	ldrb	r3, [r3, #26]
 802153a:	2b08      	cmp	r3, #8
 802153c:	f200 80d4 	bhi.w	80216e8 <XMC_DMA_CH_Init+0x3f0>
 8021540:	a201      	add	r2, pc, #4	; (adr r2, 8021548 <XMC_DMA_CH_Init+0x250>)
 8021542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021546:	bf00      	nop
 8021548:	080216e9 	.word	0x080216e9
 802154c:	0802156d 	.word	0x0802156d
 8021550:	08021593 	.word	0x08021593
 8021554:	080215b9 	.word	0x080215b9
 8021558:	080215df 	.word	0x080215df
 802155c:	08021605 	.word	0x08021605
 8021560:	0802164f 	.word	0x0802164f
 8021564:	08021679 	.word	0x08021679
 8021568:	080216c3 	.word	0x080216c3
      {
        case XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK:
          break;

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 802156c:	7afb      	ldrb	r3, [r7, #11]
 802156e:	7afa      	ldrb	r2, [r7, #11]
 8021570:	68f9      	ldr	r1, [r7, #12]
 8021572:	2058      	movs	r0, #88	; 0x58
 8021574:	fb00 f202 	mul.w	r2, r0, r2
 8021578:	440a      	add	r2, r1
 802157a:	3240      	adds	r2, #64	; 0x40
 802157c:	6812      	ldr	r2, [r2, #0]
 802157e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8021582:	68f9      	ldr	r1, [r7, #12]
 8021584:	2058      	movs	r0, #88	; 0x58
 8021586:	fb00 f303 	mul.w	r3, r0, r3
 802158a:	440b      	add	r3, r1
 802158c:	3340      	adds	r3, #64	; 0x40
 802158e:	601a      	str	r2, [r3, #0]
          break;
 8021590:	e0ab      	b.n	80216ea <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 8021592:	7afb      	ldrb	r3, [r7, #11]
 8021594:	7afa      	ldrb	r2, [r7, #11]
 8021596:	68f9      	ldr	r1, [r7, #12]
 8021598:	2058      	movs	r0, #88	; 0x58
 802159a:	fb00 f202 	mul.w	r2, r0, r2
 802159e:	440a      	add	r2, r1
 80215a0:	3240      	adds	r2, #64	; 0x40
 80215a2:	6812      	ldr	r2, [r2, #0]
 80215a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80215a8:	68f9      	ldr	r1, [r7, #12]
 80215aa:	2058      	movs	r0, #88	; 0x58
 80215ac:	fb00 f303 	mul.w	r3, r0, r3
 80215b0:	440b      	add	r3, r1
 80215b2:	3340      	adds	r3, #64	; 0x40
 80215b4:	601a      	str	r2, [r3, #0]
          break;
 80215b6:	e098      	b.n	80216ea <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)((uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk |
 80215b8:	7afb      	ldrb	r3, [r7, #11]
 80215ba:	7afa      	ldrb	r2, [r7, #11]
 80215bc:	68f9      	ldr	r1, [r7, #12]
 80215be:	2058      	movs	r0, #88	; 0x58
 80215c0:	fb00 f202 	mul.w	r2, r0, r2
 80215c4:	440a      	add	r2, r1
 80215c6:	3240      	adds	r2, #64	; 0x40
 80215c8:	6812      	ldr	r2, [r2, #0]
 80215ca:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80215ce:	68f9      	ldr	r1, [r7, #12]
 80215d0:	2058      	movs	r0, #88	; 0x58
 80215d2:	fb00 f303 	mul.w	r3, r0, r3
 80215d6:	440b      	add	r3, r1
 80215d8:	3340      	adds	r3, #64	; 0x40
 80215da:	601a      	str	r2, [r3, #0]
                                              (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk);
          break;
 80215dc:	e085      	b.n	80216ea <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED:
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 80215de:	7afb      	ldrb	r3, [r7, #11]
 80215e0:	7afa      	ldrb	r2, [r7, #11]
 80215e2:	68f9      	ldr	r1, [r7, #12]
 80215e4:	2058      	movs	r0, #88	; 0x58
 80215e6:	fb00 f202 	mul.w	r2, r0, r2
 80215ea:	440a      	add	r2, r1
 80215ec:	3218      	adds	r2, #24
 80215ee:	6812      	ldr	r2, [r2, #0]
 80215f0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80215f4:	68f9      	ldr	r1, [r7, #12]
 80215f6:	2058      	movs	r0, #88	; 0x58
 80215f8:	fb00 f303 	mul.w	r3, r0, r3
 80215fc:	440b      	add	r3, r1
 80215fe:	3318      	adds	r3, #24
 8021600:	601a      	str	r2, [r3, #0]
          break;
 8021602:	e072      	b.n	80216ea <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 8021604:	7afb      	ldrb	r3, [r7, #11]
 8021606:	7afa      	ldrb	r2, [r7, #11]
 8021608:	68f9      	ldr	r1, [r7, #12]
 802160a:	2058      	movs	r0, #88	; 0x58
 802160c:	fb00 f202 	mul.w	r2, r0, r2
 8021610:	440a      	add	r2, r1
 8021612:	3240      	adds	r2, #64	; 0x40
 8021614:	6812      	ldr	r2, [r2, #0]
 8021616:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 802161a:	68f9      	ldr	r1, [r7, #12]
 802161c:	2058      	movs	r0, #88	; 0x58
 802161e:	fb00 f303 	mul.w	r3, r0, r3
 8021622:	440b      	add	r3, r1
 8021624:	3340      	adds	r3, #64	; 0x40
 8021626:	601a      	str	r2, [r3, #0]
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 8021628:	7afb      	ldrb	r3, [r7, #11]
 802162a:	7afa      	ldrb	r2, [r7, #11]
 802162c:	68f9      	ldr	r1, [r7, #12]
 802162e:	2058      	movs	r0, #88	; 0x58
 8021630:	fb00 f202 	mul.w	r2, r0, r2
 8021634:	440a      	add	r2, r1
 8021636:	3218      	adds	r2, #24
 8021638:	6812      	ldr	r2, [r2, #0]
 802163a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 802163e:	68f9      	ldr	r1, [r7, #12]
 8021640:	2058      	movs	r0, #88	; 0x58
 8021642:	fb00 f303 	mul.w	r3, r0, r3
 8021646:	440b      	add	r3, r1
 8021648:	3318      	adds	r3, #24
 802164a:	601a      	str	r2, [r3, #0]
          break;
 802164c:	e04d      	b.n	80216ea <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS:
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 802164e:	7afb      	ldrb	r3, [r7, #11]
 8021650:	7afa      	ldrb	r2, [r7, #11]
 8021652:	68f9      	ldr	r1, [r7, #12]
 8021654:	2058      	movs	r0, #88	; 0x58
 8021656:	fb00 f202 	mul.w	r2, r0, r2
 802165a:	440a      	add	r2, r1
 802165c:	3218      	adds	r2, #24
 802165e:	6812      	ldr	r2, [r2, #0]
 8021660:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8021664:	68f9      	ldr	r1, [r7, #12]
 8021666:	2058      	movs	r0, #88	; 0x58
 8021668:	fb00 f303 	mul.w	r3, r0, r3
 802166c:	440b      	add	r3, r1
 802166e:	3318      	adds	r3, #24
 8021670:	601a      	str	r2, [r3, #0]
          break;
 8021672:	e03a      	b.n	80216ea <XMC_DMA_CH_Init+0x3f2>
 8021674:	50014000 	.word	0x50014000

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 8021678:	7afb      	ldrb	r3, [r7, #11]
 802167a:	7afa      	ldrb	r2, [r7, #11]
 802167c:	68f9      	ldr	r1, [r7, #12]
 802167e:	2058      	movs	r0, #88	; 0x58
 8021680:	fb00 f202 	mul.w	r2, r0, r2
 8021684:	440a      	add	r2, r1
 8021686:	3240      	adds	r2, #64	; 0x40
 8021688:	6812      	ldr	r2, [r2, #0]
 802168a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 802168e:	68f9      	ldr	r1, [r7, #12]
 8021690:	2058      	movs	r0, #88	; 0x58
 8021692:	fb00 f303 	mul.w	r3, r0, r3
 8021696:	440b      	add	r3, r1
 8021698:	3340      	adds	r3, #64	; 0x40
 802169a:	601a      	str	r2, [r3, #0]
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 802169c:	7afb      	ldrb	r3, [r7, #11]
 802169e:	7afa      	ldrb	r2, [r7, #11]
 80216a0:	68f9      	ldr	r1, [r7, #12]
 80216a2:	2058      	movs	r0, #88	; 0x58
 80216a4:	fb00 f202 	mul.w	r2, r0, r2
 80216a8:	440a      	add	r2, r1
 80216aa:	3218      	adds	r2, #24
 80216ac:	6812      	ldr	r2, [r2, #0]
 80216ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80216b2:	68f9      	ldr	r1, [r7, #12]
 80216b4:	2058      	movs	r0, #88	; 0x58
 80216b6:	fb00 f303 	mul.w	r3, r0, r3
 80216ba:	440b      	add	r3, r1
 80216bc:	3318      	adds	r3, #24
 80216be:	601a      	str	r2, [r3, #0]
          break;
 80216c0:	e013      	b.n	80216ea <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED:
          dma->CH[channel].CTLL |= (uint32_t)((uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk |
 80216c2:	7afb      	ldrb	r3, [r7, #11]
 80216c4:	7afa      	ldrb	r2, [r7, #11]
 80216c6:	68f9      	ldr	r1, [r7, #12]
 80216c8:	2058      	movs	r0, #88	; 0x58
 80216ca:	fb00 f202 	mul.w	r2, r0, r2
 80216ce:	440a      	add	r2, r1
 80216d0:	3218      	adds	r2, #24
 80216d2:	6812      	ldr	r2, [r2, #0]
 80216d4:	f042 52c0 	orr.w	r2, r2, #402653184	; 0x18000000
 80216d8:	68f9      	ldr	r1, [r7, #12]
 80216da:	2058      	movs	r0, #88	; 0x58
 80216dc:	fb00 f303 	mul.w	r3, r0, r3
 80216e0:	440b      	add	r3, r1
 80216e2:	3318      	adds	r3, #24
 80216e4:	601a      	str	r2, [r3, #0]
                                              (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
          break;
 80216e6:	e000      	b.n	80216ea <XMC_DMA_CH_Init+0x3f2>

        default:
          break;
 80216e8:	bf00      	nop
      }

      status = XMC_DMA_CH_STATUS_OK;
 80216ea:	2300      	movs	r3, #0
 80216ec:	75fb      	strb	r3, [r7, #23]
 80216ee:	e004      	b.n	80216fa <XMC_DMA_CH_Init+0x402>

    }
    else
    {
      status = XMC_DMA_CH_STATUS_BUSY;
 80216f0:	2302      	movs	r3, #2
 80216f2:	75fb      	strb	r3, [r7, #23]
 80216f4:	e001      	b.n	80216fa <XMC_DMA_CH_Init+0x402>
    }
  }
  else
  {
    status = XMC_DMA_CH_STATUS_ERROR;
 80216f6:	2301      	movs	r3, #1
 80216f8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80216fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80216fc:	4618      	mov	r0, r3
 80216fe:	3718      	adds	r7, #24
 8021700:	46bd      	mov	sp, r7
 8021702:	bd80      	pop	{r7, pc}

08021704 <XMC_DMA_CH_EnableEvent>:
  return (bool)(dma->CH[channel].CFGL & (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk);
}

/* Enable GPDMA event */
void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
 8021704:	b480      	push	{r7}
 8021706:	b087      	sub	sp, #28
 8021708:	af00      	add	r7, sp, #0
 802170a:	60f8      	str	r0, [r7, #12]
 802170c:	460b      	mov	r3, r1
 802170e:	607a      	str	r2, [r7, #4]
 8021710:	72fb      	strb	r3, [r7, #11]
  uint32_t event_idx;

  for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8021712:	2300      	movs	r3, #0
 8021714:	617b      	str	r3, [r7, #20]
 8021716:	e014      	b.n	8021742 <XMC_DMA_CH_EnableEvent+0x3e>
  {
    if (event & ((uint32_t)0x1UL << event_idx))
 8021718:	697b      	ldr	r3, [r7, #20]
 802171a:	687a      	ldr	r2, [r7, #4]
 802171c:	fa22 f303 	lsr.w	r3, r2, r3
 8021720:	f003 0301 	and.w	r3, r3, #1
 8021724:	2b00      	cmp	r3, #0
 8021726:	d009      	beq.n	802173c <XMC_DMA_CH_EnableEvent+0x38>
    {
      dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
 8021728:	697b      	ldr	r3, [r7, #20]
 802172a:	005a      	lsls	r2, r3, #1
 802172c:	7afb      	ldrb	r3, [r7, #11]
 802172e:	f240 1101 	movw	r1, #257	; 0x101
 8021732:	4099      	lsls	r1, r3
 8021734:	68fb      	ldr	r3, [r7, #12]
 8021736:	32c4      	adds	r2, #196	; 0xc4
 8021738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/* Enable GPDMA event */
void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
  uint32_t event_idx;

  for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 802173c:	697b      	ldr	r3, [r7, #20]
 802173e:	3301      	adds	r3, #1
 8021740:	617b      	str	r3, [r7, #20]
 8021742:	697b      	ldr	r3, [r7, #20]
 8021744:	2b04      	cmp	r3, #4
 8021746:	d9e7      	bls.n	8021718 <XMC_DMA_CH_EnableEvent+0x14>
    if (event & ((uint32_t)0x1UL << event_idx))
    {
      dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
    }
  }
}
 8021748:	371c      	adds	r7, #28
 802174a:	46bd      	mov	sp, r7
 802174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021750:	4770      	bx	lr
 8021752:	bf00      	nop

08021754 <XMC_DMA_CH_ClearEventStatus>:
  }
}

/* Clear GPDMA event */
void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
 8021754:	b480      	push	{r7}
 8021756:	b087      	sub	sp, #28
 8021758:	af00      	add	r7, sp, #0
 802175a:	60f8      	str	r0, [r7, #12]
 802175c:	460b      	mov	r3, r1
 802175e:	607a      	str	r2, [r7, #4]
 8021760:	72fb      	strb	r3, [r7, #11]
  uint32_t event_idx;

  for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8021762:	2300      	movs	r3, #0
 8021764:	617b      	str	r3, [r7, #20]
 8021766:	e013      	b.n	8021790 <XMC_DMA_CH_ClearEventStatus+0x3c>
  {
    if (event & (uint32_t)((uint32_t)0x1UL << event_idx))
 8021768:	697b      	ldr	r3, [r7, #20]
 802176a:	687a      	ldr	r2, [r7, #4]
 802176c:	fa22 f303 	lsr.w	r3, r2, r3
 8021770:	f003 0301 	and.w	r3, r3, #1
 8021774:	2b00      	cmp	r3, #0
 8021776:	d008      	beq.n	802178a <XMC_DMA_CH_ClearEventStatus+0x36>
    {
      dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
 8021778:	697b      	ldr	r3, [r7, #20]
 802177a:	005a      	lsls	r2, r3, #1
 802177c:	7afb      	ldrb	r3, [r7, #11]
 802177e:	2101      	movs	r1, #1
 8021780:	4099      	lsls	r1, r3
 8021782:	68fb      	ldr	r3, [r7, #12]
 8021784:	32ce      	adds	r2, #206	; 0xce
 8021786:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/* Clear GPDMA event */
void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
  uint32_t event_idx;

  for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 802178a:	697b      	ldr	r3, [r7, #20]
 802178c:	3301      	adds	r3, #1
 802178e:	617b      	str	r3, [r7, #20]
 8021790:	697b      	ldr	r3, [r7, #20]
 8021792:	2b04      	cmp	r3, #4
 8021794:	d9e8      	bls.n	8021768 <XMC_DMA_CH_ClearEventStatus+0x14>
    {
      dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
    }
  }

}
 8021796:	371c      	adds	r7, #28
 8021798:	46bd      	mov	sp, r7
 802179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802179e:	4770      	bx	lr

080217a0 <XMC_DMA_CH_SetEventHandler>:
  dma->CH[channel].CTLL &= (uint32_t)~(GPDMA0_CH_CTLL_LLP_SRC_EN_Msk | GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
}

/* Set event handler */
void XMC_DMA_CH_SetEventHandler(XMC_DMA_t *const dma, const uint8_t channel, XMC_DMA_CH_EVENT_HANDLER_t event_handler)
{
 80217a0:	b480      	push	{r7}
 80217a2:	b085      	sub	sp, #20
 80217a4:	af00      	add	r7, sp, #0
 80217a6:	60f8      	str	r0, [r7, #12]
 80217a8:	460b      	mov	r3, r1
 80217aa:	607a      	str	r2, [r7, #4]
 80217ac:	72fb      	strb	r3, [r7, #11]
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 80217ae:	68fb      	ldr	r3, [r7, #12]
 80217b0:	4a09      	ldr	r2, [pc, #36]	; (80217d8 <XMC_DMA_CH_SetEventHandler+0x38>)
 80217b2:	4293      	cmp	r3, r2
 80217b4:	d105      	bne.n	80217c2 <XMC_DMA_CH_SetEventHandler+0x22>
  {
#else
  XMC_UNUSED_ARG(dma);
#endif
    dma0_event_handlers[channel] = event_handler;
 80217b6:	7afb      	ldrb	r3, [r7, #11]
 80217b8:	4908      	ldr	r1, [pc, #32]	; (80217dc <XMC_DMA_CH_SetEventHandler+0x3c>)
 80217ba:	687a      	ldr	r2, [r7, #4]
 80217bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80217c0:	e004      	b.n	80217cc <XMC_DMA_CH_SetEventHandler+0x2c>
#if defined(GPDMA1)
  }
  else
  {
    dma1_event_handlers[channel] = event_handler;
 80217c2:	7afb      	ldrb	r3, [r7, #11]
 80217c4:	4906      	ldr	r1, [pc, #24]	; (80217e0 <XMC_DMA_CH_SetEventHandler+0x40>)
 80217c6:	687a      	ldr	r2, [r7, #4]
 80217c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
#endif
}
 80217cc:	3714      	adds	r7, #20
 80217ce:	46bd      	mov	sp, r7
 80217d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217d4:	4770      	bx	lr
 80217d6:	bf00      	nop
 80217d8:	50014000 	.word	0x50014000
 80217dc:	1ffe8b10 	.word	0x1ffe8b10
 80217e0:	1ffe8b30 	.word	0x1ffe8b30

080217e4 <XMC_DMA_IRQHandler>:
  XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
}

/* Default DMA IRQ handler */
void XMC_DMA_IRQHandler(XMC_DMA_t *const dma)
{
 80217e4:	b580      	push	{r7, lr}
 80217e6:	b088      	sub	sp, #32
 80217e8:	af00      	add	r7, sp, #0
 80217ea:	6078      	str	r0, [r7, #4]
  uint32_t mask;
  XMC_DMA_CH_EVENT_HANDLER_t *dma_event_handlers;
  XMC_DMA_CH_EVENT_HANDLER_t event_handler;

#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 80217ec:	687b      	ldr	r3, [r7, #4]
 80217ee:	4a82      	ldr	r2, [pc, #520]	; (80219f8 <XMC_DMA_IRQHandler+0x214>)
 80217f0:	4293      	cmp	r3, r2
 80217f2:	d102      	bne.n	80217fa <XMC_DMA_IRQHandler+0x16>
  {
#endif
    dma_event_handlers = dma0_event_handlers;
 80217f4:	4b81      	ldr	r3, [pc, #516]	; (80219fc <XMC_DMA_IRQHandler+0x218>)
 80217f6:	61bb      	str	r3, [r7, #24]
 80217f8:	e001      	b.n	80217fe <XMC_DMA_IRQHandler+0x1a>
#if defined(GPDMA1)
  }
  else
  {
    dma_event_handlers = dma1_event_handlers;
 80217fa:	4b81      	ldr	r3, [pc, #516]	; (8021a00 <XMC_DMA_IRQHandler+0x21c>)
 80217fc:	61bb      	str	r3, [r7, #24]
  }
#endif

  event = XMC_DMA_GetEventStatus(dma);
 80217fe:	6878      	ldr	r0, [r7, #4]
 8021800:	f7ff fc22 	bl	8021048 <XMC_DMA_GetEventStatus>
 8021804:	6178      	str	r0, [r7, #20]
  channel = 0;
 8021806:	2300      	movs	r3, #0
 8021808:	61fb      	str	r3, [r7, #28]

  if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
 802180a:	697b      	ldr	r3, [r7, #20]
 802180c:	f003 0310 	and.w	r3, r3, #16
 8021810:	2b00      	cmp	r3, #0
 8021812:	d02b      	beq.n	802186c <XMC_DMA_IRQHandler+0x88>
  {
    event = XMC_DMA_GetChannelsErrorStatus(dma);
 8021814:	6878      	ldr	r0, [r7, #4]
 8021816:	f7ff fc5d 	bl	80210d4 <XMC_DMA_GetChannelsErrorStatus>
 802181a:	6178      	str	r0, [r7, #20]
    while (event != 0)
 802181c:	e021      	b.n	8021862 <XMC_DMA_IRQHandler+0x7e>
    {
      mask = (uint32_t)1U << channel;
 802181e:	2201      	movs	r2, #1
 8021820:	69fb      	ldr	r3, [r7, #28]
 8021822:	fa02 f303 	lsl.w	r3, r2, r3
 8021826:	613b      	str	r3, [r7, #16]
      if ((event & mask) != 0)
 8021828:	697a      	ldr	r2, [r7, #20]
 802182a:	693b      	ldr	r3, [r7, #16]
 802182c:	4013      	ands	r3, r2
 802182e:	2b00      	cmp	r3, #0
 8021830:	d014      	beq.n	802185c <XMC_DMA_IRQHandler+0x78>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_ERROR);
 8021832:	69fb      	ldr	r3, [r7, #28]
 8021834:	b2db      	uxtb	r3, r3
 8021836:	6878      	ldr	r0, [r7, #4]
 8021838:	4619      	mov	r1, r3
 802183a:	2210      	movs	r2, #16
 802183c:	f7ff ff8a 	bl	8021754 <XMC_DMA_CH_ClearEventStatus>

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 8021840:	69fb      	ldr	r3, [r7, #28]
 8021842:	009b      	lsls	r3, r3, #2
 8021844:	69ba      	ldr	r2, [r7, #24]
 8021846:	4413      	add	r3, r2
 8021848:	681b      	ldr	r3, [r3, #0]
 802184a:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 802184c:	68fb      	ldr	r3, [r7, #12]
 802184e:	2b00      	cmp	r3, #0
 8021850:	d003      	beq.n	802185a <XMC_DMA_IRQHandler+0x76>
        {
          event_handler(XMC_DMA_CH_EVENT_ERROR);
 8021852:	68fb      	ldr	r3, [r7, #12]
 8021854:	2010      	movs	r0, #16
 8021856:	4798      	blx	r3
        }

        break;
 8021858:	e007      	b.n	802186a <XMC_DMA_IRQHandler+0x86>
 802185a:	e006      	b.n	802186a <XMC_DMA_IRQHandler+0x86>
      }
      ++channel;
 802185c:	69fb      	ldr	r3, [r7, #28]
 802185e:	3301      	adds	r3, #1
 8021860:	61fb      	str	r3, [r7, #28]
  channel = 0;

  if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsErrorStatus(dma);
    while (event != 0)
 8021862:	697b      	ldr	r3, [r7, #20]
 8021864:	2b00      	cmp	r3, #0
 8021866:	d1da      	bne.n	802181e <XMC_DMA_IRQHandler+0x3a>
 8021868:	e0c3      	b.n	80219f2 <XMC_DMA_IRQHandler+0x20e>
 802186a:	e0c2      	b.n	80219f2 <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
 802186c:	697b      	ldr	r3, [r7, #20]
 802186e:	f003 0301 	and.w	r3, r3, #1
 8021872:	2b00      	cmp	r3, #0
 8021874:	d02b      	beq.n	80218ce <XMC_DMA_IRQHandler+0xea>
  {
    event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
 8021876:	6878      	ldr	r0, [r7, #4]
 8021878:	f7ff fbf4 	bl	8021064 <XMC_DMA_GetChannelsTransferCompleteStatus>
 802187c:	6178      	str	r0, [r7, #20]
    while (event != 0)
 802187e:	e021      	b.n	80218c4 <XMC_DMA_IRQHandler+0xe0>
    {
      mask = (uint32_t)1U << channel;
 8021880:	2201      	movs	r2, #1
 8021882:	69fb      	ldr	r3, [r7, #28]
 8021884:	fa02 f303 	lsl.w	r3, r2, r3
 8021888:	613b      	str	r3, [r7, #16]
      if (event & mask)
 802188a:	697a      	ldr	r2, [r7, #20]
 802188c:	693b      	ldr	r3, [r7, #16]
 802188e:	4013      	ands	r3, r2
 8021890:	2b00      	cmp	r3, #0
 8021892:	d014      	beq.n	80218be <XMC_DMA_IRQHandler+0xda>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE |
 8021894:	69fb      	ldr	r3, [r7, #28]
 8021896:	b2db      	uxtb	r3, r3
 8021898:	6878      	ldr	r0, [r7, #4]
 802189a:	4619      	mov	r1, r3
 802189c:	220f      	movs	r2, #15
 802189e:	f7ff ff59 	bl	8021754 <XMC_DMA_CH_ClearEventStatus>
                                    (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
                                    (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
                                    (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE));

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 80218a2:	69fb      	ldr	r3, [r7, #28]
 80218a4:	009b      	lsls	r3, r3, #2
 80218a6:	69ba      	ldr	r2, [r7, #24]
 80218a8:	4413      	add	r3, r2
 80218aa:	681b      	ldr	r3, [r3, #0]
 80218ac:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 80218ae:	68fb      	ldr	r3, [r7, #12]
 80218b0:	2b00      	cmp	r3, #0
 80218b2:	d003      	beq.n	80218bc <XMC_DMA_IRQHandler+0xd8>
        {
          event_handler(XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 80218b4:	68fb      	ldr	r3, [r7, #12]
 80218b6:	2001      	movs	r0, #1
 80218b8:	4798      	blx	r3
        }

        break;
 80218ba:	e007      	b.n	80218cc <XMC_DMA_IRQHandler+0xe8>
 80218bc:	e006      	b.n	80218cc <XMC_DMA_IRQHandler+0xe8>
      }
      ++channel;
 80218be:	69fb      	ldr	r3, [r7, #28]
 80218c0:	3301      	adds	r3, #1
 80218c2:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
    while (event != 0)
 80218c4:	697b      	ldr	r3, [r7, #20]
 80218c6:	2b00      	cmp	r3, #0
 80218c8:	d1da      	bne.n	8021880 <XMC_DMA_IRQHandler+0x9c>
 80218ca:	e092      	b.n	80219f2 <XMC_DMA_IRQHandler+0x20e>
 80218cc:	e091      	b.n	80219f2 <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
 80218ce:	697b      	ldr	r3, [r7, #20]
 80218d0:	f003 0302 	and.w	r3, r3, #2
 80218d4:	2b00      	cmp	r3, #0
 80218d6:	d02b      	beq.n	8021930 <XMC_DMA_IRQHandler+0x14c>
  {
    event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
 80218d8:	6878      	ldr	r0, [r7, #4]
 80218da:	f7ff fbd1 	bl	8021080 <XMC_DMA_GetChannelsBlockCompleteStatus>
 80218de:	6178      	str	r0, [r7, #20]
    while (event != 0)
 80218e0:	e021      	b.n	8021926 <XMC_DMA_IRQHandler+0x142>
    {
      mask = (uint32_t)1U << channel;
 80218e2:	2201      	movs	r2, #1
 80218e4:	69fb      	ldr	r3, [r7, #28]
 80218e6:	fa02 f303 	lsl.w	r3, r2, r3
 80218ea:	613b      	str	r3, [r7, #16]
      if (event & mask)
 80218ec:	697a      	ldr	r2, [r7, #20]
 80218ee:	693b      	ldr	r3, [r7, #16]
 80218f0:	4013      	ands	r3, r2
 80218f2:	2b00      	cmp	r3, #0
 80218f4:	d014      	beq.n	8021920 <XMC_DMA_IRQHandler+0x13c>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
 80218f6:	69fb      	ldr	r3, [r7, #28]
 80218f8:	b2db      	uxtb	r3, r3
 80218fa:	6878      	ldr	r0, [r7, #4]
 80218fc:	4619      	mov	r1, r3
 80218fe:	220e      	movs	r2, #14
 8021900:	f7ff ff28 	bl	8021754 <XMC_DMA_CH_ClearEventStatus>
                                    (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
                                    (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE));

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 8021904:	69fb      	ldr	r3, [r7, #28]
 8021906:	009b      	lsls	r3, r3, #2
 8021908:	69ba      	ldr	r2, [r7, #24]
 802190a:	4413      	add	r3, r2
 802190c:	681b      	ldr	r3, [r3, #0]
 802190e:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 8021910:	68fb      	ldr	r3, [r7, #12]
 8021912:	2b00      	cmp	r3, #0
 8021914:	d003      	beq.n	802191e <XMC_DMA_IRQHandler+0x13a>
        {
          event_handler(XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE);
 8021916:	68fb      	ldr	r3, [r7, #12]
 8021918:	2002      	movs	r0, #2
 802191a:	4798      	blx	r3
        }

        break;
 802191c:	e007      	b.n	802192e <XMC_DMA_IRQHandler+0x14a>
 802191e:	e006      	b.n	802192e <XMC_DMA_IRQHandler+0x14a>
      }
      ++channel;
 8021920:	69fb      	ldr	r3, [r7, #28]
 8021922:	3301      	adds	r3, #1
 8021924:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
    while (event != 0)
 8021926:	697b      	ldr	r3, [r7, #20]
 8021928:	2b00      	cmp	r3, #0
 802192a:	d1da      	bne.n	80218e2 <XMC_DMA_IRQHandler+0xfe>
 802192c:	e061      	b.n	80219f2 <XMC_DMA_IRQHandler+0x20e>
 802192e:	e060      	b.n	80219f2 <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 8021930:	697b      	ldr	r3, [r7, #20]
 8021932:	f003 0304 	and.w	r3, r3, #4
 8021936:	2b00      	cmp	r3, #0
 8021938:	d02b      	beq.n	8021992 <XMC_DMA_IRQHandler+0x1ae>
  {
    event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
 802193a:	6878      	ldr	r0, [r7, #4]
 802193c:	f7ff fbae 	bl	802109c <XMC_DMA_GetChannelsSourceTransactionCompleteStatus>
 8021940:	6178      	str	r0, [r7, #20]
    while (event != 0)
 8021942:	e021      	b.n	8021988 <XMC_DMA_IRQHandler+0x1a4>
    {
      mask = (uint32_t)1U << channel;
 8021944:	2201      	movs	r2, #1
 8021946:	69fb      	ldr	r3, [r7, #28]
 8021948:	fa02 f303 	lsl.w	r3, r2, r3
 802194c:	613b      	str	r3, [r7, #16]
      if (event & mask)
 802194e:	697a      	ldr	r2, [r7, #20]
 8021950:	693b      	ldr	r3, [r7, #16]
 8021952:	4013      	ands	r3, r2
 8021954:	2b00      	cmp	r3, #0
 8021956:	d014      	beq.n	8021982 <XMC_DMA_IRQHandler+0x19e>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 8021958:	69fb      	ldr	r3, [r7, #28]
 802195a:	b2db      	uxtb	r3, r3
 802195c:	6878      	ldr	r0, [r7, #4]
 802195e:	4619      	mov	r1, r3
 8021960:	2204      	movs	r2, #4
 8021962:	f7ff fef7 	bl	8021754 <XMC_DMA_CH_ClearEventStatus>

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 8021966:	69fb      	ldr	r3, [r7, #28]
 8021968:	009b      	lsls	r3, r3, #2
 802196a:	69ba      	ldr	r2, [r7, #24]
 802196c:	4413      	add	r3, r2
 802196e:	681b      	ldr	r3, [r3, #0]
 8021970:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 8021972:	68fb      	ldr	r3, [r7, #12]
 8021974:	2b00      	cmp	r3, #0
 8021976:	d003      	beq.n	8021980 <XMC_DMA_IRQHandler+0x19c>
        {
          event_handler(XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 8021978:	68fb      	ldr	r3, [r7, #12]
 802197a:	2004      	movs	r0, #4
 802197c:	4798      	blx	r3
        }

        break;
 802197e:	e007      	b.n	8021990 <XMC_DMA_IRQHandler+0x1ac>
 8021980:	e006      	b.n	8021990 <XMC_DMA_IRQHandler+0x1ac>
      }
      ++channel;
 8021982:	69fb      	ldr	r3, [r7, #28]
 8021984:	3301      	adds	r3, #1
 8021986:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
    while (event != 0)
 8021988:	697b      	ldr	r3, [r7, #20]
 802198a:	2b00      	cmp	r3, #0
 802198c:	d1da      	bne.n	8021944 <XMC_DMA_IRQHandler+0x160>
 802198e:	e030      	b.n	80219f2 <XMC_DMA_IRQHandler+0x20e>
 8021990:	e02f      	b.n	80219f2 <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 8021992:	697b      	ldr	r3, [r7, #20]
 8021994:	f003 0308 	and.w	r3, r3, #8
 8021998:	2b00      	cmp	r3, #0
 802199a:	d02a      	beq.n	80219f2 <XMC_DMA_IRQHandler+0x20e>
  {
    event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
 802199c:	6878      	ldr	r0, [r7, #4]
 802199e:	f7ff fb8b 	bl	80210b8 <XMC_DMA_GetChannelsDestinationTransactionCompleteStatus>
 80219a2:	6178      	str	r0, [r7, #20]
    while (event != 0)
 80219a4:	e021      	b.n	80219ea <XMC_DMA_IRQHandler+0x206>
    {
      mask = (uint32_t)1U << channel;
 80219a6:	2201      	movs	r2, #1
 80219a8:	69fb      	ldr	r3, [r7, #28]
 80219aa:	fa02 f303 	lsl.w	r3, r2, r3
 80219ae:	613b      	str	r3, [r7, #16]
      if (event & mask)
 80219b0:	697a      	ldr	r2, [r7, #20]
 80219b2:	693b      	ldr	r3, [r7, #16]
 80219b4:	4013      	ands	r3, r2
 80219b6:	2b00      	cmp	r3, #0
 80219b8:	d014      	beq.n	80219e4 <XMC_DMA_IRQHandler+0x200>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 80219ba:	69fb      	ldr	r3, [r7, #28]
 80219bc:	b2db      	uxtb	r3, r3
 80219be:	6878      	ldr	r0, [r7, #4]
 80219c0:	4619      	mov	r1, r3
 80219c2:	2208      	movs	r2, #8
 80219c4:	f7ff fec6 	bl	8021754 <XMC_DMA_CH_ClearEventStatus>

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 80219c8:	69fb      	ldr	r3, [r7, #28]
 80219ca:	009b      	lsls	r3, r3, #2
 80219cc:	69ba      	ldr	r2, [r7, #24]
 80219ce:	4413      	add	r3, r2
 80219d0:	681b      	ldr	r3, [r3, #0]
 80219d2:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 80219d4:	68fb      	ldr	r3, [r7, #12]
 80219d6:	2b00      	cmp	r3, #0
 80219d8:	d003      	beq.n	80219e2 <XMC_DMA_IRQHandler+0x1fe>
        {
          event_handler(XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 80219da:	68fb      	ldr	r3, [r7, #12]
 80219dc:	2008      	movs	r0, #8
 80219de:	4798      	blx	r3
        }

        break;
 80219e0:	e007      	b.n	80219f2 <XMC_DMA_IRQHandler+0x20e>
 80219e2:	e006      	b.n	80219f2 <XMC_DMA_IRQHandler+0x20e>
      }
      ++channel;
 80219e4:	69fb      	ldr	r3, [r7, #28]
 80219e6:	3301      	adds	r3, #1
 80219e8:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
    while (event != 0)
 80219ea:	697b      	ldr	r3, [r7, #20]
 80219ec:	2b00      	cmp	r3, #0
 80219ee:	d1da      	bne.n	80219a6 <XMC_DMA_IRQHandler+0x1c2>
 80219f0:	e7ff      	b.n	80219f2 <XMC_DMA_IRQHandler+0x20e>
  else
  {
    /* no active interrupt was found? */
  }

}
 80219f2:	3720      	adds	r7, #32
 80219f4:	46bd      	mov	sp, r7
 80219f6:	bd80      	pop	{r7, pc}
 80219f8:	50014000 	.word	0x50014000
 80219fc:	1ffe8b10 	.word	0x1ffe8b10
 8021a00:	1ffe8b30 	.word	0x1ffe8b30

08021a04 <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{
 8021a04:	b580      	push	{r7, lr}
 8021a06:	b084      	sub	sp, #16
 8021a08:	af00      	add	r7, sp, #0
 8021a0a:	60f8      	str	r0, [r7, #12]
 8021a0c:	460b      	mov	r3, r1
 8021a0e:	607a      	str	r2, [r7, #4]
 8021a10:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 8021a12:	68f8      	ldr	r0, [r7, #12]
 8021a14:	f7fe fb6e 	bl	80200f4 <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL &
 8021a18:	68fb      	ldr	r3, [r7, #12]
 8021a1a:	681a      	ldr	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8021a1c:	7afb      	ldrb	r3, [r7, #11]
 8021a1e:	009b      	lsls	r3, r3, #2
 8021a20:	4619      	mov	r1, r3
 8021a22:	230f      	movs	r3, #15
 8021a24:	408b      	lsls	r3, r1
 8021a26:	43db      	mvns	r3, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
 8021a28:	401a      	ands	r2, r3
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 8021a2a:	687b      	ldr	r3, [r7, #4]
 8021a2c:	681b      	ldr	r3, [r3, #0]
 8021a2e:	7af9      	ldrb	r1, [r7, #11]
 8021a30:	0089      	lsls	r1, r1, #2
 8021a32:	408b      	lsls	r3, r1
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8021a34:	431a      	orrs	r2, r3
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);

  eru->EXISEL = (eru->EXISEL &
 8021a36:	68fb      	ldr	r3, [r7, #12]
 8021a38:	601a      	str	r2, [r3, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));

  eru->EXICON[channel] = config->raw;
 8021a3a:	7afa      	ldrb	r2, [r7, #11]
 8021a3c:	687b      	ldr	r3, [r7, #4]
 8021a3e:	6859      	ldr	r1, [r3, #4]
 8021a40:	68fb      	ldr	r3, [r7, #12]
 8021a42:	3204      	adds	r2, #4
 8021a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8021a48:	3710      	adds	r7, #16
 8021a4a:	46bd      	mov	sp, r7
 8021a4c:	bd80      	pop	{r7, pc}
 8021a4e:	bf00      	nop

08021a50 <XMC_ERU_OGU_SetServiceRequestMode>:

/* Configures the gating scheme for service request generation by setting (GP) bit. */
void XMC_ERU_OGU_SetServiceRequestMode(XMC_ERU_t *const eru,
                                       const uint8_t channel,
                                       const XMC_ERU_OGU_SERVICE_REQUEST_t mode)
{
 8021a50:	b480      	push	{r7}
 8021a52:	b083      	sub	sp, #12
 8021a54:	af00      	add	r7, sp, #0
 8021a56:	6078      	str	r0, [r7, #4]
 8021a58:	460b      	mov	r3, r1
 8021a5a:	70fb      	strb	r3, [r7, #3]
 8021a5c:	4613      	mov	r3, r2
 8021a5e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Channel Number", (channel < 4U));
  XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Service Request Mode", XMC_ERU_OGU_CHECK_SERIVCE_REQUEST(mode));

  eru->EXOCON_b[channel].GP = (uint8_t)mode;
 8021a60:	78fa      	ldrb	r2, [r7, #3]
 8021a62:	78bb      	ldrb	r3, [r7, #2]
 8021a64:	f003 0303 	and.w	r3, r3, #3
 8021a68:	b2d9      	uxtb	r1, r3
 8021a6a:	687b      	ldr	r3, [r7, #4]
 8021a6c:	3208      	adds	r2, #8
 8021a6e:	f001 0103 	and.w	r1, r1, #3
 8021a72:	0109      	lsls	r1, r1, #4
 8021a74:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8021a78:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 8021a7c:	4301      	orrs	r1, r0
 8021a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8021a82:	370c      	adds	r7, #12
 8021a84:	46bd      	mov	sp, r7
 8021a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a8a:	4770      	bx	lr

08021a8c <XMC_ETH_MAC_Reset>:
 *
 * \par
 * The function resets the ETH MAC peripheral. It blocks until reset.
 */
__STATIC_INLINE void XMC_ETH_MAC_Reset(XMC_ETH_MAC_t *const eth_mac)
{
 8021a8c:	b480      	push	{r7}
 8021a8e:	b083      	sub	sp, #12
 8021a90:	af00      	add	r7, sp, #0
 8021a92:	6078      	str	r0, [r7, #4]
  eth_mac->regs->BUS_MODE |= (uint32_t)ETH_BUS_MODE_SWR_Msk;
 8021a94:	687b      	ldr	r3, [r7, #4]
 8021a96:	681b      	ldr	r3, [r3, #0]
 8021a98:	687a      	ldr	r2, [r7, #4]
 8021a9a:	6812      	ldr	r2, [r2, #0]
 8021a9c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8021aa0:	6812      	ldr	r2, [r2, #0]
 8021aa2:	f042 0201 	orr.w	r2, r2, #1
 8021aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021aaa:	601a      	str	r2, [r3, #0]
  while ((eth_mac->regs->BUS_MODE & (uint32_t)ETH_BUS_MODE_SWR_Msk) != 0U)
 8021aac:	bf00      	nop
 8021aae:	687b      	ldr	r3, [r7, #4]
 8021ab0:	681b      	ldr	r3, [r3, #0]
 8021ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021ab6:	681b      	ldr	r3, [r3, #0]
 8021ab8:	f003 0301 	and.w	r3, r3, #1
 8021abc:	2b00      	cmp	r3, #0
 8021abe:	d1f6      	bne.n	8021aae <XMC_ETH_MAC_Reset+0x22>
  {
  }
}
 8021ac0:	370c      	adds	r7, #12
 8021ac2:	46bd      	mov	sp, r7
 8021ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ac8:	4770      	bx	lr
 8021aca:	bf00      	nop

08021acc <XMC_ETH_MAC_SetAddress>:
 * \par
 * The function sets the MAC address by writing to the MAC_ADDRESS0_HIGH and
 * MAC_ADDRESS0_LOW registers.
 */
__STATIC_INLINE void XMC_ETH_MAC_SetAddress(XMC_ETH_MAC_t *const eth_mac, uint64_t addr)
{
 8021acc:	b4b0      	push	{r4, r5, r7}
 8021ace:	b085      	sub	sp, #20
 8021ad0:	af00      	add	r7, sp, #0
 8021ad2:	60f8      	str	r0, [r7, #12]
 8021ad4:	e9c7 2300 	strd	r2, r3, [r7]
  eth_mac->regs->MAC_ADDRESS0_HIGH = (uint32_t)(addr >> 32);
 8021ad8:	68fb      	ldr	r3, [r7, #12]
 8021ada:	6819      	ldr	r1, [r3, #0]
 8021adc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021ae0:	001c      	movs	r4, r3
 8021ae2:	2500      	movs	r5, #0
 8021ae4:	4623      	mov	r3, r4
 8021ae6:	640b      	str	r3, [r1, #64]	; 0x40
  eth_mac->regs->MAC_ADDRESS0_LOW = (uint32_t)addr;
 8021ae8:	68fb      	ldr	r3, [r7, #12]
 8021aea:	681b      	ldr	r3, [r3, #0]
 8021aec:	683a      	ldr	r2, [r7, #0]
 8021aee:	645a      	str	r2, [r3, #68]	; 0x44
}
 8021af0:	3714      	adds	r7, #20
 8021af2:	46bd      	mov	sp, r7
 8021af4:	bcb0      	pop	{r4, r5, r7}
 8021af6:	4770      	bx	lr

08021af8 <XMC_SCU_CLOCK_GetSystemClockFrequency>:
 * fSYS = fCPU << CPUDIV.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
 8021af8:	b480      	push	{r7}
 8021afa:	af00      	add	r7, sp, #0
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8021afc:	4b06      	ldr	r3, [pc, #24]	; (8021b18 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x20>)
 8021afe:	681a      	ldr	r2, [r3, #0]
 8021b00:	4b06      	ldr	r3, [pc, #24]	; (8021b1c <XMC_SCU_CLOCK_GetSystemClockFrequency+0x24>)
 8021b02:	691b      	ldr	r3, [r3, #16]
 8021b04:	f003 0301 	and.w	r3, r3, #1
 8021b08:	fa02 f303 	lsl.w	r3, r2, r3
}
 8021b0c:	4618      	mov	r0, r3
 8021b0e:	46bd      	mov	sp, r7
 8021b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b14:	4770      	bx	lr
 8021b16:	bf00      	nop
 8021b18:	2003ffc0 	.word	0x2003ffc0
 8021b1c:	50004600 	.word	0x50004600

08021b20 <XMC_SCU_CLOCK_GetEthernetClockFrequency>:
 * fETH = fSYS >> 1;
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetSystemClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetEthernetClockFrequency(void)
{
 8021b20:	b580      	push	{r7, lr}
 8021b22:	af00      	add	r7, sp, #0
  return XMC_SCU_CLOCK_GetSystemClockFrequency() >> 1U;
 8021b24:	f7ff ffe8 	bl	8021af8 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 8021b28:	4603      	mov	r3, r0
 8021b2a:	085b      	lsrs	r3, r3, #1
}
 8021b2c:	4618      	mov	r0, r3
 8021b2e:	bd80      	pop	{r7, pc}

08021b30 <XCM_ETH_MAC_IsNormalEvent>:
 * API IMPLEMENTATION
 *******************************************************************************/

/* Check if the event passed is a normal event */
__STATIC_INLINE bool XCM_ETH_MAC_IsNormalEvent(uint32_t event)
{
 8021b30:	b480      	push	{r7}
 8021b32:	b083      	sub	sp, #12
 8021b34:	af00      	add	r7, sp, #0
 8021b36:	6078      	str	r0, [r7, #4]
  return (bool)((event & ((uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT |
 8021b38:	687a      	ldr	r2, [r7, #4]
 8021b3a:	f244 0345 	movw	r3, #16453	; 0x4045
 8021b3e:	4013      	ands	r3, r2
 8021b40:	2b00      	cmp	r3, #0
 8021b42:	bf14      	ite	ne
 8021b44:	2301      	movne	r3, #1
 8021b46:	2300      	moveq	r3, #0
 8021b48:	b2db      	uxtb	r3, r3
                          (uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_BUFFER_UNAVAILABLE |
                          (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE |
                          (uint32_t)XMC_ETH_MAC_EVENT_EARLY_RECEIVE)) != (uint32_t)0);
}
 8021b4a:	4618      	mov	r0, r3
 8021b4c:	370c      	adds	r7, #12
 8021b4e:	46bd      	mov	sp, r7
 8021b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b54:	4770      	bx	lr
 8021b56:	bf00      	nop

08021b58 <XCM_ETH_MAC_IsAbnormalEvent>:

/* Check if the event passed is an abnormal event */
__STATIC_INLINE bool XCM_ETH_MAC_IsAbnormalEvent(uint32_t event)
{
 8021b58:	b480      	push	{r7}
 8021b5a:	b083      	sub	sp, #12
 8021b5c:	af00      	add	r7, sp, #0
 8021b5e:	6078      	str	r0, [r7, #4]
  return (bool)((event & ((uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_PROCESS_STOPPED |
 8021b60:	687a      	ldr	r2, [r7, #4]
 8021b62:	f242 73ba 	movw	r3, #10170	; 0x27ba
 8021b66:	4013      	ands	r3, r2
 8021b68:	2b00      	cmp	r3, #0
 8021b6a:	bf14      	ite	ne
 8021b6c:	2301      	movne	r3, #1
 8021b6e:	2300      	moveq	r3, #0
 8021b70:	b2db      	uxtb	r3, r3
                          (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_BUFFER_UNAVAILABLE |
                          (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_PROCESS_STOPPED |
                          (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_WATCHDOG_TIMEOUT |
                          (uint32_t)XMC_ETH_MAC_EVENT_EARLY_TRANSMIT |
                          (uint32_t)XMC_ETH_MAC_EVENT_BUS_ERROR)) != (uint32_t)0);
}
 8021b72:	4618      	mov	r0, r3
 8021b74:	370c      	adds	r7, #12
 8021b76:	46bd      	mov	sp, r7
 8021b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b7c:	4770      	bx	lr
 8021b7e:	bf00      	nop

08021b80 <XMC_ETH_MAC_InitEx>:
}

#endif

void XMC_ETH_MAC_InitEx(XMC_ETH_MAC_t *const eth_mac)
{
 8021b80:	b580      	push	{r7, lr}
 8021b82:	b082      	sub	sp, #8
 8021b84:	af00      	add	r7, sp, #0
 8021b86:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_ETH_MAC_InitEx: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  XMC_ETH_MAC_Reset(eth_mac);
 8021b88:	6878      	ldr	r0, [r7, #4]
 8021b8a:	f7ff ff7f 	bl	8021a8c <XMC_ETH_MAC_Reset>

  /* Initialize MAC configuration */
  eth_mac->regs->MAC_CONFIGURATION = (uint32_t)ETH_MAC_CONFIGURATION_IPC_Msk;
 8021b8e:	687b      	ldr	r3, [r7, #4]
 8021b90:	681b      	ldr	r3, [r3, #0]
 8021b92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8021b96:	601a      	str	r2, [r3, #0]

  /* Initialize Filter registers */
  eth_mac->regs->FLOW_CONTROL = ETH_FLOW_CONTROL_DZPQ_Msk; /* Disable Zero Quanta Pause */
 8021b98:	687b      	ldr	r3, [r7, #4]
 8021b9a:	681b      	ldr	r3, [r3, #0]
 8021b9c:	2280      	movs	r2, #128	; 0x80
 8021b9e:	619a      	str	r2, [r3, #24]

  eth_mac->regs->OPERATION_MODE = (uint32_t)ETH_OPERATION_MODE_RSF_Msk |
 8021ba0:	687b      	ldr	r3, [r7, #4]
 8021ba2:	681b      	ldr	r3, [r3, #0]
 8021ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021ba8:	3318      	adds	r3, #24
 8021baa:	4a19      	ldr	r2, [pc, #100]	; (8021c10 <XMC_ETH_MAC_InitEx+0x90>)
 8021bac:	601a      	str	r2, [r3, #0]
                                  (uint32_t)ETH_OPERATION_MODE_TSF_Msk |
                                  (uint32_t)ETH_OPERATION_MODE_OSF_Msk;

  /* Increase enhanced descriptor to 8 WORDS, required when the Advanced Time-Stamp feature or Full IPC Offload Engine is enabled */
  eth_mac->regs->BUS_MODE = (uint32_t)ETH_BUS_MODE_ATDS_Msk |
 8021bae:	687b      	ldr	r3, [r7, #4]
 8021bb0:	681b      	ldr	r3, [r3, #0]
 8021bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021bb6:	4a17      	ldr	r2, [pc, #92]	; (8021c14 <XMC_ETH_MAC_InitEx+0x94>)
 8021bb8:	601a      	str	r2, [r3, #0]
                            (uint32_t)ETH_BUS_MODE_AAL_Msk | /* the AHB interface generates all bursts aligned to the start address LS bits */
                            (uint32_t)ETH_BUS_MODE_FB_Msk | /* DMA attempts to execute fixed-length Burst transfers on the AHB Master interface */
                            (uint32_t)(0x20 << ETH_BUS_MODE_PBL_Pos); /* maximum Burst length */

  /* Initialize DMA Descriptors */
  XMC_ETH_MAC_InitRxDescriptors(eth_mac);
 8021bba:	6878      	ldr	r0, [r7, #4]
 8021bbc:	f000 f846 	bl	8021c4c <XMC_ETH_MAC_InitRxDescriptors>
  XMC_ETH_MAC_InitTxDescriptors(eth_mac);
 8021bc0:	6878      	ldr	r0, [r7, #4]
 8021bc2:	f000 f8a7 	bl	8021d14 <XMC_ETH_MAC_InitTxDescriptors>

  /* Clear interrupts */
  eth_mac->regs->STATUS = 0xFFFFFFFFUL;
 8021bc6:	687b      	ldr	r3, [r7, #4]
 8021bc8:	681b      	ldr	r3, [r3, #0]
 8021bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021bce:	3314      	adds	r3, #20
 8021bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8021bd4:	601a      	str	r2, [r3, #0]

  /* Disable MMC interrupt events */
  eth_mac->regs->MMC_TRANSMIT_INTERRUPT_MASK = ETH_MAC_DISABLE_MMC_INTERRUPT_MSK;
 8021bd6:	687b      	ldr	r3, [r7, #4]
 8021bd8:	681b      	ldr	r3, [r3, #0]
 8021bda:	f06f 427c 	mvn.w	r2, #4227858432	; 0xfc000000
 8021bde:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  eth_mac->regs->MMC_RECEIVE_INTERRUPT_MASK = ETH_MAC_DISABLE_MMC_INTERRUPT_MSK;
 8021be2:	687b      	ldr	r3, [r7, #4]
 8021be4:	681b      	ldr	r3, [r3, #0]
 8021be6:	f06f 427c 	mvn.w	r2, #4227858432	; 0xfc000000
 8021bea:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  eth_mac->regs->MMC_IPC_RECEIVE_INTERRUPT_MASK = ETH_MAC_DISABLE_MMC_IPC_RECEIVE_INTERRUPT_MSK;
 8021bee:	687b      	ldr	r3, [r7, #4]
 8021bf0:	681b      	ldr	r3, [r3, #0]
 8021bf2:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 8021bf6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  /* Disable PMT and timestamp interrupt events */
  eth_mac->regs->INTERRUPT_MASK = ETH_INTERRUPT_MASK_PMTIM_Msk | ETH_INTERRUPT_MASK_TSIM_Msk;
 8021bfa:	687b      	ldr	r3, [r7, #4]
 8021bfc:	681b      	ldr	r3, [r3, #0]
 8021bfe:	f44f 7202 	mov.w	r2, #520	; 0x208
 8021c02:	63da      	str	r2, [r3, #60]	; 0x3c

  eth_mac->frame_end = NULL;
 8021c04:	687b      	ldr	r3, [r7, #4]
 8021c06:	2200      	movs	r2, #0
 8021c08:	621a      	str	r2, [r3, #32]
}
 8021c0a:	3708      	adds	r7, #8
 8021c0c:	46bd      	mov	sp, r7
 8021c0e:	bd80      	pop	{r7, pc}
 8021c10:	02200004 	.word	0x02200004
 8021c14:	02012080 	.word	0x02012080

08021c18 <XMC_ETH_MAC_Init>:

/* ETH MAC initialize */
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_Init(XMC_ETH_MAC_t *const eth_mac)
{
 8021c18:	b580      	push	{r7, lr}
 8021c1a:	b084      	sub	sp, #16
 8021c1c:	af00      	add	r7, sp, #0
 8021c1e:	6078      	str	r0, [r7, #4]
  XMC_ETH_MAC_STATUS_t status;

  XMC_ASSERT("XMC_ETH_MAC_Init: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  XMC_ETH_MAC_Enable(eth_mac);
 8021c20:	6878      	ldr	r0, [r7, #4]
 8021c22:	f000 f95b 	bl	8021edc <XMC_ETH_MAC_Enable>
  status = XMC_ETH_MAC_SetManagmentClockDivider(eth_mac);
 8021c26:	6878      	ldr	r0, [r7, #4]
 8021c28:	f000 f908 	bl	8021e3c <XMC_ETH_MAC_SetManagmentClockDivider>
 8021c2c:	4603      	mov	r3, r0
 8021c2e:	73fb      	strb	r3, [r7, #15]

  XMC_ETH_MAC_InitEx(eth_mac);
 8021c30:	6878      	ldr	r0, [r7, #4]
 8021c32:	f7ff ffa5 	bl	8021b80 <XMC_ETH_MAC_InitEx>

  XMC_ETH_MAC_SetAddress(eth_mac, eth_mac->address);
 8021c36:	687b      	ldr	r3, [r7, #4]
 8021c38:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8021c3c:	6878      	ldr	r0, [r7, #4]
 8021c3e:	f7ff ff45 	bl	8021acc <XMC_ETH_MAC_SetAddress>

  return status;
 8021c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8021c44:	4618      	mov	r0, r3
 8021c46:	3710      	adds	r7, #16
 8021c48:	46bd      	mov	sp, r7
 8021c4a:	bd80      	pop	{r7, pc}

08021c4c <XMC_ETH_MAC_InitRxDescriptors>:

/* Initialize RX descriptors */
void XMC_ETH_MAC_InitRxDescriptors(XMC_ETH_MAC_t *const eth_mac)
{
 8021c4c:	b480      	push	{r7}
 8021c4e:	b085      	sub	sp, #20
 8021c50:	af00      	add	r7, sp, #0
 8021c52:	6078      	str	r0, [r7, #4]

  /*
   * Chained structure (ETH_MAC_DMA_RDES1_RCH), second address in the descriptor
   * (buffer2) is the next descriptor address
   */
  for (i = 0U; i < eth_mac->num_rx_buf; ++i)
 8021c54:	2300      	movs	r3, #0
 8021c56:	60fb      	str	r3, [r7, #12]
 8021c58:	e043      	b.n	8021ce2 <XMC_ETH_MAC_InitRxDescriptors+0x96>
  {
    eth_mac->rx_desc[i].status = (uint32_t)ETH_MAC_DMA_RDES0_OWN;
 8021c5a:	687b      	ldr	r3, [r7, #4]
 8021c5c:	691a      	ldr	r2, [r3, #16]
 8021c5e:	68fb      	ldr	r3, [r7, #12]
 8021c60:	015b      	lsls	r3, r3, #5
 8021c62:	4413      	add	r3, r2
 8021c64:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8021c68:	601a      	str	r2, [r3, #0]
    eth_mac->rx_desc[i].length = (uint32_t)ETH_MAC_DMA_RDES1_RCH | (uint32_t)XMC_ETH_MAC_BUF_SIZE;
 8021c6a:	687b      	ldr	r3, [r7, #4]
 8021c6c:	691a      	ldr	r2, [r3, #16]
 8021c6e:	68fb      	ldr	r3, [r7, #12]
 8021c70:	015b      	lsls	r3, r3, #5
 8021c72:	4413      	add	r3, r2
 8021c74:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8021c78:	605a      	str	r2, [r3, #4]

    if (eth_mac->rx_buf != NULL)
 8021c7a:	687b      	ldr	r3, [r7, #4]
 8021c7c:	699b      	ldr	r3, [r3, #24]
 8021c7e:	2b00      	cmp	r3, #0
 8021c80:	d00e      	beq.n	8021ca0 <XMC_ETH_MAC_InitRxDescriptors+0x54>
    {
      eth_mac->rx_desc[i].buffer1 = (uint32_t) & (eth_mac->rx_buf[i * XMC_ETH_MAC_BUF_SIZE]);
 8021c82:	687b      	ldr	r3, [r7, #4]
 8021c84:	691a      	ldr	r2, [r3, #16]
 8021c86:	68fb      	ldr	r3, [r7, #12]
 8021c88:	015b      	lsls	r3, r3, #5
 8021c8a:	4413      	add	r3, r2
 8021c8c:	687a      	ldr	r2, [r7, #4]
 8021c8e:	6991      	ldr	r1, [r2, #24]
 8021c90:	68fa      	ldr	r2, [r7, #12]
 8021c92:	f240 50f4 	movw	r0, #1524	; 0x5f4
 8021c96:	fb00 f202 	mul.w	r2, r0, r2
 8021c9a:	440a      	add	r2, r1
 8021c9c:	609a      	str	r2, [r3, #8]
 8021c9e:	e006      	b.n	8021cae <XMC_ETH_MAC_InitRxDescriptors+0x62>
    }
    else
    {
      eth_mac->rx_desc[i].buffer1 = 0;
 8021ca0:	687b      	ldr	r3, [r7, #4]
 8021ca2:	691a      	ldr	r2, [r3, #16]
 8021ca4:	68fb      	ldr	r3, [r7, #12]
 8021ca6:	015b      	lsls	r3, r3, #5
 8021ca8:	4413      	add	r3, r2
 8021caa:	2200      	movs	r2, #0
 8021cac:	609a      	str	r2, [r3, #8]
    }

    next = i + 1U;
 8021cae:	68fb      	ldr	r3, [r7, #12]
 8021cb0:	3301      	adds	r3, #1
 8021cb2:	60bb      	str	r3, [r7, #8]
    if (next == eth_mac->num_rx_buf)
 8021cb4:	687b      	ldr	r3, [r7, #4]
 8021cb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8021cba:	461a      	mov	r2, r3
 8021cbc:	68bb      	ldr	r3, [r7, #8]
 8021cbe:	429a      	cmp	r2, r3
 8021cc0:	d101      	bne.n	8021cc6 <XMC_ETH_MAC_InitRxDescriptors+0x7a>
    {
      next = 0U;
 8021cc2:	2300      	movs	r3, #0
 8021cc4:	60bb      	str	r3, [r7, #8]
    }
    eth_mac->rx_desc[i].buffer2 = (uint32_t) & (eth_mac->rx_desc[next]);
 8021cc6:	687b      	ldr	r3, [r7, #4]
 8021cc8:	691a      	ldr	r2, [r3, #16]
 8021cca:	68fb      	ldr	r3, [r7, #12]
 8021ccc:	015b      	lsls	r3, r3, #5
 8021cce:	4413      	add	r3, r2
 8021cd0:	687a      	ldr	r2, [r7, #4]
 8021cd2:	6911      	ldr	r1, [r2, #16]
 8021cd4:	68ba      	ldr	r2, [r7, #8]
 8021cd6:	0152      	lsls	r2, r2, #5
 8021cd8:	440a      	add	r2, r1
 8021cda:	60da      	str	r2, [r3, #12]

  /*
   * Chained structure (ETH_MAC_DMA_RDES1_RCH), second address in the descriptor
   * (buffer2) is the next descriptor address
   */
  for (i = 0U; i < eth_mac->num_rx_buf; ++i)
 8021cdc:	68fb      	ldr	r3, [r7, #12]
 8021cde:	3301      	adds	r3, #1
 8021ce0:	60fb      	str	r3, [r7, #12]
 8021ce2:	687b      	ldr	r3, [r7, #4]
 8021ce4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8021ce8:	461a      	mov	r2, r3
 8021cea:	68fb      	ldr	r3, [r7, #12]
 8021cec:	429a      	cmp	r2, r3
 8021cee:	d8b4      	bhi.n	8021c5a <XMC_ETH_MAC_InitRxDescriptors+0xe>
    {
      next = 0U;
    }
    eth_mac->rx_desc[i].buffer2 = (uint32_t) & (eth_mac->rx_desc[next]);
  }
  eth_mac->regs->RECEIVE_DESCRIPTOR_LIST_ADDRESS = (uint32_t) & (eth_mac->rx_desc[0]);
 8021cf0:	687b      	ldr	r3, [r7, #4]
 8021cf2:	681b      	ldr	r3, [r3, #0]
 8021cf4:	687a      	ldr	r2, [r7, #4]
 8021cf6:	6912      	ldr	r2, [r2, #16]
 8021cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021cfc:	330c      	adds	r3, #12
 8021cfe:	601a      	str	r2, [r3, #0]
  eth_mac->rx_index = 0U;
 8021d00:	687b      	ldr	r3, [r7, #4]
 8021d02:	2200      	movs	r2, #0
 8021d04:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8021d08:	3714      	adds	r7, #20
 8021d0a:	46bd      	mov	sp, r7
 8021d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d10:	4770      	bx	lr
 8021d12:	bf00      	nop

08021d14 <XMC_ETH_MAC_InitTxDescriptors>:

/* Initialize TX descriptors */
void XMC_ETH_MAC_InitTxDescriptors(XMC_ETH_MAC_t *const eth_mac)
{
 8021d14:	b480      	push	{r7}
 8021d16:	b085      	sub	sp, #20
 8021d18:	af00      	add	r7, sp, #0
 8021d1a:	6078      	str	r0, [r7, #4]
  uint32_t next;

  XMC_ASSERT("XMC_ETH_MAC_InitTxDescriptors: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  /* Chained structure (ETH_MAC_DMA_TDES0_TCH), second address in the descriptor (buffer2) is the next descriptor address */
  for (i = 0U; i < eth_mac->num_tx_buf; ++i)
 8021d1c:	2300      	movs	r3, #0
 8021d1e:	60fb      	str	r3, [r7, #12]
 8021d20:	e03a      	b.n	8021d98 <XMC_ETH_MAC_InitTxDescriptors+0x84>
  {
    eth_mac->tx_desc[i].status = ETH_MAC_DMA_TDES0_TCH | ETH_MAC_DMA_TDES0_LS | ETH_MAC_DMA_TDES0_FS | ETH_MAC_DMA_TDES0_IC;
 8021d22:	687b      	ldr	r3, [r7, #4]
 8021d24:	695a      	ldr	r2, [r3, #20]
 8021d26:	68fb      	ldr	r3, [r7, #12]
 8021d28:	015b      	lsls	r3, r3, #5
 8021d2a:	4413      	add	r3, r2
 8021d2c:	4a26      	ldr	r2, [pc, #152]	; (8021dc8 <XMC_ETH_MAC_InitTxDescriptors+0xb4>)
 8021d2e:	601a      	str	r2, [r3, #0]

    if (eth_mac->tx_buf != NULL)
 8021d30:	687b      	ldr	r3, [r7, #4]
 8021d32:	69db      	ldr	r3, [r3, #28]
 8021d34:	2b00      	cmp	r3, #0
 8021d36:	d00e      	beq.n	8021d56 <XMC_ETH_MAC_InitTxDescriptors+0x42>
    {
      eth_mac->tx_desc[i].buffer1 = (uint32_t) & (eth_mac->tx_buf[i * XMC_ETH_MAC_BUF_SIZE]);
 8021d38:	687b      	ldr	r3, [r7, #4]
 8021d3a:	695a      	ldr	r2, [r3, #20]
 8021d3c:	68fb      	ldr	r3, [r7, #12]
 8021d3e:	015b      	lsls	r3, r3, #5
 8021d40:	4413      	add	r3, r2
 8021d42:	687a      	ldr	r2, [r7, #4]
 8021d44:	69d1      	ldr	r1, [r2, #28]
 8021d46:	68fa      	ldr	r2, [r7, #12]
 8021d48:	f240 50f4 	movw	r0, #1524	; 0x5f4
 8021d4c:	fb00 f202 	mul.w	r2, r0, r2
 8021d50:	440a      	add	r2, r1
 8021d52:	609a      	str	r2, [r3, #8]
 8021d54:	e006      	b.n	8021d64 <XMC_ETH_MAC_InitTxDescriptors+0x50>
    }
    else
    {
      eth_mac->tx_desc[i].buffer1 = 0;
 8021d56:	687b      	ldr	r3, [r7, #4]
 8021d58:	695a      	ldr	r2, [r3, #20]
 8021d5a:	68fb      	ldr	r3, [r7, #12]
 8021d5c:	015b      	lsls	r3, r3, #5
 8021d5e:	4413      	add	r3, r2
 8021d60:	2200      	movs	r2, #0
 8021d62:	609a      	str	r2, [r3, #8]
    }

    next = i + 1U;
 8021d64:	68fb      	ldr	r3, [r7, #12]
 8021d66:	3301      	adds	r3, #1
 8021d68:	60bb      	str	r3, [r7, #8]
    if (next == eth_mac->num_tx_buf)
 8021d6a:	687b      	ldr	r3, [r7, #4]
 8021d6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8021d70:	461a      	mov	r2, r3
 8021d72:	68bb      	ldr	r3, [r7, #8]
 8021d74:	429a      	cmp	r2, r3
 8021d76:	d101      	bne.n	8021d7c <XMC_ETH_MAC_InitTxDescriptors+0x68>
    {
      next = 0U;
 8021d78:	2300      	movs	r3, #0
 8021d7a:	60bb      	str	r3, [r7, #8]
    }
    eth_mac->tx_desc[i].buffer2 = (uint32_t) & (eth_mac->tx_desc[next]);
 8021d7c:	687b      	ldr	r3, [r7, #4]
 8021d7e:	695a      	ldr	r2, [r3, #20]
 8021d80:	68fb      	ldr	r3, [r7, #12]
 8021d82:	015b      	lsls	r3, r3, #5
 8021d84:	4413      	add	r3, r2
 8021d86:	687a      	ldr	r2, [r7, #4]
 8021d88:	6951      	ldr	r1, [r2, #20]
 8021d8a:	68ba      	ldr	r2, [r7, #8]
 8021d8c:	0152      	lsls	r2, r2, #5
 8021d8e:	440a      	add	r2, r1
 8021d90:	60da      	str	r2, [r3, #12]
  uint32_t next;

  XMC_ASSERT("XMC_ETH_MAC_InitTxDescriptors: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  /* Chained structure (ETH_MAC_DMA_TDES0_TCH), second address in the descriptor (buffer2) is the next descriptor address */
  for (i = 0U; i < eth_mac->num_tx_buf; ++i)
 8021d92:	68fb      	ldr	r3, [r7, #12]
 8021d94:	3301      	adds	r3, #1
 8021d96:	60fb      	str	r3, [r7, #12]
 8021d98:	687b      	ldr	r3, [r7, #4]
 8021d9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8021d9e:	461a      	mov	r2, r3
 8021da0:	68fb      	ldr	r3, [r7, #12]
 8021da2:	429a      	cmp	r2, r3
 8021da4:	d8bd      	bhi.n	8021d22 <XMC_ETH_MAC_InitTxDescriptors+0xe>
    {
      next = 0U;
    }
    eth_mac->tx_desc[i].buffer2 = (uint32_t) & (eth_mac->tx_desc[next]);
  }
  eth_mac->regs->TRANSMIT_DESCRIPTOR_LIST_ADDRESS = (uint32_t) & (eth_mac->tx_desc[0]);
 8021da6:	687b      	ldr	r3, [r7, #4]
 8021da8:	681b      	ldr	r3, [r3, #0]
 8021daa:	687a      	ldr	r2, [r7, #4]
 8021dac:	6952      	ldr	r2, [r2, #20]
 8021dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021db2:	3310      	adds	r3, #16
 8021db4:	601a      	str	r2, [r3, #0]
  eth_mac->tx_index = 0U;
 8021db6:	687b      	ldr	r3, [r7, #4]
 8021db8:	2200      	movs	r2, #0
 8021dba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8021dbe:	3714      	adds	r7, #20
 8021dc0:	46bd      	mov	sp, r7
 8021dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dc6:	4770      	bx	lr
 8021dc8:	70100000 	.word	0x70100000

08021dcc <XMC_ETH_MAC_GetRxFrameSize>:
  return (len);
}

/* Get RX frame size */
uint32_t XMC_ETH_MAC_GetRxFrameSize(XMC_ETH_MAC_t *const eth_mac)
{
 8021dcc:	b480      	push	{r7}
 8021dce:	b085      	sub	sp, #20
 8021dd0:	af00      	add	r7, sp, #0
 8021dd2:	6078      	str	r0, [r7, #4]
  uint32_t status;
  uint32_t len = 0U;
 8021dd4:	2300      	movs	r3, #0
 8021dd6:	60fb      	str	r3, [r7, #12]

  status = eth_mac->rx_desc[eth_mac->rx_index].status;
 8021dd8:	687b      	ldr	r3, [r7, #4]
 8021dda:	691a      	ldr	r2, [r3, #16]
 8021ddc:	687b      	ldr	r3, [r7, #4]
 8021dde:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8021de2:	015b      	lsls	r3, r3, #5
 8021de4:	4413      	add	r3, r2
 8021de6:	681b      	ldr	r3, [r3, #0]
 8021de8:	60bb      	str	r3, [r7, #8]

  if (status & ETH_MAC_DMA_RDES0_OWN)
 8021dea:	68bb      	ldr	r3, [r7, #8]
 8021dec:	2b00      	cmp	r3, #0
 8021dee:	da02      	bge.n	8021df6 <XMC_ETH_MAC_GetRxFrameSize+0x2a>
  {
    /* Owned by DMA */
    len = 0U;
 8021df0:	2300      	movs	r3, #0
 8021df2:	60fb      	str	r3, [r7, #12]
 8021df4:	e018      	b.n	8021e28 <XMC_ETH_MAC_GetRxFrameSize+0x5c>
  }
  else if (((status & ETH_MAC_DMA_RDES0_ES) != 0U) ||
 8021df6:	68bb      	ldr	r3, [r7, #8]
 8021df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8021dfc:	2b00      	cmp	r3, #0
 8021dfe:	d109      	bne.n	8021e14 <XMC_ETH_MAC_GetRxFrameSize+0x48>
           ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
 8021e00:	68bb      	ldr	r3, [r7, #8]
 8021e02:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if (status & ETH_MAC_DMA_RDES0_OWN)
  {
    /* Owned by DMA */
    len = 0U;
  }
  else if (((status & ETH_MAC_DMA_RDES0_ES) != 0U) ||
 8021e06:	2b00      	cmp	r3, #0
 8021e08:	d004      	beq.n	8021e14 <XMC_ETH_MAC_GetRxFrameSize+0x48>
           ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
           ((status & ETH_MAC_DMA_RDES0_LS) == 0U))
 8021e0a:	68bb      	ldr	r3, [r7, #8]
 8021e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  {
    /* Owned by DMA */
    len = 0U;
  }
  else if (((status & ETH_MAC_DMA_RDES0_ES) != 0U) ||
           ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
 8021e10:	2b00      	cmp	r3, #0
 8021e12:	d103      	bne.n	8021e1c <XMC_ETH_MAC_GetRxFrameSize+0x50>
           ((status & ETH_MAC_DMA_RDES0_LS) == 0U))
  {
    /* Error, this block is invalid */
    len = 0xFFFFFFFFU;
 8021e14:	f04f 33ff 	mov.w	r3, #4294967295
 8021e18:	60fb      	str	r3, [r7, #12]
 8021e1a:	e005      	b.n	8021e28 <XMC_ETH_MAC_GetRxFrameSize+0x5c>
  }
  else
  {
    /* Subtract CRC */
    len = ((status & ETH_MAC_DMA_RDES0_FL) >> 16U) - 4U;
 8021e1c:	68ba      	ldr	r2, [r7, #8]
 8021e1e:	4b06      	ldr	r3, [pc, #24]	; (8021e38 <XMC_ETH_MAC_GetRxFrameSize+0x6c>)
 8021e20:	4013      	ands	r3, r2
 8021e22:	0c1b      	lsrs	r3, r3, #16
 8021e24:	3b04      	subs	r3, #4
 8021e26:	60fb      	str	r3, [r7, #12]
  }

  return len;
 8021e28:	68fb      	ldr	r3, [r7, #12]
}
 8021e2a:	4618      	mov	r0, r3
 8021e2c:	3714      	adds	r7, #20
 8021e2e:	46bd      	mov	sp, r7
 8021e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e34:	4770      	bx	lr
 8021e36:	bf00      	nop
 8021e38:	3fff0000 	.word	0x3fff0000

08021e3c <XMC_ETH_MAC_SetManagmentClockDivider>:

/* Set management clock divider */
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_SetManagmentClockDivider(XMC_ETH_MAC_t *const eth_mac)
{
 8021e3c:	b580      	push	{r7, lr}
 8021e3e:	b086      	sub	sp, #24
 8021e40:	af00      	add	r7, sp, #0
 8021e42:	6078      	str	r0, [r7, #4]
  uint32_t eth_mac_clk;
  XMC_ETH_MAC_STATUS_t status;
  __IO uint32_t *reg;

  eth_mac_clk = XMC_SCU_CLOCK_GetEthernetClockFrequency();
 8021e44:	f7ff fe6c 	bl	8021b20 <XMC_SCU_CLOCK_GetEthernetClockFrequency>
 8021e48:	6138      	str	r0, [r7, #16]
  status = XMC_ETH_MAC_STATUS_OK;
 8021e4a:	2300      	movs	r3, #0
 8021e4c:	75fb      	strb	r3, [r7, #23]

  reg = &(eth_mac->regs->GMII_ADDRESS);
 8021e4e:	687b      	ldr	r3, [r7, #4]
 8021e50:	681b      	ldr	r3, [r3, #0]
 8021e52:	3310      	adds	r3, #16
 8021e54:	60fb      	str	r3, [r7, #12]
  if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_35MHZ)
 8021e56:	693b      	ldr	r3, [r7, #16]
 8021e58:	4a1a      	ldr	r2, [pc, #104]	; (8021ec4 <XMC_ETH_MAC_SetManagmentClockDivider+0x88>)
 8021e5a:	4293      	cmp	r3, r2
 8021e5c:	d803      	bhi.n	8021e66 <XMC_ETH_MAC_SetManagmentClockDivider+0x2a>
  {
    *reg = XMC_ETH_MAC_MDC_DIVIDER_16;
 8021e5e:	68fb      	ldr	r3, [r7, #12]
 8021e60:	2208      	movs	r2, #8
 8021e62:	601a      	str	r2, [r3, #0]
 8021e64:	e029      	b.n	8021eba <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_60MHZ)
 8021e66:	693b      	ldr	r3, [r7, #16]
 8021e68:	4a17      	ldr	r2, [pc, #92]	; (8021ec8 <XMC_ETH_MAC_SetManagmentClockDivider+0x8c>)
 8021e6a:	4293      	cmp	r3, r2
 8021e6c:	d803      	bhi.n	8021e76 <XMC_ETH_MAC_SetManagmentClockDivider+0x3a>
  {
    *reg = XMC_ETH_MAC_MDC_DIVIDER_26;
 8021e6e:	68fb      	ldr	r3, [r7, #12]
 8021e70:	220c      	movs	r2, #12
 8021e72:	601a      	str	r2, [r3, #0]
 8021e74:	e021      	b.n	8021eba <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_100MHZ)
 8021e76:	693b      	ldr	r3, [r7, #16]
 8021e78:	4a14      	ldr	r2, [pc, #80]	; (8021ecc <XMC_ETH_MAC_SetManagmentClockDivider+0x90>)
 8021e7a:	4293      	cmp	r3, r2
 8021e7c:	d803      	bhi.n	8021e86 <XMC_ETH_MAC_SetManagmentClockDivider+0x4a>
  {
    *reg = XMC_ETH_MAC_MDC_DIVIDER_42;
 8021e7e:	68fb      	ldr	r3, [r7, #12]
 8021e80:	2200      	movs	r2, #0
 8021e82:	601a      	str	r2, [r3, #0]
 8021e84:	e019      	b.n	8021eba <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_150MHZ)
 8021e86:	693b      	ldr	r3, [r7, #16]
 8021e88:	4a11      	ldr	r2, [pc, #68]	; (8021ed0 <XMC_ETH_MAC_SetManagmentClockDivider+0x94>)
 8021e8a:	4293      	cmp	r3, r2
 8021e8c:	d803      	bhi.n	8021e96 <XMC_ETH_MAC_SetManagmentClockDivider+0x5a>
  {
    *reg = XMC_ETH_MAC_MDC_DIVIDER_62;
 8021e8e:	68fb      	ldr	r3, [r7, #12]
 8021e90:	2204      	movs	r2, #4
 8021e92:	601a      	str	r2, [r3, #0]
 8021e94:	e011      	b.n	8021eba <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_200MHZ)
 8021e96:	693b      	ldr	r3, [r7, #16]
 8021e98:	4a0e      	ldr	r2, [pc, #56]	; (8021ed4 <XMC_ETH_MAC_SetManagmentClockDivider+0x98>)
 8021e9a:	4293      	cmp	r3, r2
 8021e9c:	d803      	bhi.n	8021ea6 <XMC_ETH_MAC_SetManagmentClockDivider+0x6a>
  {
    *reg = XMC_ETH_MAC_MDC_DIVIDER_102;
 8021e9e:	68fb      	ldr	r3, [r7, #12]
 8021ea0:	2210      	movs	r2, #16
 8021ea2:	601a      	str	r2, [r3, #0]
 8021ea4:	e009      	b.n	8021eba <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_250MHZ)
 8021ea6:	693b      	ldr	r3, [r7, #16]
 8021ea8:	4a0b      	ldr	r2, [pc, #44]	; (8021ed8 <XMC_ETH_MAC_SetManagmentClockDivider+0x9c>)
 8021eaa:	4293      	cmp	r3, r2
 8021eac:	d803      	bhi.n	8021eb6 <XMC_ETH_MAC_SetManagmentClockDivider+0x7a>
  {
    *reg = XMC_ETH_MAC_MDC_DIVIDER_124;
 8021eae:	68fb      	ldr	r3, [r7, #12]
 8021eb0:	2214      	movs	r2, #20
 8021eb2:	601a      	str	r2, [r3, #0]
 8021eb4:	e001      	b.n	8021eba <XMC_ETH_MAC_SetManagmentClockDivider+0x7e>
  }
  else
  {
    status = XMC_ETH_MAC_STATUS_ERROR;
 8021eb6:	2302      	movs	r3, #2
 8021eb8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8021eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8021ebc:	4618      	mov	r0, r3
 8021ebe:	3718      	adds	r7, #24
 8021ec0:	46bd      	mov	sp, r7
 8021ec2:	bd80      	pop	{r7, pc}
 8021ec4:	02160ec0 	.word	0x02160ec0
 8021ec8:	03938700 	.word	0x03938700
 8021ecc:	05f5e100 	.word	0x05f5e100
 8021ed0:	08f0d180 	.word	0x08f0d180
 8021ed4:	0bebc200 	.word	0x0bebc200
 8021ed8:	0ee6b280 	.word	0x0ee6b280

08021edc <XMC_ETH_MAC_Enable>:

/* ETH MAC enable */
void XMC_ETH_MAC_Enable(XMC_ETH_MAC_t *const eth_mac)
{
 8021edc:	b580      	push	{r7, lr}
 8021ede:	b082      	sub	sp, #8
 8021ee0:	af00      	add	r7, sp, #0
 8021ee2:	6078      	str	r0, [r7, #4]
  XMC_UNUSED_ARG(eth_mac);

  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_ETH);
 8021ee4:	2004      	movs	r0, #4
 8021ee6:	f7fe fceb 	bl	80208c0 <XMC_SCU_CLOCK_EnableClock>
#if UC_DEVICE != XMC4500
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ETH0);
 8021eea:	4804      	ldr	r0, [pc, #16]	; (8021efc <XMC_ETH_MAC_Enable+0x20>)
 8021eec:	f7fe fcf8 	bl	80208e0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ETH0);
 8021ef0:	4802      	ldr	r0, [pc, #8]	; (8021efc <XMC_ETH_MAC_Enable+0x20>)
 8021ef2:	f7fe fb71 	bl	80205d8 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8021ef6:	3708      	adds	r7, #8
 8021ef8:	46bd      	mov	sp, r7
 8021efa:	bd80      	pop	{r7, pc}
 8021efc:	20000004 	.word	0x20000004

08021f00 <XMC_ETH_MAC_ReadPhy>:
  XMC_SCU_CLOCK_DisableClock(XMC_SCU_CLOCK_ETH);
}

/* Read physical layer and obtain status */
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_ReadPhy(XMC_ETH_MAC_t *eth_mac, uint8_t phy_addr, uint8_t reg_addr, uint16_t *data)
{
 8021f00:	b480      	push	{r7}
 8021f02:	b087      	sub	sp, #28
 8021f04:	af00      	add	r7, sp, #0
 8021f06:	60f8      	str	r0, [r7, #12]
 8021f08:	607b      	str	r3, [r7, #4]
 8021f0a:	460b      	mov	r3, r1
 8021f0c:	72fb      	strb	r3, [r7, #11]
 8021f0e:	4613      	mov	r3, r2
 8021f10:	72bb      	strb	r3, [r7, #10]
  uint32_t retries;

  XMC_ASSERT("XMC_ETH_MAC_PhyRead: Parameter error", data != NULL);

  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 8021f12:	68fb      	ldr	r3, [r7, #12]
 8021f14:	681b      	ldr	r3, [r3, #0]
 8021f16:	68fa      	ldr	r2, [r7, #12]
 8021f18:	6812      	ldr	r2, [r2, #0]
 8021f1a:	6912      	ldr	r2, [r2, #16]
 8021f1c:	f002 013c 	and.w	r1, r2, #60	; 0x3c
                                (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
                                (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
 8021f20:	7afa      	ldrb	r2, [r7, #11]
 8021f22:	02d2      	lsls	r2, r2, #11
  uint32_t retries;

  XMC_ASSERT("XMC_ETH_MAC_PhyRead: Parameter error", data != NULL);

  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
                                (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
 8021f24:	4311      	orrs	r1, r2
                                (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
                                (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos));
 8021f26:	7aba      	ldrb	r2, [r7, #10]
 8021f28:	0192      	lsls	r2, r2, #6
{
  uint32_t retries;

  XMC_ASSERT("XMC_ETH_MAC_PhyRead: Parameter error", data != NULL);

  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 8021f2a:	430a      	orrs	r2, r1
 8021f2c:	f042 0201 	orr.w	r2, r2, #1
 8021f30:	611a      	str	r2, [r3, #16]
                                (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
                                (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
                                (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos));

  /* Poll busy bit during max PHY_TIMEOUT time */
  retries = 0U;
 8021f32:	2300      	movs	r3, #0
 8021f34:	617b      	str	r3, [r7, #20]
  do
  {
    if ((eth_mac->regs->GMII_ADDRESS & ETH_GMII_ADDRESS_MB_Msk) == 0U)
 8021f36:	68fb      	ldr	r3, [r7, #12]
 8021f38:	681b      	ldr	r3, [r3, #0]
 8021f3a:	691b      	ldr	r3, [r3, #16]
 8021f3c:	f003 0301 	and.w	r3, r3, #1
 8021f40:	2b00      	cmp	r3, #0
 8021f42:	d107      	bne.n	8021f54 <XMC_ETH_MAC_ReadPhy+0x54>
    {
      *data = (uint16_t)(eth_mac->regs->GMII_DATA & ETH_GMII_DATA_MD_Msk);
 8021f44:	68fb      	ldr	r3, [r7, #12]
 8021f46:	681b      	ldr	r3, [r3, #0]
 8021f48:	695b      	ldr	r3, [r3, #20]
 8021f4a:	b29a      	uxth	r2, r3
 8021f4c:	687b      	ldr	r3, [r7, #4]
 8021f4e:	801a      	strh	r2, [r3, #0]
      return XMC_ETH_MAC_STATUS_OK;
 8021f50:	2300      	movs	r3, #0
 8021f52:	e008      	b.n	8021f66 <XMC_ETH_MAC_ReadPhy+0x66>
    }
    ++retries;
 8021f54:	697b      	ldr	r3, [r7, #20]
 8021f56:	3301      	adds	r3, #1
 8021f58:	617b      	str	r3, [r7, #20]
  }
  while (retries < XMC_ETH_MAC_PHY_MAX_RETRIES);
 8021f5a:	697b      	ldr	r3, [r7, #20]
 8021f5c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021f60:	4293      	cmp	r3, r2
 8021f62:	d9e8      	bls.n	8021f36 <XMC_ETH_MAC_ReadPhy+0x36>

  return XMC_ETH_MAC_STATUS_ERROR;
 8021f64:	2302      	movs	r3, #2
}
 8021f66:	4618      	mov	r0, r3
 8021f68:	371c      	adds	r7, #28
 8021f6a:	46bd      	mov	sp, r7
 8021f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f70:	4770      	bx	lr
 8021f72:	bf00      	nop

08021f74 <XMC_ETH_MAC_WritePhy>:

/* Write physical layer and return status */
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_WritePhy(XMC_ETH_MAC_t *eth_mac, uint8_t phy_addr, uint8_t reg_addr, uint16_t data)
{
 8021f74:	b480      	push	{r7}
 8021f76:	b085      	sub	sp, #20
 8021f78:	af00      	add	r7, sp, #0
 8021f7a:	6078      	str	r0, [r7, #4]
 8021f7c:	4608      	mov	r0, r1
 8021f7e:	4611      	mov	r1, r2
 8021f80:	461a      	mov	r2, r3
 8021f82:	4603      	mov	r3, r0
 8021f84:	70fb      	strb	r3, [r7, #3]
 8021f86:	460b      	mov	r3, r1
 8021f88:	70bb      	strb	r3, [r7, #2]
 8021f8a:	4613      	mov	r3, r2
 8021f8c:	803b      	strh	r3, [r7, #0]
  uint32_t retries;

  eth_mac->regs->GMII_DATA  = data;
 8021f8e:	687b      	ldr	r3, [r7, #4]
 8021f90:	681b      	ldr	r3, [r3, #0]
 8021f92:	883a      	ldrh	r2, [r7, #0]
 8021f94:	615a      	str	r2, [r3, #20]
  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 8021f96:	687b      	ldr	r3, [r7, #4]
 8021f98:	681b      	ldr	r3, [r3, #0]
 8021f9a:	687a      	ldr	r2, [r7, #4]
 8021f9c:	6812      	ldr	r2, [r2, #0]
 8021f9e:	6912      	ldr	r2, [r2, #16]
 8021fa0:	f002 013c 	and.w	r1, r2, #60	; 0x3c
                                (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
                                (uint32_t)ETH_GMII_ADDRESS_MW_Msk |
                                (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
 8021fa4:	78fa      	ldrb	r2, [r7, #3]
 8021fa6:	02d2      	lsls	r2, r2, #11
  uint32_t retries;

  eth_mac->regs->GMII_DATA  = data;
  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
                                (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
                                (uint32_t)ETH_GMII_ADDRESS_MW_Msk |
 8021fa8:	4311      	orrs	r1, r2
                                (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
                                (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos));
 8021faa:	78ba      	ldrb	r2, [r7, #2]
 8021fac:	0192      	lsls	r2, r2, #6
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_WritePhy(XMC_ETH_MAC_t *eth_mac, uint8_t phy_addr, uint8_t reg_addr, uint16_t data)
{
  uint32_t retries;

  eth_mac->regs->GMII_DATA  = data;
  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 8021fae:	430a      	orrs	r2, r1
 8021fb0:	f042 0203 	orr.w	r2, r2, #3
 8021fb4:	611a      	str	r2, [r3, #16]
                                (uint32_t)ETH_GMII_ADDRESS_MW_Msk |
                                (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos) |
                                (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos));

  /* Poll busy bit during max PHY_TIMEOUT time */
  retries = 0U;
 8021fb6:	2300      	movs	r3, #0
 8021fb8:	60fb      	str	r3, [r7, #12]
  do
  {
    if ((eth_mac->regs->GMII_ADDRESS & ETH_GMII_ADDRESS_MB_Msk) == 0U)
 8021fba:	687b      	ldr	r3, [r7, #4]
 8021fbc:	681b      	ldr	r3, [r3, #0]
 8021fbe:	691b      	ldr	r3, [r3, #16]
 8021fc0:	f003 0301 	and.w	r3, r3, #1
 8021fc4:	2b00      	cmp	r3, #0
 8021fc6:	d101      	bne.n	8021fcc <XMC_ETH_MAC_WritePhy+0x58>
    {
      return XMC_ETH_MAC_STATUS_OK;
 8021fc8:	2300      	movs	r3, #0
 8021fca:	e008      	b.n	8021fde <XMC_ETH_MAC_WritePhy+0x6a>
    }
    ++retries;
 8021fcc:	68fb      	ldr	r3, [r7, #12]
 8021fce:	3301      	adds	r3, #1
 8021fd0:	60fb      	str	r3, [r7, #12]
  }
  while (retries < XMC_ETH_MAC_PHY_MAX_RETRIES);
 8021fd2:	68fb      	ldr	r3, [r7, #12]
 8021fd4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021fd8:	4293      	cmp	r3, r2
 8021fda:	d9ee      	bls.n	8021fba <XMC_ETH_MAC_WritePhy+0x46>

  return XMC_ETH_MAC_STATUS_ERROR;
 8021fdc:	2302      	movs	r3, #2
}
 8021fde:	4618      	mov	r0, r3
 8021fe0:	3714      	adds	r7, #20
 8021fe2:	46bd      	mov	sp, r7
 8021fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fe8:	4770      	bx	lr
 8021fea:	bf00      	nop

08021fec <XMC_ETH_MAC_EnableEvent>:
  }
}

/* Enable event */
void XMC_ETH_MAC_EnableEvent(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
{
 8021fec:	b580      	push	{r7, lr}
 8021fee:	b082      	sub	sp, #8
 8021ff0:	af00      	add	r7, sp, #0
 8021ff2:	6078      	str	r0, [r7, #4]
 8021ff4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_ETH_MAC_EnableDMAEvent: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  eth_mac->regs->INTERRUPT_MASK &= ~(event >> 16U);
 8021ff6:	687b      	ldr	r3, [r7, #4]
 8021ff8:	681b      	ldr	r3, [r3, #0]
 8021ffa:	687a      	ldr	r2, [r7, #4]
 8021ffc:	6812      	ldr	r2, [r2, #0]
 8021ffe:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8022000:	683a      	ldr	r2, [r7, #0]
 8022002:	0c12      	lsrs	r2, r2, #16
 8022004:	43d2      	mvns	r2, r2
 8022006:	400a      	ands	r2, r1
 8022008:	63da      	str	r2, [r3, #60]	; 0x3c

  event &= (uint16_t)0x7fffU;
 802200a:	683b      	ldr	r3, [r7, #0]
 802200c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8022010:	603b      	str	r3, [r7, #0]
  if (XCM_ETH_MAC_IsNormalEvent(event))
 8022012:	6838      	ldr	r0, [r7, #0]
 8022014:	f7ff fd8c 	bl	8021b30 <XCM_ETH_MAC_IsNormalEvent>
 8022018:	4603      	mov	r3, r0
 802201a:	2b00      	cmp	r3, #0
 802201c:	d003      	beq.n	8022026 <XMC_ETH_MAC_EnableEvent+0x3a>
  {
    event |= (uint32_t)ETH_INTERRUPT_ENABLE_NIE_Msk;
 802201e:	683b      	ldr	r3, [r7, #0]
 8022020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8022024:	603b      	str	r3, [r7, #0]
  }

  if (XCM_ETH_MAC_IsAbnormalEvent(event))
 8022026:	6838      	ldr	r0, [r7, #0]
 8022028:	f7ff fd96 	bl	8021b58 <XCM_ETH_MAC_IsAbnormalEvent>
 802202c:	4603      	mov	r3, r0
 802202e:	2b00      	cmp	r3, #0
 8022030:	d003      	beq.n	802203a <XMC_ETH_MAC_EnableEvent+0x4e>
  {
    event |= (uint32_t)ETH_INTERRUPT_ENABLE_AIE_Msk;
 8022032:	683b      	ldr	r3, [r7, #0]
 8022034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8022038:	603b      	str	r3, [r7, #0]
  }

  eth_mac->regs->INTERRUPT_ENABLE |= event;
 802203a:	687b      	ldr	r3, [r7, #4]
 802203c:	6819      	ldr	r1, [r3, #0]
 802203e:	687b      	ldr	r3, [r7, #4]
 8022040:	681b      	ldr	r3, [r3, #0]
 8022042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022046:	331c      	adds	r3, #28
 8022048:	681a      	ldr	r2, [r3, #0]
 802204a:	683b      	ldr	r3, [r7, #0]
 802204c:	431a      	orrs	r2, r3
 802204e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8022052:	331c      	adds	r3, #28
 8022054:	601a      	str	r2, [r3, #0]
}
 8022056:	3708      	adds	r7, #8
 8022058:	46bd      	mov	sp, r7
 802205a:	bd80      	pop	{r7, pc}

0802205c <XMC_ETH_MAC_DisableEvent>:

/* Disable event */
void XMC_ETH_MAC_DisableEvent(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
{
 802205c:	b480      	push	{r7}
 802205e:	b083      	sub	sp, #12
 8022060:	af00      	add	r7, sp, #0
 8022062:	6078      	str	r0, [r7, #4]
 8022064:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_ETH_MAC_DisableDMAEvent: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  eth_mac->regs->INTERRUPT_MASK |= event >> 16U;
 8022066:	687b      	ldr	r3, [r7, #4]
 8022068:	681b      	ldr	r3, [r3, #0]
 802206a:	687a      	ldr	r2, [r7, #4]
 802206c:	6812      	ldr	r2, [r2, #0]
 802206e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8022070:	683a      	ldr	r2, [r7, #0]
 8022072:	0c12      	lsrs	r2, r2, #16
 8022074:	430a      	orrs	r2, r1
 8022076:	63da      	str	r2, [r3, #60]	; 0x3c

  event &= 0x7fffU;
 8022078:	683b      	ldr	r3, [r7, #0]
 802207a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 802207e:	603b      	str	r3, [r7, #0]
  eth_mac->regs->INTERRUPT_ENABLE &= ~event;
 8022080:	687b      	ldr	r3, [r7, #4]
 8022082:	6819      	ldr	r1, [r3, #0]
 8022084:	687b      	ldr	r3, [r7, #4]
 8022086:	681b      	ldr	r3, [r3, #0]
 8022088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802208c:	331c      	adds	r3, #28
 802208e:	681a      	ldr	r2, [r3, #0]
 8022090:	683b      	ldr	r3, [r7, #0]
 8022092:	43db      	mvns	r3, r3
 8022094:	401a      	ands	r2, r3
 8022096:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 802209a:	331c      	adds	r3, #28
 802209c:	601a      	str	r2, [r3, #0]
}
 802209e:	370c      	adds	r7, #12
 80220a0:	46bd      	mov	sp, r7
 80220a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220a6:	4770      	bx	lr

080220a8 <XMC_ETH_MAC_ClearEventStatus>:

/* Clear event status */
void XMC_ETH_MAC_ClearEventStatus(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
{
 80220a8:	b480      	push	{r7}
 80220aa:	b083      	sub	sp, #12
 80220ac:	af00      	add	r7, sp, #0
 80220ae:	6078      	str	r0, [r7, #4]
 80220b0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_ETH_MAC_ClearEventStatus: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  if ((eth_mac->regs->STATUS & ETH_STATUS_NIS_Msk) != 0U)
 80220b2:	687b      	ldr	r3, [r7, #4]
 80220b4:	681b      	ldr	r3, [r3, #0]
 80220b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80220ba:	3314      	adds	r3, #20
 80220bc:	681b      	ldr	r3, [r3, #0]
 80220be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80220c2:	2b00      	cmp	r3, #0
 80220c4:	d003      	beq.n	80220ce <XMC_ETH_MAC_ClearEventStatus+0x26>
  {
    event |= (uint32_t)ETH_STATUS_NIS_Msk;
 80220c6:	683b      	ldr	r3, [r7, #0]
 80220c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80220cc:	603b      	str	r3, [r7, #0]
  }

  if ((eth_mac->regs->STATUS & ETH_STATUS_AIS_Msk) != 0U)
 80220ce:	687b      	ldr	r3, [r7, #4]
 80220d0:	681b      	ldr	r3, [r3, #0]
 80220d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80220d6:	3314      	adds	r3, #20
 80220d8:	681b      	ldr	r3, [r3, #0]
 80220da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80220de:	2b00      	cmp	r3, #0
 80220e0:	d003      	beq.n	80220ea <XMC_ETH_MAC_ClearEventStatus+0x42>
  {
    event |= (uint32_t)ETH_STATUS_AIS_Msk;
 80220e2:	683b      	ldr	r3, [r7, #0]
 80220e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80220e8:	603b      	str	r3, [r7, #0]
  }

  eth_mac->regs->STATUS = event & 0x0001FFFFU;
 80220ea:	687b      	ldr	r3, [r7, #4]
 80220ec:	681b      	ldr	r3, [r3, #0]
 80220ee:	683a      	ldr	r2, [r7, #0]
 80220f0:	f3c2 0210 	ubfx	r2, r2, #0, #17
 80220f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80220f8:	3314      	adds	r3, #20
 80220fa:	601a      	str	r2, [r3, #0]
}
 80220fc:	370c      	adds	r7, #12
 80220fe:	46bd      	mov	sp, r7
 8022100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022104:	4770      	bx	lr
 8022106:	bf00      	nop

08022108 <XMC_ETH_MAC_ReturnRxDescriptor>:
          temp_status);
}

/* Return RX descriptor */
void XMC_ETH_MAC_ReturnRxDescriptor(XMC_ETH_MAC_t *const eth_mac)
{
 8022108:	b480      	push	{r7}
 802210a:	b083      	sub	sp, #12
 802210c:	af00      	add	r7, sp, #0
 802210e:	6078      	str	r0, [r7, #4]
  eth_mac->rx_desc[eth_mac->rx_index].status |= ETH_MAC_DMA_RDES0_OWN;
 8022110:	687b      	ldr	r3, [r7, #4]
 8022112:	691a      	ldr	r2, [r3, #16]
 8022114:	687b      	ldr	r3, [r7, #4]
 8022116:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 802211a:	015b      	lsls	r3, r3, #5
 802211c:	4413      	add	r3, r2
 802211e:	687a      	ldr	r2, [r7, #4]
 8022120:	6911      	ldr	r1, [r2, #16]
 8022122:	687a      	ldr	r2, [r7, #4]
 8022124:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8022128:	0152      	lsls	r2, r2, #5
 802212a:	440a      	add	r2, r1
 802212c:	6812      	ldr	r2, [r2, #0]
 802212e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8022132:	601a      	str	r2, [r3, #0]
  eth_mac->rx_index++;
 8022134:	687b      	ldr	r3, [r7, #4]
 8022136:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 802213a:	3301      	adds	r3, #1
 802213c:	b2da      	uxtb	r2, r3
 802213e:	687b      	ldr	r3, [r7, #4]
 8022140:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  if (eth_mac->rx_index == eth_mac->num_rx_buf)
 8022144:	687b      	ldr	r3, [r7, #4]
 8022146:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 802214a:	687b      	ldr	r3, [r7, #4]
 802214c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8022150:	429a      	cmp	r2, r3
 8022152:	d103      	bne.n	802215c <XMC_ETH_MAC_ReturnRxDescriptor+0x54>
  {
    eth_mac->rx_index = 0U;
 8022154:	687b      	ldr	r3, [r7, #4]
 8022156:	2200      	movs	r2, #0
 8022158:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  }
}
 802215c:	370c      	adds	r7, #12
 802215e:	46bd      	mov	sp, r7
 8022160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022164:	4770      	bx	lr
 8022166:	bf00      	nop

08022168 <XMC_ETH_MAC_ReturnTxDescriptor>:

/* Return TX descriptor */
void XMC_ETH_MAC_ReturnTxDescriptor(XMC_ETH_MAC_t *const eth_mac)
{
 8022168:	b480      	push	{r7}
 802216a:	b083      	sub	sp, #12
 802216c:	af00      	add	r7, sp, #0
 802216e:	6078      	str	r0, [r7, #4]
  eth_mac->tx_ts_index = eth_mac->tx_index;
 8022170:	687b      	ldr	r3, [r7, #4]
 8022172:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8022176:	687b      	ldr	r3, [r7, #4]
 8022178:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  eth_mac->tx_desc[eth_mac->tx_index].status |= ETH_MAC_DMA_TDES0_CIC | ETH_MAC_DMA_TDES0_OWN;
 802217c:	687b      	ldr	r3, [r7, #4]
 802217e:	695a      	ldr	r2, [r3, #20]
 8022180:	687b      	ldr	r3, [r7, #4]
 8022182:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8022186:	015b      	lsls	r3, r3, #5
 8022188:	441a      	add	r2, r3
 802218a:	687b      	ldr	r3, [r7, #4]
 802218c:	6959      	ldr	r1, [r3, #20]
 802218e:	687b      	ldr	r3, [r7, #4]
 8022190:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8022194:	015b      	lsls	r3, r3, #5
 8022196:	440b      	add	r3, r1
 8022198:	681b      	ldr	r3, [r3, #0]
 802219a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802219e:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80221a2:	6013      	str	r3, [r2, #0]
  eth_mac->tx_index++;
 80221a4:	687b      	ldr	r3, [r7, #4]
 80221a6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80221aa:	3301      	adds	r3, #1
 80221ac:	b2da      	uxtb	r2, r3
 80221ae:	687b      	ldr	r3, [r7, #4]
 80221b0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  if (eth_mac->tx_index == eth_mac->num_tx_buf)
 80221b4:	687b      	ldr	r3, [r7, #4]
 80221b6:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80221ba:	687b      	ldr	r3, [r7, #4]
 80221bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80221c0:	429a      	cmp	r2, r3
 80221c2:	d103      	bne.n	80221cc <XMC_ETH_MAC_ReturnTxDescriptor+0x64>
  {
    eth_mac->tx_index = 0U;
 80221c4:	687b      	ldr	r3, [r7, #4]
 80221c6:	2200      	movs	r2, #0
 80221c8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  }

  eth_mac->frame_end = NULL;
 80221cc:	687b      	ldr	r3, [r7, #4]
 80221ce:	2200      	movs	r2, #0
 80221d0:	621a      	str	r2, [r3, #32]
}
 80221d2:	370c      	adds	r7, #12
 80221d4:	46bd      	mov	sp, r7
 80221d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221da:	4770      	bx	lr

080221dc <XMC_FCE_Init>:
/*
 * Initialize the FCE peripheral:
 * Update FCE configuration and initialize seed value
 */
XMC_FCE_STATUS_t XMC_FCE_Init(const XMC_FCE_t *const engine)
{
 80221dc:	b480      	push	{r7}
 80221de:	b083      	sub	sp, #12
 80221e0:	af00      	add	r7, sp, #0
 80221e2:	6078      	str	r0, [r7, #4]
  engine->kernel_ptr->CFG = engine->fce_cfg_update.regval;
 80221e4:	687b      	ldr	r3, [r7, #4]
 80221e6:	681b      	ldr	r3, [r3, #0]
 80221e8:	687a      	ldr	r2, [r7, #4]
 80221ea:	6852      	ldr	r2, [r2, #4]
 80221ec:	609a      	str	r2, [r3, #8]
  engine->kernel_ptr->CRC = engine->seedvalue;
 80221ee:	687b      	ldr	r3, [r7, #4]
 80221f0:	681b      	ldr	r3, [r3, #0]
 80221f2:	687a      	ldr	r2, [r7, #4]
 80221f4:	6892      	ldr	r2, [r2, #8]
 80221f6:	619a      	str	r2, [r3, #24]

  return XMC_FCE_STATUS_OK;
 80221f8:	2300      	movs	r3, #0
}
 80221fa:	4618      	mov	r0, r3
 80221fc:	370c      	adds	r7, #12
 80221fe:	46bd      	mov	sp, r7
 8022200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022204:	4770      	bx	lr
 8022206:	bf00      	nop

08022208 <XMC_FCE_Enable>:

}

/* Enable FCE */
void XMC_FCE_Enable(void)
{
 8022208:	b580      	push	{r7, lr}
 802220a:	af00      	add	r7, sp, #0
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_FCE);
 802220c:	4806      	ldr	r0, [pc, #24]	; (8022228 <XMC_FCE_Enable+0x20>)
 802220e:	f7fe fb67 	bl	80208e0 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif

  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_FCE);
 8022212:	4805      	ldr	r0, [pc, #20]	; (8022228 <XMC_FCE_Enable+0x20>)
 8022214:	f7fe f9e0 	bl	80205d8 <XMC_SCU_RESET_DeassertPeripheralReset>

  FCE->CLC &= (uint32_t)~FCE_CLC_DISR_Msk;
 8022218:	4a04      	ldr	r2, [pc, #16]	; (802222c <XMC_FCE_Enable+0x24>)
 802221a:	4b04      	ldr	r3, [pc, #16]	; (802222c <XMC_FCE_Enable+0x24>)
 802221c:	681b      	ldr	r3, [r3, #0]
 802221e:	f023 0301 	bic.w	r3, r3, #1
 8022222:	6013      	str	r3, [r2, #0]
}
 8022224:	bd80      	pop	{r7, pc}
 8022226:	bf00      	nop
 8022228:	20000040 	.word	0x20000040
 802222c:	50020000 	.word	0x50020000

08022230 <XMC_FCE_CalculateCRC32>:
/* Calculate and return the IEEE 802.3 Ethernet CRC32 checksum */
XMC_FCE_STATUS_t XMC_FCE_CalculateCRC32(const XMC_FCE_t *const engine,
                                        const uint32_t *data,
                                        uint32_t length,
                                        uint32_t *result)
{
 8022230:	b480      	push	{r7}
 8022232:	b087      	sub	sp, #28
 8022234:	af00      	add	r7, sp, #0
 8022236:	60f8      	str	r0, [r7, #12]
 8022238:	60b9      	str	r1, [r7, #8]
 802223a:	607a      	str	r2, [r7, #4]
 802223c:	603b      	str	r3, [r7, #0]
  XMC_FCE_STATUS_t status = XMC_FCE_STATUS_OK;
 802223e:	2300      	movs	r3, #0
 8022240:	75fb      	strb	r3, [r7, #23]
             (engine->kernel_ptr == XMC_FCE_CRC32_1)));
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Length field is empty", (length != 0));
  XMC_ASSERT("XMC_FCE_CalculateCRC32: Length is not aligned", ((length & 0x3U) == 0));

  /* Check length is a multiple of 4 */
  if ((length == 0) || ((length & 0x3U) != 0U))
 8022242:	687b      	ldr	r3, [r7, #4]
 8022244:	2b00      	cmp	r3, #0
 8022246:	d004      	beq.n	8022252 <XMC_FCE_CalculateCRC32+0x22>
 8022248:	687b      	ldr	r3, [r7, #4]
 802224a:	f003 0303 	and.w	r3, r3, #3
 802224e:	2b00      	cmp	r3, #0
 8022250:	d002      	beq.n	8022258 <XMC_FCE_CalculateCRC32+0x28>
  {
    status = XMC_FCE_STATUS_ERROR;
 8022252:	2302      	movs	r3, #2
 8022254:	75fb      	strb	r3, [r7, #23]
 8022256:	e013      	b.n	8022280 <XMC_FCE_CalculateCRC32+0x50>
  }
  else
  {
    while (0UL != length)
 8022258:	e00a      	b.n	8022270 <XMC_FCE_CalculateCRC32+0x40>
    {
      engine->kernel_ptr->IR = *data;
 802225a:	68fb      	ldr	r3, [r7, #12]
 802225c:	681b      	ldr	r3, [r3, #0]
 802225e:	68ba      	ldr	r2, [r7, #8]
 8022260:	6812      	ldr	r2, [r2, #0]
 8022262:	601a      	str	r2, [r3, #0]
      data++;
 8022264:	68bb      	ldr	r3, [r7, #8]
 8022266:	3304      	adds	r3, #4
 8022268:	60bb      	str	r3, [r7, #8]
      length -= 4U;
 802226a:	687b      	ldr	r3, [r7, #4]
 802226c:	3b04      	subs	r3, #4
 802226e:	607b      	str	r3, [r7, #4]
  {
    status = XMC_FCE_STATUS_ERROR;
  }
  else
  {
    while (0UL != length)
 8022270:	687b      	ldr	r3, [r7, #4]
 8022272:	2b00      	cmp	r3, #0
 8022274:	d1f1      	bne.n	802225a <XMC_FCE_CalculateCRC32+0x2a>
      engine->kernel_ptr->IR = *data;
      data++;
      length -= 4U;
    }

    *result = engine->kernel_ptr->CRC;
 8022276:	68fb      	ldr	r3, [r7, #12]
 8022278:	681b      	ldr	r3, [r3, #0]
 802227a:	699a      	ldr	r2, [r3, #24]
 802227c:	683b      	ldr	r3, [r7, #0]
 802227e:	601a      	str	r2, [r3, #0]
  }

  return status;
 8022280:	7dfb      	ldrb	r3, [r7, #23]
}
 8022282:	4618      	mov	r0, r3
 8022284:	371c      	adds	r7, #28
 8022286:	46bd      	mov	sp, r7
 8022288:	f85d 7b04 	ldr.w	r7, [sp], #4
 802228c:	4770      	bx	lr
 802228e:	bf00      	nop

08022290 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8022290:	b480      	push	{r7}
 8022292:	b083      	sub	sp, #12
 8022294:	af00      	add	r7, sp, #0
 8022296:	6078      	str	r0, [r7, #4]
 8022298:	460b      	mov	r3, r1
 802229a:	70fb      	strb	r3, [r7, #3]
 802229c:	4613      	mov	r3, r2
 802229e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80222a0:	687b      	ldr	r3, [r7, #4]
 80222a2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80222a4:	78fb      	ldrb	r3, [r7, #3]
 80222a6:	005b      	lsls	r3, r3, #1
 80222a8:	4619      	mov	r1, r3
 80222aa:	2303      	movs	r3, #3
 80222ac:	408b      	lsls	r3, r1
 80222ae:	43db      	mvns	r3, r3
 80222b0:	401a      	ands	r2, r3
 80222b2:	687b      	ldr	r3, [r7, #4]
 80222b4:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 80222b6:	687b      	ldr	r3, [r7, #4]
 80222b8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80222ba:	78bb      	ldrb	r3, [r7, #2]
 80222bc:	78f9      	ldrb	r1, [r7, #3]
 80222be:	0049      	lsls	r1, r1, #1
 80222c0:	408b      	lsls	r3, r1
 80222c2:	431a      	orrs	r2, r3
 80222c4:	687b      	ldr	r3, [r7, #4]
 80222c6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80222c8:	370c      	adds	r7, #12
 80222ca:	46bd      	mov	sp, r7
 80222cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222d0:	4770      	bx	lr
 80222d2:	bf00      	nop

080222d4 <XMC_SPI_CH_InitEx>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config, bool init_brg)
{
 80222d4:	b580      	push	{r7, lr}
 80222d6:	b084      	sub	sp, #16
 80222d8:	af00      	add	r7, sp, #0
 80222da:	60f8      	str	r0, [r7, #12]
 80222dc:	60b9      	str	r1, [r7, #8]
 80222de:	4613      	mov	r3, r2
 80222e0:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_Enable(channel);
 80222e2:	68f8      	ldr	r0, [r7, #12]
 80222e4:	f000 f96a 	bl	80225bc <XMC_USIC_CH_Enable>

  if ((config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER) && init_brg)
 80222e8:	68bb      	ldr	r3, [r7, #8]
 80222ea:	795b      	ldrb	r3, [r3, #5]
 80222ec:	2b00      	cmp	r3, #0
 80222ee:	d115      	bne.n	802231c <XMC_SPI_CH_InitEx+0x48>
 80222f0:	79fb      	ldrb	r3, [r7, #7]
 80222f2:	2b00      	cmp	r3, #0
 80222f4:	d012      	beq.n	802231c <XMC_SPI_CH_InitEx+0x48>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 80222f6:	68bb      	ldr	r3, [r7, #8]
 80222f8:	791b      	ldrb	r3, [r3, #4]
 80222fa:	2b00      	cmp	r3, #0
 80222fc:	d007      	beq.n	802230e <XMC_SPI_CH_InitEx+0x3a>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING);
 80222fe:	68bb      	ldr	r3, [r7, #8]
 8022300:	681b      	ldr	r3, [r3, #0]
 8022302:	68f8      	ldr	r0, [r7, #12]
 8022304:	4619      	mov	r1, r3
 8022306:	2202      	movs	r2, #2
 8022308:	f000 fa16 	bl	8022738 <XMC_USIC_CH_SetBaudrateEx>
 802230c:	e006      	b.n	802231c <XMC_SPI_CH_InitEx+0x48>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING);
 802230e:	68bb      	ldr	r3, [r7, #8]
 8022310:	681b      	ldr	r3, [r3, #0]
 8022312:	68f8      	ldr	r0, [r7, #12]
 8022314:	4619      	mov	r1, r3
 8022316:	2202      	movs	r2, #2
 8022318:	f000 f99c 	bl	8022654 <XMC_USIC_CH_SetBaudrate>
  }

  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 802231c:	68fb      	ldr	r3, [r7, #12]
 802231e:	4a0f      	ldr	r2, [pc, #60]	; (802235c <XMC_SPI_CH_InitEx+0x88>)
 8022320:	635a      	str	r2, [r3, #52]	; 0x34
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 8022322:	68fb      	ldr	r3, [r7, #12]
 8022324:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8022328:	639a      	str	r2, [r3, #56]	; 0x38
                             (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                             USIC_CH_TCSR_TDSSM_Msk);

  if (config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 802232a:	68bb      	ldr	r3, [r7, #8]
 802232c:	795b      	ldrb	r3, [r3, #5]
 802232e:	2b00      	cmp	r3, #0
 8022330:	d107      	bne.n	8022342 <XMC_SPI_CH_InitEx+0x6e>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                                      USIC_CH_PCR_SSCMode_SELCTR_Msk |
                                      (uint32_t)config->selo_inversion |
 8022332:	68bb      	ldr	r3, [r7, #8]
 8022334:	799b      	ldrb	r3, [r3, #6]
                             USIC_CH_TCSR_TDSSM_Msk);

  if (config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 8022336:	f043 030b 	orr.w	r3, r3, #11
 802233a:	b2db      	uxtb	r3, r3
 802233c:	461a      	mov	r2, r3
 802233e:	68fb      	ldr	r3, [r7, #12]
 8022340:	63da      	str	r2, [r3, #60]	; 0x3c
                                      (uint32_t)config->selo_inversion |
                                      USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8022342:	68fb      	ldr	r3, [r7, #12]
 8022344:	f04f 32ff 	mov.w	r2, #4294967295
 8022348:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 802234a:	68bb      	ldr	r3, [r7, #8]
 802234c:	891b      	ldrh	r3, [r3, #8]
 802234e:	461a      	mov	r2, r3
 8022350:	68fb      	ldr	r3, [r7, #12]
 8022352:	641a      	str	r2, [r3, #64]	; 0x40
}
 8022354:	3710      	adds	r7, #16
 8022356:	46bd      	mov	sp, r7
 8022358:	bd80      	pop	{r7, pc}
 802235a:	bf00      	nop
 802235c:	073f0102 	.word	0x073f0102

08022360 <XMC_SPI_CH_EnableSlaveSelect>:
  return (XMC_SPI_CH_STATUS_t)status;
}

/* Enable the selected slave signal by setting (SELO) bits in PCR register. */
void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t slave)
{
 8022360:	b480      	push	{r7}
 8022362:	b083      	sub	sp, #12
 8022364:	af00      	add	r7, sp, #0
 8022366:	6078      	str	r0, [r7, #4]
 8022368:	6039      	str	r1, [r7, #0]
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 802236a:	687b      	ldr	r3, [r7, #4]
 802236c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802236e:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8022372:	687b      	ldr	r3, [r7, #4]
 8022374:	63da      	str	r2, [r3, #60]	; 0x3c
  channel->PCR_SSCMode |= (uint32_t)slave;
 8022376:	687b      	ldr	r3, [r7, #4]
 8022378:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802237a:	683b      	ldr	r3, [r7, #0]
 802237c:	431a      	orrs	r2, r3
 802237e:	687b      	ldr	r3, [r7, #4]
 8022380:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8022382:	370c      	adds	r7, #12
 8022384:	46bd      	mov	sp, r7
 8022386:	f85d 7b04 	ldr.w	r7, [sp], #4
 802238a:	4770      	bx	lr

0802238c <XMC_SPI_CH_GetReceivedData>:
  }
}

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 802238c:	b480      	push	{r7}
 802238e:	b085      	sub	sp, #20
 8022390:	af00      	add	r7, sp, #0
 8022392:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8022394:	687b      	ldr	r3, [r7, #4]
 8022396:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 802239a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 802239e:	2b00      	cmp	r3, #0
 80223a0:	d103      	bne.n	80223aa <XMC_SPI_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 80223a2:	687b      	ldr	r3, [r7, #4]
 80223a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80223a6:	81fb      	strh	r3, [r7, #14]
 80223a8:	e003      	b.n	80223b2 <XMC_SPI_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 80223aa:	687b      	ldr	r3, [r7, #4]
 80223ac:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80223b0:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 80223b2:	89fb      	ldrh	r3, [r7, #14]
}
 80223b4:	4618      	mov	r0, r3
 80223b6:	3714      	adds	r7, #20
 80223b8:	46bd      	mov	sp, r7
 80223ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223be:	4770      	bx	lr

080223c0 <XMC_SPI_CH_EnableEvent>:

  return status;
}

void XMC_SPI_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80223c0:	b480      	push	{r7}
 80223c2:	b083      	sub	sp, #12
 80223c4:	af00      	add	r7, sp, #0
 80223c6:	6078      	str	r0, [r7, #4]
 80223c8:	6039      	str	r1, [r7, #0]
  channel->CCR |= (event & 0x1fc00U);
 80223ca:	687b      	ldr	r3, [r7, #4]
 80223cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80223ce:	683b      	ldr	r3, [r7, #0]
 80223d0:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 80223d4:	431a      	orrs	r2, r3
 80223d6:	687b      	ldr	r3, [r7, #4]
 80223d8:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_SSCMode |= ((event << 13U) & 0xe000U);
 80223da:	687b      	ldr	r3, [r7, #4]
 80223dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80223de:	683b      	ldr	r3, [r7, #0]
 80223e0:	035b      	lsls	r3, r3, #13
 80223e2:	b29b      	uxth	r3, r3
 80223e4:	431a      	orrs	r2, r3
 80223e6:	687b      	ldr	r3, [r7, #4]
 80223e8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80223ea:	370c      	adds	r7, #12
 80223ec:	46bd      	mov	sp, r7
 80223ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223f2:	4770      	bx	lr

080223f4 <XMC_SPI_CH_DisableEvent>:

void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80223f4:	b480      	push	{r7}
 80223f6:	b083      	sub	sp, #12
 80223f8:	af00      	add	r7, sp, #0
 80223fa:	6078      	str	r0, [r7, #4]
 80223fc:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~(event & 0x1fc00U);
 80223fe:	687b      	ldr	r3, [r7, #4]
 8022400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8022402:	683b      	ldr	r3, [r7, #0]
 8022404:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 8022408:	43db      	mvns	r3, r3
 802240a:	401a      	ands	r2, r3
 802240c:	687b      	ldr	r3, [r7, #4]
 802240e:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_SSCMode &= (uint32_t)~((event << 13U) & 0xe000U);
 8022410:	687b      	ldr	r3, [r7, #4]
 8022412:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8022414:	683b      	ldr	r3, [r7, #0]
 8022416:	035b      	lsls	r3, r3, #13
 8022418:	b29b      	uxth	r3, r3
 802241a:	43db      	mvns	r3, r3
 802241c:	401a      	ands	r2, r3
 802241e:	687b      	ldr	r3, [r7, #4]
 8022420:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8022422:	370c      	adds	r7, #12
 8022424:	46bd      	mov	sp, r7
 8022426:	f85d 7b04 	ldr.w	r7, [sp], #4
 802242a:	4770      	bx	lr

0802242c <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 802242c:	b480      	push	{r7}
 802242e:	b083      	sub	sp, #12
 8022430:	af00      	add	r7, sp, #0
 8022432:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8022434:	687b      	ldr	r3, [r7, #4]
 8022436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022438:	b2db      	uxtb	r3, r3
 802243a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802243e:	b2db      	uxtb	r3, r3
}
 8022440:	4618      	mov	r0, r3
 8022442:	370c      	adds	r7, #12
 8022444:	46bd      	mov	sp, r7
 8022446:	f85d 7b04 	ldr.w	r7, [sp], #4
 802244a:	4770      	bx	lr

0802244c <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 802244c:	b480      	push	{r7}
 802244e:	b083      	sub	sp, #12
 8022450:	af00      	add	r7, sp, #0
 8022452:	6078      	str	r0, [r7, #4]
 8022454:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8022456:	687b      	ldr	r3, [r7, #4]
 8022458:	683a      	ldr	r2, [r7, #0]
 802245a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 802245c:	370c      	adds	r7, #12
 802245e:	46bd      	mov	sp, r7
 8022460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022464:	4770      	bx	lr
 8022466:	bf00      	nop

08022468 <XMC_UART_CH_InitEx>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_InitEx(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config, bool init_brg)
{
 8022468:	b580      	push	{r7, lr}
 802246a:	b086      	sub	sp, #24
 802246c:	af00      	add	r7, sp, #0
 802246e:	60f8      	str	r0, [r7, #12]
 8022470:	60b9      	str	r1, [r7, #8]
 8022472:	4613      	mov	r3, r2
 8022474:	71fb      	strb	r3, [r7, #7]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8022476:	2310      	movs	r3, #16
 8022478:	617b      	str	r3, [r7, #20]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 802247a:	68f8      	ldr	r0, [r7, #12]
 802247c:	f000 f89e 	bl	80225bc <XMC_USIC_CH_Enable>

  if (config->oversampling != 0U)
 8022480:	68bb      	ldr	r3, [r7, #8]
 8022482:	7a1b      	ldrb	r3, [r3, #8]
 8022484:	2b00      	cmp	r3, #0
 8022486:	d002      	beq.n	802248e <XMC_UART_CH_InitEx+0x26>
  {
    oversampling = (uint32_t)config->oversampling;
 8022488:	68bb      	ldr	r3, [r7, #8]
 802248a:	7a1b      	ldrb	r3, [r3, #8]
 802248c:	617b      	str	r3, [r7, #20]
  }

  if (init_brg)
 802248e:	79fb      	ldrb	r3, [r7, #7]
 8022490:	2b00      	cmp	r3, #0
 8022492:	d014      	beq.n	80224be <XMC_UART_CH_InitEx+0x56>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 8022494:	68bb      	ldr	r3, [r7, #8]
 8022496:	791b      	ldrb	r3, [r3, #4]
 8022498:	2b00      	cmp	r3, #0
 802249a:	d009      	beq.n	80224b0 <XMC_UART_CH_InitEx+0x48>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
 802249c:	68bb      	ldr	r3, [r7, #8]
 802249e:	681b      	ldr	r3, [r3, #0]
 80224a0:	461a      	mov	r2, r3
 80224a2:	697b      	ldr	r3, [r7, #20]
 80224a4:	68f8      	ldr	r0, [r7, #12]
 80224a6:	4611      	mov	r1, r2
 80224a8:	461a      	mov	r2, r3
 80224aa:	f000 f945 	bl	8022738 <XMC_USIC_CH_SetBaudrateEx>
 80224ae:	e006      	b.n	80224be <XMC_UART_CH_InitEx+0x56>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 80224b0:	68bb      	ldr	r3, [r7, #8]
 80224b2:	681b      	ldr	r3, [r3, #0]
 80224b4:	68f8      	ldr	r0, [r7, #12]
 80224b6:	4619      	mov	r1, r3
 80224b8:	697a      	ldr	r2, [r7, #20]
 80224ba:	f000 f8cb 	bl	8022654 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80224be:	68bb      	ldr	r3, [r7, #8]
 80224c0:	79db      	ldrb	r3, [r3, #7]
 80224c2:	3b01      	subs	r3, #1
 80224c4:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 80224c6:	697b      	ldr	r3, [r7, #20]
 80224c8:	085b      	lsrs	r3, r3, #1
 80224ca:	3301      	adds	r3, #1
 80224cc:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80224ce:	4313      	orrs	r3, r2
 80224d0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80224d4:	f043 0301 	orr.w	r3, r3, #1
 80224d8:	68fa      	ldr	r2, [r7, #12]
 80224da:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 80224dc:	68bb      	ldr	r3, [r7, #8]
 80224de:	795b      	ldrb	r3, [r3, #5]
 80224e0:	3b01      	subs	r3, #1
 80224e2:	061b      	lsls	r3, r3, #24
 80224e4:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 80224e8:	68fb      	ldr	r3, [r7, #12]
 80224ea:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 80224ec:	68bb      	ldr	r3, [r7, #8]
 80224ee:	799b      	ldrb	r3, [r3, #6]
 80224f0:	2b00      	cmp	r3, #0
 80224f2:	d009      	beq.n	8022508 <XMC_UART_CH_InitEx+0xa0>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80224f4:	68fb      	ldr	r3, [r7, #12]
 80224f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80224f8:	68bb      	ldr	r3, [r7, #8]
 80224fa:	799b      	ldrb	r3, [r3, #6]
 80224fc:	3b01      	subs	r3, #1
 80224fe:	041b      	lsls	r3, r3, #16
 8022500:	431a      	orrs	r2, r3
 8022502:	68fb      	ldr	r3, [r7, #12]
 8022504:	635a      	str	r2, [r3, #52]	; 0x34
 8022506:	e008      	b.n	802251a <XMC_UART_CH_InitEx+0xb2>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8022508:	68fb      	ldr	r3, [r7, #12]
 802250a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802250c:	68bb      	ldr	r3, [r7, #8]
 802250e:	795b      	ldrb	r3, [r3, #5]
 8022510:	3b01      	subs	r3, #1
 8022512:	041b      	lsls	r3, r3, #16
 8022514:	431a      	orrs	r2, r3
 8022516:	68fb      	ldr	r3, [r7, #12]
 8022518:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 802251a:	68fb      	ldr	r3, [r7, #12]
 802251c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8022520:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8022522:	68fb      	ldr	r3, [r7, #12]
 8022524:	f04f 32ff 	mov.w	r2, #4294967295
 8022528:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 802252a:	68bb      	ldr	r3, [r7, #8]
 802252c:	895b      	ldrh	r3, [r3, #10]
 802252e:	461a      	mov	r2, r3
 8022530:	68fb      	ldr	r3, [r7, #12]
 8022532:	641a      	str	r2, [r3, #64]	; 0x40
}
 8022534:	3718      	adds	r7, #24
 8022536:	46bd      	mov	sp, r7
 8022538:	bd80      	pop	{r7, pc}
 802253a:	bf00      	nop

0802253c <XMC_UART_CH_Transmit>:

  return (XMC_UART_CH_STATUS_t)status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 802253c:	b580      	push	{r7, lr}
 802253e:	b082      	sub	sp, #8
 8022540:	af00      	add	r7, sp, #0
 8022542:	6078      	str	r0, [r7, #4]
 8022544:	460b      	mov	r3, r1
 8022546:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8022548:	687b      	ldr	r3, [r7, #4]
 802254a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 802254e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8022552:	2b00      	cmp	r3, #0
 8022554:	d110      	bne.n	8022578 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8022556:	bf00      	nop
 8022558:	6878      	ldr	r0, [r7, #4]
 802255a:	f7ff ff67 	bl	802242c <XMC_USIC_CH_GetTransmitBufferStatus>
 802255e:	4603      	mov	r3, r0
 8022560:	2b80      	cmp	r3, #128	; 0x80
 8022562:	d0f9      	beq.n	8022558 <XMC_UART_CH_Transmit+0x1c>
    {
    }

    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8022564:	6878      	ldr	r0, [r7, #4]
 8022566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802256a:	f7ff ff6f 	bl	802244c <XMC_UART_CH_ClearStatusFlag>

    /*Transmit data */
    channel->TBUF[0U] = data;
 802256e:	887a      	ldrh	r2, [r7, #2]
 8022570:	687b      	ldr	r3, [r7, #4]
 8022572:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8022576:	e003      	b.n	8022580 <XMC_UART_CH_Transmit+0x44>
  }
  else
  {
    channel->IN[0U] = data;
 8022578:	887a      	ldrh	r2, [r7, #2]
 802257a:	687b      	ldr	r3, [r7, #4]
 802257c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8022580:	3708      	adds	r7, #8
 8022582:	46bd      	mov	sp, r7
 8022584:	bd80      	pop	{r7, pc}
 8022586:	bf00      	nop

08022588 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8022588:	b480      	push	{r7}
 802258a:	b085      	sub	sp, #20
 802258c:	af00      	add	r7, sp, #0
 802258e:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8022590:	687b      	ldr	r3, [r7, #4]
 8022592:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8022596:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 802259a:	2b00      	cmp	r3, #0
 802259c:	d103      	bne.n	80225a6 <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 802259e:	687b      	ldr	r3, [r7, #4]
 80225a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80225a2:	81fb      	strh	r3, [r7, #14]
 80225a4:	e003      	b.n	80225ae <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 80225a6:	687b      	ldr	r3, [r7, #4]
 80225a8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80225ac:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 80225ae:	89fb      	ldrh	r3, [r7, #14]
}
 80225b0:	4618      	mov	r0, r3
 80225b2:	3714      	adds	r7, #20
 80225b4:	46bd      	mov	sp, r7
 80225b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225ba:	4770      	bx	lr

080225bc <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 80225bc:	b580      	push	{r7, lr}
 80225be:	b082      	sub	sp, #8
 80225c0:	af00      	add	r7, sp, #0
 80225c2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 80225c4:	687b      	ldr	r3, [r7, #4]
 80225c6:	4a1a      	ldr	r2, [pc, #104]	; (8022630 <XMC_USIC_CH_Enable+0x74>)
 80225c8:	4293      	cmp	r3, r2
 80225ca:	d003      	beq.n	80225d4 <XMC_USIC_CH_Enable+0x18>
 80225cc:	687b      	ldr	r3, [r7, #4]
 80225ce:	4a19      	ldr	r2, [pc, #100]	; (8022634 <XMC_USIC_CH_Enable+0x78>)
 80225d0:	4293      	cmp	r3, r2
 80225d2:	d103      	bne.n	80225dc <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 80225d4:	4818      	ldr	r0, [pc, #96]	; (8022638 <XMC_USIC_CH_Enable+0x7c>)
 80225d6:	f000 f9d3 	bl	8022980 <XMC_USIC_Enable>
 80225da:	e016      	b.n	802260a <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 80225dc:	687b      	ldr	r3, [r7, #4]
 80225de:	4a17      	ldr	r2, [pc, #92]	; (802263c <XMC_USIC_CH_Enable+0x80>)
 80225e0:	4293      	cmp	r3, r2
 80225e2:	d003      	beq.n	80225ec <XMC_USIC_CH_Enable+0x30>
 80225e4:	687b      	ldr	r3, [r7, #4]
 80225e6:	4a16      	ldr	r2, [pc, #88]	; (8022640 <XMC_USIC_CH_Enable+0x84>)
 80225e8:	4293      	cmp	r3, r2
 80225ea:	d103      	bne.n	80225f4 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 80225ec:	4815      	ldr	r0, [pc, #84]	; (8022644 <XMC_USIC_CH_Enable+0x88>)
 80225ee:	f000 f9c7 	bl	8022980 <XMC_USIC_Enable>
 80225f2:	e00a      	b.n	802260a <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 80225f4:	687b      	ldr	r3, [r7, #4]
 80225f6:	4a14      	ldr	r2, [pc, #80]	; (8022648 <XMC_USIC_CH_Enable+0x8c>)
 80225f8:	4293      	cmp	r3, r2
 80225fa:	d003      	beq.n	8022604 <XMC_USIC_CH_Enable+0x48>
 80225fc:	687b      	ldr	r3, [r7, #4]
 80225fe:	4a13      	ldr	r2, [pc, #76]	; (802264c <XMC_USIC_CH_Enable+0x90>)
 8022600:	4293      	cmp	r3, r2
 8022602:	d102      	bne.n	802260a <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8022604:	4812      	ldr	r0, [pc, #72]	; (8022650 <XMC_USIC_CH_Enable+0x94>)
 8022606:	f000 f9bb 	bl	8022980 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 802260a:	687b      	ldr	r3, [r7, #4]
 802260c:	2203      	movs	r2, #3
 802260e:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8022610:	bf00      	nop
 8022612:	687b      	ldr	r3, [r7, #4]
 8022614:	68db      	ldr	r3, [r3, #12]
 8022616:	f003 0301 	and.w	r3, r3, #1
 802261a:	2b00      	cmp	r3, #0
 802261c:	d0f9      	beq.n	8022612 <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 802261e:	687b      	ldr	r3, [r7, #4]
 8022620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022622:	f023 020f 	bic.w	r2, r3, #15
 8022626:	687b      	ldr	r3, [r7, #4]
 8022628:	641a      	str	r2, [r3, #64]	; 0x40
}
 802262a:	3708      	adds	r7, #8
 802262c:	46bd      	mov	sp, r7
 802262e:	bd80      	pop	{r7, pc}
 8022630:	40030000 	.word	0x40030000
 8022634:	40030200 	.word	0x40030200
 8022638:	40030008 	.word	0x40030008
 802263c:	48020000 	.word	0x48020000
 8022640:	48020200 	.word	0x48020200
 8022644:	48020008 	.word	0x48020008
 8022648:	48024000 	.word	0x48024000
 802264c:	48024200 	.word	0x48024200
 8022650:	48024008 	.word	0x48024008

08022654 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8022654:	b580      	push	{r7, lr}
 8022656:	b08e      	sub	sp, #56	; 0x38
 8022658:	af00      	add	r7, sp, #0
 802265a:	60f8      	str	r0, [r7, #12]
 802265c:	60b9      	str	r1, [r7, #8]
 802265e:	607a      	str	r2, [r7, #4]

  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8022660:	68bb      	ldr	r3, [r7, #8]
 8022662:	2b63      	cmp	r3, #99	; 0x63
 8022664:	d95a      	bls.n	802271c <XMC_USIC_CH_SetBaudrate+0xc8>
 8022666:	687b      	ldr	r3, [r7, #4]
 8022668:	2b00      	cmp	r3, #0
 802266a:	d057      	beq.n	802271c <XMC_USIC_CH_SetBaudrate+0xc8>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 802266c:	f7fd fff4 	bl	8020658 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8022670:	4602      	mov	r2, r0
 8022672:	4b2f      	ldr	r3, [pc, #188]	; (8022730 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8022674:	fba3 2302 	umull	r2, r3, r3, r2
 8022678:	095b      	lsrs	r3, r3, #5
 802267a:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 802267c:	68bb      	ldr	r3, [r7, #8]
 802267e:	4a2c      	ldr	r2, [pc, #176]	; (8022730 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8022680:	fba2 2303 	umull	r2, r3, r2, r3
 8022684:	095b      	lsrs	r3, r3, #5
 8022686:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1024U;
 8022688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802268c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 802268e:	2301      	movs	r3, #1
 8022690:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8022692:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8022696:	627b      	str	r3, [r7, #36]	; 0x24

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 8022698:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802269c:	633b      	str	r3, [r7, #48]	; 0x30
 802269e:	e022      	b.n	80226e6 <XMC_USIC_CH_SetBaudrate+0x92>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 80226a0:	6a3b      	ldr	r3, [r7, #32]
 80226a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80226a4:	fb02 f203 	mul.w	r2, r2, r3
 80226a8:	68bb      	ldr	r3, [r7, #8]
 80226aa:	6879      	ldr	r1, [r7, #4]
 80226ac:	fb01 f303 	mul.w	r3, r1, r3
 80226b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80226b4:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 80226b6:	69fb      	ldr	r3, [r7, #28]
 80226b8:	0a9b      	lsrs	r3, r3, #10
 80226ba:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 80226bc:	69fb      	ldr	r3, [r7, #28]
 80226be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80226c2:	617b      	str	r3, [r7, #20]

      if ((pdiv_int <= 1024U) && (pdiv_frac < pdiv_frac_min))
 80226c4:	69bb      	ldr	r3, [r7, #24]
 80226c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80226ca:	d809      	bhi.n	80226e0 <XMC_USIC_CH_SetBaudrate+0x8c>
 80226cc:	697a      	ldr	r2, [r7, #20]
 80226ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80226d0:	429a      	cmp	r2, r3
 80226d2:	d205      	bcs.n	80226e0 <XMC_USIC_CH_SetBaudrate+0x8c>
      {
        pdiv_frac_min = pdiv_frac;
 80226d4:	697b      	ldr	r3, [r7, #20]
 80226d6:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 80226d8:	69bb      	ldr	r3, [r7, #24]
 80226da:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 80226dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80226de:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1024U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 80226e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80226e2:	3b01      	subs	r3, #1
 80226e4:	633b      	str	r3, [r7, #48]	; 0x30
 80226e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80226e8:	2b00      	cmp	r3, #0
 80226ea:	d1d9      	bne.n	80226a0 <XMC_USIC_CH_SetBaudrate+0x4c>
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);
 80226ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80226ee:	3b01      	subs	r3, #1
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 80226f0:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80226f4:	68fb      	ldr	r3, [r7, #12]
 80226f6:	611a      	str	r2, [r3, #16]
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80226f8:	68fb      	ldr	r3, [r7, #12]
 80226fa:	695a      	ldr	r2, [r3, #20]
 80226fc:	4b0d      	ldr	r3, [pc, #52]	; (8022734 <XMC_USIC_CH_SetBaudrate+0xe0>)
 80226fe:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8022700:	687a      	ldr	r2, [r7, #4]
 8022702:	3a01      	subs	r2, #1
 8022704:	0292      	lsls	r2, r2, #10
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8022706:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8022708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802270a:	3b01      	subs	r3, #1
 802270c:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 802270e:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8022710:	68fb      	ldr	r3, [r7, #12]
 8022712:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8022714:	2300      	movs	r3, #0
 8022716:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 802271a:	e002      	b.n	8022722 <XMC_USIC_CH_SetBaudrate+0xce>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 802271c:	2301      	movs	r3, #1
 802271e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  return status;
 8022722:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8022726:	4618      	mov	r0, r3
 8022728:	3738      	adds	r7, #56	; 0x38
 802272a:	46bd      	mov	sp, r7
 802272c:	bd80      	pop	{r7, pc}
 802272e:	bf00      	nop
 8022730:	51eb851f 	.word	0x51eb851f
 8022734:	fc0080ef 	.word	0xfc0080ef

08022738 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
 8022738:	b580      	push	{r7, lr}
 802273a:	b08c      	sub	sp, #48	; 0x30
 802273c:	af00      	add	r7, sp, #0
 802273e:	60f8      	str	r0, [r7, #12]
 8022740:	60b9      	str	r1, [r7, #8]
 8022742:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8022744:	f7fd ff88 	bl	8020658 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8022748:	4603      	mov	r3, r0
 802274a:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
 802274c:	68bb      	ldr	r3, [r7, #8]
 802274e:	687a      	ldr	r2, [r7, #4]
 8022750:	fb02 f303 	mul.w	r3, r2, r3
 8022754:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
 8022756:	2301      	movs	r3, #1
 8022758:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
 802275a:	6a3a      	ldr	r2, [r7, #32]
 802275c:	69fb      	ldr	r3, [r7, #28]
 802275e:	429a      	cmp	r2, r3
 8022760:	dd5f      	ble.n	8022822 <XMC_USIC_CH_SetBaudrateEx+0xea>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8022762:	6a3a      	ldr	r2, [r7, #32]
 8022764:	69fb      	ldr	r3, [r7, #28]
 8022766:	fb92 f3f3 	sdiv	r3, r2, r3
 802276a:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
 802276c:	e010      	b.n	8022790 <XMC_USIC_CH_SetBaudrateEx+0x58>
    {
      pdiv++;
 802276e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022770:	3301      	adds	r3, #1
 8022772:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
 8022774:	68bb      	ldr	r3, [r7, #8]
 8022776:	687a      	ldr	r2, [r7, #4]
 8022778:	fb02 f303 	mul.w	r3, r2, r3
 802277c:	461a      	mov	r2, r3
 802277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022780:	fb03 f302 	mul.w	r3, r3, r2
 8022784:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8022786:	6a3a      	ldr	r2, [r7, #32]
 8022788:	69fb      	ldr	r3, [r7, #28]
 802278a:	fb92 f3f3 	sdiv	r3, r2, r3
 802278e:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 8022790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022792:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8022796:	4293      	cmp	r3, r2
 8022798:	d8e9      	bhi.n	802276e <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 802279a:	6a3a      	ldr	r2, [r7, #32]
 802279c:	687b      	ldr	r3, [r7, #4]
 802279e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80227a0:	fb01 f303 	mul.w	r3, r1, r3
 80227a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80227a6:	fb01 f303 	mul.w	r3, r1, r3
 80227aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80227ae:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 80227b0:	6a3a      	ldr	r2, [r7, #32]
 80227b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80227b4:	3301      	adds	r3, #1
 80227b6:	6879      	ldr	r1, [r7, #4]
 80227b8:	fb01 f303 	mul.w	r3, r1, r3
 80227bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80227be:	fb01 f303 	mul.w	r3, r1, r3
 80227c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80227c6:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 80227c8:	68ba      	ldr	r2, [r7, #8]
 80227ca:	697b      	ldr	r3, [r7, #20]
 80227cc:	1ad3      	subs	r3, r2, r3
 80227ce:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80227d2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80227d6:	68b9      	ldr	r1, [r7, #8]
 80227d8:	69bb      	ldr	r3, [r7, #24]
 80227da:	1acb      	subs	r3, r1, r3
 80227dc:	2b00      	cmp	r3, #0
 80227de:	bfb8      	it	lt
 80227e0:	425b      	neglt	r3, r3
 80227e2:	429a      	cmp	r2, r3
 80227e4:	da02      	bge.n	80227ec <XMC_USIC_CH_SetBaudrateEx+0xb4>
    {
      divider_step += 1;
 80227e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80227e8:	3301      	adds	r3, #1
 80227ea:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
 80227ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80227ee:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80227f2:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 80227f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80227f6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80227fa:	68fb      	ldr	r3, [r7, #12]
 80227fc:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80227fe:	68fb      	ldr	r3, [r7, #12]
 8022800:	695a      	ldr	r2, [r3, #20]
 8022802:	4b0c      	ldr	r3, [pc, #48]	; (8022834 <XMC_USIC_CH_SetBaudrateEx+0xfc>)
 8022804:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8022806:	687a      	ldr	r2, [r7, #4]
 8022808:	3a01      	subs	r2, #1
 802280a:	0292      	lsls	r2, r2, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 802280c:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);
 802280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022810:	3b01      	subs	r3, #1
 8022812:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8022814:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8022816:	68fb      	ldr	r3, [r7, #12]
 8022818:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 802281a:	2300      	movs	r3, #0
 802281c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8022820:	e002      	b.n	8022828 <XMC_USIC_CH_SetBaudrateEx+0xf0>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8022822:	2301      	movs	r3, #1
 8022824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 8022828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 802282c:	4618      	mov	r0, r3
 802282e:	3730      	adds	r7, #48	; 0x30
 8022830:	46bd      	mov	sp, r7
 8022832:	bd80      	pop	{r7, pc}
 8022834:	fc0080ef 	.word	0xfc0080ef

08022838 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8022838:	b480      	push	{r7}
 802283a:	b085      	sub	sp, #20
 802283c:	af00      	add	r7, sp, #0
 802283e:	60f8      	str	r0, [r7, #12]
 8022840:	60b9      	str	r1, [r7, #8]
 8022842:	603b      	str	r3, [r7, #0]
 8022844:	4613      	mov	r3, r2
 8022846:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8022848:	68fb      	ldr	r3, [r7, #12]
 802284a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 802284e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8022852:	68fb      	ldr	r3, [r7, #12]
 8022854:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8022858:	68fb      	ldr	r3, [r7, #12]
 802285a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 802285e:	4b09      	ldr	r3, [pc, #36]	; (8022884 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8022860:	4013      	ands	r3, r2
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8022862:	683a      	ldr	r2, [r7, #0]
 8022864:	0211      	lsls	r1, r2, #8
 8022866:	68ba      	ldr	r2, [r7, #8]
 8022868:	4311      	orrs	r1, r2
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 802286a:	79fa      	ldrb	r2, [r7, #7]
 802286c:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 802286e:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
 8022870:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8022872:	68fb      	ldr	r3, [r7, #12]
 8022874:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8022878:	3714      	adds	r7, #20
 802287a:	46bd      	mov	sp, r7
 802287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022880:	4770      	bx	lr
 8022882:	bf00      	nop
 8022884:	f8ffc0c0 	.word	0xf8ffc0c0

08022888 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8022888:	b480      	push	{r7}
 802288a:	b085      	sub	sp, #20
 802288c:	af00      	add	r7, sp, #0
 802288e:	60f8      	str	r0, [r7, #12]
 8022890:	60b9      	str	r1, [r7, #8]
 8022892:	603b      	str	r3, [r7, #0]
 8022894:	4613      	mov	r3, r2
 8022896:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8022898:	68fb      	ldr	r3, [r7, #12]
 802289a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 802289e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80228a2:	68fb      	ldr	r3, [r7, #12]
 80228a4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80228a8:	68fb      	ldr	r3, [r7, #12]
 80228aa:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80228ae:	4b0a      	ldr	r3, [pc, #40]	; (80228d8 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 80228b0:	4013      	ands	r3, r2
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 80228b2:	683a      	ldr	r2, [r7, #0]
 80228b4:	0211      	lsls	r1, r2, #8
 80228b6:	68ba      	ldr	r2, [r7, #8]
 80228b8:	4311      	orrs	r1, r2
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 80228ba:	79fa      	ldrb	r2, [r7, #7]
 80228bc:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 80228be:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80228c0:	4313      	orrs	r3, r2
 80228c2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80228c6:	68fb      	ldr	r3, [r7, #12]
 80228c8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                               (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 80228cc:	3714      	adds	r7, #20
 80228ce:	46bd      	mov	sp, r7
 80228d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228d4:	4770      	bx	lr
 80228d6:	bf00      	nop
 80228d8:	efffc0c0 	.word	0xefffc0c0

080228dc <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:
}

void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_FIFO_SIZE_t size,
    const uint32_t limit)
{
 80228dc:	b480      	push	{r7}
 80228de:	b085      	sub	sp, #20
 80228e0:	af00      	add	r7, sp, #0
 80228e2:	60f8      	str	r0, [r7, #12]
 80228e4:	460b      	mov	r3, r1
 80228e6:	607a      	str	r2, [r7, #4]
 80228e8:	72fb      	strb	r3, [r7, #11]
  XMC_UNUSED_ARG(size);

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 80228ea:	68fb      	ldr	r3, [r7, #12]
 80228ec:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80228f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
                              (limit << USIC_CH_RBCTR_LIMIT_Pos));
 80228f4:	687b      	ldr	r3, [r7, #4]
 80228f6:	021b      	lsls	r3, r3, #8
    const XMC_USIC_CH_FIFO_SIZE_t size,
    const uint32_t limit)
{
  XMC_UNUSED_ARG(size);

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 80228f8:	431a      	orrs	r2, r3
 80228fa:	68fb      	ldr	r3, [r7, #12]
 80228fc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                              (limit << USIC_CH_RBCTR_LIMIT_Pos));
}
 8022900:	3714      	adds	r7, #20
 8022902:	46bd      	mov	sp, r7
 8022904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022908:	4770      	bx	lr
 802290a:	bf00      	nop

0802290c <XMC_USIC_CH_SetInterruptNodePointer>:

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 802290c:	b480      	push	{r7}
 802290e:	b085      	sub	sp, #20
 8022910:	af00      	add	r7, sp, #0
 8022912:	60f8      	str	r0, [r7, #12]
 8022914:	460b      	mov	r3, r1
 8022916:	607a      	str	r2, [r7, #4]
 8022918:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 802291a:	68fb      	ldr	r3, [r7, #12]
 802291c:	699a      	ldr	r2, [r3, #24]
 802291e:	7afb      	ldrb	r3, [r7, #11]
 8022920:	2107      	movs	r1, #7
 8022922:	fa01 f303 	lsl.w	r3, r1, r3
 8022926:	43db      	mvns	r3, r3
 8022928:	401a      	ands	r2, r3
                             (service_request << (uint32_t)interrupt_node));
 802292a:	7afb      	ldrb	r3, [r7, #11]
 802292c:	6879      	ldr	r1, [r7, #4]
 802292e:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8022932:	431a      	orrs	r2, r3
 8022934:	68fb      	ldr	r3, [r7, #12]
 8022936:	619a      	str	r2, [r3, #24]
                             (service_request << (uint32_t)interrupt_node));
}
 8022938:	3714      	adds	r7, #20
 802293a:	46bd      	mov	sp, r7
 802293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022940:	4770      	bx	lr
 8022942:	bf00      	nop

08022944 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:
}

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 8022944:	b480      	push	{r7}
 8022946:	b085      	sub	sp, #20
 8022948:	af00      	add	r7, sp, #0
 802294a:	60f8      	str	r0, [r7, #12]
 802294c:	460b      	mov	r3, r1
 802294e:	607a      	str	r2, [r7, #4]
 8022950:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8022952:	68fb      	ldr	r3, [r7, #12]
 8022954:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8022958:	7afb      	ldrb	r3, [r7, #11]
 802295a:	2107      	movs	r1, #7
 802295c:	fa01 f303 	lsl.w	r3, r1, r3
 8022960:	43db      	mvns	r3, r3
 8022962:	401a      	ands	r2, r3
                              (service_request << (uint32_t)interrupt_node));
 8022964:	7afb      	ldrb	r3, [r7, #11]
 8022966:	6879      	ldr	r1, [r7, #4]
 8022968:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 802296c:	431a      	orrs	r2, r3
 802296e:	68fb      	ldr	r3, [r7, #12]
 8022970:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                              (service_request << (uint32_t)interrupt_node));
}
 8022974:	3714      	adds	r7, #20
 8022976:	46bd      	mov	sp, r7
 8022978:	f85d 7b04 	ldr.w	r7, [sp], #4
 802297c:	4770      	bx	lr
 802297e:	bf00      	nop

08022980 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8022980:	b580      	push	{r7, lr}
 8022982:	b082      	sub	sp, #8
 8022984:	af00      	add	r7, sp, #0
 8022986:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8022988:	687b      	ldr	r3, [r7, #4]
 802298a:	4a28      	ldr	r2, [pc, #160]	; (8022a2c <XMC_USIC_Enable+0xac>)
 802298c:	4293      	cmp	r3, r2
 802298e:	d118      	bne.n	80229c2 <XMC_USIC_Enable+0x42>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 8022990:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8022994:	f7fd ffa4 	bl	80208e0 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
 8022998:	bf00      	nop
 802299a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 802299e:	f7fd ffbb 	bl	8020918 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 80229a2:	4603      	mov	r3, r0
 80229a4:	2b00      	cmp	r3, #0
 80229a6:	d1f8      	bne.n	802299a <XMC_USIC_Enable+0x1a>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 80229a8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80229ac:	f7fd fe14 	bl	80205d8 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 80229b0:	bf00      	nop
 80229b2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80229b6:	f7fd fe2b 	bl	8020610 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 80229ba:	4603      	mov	r3, r0
 80229bc:	2b00      	cmp	r3, #0
 80229be:	d1f8      	bne.n	80229b2 <XMC_USIC_Enable+0x32>
 80229c0:	e030      	b.n	8022a24 <XMC_USIC_Enable+0xa4>
#endif
  }
#if defined(USIC1)
  else if (usic == USIC1)
 80229c2:	687b      	ldr	r3, [r7, #4]
 80229c4:	4a1a      	ldr	r2, [pc, #104]	; (8022a30 <XMC_USIC_Enable+0xb0>)
 80229c6:	4293      	cmp	r3, r2
 80229c8:	d114      	bne.n	80229f4 <XMC_USIC_Enable+0x74>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 80229ca:	481a      	ldr	r0, [pc, #104]	; (8022a34 <XMC_USIC_Enable+0xb4>)
 80229cc:	f7fd ff88 	bl	80208e0 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
 80229d0:	bf00      	nop
 80229d2:	4818      	ldr	r0, [pc, #96]	; (8022a34 <XMC_USIC_Enable+0xb4>)
 80229d4:	f7fd ffa0 	bl	8020918 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 80229d8:	4603      	mov	r3, r0
 80229da:	2b00      	cmp	r3, #0
 80229dc:	d1f9      	bne.n	80229d2 <XMC_USIC_Enable+0x52>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 80229de:	4815      	ldr	r0, [pc, #84]	; (8022a34 <XMC_USIC_Enable+0xb4>)
 80229e0:	f7fd fdfa 	bl	80205d8 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 80229e4:	bf00      	nop
 80229e6:	4813      	ldr	r0, [pc, #76]	; (8022a34 <XMC_USIC_Enable+0xb4>)
 80229e8:	f7fd fe12 	bl	8020610 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 80229ec:	4603      	mov	r3, r0
 80229ee:	2b00      	cmp	r3, #0
 80229f0:	d1f9      	bne.n	80229e6 <XMC_USIC_Enable+0x66>
 80229f2:	e017      	b.n	8022a24 <XMC_USIC_Enable+0xa4>
#endif
  }
#endif
#if defined(USIC2)
  else if (usic == USIC2)
 80229f4:	687b      	ldr	r3, [r7, #4]
 80229f6:	4a10      	ldr	r2, [pc, #64]	; (8022a38 <XMC_USIC_Enable+0xb8>)
 80229f8:	4293      	cmp	r3, r2
 80229fa:	d113      	bne.n	8022a24 <XMC_USIC_Enable+0xa4>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
 80229fc:	480f      	ldr	r0, [pc, #60]	; (8022a3c <XMC_USIC_Enable+0xbc>)
 80229fe:	f7fd ff6f 	bl	80208e0 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC2));
 8022a02:	bf00      	nop
 8022a04:	480d      	ldr	r0, [pc, #52]	; (8022a3c <XMC_USIC_Enable+0xbc>)
 8022a06:	f7fd ff87 	bl	8020918 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8022a0a:	4603      	mov	r3, r0
 8022a0c:	2b00      	cmp	r3, #0
 8022a0e:	d1f9      	bne.n	8022a04 <XMC_USIC_Enable+0x84>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8022a10:	480a      	ldr	r0, [pc, #40]	; (8022a3c <XMC_USIC_Enable+0xbc>)
 8022a12:	f7fd fde1 	bl	80205d8 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC2));
 8022a16:	bf00      	nop
 8022a18:	4808      	ldr	r0, [pc, #32]	; (8022a3c <XMC_USIC_Enable+0xbc>)
 8022a1a:	f7fd fdf9 	bl	8020610 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8022a1e:	4603      	mov	r3, r0
 8022a20:	2b00      	cmp	r3, #0
 8022a22:	d1f9      	bne.n	8022a18 <XMC_USIC_Enable+0x98>
#endif
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8022a24:	3708      	adds	r7, #8
 8022a26:	46bd      	mov	sp, r7
 8022a28:	bd80      	pop	{r7, pc}
 8022a2a:	bf00      	nop
 8022a2c:	40030008 	.word	0x40030008
 8022a30:	48020008 	.word	0x48020008
 8022a34:	10000080 	.word	0x10000080
 8022a38:	48024008 	.word	0x48024008
 8022a3c:	10000100 	.word	0x10000100

08022a40 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8022a40:	b580      	push	{r7, lr}
 8022a42:	b084      	sub	sp, #16
 8022a44:	af00      	add	r7, sp, #0
 8022a46:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8022a48:	4b14      	ldr	r3, [pc, #80]	; (8022a9c <_sbrk+0x5c>)
 8022a4a:	681b      	ldr	r3, [r3, #0]
 8022a4c:	2b00      	cmp	r3, #0
 8022a4e:	d102      	bne.n	8022a56 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8022a50:	4b12      	ldr	r3, [pc, #72]	; (8022a9c <_sbrk+0x5c>)
 8022a52:	4a13      	ldr	r2, [pc, #76]	; (8022aa0 <_sbrk+0x60>)
 8022a54:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8022a56:	4b11      	ldr	r3, [pc, #68]	; (8022a9c <_sbrk+0x5c>)
 8022a58:	681b      	ldr	r3, [r3, #0]
 8022a5a:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8022a5c:	687b      	ldr	r3, [r7, #4]
 8022a5e:	3303      	adds	r3, #3
 8022a60:	f023 0303 	bic.w	r3, r3, #3
 8022a64:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8022a66:	4b0d      	ldr	r3, [pc, #52]	; (8022a9c <_sbrk+0x5c>)
 8022a68:	681a      	ldr	r2, [r3, #0]
 8022a6a:	687b      	ldr	r3, [r7, #4]
 8022a6c:	4413      	add	r3, r2
 8022a6e:	4a0d      	ldr	r2, [pc, #52]	; (8022aa4 <_sbrk+0x64>)
 8022a70:	4293      	cmp	r3, r2
 8022a72:	d207      	bcs.n	8022a84 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8022a74:	4b09      	ldr	r3, [pc, #36]	; (8022a9c <_sbrk+0x5c>)
 8022a76:	681a      	ldr	r2, [r3, #0]
 8022a78:	687b      	ldr	r3, [r7, #4]
 8022a7a:	4413      	add	r3, r2
 8022a7c:	4a07      	ldr	r2, [pc, #28]	; (8022a9c <_sbrk+0x5c>)
 8022a7e:	6013      	str	r3, [r2, #0]
    return (base);
 8022a80:	68fb      	ldr	r3, [r7, #12]
 8022a82:	e006      	b.n	8022a92 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8022a84:	f007 f966 	bl	8029d54 <__errno>
 8022a88:	4602      	mov	r2, r0
 8022a8a:	230c      	movs	r3, #12
 8022a8c:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8022a8e:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8022a92:	4618      	mov	r0, r3
 8022a94:	3710      	adds	r7, #16
 8022a96:	46bd      	mov	sp, r7
 8022a98:	bd80      	pop	{r7, pc}
 8022a9a:	bf00      	nop
 8022a9c:	1ffe8b40 	.word	0x1ffe8b40
 8022aa0:	200030a0 	.word	0x200030a0
 8022aa4:	2003ffc0 	.word	0x2003ffc0

08022aa8 <_init>:

/* Init */
void _init(void)
{}
 8022aa8:	b480      	push	{r7}
 8022aaa:	af00      	add	r7, sp, #0
 8022aac:	46bd      	mov	sp, r7
 8022aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ab2:	4770      	bx	lr

08022ab4 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8022ab4:	b480      	push	{r7}
 8022ab6:	b083      	sub	sp, #12
 8022ab8:	af00      	add	r7, sp, #0
 8022aba:	6078      	str	r0, [r7, #4]
 8022abc:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 8022abe:	687b      	ldr	r3, [r7, #4]
 8022ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8022ac2:	683b      	ldr	r3, [r7, #0]
 8022ac4:	43db      	mvns	r3, r3
 8022ac6:	401a      	ands	r2, r3
 8022ac8:	687b      	ldr	r3, [r7, #4]
 8022aca:	641a      	str	r2, [r3, #64]	; 0x40
}
 8022acc:	370c      	adds	r7, #12
 8022ace:	46bd      	mov	sp, r7
 8022ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ad4:	4770      	bx	lr
 8022ad6:	bf00      	nop

08022ad8 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8022ad8:	b480      	push	{r7}
 8022ada:	b083      	sub	sp, #12
 8022adc:	af00      	add	r7, sp, #0
 8022ade:	6078      	str	r0, [r7, #4]
 8022ae0:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 8022ae2:	687b      	ldr	r3, [r7, #4]
 8022ae4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8022ae8:	683b      	ldr	r3, [r7, #0]
 8022aea:	43db      	mvns	r3, r3
 8022aec:	401a      	ands	r2, r3
 8022aee:	687b      	ldr	r3, [r7, #4]
 8022af0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8022af4:	370c      	adds	r7, #12
 8022af6:	46bd      	mov	sp, r7
 8022af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022afc:	4770      	bx	lr
 8022afe:	bf00      	nop

08022b00 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8022b00:	b480      	push	{r7}
 8022b02:	b083      	sub	sp, #12
 8022b04:	af00      	add	r7, sp, #0
 8022b06:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8022b08:	687b      	ldr	r3, [r7, #4]
 8022b0a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8022b0e:	f003 0308 	and.w	r3, r3, #8
 8022b12:	2b00      	cmp	r3, #0
 8022b14:	bf14      	ite	ne
 8022b16:	2301      	movne	r3, #1
 8022b18:	2300      	moveq	r3, #0
 8022b1a:	b2db      	uxtb	r3, r3
}
 8022b1c:	4618      	mov	r0, r3
 8022b1e:	370c      	adds	r7, #12
 8022b20:	46bd      	mov	sp, r7
 8022b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b26:	4770      	bx	lr

08022b28 <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
 8022b28:	b580      	push	{r7, lr}
 8022b2a:	b084      	sub	sp, #16
 8022b2c:	af00      	add	r7, sp, #0
 8022b2e:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8022b30:	2300      	movs	r3, #0
 8022b32:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))));

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 8022b34:	687b      	ldr	r3, [r7, #4]
 8022b36:	685b      	ldr	r3, [r3, #4]
 8022b38:	685b      	ldr	r3, [r3, #4]
 8022b3a:	4798      	blx	r3
 8022b3c:	4603      	mov	r3, r0
 8022b3e:	73fb      	strb	r3, [r7, #15]

  return status;
 8022b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8022b42:	4618      	mov	r0, r3
 8022b44:	3710      	adds	r7, #16
 8022b46:	46bd      	mov	sp, r7
 8022b48:	bd80      	pop	{r7, pc}
 8022b4a:	bf00      	nop

08022b4c <UART_lReceiveHandler>:
 * param[in]  handle UART APP handle pointer of type UART_t*
 *
 * return void
 */
void UART_lReceiveHandler(const UART_t * const handle)
{
 8022b4c:	b590      	push	{r4, r7, lr}
 8022b4e:	b085      	sub	sp, #20
 8022b50:	af00      	add	r7, sp, #0
 8022b52:	6078      	str	r0, [r7, #4]
  UART_RUNTIME_t * ptr_runtime = handle->runtime;
 8022b54:	687b      	ldr	r3, [r7, #4]
 8022b56:	689b      	ldr	r3, [r3, #8]
 8022b58:	60fb      	str	r3, [r7, #12]

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8022b5a:	687b      	ldr	r3, [r7, #4]
 8022b5c:	685b      	ldr	r3, [r3, #4]
 8022b5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022b62:	2b00      	cmp	r3, #0
 8022b64:	d04e      	beq.n	8022c04 <UART_lReceiveHandler+0xb8>
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8022b66:	e032      	b.n	8022bce <UART_lReceiveHandler+0x82>
    {
      if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8022b68:	68fb      	ldr	r3, [r7, #12]
 8022b6a:	695a      	ldr	r2, [r3, #20]
 8022b6c:	68fb      	ldr	r3, [r7, #12]
 8022b6e:	691b      	ldr	r3, [r3, #16]
 8022b70:	429a      	cmp	r2, r3
 8022b72:	d211      	bcs.n	8022b98 <UART_lReceiveHandler+0x4c>
      {
        /*Read all the content of Receive FIFO */
        ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8022b74:	68fb      	ldr	r3, [r7, #12]
 8022b76:	685a      	ldr	r2, [r3, #4]
 8022b78:	68fb      	ldr	r3, [r7, #12]
 8022b7a:	695b      	ldr	r3, [r3, #20]
 8022b7c:	18d4      	adds	r4, r2, r3
 8022b7e:	687b      	ldr	r3, [r7, #4]
 8022b80:	681b      	ldr	r3, [r3, #0]
 8022b82:	4618      	mov	r0, r3
 8022b84:	f7ff fd00 	bl	8022588 <XMC_UART_CH_GetReceivedData>
 8022b88:	4603      	mov	r3, r0
 8022b8a:	b2db      	uxtb	r3, r3
 8022b8c:	7023      	strb	r3, [r4, #0]
        (ptr_runtime->rx_data_index)++;
 8022b8e:	68fb      	ldr	r3, [r7, #12]
 8022b90:	695b      	ldr	r3, [r3, #20]
 8022b92:	1c5a      	adds	r2, r3, #1
 8022b94:	68fb      	ldr	r3, [r7, #12]
 8022b96:	615a      	str	r2, [r3, #20]
      }

      if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8022b98:	68fb      	ldr	r3, [r7, #12]
 8022b9a:	695a      	ldr	r2, [r3, #20]
 8022b9c:	68fb      	ldr	r3, [r7, #12]
 8022b9e:	691b      	ldr	r3, [r3, #16]
 8022ba0:	429a      	cmp	r2, r3
 8022ba2:	d114      	bne.n	8022bce <UART_lReceiveHandler+0x82>
      {
        /*Reception complete*/
        ptr_runtime->rx_busy = false;
 8022ba4:	68fb      	ldr	r3, [r7, #12]
 8022ba6:	2200      	movs	r2, #0
 8022ba8:	765a      	strb	r2, [r3, #25]
        /*Disable both standard receive and alternative receive FIFO events*/
        XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,
 8022baa:	687b      	ldr	r3, [r7, #4]
 8022bac:	681b      	ldr	r3, [r3, #0]
 8022bae:	4618      	mov	r0, r3
 8022bb0:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8022bb4:	f7ff ff90 	bl	8022ad8 <XMC_USIC_CH_RXFIFO_DisableEvent>
            (uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
            (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
        if (handle->config->rx_cbhandler != NULL)
 8022bb8:	687b      	ldr	r3, [r7, #4]
 8022bba:	685b      	ldr	r3, [r3, #4]
 8022bbc:	689b      	ldr	r3, [r3, #8]
 8022bbe:	2b00      	cmp	r3, #0
 8022bc0:	d004      	beq.n	8022bcc <UART_lReceiveHandler+0x80>
        {
          /*Execute the 'End of reception' callback function*/
          handle->config->rx_cbhandler();
 8022bc2:	687b      	ldr	r3, [r7, #4]
 8022bc4:	685b      	ldr	r3, [r3, #4]
 8022bc6:	689b      	ldr	r3, [r3, #8]
 8022bc8:	4798      	blx	r3
        }
        break;
 8022bca:	e00b      	b.n	8022be4 <UART_lReceiveHandler+0x98>
 8022bcc:	e00a      	b.n	8022be4 <UART_lReceiveHandler+0x98>
  UART_RUNTIME_t * ptr_runtime = handle->runtime;

  if (handle->config->rx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
  {
    /*When Receive FIFO is enabled*/
    while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8022bce:	687b      	ldr	r3, [r7, #4]
 8022bd0:	681b      	ldr	r3, [r3, #0]
 8022bd2:	4618      	mov	r0, r3
 8022bd4:	f7ff ff94 	bl	8022b00 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8022bd8:	4603      	mov	r3, r0
 8022bda:	f083 0301 	eor.w	r3, r3, #1
 8022bde:	b2db      	uxtb	r3, r3
 8022be0:	2b00      	cmp	r3, #0
 8022be2:	d1c1      	bne.n	8022b68 <UART_lReceiveHandler+0x1c>
        }
        break;
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8022be4:	68fb      	ldr	r3, [r7, #12]
 8022be6:	695a      	ldr	r2, [r3, #20]
 8022be8:	68fb      	ldr	r3, [r7, #12]
 8022bea:	691b      	ldr	r3, [r3, #16]
 8022bec:	429a      	cmp	r2, r3
 8022bee:	d23a      	bcs.n	8022c66 <UART_lReceiveHandler+0x11a>
    {
      UART_lReconfigureRxFIFO(handle,
          (uint32_t)(ptr_runtime->rx_data_count - ptr_runtime->rx_data_index));
 8022bf0:	68fb      	ldr	r3, [r7, #12]
 8022bf2:	691a      	ldr	r2, [r3, #16]
 8022bf4:	68fb      	ldr	r3, [r7, #12]
 8022bf6:	695b      	ldr	r3, [r3, #20]
      }
    }
    /*Set the trigger limit if data still to be received*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
    {
      UART_lReconfigureRxFIFO(handle,
 8022bf8:	1ad3      	subs	r3, r2, r3
 8022bfa:	6878      	ldr	r0, [r7, #4]
 8022bfc:	4619      	mov	r1, r3
 8022bfe:	f000 f835 	bl	8022c6c <UART_lReconfigureRxFIFO>
 8022c02:	e030      	b.n	8022c66 <UART_lReceiveHandler+0x11a>
    }
  }
  else
  {
    /*When RxFIFO is disabled*/
    if (ptr_runtime->rx_data_index < ptr_runtime->rx_data_count)
 8022c04:	68fb      	ldr	r3, [r7, #12]
 8022c06:	695a      	ldr	r2, [r3, #20]
 8022c08:	68fb      	ldr	r3, [r7, #12]
 8022c0a:	691b      	ldr	r3, [r3, #16]
 8022c0c:	429a      	cmp	r2, r3
 8022c0e:	d211      	bcs.n	8022c34 <UART_lReceiveHandler+0xe8>
    {
      ptr_runtime->rx_data[ptr_runtime->rx_data_index] = (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 8022c10:	68fb      	ldr	r3, [r7, #12]
 8022c12:	685a      	ldr	r2, [r3, #4]
 8022c14:	68fb      	ldr	r3, [r7, #12]
 8022c16:	695b      	ldr	r3, [r3, #20]
 8022c18:	18d4      	adds	r4, r2, r3
 8022c1a:	687b      	ldr	r3, [r7, #4]
 8022c1c:	681b      	ldr	r3, [r3, #0]
 8022c1e:	4618      	mov	r0, r3
 8022c20:	f7ff fcb2 	bl	8022588 <XMC_UART_CH_GetReceivedData>
 8022c24:	4603      	mov	r3, r0
 8022c26:	b2db      	uxtb	r3, r3
 8022c28:	7023      	strb	r3, [r4, #0]
      (ptr_runtime->rx_data_index)++;
 8022c2a:	68fb      	ldr	r3, [r7, #12]
 8022c2c:	695b      	ldr	r3, [r3, #20]
 8022c2e:	1c5a      	adds	r2, r3, #1
 8022c30:	68fb      	ldr	r3, [r7, #12]
 8022c32:	615a      	str	r2, [r3, #20]
    }

    if (ptr_runtime->rx_data_index == ptr_runtime->rx_data_count)
 8022c34:	68fb      	ldr	r3, [r7, #12]
 8022c36:	695a      	ldr	r2, [r3, #20]
 8022c38:	68fb      	ldr	r3, [r7, #12]
 8022c3a:	691b      	ldr	r3, [r3, #16]
 8022c3c:	429a      	cmp	r2, r3
 8022c3e:	d112      	bne.n	8022c66 <UART_lReceiveHandler+0x11a>
    {
      /*Reception complete*/
      ptr_runtime->rx_busy = false;
 8022c40:	68fb      	ldr	r3, [r7, #12]
 8022c42:	2200      	movs	r2, #0
 8022c44:	765a      	strb	r2, [r3, #25]
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_DisableEvent(handle->channel,
 8022c46:	687b      	ldr	r3, [r7, #4]
 8022c48:	681b      	ldr	r3, [r3, #0]
 8022c4a:	4618      	mov	r0, r3
 8022c4c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8022c50:	f7ff ff30 	bl	8022ab4 <XMC_USIC_CH_DisableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      if (handle->config->rx_cbhandler != NULL)
 8022c54:	687b      	ldr	r3, [r7, #4]
 8022c56:	685b      	ldr	r3, [r3, #4]
 8022c58:	689b      	ldr	r3, [r3, #8]
 8022c5a:	2b00      	cmp	r3, #0
 8022c5c:	d003      	beq.n	8022c66 <UART_lReceiveHandler+0x11a>
      {
        /*Execute the 'End of reception' callback function*/
        handle->config->rx_cbhandler();
 8022c5e:	687b      	ldr	r3, [r7, #4]
 8022c60:	685b      	ldr	r3, [r3, #4]
 8022c62:	689b      	ldr	r3, [r3, #8]
 8022c64:	4798      	blx	r3
      }
    }
  }
}
 8022c66:	3714      	adds	r7, #20
 8022c68:	46bd      	mov	sp, r7
 8022c6a:	bd90      	pop	{r4, r7, pc}

08022c6c <UART_lReconfigureRxFIFO>:
 * param[in] uint8_t  number of bytes to be received.
 *
 * return void.
 */
static void UART_lReconfigureRxFIFO(const UART_t * const handle, uint32_t data_size)
{
 8022c6c:	b580      	push	{r7, lr}
 8022c6e:	b084      	sub	sp, #16
 8022c70:	af00      	add	r7, sp, #0
 8022c72:	6078      	str	r0, [r7, #4]
 8022c74:	6039      	str	r1, [r7, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val = 0U;
 8022c76:	2300      	movs	r3, #0
 8022c78:	60fb      	str	r3, [r7, #12]

  /*Get FIFO size in bytes*/
  fifo_size = (uint32_t)(0x01UL << (uint8_t)(handle->config->rx_fifo_size));
 8022c7a:	687b      	ldr	r3, [r7, #4]
 8022c7c:	685b      	ldr	r3, [r3, #4]
 8022c7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022c82:	461a      	mov	r2, r3
 8022c84:	2301      	movs	r3, #1
 8022c86:	4093      	lsls	r3, r2
 8022c88:	60bb      	str	r3, [r7, #8]
  /*If data size is more than FIFO size, configure the limit to the FIFO size*/
  if (data_size < fifo_size)
 8022c8a:	683a      	ldr	r2, [r7, #0]
 8022c8c:	68bb      	ldr	r3, [r7, #8]
 8022c8e:	429a      	cmp	r2, r3
 8022c90:	d203      	bcs.n	8022c9a <UART_lReconfigureRxFIFO+0x2e>
  {
    ret_limit_val = (uint32_t)(data_size - 1U);
 8022c92:	683b      	ldr	r3, [r7, #0]
 8022c94:	3b01      	subs	r3, #1
 8022c96:	60fb      	str	r3, [r7, #12]
 8022c98:	e002      	b.n	8022ca0 <UART_lReconfigureRxFIFO+0x34>
  }
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
 8022c9a:	68bb      	ldr	r3, [r7, #8]
 8022c9c:	3b01      	subs	r3, #1
 8022c9e:	60fb      	str	r3, [r7, #12]
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8022ca0:	687b      	ldr	r3, [r7, #4]
 8022ca2:	681a      	ldr	r2, [r3, #0]
        handle->config->rx_fifo_size, ret_limit_val);
 8022ca4:	687b      	ldr	r3, [r7, #4]
 8022ca6:	685b      	ldr	r3, [r3, #4]
  else
  {
    ret_limit_val = (uint32_t)(fifo_size - 1U);
  }
  /*Set the limit value*/
  XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel,
 8022ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022cac:	4610      	mov	r0, r2
 8022cae:	4619      	mov	r1, r3
 8022cb0:	68fa      	ldr	r2, [r7, #12]
 8022cb2:	f7ff fe13 	bl	80228dc <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
        handle->config->rx_fifo_size, ret_limit_val);
}
 8022cb6:	3710      	adds	r7, #16
 8022cb8:	46bd      	mov	sp, r7
 8022cba:	bd80      	pop	{r7, pc}

08022cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8022cbc:	b480      	push	{r7}
 8022cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8022cc0:	4b04      	ldr	r3, [pc, #16]	; (8022cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8022cc2:	68db      	ldr	r3, [r3, #12]
 8022cc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8022cc8:	0a1b      	lsrs	r3, r3, #8
}
 8022cca:	4618      	mov	r0, r3
 8022ccc:	46bd      	mov	sp, r7
 8022cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022cd2:	4770      	bx	lr
 8022cd4:	e000ed00 	.word	0xe000ed00

08022cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8022cd8:	b480      	push	{r7}
 8022cda:	b083      	sub	sp, #12
 8022cdc:	af00      	add	r7, sp, #0
 8022cde:	4603      	mov	r3, r0
 8022ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8022ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022ce6:	2b00      	cmp	r3, #0
 8022ce8:	db0b      	blt.n	8022d02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8022cea:	4908      	ldr	r1, [pc, #32]	; (8022d0c <__NVIC_EnableIRQ+0x34>)
 8022cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022cf0:	095b      	lsrs	r3, r3, #5
 8022cf2:	79fa      	ldrb	r2, [r7, #7]
 8022cf4:	f002 021f 	and.w	r2, r2, #31
 8022cf8:	2001      	movs	r0, #1
 8022cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8022cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8022d02:	370c      	adds	r7, #12
 8022d04:	46bd      	mov	sp, r7
 8022d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d0a:	4770      	bx	lr
 8022d0c:	e000e100 	.word	0xe000e100

08022d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8022d10:	b480      	push	{r7}
 8022d12:	b083      	sub	sp, #12
 8022d14:	af00      	add	r7, sp, #0
 8022d16:	4603      	mov	r3, r0
 8022d18:	6039      	str	r1, [r7, #0]
 8022d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8022d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022d20:	2b00      	cmp	r3, #0
 8022d22:	db0a      	blt.n	8022d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022d24:	490d      	ldr	r1, [pc, #52]	; (8022d5c <__NVIC_SetPriority+0x4c>)
 8022d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022d2a:	683a      	ldr	r2, [r7, #0]
 8022d2c:	b2d2      	uxtb	r2, r2
 8022d2e:	0092      	lsls	r2, r2, #2
 8022d30:	b2d2      	uxtb	r2, r2
 8022d32:	440b      	add	r3, r1
 8022d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8022d38:	e00a      	b.n	8022d50 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022d3a:	4909      	ldr	r1, [pc, #36]	; (8022d60 <__NVIC_SetPriority+0x50>)
 8022d3c:	79fb      	ldrb	r3, [r7, #7]
 8022d3e:	f003 030f 	and.w	r3, r3, #15
 8022d42:	3b04      	subs	r3, #4
 8022d44:	683a      	ldr	r2, [r7, #0]
 8022d46:	b2d2      	uxtb	r2, r2
 8022d48:	0092      	lsls	r2, r2, #2
 8022d4a:	b2d2      	uxtb	r2, r2
 8022d4c:	440b      	add	r3, r1
 8022d4e:	761a      	strb	r2, [r3, #24]
  }
}
 8022d50:	370c      	adds	r7, #12
 8022d52:	46bd      	mov	sp, r7
 8022d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d58:	4770      	bx	lr
 8022d5a:	bf00      	nop
 8022d5c:	e000e100 	.word	0xe000e100
 8022d60:	e000ed00 	.word	0xe000ed00

08022d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8022d64:	b480      	push	{r7}
 8022d66:	b089      	sub	sp, #36	; 0x24
 8022d68:	af00      	add	r7, sp, #0
 8022d6a:	60f8      	str	r0, [r7, #12]
 8022d6c:	60b9      	str	r1, [r7, #8]
 8022d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8022d70:	68fb      	ldr	r3, [r7, #12]
 8022d72:	f003 0307 	and.w	r3, r3, #7
 8022d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8022d78:	69fb      	ldr	r3, [r7, #28]
 8022d7a:	f1c3 0307 	rsb	r3, r3, #7
 8022d7e:	2b06      	cmp	r3, #6
 8022d80:	bf28      	it	cs
 8022d82:	2306      	movcs	r3, #6
 8022d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8022d86:	69fb      	ldr	r3, [r7, #28]
 8022d88:	3306      	adds	r3, #6
 8022d8a:	2b06      	cmp	r3, #6
 8022d8c:	d902      	bls.n	8022d94 <NVIC_EncodePriority+0x30>
 8022d8e:	69fb      	ldr	r3, [r7, #28]
 8022d90:	3b01      	subs	r3, #1
 8022d92:	e000      	b.n	8022d96 <NVIC_EncodePriority+0x32>
 8022d94:	2300      	movs	r3, #0
 8022d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022d98:	69bb      	ldr	r3, [r7, #24]
 8022d9a:	2201      	movs	r2, #1
 8022d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8022da0:	1e5a      	subs	r2, r3, #1
 8022da2:	68bb      	ldr	r3, [r7, #8]
 8022da4:	401a      	ands	r2, r3
 8022da6:	697b      	ldr	r3, [r7, #20]
 8022da8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8022daa:	697b      	ldr	r3, [r7, #20]
 8022dac:	2101      	movs	r1, #1
 8022dae:	fa01 f303 	lsl.w	r3, r1, r3
 8022db2:	1e59      	subs	r1, r3, #1
 8022db4:	687b      	ldr	r3, [r7, #4]
 8022db6:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8022db8:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8022dba:	4618      	mov	r0, r3
 8022dbc:	3724      	adds	r7, #36	; 0x24
 8022dbe:	46bd      	mov	sp, r7
 8022dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022dc4:	4770      	bx	lr
 8022dc6:	bf00      	nop

08022dc8 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8022dc8:	b480      	push	{r7}
 8022dca:	b083      	sub	sp, #12
 8022dcc:	af00      	add	r7, sp, #0
 8022dce:	6078      	str	r0, [r7, #4]
 8022dd0:	460b      	mov	r3, r1
 8022dd2:	70fb      	strb	r3, [r7, #3]
 8022dd4:	4613      	mov	r3, r2
 8022dd6:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8022dd8:	78f8      	ldrb	r0, [r7, #3]
 8022dda:	78fb      	ldrb	r3, [r7, #3]
 8022ddc:	687a      	ldr	r2, [r7, #4]
 8022dde:	3306      	adds	r3, #6
 8022de0:	009b      	lsls	r3, r3, #2
 8022de2:	4413      	add	r3, r2
 8022de4:	685b      	ldr	r3, [r3, #4]
 8022de6:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8022dea:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8022dec:	431a      	orrs	r2, r3
 8022dee:	6879      	ldr	r1, [r7, #4]
 8022df0:	1d83      	adds	r3, r0, #6
 8022df2:	009b      	lsls	r3, r3, #2
 8022df4:	440b      	add	r3, r1
 8022df6:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8022df8:	370c      	adds	r7, #12
 8022dfa:	46bd      	mov	sp, r7
 8022dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e00:	4770      	bx	lr
 8022e02:	bf00      	nop

08022e04 <XMC_UART_CH_Init>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Start(), XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Init(XMC_USIC_CH_t *const channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8022e04:	b580      	push	{r7, lr}
 8022e06:	b082      	sub	sp, #8
 8022e08:	af00      	add	r7, sp, #0
 8022e0a:	6078      	str	r0, [r7, #4]
 8022e0c:	6039      	str	r1, [r7, #0]
  XMC_UART_CH_InitEx(channel, config, true);
 8022e0e:	6878      	ldr	r0, [r7, #4]
 8022e10:	6839      	ldr	r1, [r7, #0]
 8022e12:	2201      	movs	r2, #1
 8022e14:	f7ff fb28 	bl	8022468 <XMC_UART_CH_InitEx>
}
 8022e18:	3708      	adds	r7, #8
 8022e1a:	46bd      	mov	sp, r7
 8022e1c:	bd80      	pop	{r7, pc}
 8022e1e:	bf00      	nop

08022e20 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 8022e20:	b480      	push	{r7}
 8022e22:	b083      	sub	sp, #12
 8022e24:	af00      	add	r7, sp, #0
 8022e26:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 8022e28:	687b      	ldr	r3, [r7, #4]
 8022e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022e2c:	f023 030f 	bic.w	r3, r3, #15
 8022e30:	f043 0202 	orr.w	r2, r3, #2
 8022e34:	687b      	ldr	r3, [r7, #4]
 8022e36:	641a      	str	r2, [r3, #64]	; 0x40
}
 8022e38:	370c      	adds	r7, #12
 8022e3a:	46bd      	mov	sp, r7
 8022e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e40:	4770      	bx	lr
 8022e42:	bf00      	nop

08022e44 <UART_0_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
 8022e44:	b580      	push	{r7, lr}
 8022e46:	b082      	sub	sp, #8
 8022e48:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8022e4a:	2300      	movs	r3, #0
 8022e4c:	71fb      	strb	r3, [r7, #7]
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT4_BASE, 2U, &UART_0_rx_pin_config);
 8022e4e:	4823      	ldr	r0, [pc, #140]	; (8022edc <UART_0_init+0x98>)
 8022e50:	2102      	movs	r1, #2
 8022e52:	4a23      	ldr	r2, [pc, #140]	; (8022ee0 <UART_0_init+0x9c>)
 8022e54:	f7fd fa4a 	bl	80202ec <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART1_CH1, &UART_0_channel_config);
 8022e58:	4822      	ldr	r0, [pc, #136]	; (8022ee4 <UART_0_init+0xa0>)
 8022e5a:	4923      	ldr	r1, [pc, #140]	; (8022ee8 <UART_0_init+0xa4>)
 8022e5c:	f7ff ffd2 	bl	8022e04 <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART1_CH1, XMC_USIC_CH_INPUT_DX0, 2U);
 8022e60:	4820      	ldr	r0, [pc, #128]	; (8022ee4 <UART_0_init+0xa0>)
 8022e62:	2100      	movs	r1, #0
 8022e64:	2202      	movs	r2, #2
 8022e66:	f7ff ffaf 	bl	8022dc8 <XMC_USIC_CH_SetInputSource>
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART1_CH1,
 8022e6a:	481e      	ldr	r0, [pc, #120]	; (8022ee4 <UART_0_init+0xa0>)
 8022e6c:	2110      	movs	r1, #16
 8022e6e:	2204      	movs	r2, #4
 8022e70:	2301      	movs	r3, #1
 8022e72:	f7ff fce1 	bl	8022838 <XMC_USIC_CH_TXFIFO_Configure>
        16U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        1U);
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART1_CH1,
 8022e76:	481b      	ldr	r0, [pc, #108]	; (8022ee4 <UART_0_init+0xa0>)
 8022e78:	2100      	movs	r1, #0
 8022e7a:	2204      	movs	r2, #4
 8022e7c:	2300      	movs	r3, #0
 8022e7e:	f7ff fd03 	bl	8022888 <XMC_USIC_CH_RXFIFO_Configure>
        0U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        0U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART1_CH1);
 8022e82:	4818      	ldr	r0, [pc, #96]	; (8022ee4 <UART_0_init+0xa0>)
 8022e84:	f7ff ffcc 	bl	8022e20 <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 9U, &UART_0_tx_pin_config);
 8022e88:	4818      	ldr	r0, [pc, #96]	; (8022eec <UART_0_init+0xa8>)
 8022e8a:	2109      	movs	r1, #9
 8022e8c:	4a18      	ldr	r2, [pc, #96]	; (8022ef0 <UART_0_init+0xac>)
 8022e8e:	f7fd fa2d 	bl	80202ec <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH1, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 8022e92:	4814      	ldr	r0, [pc, #80]	; (8022ee4 <UART_0_init+0xa0>)
 8022e94:	2110      	movs	r1, #16
 8022e96:	2202      	movs	r2, #2
 8022e98:	f7ff fd38 	bl	802290c <XMC_USIC_CH_SetInterruptNodePointer>
     2U);
  /*Set service request for rx FIFO receive interrupt*/
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART1_CH1, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 8022e9c:	4811      	ldr	r0, [pc, #68]	; (8022ee4 <UART_0_init+0xa0>)
 8022e9e:	2110      	movs	r1, #16
 8022ea0:	2205      	movs	r2, #5
 8022ea2:	f7ff fd4f 	bl	8022944 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x5U);
  XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_UART1_CH1, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE,
 8022ea6:	480f      	ldr	r0, [pc, #60]	; (8022ee4 <UART_0_init+0xa0>)
 8022ea8:	2113      	movs	r1, #19
 8022eaa:	2205      	movs	r2, #5
 8022eac:	f7ff fd4a 	bl	8022944 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
       0x5U);
  /*Set priority and enable NVIC node for receive interrupt*/
  NVIC_SetPriority((IRQn_Type)95, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8022eb0:	f7ff ff04 	bl	8022cbc <__NVIC_GetPriorityGrouping>
 8022eb4:	4603      	mov	r3, r0
 8022eb6:	4618      	mov	r0, r3
 8022eb8:	213f      	movs	r1, #63	; 0x3f
 8022eba:	2200      	movs	r2, #0
 8022ebc:	f7ff ff52 	bl	8022d64 <NVIC_EncodePriority>
 8022ec0:	4603      	mov	r3, r0
 8022ec2:	205f      	movs	r0, #95	; 0x5f
 8022ec4:	4619      	mov	r1, r3
 8022ec6:	f7ff ff23 	bl	8022d10 <__NVIC_SetPriority>
                      63U, 0U));
  NVIC_EnableIRQ((IRQn_Type)95);
 8022eca:	205f      	movs	r0, #95	; 0x5f
 8022ecc:	f7ff ff04 	bl	8022cd8 <__NVIC_EnableIRQ>
  return status;
 8022ed0:	79fb      	ldrb	r3, [r7, #7]
}
 8022ed2:	4618      	mov	r0, r3
 8022ed4:	3708      	adds	r7, #8
 8022ed6:	46bd      	mov	sp, r7
 8022ed8:	bd80      	pop	{r7, pc}
 8022eda:	bf00      	nop
 8022edc:	48028400 	.word	0x48028400
 8022ee0:	0802a0e0 	.word	0x0802a0e0
 8022ee4:	48020200 	.word	0x48020200
 8022ee8:	0802a090 	.word	0x0802a090
 8022eec:	48028100 	.word	0x48028100
 8022ef0:	0802a09c 	.word	0x0802a09c

08022ef4 <USIC1_5_IRQHandler>:
/*Receive ISR*/
void UART_0_RX_HANDLER()
{
 8022ef4:	b580      	push	{r7, lr}
 8022ef6:	af00      	add	r7, sp, #0
  UART_lReceiveHandler(&UART_0);
 8022ef8:	4801      	ldr	r0, [pc, #4]	; (8022f00 <USIC1_5_IRQHandler+0xc>)
 8022efa:	f7ff fe27 	bl	8022b4c <UART_lReceiveHandler>
}
 8022efe:	bd80      	pop	{r7, pc}
 8022f00:	1ffe8800 	.word	0x1ffe8800

08022f04 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8022f04:	b480      	push	{r7}
 8022f06:	b083      	sub	sp, #12
 8022f08:	af00      	add	r7, sp, #0
 8022f0a:	6078      	str	r0, [r7, #4]
 8022f0c:	460b      	mov	r3, r1
 8022f0e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 8022f10:	78fb      	ldrb	r3, [r7, #3]
 8022f12:	2201      	movs	r2, #1
 8022f14:	409a      	lsls	r2, r3
 8022f16:	687b      	ldr	r3, [r7, #4]
 8022f18:	60da      	str	r2, [r3, #12]
}
 8022f1a:	370c      	adds	r7, #12
 8022f1c:	46bd      	mov	sp, r7
 8022f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f22:	4770      	bx	lr

08022f24 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8022f24:	b480      	push	{r7}
 8022f26:	b083      	sub	sp, #12
 8022f28:	af00      	add	r7, sp, #0
 8022f2a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8022f2c:	687b      	ldr	r3, [r7, #4]
 8022f2e:	2201      	movs	r2, #1
 8022f30:	60da      	str	r2, [r3, #12]
}
 8022f32:	370c      	adds	r7, #12
 8022f34:	46bd      	mov	sp, r7
 8022f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f3a:	4770      	bx	lr

08022f3c <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8022f3c:	b480      	push	{r7}
 8022f3e:	b083      	sub	sp, #12
 8022f40:	af00      	add	r7, sp, #0
 8022f42:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8022f44:	687b      	ldr	r3, [r7, #4]
 8022f46:	2202      	movs	r2, #2
 8022f48:	611a      	str	r2, [r3, #16]
}
 8022f4a:	370c      	adds	r7, #12
 8022f4c:	46bd      	mov	sp, r7
 8022f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f52:	4770      	bx	lr

08022f54 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8022f54:	b480      	push	{r7}
 8022f56:	b083      	sub	sp, #12
 8022f58:	af00      	add	r7, sp, #0
 8022f5a:	6078      	str	r0, [r7, #4]
 8022f5c:	460b      	mov	r3, r1
 8022f5e:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8022f60:	887a      	ldrh	r2, [r7, #2]
 8022f62:	687b      	ldr	r3, [r7, #4]
 8022f64:	635a      	str	r2, [r3, #52]	; 0x34
}
 8022f66:	370c      	adds	r7, #12
 8022f68:	46bd      	mov	sp, r7
 8022f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f6e:	4770      	bx	lr

08022f70 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8022f70:	b480      	push	{r7}
 8022f72:	b083      	sub	sp, #12
 8022f74:	af00      	add	r7, sp, #0
 8022f76:	6078      	str	r0, [r7, #4]
 8022f78:	460b      	mov	r3, r1
 8022f7a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8022f7c:	887a      	ldrh	r2, [r7, #2]
 8022f7e:	687b      	ldr	r3, [r7, #4]
 8022f80:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8022f82:	370c      	adds	r7, #12
 8022f84:	46bd      	mov	sp, r7
 8022f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f8a:	4770      	bx	lr

08022f8c <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8022f8c:	b480      	push	{r7}
 8022f8e:	b083      	sub	sp, #12
 8022f90:	af00      	add	r7, sp, #0
 8022f92:	6078      	str	r0, [r7, #4]
 8022f94:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 8022f96:	687b      	ldr	r3, [r7, #4]
 8022f98:	683a      	ldr	r2, [r7, #0]
 8022f9a:	611a      	str	r2, [r3, #16]
}
 8022f9c:	370c      	adds	r7, #12
 8022f9e:	46bd      	mov	sp, r7
 8022fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022fa4:	4770      	bx	lr
 8022fa6:	bf00      	nop

08022fa8 <XMC_CCU4_SLICE_GetTimerValue>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_SetTimerValue().
 */
__STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerValue(const XMC_CCU4_SLICE_t *const slice)
{
 8022fa8:	b480      	push	{r7}
 8022faa:	b083      	sub	sp, #12
 8022fac:	af00      	add	r7, sp, #0
 8022fae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return ((uint16_t)slice->TIMER);
 8022fb0:	687b      	ldr	r3, [r7, #4]
 8022fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022fb4:	b29b      	uxth	r3, r3
}
 8022fb6:	4618      	mov	r0, r3
 8022fb8:	370c      	adds	r7, #12
 8022fba:	46bd      	mov	sp, r7
 8022fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022fc0:	4770      	bx	lr
 8022fc2:	bf00      	nop

08022fc4 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8022fc4:	b480      	push	{r7}
 8022fc6:	b083      	sub	sp, #12
 8022fc8:	af00      	add	r7, sp, #0
 8022fca:	6078      	str	r0, [r7, #4]
 8022fcc:	460b      	mov	r3, r1
 8022fce:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8022fd0:	687b      	ldr	r3, [r7, #4]
 8022fd2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8022fd6:	78fb      	ldrb	r3, [r7, #3]
 8022fd8:	2101      	movs	r1, #1
 8022fda:	fa01 f303 	lsl.w	r3, r1, r3
 8022fde:	431a      	orrs	r2, r3
 8022fe0:	687b      	ldr	r3, [r7, #4]
 8022fe2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8022fe6:	370c      	adds	r7, #12
 8022fe8:	46bd      	mov	sp, r7
 8022fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022fee:	4770      	bx	lr

08022ff0 <XMC_CCU4_SLICE_ClearEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent()<BR> XMC_CCU4_SLICE_GetEvent().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8022ff0:	b480      	push	{r7}
 8022ff2:	b083      	sub	sp, #12
 8022ff4:	af00      	add	r7, sp, #0
 8022ff6:	6078      	str	r0, [r7, #4]
 8022ff8:	460b      	mov	r3, r1
 8022ffa:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->SWR = ((uint32_t) 1) << ((uint32_t) event);
 8022ffc:	78fb      	ldrb	r3, [r7, #3]
 8022ffe:	2201      	movs	r2, #1
 8023000:	409a      	lsls	r2, r3
 8023002:	687b      	ldr	r3, [r7, #4]
 8023004:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8023008:	370c      	adds	r7, #12
 802300a:	46bd      	mov	sp, r7
 802300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023010:	4770      	bx	lr
 8023012:	bf00      	nop

08023014 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8023014:	b580      	push	{r7, lr}
 8023016:	b084      	sub	sp, #16
 8023018:	af00      	add	r7, sp, #0
 802301a:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 802301c:	2300      	movs	r3, #0
 802301e:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8023020:	687b      	ldr	r3, [r7, #4]
 8023022:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8023026:	f083 0301 	eor.w	r3, r3, #1
 802302a:	b2db      	uxtb	r3, r3
 802302c:	2b00      	cmp	r3, #0
 802302e:	d009      	beq.n	8023044 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8023030:	687b      	ldr	r3, [r7, #4]
 8023032:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8023036:	2b00      	cmp	r3, #0
 8023038:	d104      	bne.n	8023044 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 802303a:	6878      	ldr	r0, [r7, #4]
 802303c:	f000 f85e 	bl	80230fc <TIMER_CCU4_lInit>
 8023040:	4603      	mov	r3, r0
 8023042:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 8023044:	7bfb      	ldrb	r3, [r7, #15]
}
 8023046:	4618      	mov	r0, r3
 8023048:	3710      	adds	r7, #16
 802304a:	46bd      	mov	sp, r7
 802304c:	bd80      	pop	{r7, pc}
 802304e:	bf00      	nop

08023050 <TIMER_ClearEvent>:

/*
 * This function clears the period match interrupt status of the given timer.
 */
void TIMER_ClearEvent(TIMER_t *const handle_ptr)
{
 8023050:	b580      	push	{r7, lr}
 8023052:	b082      	sub	sp, #8
 8023054:	af00      	add	r7, sp, #0
 8023056:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("TIME_CCU_AcknowledgeInterrupt:handle_ptr NULL" , (handle_ptr != NULL));

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8023058:	687b      	ldr	r3, [r7, #4]
 802305a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 802305e:	2b00      	cmp	r3, #0
 8023060:	d105      	bne.n	802306e <TIMER_ClearEvent+0x1e>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU4_SLICE_ClearEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8023062:	687b      	ldr	r3, [r7, #4]
 8023064:	695b      	ldr	r3, [r3, #20]
 8023066:	4618      	mov	r0, r3
 8023068:	2100      	movs	r1, #0
 802306a:	f7ff ffc1 	bl	8022ff0 <XMC_CCU4_SLICE_ClearEvent>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU8_SLICE_ClearEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
  }
#endif
}
 802306e:	3708      	adds	r7, #8
 8023070:	46bd      	mov	sp, r7
 8023072:	bd80      	pop	{r7, pc}

08023074 <TIMER_GetTime>:

/*
 * This function returns the current time value
 */
uint32_t TIMER_GetTime(TIMER_t *const handle_ptr)
{
 8023074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023076:	b087      	sub	sp, #28
 8023078:	af00      	add	r7, sp, #0
 802307a:	6078      	str	r0, [r7, #4]
  uint32_t ltimer_val;
  uint32_t lprescaler;
  uint32_t ltime_val;

  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));
  ltime_val = 0U;
 802307c:	2300      	movs	r3, #0
 802307e:	617b      	str	r3, [r7, #20]

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8023080:	687b      	ldr	r3, [r7, #4]
 8023082:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8023086:	2b00      	cmp	r3, #0
 8023088:	d131      	bne.n	80230ee <TIMER_GetTime+0x7a>
  {
    /* Added one to according to the edge aligned mode */
    ltimer_val = (uint32_t)XMC_CCU4_SLICE_GetTimerValue(handle_ptr->ccu4_slice_ptr) + 1U;
 802308a:	687b      	ldr	r3, [r7, #4]
 802308c:	695b      	ldr	r3, [r3, #20]
 802308e:	4618      	mov	r0, r3
 8023090:	f7ff ff8a 	bl	8022fa8 <XMC_CCU4_SLICE_GetTimerValue>
 8023094:	4603      	mov	r3, r0
 8023096:	3301      	adds	r3, #1
 8023098:	613b      	str	r3, [r7, #16]
    lprescaler = handle_ptr->ccu4_slice_config_ptr->prescaler_initval;
 802309a:	687b      	ldr	r3, [r7, #4]
 802309c:	69db      	ldr	r3, [r3, #28]
 802309e:	791b      	ldrb	r3, [r3, #4]
 80230a0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80230a4:	b2db      	uxtb	r3, r3
 80230a6:	60fb      	str	r3, [r7, #12]

    /* calculate the time value in micro seconds and scaled with 100 */
    ltime_val = (uint32_t)((uint64_t)((uint64_t)ltimer_val * (uint64_t)TIMER_CLK_CONST_SCALED) >> \
 80230a8:	693b      	ldr	r3, [r7, #16]
 80230aa:	461a      	mov	r2, r3
 80230ac:	f04f 0300 	mov.w	r3, #0
 80230b0:	4911      	ldr	r1, [pc, #68]	; (80230f8 <TIMER_GetTime+0x84>)
 80230b2:	fb01 f003 	mul.w	r0, r1, r3
 80230b6:	2100      	movs	r1, #0
 80230b8:	fb01 f102 	mul.w	r1, r1, r2
 80230bc:	4401      	add	r1, r0
 80230be:	480e      	ldr	r0, [pc, #56]	; (80230f8 <TIMER_GetTime+0x84>)
 80230c0:	fba2 2300 	umull	r2, r3, r2, r0
 80230c4:	4419      	add	r1, r3
 80230c6:	460b      	mov	r3, r1
                           (TIMER_CLK_SCALE_FACTOR - lprescaler));
 80230c8:	68f9      	ldr	r1, [r7, #12]
 80230ca:	f1c1 0120 	rsb	r1, r1, #32
    /* Added one to according to the edge aligned mode */
    ltimer_val = (uint32_t)XMC_CCU4_SLICE_GetTimerValue(handle_ptr->ccu4_slice_ptr) + 1U;
    lprescaler = handle_ptr->ccu4_slice_config_ptr->prescaler_initval;

    /* calculate the time value in micro seconds and scaled with 100 */
    ltime_val = (uint32_t)((uint64_t)((uint64_t)ltimer_val * (uint64_t)TIMER_CLK_CONST_SCALED) >> \
 80230ce:	f1c1 0620 	rsb	r6, r1, #32
 80230d2:	f1a1 0020 	sub.w	r0, r1, #32
 80230d6:	fa22 f401 	lsr.w	r4, r2, r1
 80230da:	fa03 f606 	lsl.w	r6, r3, r6
 80230de:	4334      	orrs	r4, r6
 80230e0:	fa23 f000 	lsr.w	r0, r3, r0
 80230e4:	4304      	orrs	r4, r0
 80230e6:	fa23 f501 	lsr.w	r5, r3, r1
 80230ea:	4623      	mov	r3, r4
 80230ec:	617b      	str	r3, [r7, #20]
    ltime_val = (uint32_t)((uint64_t)((uint64_t)ltimer_val * (uint64_t)TIMER_CLK_CONST_SCALED) >> \
                           (TIMER_CLK_SCALE_FACTOR - lprescaler));
  }
#endif

  return ltime_val;
 80230ee:	697b      	ldr	r3, [r7, #20]
}
 80230f0:	4618      	mov	r0, r3
 80230f2:	371c      	adds	r7, #28
 80230f4:	46bd      	mov	sp, r7
 80230f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80230f8:	b1c71c71 	.word	0xb1c71c71

080230fc <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 80230fc:	b580      	push	{r7, lr}
 80230fe:	b084      	sub	sp, #16
 8023100:	af00      	add	r7, sp, #0
 8023102:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8023104:	687b      	ldr	r3, [r7, #4]
 8023106:	691b      	ldr	r3, [r3, #16]
 8023108:	4618      	mov	r0, r3
 802310a:	f001 fbff 	bl	802490c <GLOBAL_CCU4_Init>
 802310e:	4603      	mov	r3, r0
 8023110:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 8023112:	687b      	ldr	r3, [r7, #4]
 8023114:	691b      	ldr	r3, [r3, #16]
 8023116:	689a      	ldr	r2, [r3, #8]
 8023118:	687b      	ldr	r3, [r7, #4]
 802311a:	7e1b      	ldrb	r3, [r3, #24]
 802311c:	4610      	mov	r0, r2
 802311e:	4619      	mov	r1, r3
 8023120:	f7ff fef0 	bl	8022f04 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8023124:	687b      	ldr	r3, [r7, #4]
 8023126:	695a      	ldr	r2, [r3, #20]
 8023128:	687b      	ldr	r3, [r7, #4]
 802312a:	69db      	ldr	r3, [r3, #28]
 802312c:	4610      	mov	r0, r2
 802312e:	4619      	mov	r1, r3
 8023130:	f7fd fef0 	bl	8020f14 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8023134:	6878      	ldr	r0, [r7, #4]
 8023136:	f000 f82d 	bl	8023194 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 802313a:	687b      	ldr	r3, [r7, #4]
 802313c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8023140:	2b00      	cmp	r3, #0
 8023142:	d00f      	beq.n	8023164 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8023144:	687b      	ldr	r3, [r7, #4]
 8023146:	695a      	ldr	r2, [r3, #20]
 8023148:	687b      	ldr	r3, [r7, #4]
 802314a:	f893 3020 	ldrb.w	r3, [r3, #32]
 802314e:	4610      	mov	r0, r2
 8023150:	2100      	movs	r1, #0
 8023152:	461a      	mov	r2, r3
 8023154:	f7fd ff14 	bl	8020f80 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8023158:	687b      	ldr	r3, [r7, #4]
 802315a:	695b      	ldr	r3, [r3, #20]
 802315c:	4618      	mov	r0, r3
 802315e:	2100      	movs	r1, #0
 8023160:	f7ff ff30 	bl	8022fc4 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8023164:	687b      	ldr	r3, [r7, #4]
 8023166:	695b      	ldr	r3, [r3, #20]
 8023168:	4618      	mov	r0, r3
 802316a:	f7ff fee7 	bl	8022f3c <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 802316e:	687b      	ldr	r3, [r7, #4]
 8023170:	2201      	movs	r2, #1
 8023172:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8023176:	687b      	ldr	r3, [r7, #4]
 8023178:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 802317c:	2b00      	cmp	r3, #0
 802317e:	d004      	beq.n	802318a <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8023180:	687b      	ldr	r3, [r7, #4]
 8023182:	695b      	ldr	r3, [r3, #20]
 8023184:	4618      	mov	r0, r3
 8023186:	f7ff fecd 	bl	8022f24 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 802318a:	7bfb      	ldrb	r3, [r7, #15]
}
 802318c:	4618      	mov	r0, r3
 802318e:	3710      	adds	r7, #16
 8023190:	46bd      	mov	sp, r7
 8023192:	bd80      	pop	{r7, pc}

08023194 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8023194:	b580      	push	{r7, lr}
 8023196:	b082      	sub	sp, #8
 8023198:	af00      	add	r7, sp, #0
 802319a:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 802319c:	687b      	ldr	r3, [r7, #4]
 802319e:	695a      	ldr	r2, [r3, #20]
 80231a0:	687b      	ldr	r3, [r7, #4]
 80231a2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80231a4:	4610      	mov	r0, r2
 80231a6:	4619      	mov	r1, r3
 80231a8:	f7ff fed4 	bl	8022f54 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 80231ac:	687b      	ldr	r3, [r7, #4]
 80231ae:	695b      	ldr	r3, [r3, #20]
 80231b0:	4618      	mov	r0, r3
 80231b2:	2100      	movs	r1, #0
 80231b4:	f7ff fedc 	bl	8022f70 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 80231b8:	687b      	ldr	r3, [r7, #4]
 80231ba:	691b      	ldr	r3, [r3, #16]
 80231bc:	689a      	ldr	r2, [r3, #8]
 80231be:	687b      	ldr	r3, [r7, #4]
 80231c0:	68db      	ldr	r3, [r3, #12]
 80231c2:	4610      	mov	r0, r2
 80231c4:	4619      	mov	r1, r3
 80231c6:	f7ff fee1 	bl	8022f8c <XMC_CCU4_EnableShadowTransfer>
}
 80231ca:	3708      	adds	r7, #8
 80231cc:	46bd      	mov	sp, r7
 80231ce:	bd80      	pop	{r7, pc}

080231d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80231d0:	b480      	push	{r7}
 80231d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80231d4:	4b04      	ldr	r3, [pc, #16]	; (80231e8 <__NVIC_GetPriorityGrouping+0x18>)
 80231d6:	68db      	ldr	r3, [r3, #12]
 80231d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80231dc:	0a1b      	lsrs	r3, r3, #8
}
 80231de:	4618      	mov	r0, r3
 80231e0:	46bd      	mov	sp, r7
 80231e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231e6:	4770      	bx	lr
 80231e8:	e000ed00 	.word	0xe000ed00

080231ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80231ec:	b480      	push	{r7}
 80231ee:	b083      	sub	sp, #12
 80231f0:	af00      	add	r7, sp, #0
 80231f2:	4603      	mov	r3, r0
 80231f4:	6039      	str	r1, [r7, #0]
 80231f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80231f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80231fc:	2b00      	cmp	r3, #0
 80231fe:	db0a      	blt.n	8023216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8023200:	490d      	ldr	r1, [pc, #52]	; (8023238 <__NVIC_SetPriority+0x4c>)
 8023202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023206:	683a      	ldr	r2, [r7, #0]
 8023208:	b2d2      	uxtb	r2, r2
 802320a:	0092      	lsls	r2, r2, #2
 802320c:	b2d2      	uxtb	r2, r2
 802320e:	440b      	add	r3, r1
 8023210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8023214:	e00a      	b.n	802322c <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8023216:	4909      	ldr	r1, [pc, #36]	; (802323c <__NVIC_SetPriority+0x50>)
 8023218:	79fb      	ldrb	r3, [r7, #7]
 802321a:	f003 030f 	and.w	r3, r3, #15
 802321e:	3b04      	subs	r3, #4
 8023220:	683a      	ldr	r2, [r7, #0]
 8023222:	b2d2      	uxtb	r2, r2
 8023224:	0092      	lsls	r2, r2, #2
 8023226:	b2d2      	uxtb	r2, r2
 8023228:	440b      	add	r3, r1
 802322a:	761a      	strb	r2, [r3, #24]
  }
}
 802322c:	370c      	adds	r7, #12
 802322e:	46bd      	mov	sp, r7
 8023230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023234:	4770      	bx	lr
 8023236:	bf00      	nop
 8023238:	e000e100 	.word	0xe000e100
 802323c:	e000ed00 	.word	0xe000ed00

08023240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8023240:	b480      	push	{r7}
 8023242:	b089      	sub	sp, #36	; 0x24
 8023244:	af00      	add	r7, sp, #0
 8023246:	60f8      	str	r0, [r7, #12]
 8023248:	60b9      	str	r1, [r7, #8]
 802324a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802324c:	68fb      	ldr	r3, [r7, #12]
 802324e:	f003 0307 	and.w	r3, r3, #7
 8023252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8023254:	69fb      	ldr	r3, [r7, #28]
 8023256:	f1c3 0307 	rsb	r3, r3, #7
 802325a:	2b06      	cmp	r3, #6
 802325c:	bf28      	it	cs
 802325e:	2306      	movcs	r3, #6
 8023260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8023262:	69fb      	ldr	r3, [r7, #28]
 8023264:	3306      	adds	r3, #6
 8023266:	2b06      	cmp	r3, #6
 8023268:	d902      	bls.n	8023270 <NVIC_EncodePriority+0x30>
 802326a:	69fb      	ldr	r3, [r7, #28]
 802326c:	3b01      	subs	r3, #1
 802326e:	e000      	b.n	8023272 <NVIC_EncodePriority+0x32>
 8023270:	2300      	movs	r3, #0
 8023272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8023274:	69bb      	ldr	r3, [r7, #24]
 8023276:	2201      	movs	r2, #1
 8023278:	fa02 f303 	lsl.w	r3, r2, r3
 802327c:	1e5a      	subs	r2, r3, #1
 802327e:	68bb      	ldr	r3, [r7, #8]
 8023280:	401a      	ands	r2, r3
 8023282:	697b      	ldr	r3, [r7, #20]
 8023284:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8023286:	697b      	ldr	r3, [r7, #20]
 8023288:	2101      	movs	r1, #1
 802328a:	fa01 f303 	lsl.w	r3, r1, r3
 802328e:	1e59      	subs	r1, r3, #1
 8023290:	687b      	ldr	r3, [r7, #4]
 8023292:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8023294:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8023296:	4618      	mov	r0, r3
 8023298:	3724      	adds	r7, #36	; 0x24
 802329a:	46bd      	mov	sp, r7
 802329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80232a0:	4770      	bx	lr
 80232a2:	bf00      	nop

080232a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80232a4:	b580      	push	{r7, lr}
 80232a6:	b082      	sub	sp, #8
 80232a8:	af00      	add	r7, sp, #0
 80232aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80232ac:	687b      	ldr	r3, [r7, #4]
 80232ae:	3b01      	subs	r3, #1
 80232b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80232b4:	d301      	bcc.n	80232ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80232b6:	2301      	movs	r3, #1
 80232b8:	e00f      	b.n	80232da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80232ba:	4a0a      	ldr	r2, [pc, #40]	; (80232e4 <SysTick_Config+0x40>)
 80232bc:	687b      	ldr	r3, [r7, #4]
 80232be:	3b01      	subs	r3, #1
 80232c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80232c2:	f04f 30ff 	mov.w	r0, #4294967295
 80232c6:	213f      	movs	r1, #63	; 0x3f
 80232c8:	f7ff ff90 	bl	80231ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80232cc:	4b05      	ldr	r3, [pc, #20]	; (80232e4 <SysTick_Config+0x40>)
 80232ce:	2200      	movs	r2, #0
 80232d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80232d2:	4b04      	ldr	r3, [pc, #16]	; (80232e4 <SysTick_Config+0x40>)
 80232d4:	2207      	movs	r2, #7
 80232d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80232d8:	2300      	movs	r3, #0
}
 80232da:	4618      	mov	r0, r3
 80232dc:	3708      	adds	r7, #8
 80232de:	46bd      	mov	sp, r7
 80232e0:	bd80      	pop	{r7, pc}
 80232e2:	bf00      	nop
 80232e4:	e000e010 	.word	0xe000e010

080232e8 <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
 80232e8:	b490      	push	{r4, r7}
 80232ea:	b086      	sub	sp, #24
 80232ec:	af00      	add	r7, sp, #0
 80232ee:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
 80232f0:	2300      	movs	r3, #0
 80232f2:	73fb      	strb	r3, [r7, #15]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
 80232f4:	496b      	ldr	r1, [pc, #428]	; (80234a4 <SYSTIMER_lInsertTimerList+0x1bc>)
 80232f6:	687a      	ldr	r2, [r7, #4]
 80232f8:	4613      	mov	r3, r2
 80232fa:	00db      	lsls	r3, r3, #3
 80232fc:	4413      	add	r3, r2
 80232fe:	009b      	lsls	r3, r3, #2
 8023300:	440b      	add	r3, r1
 8023302:	3318      	adds	r3, #24
 8023304:	681b      	ldr	r3, [r3, #0]
 8023306:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
 8023308:	4b67      	ldr	r3, [pc, #412]	; (80234a8 <SYSTIMER_lInsertTimerList+0x1c0>)
 802330a:	681b      	ldr	r3, [r3, #0]
 802330c:	2b00      	cmp	r3, #0
 802330e:	d109      	bne.n	8023324 <SYSTIMER_lInsertTimerList+0x3c>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
 8023310:	687a      	ldr	r2, [r7, #4]
 8023312:	4613      	mov	r3, r2
 8023314:	00db      	lsls	r3, r3, #3
 8023316:	4413      	add	r3, r2
 8023318:	009b      	lsls	r3, r3, #2
 802331a:	4a62      	ldr	r2, [pc, #392]	; (80234a4 <SYSTIMER_lInsertTimerList+0x1bc>)
 802331c:	4413      	add	r3, r2
 802331e:	4a62      	ldr	r2, [pc, #392]	; (80234a8 <SYSTIMER_lInsertTimerList+0x1c0>)
 8023320:	6013      	str	r3, [r2, #0]
 8023322:	e0bb      	b.n	802349c <SYSTIMER_lInsertTimerList+0x1b4>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
 8023324:	4b60      	ldr	r3, [pc, #384]	; (80234a8 <SYSTIMER_lInsertTimerList+0x1c0>)
 8023326:	681b      	ldr	r3, [r3, #0]
 8023328:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
 802332a:	68bb      	ldr	r3, [r7, #8]
 802332c:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 802332e:	e0ab      	b.n	8023488 <SYSTIMER_lInsertTimerList+0x1a0>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
 8023330:	697b      	ldr	r3, [r7, #20]
 8023332:	699b      	ldr	r3, [r3, #24]
 8023334:	461a      	mov	r2, r3
 8023336:	693b      	ldr	r3, [r7, #16]
 8023338:	1a9b      	subs	r3, r3, r2
 802333a:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
 802333c:	693b      	ldr	r3, [r7, #16]
 802333e:	2b00      	cmp	r3, #0
 8023340:	dc7a      	bgt.n	8023438 <SYSTIMER_lInsertTimerList+0x150>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
 8023342:	697b      	ldr	r3, [r7, #20]
 8023344:	685b      	ldr	r3, [r3, #4]
 8023346:	2b00      	cmp	r3, #0
 8023348:	d026      	beq.n	8023398 <SYSTIMER_lInsertTimerList+0xb0>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
 802334a:	697b      	ldr	r3, [r7, #20]
 802334c:	6859      	ldr	r1, [r3, #4]
 802334e:	687a      	ldr	r2, [r7, #4]
 8023350:	4613      	mov	r3, r2
 8023352:	00db      	lsls	r3, r3, #3
 8023354:	4413      	add	r3, r2
 8023356:	009b      	lsls	r3, r3, #2
 8023358:	4a52      	ldr	r2, [pc, #328]	; (80234a4 <SYSTIMER_lInsertTimerList+0x1bc>)
 802335a:	4413      	add	r3, r2
 802335c:	600b      	str	r3, [r1, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
 802335e:	697b      	ldr	r3, [r7, #20]
 8023360:	6859      	ldr	r1, [r3, #4]
 8023362:	4850      	ldr	r0, [pc, #320]	; (80234a4 <SYSTIMER_lInsertTimerList+0x1bc>)
 8023364:	687a      	ldr	r2, [r7, #4]
 8023366:	4613      	mov	r3, r2
 8023368:	00db      	lsls	r3, r3, #3
 802336a:	4413      	add	r3, r2
 802336c:	009b      	lsls	r3, r3, #2
 802336e:	4403      	add	r3, r0
 8023370:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
 8023372:	494c      	ldr	r1, [pc, #304]	; (80234a4 <SYSTIMER_lInsertTimerList+0x1bc>)
 8023374:	687a      	ldr	r2, [r7, #4]
 8023376:	4613      	mov	r3, r2
 8023378:	00db      	lsls	r3, r3, #3
 802337a:	4413      	add	r3, r2
 802337c:	009b      	lsls	r3, r3, #2
 802337e:	440b      	add	r3, r1
 8023380:	697a      	ldr	r2, [r7, #20]
 8023382:	601a      	str	r2, [r3, #0]
          object_ptr->prev = &g_timer_tbl[tbl_index];
 8023384:	687a      	ldr	r2, [r7, #4]
 8023386:	4613      	mov	r3, r2
 8023388:	00db      	lsls	r3, r3, #3
 802338a:	4413      	add	r3, r2
 802338c:	009b      	lsls	r3, r3, #2
 802338e:	4a45      	ldr	r2, [pc, #276]	; (80234a4 <SYSTIMER_lInsertTimerList+0x1bc>)
 8023390:	441a      	add	r2, r3
 8023392:	697b      	ldr	r3, [r7, #20]
 8023394:	605a      	str	r2, [r3, #4]
 8023396:	e01c      	b.n	80233d2 <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
 8023398:	4b43      	ldr	r3, [pc, #268]	; (80234a8 <SYSTIMER_lInsertTimerList+0x1c0>)
 802339a:	6819      	ldr	r1, [r3, #0]
 802339c:	4841      	ldr	r0, [pc, #260]	; (80234a4 <SYSTIMER_lInsertTimerList+0x1bc>)
 802339e:	687a      	ldr	r2, [r7, #4]
 80233a0:	4613      	mov	r3, r2
 80233a2:	00db      	lsls	r3, r3, #3
 80233a4:	4413      	add	r3, r2
 80233a6:	009b      	lsls	r3, r3, #2
 80233a8:	4403      	add	r3, r0
 80233aa:	6019      	str	r1, [r3, #0]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
 80233ac:	4b3e      	ldr	r3, [pc, #248]	; (80234a8 <SYSTIMER_lInsertTimerList+0x1c0>)
 80233ae:	6819      	ldr	r1, [r3, #0]
 80233b0:	687a      	ldr	r2, [r7, #4]
 80233b2:	4613      	mov	r3, r2
 80233b4:	00db      	lsls	r3, r3, #3
 80233b6:	4413      	add	r3, r2
 80233b8:	009b      	lsls	r3, r3, #2
 80233ba:	4a3a      	ldr	r2, [pc, #232]	; (80234a4 <SYSTIMER_lInsertTimerList+0x1bc>)
 80233bc:	4413      	add	r3, r2
 80233be:	604b      	str	r3, [r1, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
 80233c0:	687a      	ldr	r2, [r7, #4]
 80233c2:	4613      	mov	r3, r2
 80233c4:	00db      	lsls	r3, r3, #3
 80233c6:	4413      	add	r3, r2
 80233c8:	009b      	lsls	r3, r3, #2
 80233ca:	4a36      	ldr	r2, [pc, #216]	; (80234a4 <SYSTIMER_lInsertTimerList+0x1bc>)
 80233cc:	4413      	add	r3, r2
 80233ce:	4a36      	ldr	r2, [pc, #216]	; (80234a8 <SYSTIMER_lInsertTimerList+0x1c0>)
 80233d0:	6013      	str	r3, [r2, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
 80233d2:	4934      	ldr	r1, [pc, #208]	; (80234a4 <SYSTIMER_lInsertTimerList+0x1bc>)
 80233d4:	687a      	ldr	r2, [r7, #4]
 80233d6:	4613      	mov	r3, r2
 80233d8:	00db      	lsls	r3, r3, #3
 80233da:	4413      	add	r3, r2
 80233dc:	009b      	lsls	r3, r3, #2
 80233de:	440b      	add	r3, r1
 80233e0:	681b      	ldr	r3, [r3, #0]
 80233e2:	699a      	ldr	r2, [r3, #24]
 80233e4:	693b      	ldr	r3, [r7, #16]
 80233e6:	18d1      	adds	r1, r2, r3
 80233e8:	482e      	ldr	r0, [pc, #184]	; (80234a4 <SYSTIMER_lInsertTimerList+0x1bc>)
 80233ea:	687a      	ldr	r2, [r7, #4]
 80233ec:	4613      	mov	r3, r2
 80233ee:	00db      	lsls	r3, r3, #3
 80233f0:	4413      	add	r3, r2
 80233f2:	009b      	lsls	r3, r3, #2
 80233f4:	4403      	add	r3, r0
 80233f6:	3318      	adds	r3, #24
 80233f8:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
 80233fa:	492a      	ldr	r1, [pc, #168]	; (80234a4 <SYSTIMER_lInsertTimerList+0x1bc>)
 80233fc:	687a      	ldr	r2, [r7, #4]
 80233fe:	4613      	mov	r3, r2
 8023400:	00db      	lsls	r3, r3, #3
 8023402:	4413      	add	r3, r2
 8023404:	009b      	lsls	r3, r3, #2
 8023406:	440b      	add	r3, r1
 8023408:	6819      	ldr	r1, [r3, #0]
 802340a:	4826      	ldr	r0, [pc, #152]	; (80234a4 <SYSTIMER_lInsertTimerList+0x1bc>)
 802340c:	687a      	ldr	r2, [r7, #4]
 802340e:	4613      	mov	r3, r2
 8023410:	00db      	lsls	r3, r3, #3
 8023412:	4413      	add	r3, r2
 8023414:	009b      	lsls	r3, r3, #2
 8023416:	4403      	add	r3, r0
 8023418:	681b      	ldr	r3, [r3, #0]
 802341a:	6998      	ldr	r0, [r3, #24]
 802341c:	4c21      	ldr	r4, [pc, #132]	; (80234a4 <SYSTIMER_lInsertTimerList+0x1bc>)
 802341e:	687a      	ldr	r2, [r7, #4]
 8023420:	4613      	mov	r3, r2
 8023422:	00db      	lsls	r3, r3, #3
 8023424:	4413      	add	r3, r2
 8023426:	009b      	lsls	r3, r3, #2
 8023428:	4423      	add	r3, r4
 802342a:	3318      	adds	r3, #24
 802342c:	681b      	ldr	r3, [r3, #0]
 802342e:	1ac3      	subs	r3, r0, r3
 8023430:	618b      	str	r3, [r1, #24]
        found_flag = true;
 8023432:	2301      	movs	r3, #1
 8023434:	73fb      	strb	r3, [r7, #15]
 8023436:	e024      	b.n	8023482 <SYSTIMER_lInsertTimerList+0x19a>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
 8023438:	693b      	ldr	r3, [r7, #16]
 802343a:	2b00      	cmp	r3, #0
 802343c:	dd21      	ble.n	8023482 <SYSTIMER_lInsertTimerList+0x19a>
 802343e:	697b      	ldr	r3, [r7, #20]
 8023440:	681b      	ldr	r3, [r3, #0]
 8023442:	2b00      	cmp	r3, #0
 8023444:	d11d      	bne.n	8023482 <SYSTIMER_lInsertTimerList+0x19a>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
 8023446:	4917      	ldr	r1, [pc, #92]	; (80234a4 <SYSTIMER_lInsertTimerList+0x1bc>)
 8023448:	687a      	ldr	r2, [r7, #4]
 802344a:	4613      	mov	r3, r2
 802344c:	00db      	lsls	r3, r3, #3
 802344e:	4413      	add	r3, r2
 8023450:	009b      	lsls	r3, r3, #2
 8023452:	440b      	add	r3, r1
 8023454:	697a      	ldr	r2, [r7, #20]
 8023456:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
 8023458:	687a      	ldr	r2, [r7, #4]
 802345a:	4613      	mov	r3, r2
 802345c:	00db      	lsls	r3, r3, #3
 802345e:	4413      	add	r3, r2
 8023460:	009b      	lsls	r3, r3, #2
 8023462:	4a10      	ldr	r2, [pc, #64]	; (80234a4 <SYSTIMER_lInsertTimerList+0x1bc>)
 8023464:	441a      	add	r2, r3
 8023466:	697b      	ldr	r3, [r7, #20]
 8023468:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
 802346a:	6939      	ldr	r1, [r7, #16]
 802346c:	480d      	ldr	r0, [pc, #52]	; (80234a4 <SYSTIMER_lInsertTimerList+0x1bc>)
 802346e:	687a      	ldr	r2, [r7, #4]
 8023470:	4613      	mov	r3, r2
 8023472:	00db      	lsls	r3, r3, #3
 8023474:	4413      	add	r3, r2
 8023476:	009b      	lsls	r3, r3, #2
 8023478:	4403      	add	r3, r0
 802347a:	3318      	adds	r3, #24
 802347c:	6019      	str	r1, [r3, #0]
          found_flag = true;
 802347e:	2301      	movs	r3, #1
 8023480:	73fb      	strb	r3, [r7, #15]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
 8023482:	697b      	ldr	r3, [r7, #20]
 8023484:	681b      	ldr	r3, [r3, #0]
 8023486:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8023488:	697b      	ldr	r3, [r7, #20]
 802348a:	2b00      	cmp	r3, #0
 802348c:	d006      	beq.n	802349c <SYSTIMER_lInsertTimerList+0x1b4>
 802348e:	7bfb      	ldrb	r3, [r7, #15]
 8023490:	f083 0301 	eor.w	r3, r3, #1
 8023494:	b2db      	uxtb	r3, r3
 8023496:	2b00      	cmp	r3, #0
 8023498:	f47f af4a 	bne.w	8023330 <SYSTIMER_lInsertTimerList+0x48>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
 802349c:	3718      	adds	r7, #24
 802349e:	46bd      	mov	sp, r7
 80234a0:	bc90      	pop	{r4, r7}
 80234a2:	4770      	bx	lr
 80234a4:	1fff0120 	.word	0x1fff0120
 80234a8:	1ffe8b60 	.word	0x1ffe8b60

080234ac <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
 80234ac:	b480      	push	{r7}
 80234ae:	b085      	sub	sp, #20
 80234b0:	af00      	add	r7, sp, #0
 80234b2:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
 80234b4:	687a      	ldr	r2, [r7, #4]
 80234b6:	4613      	mov	r3, r2
 80234b8:	00db      	lsls	r3, r3, #3
 80234ba:	4413      	add	r3, r2
 80234bc:	009b      	lsls	r3, r3, #2
 80234be:	4a29      	ldr	r2, [pc, #164]	; (8023564 <SYSTIMER_lRemoveTimerList+0xb8>)
 80234c0:	4413      	add	r3, r2
 80234c2:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
 80234c4:	68fb      	ldr	r3, [r7, #12]
 80234c6:	685b      	ldr	r3, [r3, #4]
 80234c8:	2b00      	cmp	r3, #0
 80234ca:	d107      	bne.n	80234dc <SYSTIMER_lRemoveTimerList+0x30>
 80234cc:	68fb      	ldr	r3, [r7, #12]
 80234ce:	681b      	ldr	r3, [r3, #0]
 80234d0:	2b00      	cmp	r3, #0
 80234d2:	d103      	bne.n	80234dc <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
 80234d4:	4b24      	ldr	r3, [pc, #144]	; (8023568 <SYSTIMER_lRemoveTimerList+0xbc>)
 80234d6:	2200      	movs	r2, #0
 80234d8:	601a      	str	r2, [r3, #0]
 80234da:	e03d      	b.n	8023558 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
 80234dc:	68fb      	ldr	r3, [r7, #12]
 80234de:	685b      	ldr	r3, [r3, #4]
 80234e0:	2b00      	cmp	r3, #0
 80234e2:	d114      	bne.n	802350e <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
 80234e4:	68fb      	ldr	r3, [r7, #12]
 80234e6:	681b      	ldr	r3, [r3, #0]
 80234e8:	4a1f      	ldr	r2, [pc, #124]	; (8023568 <SYSTIMER_lRemoveTimerList+0xbc>)
 80234ea:	6013      	str	r3, [r2, #0]
    g_timer_list->prev = NULL;
 80234ec:	4b1e      	ldr	r3, [pc, #120]	; (8023568 <SYSTIMER_lRemoveTimerList+0xbc>)
 80234ee:	681b      	ldr	r3, [r3, #0]
 80234f0:	2200      	movs	r2, #0
 80234f2:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
 80234f4:	4b1c      	ldr	r3, [pc, #112]	; (8023568 <SYSTIMER_lRemoveTimerList+0xbc>)
 80234f6:	681b      	ldr	r3, [r3, #0]
 80234f8:	4a1b      	ldr	r2, [pc, #108]	; (8023568 <SYSTIMER_lRemoveTimerList+0xbc>)
 80234fa:	6812      	ldr	r2, [r2, #0]
 80234fc:	6991      	ldr	r1, [r2, #24]
 80234fe:	68fa      	ldr	r2, [r7, #12]
 8023500:	6992      	ldr	r2, [r2, #24]
 8023502:	440a      	add	r2, r1
 8023504:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
 8023506:	68fb      	ldr	r3, [r7, #12]
 8023508:	2200      	movs	r2, #0
 802350a:	601a      	str	r2, [r3, #0]
 802350c:	e024      	b.n	8023558 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
 802350e:	68fb      	ldr	r3, [r7, #12]
 8023510:	681b      	ldr	r3, [r3, #0]
 8023512:	2b00      	cmp	r3, #0
 8023514:	d107      	bne.n	8023526 <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
 8023516:	68fb      	ldr	r3, [r7, #12]
 8023518:	685b      	ldr	r3, [r3, #4]
 802351a:	2200      	movs	r2, #0
 802351c:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 802351e:	68fb      	ldr	r3, [r7, #12]
 8023520:	2200      	movs	r2, #0
 8023522:	605a      	str	r2, [r3, #4]
 8023524:	e018      	b.n	8023558 <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
 8023526:	68fb      	ldr	r3, [r7, #12]
 8023528:	685b      	ldr	r3, [r3, #4]
 802352a:	68fa      	ldr	r2, [r7, #12]
 802352c:	6812      	ldr	r2, [r2, #0]
 802352e:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
 8023530:	68fb      	ldr	r3, [r7, #12]
 8023532:	681b      	ldr	r3, [r3, #0]
 8023534:	68fa      	ldr	r2, [r7, #12]
 8023536:	6852      	ldr	r2, [r2, #4]
 8023538:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
 802353a:	68fb      	ldr	r3, [r7, #12]
 802353c:	681b      	ldr	r3, [r3, #0]
 802353e:	68fa      	ldr	r2, [r7, #12]
 8023540:	6812      	ldr	r2, [r2, #0]
 8023542:	6991      	ldr	r1, [r2, #24]
 8023544:	68fa      	ldr	r2, [r7, #12]
 8023546:	6992      	ldr	r2, [r2, #24]
 8023548:	440a      	add	r2, r1
 802354a:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
 802354c:	68fb      	ldr	r3, [r7, #12]
 802354e:	2200      	movs	r2, #0
 8023550:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 8023552:	68fb      	ldr	r3, [r7, #12]
 8023554:	2200      	movs	r2, #0
 8023556:	605a      	str	r2, [r3, #4]
  }
}
 8023558:	3714      	adds	r7, #20
 802355a:	46bd      	mov	sp, r7
 802355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023560:	4770      	bx	lr
 8023562:	bf00      	nop
 8023564:	1fff0120 	.word	0x1fff0120
 8023568:	1ffe8b60 	.word	0x1ffe8b60

0802356c <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
 802356c:	b580      	push	{r7, lr}
 802356e:	b082      	sub	sp, #8
 8023570:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
 8023572:	4b2f      	ldr	r3, [pc, #188]	; (8023630 <SYSTIMER_lTimerHandler+0xc4>)
 8023574:	681b      	ldr	r3, [r3, #0]
 8023576:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8023578:	e050      	b.n	802361c <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
 802357a:	687b      	ldr	r3, [r7, #4]
 802357c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8023580:	2b00      	cmp	r3, #0
 8023582:	d013      	beq.n	80235ac <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8023584:	687b      	ldr	r3, [r7, #4]
 8023586:	695b      	ldr	r3, [r3, #20]
 8023588:	4618      	mov	r0, r3
 802358a:	f7ff ff8f 	bl	80234ac <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
 802358e:	687b      	ldr	r3, [r7, #4]
 8023590:	2200      	movs	r2, #0
 8023592:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
 8023594:	687b      	ldr	r3, [r7, #4]
 8023596:	695b      	ldr	r3, [r3, #20]
 8023598:	461a      	mov	r2, r3
 802359a:	2301      	movs	r3, #1
 802359c:	4093      	lsls	r3, r2
 802359e:	43da      	mvns	r2, r3
 80235a0:	4b24      	ldr	r3, [pc, #144]	; (8023634 <SYSTIMER_lTimerHandler+0xc8>)
 80235a2:	681b      	ldr	r3, [r3, #0]
 80235a4:	4013      	ands	r3, r2
 80235a6:	4a23      	ldr	r2, [pc, #140]	; (8023634 <SYSTIMER_lTimerHandler+0xc8>)
 80235a8:	6013      	str	r3, [r2, #0]
 80235aa:	e034      	b.n	8023616 <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
 80235ac:	687b      	ldr	r3, [r7, #4]
 80235ae:	7b1b      	ldrb	r3, [r3, #12]
 80235b0:	2b00      	cmp	r3, #0
 80235b2:	d112      	bne.n	80235da <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 80235b4:	687b      	ldr	r3, [r7, #4]
 80235b6:	7b5b      	ldrb	r3, [r3, #13]
 80235b8:	2b01      	cmp	r3, #1
 80235ba:	d12c      	bne.n	8023616 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 80235bc:	687b      	ldr	r3, [r7, #4]
 80235be:	695b      	ldr	r3, [r3, #20]
 80235c0:	4618      	mov	r0, r3
 80235c2:	f7ff ff73 	bl	80234ac <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
 80235c6:	687b      	ldr	r3, [r7, #4]
 80235c8:	2202      	movs	r2, #2
 80235ca:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 80235cc:	687b      	ldr	r3, [r7, #4]
 80235ce:	689b      	ldr	r3, [r3, #8]
 80235d0:	687a      	ldr	r2, [r7, #4]
 80235d2:	6912      	ldr	r2, [r2, #16]
 80235d4:	4610      	mov	r0, r2
 80235d6:	4798      	blx	r3
 80235d8:	e01d      	b.n	8023616 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
 80235da:	687b      	ldr	r3, [r7, #4]
 80235dc:	7b1b      	ldrb	r3, [r3, #12]
 80235de:	2b01      	cmp	r3, #1
 80235e0:	d118      	bne.n	8023614 <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 80235e2:	687b      	ldr	r3, [r7, #4]
 80235e4:	7b5b      	ldrb	r3, [r3, #13]
 80235e6:	2b01      	cmp	r3, #1
 80235e8:	d115      	bne.n	8023616 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 80235ea:	687b      	ldr	r3, [r7, #4]
 80235ec:	695b      	ldr	r3, [r3, #20]
 80235ee:	4618      	mov	r0, r3
 80235f0:	f7ff ff5c 	bl	80234ac <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
 80235f4:	687b      	ldr	r3, [r7, #4]
 80235f6:	69da      	ldr	r2, [r3, #28]
 80235f8:	687b      	ldr	r3, [r7, #4]
 80235fa:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
 80235fc:	687b      	ldr	r3, [r7, #4]
 80235fe:	695b      	ldr	r3, [r3, #20]
 8023600:	4618      	mov	r0, r3
 8023602:	f7ff fe71 	bl	80232e8 <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8023606:	687b      	ldr	r3, [r7, #4]
 8023608:	689b      	ldr	r3, [r3, #8]
 802360a:	687a      	ldr	r2, [r7, #4]
 802360c:	6912      	ldr	r2, [r2, #16]
 802360e:	4610      	mov	r0, r2
 8023610:	4798      	blx	r3
 8023612:	e000      	b.n	8023616 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
 8023614:	e009      	b.n	802362a <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
 8023616:	4b06      	ldr	r3, [pc, #24]	; (8023630 <SYSTIMER_lTimerHandler+0xc4>)
 8023618:	681b      	ldr	r3, [r3, #0]
 802361a:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 802361c:	687b      	ldr	r3, [r7, #4]
 802361e:	2b00      	cmp	r3, #0
 8023620:	d003      	beq.n	802362a <SYSTIMER_lTimerHandler+0xbe>
 8023622:	687b      	ldr	r3, [r7, #4]
 8023624:	699b      	ldr	r3, [r3, #24]
 8023626:	2b00      	cmp	r3, #0
 8023628:	d0a7      	beq.n	802357a <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
 802362a:	3708      	adds	r7, #8
 802362c:	46bd      	mov	sp, r7
 802362e:	bd80      	pop	{r7, pc}
 8023630:	1ffe8b60 	.word	0x1ffe8b60
 8023634:	1ffe8b64 	.word	0x1ffe8b64

08023638 <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
 8023638:	b580      	push	{r7, lr}
 802363a:	b082      	sub	sp, #8
 802363c:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
 802363e:	4b0e      	ldr	r3, [pc, #56]	; (8023678 <SysTick_Handler+0x40>)
 8023640:	681b      	ldr	r3, [r3, #0]
 8023642:	607b      	str	r3, [r7, #4]
  g_systick_count++;
 8023644:	4b0d      	ldr	r3, [pc, #52]	; (802367c <SysTick_Handler+0x44>)
 8023646:	681b      	ldr	r3, [r3, #0]
 8023648:	3301      	adds	r3, #1
 802364a:	4a0c      	ldr	r2, [pc, #48]	; (802367c <SysTick_Handler+0x44>)
 802364c:	6013      	str	r3, [r2, #0]

  if (NULL != object_ptr)
 802364e:	687b      	ldr	r3, [r7, #4]
 8023650:	2b00      	cmp	r3, #0
 8023652:	d00e      	beq.n	8023672 <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
 8023654:	687b      	ldr	r3, [r7, #4]
 8023656:	699b      	ldr	r3, [r3, #24]
 8023658:	2b01      	cmp	r3, #1
 802365a:	d905      	bls.n	8023668 <SysTick_Handler+0x30>
    {
      object_ptr->count--;
 802365c:	687b      	ldr	r3, [r7, #4]
 802365e:	699b      	ldr	r3, [r3, #24]
 8023660:	1e5a      	subs	r2, r3, #1
 8023662:	687b      	ldr	r3, [r7, #4]
 8023664:	619a      	str	r2, [r3, #24]
 8023666:	e004      	b.n	8023672 <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
 8023668:	687b      	ldr	r3, [r7, #4]
 802366a:	2200      	movs	r2, #0
 802366c:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
 802366e:	f7ff ff7d 	bl	802356c <SYSTIMER_lTimerHandler>
    }
  }
}
 8023672:	3708      	adds	r7, #8
 8023674:	46bd      	mov	sp, r7
 8023676:	bd80      	pop	{r7, pc}
 8023678:	1ffe8b60 	.word	0x1ffe8b60
 802367c:	1ffe8b68 	.word	0x1ffe8b68

08023680 <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
 8023680:	b580      	push	{r7, lr}
 8023682:	b084      	sub	sp, #16
 8023684:	af00      	add	r7, sp, #0
 8023686:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
 8023688:	2300      	movs	r3, #0
 802368a:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
 802368c:	687b      	ldr	r3, [r7, #4]
 802368e:	781b      	ldrb	r3, [r3, #0]
 8023690:	f083 0301 	eor.w	r3, r3, #1
 8023694:	b2db      	uxtb	r3, r3
 8023696:	2b00      	cmp	r3, #0
 8023698:	d021      	beq.n	80236de <SYSTIMER_Init+0x5e>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
 802369a:	4b13      	ldr	r3, [pc, #76]	; (80236e8 <SYSTIMER_Init+0x68>)
 802369c:	2200      	movs	r2, #0
 802369e:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
 80236a0:	f44f 60b4 	mov.w	r0, #1440	; 0x5a0
 80236a4:	f7ff fdfe 	bl	80232a4 <SysTick_Config>
 80236a8:	4603      	mov	r3, r0
 80236aa:	73fb      	strb	r3, [r7, #15]

    if (SYSTIMER_STATUS_FAILURE == status)
 80236ac:	7bfb      	ldrb	r3, [r7, #15]
 80236ae:	2b01      	cmp	r3, #1
 80236b0:	d015      	beq.n	80236de <SYSTIMER_Init+0x5e>
    }
    else
    {
#if (UC_FAMILY == XMC4)
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
 80236b2:	f7ff fd8d 	bl	80231d0 <__NVIC_GetPriorityGrouping>
 80236b6:	4603      	mov	r3, r0
 80236b8:	4618      	mov	r0, r3
 80236ba:	213f      	movs	r1, #63	; 0x3f
 80236bc:	2200      	movs	r2, #0
 80236be:	f7ff fdbf 	bl	8023240 <NVIC_EncodePriority>
 80236c2:	4603      	mov	r3, r0
 80236c4:	f04f 30ff 	mov.w	r0, #4294967295
 80236c8:	4619      	mov	r1, r3
 80236ca:	f7ff fd8f 	bl	80231ec <__NVIC_SetPriority>
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
#endif      
      g_timer_tracker = 0U;
 80236ce:	4b07      	ldr	r3, [pc, #28]	; (80236ec <SYSTIMER_Init+0x6c>)
 80236d0:	2200      	movs	r2, #0
 80236d2:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
 80236d4:	687b      	ldr	r3, [r7, #4]
 80236d6:	2201      	movs	r2, #1
 80236d8:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
 80236da:	2300      	movs	r3, #0
 80236dc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 80236de:	7bfb      	ldrb	r3, [r7, #15]
}
 80236e0:	4618      	mov	r0, r3
 80236e2:	3710      	adds	r7, #16
 80236e4:	46bd      	mov	sp, r7
 80236e6:	bd80      	pop	{r7, pc}
 80236e8:	1ffe8b60 	.word	0x1ffe8b60
 80236ec:	1ffe8b64 	.word	0x1ffe8b64

080236f0 <SYSTIMER_CreateTimer>:
  uint32_t period,
  SYSTIMER_MODE_t mode,
  SYSTIMER_CALLBACK_t callback,
  void  *args
)
{
 80236f0:	b480      	push	{r7}
 80236f2:	b089      	sub	sp, #36	; 0x24
 80236f4:	af00      	add	r7, sp, #0
 80236f6:	60f8      	str	r0, [r7, #12]
 80236f8:	607a      	str	r2, [r7, #4]
 80236fa:	603b      	str	r3, [r7, #0]
 80236fc:	460b      	mov	r3, r1
 80236fe:	72fb      	strb	r3, [r7, #11]
  uint32_t id = 0U;
 8023700:	2300      	movs	r3, #0
 8023702:	61fb      	str	r3, [r7, #28]
  uint32_t count = 0U;
 8023704:	2300      	movs	r3, #0
 8023706:	61bb      	str	r3, [r7, #24]
  uint32_t period_ratio = 0U;
 8023708:	2300      	movs	r3, #0
 802370a:	617b      	str	r3, [r7, #20]
            ((period >= SYSTIMER_TICK_PERIOD_US) && (period > 0U) && (period <= 0xFFFFFFFFU)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Timer creation failure due to invalid timer mode",
            ((SYSTIMER_MODE_ONE_SHOT == mode) || (SYSTIMER_MODE_PERIODIC == mode)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Can not create software without user callback", (NULL != callback));
  
  if (period < SYSTIMER_TICK_PERIOD_US)
 802370c:	68fb      	ldr	r3, [r7, #12]
 802370e:	2b09      	cmp	r3, #9
 8023710:	d802      	bhi.n	8023718 <SYSTIMER_CreateTimer+0x28>
  {
    id = 0U;
 8023712:	2300      	movs	r3, #0
 8023714:	61fb      	str	r3, [r7, #28]
 8023716:	e07b      	b.n	8023810 <SYSTIMER_CreateTimer+0x120>
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8023718:	2300      	movs	r3, #0
 802371a:	61bb      	str	r3, [r7, #24]
 802371c:	e075      	b.n	802380a <SYSTIMER_CreateTimer+0x11a>
    {
      /* Check for free timer ID */
      if (0U == (g_timer_tracker & (1U << count)))
 802371e:	69bb      	ldr	r3, [r7, #24]
 8023720:	2201      	movs	r2, #1
 8023722:	409a      	lsls	r2, r3
 8023724:	4b3e      	ldr	r3, [pc, #248]	; (8023820 <SYSTIMER_CreateTimer+0x130>)
 8023726:	681b      	ldr	r3, [r3, #0]
 8023728:	4013      	ands	r3, r2
 802372a:	2b00      	cmp	r3, #0
 802372c:	d16a      	bne.n	8023804 <SYSTIMER_CreateTimer+0x114>
      {
        /* If yes, assign ID to this timer */
        g_timer_tracker |= (1U << count);
 802372e:	69bb      	ldr	r3, [r7, #24]
 8023730:	2201      	movs	r2, #1
 8023732:	409a      	lsls	r2, r3
 8023734:	4b3a      	ldr	r3, [pc, #232]	; (8023820 <SYSTIMER_CreateTimer+0x130>)
 8023736:	681b      	ldr	r3, [r3, #0]
 8023738:	4313      	orrs	r3, r2
 802373a:	4a39      	ldr	r2, [pc, #228]	; (8023820 <SYSTIMER_CreateTimer+0x130>)
 802373c:	6013      	str	r3, [r2, #0]
        /* Initialize the timer as per input values */
        g_timer_tbl[count].id     = count;
 802373e:	4939      	ldr	r1, [pc, #228]	; (8023824 <SYSTIMER_CreateTimer+0x134>)
 8023740:	69ba      	ldr	r2, [r7, #24]
 8023742:	4613      	mov	r3, r2
 8023744:	00db      	lsls	r3, r3, #3
 8023746:	4413      	add	r3, r2
 8023748:	009b      	lsls	r3, r3, #2
 802374a:	440b      	add	r3, r1
 802374c:	3310      	adds	r3, #16
 802374e:	69ba      	ldr	r2, [r7, #24]
 8023750:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].mode   = mode;
 8023752:	4934      	ldr	r1, [pc, #208]	; (8023824 <SYSTIMER_CreateTimer+0x134>)
 8023754:	69ba      	ldr	r2, [r7, #24]
 8023756:	4613      	mov	r3, r2
 8023758:	00db      	lsls	r3, r3, #3
 802375a:	4413      	add	r3, r2
 802375c:	009b      	lsls	r3, r3, #2
 802375e:	440b      	add	r3, r1
 8023760:	3308      	adds	r3, #8
 8023762:	7afa      	ldrb	r2, [r7, #11]
 8023764:	711a      	strb	r2, [r3, #4]
        g_timer_tbl[count].state  = SYSTIMER_STATE_STOPPED;
 8023766:	492f      	ldr	r1, [pc, #188]	; (8023824 <SYSTIMER_CreateTimer+0x134>)
 8023768:	69ba      	ldr	r2, [r7, #24]
 802376a:	4613      	mov	r3, r2
 802376c:	00db      	lsls	r3, r3, #3
 802376e:	4413      	add	r3, r2
 8023770:	009b      	lsls	r3, r3, #2
 8023772:	440b      	add	r3, r1
 8023774:	3308      	adds	r3, #8
 8023776:	2202      	movs	r2, #2
 8023778:	715a      	strb	r2, [r3, #5]
        period_ratio = (uint32_t)(period / SYSTIMER_TICK_PERIOD_US);
 802377a:	68fb      	ldr	r3, [r7, #12]
 802377c:	4a2a      	ldr	r2, [pc, #168]	; (8023828 <SYSTIMER_CreateTimer+0x138>)
 802377e:	fba2 2303 	umull	r2, r3, r2, r3
 8023782:	08db      	lsrs	r3, r3, #3
 8023784:	617b      	str	r3, [r7, #20]
        g_timer_tbl[count].count  = (period_ratio + HW_TIMER_ADDITIONAL_CNT);
 8023786:	697b      	ldr	r3, [r7, #20]
 8023788:	1c59      	adds	r1, r3, #1
 802378a:	4826      	ldr	r0, [pc, #152]	; (8023824 <SYSTIMER_CreateTimer+0x134>)
 802378c:	69ba      	ldr	r2, [r7, #24]
 802378e:	4613      	mov	r3, r2
 8023790:	00db      	lsls	r3, r3, #3
 8023792:	4413      	add	r3, r2
 8023794:	009b      	lsls	r3, r3, #2
 8023796:	4403      	add	r3, r0
 8023798:	3318      	adds	r3, #24
 802379a:	6019      	str	r1, [r3, #0]
        g_timer_tbl[count].reload  = period_ratio;
 802379c:	4921      	ldr	r1, [pc, #132]	; (8023824 <SYSTIMER_CreateTimer+0x134>)
 802379e:	69ba      	ldr	r2, [r7, #24]
 80237a0:	4613      	mov	r3, r2
 80237a2:	00db      	lsls	r3, r3, #3
 80237a4:	4413      	add	r3, r2
 80237a6:	009b      	lsls	r3, r3, #2
 80237a8:	440b      	add	r3, r1
 80237aa:	3318      	adds	r3, #24
 80237ac:	697a      	ldr	r2, [r7, #20]
 80237ae:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].callback = callback;
 80237b0:	491c      	ldr	r1, [pc, #112]	; (8023824 <SYSTIMER_CreateTimer+0x134>)
 80237b2:	69ba      	ldr	r2, [r7, #24]
 80237b4:	4613      	mov	r3, r2
 80237b6:	00db      	lsls	r3, r3, #3
 80237b8:	4413      	add	r3, r2
 80237ba:	009b      	lsls	r3, r3, #2
 80237bc:	440b      	add	r3, r1
 80237be:	3308      	adds	r3, #8
 80237c0:	687a      	ldr	r2, [r7, #4]
 80237c2:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].args = args;
 80237c4:	4917      	ldr	r1, [pc, #92]	; (8023824 <SYSTIMER_CreateTimer+0x134>)
 80237c6:	69ba      	ldr	r2, [r7, #24]
 80237c8:	4613      	mov	r3, r2
 80237ca:	00db      	lsls	r3, r3, #3
 80237cc:	4413      	add	r3, r2
 80237ce:	009b      	lsls	r3, r3, #2
 80237d0:	440b      	add	r3, r1
 80237d2:	3310      	adds	r3, #16
 80237d4:	683a      	ldr	r2, [r7, #0]
 80237d6:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].prev   = NULL;
 80237d8:	4912      	ldr	r1, [pc, #72]	; (8023824 <SYSTIMER_CreateTimer+0x134>)
 80237da:	69ba      	ldr	r2, [r7, #24]
 80237dc:	4613      	mov	r3, r2
 80237de:	00db      	lsls	r3, r3, #3
 80237e0:	4413      	add	r3, r2
 80237e2:	009b      	lsls	r3, r3, #2
 80237e4:	440b      	add	r3, r1
 80237e6:	2200      	movs	r2, #0
 80237e8:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].next   = NULL;
 80237ea:	490e      	ldr	r1, [pc, #56]	; (8023824 <SYSTIMER_CreateTimer+0x134>)
 80237ec:	69ba      	ldr	r2, [r7, #24]
 80237ee:	4613      	mov	r3, r2
 80237f0:	00db      	lsls	r3, r3, #3
 80237f2:	4413      	add	r3, r2
 80237f4:	009b      	lsls	r3, r3, #2
 80237f6:	440b      	add	r3, r1
 80237f8:	2200      	movs	r2, #0
 80237fa:	601a      	str	r2, [r3, #0]
        id = count + 1U;
 80237fc:	69bb      	ldr	r3, [r7, #24]
 80237fe:	3301      	adds	r3, #1
 8023800:	61fb      	str	r3, [r7, #28]
        break;
 8023802:	e005      	b.n	8023810 <SYSTIMER_CreateTimer+0x120>
  {
    id = 0U;
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8023804:	69bb      	ldr	r3, [r7, #24]
 8023806:	3301      	adds	r3, #1
 8023808:	61bb      	str	r3, [r7, #24]
 802380a:	69bb      	ldr	r3, [r7, #24]
 802380c:	2b00      	cmp	r3, #0
 802380e:	d086      	beq.n	802371e <SYSTIMER_CreateTimer+0x2e>
      }
    }

  }
  
  return (id);
 8023810:	69fb      	ldr	r3, [r7, #28]
}  
 8023812:	4618      	mov	r0, r3
 8023814:	3724      	adds	r7, #36	; 0x24
 8023816:	46bd      	mov	sp, r7
 8023818:	f85d 7b04 	ldr.w	r7, [sp], #4
 802381c:	4770      	bx	lr
 802381e:	bf00      	nop
 8023820:	1ffe8b64 	.word	0x1ffe8b64
 8023824:	1fff0120 	.word	0x1fff0120
 8023828:	cccccccd 	.word	0xcccccccd

0802382c <SYSTIMER_StartTimer>:

/*
 *  API to start the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StartTimer(uint32_t id)
{
 802382c:	b580      	push	{r7, lr}
 802382e:	b084      	sub	sp, #16
 8023830:	af00      	add	r7, sp, #0
 8023832:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_FAILURE;
 8023834:	2301      	movs	r3, #1
 8023836:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_StartTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StartTimer: Error during start of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));
  
  /* Check if timer is running */
  if (SYSTIMER_STATE_STOPPED == g_timer_tbl[id - 1U].state)
 8023838:	687b      	ldr	r3, [r7, #4]
 802383a:	1e5a      	subs	r2, r3, #1
 802383c:	491a      	ldr	r1, [pc, #104]	; (80238a8 <SYSTIMER_StartTimer+0x7c>)
 802383e:	4613      	mov	r3, r2
 8023840:	00db      	lsls	r3, r3, #3
 8023842:	4413      	add	r3, r2
 8023844:	009b      	lsls	r3, r3, #2
 8023846:	440b      	add	r3, r1
 8023848:	3308      	adds	r3, #8
 802384a:	795b      	ldrb	r3, [r3, #5]
 802384c:	2b02      	cmp	r3, #2
 802384e:	d126      	bne.n	802389e <SYSTIMER_StartTimer+0x72>
  {
    g_timer_tbl[id - 1U].count = (g_timer_tbl[id - 1U].reload + HW_TIMER_ADDITIONAL_CNT);
 8023850:	687b      	ldr	r3, [r7, #4]
 8023852:	1e5a      	subs	r2, r3, #1
 8023854:	687b      	ldr	r3, [r7, #4]
 8023856:	1e59      	subs	r1, r3, #1
 8023858:	4813      	ldr	r0, [pc, #76]	; (80238a8 <SYSTIMER_StartTimer+0x7c>)
 802385a:	460b      	mov	r3, r1
 802385c:	00db      	lsls	r3, r3, #3
 802385e:	440b      	add	r3, r1
 8023860:	009b      	lsls	r3, r3, #2
 8023862:	4403      	add	r3, r0
 8023864:	3318      	adds	r3, #24
 8023866:	685b      	ldr	r3, [r3, #4]
 8023868:	1c59      	adds	r1, r3, #1
 802386a:	480f      	ldr	r0, [pc, #60]	; (80238a8 <SYSTIMER_StartTimer+0x7c>)
 802386c:	4613      	mov	r3, r2
 802386e:	00db      	lsls	r3, r3, #3
 8023870:	4413      	add	r3, r2
 8023872:	009b      	lsls	r3, r3, #2
 8023874:	4403      	add	r3, r0
 8023876:	3318      	adds	r3, #24
 8023878:	6019      	str	r1, [r3, #0]
    /* set timer status as SYSTIMER_STATE_RUNNING */
    g_timer_tbl[id - 1U].state = SYSTIMER_STATE_RUNNING;
 802387a:	687b      	ldr	r3, [r7, #4]
 802387c:	1e5a      	subs	r2, r3, #1
 802387e:	490a      	ldr	r1, [pc, #40]	; (80238a8 <SYSTIMER_StartTimer+0x7c>)
 8023880:	4613      	mov	r3, r2
 8023882:	00db      	lsls	r3, r3, #3
 8023884:	4413      	add	r3, r2
 8023886:	009b      	lsls	r3, r3, #2
 8023888:	440b      	add	r3, r1
 802388a:	3308      	adds	r3, #8
 802388c:	2201      	movs	r2, #1
 802388e:	715a      	strb	r2, [r3, #5]
    /* Insert this timer into timer list */
    SYSTIMER_lInsertTimerList((id - 1U));
 8023890:	687b      	ldr	r3, [r7, #4]
 8023892:	3b01      	subs	r3, #1
 8023894:	4618      	mov	r0, r3
 8023896:	f7ff fd27 	bl	80232e8 <SYSTIMER_lInsertTimerList>
    status = SYSTIMER_STATUS_SUCCESS;
 802389a:	2300      	movs	r3, #0
 802389c:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 802389e:	7bfb      	ldrb	r3, [r7, #15]
}
 80238a0:	4618      	mov	r0, r3
 80238a2:	3710      	adds	r7, #16
 80238a4:	46bd      	mov	sp, r7
 80238a6:	bd80      	pop	{r7, pc}
 80238a8:	1fff0120 	.word	0x1fff0120

080238ac <SYSTIMER_GetTickCount>:

/*
 *  API to get the SysTick count.
 */
uint32_t SYSTIMER_GetTickCount(void)
{
 80238ac:	b480      	push	{r7}
 80238ae:	af00      	add	r7, sp, #0
  return (g_systick_count);
 80238b0:	4b03      	ldr	r3, [pc, #12]	; (80238c0 <SYSTIMER_GetTickCount+0x14>)
 80238b2:	681b      	ldr	r3, [r3, #0]
}
 80238b4:	4618      	mov	r0, r3
 80238b6:	46bd      	mov	sp, r7
 80238b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238bc:	4770      	bx	lr
 80238be:	bf00      	nop
 80238c0:	1ffe8b68 	.word	0x1ffe8b68

080238c4 <XMC_SPI_CH_SetTransmitMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
 80238c4:	b480      	push	{r7}
 80238c6:	b083      	sub	sp, #12
 80238c8:	af00      	add	r7, sp, #0
 80238ca:	6078      	str	r0, [r7, #4]
 80238cc:	460b      	mov	r3, r1
 80238ce:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 80238d0:	687b      	ldr	r3, [r7, #4]
 80238d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80238d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 80238d8:	78fb      	ldrb	r3, [r7, #3]
 80238da:	019b      	lsls	r3, r3, #6
 80238dc:	b2db      	uxtb	r3, r3
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 80238de:	431a      	orrs	r2, r3
 80238e0:	687b      	ldr	r3, [r7, #4]
 80238e2:	641a      	str	r2, [r3, #64]	; 0x40
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
}
 80238e4:	370c      	adds	r7, #12
 80238e6:	46bd      	mov	sp, r7
 80238e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238ec:	4770      	bx	lr
 80238ee:	bf00      	nop

080238f0 <XMC_DMA_CH_Enable>:
 * The function sets the GPDMA's CHENREG register to enable a DMA channel. Please
 * ensure that the GPDMA module itself is enabled before calling this function.
 * See ::XMC_DMA_Enable() for details.
 */
__STATIC_INLINE void XMC_DMA_CH_Enable(XMC_DMA_t *const dma, const uint8_t channel)
{
 80238f0:	b480      	push	{r7}
 80238f2:	b083      	sub	sp, #12
 80238f4:	af00      	add	r7, sp, #0
 80238f6:	6078      	str	r0, [r7, #4]
 80238f8:	460b      	mov	r3, r1
 80238fa:	70fb      	strb	r3, [r7, #3]
  dma->CHENREG = (uint32_t)(0x101UL << channel);
 80238fc:	78fb      	ldrb	r3, [r7, #3]
 80238fe:	f240 1201 	movw	r2, #257	; 0x101
 8023902:	409a      	lsls	r2, r3
 8023904:	687b      	ldr	r3, [r7, #4]
 8023906:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 802390a:	370c      	adds	r7, #12
 802390c:	46bd      	mov	sp, r7
 802390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023912:	4770      	bx	lr

08023914 <XMC_DMA_CH_SetSourceAddress>:
 *
 * \par<b>Related API: </b><br>
 * ::XMC_DMA_CH_SetDestinationAddress() <br>
 */
__STATIC_INLINE void XMC_DMA_CH_SetSourceAddress(XMC_DMA_t *const dma, const uint8_t channel, uint32_t addr)
{
 8023914:	b480      	push	{r7}
 8023916:	b085      	sub	sp, #20
 8023918:	af00      	add	r7, sp, #0
 802391a:	60f8      	str	r0, [r7, #12]
 802391c:	460b      	mov	r3, r1
 802391e:	607a      	str	r2, [r7, #4]
 8023920:	72fb      	strb	r3, [r7, #11]
  dma->CH[channel].SAR = addr;
 8023922:	7afb      	ldrb	r3, [r7, #11]
 8023924:	68fa      	ldr	r2, [r7, #12]
 8023926:	2158      	movs	r1, #88	; 0x58
 8023928:	fb01 f303 	mul.w	r3, r1, r3
 802392c:	4413      	add	r3, r2
 802392e:	687a      	ldr	r2, [r7, #4]
 8023930:	601a      	str	r2, [r3, #0]
}
 8023932:	3714      	adds	r7, #20
 8023934:	46bd      	mov	sp, r7
 8023936:	f85d 7b04 	ldr.w	r7, [sp], #4
 802393a:	4770      	bx	lr

0802393c <XMC_DMA_CH_SetDestinationAddress>:
 *
 * \par<b>Related API: </b><br>
 * ::XMC_DMA_CH_SetSourceAddress() <br>
 */
__STATIC_INLINE void XMC_DMA_CH_SetDestinationAddress(XMC_DMA_t *const dma, const uint8_t channel, uint32_t addr)
{
 802393c:	b480      	push	{r7}
 802393e:	b085      	sub	sp, #20
 8023940:	af00      	add	r7, sp, #0
 8023942:	60f8      	str	r0, [r7, #12]
 8023944:	460b      	mov	r3, r1
 8023946:	607a      	str	r2, [r7, #4]
 8023948:	72fb      	strb	r3, [r7, #11]
  dma->CH[channel].DAR = addr;
 802394a:	7afb      	ldrb	r3, [r7, #11]
 802394c:	68fa      	ldr	r2, [r7, #12]
 802394e:	2158      	movs	r1, #88	; 0x58
 8023950:	fb01 f303 	mul.w	r3, r1, r3
 8023954:	4413      	add	r3, r2
 8023956:	3308      	adds	r3, #8
 8023958:	687a      	ldr	r2, [r7, #4]
 802395a:	601a      	str	r2, [r3, #0]
}
 802395c:	3714      	adds	r7, #20
 802395e:	46bd      	mov	sp, r7
 8023960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023964:	4770      	bx	lr
 8023966:	bf00      	nop

08023968 <XMC_DMA_CH_SetBlockSize>:
 * The function may be called after enabling the DMA channel. Please
 * see ::XMC_DMA_CH_Enable() for more information.
 *
 */
__STATIC_INLINE void XMC_DMA_CH_SetBlockSize(XMC_DMA_t *const dma, const uint8_t channel, uint32_t block_size)
{
 8023968:	b480      	push	{r7}
 802396a:	b085      	sub	sp, #20
 802396c:	af00      	add	r7, sp, #0
 802396e:	60f8      	str	r0, [r7, #12]
 8023970:	460b      	mov	r3, r1
 8023972:	607a      	str	r2, [r7, #4]
 8023974:	72fb      	strb	r3, [r7, #11]
  dma->CH[channel].CTLH = block_size;
 8023976:	7afb      	ldrb	r3, [r7, #11]
 8023978:	68fa      	ldr	r2, [r7, #12]
 802397a:	2158      	movs	r1, #88	; 0x58
 802397c:	fb01 f303 	mul.w	r3, r1, r3
 8023980:	4413      	add	r3, r2
 8023982:	3318      	adds	r3, #24
 8023984:	687a      	ldr	r2, [r7, #4]
 8023986:	605a      	str	r2, [r3, #4]
}
 8023988:	3714      	adds	r7, #20
 802398a:	46bd      	mov	sp, r7
 802398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023990:	4770      	bx	lr
 8023992:	bf00      	nop

08023994 <SPI_MASTER_Init>:

/*
 * This function initializes the SPI channel, based on UI configuration.
 */
SPI_MASTER_STATUS_t SPI_MASTER_Init(SPI_MASTER_t* const handle)
{
 8023994:	b580      	push	{r7, lr}
 8023996:	b084      	sub	sp, #16
 8023998:	af00      	add	r7, sp, #0
 802399a:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t status;

  XMC_ASSERT("SPI_MASTER_Init:handle NULL" , (handle != NULL));

  /* Configure the port registers and data input registers of SPI channel */
  status = handle->config->fptr_spi_master_config();
 802399c:	687b      	ldr	r3, [r7, #4]
 802399e:	685b      	ldr	r3, [r3, #4]
 80239a0:	685b      	ldr	r3, [r3, #4]
 80239a2:	4798      	blx	r3
 80239a4:	4603      	mov	r3, r0
 80239a6:	73fb      	strb	r3, [r7, #15]

  return status;
 80239a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80239aa:	4618      	mov	r0, r3
 80239ac:	3710      	adds	r7, #16
 80239ae:	46bd      	mov	sp, r7
 80239b0:	bd80      	pop	{r7, pc}
 80239b2:	bf00      	nop

080239b4 <SPI_MASTER_Transmit>:

  return status;
}

SPI_MASTER_STATUS_t SPI_MASTER_Transmit(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 80239b4:	b580      	push	{r7, lr}
 80239b6:	b086      	sub	sp, #24
 80239b8:	af00      	add	r7, sp, #0
 80239ba:	60f8      	str	r0, [r7, #12]
 80239bc:	60b9      	str	r1, [r7, #8]
 80239be:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  
   status = SPI_MASTER_STATUS_FAILURE;
 80239c0:	2301      	movs	r3, #1
 80239c2:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_StartTransmitIRQ(handle, dataptr, count);
  }
#endif

#if (SPI_MASTER_DMA_TRANSMIT_MODE == 1U)
  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 80239c4:	68fb      	ldr	r3, [r7, #12]
 80239c6:	685b      	ldr	r3, [r3, #4]
 80239c8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80239cc:	2b01      	cmp	r3, #1
 80239ce:	d106      	bne.n	80239de <SPI_MASTER_Transmit+0x2a>
  {
    status = SPI_MASTER_StartTransmitDMA(handle, dataptr, count);
 80239d0:	68f8      	ldr	r0, [r7, #12]
 80239d2:	68b9      	ldr	r1, [r7, #8]
 80239d4:	687a      	ldr	r2, [r7, #4]
 80239d6:	f000 f821 	bl	8023a1c <SPI_MASTER_StartTransmitDMA>
 80239da:	4603      	mov	r3, r0
 80239dc:	75fb      	strb	r3, [r7, #23]
  {
    status = SPI_MASTER_lStartTransmitPolling(handle, dataptr, count);
  }
#endif

  return status;
 80239de:	7dfb      	ldrb	r3, [r7, #23]
}
 80239e0:	4618      	mov	r0, r3
 80239e2:	3718      	adds	r7, #24
 80239e4:	46bd      	mov	sp, r7
 80239e6:	bd80      	pop	{r7, pc}

080239e8 <SPI_MASTER_Receive>:

SPI_MASTER_STATUS_t SPI_MASTER_Receive(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 80239e8:	b580      	push	{r7, lr}
 80239ea:	b086      	sub	sp, #24
 80239ec:	af00      	add	r7, sp, #0
 80239ee:	60f8      	str	r0, [r7, #12]
 80239f0:	60b9      	str	r1, [r7, #8]
 80239f2:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;

  status = SPI_MASTER_STATUS_FAILURE;
 80239f4:	2301      	movs	r3, #1
 80239f6:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_StartReceiveIRQ(handle, dataptr, count);
  }
#endif

#if (SPI_MASTER_DMA_RECEIVE_MODE == 1U)
  if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 80239f8:	68fb      	ldr	r3, [r7, #12]
 80239fa:	685b      	ldr	r3, [r3, #4]
 80239fc:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8023a00:	2b01      	cmp	r3, #1
 8023a02:	d106      	bne.n	8023a12 <SPI_MASTER_Receive+0x2a>
  {
    status = SPI_MASTER_StartReceiveDMA(handle, dataptr, count);
 8023a04:	68f8      	ldr	r0, [r7, #12]
 8023a06:	68b9      	ldr	r1, [r7, #8]
 8023a08:	687a      	ldr	r2, [r7, #4]
 8023a0a:	f000 f8db 	bl	8023bc4 <SPI_MASTER_StartReceiveDMA>
 8023a0e:	4603      	mov	r3, r0
 8023a10:	75fb      	strb	r3, [r7, #23]
  {
    status = SPI_MASTER_lStartReceivePolling(handle, dataptr, count);
  }
#endif

  return status;
 8023a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8023a14:	4618      	mov	r0, r3
 8023a16:	3718      	adds	r7, #24
 8023a18:	46bd      	mov	sp, r7
 8023a1a:	bd80      	pop	{r7, pc}

08023a1c <SPI_MASTER_StartTransmitDMA>:
}
#endif

#if(SPI_MASTER_DMA_TRANSMIT_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_StartTransmitDMA(const SPI_MASTER_t *const handle, uint8_t *data_ptr, uint32_t block_size)
{
 8023a1c:	b580      	push	{r7, lr}
 8023a1e:	b088      	sub	sp, #32
 8023a20:	af00      	add	r7, sp, #0
 8023a22:	60f8      	str	r0, [r7, #12]
 8023a24:	60b9      	str	r1, [r7, #8]
 8023a26:	607a      	str	r2, [r7, #4]
  uint32_t dma_ctll;
  uint32_t mode;

  XMC_ASSERT("SPI_MASTER_StartTransmitDMA:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_MODE_MISMATCH;
 8023a28:	2304      	movs	r3, #4
 8023a2a:	77fb      	strb	r3, [r7, #31]
  runtime_handle = handle->runtime;
 8023a2c:	68fb      	ldr	r3, [r7, #12]
 8023a2e:	689b      	ldr	r3, [r3, #8]
 8023a30:	617b      	str	r3, [r7, #20]

  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 8023a32:	68fb      	ldr	r3, [r7, #12]
 8023a34:	685b      	ldr	r3, [r3, #4]
 8023a36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8023a3a:	2b01      	cmp	r3, #1
 8023a3c:	f040 80bc 	bne.w	8023bb8 <SPI_MASTER_StartTransmitDMA+0x19c>
  {
    /* Check whether SPI channel is free or not */
    if (false == runtime_handle->tx_busy)
 8023a40:	697b      	ldr	r3, [r7, #20]
 8023a42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8023a46:	b2db      	uxtb	r3, r3
 8023a48:	f083 0301 	eor.w	r3, r3, #1
 8023a4c:	b2db      	uxtb	r3, r3
 8023a4e:	2b00      	cmp	r3, #0
 8023a50:	f000 80b0 	beq.w	8023bb4 <SPI_MASTER_StartTransmitDMA+0x198>
    {
      /* Check data pointer is valid or not */
      if ((data_ptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 8023a54:	68bb      	ldr	r3, [r7, #8]
 8023a56:	2b00      	cmp	r3, #0
 8023a58:	f000 80a9 	beq.w	8023bae <SPI_MASTER_StartTransmitDMA+0x192>
 8023a5c:	687b      	ldr	r3, [r7, #4]
 8023a5e:	2b00      	cmp	r3, #0
 8023a60:	f000 80a5 	beq.w	8023bae <SPI_MASTER_StartTransmitDMA+0x192>
 8023a64:	687b      	ldr	r3, [r7, #4]
 8023a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8023a6a:	f080 80a0 	bcs.w	8023bae <SPI_MASTER_StartTransmitDMA+0x192>
      {
        /* Obtain the address of data, size of data */
        runtime_handle->tx_data_count = block_size;
 8023a6e:	697b      	ldr	r3, [r7, #20]
 8023a70:	687a      	ldr	r2, [r7, #4]
 8023a72:	605a      	str	r2, [r3, #4]
        /* Initialize to first index and set the busy flag */
        runtime_handle->tx_data_index = 0U;
 8023a74:	697b      	ldr	r3, [r7, #20]
 8023a76:	2200      	movs	r2, #0
 8023a78:	609a      	str	r2, [r3, #8]
        runtime_handle->tx_busy = true;
 8023a7a:	697b      	ldr	r3, [r7, #20]
 8023a7c:	2201      	movs	r2, #1
 8023a7e:	f883 2020 	strb.w	r2, [r3, #32]

        if (runtime_handle->tx_data_dummy == true)
 8023a82:	697b      	ldr	r3, [r7, #20]
 8023a84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8023a88:	b2db      	uxtb	r3, r3
 8023a8a:	2b00      	cmp	r3, #0
 8023a8c:	d029      	beq.n	8023ae2 <SPI_MASTER_StartTransmitDMA+0xc6>
        {
          dma_ctll = (uint32_t)handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL;
 8023a8e:	68fb      	ldr	r3, [r7, #12]
 8023a90:	68db      	ldr	r3, [r3, #12]
 8023a92:	681a      	ldr	r2, [r3, #0]
 8023a94:	68fb      	ldr	r3, [r7, #12]
 8023a96:	7f5b      	ldrb	r3, [r3, #29]
 8023a98:	4619      	mov	r1, r3
 8023a9a:	2358      	movs	r3, #88	; 0x58
 8023a9c:	fb03 f301 	mul.w	r3, r3, r1
 8023aa0:	4413      	add	r3, r2
 8023aa2:	3318      	adds	r3, #24
 8023aa4:	681b      	ldr	r3, [r3, #0]
 8023aa6:	613b      	str	r3, [r7, #16]

          dma_ctll = (uint32_t)(dma_ctll & (uint32_t)(~(GPDMA0_CH_CTLL_SINC_Msk))) |
 8023aa8:	693b      	ldr	r3, [r7, #16]
 8023aaa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8023aae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8023ab2:	613b      	str	r3, [r7, #16]
                               ((uint32_t)XMC_DMA_CH_ADDRESS_COUNT_MODE_NO_CHANGE << GPDMA0_CH_CTLL_SINC_Pos);

          handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL = dma_ctll;
 8023ab4:	68fb      	ldr	r3, [r7, #12]
 8023ab6:	68db      	ldr	r3, [r3, #12]
 8023ab8:	681a      	ldr	r2, [r3, #0]
 8023aba:	68fb      	ldr	r3, [r7, #12]
 8023abc:	7f5b      	ldrb	r3, [r3, #29]
 8023abe:	4619      	mov	r1, r3
 8023ac0:	2358      	movs	r3, #88	; 0x58
 8023ac2:	fb03 f301 	mul.w	r3, r3, r1
 8023ac6:	4413      	add	r3, r2
 8023ac8:	3318      	adds	r3, #24
 8023aca:	693a      	ldr	r2, [r7, #16]
 8023acc:	601a      	str	r2, [r3, #0]
          mode = (uint32_t)((uint32_t)handle->runtime->spi_master_mode & 0xfffbU);
 8023ace:	68fb      	ldr	r3, [r7, #12]
 8023ad0:	689b      	ldr	r3, [r3, #8]
 8023ad2:	7f1b      	ldrb	r3, [r3, #28]
 8023ad4:	b2db      	uxtb	r3, r3
 8023ad6:	461a      	mov	r2, r3
 8023ad8:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8023adc:	4013      	ands	r3, r2
 8023ade:	61bb      	str	r3, [r7, #24]
 8023ae0:	e025      	b.n	8023b2e <SPI_MASTER_StartTransmitDMA+0x112>
        }
        else
        {
          runtime_handle->tx_data = data_ptr;
 8023ae2:	697b      	ldr	r3, [r7, #20]
 8023ae4:	68ba      	ldr	r2, [r7, #8]
 8023ae6:	619a      	str	r2, [r3, #24]
          dma_ctll = handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL;
 8023ae8:	68fb      	ldr	r3, [r7, #12]
 8023aea:	68db      	ldr	r3, [r3, #12]
 8023aec:	681a      	ldr	r2, [r3, #0]
 8023aee:	68fb      	ldr	r3, [r7, #12]
 8023af0:	7f5b      	ldrb	r3, [r3, #29]
 8023af2:	4619      	mov	r1, r3
 8023af4:	2358      	movs	r3, #88	; 0x58
 8023af6:	fb03 f301 	mul.w	r3, r3, r1
 8023afa:	4413      	add	r3, r2
 8023afc:	3318      	adds	r3, #24
 8023afe:	681b      	ldr	r3, [r3, #0]
 8023b00:	613b      	str	r3, [r7, #16]

          dma_ctll = (uint32_t)(dma_ctll & (~GPDMA0_CH_CTLL_SINC_Msk)) |
 8023b02:	693b      	ldr	r3, [r7, #16]
 8023b04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8023b08:	613b      	str	r3, [r7, #16]
                               ((uint32_t)XMC_DMA_CH_ADDRESS_COUNT_MODE_INCREMENT << GPDMA0_CH_CTLL_SINC_Pos);

          handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL = dma_ctll;
 8023b0a:	68fb      	ldr	r3, [r7, #12]
 8023b0c:	68db      	ldr	r3, [r3, #12]
 8023b0e:	681a      	ldr	r2, [r3, #0]
 8023b10:	68fb      	ldr	r3, [r7, #12]
 8023b12:	7f5b      	ldrb	r3, [r3, #29]
 8023b14:	4619      	mov	r1, r3
 8023b16:	2358      	movs	r3, #88	; 0x58
 8023b18:	fb03 f301 	mul.w	r3, r3, r1
 8023b1c:	4413      	add	r3, r2
 8023b1e:	3318      	adds	r3, #24
 8023b20:	693a      	ldr	r2, [r7, #16]
 8023b22:	601a      	str	r2, [r3, #0]
          mode = (uint32_t)handle->runtime->spi_master_mode;
 8023b24:	68fb      	ldr	r3, [r7, #12]
 8023b26:	689b      	ldr	r3, [r3, #8]
 8023b28:	7f1b      	ldrb	r3, [r3, #28]
 8023b2a:	b2db      	uxtb	r3, r3
 8023b2c:	61bb      	str	r3, [r7, #24]
        }

        /* Enable transmit event generation */
        XMC_SPI_CH_EnableEvent(handle->channel, (uint32_t)XMC_SPI_CH_EVENT_RECEIVE_START);
 8023b2e:	68fb      	ldr	r3, [r7, #12]
 8023b30:	681b      	ldr	r3, [r3, #0]
 8023b32:	4618      	mov	r0, r3
 8023b34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8023b38:	f7fe fc42 	bl	80223c0 <XMC_SPI_CH_EnableEvent>

        XMC_DMA_CH_SetBlockSize(handle->global_dma->dma, handle->dma_ch_tx_number, block_size);
 8023b3c:	68fb      	ldr	r3, [r7, #12]
 8023b3e:	68db      	ldr	r3, [r3, #12]
 8023b40:	681a      	ldr	r2, [r3, #0]
 8023b42:	68fb      	ldr	r3, [r7, #12]
 8023b44:	7f5b      	ldrb	r3, [r3, #29]
 8023b46:	4610      	mov	r0, r2
 8023b48:	4619      	mov	r1, r3
 8023b4a:	687a      	ldr	r2, [r7, #4]
 8023b4c:	f7ff ff0c 	bl	8023968 <XMC_DMA_CH_SetBlockSize>

        XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma, handle->dma_ch_tx_number, (uint32_t)runtime_handle->tx_data);
 8023b50:	68fb      	ldr	r3, [r7, #12]
 8023b52:	68db      	ldr	r3, [r3, #12]
 8023b54:	6819      	ldr	r1, [r3, #0]
 8023b56:	68fb      	ldr	r3, [r7, #12]
 8023b58:	7f5a      	ldrb	r2, [r3, #29]
 8023b5a:	697b      	ldr	r3, [r7, #20]
 8023b5c:	699b      	ldr	r3, [r3, #24]
 8023b5e:	4608      	mov	r0, r1
 8023b60:	4611      	mov	r1, r2
 8023b62:	461a      	mov	r2, r3
 8023b64:	f7ff fed6 	bl	8023914 <XMC_DMA_CH_SetSourceAddress>

        XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
 8023b68:	68fb      	ldr	r3, [r7, #12]
 8023b6a:	681a      	ldr	r2, [r3, #0]
 8023b6c:	697b      	ldr	r3, [r7, #20]
 8023b6e:	7f1b      	ldrb	r3, [r3, #28]
 8023b70:	b2db      	uxtb	r3, r3
 8023b72:	4610      	mov	r0, r2
 8023b74:	4619      	mov	r1, r3
 8023b76:	f7ff fea5 	bl	80238c4 <XMC_SPI_CH_SetTransmitMode>

        XMC_DMA_CH_SetDestinationAddress(handle->global_dma->dma,
 8023b7a:	68fb      	ldr	r3, [r7, #12]
 8023b7c:	68db      	ldr	r3, [r3, #12]
 8023b7e:	6818      	ldr	r0, [r3, #0]
 8023b80:	68fb      	ldr	r3, [r7, #12]
 8023b82:	7f59      	ldrb	r1, [r3, #29]
                                         handle->dma_ch_tx_number,
                                         (uint32_t)&(handle->channel->TBUF[mode]));
 8023b84:	68fb      	ldr	r3, [r7, #12]
 8023b86:	681a      	ldr	r2, [r3, #0]
 8023b88:	69bb      	ldr	r3, [r7, #24]
 8023b8a:	3320      	adds	r3, #32
 8023b8c:	009b      	lsls	r3, r3, #2
 8023b8e:	4413      	add	r3, r2

        XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma, handle->dma_ch_tx_number, (uint32_t)runtime_handle->tx_data);

        XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);

        XMC_DMA_CH_SetDestinationAddress(handle->global_dma->dma,
 8023b90:	461a      	mov	r2, r3
 8023b92:	f7ff fed3 	bl	802393c <XMC_DMA_CH_SetDestinationAddress>
                                         handle->dma_ch_tx_number,
                                         (uint32_t)&(handle->channel->TBUF[mode]));

        status = SPI_MASTER_STATUS_SUCCESS;
 8023b96:	2300      	movs	r3, #0
 8023b98:	77fb      	strb	r3, [r7, #31]

        XMC_DMA_CH_Enable(handle->global_dma->dma, handle->dma_ch_tx_number);
 8023b9a:	68fb      	ldr	r3, [r7, #12]
 8023b9c:	68db      	ldr	r3, [r3, #12]
 8023b9e:	681a      	ldr	r2, [r3, #0]
 8023ba0:	68fb      	ldr	r3, [r7, #12]
 8023ba2:	7f5b      	ldrb	r3, [r3, #29]
 8023ba4:	4610      	mov	r0, r2
 8023ba6:	4619      	mov	r1, r3
 8023ba8:	f7ff fea2 	bl	80238f0 <XMC_DMA_CH_Enable>
 8023bac:	e004      	b.n	8023bb8 <SPI_MASTER_StartTransmitDMA+0x19c>
      }
      else
      {
        status = SPI_MASTER_STATUS_BUFFER_INVALID;
 8023bae:	2303      	movs	r3, #3
 8023bb0:	77fb      	strb	r3, [r7, #31]
 8023bb2:	e001      	b.n	8023bb8 <SPI_MASTER_StartTransmitDMA+0x19c>
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUSY;
 8023bb4:	2302      	movs	r3, #2
 8023bb6:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 8023bb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8023bba:	4618      	mov	r0, r3
 8023bbc:	3720      	adds	r7, #32
 8023bbe:	46bd      	mov	sp, r7
 8023bc0:	bd80      	pop	{r7, pc}
 8023bc2:	bf00      	nop

08023bc4 <SPI_MASTER_StartReceiveDMA>:
}
#endif

#if(SPI_MASTER_DMA_RECEIVE_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_StartReceiveDMA(const SPI_MASTER_t  *const handle, uint8_t *dataptr, uint32_t block_size)
{
 8023bc4:	b580      	push	{r7, lr}
 8023bc6:	b086      	sub	sp, #24
 8023bc8:	af00      	add	r7, sp, #0
 8023bca:	60f8      	str	r0, [r7, #12]
 8023bcc:	60b9      	str	r1, [r7, #8]
 8023bce:	607a      	str	r2, [r7, #4]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  static uint8_t dummy_data[2] = {0xFFU, 0xFFU};

  XMC_ASSERT("SPI_MASTER_StartReceiveDMA:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_MODE_MISMATCH;
 8023bd0:	2304      	movs	r3, #4
 8023bd2:	75fb      	strb	r3, [r7, #23]
  runtime_handle = handle->runtime;
 8023bd4:	68fb      	ldr	r3, [r7, #12]
 8023bd6:	689b      	ldr	r3, [r3, #8]
 8023bd8:	613b      	str	r3, [r7, #16]

  if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 8023bda:	68fb      	ldr	r3, [r7, #12]
 8023bdc:	685b      	ldr	r3, [r3, #4]
 8023bde:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8023be2:	2b01      	cmp	r3, #1
 8023be4:	d13c      	bne.n	8023c60 <SPI_MASTER_StartReceiveDMA+0x9c>
  {
    status = SPI_MASTER_STATUS_BUSY;
 8023be6:	2302      	movs	r3, #2
 8023be8:	75fb      	strb	r3, [r7, #23]
    /* Check whether SPI channel is free or not */
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8023bea:	693b      	ldr	r3, [r7, #16]
 8023bec:	7fdb      	ldrb	r3, [r3, #31]
 8023bee:	b2db      	uxtb	r3, r3
 8023bf0:	f083 0301 	eor.w	r3, r3, #1
 8023bf4:	b2db      	uxtb	r3, r3
 8023bf6:	2b00      	cmp	r3, #0
 8023bf8:	d030      	beq.n	8023c5c <SPI_MASTER_StartReceiveDMA+0x98>
 8023bfa:	693b      	ldr	r3, [r7, #16]
 8023bfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8023c00:	b2db      	uxtb	r3, r3
 8023c02:	f083 0301 	eor.w	r3, r3, #1
 8023c06:	b2db      	uxtb	r3, r3
 8023c08:	2b00      	cmp	r3, #0
 8023c0a:	d027      	beq.n	8023c5c <SPI_MASTER_StartReceiveDMA+0x98>
    {
      /* Check data pointer is valid or not */
      if ((dataptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 8023c0c:	68bb      	ldr	r3, [r7, #8]
 8023c0e:	2b00      	cmp	r3, #0
 8023c10:	d021      	beq.n	8023c56 <SPI_MASTER_StartReceiveDMA+0x92>
 8023c12:	687b      	ldr	r3, [r7, #4]
 8023c14:	2b00      	cmp	r3, #0
 8023c16:	d01e      	beq.n	8023c56 <SPI_MASTER_StartReceiveDMA+0x92>
 8023c18:	687b      	ldr	r3, [r7, #4]
 8023c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8023c1e:	d21a      	bcs.n	8023c56 <SPI_MASTER_StartReceiveDMA+0x92>
      {
        runtime_handle->rx_busy = true;
 8023c20:	693b      	ldr	r3, [r7, #16]
 8023c22:	2201      	movs	r2, #1
 8023c24:	77da      	strb	r2, [r3, #31]
        runtime_handle->rx_data = dataptr;
 8023c26:	693b      	ldr	r3, [r7, #16]
 8023c28:	68ba      	ldr	r2, [r7, #8]
 8023c2a:	615a      	str	r2, [r3, #20]
        runtime_handle->tx_data = &dummy_data[0];
 8023c2c:	693b      	ldr	r3, [r7, #16]
 8023c2e:	4a0f      	ldr	r2, [pc, #60]	; (8023c6c <SPI_MASTER_StartReceiveDMA+0xa8>)
 8023c30:	619a      	str	r2, [r3, #24]
        runtime_handle->tx_data_count = block_size;
 8023c32:	693b      	ldr	r3, [r7, #16]
 8023c34:	687a      	ldr	r2, [r7, #4]
 8023c36:	605a      	str	r2, [r3, #4]
        runtime_handle->tx_data_dummy = true;
 8023c38:	693b      	ldr	r3, [r7, #16]
 8023c3a:	2201      	movs	r2, #1
 8023c3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        runtime_handle->rx_data_dummy = false;
 8023c40:	693b      	ldr	r3, [r7, #16]
 8023c42:	2200      	movs	r2, #0
 8023c44:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        status = SPI_MASTER_lReceiveDMA(handle, block_size);
 8023c48:	68f8      	ldr	r0, [r7, #12]
 8023c4a:	6879      	ldr	r1, [r7, #4]
 8023c4c:	f000 f868 	bl	8023d20 <SPI_MASTER_lReceiveDMA>
 8023c50:	4603      	mov	r3, r0
 8023c52:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_STATUS_BUSY;
    /* Check whether SPI channel is free or not */
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
    {
      /* Check data pointer is valid or not */
      if ((dataptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 8023c54:	e004      	b.n	8023c60 <SPI_MASTER_StartReceiveDMA+0x9c>

        status = SPI_MASTER_lReceiveDMA(handle, block_size);
      }
      else
      {
        status = SPI_MASTER_STATUS_BUFFER_INVALID;
 8023c56:	2303      	movs	r3, #3
 8023c58:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_STATUS_BUSY;
    /* Check whether SPI channel is free or not */
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
    {
      /* Check data pointer is valid or not */
      if ((dataptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 8023c5a:	e001      	b.n	8023c60 <SPI_MASTER_StartReceiveDMA+0x9c>
        status = SPI_MASTER_STATUS_BUFFER_INVALID;
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUSY;
 8023c5c:	2302      	movs	r3, #2
 8023c5e:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 8023c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8023c62:	4618      	mov	r0, r3
 8023c64:	3718      	adds	r7, #24
 8023c66:	46bd      	mov	sp, r7
 8023c68:	bd80      	pop	{r7, pc}
 8023c6a:	bf00      	nop
 8023c6c:	1ffe886c 	.word	0x1ffe886c

08023c70 <SPI_MASTER_Transfer>:
 */
SPI_MASTER_STATUS_t SPI_MASTER_Transfer(const SPI_MASTER_t *const handle,
                                        uint8_t* tx_dataptr,
                                        uint8_t* rx_dataptr,
                                        uint32_t count)
{
 8023c70:	b580      	push	{r7, lr}
 8023c72:	b086      	sub	sp, #24
 8023c74:	af00      	add	r7, sp, #0
 8023c76:	60f8      	str	r0, [r7, #12]
 8023c78:	60b9      	str	r1, [r7, #8]
 8023c7a:	607a      	str	r2, [r7, #4]
 8023c7c:	603b      	str	r3, [r7, #0]
  SPI_MASTER_STATUS_t status;
  SPI_MASTER_RUNTIME_t * runtime_handle;

  XMC_ASSERT("SPI_MASTER_Transfer:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_BUSY;
 8023c7e:	2302      	movs	r3, #2
 8023c80:	75fb      	strb	r3, [r7, #23]
  runtime_handle = handle->runtime;
 8023c82:	68fb      	ldr	r3, [r7, #12]
 8023c84:	689b      	ldr	r3, [r3, #8]
 8023c86:	613b      	str	r3, [r7, #16]

  if (XMC_SPI_CH_MODE_STANDARD == runtime_handle->spi_master_mode)
 8023c88:	693b      	ldr	r3, [r7, #16]
 8023c8a:	7f1b      	ldrb	r3, [r3, #28]
 8023c8c:	b2db      	uxtb	r3, r3
 8023c8e:	2b00      	cmp	r3, #0
 8023c90:	d13f      	bne.n	8023d12 <SPI_MASTER_Transfer+0xa2>
  {
    /* Check whether SPI channel is free or not */
    if ((tx_dataptr != NULL) && (rx_dataptr != NULL) && (count > 0U))
 8023c92:	68bb      	ldr	r3, [r7, #8]
 8023c94:	2b00      	cmp	r3, #0
 8023c96:	d038      	beq.n	8023d0a <SPI_MASTER_Transfer+0x9a>
 8023c98:	687b      	ldr	r3, [r7, #4]
 8023c9a:	2b00      	cmp	r3, #0
 8023c9c:	d035      	beq.n	8023d0a <SPI_MASTER_Transfer+0x9a>
 8023c9e:	683b      	ldr	r3, [r7, #0]
 8023ca0:	2b00      	cmp	r3, #0
 8023ca2:	d032      	beq.n	8023d0a <SPI_MASTER_Transfer+0x9a>
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8023ca4:	693b      	ldr	r3, [r7, #16]
 8023ca6:	7fdb      	ldrb	r3, [r3, #31]
 8023ca8:	b2db      	uxtb	r3, r3
 8023caa:	f083 0301 	eor.w	r3, r3, #1
 8023cae:	b2db      	uxtb	r3, r3
 8023cb0:	2b00      	cmp	r3, #0
 8023cb2:	d029      	beq.n	8023d08 <SPI_MASTER_Transfer+0x98>
 8023cb4:	693b      	ldr	r3, [r7, #16]
 8023cb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8023cba:	b2db      	uxtb	r3, r3
 8023cbc:	f083 0301 	eor.w	r3, r3, #1
 8023cc0:	b2db      	uxtb	r3, r3
 8023cc2:	2b00      	cmp	r3, #0
 8023cc4:	d020      	beq.n	8023d08 <SPI_MASTER_Transfer+0x98>
      {
        runtime_handle->rx_busy = true;
 8023cc6:	693b      	ldr	r3, [r7, #16]
 8023cc8:	2201      	movs	r2, #1
 8023cca:	77da      	strb	r2, [r3, #31]
        runtime_handle->rx_data = rx_dataptr;
 8023ccc:	693b      	ldr	r3, [r7, #16]
 8023cce:	687a      	ldr	r2, [r7, #4]
 8023cd0:	615a      	str	r2, [r3, #20]
        runtime_handle->tx_data = tx_dataptr;
 8023cd2:	693b      	ldr	r3, [r7, #16]
 8023cd4:	68ba      	ldr	r2, [r7, #8]
 8023cd6:	619a      	str	r2, [r3, #24]
        runtime_handle->tx_data_count = count;
 8023cd8:	693b      	ldr	r3, [r7, #16]
 8023cda:	683a      	ldr	r2, [r7, #0]
 8023cdc:	605a      	str	r2, [r3, #4]
        runtime_handle->tx_data_dummy = false;
 8023cde:	693b      	ldr	r3, [r7, #16]
 8023ce0:	2200      	movs	r2, #0
 8023ce2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        runtime_handle->rx_data_dummy = false;
 8023ce6:	693b      	ldr	r3, [r7, #16]
 8023ce8:	2200      	movs	r2, #0
 8023cea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        {
          status = SPI_MASTER_lReceiveIRQ(handle, count);
        }
#endif
#if (SPI_MASTER_DMA_RECEIVE_MODE == 1U)
        if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 8023cee:	68fb      	ldr	r3, [r7, #12]
 8023cf0:	685b      	ldr	r3, [r3, #4]
 8023cf2:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8023cf6:	2b01      	cmp	r3, #1
 8023cf8:	d106      	bne.n	8023d08 <SPI_MASTER_Transfer+0x98>
        {
          status = SPI_MASTER_lReceiveDMA(handle, count);
 8023cfa:	68f8      	ldr	r0, [r7, #12]
 8023cfc:	6839      	ldr	r1, [r7, #0]
 8023cfe:	f000 f80f 	bl	8023d20 <SPI_MASTER_lReceiveDMA>
 8023d02:	4603      	mov	r3, r0
 8023d04:	75fb      	strb	r3, [r7, #23]
  {
    /* Check whether SPI channel is free or not */
    if ((tx_dataptr != NULL) && (rx_dataptr != NULL) && (count > 0U))
    {
      /*Check data pointer is valid or not*/
      if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8023d06:	e003      	b.n	8023d10 <SPI_MASTER_Transfer+0xa0>
 8023d08:	e002      	b.n	8023d10 <SPI_MASTER_Transfer+0xa0>
#endif
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUFFER_INVALID;
 8023d0a:	2303      	movs	r3, #3
 8023d0c:	75fb      	strb	r3, [r7, #23]
 8023d0e:	e002      	b.n	8023d16 <SPI_MASTER_Transfer+0xa6>
 8023d10:	e001      	b.n	8023d16 <SPI_MASTER_Transfer+0xa6>
    }
  }
  else
  {
    status = SPI_MASTER_STATUS_FAILURE;
 8023d12:	2301      	movs	r3, #1
 8023d14:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8023d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8023d18:	4618      	mov	r0, r3
 8023d1a:	3718      	adds	r7, #24
 8023d1c:	46bd      	mov	sp, r7
 8023d1e:	bd80      	pop	{r7, pc}

08023d20 <SPI_MASTER_lReceiveDMA>:
}
#endif

#if (SPI_MASTER_DMA_RECEIVE_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_lReceiveDMA(const SPI_MASTER_t *const handle, uint32_t block_size)
{
 8023d20:	b580      	push	{r7, lr}
 8023d22:	b084      	sub	sp, #16
 8023d24:	af00      	add	r7, sp, #0
 8023d26:	6078      	str	r0, [r7, #4]
 8023d28:	6039      	str	r1, [r7, #0]
  SPI_MASTER_STATUS_t status;
  SPI_MASTER_RUNTIME_t * runtime_handle;

  runtime_handle = handle->runtime;
 8023d2a:	687b      	ldr	r3, [r7, #4]
 8023d2c:	689b      	ldr	r3, [r3, #8]
 8023d2e:	60fb      	str	r3, [r7, #12]
  runtime_handle->rx_data_index = 0U;
 8023d30:	68fb      	ldr	r3, [r7, #12]
 8023d32:	2200      	movs	r2, #0
 8023d34:	611a      	str	r2, [r3, #16]
  runtime_handle->rx_data_count = (uint32_t)block_size;
 8023d36:	68fb      	ldr	r3, [r7, #12]
 8023d38:	683a      	ldr	r2, [r7, #0]
 8023d3a:	60da      	str	r2, [r3, #12]

  SPI_MASTER_lStdRBUFFlush(handle->channel);
 8023d3c:	687b      	ldr	r3, [r7, #4]
 8023d3e:	681b      	ldr	r3, [r3, #0]
 8023d40:	4618      	mov	r0, r3
 8023d42:	f000 f847 	bl	8023dd4 <SPI_MASTER_lStdRBUFFlush>

  XMC_SPI_CH_EnableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
 8023d46:	687b      	ldr	r3, [r7, #4]
 8023d48:	681b      	ldr	r3, [r3, #0]
 8023d4a:	4618      	mov	r0, r3
 8023d4c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8023d50:	f7fe fb36 	bl	80223c0 <XMC_SPI_CH_EnableEvent>

  XMC_DMA_CH_SetBlockSize(handle->global_dma->dma, handle->dma_ch_rx_number, runtime_handle->rx_data_count);
 8023d54:	687b      	ldr	r3, [r7, #4]
 8023d56:	68db      	ldr	r3, [r3, #12]
 8023d58:	6819      	ldr	r1, [r3, #0]
 8023d5a:	687b      	ldr	r3, [r7, #4]
 8023d5c:	7f1a      	ldrb	r2, [r3, #28]
 8023d5e:	68fb      	ldr	r3, [r7, #12]
 8023d60:	68db      	ldr	r3, [r3, #12]
 8023d62:	4608      	mov	r0, r1
 8023d64:	4611      	mov	r1, r2
 8023d66:	461a      	mov	r2, r3
 8023d68:	f7ff fdfe 	bl	8023968 <XMC_DMA_CH_SetBlockSize>

  XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma,
 8023d6c:	687b      	ldr	r3, [r7, #4]
 8023d6e:	68db      	ldr	r3, [r3, #12]
 8023d70:	6819      	ldr	r1, [r3, #0]
 8023d72:	687b      	ldr	r3, [r7, #4]
 8023d74:	7f1a      	ldrb	r2, [r3, #28]
                              handle->dma_ch_rx_number,
                              (uint32_t)&(handle->channel->RBUF));
 8023d76:	687b      	ldr	r3, [r7, #4]
 8023d78:	681b      	ldr	r3, [r3, #0]
 8023d7a:	3354      	adds	r3, #84	; 0x54

  XMC_SPI_CH_EnableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);

  XMC_DMA_CH_SetBlockSize(handle->global_dma->dma, handle->dma_ch_rx_number, runtime_handle->rx_data_count);

  XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma,
 8023d7c:	4608      	mov	r0, r1
 8023d7e:	4611      	mov	r1, r2
 8023d80:	461a      	mov	r2, r3
 8023d82:	f7ff fdc7 	bl	8023914 <XMC_DMA_CH_SetSourceAddress>
                              handle->dma_ch_rx_number,
                              (uint32_t)&(handle->channel->RBUF));

  XMC_DMA_CH_SetDestinationAddress(handle->global_dma->dma, handle->dma_ch_rx_number, (uint32_t)runtime_handle->rx_data);
 8023d86:	687b      	ldr	r3, [r7, #4]
 8023d88:	68db      	ldr	r3, [r3, #12]
 8023d8a:	6819      	ldr	r1, [r3, #0]
 8023d8c:	687b      	ldr	r3, [r7, #4]
 8023d8e:	7f1a      	ldrb	r2, [r3, #28]
 8023d90:	68fb      	ldr	r3, [r7, #12]
 8023d92:	695b      	ldr	r3, [r3, #20]
 8023d94:	4608      	mov	r0, r1
 8023d96:	4611      	mov	r1, r2
 8023d98:	461a      	mov	r2, r3
 8023d9a:	f7ff fdcf 	bl	802393c <XMC_DMA_CH_SetDestinationAddress>

  status = SPI_MASTER_STATUS_SUCCESS;
 8023d9e:	2300      	movs	r3, #0
 8023da0:	72fb      	strb	r3, [r7, #11]

  XMC_DMA_CH_Enable(handle->global_dma->dma, handle->dma_ch_rx_number);
 8023da2:	687b      	ldr	r3, [r7, #4]
 8023da4:	68db      	ldr	r3, [r3, #12]
 8023da6:	681a      	ldr	r2, [r3, #0]
 8023da8:	687b      	ldr	r3, [r7, #4]
 8023daa:	7f1b      	ldrb	r3, [r3, #28]
 8023dac:	4610      	mov	r0, r2
 8023dae:	4619      	mov	r1, r3
 8023db0:	f7ff fd9e 	bl	80238f0 <XMC_DMA_CH_Enable>

  /* Call the transmit, to receive the data synchronously */
  status = SPI_MASTER_Transmit(handle, runtime_handle->tx_data, runtime_handle->tx_data_count);
 8023db4:	68fb      	ldr	r3, [r7, #12]
 8023db6:	699a      	ldr	r2, [r3, #24]
 8023db8:	68fb      	ldr	r3, [r7, #12]
 8023dba:	685b      	ldr	r3, [r3, #4]
 8023dbc:	6878      	ldr	r0, [r7, #4]
 8023dbe:	4611      	mov	r1, r2
 8023dc0:	461a      	mov	r2, r3
 8023dc2:	f7ff fdf7 	bl	80239b4 <SPI_MASTER_Transmit>
 8023dc6:	4603      	mov	r3, r0
 8023dc8:	72fb      	strb	r3, [r7, #11]

  return status;
 8023dca:	7afb      	ldrb	r3, [r7, #11]
}
 8023dcc:	4618      	mov	r0, r3
 8023dce:	3710      	adds	r7, #16
 8023dd0:	46bd      	mov	sp, r7
 8023dd2:	bd80      	pop	{r7, pc}

08023dd4 <SPI_MASTER_lStdRBUFFlush>:

/*
 * Clears the receive buffers
 */
static void SPI_MASTER_lStdRBUFFlush(XMC_USIC_CH_t *const channel)
{
 8023dd4:	b580      	push	{r7, lr}
 8023dd6:	b082      	sub	sp, #8
 8023dd8:	af00      	add	r7, sp, #0
 8023dda:	6078      	str	r0, [r7, #4]
  /* Clear RBF0 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 8023ddc:	6878      	ldr	r0, [r7, #4]
 8023dde:	f7fe fad5 	bl	802238c <XMC_SPI_CH_GetReceivedData>
  /* Clear RBF1 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 8023de2:	6878      	ldr	r0, [r7, #4]
 8023de4:	f7fe fad2 	bl	802238c <XMC_SPI_CH_GetReceivedData>
}
 8023de8:	3708      	adds	r7, #8
 8023dea:	46bd      	mov	sp, r7
 8023dec:	bd80      	pop	{r7, pc}
 8023dee:	bf00      	nop

08023df0 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8023df0:	b480      	push	{r7}
 8023df2:	b083      	sub	sp, #12
 8023df4:	af00      	add	r7, sp, #0
 8023df6:	6078      	str	r0, [r7, #4]
 8023df8:	460b      	mov	r3, r1
 8023dfa:	70fb      	strb	r3, [r7, #3]
 8023dfc:	4613      	mov	r3, r2
 8023dfe:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8023e00:	78f8      	ldrb	r0, [r7, #3]
 8023e02:	78fb      	ldrb	r3, [r7, #3]
 8023e04:	687a      	ldr	r2, [r7, #4]
 8023e06:	3306      	adds	r3, #6
 8023e08:	009b      	lsls	r3, r3, #2
 8023e0a:	4413      	add	r3, r2
 8023e0c:	685b      	ldr	r3, [r3, #4]
 8023e0e:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8023e12:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8023e14:	431a      	orrs	r2, r3
 8023e16:	6879      	ldr	r1, [r7, #4]
 8023e18:	1d83      	adds	r3, r0, #6
 8023e1a:	009b      	lsls	r3, r3, #2
 8023e1c:	440b      	add	r3, r1
 8023e1e:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8023e20:	370c      	adds	r7, #12
 8023e22:	46bd      	mov	sp, r7
 8023e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e28:	4770      	bx	lr
 8023e2a:	bf00      	nop

08023e2c <XMC_USIC_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8023e2c:	b480      	push	{r7}
 8023e2e:	b083      	sub	sp, #12
 8023e30:	af00      	add	r7, sp, #0
 8023e32:	6078      	str	r0, [r7, #4]
 8023e34:	460b      	mov	r3, r1
 8023e36:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 8023e38:	687b      	ldr	r3, [r7, #4]
 8023e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023e3c:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
 8023e40:	78fb      	ldrb	r3, [r7, #3]
 8023e42:	3b01      	subs	r3, #1
 8023e44:	061b      	lsls	r3, r3, #24
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 8023e46:	431a      	orrs	r2, r3
 8023e48:	687b      	ldr	r3, [r7, #4]
 8023e4a:	635a      	str	r2, [r3, #52]	; 0x34
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
}
 8023e4c:	370c      	adds	r7, #12
 8023e4e:	46bd      	mov	sp, r7
 8023e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e54:	4770      	bx	lr
 8023e56:	bf00      	nop

08023e58 <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8023e58:	b480      	push	{r7}
 8023e5a:	b083      	sub	sp, #12
 8023e5c:	af00      	add	r7, sp, #0
 8023e5e:	6078      	str	r0, [r7, #4]
 8023e60:	460b      	mov	r3, r1
 8023e62:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 8023e64:	687b      	ldr	r3, [r7, #4]
 8023e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023e68:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
 8023e6c:	78fb      	ldrb	r3, [r7, #3]
 8023e6e:	3b01      	subs	r3, #1
 8023e70:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 8023e72:	431a      	orrs	r2, r3
 8023e74:	687b      	ldr	r3, [r7, #4]
 8023e76:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
 8023e78:	370c      	adds	r7, #12
 8023e7a:	46bd      	mov	sp, r7
 8023e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e80:	4770      	bx	lr
 8023e82:	bf00      	nop

08023e84 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8023e84:	b480      	push	{r7}
 8023e86:	b083      	sub	sp, #12
 8023e88:	af00      	add	r7, sp, #0
 8023e8a:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8023e8c:	687b      	ldr	r3, [r7, #4]
 8023e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023e90:	b2db      	uxtb	r3, r3
 8023e92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8023e96:	b2db      	uxtb	r3, r3
}
 8023e98:	4618      	mov	r0, r3
 8023e9a:	370c      	adds	r7, #12
 8023e9c:	46bd      	mov	sp, r7
 8023e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ea2:	4770      	bx	lr

08023ea4 <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
 8023ea4:	b480      	push	{r7}
 8023ea6:	b083      	sub	sp, #12
 8023ea8:	af00      	add	r7, sp, #0
 8023eaa:	6078      	str	r0, [r7, #4]
 8023eac:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 8023eae:	683b      	ldr	r3, [r7, #0]
 8023eb0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8023eb4:	409a      	lsls	r2, r3
 8023eb6:	687b      	ldr	r3, [r7, #4]
 8023eb8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8023eba:	370c      	adds	r7, #12
 8023ebc:	46bd      	mov	sp, r7
 8023ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ec2:	4770      	bx	lr

08023ec4 <XMC_USIC_CH_ConfigureShiftClockOutput>:
 *
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8023ec4:	b480      	push	{r7}
 8023ec6:	b085      	sub	sp, #20
 8023ec8:	af00      	add	r7, sp, #0
 8023eca:	60f8      	str	r0, [r7, #12]
 8023ecc:	60b9      	str	r1, [r7, #8]
 8023ece:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8023ed0:	68fb      	ldr	r3, [r7, #12]
 8023ed2:	695b      	ldr	r3, [r3, #20]
 8023ed4:	f023 4250 	bic.w	r2, r3, #3489660928	; 0xd0000000
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
 8023ed8:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
 8023eda:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
 8023edc:	687b      	ldr	r3, [r7, #4]
 8023ede:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8023ee0:	68fb      	ldr	r3, [r7, #12]
 8023ee2:	615a      	str	r2, [r3, #20]
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
 8023ee4:	3714      	adds	r7, #20
 8023ee6:	46bd      	mov	sp, r7
 8023ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023eec:	4770      	bx	lr
 8023eee:	bf00      	nop

08023ef0 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8023ef0:	b480      	push	{r7}
 8023ef2:	b083      	sub	sp, #12
 8023ef4:	af00      	add	r7, sp, #0
 8023ef6:	6078      	str	r0, [r7, #4]
 8023ef8:	460b      	mov	r3, r1
 8023efa:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8023efc:	687b      	ldr	r3, [r7, #4]
 8023efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023f00:	f023 020f 	bic.w	r2, r3, #15
 8023f04:	78fb      	ldrb	r3, [r7, #3]
 8023f06:	431a      	orrs	r2, r3
 8023f08:	687b      	ldr	r3, [r7, #4]
 8023f0a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8023f0c:	370c      	adds	r7, #12
 8023f0e:	46bd      	mov	sp, r7
 8023f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f14:	4770      	bx	lr
 8023f16:	bf00      	nop

08023f18 <XMC_SPI_CH_Init>:
 * <li>Set polarity for the Slave signal,</li>
 * <li>Enable Frame end mode(MSLS signal is kept active after transmission of a frame)</li>
 * </ul>
 */
__STATIC_INLINE void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 8023f18:	b580      	push	{r7, lr}
 8023f1a:	b082      	sub	sp, #8
 8023f1c:	af00      	add	r7, sp, #0
 8023f1e:	6078      	str	r0, [r7, #4]
 8023f20:	6039      	str	r1, [r7, #0]
  XMC_SPI_CH_InitEx(channel, config, true);
 8023f22:	6878      	ldr	r0, [r7, #4]
 8023f24:	6839      	ldr	r1, [r7, #0]
 8023f26:	2201      	movs	r2, #1
 8023f28:	f7fe f9d4 	bl	80222d4 <XMC_SPI_CH_InitEx>
}
 8023f2c:	3708      	adds	r7, #8
 8023f2e:	46bd      	mov	sp, r7
 8023f30:	bd80      	pop	{r7, pc}
 8023f32:	bf00      	nop

08023f34 <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
 8023f34:	b580      	push	{r7, lr}
 8023f36:	b082      	sub	sp, #8
 8023f38:	af00      	add	r7, sp, #0
 8023f3a:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 8023f3c:	6878      	ldr	r0, [r7, #4]
 8023f3e:	2101      	movs	r1, #1
 8023f40:	f7ff ffd6 	bl	8023ef0 <XMC_USIC_CH_SetMode>
}
 8023f44:	3708      	adds	r7, #8
 8023f46:	46bd      	mov	sp, r7
 8023f48:	bd80      	pop	{r7, pc}
 8023f4a:	bf00      	nop

08023f4c <XMC_SPI_CH_SetBitOrderMsbFirst>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetBitOrderLsbFirst()
 */
__STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
{
 8023f4c:	b480      	push	{r7}
 8023f4e:	b083      	sub	sp, #12
 8023f50:	af00      	add	r7, sp, #0
 8023f52:	6078      	str	r0, [r7, #4]
  channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 8023f54:	687b      	ldr	r3, [r7, #4]
 8023f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023f58:	f043 0201 	orr.w	r2, r3, #1
 8023f5c:	687b      	ldr	r3, [r7, #4]
 8023f5e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8023f60:	370c      	adds	r7, #12
 8023f62:	46bd      	mov	sp, r7
 8023f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f68:	4770      	bx	lr
 8023f6a:	bf00      	nop

08023f6c <XMC_SPI_CH_SetSlaveSelectDelay>:
 * This delay is dependent on the peripheral clock. The maximum possible value supported by this API
 * is 30 clock cycles.
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{
 8023f6c:	b480      	push	{r7}
 8023f6e:	b083      	sub	sp, #12
 8023f70:	af00      	add	r7, sp, #0
 8023f72:	6078      	str	r0, [r7, #4]
 8023f74:	6039      	str	r1, [r7, #0]

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8023f76:	687b      	ldr	r3, [r7, #4]
 8023f78:	695b      	ldr	r3, [r3, #20]
 8023f7a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
                                   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 8023f7e:	683b      	ldr	r3, [r7, #0]
 8023f80:	3b01      	subs	r3, #1
 8023f82:	029b      	lsls	r3, r3, #10
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                   USIC_CH_BRG_PCTQ_Msk)) |
 8023f84:	4313      	orrs	r3, r2
 8023f86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8023f8a:	687b      	ldr	r3, [r7, #4]
 8023f8c:	615a      	str	r2, [r3, #20]
                                   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
}
 8023f8e:	370c      	adds	r7, #12
 8023f90:	46bd      	mov	sp, r7
 8023f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f96:	4770      	bx	lr

08023f98 <XMC_SPI_CH_DisableFEM>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_EnableFEM()
 */
__STATIC_INLINE void XMC_SPI_CH_DisableFEM(XMC_USIC_CH_t *const channel)
{
 8023f98:	b480      	push	{r7}
 8023f9a:	b083      	sub	sp, #12
 8023f9c:	af00      	add	r7, sp, #0
 8023f9e:	6078      	str	r0, [r7, #4]
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_FEM_Msk;
 8023fa0:	687b      	ldr	r3, [r7, #4]
 8023fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023fa4:	f023 0208 	bic.w	r2, r3, #8
 8023fa8:	687b      	ldr	r3, [r7, #4]
 8023faa:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8023fac:	370c      	adds	r7, #12
 8023fae:	46bd      	mov	sp, r7
 8023fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fb4:	4770      	bx	lr
 8023fb6:	bf00      	nop

08023fb8 <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8023fb8:	b580      	push	{r7, lr}
 8023fba:	b084      	sub	sp, #16
 8023fbc:	af00      	add	r7, sp, #0
 8023fbe:	60f8      	str	r0, [r7, #12]
 8023fc0:	60b9      	str	r1, [r7, #8]
 8023fc2:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
 8023fc4:	68f8      	ldr	r0, [r7, #12]
 8023fc6:	68b9      	ldr	r1, [r7, #8]
 8023fc8:	687a      	ldr	r2, [r7, #4]
 8023fca:	f7ff ff7b 	bl	8023ec4 <XMC_USIC_CH_ConfigureShiftClockOutput>
                                        (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
 8023fce:	3710      	adds	r7, #16
 8023fd0:	46bd      	mov	sp, r7
 8023fd2:	bd80      	pop	{r7, pc}

08023fd4 <XMC_SPI_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetFrameLength()
 */
__STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8023fd4:	b580      	push	{r7, lr}
 8023fd6:	b082      	sub	sp, #8
 8023fd8:	af00      	add	r7, sp, #0
 8023fda:	6078      	str	r0, [r7, #4]
 8023fdc:	460b      	mov	r3, r1
 8023fde:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetWordLength(channel, word_length);
 8023fe0:	78fb      	ldrb	r3, [r7, #3]
 8023fe2:	6878      	ldr	r0, [r7, #4]
 8023fe4:	4619      	mov	r1, r3
 8023fe6:	f7ff ff21 	bl	8023e2c <XMC_USIC_CH_SetWordLength>
}
 8023fea:	3708      	adds	r7, #8
 8023fec:	46bd      	mov	sp, r7
 8023fee:	bd80      	pop	{r7, pc}

08023ff0 <XMC_SPI_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSelect()
 */
__STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8023ff0:	b580      	push	{r7, lr}
 8023ff2:	b082      	sub	sp, #8
 8023ff4:	af00      	add	r7, sp, #0
 8023ff6:	6078      	str	r0, [r7, #4]
 8023ff8:	460b      	mov	r3, r1
 8023ffa:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetFrameLength(channel, frame_length);
 8023ffc:	78fb      	ldrb	r3, [r7, #3]
 8023ffe:	6878      	ldr	r0, [r7, #4]
 8024000:	4619      	mov	r1, r3
 8024002:	f7ff ff29 	bl	8023e58 <XMC_USIC_CH_SetFrameLength>
}
 8024006:	3708      	adds	r7, #8
 8024008:	46bd      	mov	sp, r7
 802400a:	bd80      	pop	{r7, pc}

0802400c <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
    const XMC_SPI_CH_INPUT_t input,
    const uint8_t source)
{
 802400c:	b580      	push	{r7, lr}
 802400e:	b082      	sub	sp, #8
 8024010:	af00      	add	r7, sp, #0
 8024012:	6078      	str	r0, [r7, #4]
 8024014:	460b      	mov	r3, r1
 8024016:	70fb      	strb	r3, [r7, #3]
 8024018:	4613      	mov	r3, r2
 802401a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0CR_INSW_Msk;
 802401c:	78f8      	ldrb	r0, [r7, #3]
 802401e:	78fb      	ldrb	r3, [r7, #3]
 8024020:	687a      	ldr	r2, [r7, #4]
 8024022:	3306      	adds	r3, #6
 8024024:	009b      	lsls	r3, r3, #2
 8024026:	4413      	add	r3, r2
 8024028:	685b      	ldr	r3, [r3, #4]
 802402a:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 802402e:	f043 0210 	orr.w	r2, r3, #16
 8024032:	6879      	ldr	r1, [r7, #4]
 8024034:	1d83      	adds	r3, r0, #6
 8024036:	009b      	lsls	r3, r3, #2
 8024038:	440b      	add	r3, r1
 802403a:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 802403c:	78fa      	ldrb	r2, [r7, #3]
 802403e:	78bb      	ldrb	r3, [r7, #2]
 8024040:	6878      	ldr	r0, [r7, #4]
 8024042:	4611      	mov	r1, r2
 8024044:	461a      	mov	r2, r3
 8024046:	f7ff fed3 	bl	8023df0 <XMC_USIC_CH_SetInputSource>
}
 802404a:	3708      	adds	r7, #8
 802404c:	46bd      	mov	sp, r7
 802404e:	bd80      	pop	{r7, pc}

08024050 <SPI_MASTER_ADC_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_MASTER_ADC_lInit(void)
{
 8024050:	b580      	push	{r7, lr}
 8024052:	b082      	sub	sp, #8
 8024054:	af00      	add	r7, sp, #0
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
 8024056:	2300      	movs	r3, #0
 8024058:	71fb      	strb	r3, [r7, #7]
  status =  (SPI_MASTER_STATUS_t)GLOBAL_DMA_Init(&GLOBAL_DMA_0);
 802405a:	4842      	ldr	r0, [pc, #264]	; (8024164 <SPI_MASTER_ADC_lInit+0x114>)
 802405c:	f000 fc02 	bl	8024864 <GLOBAL_DMA_Init>
 8024060:	4603      	mov	r3, r0
 8024062:	71fb      	strb	r3, [r7, #7]
  if (status == SPI_MASTER_STATUS_SUCCESS)
 8024064:	79fb      	ldrb	r3, [r7, #7]
 8024066:	2b00      	cmp	r3, #0
 8024068:	d176      	bne.n	8024158 <SPI_MASTER_ADC_lInit+0x108>
  {            
                            
  (void)XMC_DMA_CH_Init(XMC_DMA1, 3U, &SPI_MASTER_ADC_dma_ch_tx_config);
 802406a:	483f      	ldr	r0, [pc, #252]	; (8024168 <SPI_MASTER_ADC_lInit+0x118>)
 802406c:	2103      	movs	r1, #3
 802406e:	4a3f      	ldr	r2, [pc, #252]	; (802416c <SPI_MASTER_ADC_lInit+0x11c>)
 8024070:	f7fd f942 	bl	80212f8 <XMC_DMA_CH_Init>
  /*"Interrupt Settings" configuration for "transmit" and/or "receive"*/
  XMC_DMA_CH_EnableEvent(XMC_DMA1, 3U, (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 8024074:	483c      	ldr	r0, [pc, #240]	; (8024168 <SPI_MASTER_ADC_lInit+0x118>)
 8024076:	2103      	movs	r1, #3
 8024078:	2201      	movs	r2, #1
 802407a:	f7fd fb43 	bl	8021704 <XMC_DMA_CH_EnableEvent>
  XMC_DMA_CH_SetEventHandler(XMC_DMA1, 3U, SPI_MASTER_ADC_DMA_tx_handler);
 802407e:	483a      	ldr	r0, [pc, #232]	; (8024168 <SPI_MASTER_ADC_lInit+0x118>)
 8024080:	2103      	movs	r1, #3
 8024082:	4a3b      	ldr	r2, [pc, #236]	; (8024170 <SPI_MASTER_ADC_lInit+0x120>)
 8024084:	f7fd fb8c 	bl	80217a0 <XMC_DMA_CH_SetEventHandler>
                             
  (void)XMC_DMA_CH_Init(XMC_DMA1, 2U, &SPI_MASTER_ADC_dma_ch_rx_config);
 8024088:	4837      	ldr	r0, [pc, #220]	; (8024168 <SPI_MASTER_ADC_lInit+0x118>)
 802408a:	2102      	movs	r1, #2
 802408c:	4a39      	ldr	r2, [pc, #228]	; (8024174 <SPI_MASTER_ADC_lInit+0x124>)
 802408e:	f7fd f933 	bl	80212f8 <XMC_DMA_CH_Init>
  /*"Interrupt Settings" configuration for "transmit" and/or "receive"*/
  XMC_DMA_CH_EnableEvent(XMC_DMA1, 2U, (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 8024092:	4835      	ldr	r0, [pc, #212]	; (8024168 <SPI_MASTER_ADC_lInit+0x118>)
 8024094:	2102      	movs	r1, #2
 8024096:	2201      	movs	r2, #1
 8024098:	f7fd fb34 	bl	8021704 <XMC_DMA_CH_EnableEvent>
  XMC_DMA_CH_SetEventHandler(XMC_DMA1, 2U, SPI_MASTER_ADC_DMA_rx_handler);
 802409c:	4832      	ldr	r0, [pc, #200]	; (8024168 <SPI_MASTER_ADC_lInit+0x118>)
 802409e:	2102      	movs	r1, #2
 80240a0:	4a35      	ldr	r2, [pc, #212]	; (8024178 <SPI_MASTER_ADC_lInit+0x128>)
 80240a2:	f7fd fb7d 	bl	80217a0 <XMC_DMA_CH_SetEventHandler>
                             
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI2_CH0, &SPI_MASTER_ADC_Channel_Config);
 80240a6:	4835      	ldr	r0, [pc, #212]	; (802417c <SPI_MASTER_ADC_lInit+0x12c>)
 80240a8:	4935      	ldr	r1, [pc, #212]	; (8024180 <SPI_MASTER_ADC_lInit+0x130>)
 80240aa:	f7ff ff35 	bl	8023f18 <XMC_SPI_CH_Init>
                             
  XMC_SPI_CH_DisableFEM(XMC_SPI2_CH0);
 80240ae:	4833      	ldr	r0, [pc, #204]	; (802417c <SPI_MASTER_ADC_lInit+0x12c>)
 80240b0:	f7ff ff72 	bl	8023f98 <XMC_SPI_CH_DisableFEM>
                              
  XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI2_CH0);
 80240b4:	4831      	ldr	r0, [pc, #196]	; (802417c <SPI_MASTER_ADC_lInit+0x12c>)
 80240b6:	f7ff ff49 	bl	8023f4c <XMC_SPI_CH_SetBitOrderMsbFirst>
          
  XMC_SPI_CH_SetWordLength(XMC_SPI2_CH0, (uint8_t)8);
 80240ba:	4830      	ldr	r0, [pc, #192]	; (802417c <SPI_MASTER_ADC_lInit+0x12c>)
 80240bc:	2108      	movs	r1, #8
 80240be:	f7ff ff89 	bl	8023fd4 <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI2_CH0, (uint8_t)24);
 80240c2:	482e      	ldr	r0, [pc, #184]	; (802417c <SPI_MASTER_ADC_lInit+0x12c>)
 80240c4:	2118      	movs	r1, #24
 80240c6:	f7ff ff93 	bl	8023ff0 <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI2_CH0,
 80240ca:	482c      	ldr	r0, [pc, #176]	; (802417c <SPI_MASTER_ADC_lInit+0x12c>)
 80240cc:	2100      	movs	r1, #0
 80240ce:	2200      	movs	r2, #0
 80240d0:	f7ff ff72 	bl	8023fb8 <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI2_CH0, 2U);
 80240d4:	4829      	ldr	r0, [pc, #164]	; (802417c <SPI_MASTER_ADC_lInit+0x12c>)
 80240d6:	2102      	movs	r1, #2
 80240d8:	f7ff ff48 	bl	8023f6c <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)7, &SPI_MASTER_ADC_MISO_Config.port_config);
 80240dc:	4829      	ldr	r0, [pc, #164]	; (8024184 <SPI_MASTER_ADC_lInit+0x134>)
 80240de:	2107      	movs	r1, #7
 80240e0:	4a29      	ldr	r2, [pc, #164]	; (8024188 <SPI_MASTER_ADC_lInit+0x138>)
 80240e2:	f7fc f903 	bl	80202ec <XMC_GPIO_Init>

  /* Configure the data input line selected */
  XMC_SPI_CH_SetInputSource(XMC_SPI2_CH0, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_C);
 80240e6:	4825      	ldr	r0, [pc, #148]	; (802417c <SPI_MASTER_ADC_lInit+0x12c>)
 80240e8:	2100      	movs	r1, #0
 80240ea:	2202      	movs	r2, #2
 80240ec:	f7ff ff8e 	bl	802400c <XMC_SPI_CH_SetInputSource>
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI2_CH0);
 80240f0:	4822      	ldr	r0, [pc, #136]	; (802417c <SPI_MASTER_ADC_lInit+0x12c>)
 80240f2:	f7ff ff1f 	bl	8023f34 <XMC_SPI_CH_Start>

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)8, &SPI_MASTER_ADC_MOSI_Config.port_config);
 80240f6:	4823      	ldr	r0, [pc, #140]	; (8024184 <SPI_MASTER_ADC_lInit+0x134>)
 80240f8:	2108      	movs	r1, #8
 80240fa:	4a24      	ldr	r2, [pc, #144]	; (802418c <SPI_MASTER_ADC_lInit+0x13c>)
 80240fc:	f7fc f8f6 	bl	80202ec <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)9, &SPI_MASTER_ADC_SCLKOUT_Config.port_config);
 8024100:	4820      	ldr	r0, [pc, #128]	; (8024184 <SPI_MASTER_ADC_lInit+0x134>)
 8024102:	2109      	movs	r1, #9
 8024104:	4a22      	ldr	r2, [pc, #136]	; (8024190 <SPI_MASTER_ADC_lInit+0x140>)
 8024106:	f7fc f8f1 	bl	80202ec <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, (uint8_t)3, &SPI_MASTER_ADC_SS_0_Config.port_config);
 802410a:	4822      	ldr	r0, [pc, #136]	; (8024194 <SPI_MASTER_ADC_lInit+0x144>)
 802410c:	2103      	movs	r1, #3
 802410e:	4a22      	ldr	r2, [pc, #136]	; (8024198 <SPI_MASTER_ADC_lInit+0x148>)
 8024110:	f7fc f8ec 	bl	80202ec <XMC_GPIO_Init>
  XMC_SPI_CH_EnableSlaveSelect(XMC_SPI2_CH0, XMC_SPI_CH_SLAVE_SELECT_0);
 8024114:	4819      	ldr	r0, [pc, #100]	; (802417c <SPI_MASTER_ADC_lInit+0x12c>)
 8024116:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 802411a:	f7fe f921 	bl	8022360 <XMC_SPI_CH_EnableSlaveSelect>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, (uint8_t)4, &SPI_MASTER_ADC_SS_1_Config.port_config);
 802411e:	481d      	ldr	r0, [pc, #116]	; (8024194 <SPI_MASTER_ADC_lInit+0x144>)
 8024120:	2104      	movs	r1, #4
 8024122:	4a1e      	ldr	r2, [pc, #120]	; (802419c <SPI_MASTER_ADC_lInit+0x14c>)
 8024124:	f7fc f8e2 	bl	80202ec <XMC_GPIO_Init>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI2_CH0,
 8024128:	4814      	ldr	r0, [pc, #80]	; (802417c <SPI_MASTER_ADC_lInit+0x12c>)
 802412a:	2104      	movs	r1, #4
 802412c:	2201      	movs	r2, #1
 802412e:	f7fe fbed 	bl	802290c <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER,
                                      (uint32_t)SPI_MASTER_SR_ID_1);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI2_CH0,
 8024132:	4812      	ldr	r0, [pc, #72]	; (802417c <SPI_MASTER_ADC_lInit+0x12c>)
 8024134:	2108      	movs	r1, #8
 8024136:	2200      	movs	r2, #0
 8024138:	f7fe fbe8 	bl	802290c <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE,
                                      (uint32_t)SPI_MASTER_SR_ID_0);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI2_CH0,
 802413c:	480f      	ldr	r0, [pc, #60]	; (802417c <SPI_MASTER_ADC_lInit+0x12c>)
 802413e:	210c      	movs	r1, #12
 8024140:	2200      	movs	r2, #0
 8024142:	f7fe fbe3 	bl	802290c <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE,
                                      (uint32_t)SPI_MASTER_SR_ID_0);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI2_CH0,
 8024146:	480d      	ldr	r0, [pc, #52]	; (802417c <SPI_MASTER_ADC_lInit+0x12c>)
 8024148:	2110      	movs	r1, #16
 802414a:	2202      	movs	r2, #2
 802414c:	f7fe fbde 	bl	802290c <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_2);
            
  XMC_USIC_CH_TriggerServiceRequest(XMC_SPI2_CH0, (uint32_t)SPI_MASTER_SR_ID_1);
 8024150:	480a      	ldr	r0, [pc, #40]	; (802417c <SPI_MASTER_ADC_lInit+0x12c>)
 8024152:	2101      	movs	r1, #1
 8024154:	f7ff fea6 	bl	8023ea4 <XMC_USIC_CH_TriggerServiceRequest>
}            

  return status;
 8024158:	79fb      	ldrb	r3, [r7, #7]
}
 802415a:	4618      	mov	r0, r3
 802415c:	3708      	adds	r7, #8
 802415e:	46bd      	mov	sp, r7
 8024160:	bd80      	pop	{r7, pc}
 8024162:	bf00      	nop
 8024164:	1ffe89f4 	.word	0x1ffe89f4
 8024168:	50018000 	.word	0x50018000
 802416c:	1ffe88a4 	.word	0x1ffe88a4
 8024170:	080241a1 	.word	0x080241a1
 8024174:	1ffe88c8 	.word	0x1ffe88c8
 8024178:	080241d9 	.word	0x080241d9
 802417c:	48024000 	.word	0x48024000
 8024180:	1ffe8898 	.word	0x1ffe8898
 8024184:	48028300 	.word	0x48028300
 8024188:	1ffe8b70 	.word	0x1ffe8b70
 802418c:	1ffe8870 	.word	0x1ffe8870
 8024190:	0802a104 	.word	0x0802a104
 8024194:	48028500 	.word	0x48028500
 8024198:	0802a120 	.word	0x0802a120
 802419c:	1ffe8884 	.word	0x1ffe8884

080241a0 <SPI_MASTER_ADC_DMA_tx_handler>:
/*Transmit ISR*/
void SPI_MASTER_ADC_DMA_tx_handler(XMC_DMA_CH_EVENT_t event)
{
 80241a0:	b580      	push	{r7, lr}
 80241a2:	b082      	sub	sp, #8
 80241a4:	af00      	add	r7, sp, #0
 80241a6:	4603      	mov	r3, r0
 80241a8:	71fb      	strb	r3, [r7, #7]
  if (event == XMC_DMA_CH_EVENT_TRANSFER_COMPLETE)
 80241aa:	79fb      	ldrb	r3, [r7, #7]
 80241ac:	2b01      	cmp	r3, #1
 80241ae:	d10b      	bne.n	80241c8 <SPI_MASTER_ADC_DMA_tx_handler+0x28>
  {
    while(XMC_USIC_CH_GetTransmitBufferStatus(XMC_SPI2_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
 80241b0:	bf00      	nop
 80241b2:	4807      	ldr	r0, [pc, #28]	; (80241d0 <SPI_MASTER_ADC_DMA_tx_handler+0x30>)
 80241b4:	f7ff fe66 	bl	8023e84 <XMC_USIC_CH_GetTransmitBufferStatus>
 80241b8:	4603      	mov	r3, r0
 80241ba:	2b80      	cmp	r3, #128	; 0x80
 80241bc:	d0f9      	beq.n	80241b2 <SPI_MASTER_ADC_DMA_tx_handler+0x12>
    SPI_MASTER_ADC.runtime->tx_busy = false;
 80241be:	4b05      	ldr	r3, [pc, #20]	; (80241d4 <SPI_MASTER_ADC_DMA_tx_handler+0x34>)
 80241c0:	689b      	ldr	r3, [r3, #8]
 80241c2:	2200      	movs	r2, #0
 80241c4:	f883 2020 	strb.w	r2, [r3, #32]
  }
}
 80241c8:	3708      	adds	r7, #8
 80241ca:	46bd      	mov	sp, r7
 80241cc:	bd80      	pop	{r7, pc}
 80241ce:	bf00      	nop
 80241d0:	48024000 	.word	0x48024000
 80241d4:	1ffe8910 	.word	0x1ffe8910

080241d8 <SPI_MASTER_ADC_DMA_rx_handler>:

/*Receive ISR*/
void SPI_MASTER_ADC_DMA_rx_handler(XMC_DMA_CH_EVENT_t event)
{
 80241d8:	b580      	push	{r7, lr}
 80241da:	b082      	sub	sp, #8
 80241dc:	af00      	add	r7, sp, #0
 80241de:	4603      	mov	r3, r0
 80241e0:	71fb      	strb	r3, [r7, #7]
  if (event == XMC_DMA_CH_EVENT_TRANSFER_COMPLETE)
 80241e2:	79fb      	ldrb	r3, [r7, #7]
 80241e4:	2b01      	cmp	r3, #1
 80241e6:	d112      	bne.n	802420e <SPI_MASTER_ADC_DMA_rx_handler+0x36>
  {
    XMC_SPI_CH_DisableEvent(XMC_SPI2_CH0, (uint32_t)((uint32_t)XMC_SPI_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_SPI_CH_EVENT_ALTERNATIVE_RECEIVE));
 80241e8:	480a      	ldr	r0, [pc, #40]	; (8024214 <SPI_MASTER_ADC_DMA_rx_handler+0x3c>)
 80241ea:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80241ee:	f7fe f901 	bl	80223f4 <XMC_SPI_CH_DisableEvent>
    SPI_MASTER_ADC.runtime->tx_data_dummy = false;
 80241f2:	4b09      	ldr	r3, [pc, #36]	; (8024218 <SPI_MASTER_ADC_DMA_rx_handler+0x40>)
 80241f4:	689b      	ldr	r3, [r3, #8]
 80241f6:	2200      	movs	r2, #0
 80241f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    SPI_MASTER_ADC.runtime->rx_data_dummy = true;
 80241fc:	4b06      	ldr	r3, [pc, #24]	; (8024218 <SPI_MASTER_ADC_DMA_rx_handler+0x40>)
 80241fe:	689b      	ldr	r3, [r3, #8]
 8024200:	2201      	movs	r2, #1
 8024202:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    SPI_MASTER_ADC.runtime->rx_busy = false;
 8024206:	4b04      	ldr	r3, [pc, #16]	; (8024218 <SPI_MASTER_ADC_DMA_rx_handler+0x40>)
 8024208:	689b      	ldr	r3, [r3, #8]
 802420a:	2200      	movs	r2, #0
 802420c:	77da      	strb	r2, [r3, #31]
  }
}
 802420e:	3708      	adds	r7, #8
 8024210:	46bd      	mov	sp, r7
 8024212:	bd80      	pop	{r7, pc}
 8024214:	48024000 	.word	0x48024000
 8024218:	1ffe8910 	.word	0x1ffe8910

0802421c <SPI_MASTER_TC_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_MASTER_TC_lInit(void)
{
 802421c:	b580      	push	{r7, lr}
 802421e:	b082      	sub	sp, #8
 8024220:	af00      	add	r7, sp, #0
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
 8024222:	2300      	movs	r3, #0
 8024224:	71fb      	strb	r3, [r7, #7]
  status =  (SPI_MASTER_STATUS_t)GLOBAL_DMA_Init(&GLOBAL_DMA_1);
 8024226:	4845      	ldr	r0, [pc, #276]	; (802433c <SPI_MASTER_TC_lInit+0x120>)
 8024228:	f000 fb1c 	bl	8024864 <GLOBAL_DMA_Init>
 802422c:	4603      	mov	r3, r0
 802422e:	71fb      	strb	r3, [r7, #7]
  if (status == SPI_MASTER_STATUS_SUCCESS)
 8024230:	79fb      	ldrb	r3, [r7, #7]
 8024232:	2b00      	cmp	r3, #0
 8024234:	d17d      	bne.n	8024332 <SPI_MASTER_TC_lInit+0x116>
  {            
                            
  (void)XMC_DMA_CH_Init(XMC_DMA0, 0U, &SPI_MASTER_TC_dma_ch_tx_config);
 8024236:	4842      	ldr	r0, [pc, #264]	; (8024340 <SPI_MASTER_TC_lInit+0x124>)
 8024238:	2100      	movs	r1, #0
 802423a:	4a42      	ldr	r2, [pc, #264]	; (8024344 <SPI_MASTER_TC_lInit+0x128>)
 802423c:	f7fd f85c 	bl	80212f8 <XMC_DMA_CH_Init>
  /*"Interrupt Settings" configuration for "transmit" and/or "receive"*/
  XMC_DMA_CH_EnableEvent(XMC_DMA0, 0U, (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 8024240:	483f      	ldr	r0, [pc, #252]	; (8024340 <SPI_MASTER_TC_lInit+0x124>)
 8024242:	2100      	movs	r1, #0
 8024244:	2201      	movs	r2, #1
 8024246:	f7fd fa5d 	bl	8021704 <XMC_DMA_CH_EnableEvent>
  XMC_DMA_CH_SetEventHandler(XMC_DMA0, 0U, SPI_MASTER_TC_DMA_tx_handler);
 802424a:	483d      	ldr	r0, [pc, #244]	; (8024340 <SPI_MASTER_TC_lInit+0x124>)
 802424c:	2100      	movs	r1, #0
 802424e:	4a3e      	ldr	r2, [pc, #248]	; (8024348 <SPI_MASTER_TC_lInit+0x12c>)
 8024250:	f7fd faa6 	bl	80217a0 <XMC_DMA_CH_SetEventHandler>
                             
  (void)XMC_DMA_CH_Init(XMC_DMA0, 1U, &SPI_MASTER_TC_dma_ch_rx_config);
 8024254:	483a      	ldr	r0, [pc, #232]	; (8024340 <SPI_MASTER_TC_lInit+0x124>)
 8024256:	2101      	movs	r1, #1
 8024258:	4a3c      	ldr	r2, [pc, #240]	; (802434c <SPI_MASTER_TC_lInit+0x130>)
 802425a:	f7fd f84d 	bl	80212f8 <XMC_DMA_CH_Init>
  /*"Interrupt Settings" configuration for "transmit" and/or "receive"*/
  XMC_DMA_CH_EnableEvent(XMC_DMA0, 1U, (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 802425e:	4838      	ldr	r0, [pc, #224]	; (8024340 <SPI_MASTER_TC_lInit+0x124>)
 8024260:	2101      	movs	r1, #1
 8024262:	2201      	movs	r2, #1
 8024264:	f7fd fa4e 	bl	8021704 <XMC_DMA_CH_EnableEvent>
  XMC_DMA_CH_SetEventHandler(XMC_DMA0, 1U, SPI_MASTER_TC_DMA_rx_handler);
 8024268:	4835      	ldr	r0, [pc, #212]	; (8024340 <SPI_MASTER_TC_lInit+0x124>)
 802426a:	2101      	movs	r1, #1
 802426c:	4a38      	ldr	r2, [pc, #224]	; (8024350 <SPI_MASTER_TC_lInit+0x134>)
 802426e:	f7fd fa97 	bl	80217a0 <XMC_DMA_CH_SetEventHandler>
                             
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI1_CH0, &SPI_MASTER_TC_Channel_Config);
 8024272:	4838      	ldr	r0, [pc, #224]	; (8024354 <SPI_MASTER_TC_lInit+0x138>)
 8024274:	4938      	ldr	r1, [pc, #224]	; (8024358 <SPI_MASTER_TC_lInit+0x13c>)
 8024276:	f7ff fe4f 	bl	8023f18 <XMC_SPI_CH_Init>
                             
  XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI1_CH0);
 802427a:	4836      	ldr	r0, [pc, #216]	; (8024354 <SPI_MASTER_TC_lInit+0x138>)
 802427c:	f7ff fe66 	bl	8023f4c <XMC_SPI_CH_SetBitOrderMsbFirst>
          
  XMC_SPI_CH_SetWordLength(XMC_SPI1_CH0, (uint8_t)8);
 8024280:	4834      	ldr	r0, [pc, #208]	; (8024354 <SPI_MASTER_TC_lInit+0x138>)
 8024282:	2108      	movs	r1, #8
 8024284:	f7ff fea6 	bl	8023fd4 <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI1_CH0, (uint8_t)32);
 8024288:	4832      	ldr	r0, [pc, #200]	; (8024354 <SPI_MASTER_TC_lInit+0x138>)
 802428a:	2120      	movs	r1, #32
 802428c:	f7ff feb0 	bl	8023ff0 <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI1_CH0,
 8024290:	4830      	ldr	r0, [pc, #192]	; (8024354 <SPI_MASTER_TC_lInit+0x138>)
 8024292:	2100      	movs	r1, #0
 8024294:	2200      	movs	r2, #0
 8024296:	f7ff fe8f 	bl	8023fb8 <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI1_CH0, 2U);
 802429a:	482e      	ldr	r0, [pc, #184]	; (8024354 <SPI_MASTER_TC_lInit+0x138>)
 802429c:	2102      	movs	r1, #2
 802429e:	f7ff fe65 	bl	8023f6c <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)4, &SPI_MASTER_TC_MISO_Config.port_config);
 80242a2:	482e      	ldr	r0, [pc, #184]	; (802435c <SPI_MASTER_TC_lInit+0x140>)
 80242a4:	2104      	movs	r1, #4
 80242a6:	4a2e      	ldr	r2, [pc, #184]	; (8024360 <SPI_MASTER_TC_lInit+0x144>)
 80242a8:	f7fc f820 	bl	80202ec <XMC_GPIO_Init>

  /* Configure the data input line selected */
  XMC_SPI_CH_SetInputSource(XMC_SPI1_CH0, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_A);
 80242ac:	4829      	ldr	r0, [pc, #164]	; (8024354 <SPI_MASTER_TC_lInit+0x138>)
 80242ae:	2100      	movs	r1, #0
 80242b0:	2200      	movs	r2, #0
 80242b2:	f7ff feab 	bl	802400c <XMC_SPI_CH_SetInputSource>
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI1_CH0);
 80242b6:	4827      	ldr	r0, [pc, #156]	; (8024354 <SPI_MASTER_TC_lInit+0x138>)
 80242b8:	f7ff fe3c 	bl	8023f34 <XMC_SPI_CH_Start>

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)5, &SPI_MASTER_TC_MOSI_Config.port_config);
 80242bc:	4827      	ldr	r0, [pc, #156]	; (802435c <SPI_MASTER_TC_lInit+0x140>)
 80242be:	2105      	movs	r1, #5
 80242c0:	4a28      	ldr	r2, [pc, #160]	; (8024364 <SPI_MASTER_TC_lInit+0x148>)
 80242c2:	f7fc f813 	bl	80202ec <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)11, &SPI_MASTER_TC_SCLKOUT_Config.port_config);
 80242c6:	4825      	ldr	r0, [pc, #148]	; (802435c <SPI_MASTER_TC_lInit+0x140>)
 80242c8:	210b      	movs	r1, #11
 80242ca:	4a27      	ldr	r2, [pc, #156]	; (8024368 <SPI_MASTER_TC_lInit+0x14c>)
 80242cc:	f7fc f80e 	bl	80202ec <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)6, &SPI_MASTER_TC_SS_0_Config.port_config);
 80242d0:	4822      	ldr	r0, [pc, #136]	; (802435c <SPI_MASTER_TC_lInit+0x140>)
 80242d2:	2106      	movs	r1, #6
 80242d4:	4a25      	ldr	r2, [pc, #148]	; (802436c <SPI_MASTER_TC_lInit+0x150>)
 80242d6:	f7fc f809 	bl	80202ec <XMC_GPIO_Init>
  XMC_SPI_CH_EnableSlaveSelect(XMC_SPI1_CH0, XMC_SPI_CH_SLAVE_SELECT_0);
 80242da:	481e      	ldr	r0, [pc, #120]	; (8024354 <SPI_MASTER_TC_lInit+0x138>)
 80242dc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80242e0:	f7fe f83e 	bl	8022360 <XMC_SPI_CH_EnableSlaveSelect>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)14, &SPI_MASTER_TC_SS_1_Config.port_config);
 80242e4:	481d      	ldr	r0, [pc, #116]	; (802435c <SPI_MASTER_TC_lInit+0x140>)
 80242e6:	210e      	movs	r1, #14
 80242e8:	4a21      	ldr	r2, [pc, #132]	; (8024370 <SPI_MASTER_TC_lInit+0x154>)
 80242ea:	f7fb ffff 	bl	80202ec <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)15, &SPI_MASTER_TC_SS_2_Config.port_config);
 80242ee:	481b      	ldr	r0, [pc, #108]	; (802435c <SPI_MASTER_TC_lInit+0x140>)
 80242f0:	210f      	movs	r1, #15
 80242f2:	4a20      	ldr	r2, [pc, #128]	; (8024374 <SPI_MASTER_TC_lInit+0x158>)
 80242f4:	f7fb fffa 	bl	80202ec <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)14, &SPI_MASTER_TC_SS_3_Config.port_config);
 80242f8:	481f      	ldr	r0, [pc, #124]	; (8024378 <SPI_MASTER_TC_lInit+0x15c>)
 80242fa:	210e      	movs	r1, #14
 80242fc:	4a1f      	ldr	r2, [pc, #124]	; (802437c <SPI_MASTER_TC_lInit+0x160>)
 80242fe:	f7fb fff5 	bl	80202ec <XMC_GPIO_Init>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI1_CH0,
 8024302:	4814      	ldr	r0, [pc, #80]	; (8024354 <SPI_MASTER_TC_lInit+0x138>)
 8024304:	2104      	movs	r1, #4
 8024306:	2200      	movs	r2, #0
 8024308:	f7fe fb00 	bl	802290c <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER,
                                      (uint32_t)SPI_MASTER_SR_ID_0);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI1_CH0,
 802430c:	4811      	ldr	r0, [pc, #68]	; (8024354 <SPI_MASTER_TC_lInit+0x138>)
 802430e:	2108      	movs	r1, #8
 8024310:	2201      	movs	r2, #1
 8024312:	f7fe fafb 	bl	802290c <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE,
                                      (uint32_t)SPI_MASTER_SR_ID_1);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI1_CH0,
 8024316:	480f      	ldr	r0, [pc, #60]	; (8024354 <SPI_MASTER_TC_lInit+0x138>)
 8024318:	210c      	movs	r1, #12
 802431a:	2201      	movs	r2, #1
 802431c:	f7fe faf6 	bl	802290c <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE,
                                      (uint32_t)SPI_MASTER_SR_ID_1);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI1_CH0,
 8024320:	480c      	ldr	r0, [pc, #48]	; (8024354 <SPI_MASTER_TC_lInit+0x138>)
 8024322:	2110      	movs	r1, #16
 8024324:	2202      	movs	r2, #2
 8024326:	f7fe faf1 	bl	802290c <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_2);
            
  XMC_USIC_CH_TriggerServiceRequest(XMC_SPI1_CH0, (uint32_t)SPI_MASTER_SR_ID_0);
 802432a:	480a      	ldr	r0, [pc, #40]	; (8024354 <SPI_MASTER_TC_lInit+0x138>)
 802432c:	2100      	movs	r1, #0
 802432e:	f7ff fdb9 	bl	8023ea4 <XMC_USIC_CH_TriggerServiceRequest>
}            

  return status;
 8024332:	79fb      	ldrb	r3, [r7, #7]
}
 8024334:	4618      	mov	r0, r3
 8024336:	3708      	adds	r7, #8
 8024338:	46bd      	mov	sp, r7
 802433a:	bd80      	pop	{r7, pc}
 802433c:	1ffe8a04 	.word	0x1ffe8a04
 8024340:	50014000 	.word	0x50014000
 8024344:	1ffe8964 	.word	0x1ffe8964
 8024348:	08024381 	.word	0x08024381
 802434c:	1ffe8988 	.word	0x1ffe8988
 8024350:	080243b9 	.word	0x080243b9
 8024354:	48020000 	.word	0x48020000
 8024358:	1ffe8958 	.word	0x1ffe8958
 802435c:	48028000 	.word	0x48028000
 8024360:	1ffe8b84 	.word	0x1ffe8b84
 8024364:	1ffe8930 	.word	0x1ffe8930
 8024368:	0802a1e0 	.word	0x0802a1e0
 802436c:	0802a1fc 	.word	0x0802a1fc
 8024370:	1ffe8944 	.word	0x1ffe8944
 8024374:	0802a220 	.word	0x0802a220
 8024378:	48028300 	.word	0x48028300
 802437c:	0802a23c 	.word	0x0802a23c

08024380 <SPI_MASTER_TC_DMA_tx_handler>:
/*Transmit ISR*/
void SPI_MASTER_TC_DMA_tx_handler(XMC_DMA_CH_EVENT_t event)
{
 8024380:	b580      	push	{r7, lr}
 8024382:	b082      	sub	sp, #8
 8024384:	af00      	add	r7, sp, #0
 8024386:	4603      	mov	r3, r0
 8024388:	71fb      	strb	r3, [r7, #7]
  if (event == XMC_DMA_CH_EVENT_TRANSFER_COMPLETE)
 802438a:	79fb      	ldrb	r3, [r7, #7]
 802438c:	2b01      	cmp	r3, #1
 802438e:	d10b      	bne.n	80243a8 <SPI_MASTER_TC_DMA_tx_handler+0x28>
  {
    while(XMC_USIC_CH_GetTransmitBufferStatus(XMC_SPI1_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
 8024390:	bf00      	nop
 8024392:	4807      	ldr	r0, [pc, #28]	; (80243b0 <SPI_MASTER_TC_DMA_tx_handler+0x30>)
 8024394:	f7ff fd76 	bl	8023e84 <XMC_USIC_CH_GetTransmitBufferStatus>
 8024398:	4603      	mov	r3, r0
 802439a:	2b80      	cmp	r3, #128	; 0x80
 802439c:	d0f9      	beq.n	8024392 <SPI_MASTER_TC_DMA_tx_handler+0x12>
    SPI_MASTER_TC.runtime->tx_busy = false;
 802439e:	4b05      	ldr	r3, [pc, #20]	; (80243b4 <SPI_MASTER_TC_DMA_tx_handler+0x34>)
 80243a0:	689b      	ldr	r3, [r3, #8]
 80243a2:	2200      	movs	r2, #0
 80243a4:	f883 2020 	strb.w	r2, [r3, #32]
  }
}
 80243a8:	3708      	adds	r7, #8
 80243aa:	46bd      	mov	sp, r7
 80243ac:	bd80      	pop	{r7, pc}
 80243ae:	bf00      	nop
 80243b0:	48020000 	.word	0x48020000
 80243b4:	1ffe89d0 	.word	0x1ffe89d0

080243b8 <SPI_MASTER_TC_DMA_rx_handler>:

/*Receive ISR*/
void SPI_MASTER_TC_DMA_rx_handler(XMC_DMA_CH_EVENT_t event)
{
 80243b8:	b580      	push	{r7, lr}
 80243ba:	b082      	sub	sp, #8
 80243bc:	af00      	add	r7, sp, #0
 80243be:	4603      	mov	r3, r0
 80243c0:	71fb      	strb	r3, [r7, #7]
  if (event == XMC_DMA_CH_EVENT_TRANSFER_COMPLETE)
 80243c2:	79fb      	ldrb	r3, [r7, #7]
 80243c4:	2b01      	cmp	r3, #1
 80243c6:	d112      	bne.n	80243ee <SPI_MASTER_TC_DMA_rx_handler+0x36>
  {
    XMC_SPI_CH_DisableEvent(XMC_SPI1_CH0, (uint32_t)((uint32_t)XMC_SPI_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_SPI_CH_EVENT_ALTERNATIVE_RECEIVE));
 80243c8:	480a      	ldr	r0, [pc, #40]	; (80243f4 <SPI_MASTER_TC_DMA_rx_handler+0x3c>)
 80243ca:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80243ce:	f7fe f811 	bl	80223f4 <XMC_SPI_CH_DisableEvent>
    SPI_MASTER_TC.runtime->tx_data_dummy = false;
 80243d2:	4b09      	ldr	r3, [pc, #36]	; (80243f8 <SPI_MASTER_TC_DMA_rx_handler+0x40>)
 80243d4:	689b      	ldr	r3, [r3, #8]
 80243d6:	2200      	movs	r2, #0
 80243d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    SPI_MASTER_TC.runtime->rx_data_dummy = true;
 80243dc:	4b06      	ldr	r3, [pc, #24]	; (80243f8 <SPI_MASTER_TC_DMA_rx_handler+0x40>)
 80243de:	689b      	ldr	r3, [r3, #8]
 80243e0:	2201      	movs	r2, #1
 80243e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    SPI_MASTER_TC.runtime->rx_busy = false;
 80243e6:	4b04      	ldr	r3, [pc, #16]	; (80243f8 <SPI_MASTER_TC_DMA_rx_handler+0x40>)
 80243e8:	689b      	ldr	r3, [r3, #8]
 80243ea:	2200      	movs	r2, #0
 80243ec:	77da      	strb	r2, [r3, #31]
  }
}
 80243ee:	3708      	adds	r7, #8
 80243f0:	46bd      	mov	sp, r7
 80243f2:	bd80      	pop	{r7, pc}
 80243f4:	48020000 	.word	0x48020000
 80243f8:	1ffe89d0 	.word	0x1ffe89d0

080243fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80243fc:	b480      	push	{r7}
 80243fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8024400:	4b04      	ldr	r3, [pc, #16]	; (8024414 <__NVIC_GetPriorityGrouping+0x18>)
 8024402:	68db      	ldr	r3, [r3, #12]
 8024404:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8024408:	0a1b      	lsrs	r3, r3, #8
}
 802440a:	4618      	mov	r0, r3
 802440c:	46bd      	mov	sp, r7
 802440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024412:	4770      	bx	lr
 8024414:	e000ed00 	.word	0xe000ed00

08024418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8024418:	b480      	push	{r7}
 802441a:	b083      	sub	sp, #12
 802441c:	af00      	add	r7, sp, #0
 802441e:	4603      	mov	r3, r0
 8024420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8024422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024426:	2b00      	cmp	r3, #0
 8024428:	db0b      	blt.n	8024442 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802442a:	4908      	ldr	r1, [pc, #32]	; (802444c <__NVIC_EnableIRQ+0x34>)
 802442c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024430:	095b      	lsrs	r3, r3, #5
 8024432:	79fa      	ldrb	r2, [r7, #7]
 8024434:	f002 021f 	and.w	r2, r2, #31
 8024438:	2001      	movs	r0, #1
 802443a:	fa00 f202 	lsl.w	r2, r0, r2
 802443e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8024442:	370c      	adds	r7, #12
 8024444:	46bd      	mov	sp, r7
 8024446:	f85d 7b04 	ldr.w	r7, [sp], #4
 802444a:	4770      	bx	lr
 802444c:	e000e100 	.word	0xe000e100

08024450 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8024450:	b480      	push	{r7}
 8024452:	b083      	sub	sp, #12
 8024454:	af00      	add	r7, sp, #0
 8024456:	4603      	mov	r3, r0
 8024458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802445a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802445e:	2b00      	cmp	r3, #0
 8024460:	db0c      	blt.n	802447c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8024462:	4909      	ldr	r1, [pc, #36]	; (8024488 <__NVIC_ClearPendingIRQ+0x38>)
 8024464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024468:	095b      	lsrs	r3, r3, #5
 802446a:	79fa      	ldrb	r2, [r7, #7]
 802446c:	f002 021f 	and.w	r2, r2, #31
 8024470:	2001      	movs	r0, #1
 8024472:	fa00 f202 	lsl.w	r2, r0, r2
 8024476:	3360      	adds	r3, #96	; 0x60
 8024478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 802447c:	370c      	adds	r7, #12
 802447e:	46bd      	mov	sp, r7
 8024480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024484:	4770      	bx	lr
 8024486:	bf00      	nop
 8024488:	e000e100 	.word	0xe000e100

0802448c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802448c:	b480      	push	{r7}
 802448e:	b083      	sub	sp, #12
 8024490:	af00      	add	r7, sp, #0
 8024492:	4603      	mov	r3, r0
 8024494:	6039      	str	r1, [r7, #0]
 8024496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8024498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802449c:	2b00      	cmp	r3, #0
 802449e:	db0a      	blt.n	80244b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80244a0:	490d      	ldr	r1, [pc, #52]	; (80244d8 <__NVIC_SetPriority+0x4c>)
 80244a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80244a6:	683a      	ldr	r2, [r7, #0]
 80244a8:	b2d2      	uxtb	r2, r2
 80244aa:	0092      	lsls	r2, r2, #2
 80244ac:	b2d2      	uxtb	r2, r2
 80244ae:	440b      	add	r3, r1
 80244b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80244b4:	e00a      	b.n	80244cc <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80244b6:	4909      	ldr	r1, [pc, #36]	; (80244dc <__NVIC_SetPriority+0x50>)
 80244b8:	79fb      	ldrb	r3, [r7, #7]
 80244ba:	f003 030f 	and.w	r3, r3, #15
 80244be:	3b04      	subs	r3, #4
 80244c0:	683a      	ldr	r2, [r7, #0]
 80244c2:	b2d2      	uxtb	r2, r2
 80244c4:	0092      	lsls	r2, r2, #2
 80244c6:	b2d2      	uxtb	r2, r2
 80244c8:	440b      	add	r3, r1
 80244ca:	761a      	strb	r2, [r3, #24]
  }
}
 80244cc:	370c      	adds	r7, #12
 80244ce:	46bd      	mov	sp, r7
 80244d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244d4:	4770      	bx	lr
 80244d6:	bf00      	nop
 80244d8:	e000e100 	.word	0xe000e100
 80244dc:	e000ed00 	.word	0xe000ed00

080244e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80244e0:	b480      	push	{r7}
 80244e2:	b089      	sub	sp, #36	; 0x24
 80244e4:	af00      	add	r7, sp, #0
 80244e6:	60f8      	str	r0, [r7, #12]
 80244e8:	60b9      	str	r1, [r7, #8]
 80244ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80244ec:	68fb      	ldr	r3, [r7, #12]
 80244ee:	f003 0307 	and.w	r3, r3, #7
 80244f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80244f4:	69fb      	ldr	r3, [r7, #28]
 80244f6:	f1c3 0307 	rsb	r3, r3, #7
 80244fa:	2b06      	cmp	r3, #6
 80244fc:	bf28      	it	cs
 80244fe:	2306      	movcs	r3, #6
 8024500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8024502:	69fb      	ldr	r3, [r7, #28]
 8024504:	3306      	adds	r3, #6
 8024506:	2b06      	cmp	r3, #6
 8024508:	d902      	bls.n	8024510 <NVIC_EncodePriority+0x30>
 802450a:	69fb      	ldr	r3, [r7, #28]
 802450c:	3b01      	subs	r3, #1
 802450e:	e000      	b.n	8024512 <NVIC_EncodePriority+0x32>
 8024510:	2300      	movs	r3, #0
 8024512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8024514:	69bb      	ldr	r3, [r7, #24]
 8024516:	2201      	movs	r2, #1
 8024518:	fa02 f303 	lsl.w	r3, r2, r3
 802451c:	1e5a      	subs	r2, r3, #1
 802451e:	68bb      	ldr	r3, [r7, #8]
 8024520:	401a      	ands	r2, r3
 8024522:	697b      	ldr	r3, [r7, #20]
 8024524:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8024526:	697b      	ldr	r3, [r7, #20]
 8024528:	2101      	movs	r1, #1
 802452a:	fa01 f303 	lsl.w	r3, r1, r3
 802452e:	1e59      	subs	r1, r3, #1
 8024530:	687b      	ldr	r3, [r7, #4]
 8024532:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8024534:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8024536:	4618      	mov	r0, r3
 8024538:	3724      	adds	r7, #36	; 0x24
 802453a:	46bd      	mov	sp, r7
 802453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024540:	4770      	bx	lr
 8024542:	bf00      	nop

08024544 <PIN_INTERRUPT_Init>:
/*
 * API to initialize the PIN_INTERRUPT APP ERU Event Trigger Logic, Output Gating Unit Hardware initialization
 * and NVIC node configuration.
 */
PIN_INTERRUPT_STATUS_t PIN_INTERRUPT_Init(const PIN_INTERRUPT_t *const handle)
{
 8024544:	b590      	push	{r4, r7, lr}
 8024546:	b083      	sub	sp, #12
 8024548:	af00      	add	r7, sp, #0
 802454a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_Init: PIN_INTERRUPT APP handle function pointer uninitialized", (handle != NULL));

  /* Initializes input pin characteristics */
  XMC_GPIO_Init(handle->port, handle->pin, &handle->gpio_config);
 802454c:	687b      	ldr	r3, [r7, #4]
 802454e:	6859      	ldr	r1, [r3, #4]
 8024550:	687b      	ldr	r3, [r7, #4]
 8024552:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8024556:	687b      	ldr	r3, [r7, #4]
 8024558:	3308      	adds	r3, #8
 802455a:	4608      	mov	r0, r1
 802455c:	4611      	mov	r1, r2
 802455e:	461a      	mov	r2, r3
 8024560:	f7fb fec4 	bl	80202ec <XMC_GPIO_Init>
  /* ERU Event Trigger Logic Hardware initialization based on UI */
  XMC_ERU_ETL_Init(handle->eru, handle->etl, &handle->etl_config);
 8024564:	687b      	ldr	r3, [r7, #4]
 8024566:	6819      	ldr	r1, [r3, #0]
 8024568:	687b      	ldr	r3, [r7, #4]
 802456a:	7fda      	ldrb	r2, [r3, #31]
 802456c:	687b      	ldr	r3, [r7, #4]
 802456e:	3314      	adds	r3, #20
 8024570:	4608      	mov	r0, r1
 8024572:	4611      	mov	r1, r2
 8024574:	461a      	mov	r2, r3
 8024576:	f7fd fa45 	bl	8021a04 <XMC_ERU_ETL_Init>
  /* OGU is configured to generate event on configured trigger edge */
  XMC_ERU_OGU_SetServiceRequestMode(handle->eru, handle->ogu, XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER);
 802457a:	687b      	ldr	r3, [r7, #4]
 802457c:	681a      	ldr	r2, [r3, #0]
 802457e:	687b      	ldr	r3, [r7, #4]
 8024580:	f893 3020 	ldrb.w	r3, [r3, #32]
 8024584:	4610      	mov	r0, r2
 8024586:	4619      	mov	r1, r3
 8024588:	2201      	movs	r2, #1
 802458a:	f7fd fa61 	bl	8021a50 <XMC_ERU_OGU_SetServiceRequestMode>
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 802458e:	687b      	ldr	r3, [r7, #4]
 8024590:	7f1c      	ldrb	r4, [r3, #28]
 8024592:	f7ff ff33 	bl	80243fc <__NVIC_GetPriorityGrouping>
 8024596:	4601      	mov	r1, r0
                    handle->irq_priority, handle->irq_subpriority));
 8024598:	687b      	ldr	r3, [r7, #4]
 802459a:	7f5b      	ldrb	r3, [r3, #29]
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 802459c:	461a      	mov	r2, r3
                    handle->irq_priority, handle->irq_subpriority));
 802459e:	687b      	ldr	r3, [r7, #4]
 80245a0:	7f9b      	ldrb	r3, [r3, #30]
#if (UC_FAMILY == XMC1)
  /* Configure NVIC node and priority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, handle->irq_priority);
#else
  /* Configure NVIC node, priority and subpriority */
  NVIC_SetPriority((IRQn_Type)handle->IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 80245a2:	4608      	mov	r0, r1
 80245a4:	4611      	mov	r1, r2
 80245a6:	461a      	mov	r2, r3
 80245a8:	f7ff ff9a 	bl	80244e0 <NVIC_EncodePriority>
 80245ac:	4602      	mov	r2, r0
 80245ae:	b263      	sxtb	r3, r4
 80245b0:	4618      	mov	r0, r3
 80245b2:	4611      	mov	r1, r2
 80245b4:	f7ff ff6a 	bl	802448c <__NVIC_SetPriority>
                    handle->irq_priority, handle->irq_subpriority));
#endif
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((IRQn_Type)handle->IRQn, (XMC_SCU_IRQCTRL_t)handle->irqctrl);
#endif
  if (true == handle->enable_at_init)
 80245b8:	687b      	ldr	r3, [r7, #4]
 80245ba:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80245be:	2b00      	cmp	r3, #0
 80245c0:	d00b      	beq.n	80245da <PIN_INTERRUPT_Init+0x96>
  {
    /* Clear pending interrupt before enabling it */
    NVIC_ClearPendingIRQ((IRQn_Type)handle->IRQn);
 80245c2:	687b      	ldr	r3, [r7, #4]
 80245c4:	7f1b      	ldrb	r3, [r3, #28]
 80245c6:	b25b      	sxtb	r3, r3
 80245c8:	4618      	mov	r0, r3
 80245ca:	f7ff ff41 	bl	8024450 <__NVIC_ClearPendingIRQ>
    /* Enable NVIC node */
    NVIC_EnableIRQ((IRQn_Type)handle->IRQn);
 80245ce:	687b      	ldr	r3, [r7, #4]
 80245d0:	7f1b      	ldrb	r3, [r3, #28]
 80245d2:	b25b      	sxtb	r3, r3
 80245d4:	4618      	mov	r0, r3
 80245d6:	f7ff ff1f 	bl	8024418 <__NVIC_EnableIRQ>
  }
  return (PIN_INTERRUPT_STATUS_SUCCESS);
 80245da:	2300      	movs	r3, #0
}
 80245dc:	4618      	mov	r0, r3
 80245de:	370c      	adds	r7, #12
 80245e0:	46bd      	mov	sp, r7
 80245e2:	bd90      	pop	{r4, r7, pc}

080245e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80245e4:	b480      	push	{r7}
 80245e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80245e8:	4b04      	ldr	r3, [pc, #16]	; (80245fc <__NVIC_GetPriorityGrouping+0x18>)
 80245ea:	68db      	ldr	r3, [r3, #12]
 80245ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80245f0:	0a1b      	lsrs	r3, r3, #8
}
 80245f2:	4618      	mov	r0, r3
 80245f4:	46bd      	mov	sp, r7
 80245f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245fa:	4770      	bx	lr
 80245fc:	e000ed00 	.word	0xe000ed00

08024600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8024600:	b480      	push	{r7}
 8024602:	b083      	sub	sp, #12
 8024604:	af00      	add	r7, sp, #0
 8024606:	4603      	mov	r3, r0
 8024608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802460a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802460e:	2b00      	cmp	r3, #0
 8024610:	db0b      	blt.n	802462a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8024612:	4908      	ldr	r1, [pc, #32]	; (8024634 <__NVIC_EnableIRQ+0x34>)
 8024614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024618:	095b      	lsrs	r3, r3, #5
 802461a:	79fa      	ldrb	r2, [r7, #7]
 802461c:	f002 021f 	and.w	r2, r2, #31
 8024620:	2001      	movs	r0, #1
 8024622:	fa00 f202 	lsl.w	r2, r0, r2
 8024626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 802462a:	370c      	adds	r7, #12
 802462c:	46bd      	mov	sp, r7
 802462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024632:	4770      	bx	lr
 8024634:	e000e100 	.word	0xe000e100

08024638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8024638:	b480      	push	{r7}
 802463a:	b083      	sub	sp, #12
 802463c:	af00      	add	r7, sp, #0
 802463e:	4603      	mov	r3, r0
 8024640:	6039      	str	r1, [r7, #0]
 8024642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8024644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024648:	2b00      	cmp	r3, #0
 802464a:	db0a      	blt.n	8024662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802464c:	490d      	ldr	r1, [pc, #52]	; (8024684 <__NVIC_SetPriority+0x4c>)
 802464e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024652:	683a      	ldr	r2, [r7, #0]
 8024654:	b2d2      	uxtb	r2, r2
 8024656:	0092      	lsls	r2, r2, #2
 8024658:	b2d2      	uxtb	r2, r2
 802465a:	440b      	add	r3, r1
 802465c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8024660:	e00a      	b.n	8024678 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8024662:	4909      	ldr	r1, [pc, #36]	; (8024688 <__NVIC_SetPriority+0x50>)
 8024664:	79fb      	ldrb	r3, [r7, #7]
 8024666:	f003 030f 	and.w	r3, r3, #15
 802466a:	3b04      	subs	r3, #4
 802466c:	683a      	ldr	r2, [r7, #0]
 802466e:	b2d2      	uxtb	r2, r2
 8024670:	0092      	lsls	r2, r2, #2
 8024672:	b2d2      	uxtb	r2, r2
 8024674:	440b      	add	r3, r1
 8024676:	761a      	strb	r2, [r3, #24]
  }
}
 8024678:	370c      	adds	r7, #12
 802467a:	46bd      	mov	sp, r7
 802467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024680:	4770      	bx	lr
 8024682:	bf00      	nop
 8024684:	e000e100 	.word	0xe000e100
 8024688:	e000ed00 	.word	0xe000ed00

0802468c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802468c:	b480      	push	{r7}
 802468e:	b089      	sub	sp, #36	; 0x24
 8024690:	af00      	add	r7, sp, #0
 8024692:	60f8      	str	r0, [r7, #12]
 8024694:	60b9      	str	r1, [r7, #8]
 8024696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8024698:	68fb      	ldr	r3, [r7, #12]
 802469a:	f003 0307 	and.w	r3, r3, #7
 802469e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80246a0:	69fb      	ldr	r3, [r7, #28]
 80246a2:	f1c3 0307 	rsb	r3, r3, #7
 80246a6:	2b06      	cmp	r3, #6
 80246a8:	bf28      	it	cs
 80246aa:	2306      	movcs	r3, #6
 80246ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80246ae:	69fb      	ldr	r3, [r7, #28]
 80246b0:	3306      	adds	r3, #6
 80246b2:	2b06      	cmp	r3, #6
 80246b4:	d902      	bls.n	80246bc <NVIC_EncodePriority+0x30>
 80246b6:	69fb      	ldr	r3, [r7, #28]
 80246b8:	3b01      	subs	r3, #1
 80246ba:	e000      	b.n	80246be <NVIC_EncodePriority+0x32>
 80246bc:	2300      	movs	r3, #0
 80246be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80246c0:	69bb      	ldr	r3, [r7, #24]
 80246c2:	2201      	movs	r2, #1
 80246c4:	fa02 f303 	lsl.w	r3, r2, r3
 80246c8:	1e5a      	subs	r2, r3, #1
 80246ca:	68bb      	ldr	r3, [r7, #8]
 80246cc:	401a      	ands	r2, r3
 80246ce:	697b      	ldr	r3, [r7, #20]
 80246d0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80246d2:	697b      	ldr	r3, [r7, #20]
 80246d4:	2101      	movs	r1, #1
 80246d6:	fa01 f303 	lsl.w	r3, r1, r3
 80246da:	1e59      	subs	r1, r3, #1
 80246dc:	687b      	ldr	r3, [r7, #4]
 80246de:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80246e0:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80246e2:	4618      	mov	r0, r3
 80246e4:	3724      	adds	r7, #36	; 0x24
 80246e6:	46bd      	mov	sp, r7
 80246e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246ec:	4770      	bx	lr
 80246ee:	bf00      	nop

080246f0 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 80246f0:	b580      	push	{r7, lr}
 80246f2:	b082      	sub	sp, #8
 80246f4:	af00      	add	r7, sp, #0
 80246f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 80246f8:	687b      	ldr	r3, [r7, #4]
 80246fa:	781b      	ldrb	r3, [r3, #0]
 80246fc:	b25b      	sxtb	r3, r3
 80246fe:	4618      	mov	r0, r3
 8024700:	f7ff ff7e 	bl	8024600 <__NVIC_EnableIRQ>
}
 8024704:	3708      	adds	r7, #8
 8024706:	46bd      	mov	sp, r7
 8024708:	bd80      	pop	{r7, pc}
 802470a:	bf00      	nop

0802470c <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 802470c:	b590      	push	{r4, r7, lr}
 802470e:	b083      	sub	sp, #12
 8024710:	af00      	add	r7, sp, #0
 8024712:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8024714:	687b      	ldr	r3, [r7, #4]
 8024716:	781c      	ldrb	r4, [r3, #0]
 8024718:	f7ff ff64 	bl	80245e4 <__NVIC_GetPriorityGrouping>
 802471c:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 802471e:	687b      	ldr	r3, [r7, #4]
 8024720:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8024722:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8024724:	687b      	ldr	r3, [r7, #4]
 8024726:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8024728:	4608      	mov	r0, r1
 802472a:	4611      	mov	r1, r2
 802472c:	461a      	mov	r2, r3
 802472e:	f7ff ffad 	bl	802468c <NVIC_EncodePriority>
 8024732:	4602      	mov	r2, r0
 8024734:	b263      	sxtb	r3, r4
 8024736:	4618      	mov	r0, r3
 8024738:	4611      	mov	r1, r2
 802473a:	f7ff ff7d 	bl	8024638 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 802473e:	687b      	ldr	r3, [r7, #4]
 8024740:	78db      	ldrb	r3, [r3, #3]
 8024742:	2b00      	cmp	r3, #0
 8024744:	d002      	beq.n	802474c <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8024746:	6878      	ldr	r0, [r7, #4]
 8024748:	f7ff ffd2 	bl	80246f0 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 802474c:	2300      	movs	r3, #0
}
 802474e:	4618      	mov	r0, r3
 8024750:	370c      	adds	r7, #12
 8024752:	46bd      	mov	sp, r7
 8024754:	bd90      	pop	{r4, r7, pc}
 8024756:	bf00      	nop

08024758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8024758:	b480      	push	{r7}
 802475a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802475c:	4b04      	ldr	r3, [pc, #16]	; (8024770 <__NVIC_GetPriorityGrouping+0x18>)
 802475e:	68db      	ldr	r3, [r3, #12]
 8024760:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8024764:	0a1b      	lsrs	r3, r3, #8
}
 8024766:	4618      	mov	r0, r3
 8024768:	46bd      	mov	sp, r7
 802476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802476e:	4770      	bx	lr
 8024770:	e000ed00 	.word	0xe000ed00

08024774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8024774:	b480      	push	{r7}
 8024776:	b083      	sub	sp, #12
 8024778:	af00      	add	r7, sp, #0
 802477a:	4603      	mov	r3, r0
 802477c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802477e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024782:	2b00      	cmp	r3, #0
 8024784:	db0b      	blt.n	802479e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8024786:	4908      	ldr	r1, [pc, #32]	; (80247a8 <__NVIC_EnableIRQ+0x34>)
 8024788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802478c:	095b      	lsrs	r3, r3, #5
 802478e:	79fa      	ldrb	r2, [r7, #7]
 8024790:	f002 021f 	and.w	r2, r2, #31
 8024794:	2001      	movs	r0, #1
 8024796:	fa00 f202 	lsl.w	r2, r0, r2
 802479a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 802479e:	370c      	adds	r7, #12
 80247a0:	46bd      	mov	sp, r7
 80247a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80247a6:	4770      	bx	lr
 80247a8:	e000e100 	.word	0xe000e100

080247ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80247ac:	b480      	push	{r7}
 80247ae:	b083      	sub	sp, #12
 80247b0:	af00      	add	r7, sp, #0
 80247b2:	4603      	mov	r3, r0
 80247b4:	6039      	str	r1, [r7, #0]
 80247b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80247b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80247bc:	2b00      	cmp	r3, #0
 80247be:	db0a      	blt.n	80247d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80247c0:	490d      	ldr	r1, [pc, #52]	; (80247f8 <__NVIC_SetPriority+0x4c>)
 80247c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80247c6:	683a      	ldr	r2, [r7, #0]
 80247c8:	b2d2      	uxtb	r2, r2
 80247ca:	0092      	lsls	r2, r2, #2
 80247cc:	b2d2      	uxtb	r2, r2
 80247ce:	440b      	add	r3, r1
 80247d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80247d4:	e00a      	b.n	80247ec <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80247d6:	4909      	ldr	r1, [pc, #36]	; (80247fc <__NVIC_SetPriority+0x50>)
 80247d8:	79fb      	ldrb	r3, [r7, #7]
 80247da:	f003 030f 	and.w	r3, r3, #15
 80247de:	3b04      	subs	r3, #4
 80247e0:	683a      	ldr	r2, [r7, #0]
 80247e2:	b2d2      	uxtb	r2, r2
 80247e4:	0092      	lsls	r2, r2, #2
 80247e6:	b2d2      	uxtb	r2, r2
 80247e8:	440b      	add	r3, r1
 80247ea:	761a      	strb	r2, [r3, #24]
  }
}
 80247ec:	370c      	adds	r7, #12
 80247ee:	46bd      	mov	sp, r7
 80247f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80247f4:	4770      	bx	lr
 80247f6:	bf00      	nop
 80247f8:	e000e100 	.word	0xe000e100
 80247fc:	e000ed00 	.word	0xe000ed00

08024800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8024800:	b480      	push	{r7}
 8024802:	b089      	sub	sp, #36	; 0x24
 8024804:	af00      	add	r7, sp, #0
 8024806:	60f8      	str	r0, [r7, #12]
 8024808:	60b9      	str	r1, [r7, #8]
 802480a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802480c:	68fb      	ldr	r3, [r7, #12]
 802480e:	f003 0307 	and.w	r3, r3, #7
 8024812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8024814:	69fb      	ldr	r3, [r7, #28]
 8024816:	f1c3 0307 	rsb	r3, r3, #7
 802481a:	2b06      	cmp	r3, #6
 802481c:	bf28      	it	cs
 802481e:	2306      	movcs	r3, #6
 8024820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8024822:	69fb      	ldr	r3, [r7, #28]
 8024824:	3306      	adds	r3, #6
 8024826:	2b06      	cmp	r3, #6
 8024828:	d902      	bls.n	8024830 <NVIC_EncodePriority+0x30>
 802482a:	69fb      	ldr	r3, [r7, #28]
 802482c:	3b01      	subs	r3, #1
 802482e:	e000      	b.n	8024832 <NVIC_EncodePriority+0x32>
 8024830:	2300      	movs	r3, #0
 8024832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8024834:	69bb      	ldr	r3, [r7, #24]
 8024836:	2201      	movs	r2, #1
 8024838:	fa02 f303 	lsl.w	r3, r2, r3
 802483c:	1e5a      	subs	r2, r3, #1
 802483e:	68bb      	ldr	r3, [r7, #8]
 8024840:	401a      	ands	r2, r3
 8024842:	697b      	ldr	r3, [r7, #20]
 8024844:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8024846:	697b      	ldr	r3, [r7, #20]
 8024848:	2101      	movs	r1, #1
 802484a:	fa01 f303 	lsl.w	r3, r1, r3
 802484e:	1e59      	subs	r1, r3, #1
 8024850:	687b      	ldr	r3, [r7, #4]
 8024852:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8024854:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8024856:	4618      	mov	r0, r3
 8024858:	3724      	adds	r7, #36	; 0x24
 802485a:	46bd      	mov	sp, r7
 802485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024860:	4770      	bx	lr
 8024862:	bf00      	nop

08024864 <GLOBAL_DMA_Init>:
  return version;
}

/* GLOBAL_DMA initialization function */
GLOBAL_DMA_STATUS_t GLOBAL_DMA_Init(GLOBAL_DMA_t *const obj)
{
 8024864:	b590      	push	{r4, r7, lr}
 8024866:	b083      	sub	sp, #12
 8024868:	af00      	add	r7, sp, #0
 802486a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DMA_GLOBAL_Init: NULL DMA_GLOBAL_t object", (obj != NULL));

  if (obj->initialized == false)
 802486c:	687b      	ldr	r3, [r7, #4]
 802486e:	7a1b      	ldrb	r3, [r3, #8]
 8024870:	f083 0301 	eor.w	r3, r3, #1
 8024874:	b2db      	uxtb	r3, r3
 8024876:	2b00      	cmp	r3, #0
 8024878:	d024      	beq.n	80248c4 <GLOBAL_DMA_Init+0x60>
  {
    /* Enable DMA module */
    XMC_DMA_Init(obj->dma);
 802487a:	687b      	ldr	r3, [r7, #4]
 802487c:	681b      	ldr	r3, [r3, #0]
 802487e:	4618      	mov	r0, r3
 8024880:	f7fc fc36 	bl	80210f0 <XMC_DMA_Init>

    /* Enable DMA event handling */
    NVIC_SetPriority(obj->irq_node, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8024884:	687b      	ldr	r3, [r7, #4]
 8024886:	7a5c      	ldrb	r4, [r3, #9]
 8024888:	f7ff ff66 	bl	8024758 <__NVIC_GetPriorityGrouping>
 802488c:	4601      	mov	r1, r0
                                                        obj->config->priority,
 802488e:	687b      	ldr	r3, [r7, #4]
 8024890:	685b      	ldr	r3, [r3, #4]
 8024892:	781b      	ldrb	r3, [r3, #0]
  {
    /* Enable DMA module */
    XMC_DMA_Init(obj->dma);

    /* Enable DMA event handling */
    NVIC_SetPriority(obj->irq_node, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8024894:	461a      	mov	r2, r3
                                                        obj->config->priority,
                                                        obj->config->sub_priority));
 8024896:	687b      	ldr	r3, [r7, #4]
 8024898:	685b      	ldr	r3, [r3, #4]
 802489a:	785b      	ldrb	r3, [r3, #1]
  {
    /* Enable DMA module */
    XMC_DMA_Init(obj->dma);

    /* Enable DMA event handling */
    NVIC_SetPriority(obj->irq_node, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 802489c:	4608      	mov	r0, r1
 802489e:	4611      	mov	r1, r2
 80248a0:	461a      	mov	r2, r3
 80248a2:	f7ff ffad 	bl	8024800 <NVIC_EncodePriority>
 80248a6:	4602      	mov	r2, r0
 80248a8:	b263      	sxtb	r3, r4
 80248aa:	4618      	mov	r0, r3
 80248ac:	4611      	mov	r1, r2
 80248ae:	f7ff ff7d 	bl	80247ac <__NVIC_SetPriority>
                                                        obj->config->priority,
                                                        obj->config->sub_priority));
    NVIC_EnableIRQ(obj->irq_node);
 80248b2:	687b      	ldr	r3, [r7, #4]
 80248b4:	7a5b      	ldrb	r3, [r3, #9]
 80248b6:	b25b      	sxtb	r3, r3
 80248b8:	4618      	mov	r0, r3
 80248ba:	f7ff ff5b 	bl	8024774 <__NVIC_EnableIRQ>
    obj->initialized = true;
 80248be:	687b      	ldr	r3, [r7, #4]
 80248c0:	2201      	movs	r2, #1
 80248c2:	721a      	strb	r2, [r3, #8]
  }

  return GLOBAL_DMA_STATUS_SUCCESS;
 80248c4:	2300      	movs	r3, #0
}
 80248c6:	4618      	mov	r0, r3
 80248c8:	370c      	adds	r7, #12
 80248ca:	46bd      	mov	sp, r7
 80248cc:	bd90      	pop	{r4, r7, pc}
 80248ce:	bf00      	nop

080248d0 <GPDMA0_0_IRQHandler>:
  .initialized = (bool)0U, /* Is DMA initialized yet? */
  .irq_node = (IRQn_Type)105U /* Allotted DMA IRQ node */
};

void GPDMA0_0_IRQHandler(void)
{
 80248d0:	b580      	push	{r7, lr}
 80248d2:	af00      	add	r7, sp, #0
  XMC_DMA_IRQHandler(XMC_DMA0);
 80248d4:	4801      	ldr	r0, [pc, #4]	; (80248dc <GPDMA0_0_IRQHandler+0xc>)
 80248d6:	f7fc ff85 	bl	80217e4 <XMC_DMA_IRQHandler>
}
 80248da:	bd80      	pop	{r7, pc}
 80248dc:	50014000 	.word	0x50014000

080248e0 <GPDMA1_0_IRQHandler>:

#ifdef XMC_DMA1
void GPDMA1_0_IRQHandler(void)
{
 80248e0:	b580      	push	{r7, lr}
 80248e2:	af00      	add	r7, sp, #0
  XMC_DMA_IRQHandler(XMC_DMA1);
 80248e4:	4801      	ldr	r0, [pc, #4]	; (80248ec <GPDMA1_0_IRQHandler+0xc>)
 80248e6:	f7fc ff7d 	bl	80217e4 <XMC_DMA_IRQHandler>
}
 80248ea:	bd80      	pop	{r7, pc}
 80248ec:	50018000 	.word	0x50018000

080248f0 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80248f0:	b480      	push	{r7}
 80248f2:	b083      	sub	sp, #12
 80248f4:	af00      	add	r7, sp, #0
 80248f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80248f8:	687b      	ldr	r3, [r7, #4]
 80248fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80248fe:	60da      	str	r2, [r3, #12]
}
 8024900:	370c      	adds	r7, #12
 8024902:	46bd      	mov	sp, r7
 8024904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024908:	4770      	bx	lr
 802490a:	bf00      	nop

0802490c <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 802490c:	b580      	push	{r7, lr}
 802490e:	b082      	sub	sp, #8
 8024910:	af00      	add	r7, sp, #0
 8024912:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8024914:	687b      	ldr	r3, [r7, #4]
 8024916:	7b5b      	ldrb	r3, [r3, #13]
 8024918:	f083 0301 	eor.w	r3, r3, #1
 802491c:	b2db      	uxtb	r3, r3
 802491e:	2b00      	cmp	r3, #0
 8024920:	d00f      	beq.n	8024942 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8024922:	687b      	ldr	r3, [r7, #4]
 8024924:	689a      	ldr	r2, [r3, #8]
 8024926:	687b      	ldr	r3, [r7, #4]
 8024928:	7b1b      	ldrb	r3, [r3, #12]
 802492a:	4610      	mov	r0, r2
 802492c:	4619      	mov	r1, r3
 802492e:	f7fc fad3 	bl	8020ed8 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8024932:	687b      	ldr	r3, [r7, #4]
 8024934:	689b      	ldr	r3, [r3, #8]
 8024936:	4618      	mov	r0, r3
 8024938:	f7ff ffda 	bl	80248f0 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 802493c:	687b      	ldr	r3, [r7, #4]
 802493e:	2201      	movs	r2, #1
 8024940:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8024942:	2300      	movs	r3, #0
}
 8024944:	4618      	mov	r0, r3
 8024946:	3708      	adds	r7, #8
 8024948:	46bd      	mov	sp, r7
 802494a:	bd80      	pop	{r7, pc}

0802494c <XMC_FLASH_SetMargin>:
 *
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_FLASH_SetMargin(const XMC_FLASH_MARGIN_t margin)
{
 802494c:	b480      	push	{r7}
 802494e:	b083      	sub	sp, #12
 8024950:	af00      	add	r7, sp, #0
 8024952:	4603      	mov	r3, r0
 8024954:	71fb      	strb	r3, [r7, #7]
  FLASH0->MARP = (FLASH0->MARP & (uint32_t)~FLASH_MARP_MARGIN_Msk) | margin;
 8024956:	4909      	ldr	r1, [pc, #36]	; (802497c <XMC_FLASH_SetMargin+0x30>)
 8024958:	4b08      	ldr	r3, [pc, #32]	; (802497c <XMC_FLASH_SetMargin+0x30>)
 802495a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802495e:	3318      	adds	r3, #24
 8024960:	681b      	ldr	r3, [r3, #0]
 8024962:	f023 020f 	bic.w	r2, r3, #15
 8024966:	79fb      	ldrb	r3, [r7, #7]
 8024968:	431a      	orrs	r2, r3
 802496a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 802496e:	3318      	adds	r3, #24
 8024970:	601a      	str	r2, [r3, #0]
}
 8024972:	370c      	adds	r7, #12
 8024974:	46bd      	mov	sp, r7
 8024976:	f85d 7b04 	ldr.w	r7, [sp], #4
 802497a:	4770      	bx	lr
 802497c:	58001000 	.word	0x58001000

08024980 <XMC_FLASH_EnableDoubleBitErrorTrap>:
 *
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_FLASH_EnableDoubleBitErrorTrap(void)
{
 8024980:	b480      	push	{r7}
 8024982:	af00      	add	r7, sp, #0
  FLASH0->MARP &= (uint32_t)~FLASH_MARP_TRAPDIS_Msk;
 8024984:	4907      	ldr	r1, [pc, #28]	; (80249a4 <XMC_FLASH_EnableDoubleBitErrorTrap+0x24>)
 8024986:	4b07      	ldr	r3, [pc, #28]	; (80249a4 <XMC_FLASH_EnableDoubleBitErrorTrap+0x24>)
 8024988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802498c:	3318      	adds	r3, #24
 802498e:	681b      	ldr	r3, [r3, #0]
 8024990:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8024994:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8024998:	3318      	adds	r3, #24
 802499a:	601a      	str	r2, [r3, #0]
}
 802499c:	46bd      	mov	sp, r7
 802499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80249a2:	4770      	bx	lr
 80249a4:	58001000 	.word	0x58001000

080249a8 <XMC_FLASH_DisableDoubleBitErrorTrap>:
 *
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_FLASH_DisableDoubleBitErrorTrap(void)
{
 80249a8:	b480      	push	{r7}
 80249aa:	af00      	add	r7, sp, #0
  FLASH0->MARP |= FLASH_MARP_TRAPDIS_Msk;
 80249ac:	4907      	ldr	r1, [pc, #28]	; (80249cc <XMC_FLASH_DisableDoubleBitErrorTrap+0x24>)
 80249ae:	4b07      	ldr	r3, [pc, #28]	; (80249cc <XMC_FLASH_DisableDoubleBitErrorTrap+0x24>)
 80249b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80249b4:	3318      	adds	r3, #24
 80249b6:	681b      	ldr	r3, [r3, #0]
 80249b8:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80249bc:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80249c0:	3318      	adds	r3, #24
 80249c2:	601a      	str	r2, [r3, #0]
}
 80249c4:	46bd      	mov	sp, r7
 80249c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80249ca:	4770      	bx	lr
 80249cc:	58001000 	.word	0x58001000

080249d0 <XMC_FCE_InitializeSeedValue>:
 *
 * \par
 * The function sets the initial CRC (seed) value in the CRC register.
 */
__STATIC_INLINE void XMC_FCE_InitializeSeedValue(const XMC_FCE_t *const engine, uint32_t seedvalue)
{
 80249d0:	b480      	push	{r7}
 80249d2:	b083      	sub	sp, #12
 80249d4:	af00      	add	r7, sp, #0
 80249d6:	6078      	str	r0, [r7, #4]
 80249d8:	6039      	str	r1, [r7, #0]
  engine->kernel_ptr->CRC = seedvalue;
 80249da:	687b      	ldr	r3, [r7, #4]
 80249dc:	681b      	ldr	r3, [r3, #0]
 80249de:	683a      	ldr	r2, [r7, #0]
 80249e0:	619a      	str	r2, [r3, #24]
}
 80249e2:	370c      	adds	r7, #12
 80249e4:	46bd      	mov	sp, r7
 80249e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80249ea:	4770      	bx	lr

080249ec <E_EEPROM_XMC4_Init>:

  return (version);
}

E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_Init(E_EEPROM_XMC4_t *const handle)
{
 80249ec:	b580      	push	{r7, lr}
 80249ee:	b084      	sub	sp, #16
 80249f0:	af00      	add	r7, sp, #0
 80249f2:	6078      	str	r0, [r7, #4]
  uint32_t sector_count;
  E_EEPROM_XMC4_STATUS_t status ;

  XMC_ASSERT("E_EEPROM_XMC4_Init:Invalid handle Pointer", (handle != NULL));

  status = E_EEPROM_XMC4_STATUS_OK;
 80249f4:	2300      	movs	r3, #0
 80249f6:	72fb      	strb	r3, [r7, #11]
  
  if (handle->initialized == (bool)false)
 80249f8:	687b      	ldr	r3, [r7, #4]
 80249fa:	781b      	ldrb	r3, [r3, #0]
 80249fc:	f083 0301 	eor.w	r3, r3, #1
 8024a00:	b2db      	uxtb	r3, r3
 8024a02:	2b00      	cmp	r3, #0
 8024a04:	d04c      	beq.n	8024aa0 <E_EEPROM_XMC4_Init+0xb4>
  {
    e_eeprom_xmc4_data_buffer.block_cycle_count = 0U;
 8024a06:	4b29      	ldr	r3, [pc, #164]	; (8024aac <E_EEPROM_XMC4_Init+0xc0>)
 8024a08:	2200      	movs	r2, #0
 8024a0a:	605a      	str	r2, [r3, #4]
    e_eeprom_xmc4_sector_info.flash_data_addr = E_EEPROM_XMC4_EMPTY;
 8024a0c:	4b28      	ldr	r3, [pc, #160]	; (8024ab0 <E_EEPROM_XMC4_Init+0xc4>)
 8024a0e:	2200      	movs	r2, #0
 8024a10:	605a      	str	r2, [r3, #4]
  
    XMC_FLASH_SetMargin(XMC_FLASH_MARGIN_TIGHT0);
 8024a12:	2001      	movs	r0, #1
 8024a14:	f7ff ff9a 	bl	802494c <XMC_FLASH_SetMargin>
    XMC_FLASH_DisableDoubleBitErrorTrap();
 8024a18:	f7ff ffc6 	bl	80249a8 <XMC_FLASH_DisableDoubleBitErrorTrap>
  
    XMC_FCE_Enable();
 8024a1c:	f7fd fbf4 	bl	8022208 <XMC_FCE_Enable>

    /* Initialize FCE module for Hardware calculations */
    (void)XMC_FCE_Init(&e_eeprom_xmc4_fce);
 8024a20:	4824      	ldr	r0, [pc, #144]	; (8024ab4 <E_EEPROM_XMC4_Init+0xc8>)
 8024a22:	f7fd fbdb 	bl	80221dc <XMC_FCE_Init>
  
    /* Iterate all 4 sectors to find out which is the active sector having the latest data block*/
    for (sector_count = 0U; sector_count < E_EEPROM_XMC4_MAX_SECTORS ; sector_count++)
 8024a26:	2300      	movs	r3, #0
 8024a28:	60fb      	str	r3, [r7, #12]
 8024a2a:	e005      	b.n	8024a38 <E_EEPROM_XMC4_Init+0x4c>
    {
      E_EEPROM_XMC4_lInitReadSectorInfo(sector_count);
 8024a2c:	68f8      	ldr	r0, [r7, #12]
 8024a2e:	f000 f943 	bl	8024cb8 <E_EEPROM_XMC4_lInitReadSectorInfo>

    /* Initialize FCE module for Hardware calculations */
    (void)XMC_FCE_Init(&e_eeprom_xmc4_fce);
  
    /* Iterate all 4 sectors to find out which is the active sector having the latest data block*/
    for (sector_count = 0U; sector_count < E_EEPROM_XMC4_MAX_SECTORS ; sector_count++)
 8024a32:	68fb      	ldr	r3, [r7, #12]
 8024a34:	3301      	adds	r3, #1
 8024a36:	60fb      	str	r3, [r7, #12]
 8024a38:	68fb      	ldr	r3, [r7, #12]
 8024a3a:	2b03      	cmp	r3, #3
 8024a3c:	d9f6      	bls.n	8024a2c <E_EEPROM_XMC4_Init+0x40>
    {
      E_EEPROM_XMC4_lInitReadSectorInfo(sector_count);
    }  
  
    XMC_FLASH_SetMargin(XMC_FLASH_MARGIN_DEFAULT);
 8024a3e:	2000      	movs	r0, #0
 8024a40:	f7ff ff84 	bl	802494c <XMC_FLASH_SetMargin>
  
    /* Implement the OVER ERASE CHECK code here and return the status*/
  
    /* If Read was successful*/
    if (status == E_EEPROM_XMC4_STATUS_OK)
 8024a44:	7afb      	ldrb	r3, [r7, #11]
 8024a46:	2b00      	cmp	r3, #0
 8024a48:	d125      	bne.n	8024a96 <E_EEPROM_XMC4_Init+0xaa>
    {
      /* Execute erase state machine to free up the unwanted sectors and keep
       * only the sector which has latest valid block. If no valid block found then all sectors are emptied.
       */
      status = E_EEPROM_XMC4_lInitEraseStateMachine();
 8024a4a:	f000 f98b 	bl	8024d64 <E_EEPROM_XMC4_lInitEraseStateMachine>
 8024a4e:	4603      	mov	r3, r0
 8024a50:	72fb      	strb	r3, [r7, #11]
  
      /* If erase operations were successful, continue block data updates to RAM buffer */
      if (status == E_EEPROM_XMC4_STATUS_OK)
 8024a52:	7afb      	ldrb	r3, [r7, #11]
 8024a54:	2b00      	cmp	r3, #0
 8024a56:	d11e      	bne.n	8024a96 <E_EEPROM_XMC4_Init+0xaa>
      {
  
        /* If a valid latest block were not detected, we shall assume that all sectors may be empty.
         * Then make Sector-0 as current sector and next free address as Sector0 start address
         */
        if (e_eeprom_xmc4_sector_info.flash_data_addr == E_EEPROM_XMC4_EMPTY)
 8024a58:	4b15      	ldr	r3, [pc, #84]	; (8024ab0 <E_EEPROM_XMC4_Init+0xc4>)
 8024a5a:	685b      	ldr	r3, [r3, #4]
 8024a5c:	2b00      	cmp	r3, #0
 8024a5e:	d106      	bne.n	8024a6e <E_EEPROM_XMC4_Init+0x82>
        {
          e_eeprom_xmc4_sector_info.current_sector = E_EEPROM_XMC4_SECTOR_0;
 8024a60:	4b13      	ldr	r3, [pc, #76]	; (8024ab0 <E_EEPROM_XMC4_Init+0xc4>)
 8024a62:	2200      	movs	r2, #0
 8024a64:	609a      	str	r2, [r3, #8]
          e_eeprom_xmc4_sector_info.next_free_start_addr =  E_EEPROM_XMC4_SECTOR0_START_ADDR;
 8024a66:	4b12      	ldr	r3, [pc, #72]	; (8024ab0 <E_EEPROM_XMC4_Init+0xc4>)
 8024a68:	4a13      	ldr	r2, [pc, #76]	; (8024ab8 <E_EEPROM_XMC4_Init+0xcc>)
 8024a6a:	601a      	str	r2, [r3, #0]
 8024a6c:	e013      	b.n	8024a96 <E_EEPROM_XMC4_Init+0xaa>
        }
        else
        {
          /* If a valid latest block was detected, copy the valid block from flash to RAM. */
          E_EEPROM_XMC4_lCopyFlashToRam();
 8024a6e:	f000 f9d1 	bl	8024e14 <E_EEPROM_XMC4_lCopyFlashToRam>
  
          if ((e_eeprom_xmc4_sector_info.next_free_start_addr - e_eeprom_xmc4_sector_info.flash_data_addr) !=
 8024a72:	4b0f      	ldr	r3, [pc, #60]	; (8024ab0 <E_EEPROM_XMC4_Init+0xc4>)
 8024a74:	681a      	ldr	r2, [r3, #0]
 8024a76:	4b0e      	ldr	r3, [pc, #56]	; (8024ab0 <E_EEPROM_XMC4_Init+0xc4>)
 8024a78:	685b      	ldr	r3, [r3, #4]
 8024a7a:	1ad3      	subs	r3, r2, r3
 8024a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8024a80:	d001      	beq.n	8024a86 <E_EEPROM_XMC4_Init+0x9a>
              E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE)
          {
            status = E_EEPROM_XMC4_STATUS_ERROR_OLD_DATA;
 8024a82:	2301      	movs	r3, #1
 8024a84:	72fb      	strb	r3, [r7, #11]
          }
  
          if (e_eeprom_xmc4_sector_info.next_free_start_addr >= E_EEPROM_XMC4_SECTOR4_START_ADDR)
 8024a86:	4b0a      	ldr	r3, [pc, #40]	; (8024ab0 <E_EEPROM_XMC4_Init+0xc4>)
 8024a88:	681b      	ldr	r3, [r3, #0]
 8024a8a:	4a0c      	ldr	r2, [pc, #48]	; (8024abc <E_EEPROM_XMC4_Init+0xd0>)
 8024a8c:	4293      	cmp	r3, r2
 8024a8e:	d902      	bls.n	8024a96 <E_EEPROM_XMC4_Init+0xaa>
          {
            e_eeprom_xmc4_sector_info.next_free_start_addr =  E_EEPROM_XMC4_SECTOR0_START_ADDR;
 8024a90:	4b07      	ldr	r3, [pc, #28]	; (8024ab0 <E_EEPROM_XMC4_Init+0xc4>)
 8024a92:	4a09      	ldr	r2, [pc, #36]	; (8024ab8 <E_EEPROM_XMC4_Init+0xcc>)
 8024a94:	601a      	str	r2, [r3, #0]
  
        }
      }
    }

    XMC_FLASH_EnableDoubleBitErrorTrap();
 8024a96:	f7ff ff73 	bl	8024980 <XMC_FLASH_EnableDoubleBitErrorTrap>

    handle->initialized = (bool)true;
 8024a9a:	687b      	ldr	r3, [r7, #4]
 8024a9c:	2201      	movs	r2, #1
 8024a9e:	701a      	strb	r2, [r3, #0]
  }

  return (status);
 8024aa0:	7afb      	ldrb	r3, [r7, #11]
}
 8024aa2:	4618      	mov	r0, r3
 8024aa4:	3710      	adds	r7, #16
 8024aa6:	46bd      	mov	sp, r7
 8024aa8:	bd80      	pop	{r7, pc}
 8024aaa:	bf00      	nop
 8024aac:	1ffe8b98 	.word	0x1ffe8b98
 8024ab0:	1ffe8a20 	.word	0x1ffe8a20
 8024ab4:	0802a330 	.word	0x0802a330
 8024ab8:	0c010000 	.word	0x0c010000
 8024abc:	0c01ffff 	.word	0x0c01ffff

08024ac0 <E_EEPROM_XMC4_WriteArray>:



/* Update a set of bytes to RAM buffer*/
bool E_EEPROM_XMC4_WriteArray(const uint16_t offset_address, const uint8_t *const data, const uint16_t length)
{
 8024ac0:	b580      	push	{r7, lr}
 8024ac2:	b086      	sub	sp, #24
 8024ac4:	af00      	add	r7, sp, #0
 8024ac6:	4603      	mov	r3, r0
 8024ac8:	6039      	str	r1, [r7, #0]
 8024aca:	80fb      	strh	r3, [r7, #6]
 8024acc:	4613      	mov	r3, r2
 8024ace:	80bb      	strh	r3, [r7, #4]
  bool status;

  XMC_ASSERT("E_EEPROM_XMC4_WriteArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA_BLOCK_SIZE));
  XMC_ASSERT("E_EEPROM_XMC4_WriteArray: Wrong length", ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE));

  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;
 8024ad0:	88fb      	ldrh	r3, [r7, #6]
 8024ad2:	3308      	adds	r3, #8
 8024ad4:	4a12      	ldr	r2, [pc, #72]	; (8024b20 <E_EEPROM_XMC4_WriteArray+0x60>)
 8024ad6:	4413      	add	r3, r2
 8024ad8:	613b      	str	r3, [r7, #16]
  status = (memcmp(address_ptr, data, length) != 0);
 8024ada:	88bb      	ldrh	r3, [r7, #4]
 8024adc:	6938      	ldr	r0, [r7, #16]
 8024ade:	6839      	ldr	r1, [r7, #0]
 8024ae0:	461a      	mov	r2, r3
 8024ae2:	f005 f963 	bl	8029dac <memcmp>
 8024ae6:	4603      	mov	r3, r0
 8024ae8:	2b00      	cmp	r3, #0
 8024aea:	bf14      	ite	ne
 8024aec:	2301      	movne	r3, #1
 8024aee:	2300      	moveq	r3, #0
 8024af0:	73fb      	strb	r3, [r7, #15]

  for (i = 0U; i < length; i++)
 8024af2:	2300      	movs	r3, #0
 8024af4:	82fb      	strh	r3, [r7, #22]
 8024af6:	e00a      	b.n	8024b0e <E_EEPROM_XMC4_WriteArray+0x4e>
  {
      *(address_ptr + i) = *(data + i);
 8024af8:	8afb      	ldrh	r3, [r7, #22]
 8024afa:	693a      	ldr	r2, [r7, #16]
 8024afc:	4413      	add	r3, r2
 8024afe:	8afa      	ldrh	r2, [r7, #22]
 8024b00:	6839      	ldr	r1, [r7, #0]
 8024b02:	440a      	add	r2, r1
 8024b04:	7812      	ldrb	r2, [r2, #0]
 8024b06:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("E_EEPROM_XMC4_WriteArray: Wrong length", ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE));

  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;
  status = (memcmp(address_ptr, data, length) != 0);

  for (i = 0U; i < length; i++)
 8024b08:	8afb      	ldrh	r3, [r7, #22]
 8024b0a:	3301      	adds	r3, #1
 8024b0c:	82fb      	strh	r3, [r7, #22]
 8024b0e:	8afa      	ldrh	r2, [r7, #22]
 8024b10:	88bb      	ldrh	r3, [r7, #4]
 8024b12:	429a      	cmp	r2, r3
 8024b14:	d3f0      	bcc.n	8024af8 <E_EEPROM_XMC4_WriteArray+0x38>
  {
      *(address_ptr + i) = *(data + i);
  }

  return status;
 8024b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8024b18:	4618      	mov	r0, r3
 8024b1a:	3718      	adds	r7, #24
 8024b1c:	46bd      	mov	sp, r7
 8024b1e:	bd80      	pop	{r7, pc}
 8024b20:	1ffe8b98 	.word	0x1ffe8b98

08024b24 <E_EEPROM_XMC4_ReadArray>:



/* Read a set of bytes from RAM Buffer */
void E_EEPROM_XMC4_ReadArray(const uint16_t offset_address, uint8_t *const data, const uint16_t length)
{
 8024b24:	b480      	push	{r7}
 8024b26:	b085      	sub	sp, #20
 8024b28:	af00      	add	r7, sp, #0
 8024b2a:	4603      	mov	r3, r0
 8024b2c:	6039      	str	r1, [r7, #0]
 8024b2e:	80fb      	strh	r3, [r7, #6]
 8024b30:	4613      	mov	r3, r2
 8024b32:	80bb      	strh	r3, [r7, #4]
  uint16_t i;
  uint8_t  *address_ptr;
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA_BLOCK_SIZE));
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong length", ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE));
  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;
 8024b34:	88fb      	ldrh	r3, [r7, #6]
 8024b36:	3308      	adds	r3, #8
 8024b38:	4a0c      	ldr	r2, [pc, #48]	; (8024b6c <E_EEPROM_XMC4_ReadArray+0x48>)
 8024b3a:	4413      	add	r3, r2
 8024b3c:	60bb      	str	r3, [r7, #8]

  for (i=0U; i<length; i++)
 8024b3e:	2300      	movs	r3, #0
 8024b40:	81fb      	strh	r3, [r7, #14]
 8024b42:	e00a      	b.n	8024b5a <E_EEPROM_XMC4_ReadArray+0x36>
  {
    *(data + i) = *(address_ptr + i);
 8024b44:	89fb      	ldrh	r3, [r7, #14]
 8024b46:	683a      	ldr	r2, [r7, #0]
 8024b48:	4413      	add	r3, r2
 8024b4a:	89fa      	ldrh	r2, [r7, #14]
 8024b4c:	68b9      	ldr	r1, [r7, #8]
 8024b4e:	440a      	add	r2, r1
 8024b50:	7812      	ldrb	r2, [r2, #0]
 8024b52:	701a      	strb	r2, [r3, #0]
  uint8_t  *address_ptr;
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong offset address", (offset_address  < E_EEPROM_XMC4_DATA_BLOCK_SIZE));
  XMC_ASSERT("E_EEPROM_XMC4_ReadArray: Wrong length", ((offset_address + length)  < E_EEPROM_XMC4_DATA_BLOCK_SIZE));
  address_ptr = (uint8_t*)(void*)(&e_eeprom_xmc4_data_buffer.eeprom_data) + (uint32_t)offset_address;

  for (i=0U; i<length; i++)
 8024b54:	89fb      	ldrh	r3, [r7, #14]
 8024b56:	3301      	adds	r3, #1
 8024b58:	81fb      	strh	r3, [r7, #14]
 8024b5a:	89fa      	ldrh	r2, [r7, #14]
 8024b5c:	88bb      	ldrh	r3, [r7, #4]
 8024b5e:	429a      	cmp	r2, r3
 8024b60:	d3f0      	bcc.n	8024b44 <E_EEPROM_XMC4_ReadArray+0x20>
  {
    *(data + i) = *(address_ptr + i);
  }
}
 8024b62:	3714      	adds	r7, #20
 8024b64:	46bd      	mov	sp, r7
 8024b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b6a:	4770      	bx	lr
 8024b6c:	1ffe8b98 	.word	0x1ffe8b98

08024b70 <E_EEPROM_XMC4_UpdateFlashContents>:



/* Copy data blocks from RAM to FLASH */
E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_UpdateFlashContents(void)
{
 8024b70:	b580      	push	{r7, lr}
 8024b72:	b082      	sub	sp, #8
 8024b74:	af00      	add	r7, sp, #0
  E_EEPROM_XMC4_STATUS_t status;
  uint32_t sector_start_addr;

  status = E_EEPROM_XMC4_STATUS_OK;
 8024b76:	2300      	movs	r3, #0
 8024b78:	71fb      	strb	r3, [r7, #7]

  /* Calculate the starting address of the active sector from where the first write started for the current cycle*/
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR +
                     (E_EEPROM_XMC4_SECTOR_SIZE * e_eeprom_xmc4_sector_info.current_sector);
 8024b7a:	4b22      	ldr	r3, [pc, #136]	; (8024c04 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8024b7c:	689b      	ldr	r3, [r3, #8]
  uint32_t sector_start_addr;

  status = E_EEPROM_XMC4_STATUS_OK;

  /* Calculate the starting address of the active sector from where the first write started for the current cycle*/
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR +
 8024b7e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8024b82:	3304      	adds	r3, #4
 8024b84:	039b      	lsls	r3, r3, #14
 8024b86:	603b      	str	r3, [r7, #0]
                     (E_EEPROM_XMC4_SECTOR_SIZE * e_eeprom_xmc4_sector_info.current_sector);

  /* If the next free address crosses current active sector starting address, then all the sectors are fully written*/
  if ((e_eeprom_xmc4_sector_info.next_free_start_addr == sector_start_addr) &&
 8024b88:	4b1e      	ldr	r3, [pc, #120]	; (8024c04 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8024b8a:	681a      	ldr	r2, [r3, #0]
 8024b8c:	683b      	ldr	r3, [r7, #0]
 8024b8e:	429a      	cmp	r2, r3
 8024b90:	d111      	bne.n	8024bb6 <E_EEPROM_XMC4_UpdateFlashContents+0x46>
     (e_eeprom_xmc4_data_buffer.block_cycle_count != 0U))
 8024b92:	4b1d      	ldr	r3, [pc, #116]	; (8024c08 <E_EEPROM_XMC4_UpdateFlashContents+0x98>)
 8024b94:	685b      	ldr	r3, [r3, #4]
  /* Calculate the starting address of the active sector from where the first write started for the current cycle*/
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR +
                     (E_EEPROM_XMC4_SECTOR_SIZE * e_eeprom_xmc4_sector_info.current_sector);

  /* If the next free address crosses current active sector starting address, then all the sectors are fully written*/
  if ((e_eeprom_xmc4_sector_info.next_free_start_addr == sector_start_addr) &&
 8024b96:	2b00      	cmp	r3, #0
 8024b98:	d00d      	beq.n	8024bb6 <E_EEPROM_XMC4_UpdateFlashContents+0x46>
     (e_eeprom_xmc4_data_buffer.block_cycle_count != 0U))
  {
    /* Update the current sector to the latest sector on which the last write was executed. */
    e_eeprom_xmc4_sector_info.current_sector =  ((e_eeprom_xmc4_sector_info.flash_data_addr &
 8024b9a:	4b1a      	ldr	r3, [pc, #104]	; (8024c04 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8024b9c:	685b      	ldr	r3, [r3, #4]
 8024b9e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
                                                E_EEPROM_XMC4_SECTOR_POSITION_MASK) >>
 8024ba2:	0b9b      	lsrs	r3, r3, #14
  /* If the next free address crosses current active sector starting address, then all the sectors are fully written*/
  if ((e_eeprom_xmc4_sector_info.next_free_start_addr == sector_start_addr) &&
     (e_eeprom_xmc4_data_buffer.block_cycle_count != 0U))
  {
    /* Update the current sector to the latest sector on which the last write was executed. */
    e_eeprom_xmc4_sector_info.current_sector =  ((e_eeprom_xmc4_sector_info.flash_data_addr &
 8024ba4:	4a17      	ldr	r2, [pc, #92]	; (8024c04 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8024ba6:	6093      	str	r3, [r2, #8]
                                                E_EEPROM_XMC4_SECTOR_POSITION_MASK) >>
                                                E_EEPROM_XMC4_SECTOR_POSITION);

    /* Mark all the sectors as filled with data */
    e_eeprom_xmc4_sector_info.erase_state = E_EEPROM_XMC4_ALL_SECTORS_FILLED ;
 8024ba8:	4b16      	ldr	r3, [pc, #88]	; (8024c04 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8024baa:	220f      	movs	r2, #15
 8024bac:	60da      	str	r2, [r3, #12]

    /* Execute erase state machine to free up the unwanted sectors and keep only the sector which has latest block*/
    status = E_EEPROM_XMC4_lInitEraseStateMachine();
 8024bae:	f000 f8d9 	bl	8024d64 <E_EEPROM_XMC4_lInitEraseStateMachine>
 8024bb2:	4603      	mov	r3, r0
 8024bb4:	71fb      	strb	r3, [r7, #7]
  }

  if (status ==  E_EEPROM_XMC4_STATUS_OK)
 8024bb6:	79fb      	ldrb	r3, [r7, #7]
 8024bb8:	2b00      	cmp	r3, #0
 8024bba:	d11d      	bne.n	8024bf8 <E_EEPROM_XMC4_UpdateFlashContents+0x88>
  {
    e_eeprom_xmc4_data_buffer.block_cycle_count++;
 8024bbc:	4b12      	ldr	r3, [pc, #72]	; (8024c08 <E_EEPROM_XMC4_UpdateFlashContents+0x98>)
 8024bbe:	685b      	ldr	r3, [r3, #4]
 8024bc0:	3301      	adds	r3, #1
 8024bc2:	4a11      	ldr	r2, [pc, #68]	; (8024c08 <E_EEPROM_XMC4_UpdateFlashContents+0x98>)
 8024bc4:	6053      	str	r3, [r2, #4]

    status = E_EEPROM_XMC4_lWriteToFlash();
 8024bc6:	f000 f839 	bl	8024c3c <E_EEPROM_XMC4_lWriteToFlash>
 8024bca:	4603      	mov	r3, r0
 8024bcc:	71fb      	strb	r3, [r7, #7]

    /* If the flash write succeeds, update the latest flash data location in RAM for reference */
    if (status == E_EEPROM_XMC4_STATUS_OK)
 8024bce:	79fb      	ldrb	r3, [r7, #7]
 8024bd0:	2b00      	cmp	r3, #0
 8024bd2:	d103      	bne.n	8024bdc <E_EEPROM_XMC4_UpdateFlashContents+0x6c>
    {
      e_eeprom_xmc4_sector_info.flash_data_addr = e_eeprom_xmc4_sector_info.next_free_start_addr;
 8024bd4:	4b0b      	ldr	r3, [pc, #44]	; (8024c04 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8024bd6:	681b      	ldr	r3, [r3, #0]
 8024bd8:	4a0a      	ldr	r2, [pc, #40]	; (8024c04 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8024bda:	6053      	str	r3, [r2, #4]
    }

    /* Update the next free address to write the new data block*/
    e_eeprom_xmc4_sector_info.next_free_start_addr += E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 8024bdc:	4b09      	ldr	r3, [pc, #36]	; (8024c04 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8024bde:	681b      	ldr	r3, [r3, #0]
 8024be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8024be4:	4a07      	ldr	r2, [pc, #28]	; (8024c04 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8024be6:	6013      	str	r3, [r2, #0]

    /* If the next free address crosses 3rd sector end address relocate the address to 0th sector starting address*/
    if (e_eeprom_xmc4_sector_info.next_free_start_addr >= E_EEPROM_XMC4_SECTOR4_START_ADDR)
 8024be8:	4b06      	ldr	r3, [pc, #24]	; (8024c04 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8024bea:	681b      	ldr	r3, [r3, #0]
 8024bec:	4a07      	ldr	r2, [pc, #28]	; (8024c0c <E_EEPROM_XMC4_UpdateFlashContents+0x9c>)
 8024bee:	4293      	cmp	r3, r2
 8024bf0:	d902      	bls.n	8024bf8 <E_EEPROM_XMC4_UpdateFlashContents+0x88>
    {
      e_eeprom_xmc4_sector_info.next_free_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR;
 8024bf2:	4b04      	ldr	r3, [pc, #16]	; (8024c04 <E_EEPROM_XMC4_UpdateFlashContents+0x94>)
 8024bf4:	4a06      	ldr	r2, [pc, #24]	; (8024c10 <E_EEPROM_XMC4_UpdateFlashContents+0xa0>)
 8024bf6:	601a      	str	r2, [r3, #0]
    }
  }

  return (status);
 8024bf8:	79fb      	ldrb	r3, [r7, #7]
}
 8024bfa:	4618      	mov	r0, r3
 8024bfc:	3708      	adds	r7, #8
 8024bfe:	46bd      	mov	sp, r7
 8024c00:	bd80      	pop	{r7, pc}
 8024c02:	bf00      	nop
 8024c04:	1ffe8a20 	.word	0x1ffe8a20
 8024c08:	1ffe8b98 	.word	0x1ffe8b98
 8024c0c:	0c01ffff 	.word	0x0c01ffff
 8024c10:	0c010000 	.word	0x0c010000

08024c14 <E_EEPROM_XMC4_IsFlashEmpty>:


/* Check the availability data in the flash emulated EEPROM area */
bool E_EEPROM_XMC4_IsFlashEmpty(void)
{
 8024c14:	b480      	push	{r7}
 8024c16:	b083      	sub	sp, #12
 8024c18:	af00      	add	r7, sp, #0
  bool status = false;
 8024c1a:	2300      	movs	r3, #0
 8024c1c:	71fb      	strb	r3, [r7, #7]

  /* If data available flash_data_addr will have a valid address*/
  if (e_eeprom_xmc4_sector_info.flash_data_addr == 0U)
 8024c1e:	4b06      	ldr	r3, [pc, #24]	; (8024c38 <E_EEPROM_XMC4_IsFlashEmpty+0x24>)
 8024c20:	685b      	ldr	r3, [r3, #4]
 8024c22:	2b00      	cmp	r3, #0
 8024c24:	d101      	bne.n	8024c2a <E_EEPROM_XMC4_IsFlashEmpty+0x16>
  {
    status = true;
 8024c26:	2301      	movs	r3, #1
 8024c28:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8024c2a:	79fb      	ldrb	r3, [r7, #7]
}
 8024c2c:	4618      	mov	r0, r3
 8024c2e:	370c      	adds	r7, #12
 8024c30:	46bd      	mov	sp, r7
 8024c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024c36:	4770      	bx	lr
 8024c38:	1ffe8a20 	.word	0x1ffe8a20

08024c3c <E_EEPROM_XMC4_lWriteToFlash>:
 * LOCAL ROUTINES
 ********************************************************************************************************************/

/* Local function to program data blocks from RAM into FLASH */
static E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_lWriteToFlash(void)
{
 8024c3c:	b580      	push	{r7, lr}
 8024c3e:	b084      	sub	sp, #16
 8024c40:	af00      	add	r7, sp, #0
  uint32_t *flash_addr_ptr;
  uint32_t *ram_addr_ptr;
  uint32_t  page_index;
  E_EEPROM_XMC4_STATUS_t status;

  status = E_EEPROM_XMC4_STATUS_OK;
 8024c42:	2300      	movs	r3, #0
 8024c44:	70fb      	strb	r3, [r7, #3]
  flash_addr_ptr = (uint32_t*)e_eeprom_xmc4_sector_info.next_free_start_addr;
 8024c46:	4b18      	ldr	r3, [pc, #96]	; (8024ca8 <E_EEPROM_XMC4_lWriteToFlash+0x6c>)
 8024c48:	681b      	ldr	r3, [r3, #0]
 8024c4a:	60fb      	str	r3, [r7, #12]
  ram_addr_ptr   = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;
 8024c4c:	4b17      	ldr	r3, [pc, #92]	; (8024cac <E_EEPROM_XMC4_lWriteToFlash+0x70>)
 8024c4e:	60bb      	str	r3, [r7, #8]

  e_eeprom_xmc4_data_buffer.crc = E_EEPROM_XMC4_lCalculateCRC((uint32_t*)(void*)
 8024c50:	4817      	ldr	r0, [pc, #92]	; (8024cb0 <E_EEPROM_XMC4_lWriteToFlash+0x74>)
 8024c52:	f000 f8c7 	bl	8024de4 <E_EEPROM_XMC4_lCalculateCRC>
 8024c56:	4602      	mov	r2, r0
 8024c58:	4b14      	ldr	r3, [pc, #80]	; (8024cac <E_EEPROM_XMC4_lWriteToFlash+0x70>)
 8024c5a:	601a      	str	r2, [r3, #0]
                                                             (&(e_eeprom_xmc4_data_buffer.block_cycle_count)));

  for (page_index = 0U ; page_index < E_EEPROM_XMC4_MAX_PAGES; page_index++)
 8024c5c:	2300      	movs	r3, #0
 8024c5e:	607b      	str	r3, [r7, #4]
 8024c60:	e01a      	b.n	8024c98 <E_EEPROM_XMC4_lWriteToFlash+0x5c>
  {
    XMC_FLASH_ClearStatus();
 8024c62:	f7fb fae3 	bl	802022c <XMC_FLASH_ClearStatus>

    XMC_FLASH_ProgramPage(flash_addr_ptr,ram_addr_ptr);
 8024c66:	68f8      	ldr	r0, [r7, #12]
 8024c68:	68b9      	ldr	r1, [r7, #8]
 8024c6a:	f7fb faf3 	bl	8020254 <XMC_FLASH_ProgramPage>

    if ((XMC_FLASH_GetStatus() & (uint32_t)(XMC_FLASH_STATUS_VERIFY_ERROR | XMC_FLASH_STATUS_OPERATION_ERROR)) != 0)
 8024c6e:	f7fb fae3 	bl	8020238 <XMC_FLASH_GetStatus>
 8024c72:	4602      	mov	r2, r0
 8024c74:	4b0f      	ldr	r3, [pc, #60]	; (8024cb4 <E_EEPROM_XMC4_lWriteToFlash+0x78>)
 8024c76:	4013      	ands	r3, r2
 8024c78:	2b00      	cmp	r3, #0
 8024c7a:	d002      	beq.n	8024c82 <E_EEPROM_XMC4_lWriteToFlash+0x46>
    {
      status = E_EEPROM_XMC4_STATUS_WRITE_ERROR;
 8024c7c:	2303      	movs	r3, #3
 8024c7e:	70fb      	strb	r3, [r7, #3]
      break;
 8024c80:	e00d      	b.n	8024c9e <E_EEPROM_XMC4_lWriteToFlash+0x62>
    }
    ram_addr_ptr   += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
 8024c82:	68bb      	ldr	r3, [r7, #8]
 8024c84:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8024c88:	60bb      	str	r3, [r7, #8]
    flash_addr_ptr += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
 8024c8a:	68fb      	ldr	r3, [r7, #12]
 8024c8c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8024c90:	60fb      	str	r3, [r7, #12]
  ram_addr_ptr   = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;

  e_eeprom_xmc4_data_buffer.crc = E_EEPROM_XMC4_lCalculateCRC((uint32_t*)(void*)
                                                             (&(e_eeprom_xmc4_data_buffer.block_cycle_count)));

  for (page_index = 0U ; page_index < E_EEPROM_XMC4_MAX_PAGES; page_index++)
 8024c92:	687b      	ldr	r3, [r7, #4]
 8024c94:	3301      	adds	r3, #1
 8024c96:	607b      	str	r3, [r7, #4]
 8024c98:	687b      	ldr	r3, [r7, #4]
 8024c9a:	2b0f      	cmp	r3, #15
 8024c9c:	d9e1      	bls.n	8024c62 <E_EEPROM_XMC4_lWriteToFlash+0x26>
    }
    ram_addr_ptr   += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
    flash_addr_ptr += E_EEPROM_XMC4_MIN_WORDS_PER_PAGE ;
  }

  return (status);
 8024c9e:	78fb      	ldrb	r3, [r7, #3]
}
 8024ca0:	4618      	mov	r0, r3
 8024ca2:	3710      	adds	r7, #16
 8024ca4:	46bd      	mov	sp, r7
 8024ca6:	bd80      	pop	{r7, pc}
 8024ca8:	1ffe8a20 	.word	0x1ffe8a20
 8024cac:	1ffe8b98 	.word	0x1ffe8b98
 8024cb0:	1ffe8b9c 	.word	0x1ffe8b9c
 8024cb4:	80000100 	.word	0x80000100

08024cb8 <E_EEPROM_XMC4_lInitReadSectorInfo>:



static void E_EEPROM_XMC4_lInitReadSectorInfo(const uint32_t sector)
{
 8024cb8:	b580      	push	{r7, lr}
 8024cba:	b08a      	sub	sp, #40	; 0x28
 8024cbc:	af00      	add	r7, sp, #0
 8024cbe:	6078      	str	r0, [r7, #4]
  uint32_t block_cycle_count;
  uint32_t written_crc;
  uint32_t calculated_crc;

  /* Initialize starting address and last block address of the sector. */
  sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR + (E_EEPROM_XMC4_SECTOR_SIZE * (uint32_t)sector);
 8024cc0:	687b      	ldr	r3, [r7, #4]
 8024cc2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8024cc6:	3304      	adds	r3, #4
 8024cc8:	039b      	lsls	r3, r3, #14
 8024cca:	61fb      	str	r3, [r7, #28]
  block_read_addr = (sector_start_addr + E_EEPROM_XMC4_SECTOR_SIZE) - E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 8024ccc:	69fb      	ldr	r3, [r7, #28]
 8024cce:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8024cd2:	627b      	str	r3, [r7, #36]	; 0x24
  free_block_addr = E_EEPROM_XMC4_EMPTY;
 8024cd4:	2300      	movs	r3, #0
 8024cd6:	623b      	str	r3, [r7, #32]

  do
  {
    /* Read first 32 bit data from the block which indicates the block cycle counter. */
    data_ptr = (uint32_t*)block_read_addr;
 8024cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024cda:	61bb      	str	r3, [r7, #24]
    block_cycle_count = *(data_ptr + E_EEPROM_XMC4_BCC_OFFSET);
 8024cdc:	69bb      	ldr	r3, [r7, #24]
 8024cde:	685b      	ldr	r3, [r3, #4]
 8024ce0:	617b      	str	r3, [r7, #20]

    /* Check if block cycle count is a non zero value*/
    if (block_cycle_count != E_EEPROM_XMC4_EMPTY)
 8024ce2:	697b      	ldr	r3, [r7, #20]
 8024ce4:	2b00      	cmp	r3, #0
 8024ce6:	d02e      	beq.n	8024d46 <E_EEPROM_XMC4_lInitReadSectorInfo+0x8e>
    {
      /* Mark sector as non-empty sector*/
      e_eeprom_xmc4_sector_info.erase_state |= ((uint32_t)1U << sector);
 8024ce8:	4b1c      	ldr	r3, [pc, #112]	; (8024d5c <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 8024cea:	68da      	ldr	r2, [r3, #12]
 8024cec:	687b      	ldr	r3, [r7, #4]
 8024cee:	2101      	movs	r1, #1
 8024cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8024cf4:	4313      	orrs	r3, r2
 8024cf6:	4a19      	ldr	r2, [pc, #100]	; (8024d5c <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 8024cf8:	60d3      	str	r3, [r2, #12]

      /* If this is the first non empty block identified, then store the address as next free address */
      if (free_block_addr == E_EEPROM_XMC4_EMPTY)
 8024cfa:	6a3b      	ldr	r3, [r7, #32]
 8024cfc:	2b00      	cmp	r3, #0
 8024cfe:	d103      	bne.n	8024d08 <E_EEPROM_XMC4_lInitReadSectorInfo+0x50>
      {
        free_block_addr = block_read_addr + E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 8024d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8024d06:	623b      	str	r3, [r7, #32]
      }

      /* Read the second 32bit data which indicates the CRC */
      written_crc = *data_ptr;
 8024d08:	69bb      	ldr	r3, [r7, #24]
 8024d0a:	681b      	ldr	r3, [r3, #0]
 8024d0c:	613b      	str	r3, [r7, #16]
      /* Calculate the CRC for the written data in flash (3rd word to the last word)*/
      calculated_crc = E_EEPROM_XMC4_lCalculateCRC(data_ptr + E_EEPROM_XMC4_BCC_OFFSET);
 8024d0e:	69bb      	ldr	r3, [r7, #24]
 8024d10:	3304      	adds	r3, #4
 8024d12:	4618      	mov	r0, r3
 8024d14:	f000 f866 	bl	8024de4 <E_EEPROM_XMC4_lCalculateCRC>
 8024d18:	60f8      	str	r0, [r7, #12]

      if (calculated_crc == written_crc)
 8024d1a:	68fa      	ldr	r2, [r7, #12]
 8024d1c:	693b      	ldr	r3, [r7, #16]
 8024d1e:	429a      	cmp	r2, r3
 8024d20:	d111      	bne.n	8024d46 <E_EEPROM_XMC4_lInitReadSectorInfo+0x8e>
      {
        /* If both CRC matches and the current block cycle counter is greater than the previous recorded value,
         * Update the Data structure with the current block as the "latest" one and the current sector as "active".
         * Exit from the function.
         */
        if (block_cycle_count > e_eeprom_xmc4_data_buffer.block_cycle_count)
 8024d22:	4b0f      	ldr	r3, [pc, #60]	; (8024d60 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa8>)
 8024d24:	685a      	ldr	r2, [r3, #4]
 8024d26:	697b      	ldr	r3, [r7, #20]
 8024d28:	429a      	cmp	r2, r3
 8024d2a:	d20c      	bcs.n	8024d46 <E_EEPROM_XMC4_lInitReadSectorInfo+0x8e>
        {
          e_eeprom_xmc4_data_buffer.block_cycle_count = block_cycle_count;
 8024d2c:	4a0c      	ldr	r2, [pc, #48]	; (8024d60 <E_EEPROM_XMC4_lInitReadSectorInfo+0xa8>)
 8024d2e:	697b      	ldr	r3, [r7, #20]
 8024d30:	6053      	str	r3, [r2, #4]
          e_eeprom_xmc4_sector_info.current_sector = sector;
 8024d32:	4a0a      	ldr	r2, [pc, #40]	; (8024d5c <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 8024d34:	687b      	ldr	r3, [r7, #4]
 8024d36:	6093      	str	r3, [r2, #8]
          e_eeprom_xmc4_sector_info.flash_data_addr = block_read_addr;
 8024d38:	4a08      	ldr	r2, [pc, #32]	; (8024d5c <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 8024d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024d3c:	6053      	str	r3, [r2, #4]
          e_eeprom_xmc4_sector_info.next_free_start_addr = free_block_addr;
 8024d3e:	4a07      	ldr	r2, [pc, #28]	; (8024d5c <E_EEPROM_XMC4_lInitReadSectorInfo+0xa4>)
 8024d40:	6a3b      	ldr	r3, [r7, #32]
 8024d42:	6013      	str	r3, [r2, #0]
          break;
 8024d44:	e007      	b.n	8024d56 <E_EEPROM_XMC4_lInitReadSectorInfo+0x9e>
        }
      }
    }
    /* Move the block read address to one block size up starting from the bottom of sector */
    block_read_addr -= E_EEPROM_XMC4_ACTUAL_FLASH_BLOCK_SIZE;
 8024d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024d48:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8024d4c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Iterate the read process until the block read address crosses sector start address or a
   * latest valid block is identified.
   */
  } while ( block_read_addr >= sector_start_addr );
 8024d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024d50:	69fb      	ldr	r3, [r7, #28]
 8024d52:	429a      	cmp	r2, r3
 8024d54:	d2c0      	bcs.n	8024cd8 <E_EEPROM_XMC4_lInitReadSectorInfo+0x20>

}
 8024d56:	3728      	adds	r7, #40	; 0x28
 8024d58:	46bd      	mov	sp, r7
 8024d5a:	bd80      	pop	{r7, pc}
 8024d5c:	1ffe8a20 	.word	0x1ffe8a20
 8024d60:	1ffe8b98 	.word	0x1ffe8b98

08024d64 <E_EEPROM_XMC4_lInitEraseStateMachine>:



static E_EEPROM_XMC4_STATUS_t E_EEPROM_XMC4_lInitEraseStateMachine(void)
{
 8024d64:	b580      	push	{r7, lr}
 8024d66:	b084      	sub	sp, #16
 8024d68:	af00      	add	r7, sp, #0
  uint32_t sector_count;
  uint32_t sector_start_addr;
  E_EEPROM_XMC4_STATUS_t status ;

  status = E_EEPROM_XMC4_STATUS_OK;
 8024d6a:	2300      	movs	r3, #0
 8024d6c:	72fb      	strb	r3, [r7, #11]
  sector_count = 0U;
 8024d6e:	2300      	movs	r3, #0
 8024d70:	60fb      	str	r3, [r7, #12]

  do
  {
    /* If the non empty sector is the current active sector, then do not erase it*/
    if (e_eeprom_xmc4_sector_info.current_sector != sector_count)
 8024d72:	4b1b      	ldr	r3, [pc, #108]	; (8024de0 <E_EEPROM_XMC4_lInitEraseStateMachine+0x7c>)
 8024d74:	689a      	ldr	r2, [r3, #8]
 8024d76:	68fb      	ldr	r3, [r7, #12]
 8024d78:	429a      	cmp	r2, r3
 8024d7a:	d026      	beq.n	8024dca <E_EEPROM_XMC4_lInitEraseStateMachine+0x66>
    {
      /* Check if the sector was previously identified as non-empty. i.e It is having old data or corrupted data
       * If so erase the sector and mark it as erase attempted.
       */
      if ((e_eeprom_xmc4_sector_info.erase_state >> sector_count) & ((uint32_t)1U))
 8024d7c:	4b18      	ldr	r3, [pc, #96]	; (8024de0 <E_EEPROM_XMC4_lInitEraseStateMachine+0x7c>)
 8024d7e:	68da      	ldr	r2, [r3, #12]
 8024d80:	68fb      	ldr	r3, [r7, #12]
 8024d82:	fa22 f303 	lsr.w	r3, r2, r3
 8024d86:	f003 0301 	and.w	r3, r3, #1
 8024d8a:	2b00      	cmp	r3, #0
 8024d8c:	d01d      	beq.n	8024dca <E_EEPROM_XMC4_lInitEraseStateMachine+0x66>
      {
        sector_start_addr = E_EEPROM_XMC4_SECTOR0_START_ADDR + (E_EEPROM_XMC4_SECTOR_SIZE * (uint32_t)sector_count);
 8024d8e:	68fb      	ldr	r3, [r7, #12]
 8024d90:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8024d94:	3304      	adds	r3, #4
 8024d96:	039b      	lsls	r3, r3, #14
 8024d98:	607b      	str	r3, [r7, #4]

        XMC_FLASH_ClearStatus();
 8024d9a:	f7fb fa47 	bl	802022c <XMC_FLASH_ClearStatus>
        XMC_FLASH_EraseSector((uint32_t*)sector_start_addr);
 8024d9e:	687b      	ldr	r3, [r7, #4]
 8024da0:	4618      	mov	r0, r3
 8024da2:	f7fb fa8b 	bl	80202bc <XMC_FLASH_EraseSector>

        if (XMC_FLASH_GetStatus() != (uint32_t)XMC_FLASH_STATUS_ERASE_STATE)
 8024da6:	f7fb fa47 	bl	8020238 <XMC_FLASH_GetStatus>
 8024daa:	4603      	mov	r3, r0
 8024dac:	2b20      	cmp	r3, #32
 8024dae:	d002      	beq.n	8024db6 <E_EEPROM_XMC4_lInitEraseStateMachine+0x52>
        {
          status = E_EEPROM_XMC4_STATUS_ERASE_ERROR;
 8024db0:	2304      	movs	r3, #4
 8024db2:	72fb      	strb	r3, [r7, #11]
          break;
 8024db4:	e00f      	b.n	8024dd6 <E_EEPROM_XMC4_lInitEraseStateMachine+0x72>
        }
        e_eeprom_xmc4_sector_info.erase_state &= ~(((uint32_t)1U << sector_count));
 8024db6:	4b0a      	ldr	r3, [pc, #40]	; (8024de0 <E_EEPROM_XMC4_lInitEraseStateMachine+0x7c>)
 8024db8:	68da      	ldr	r2, [r3, #12]
 8024dba:	68fb      	ldr	r3, [r7, #12]
 8024dbc:	2101      	movs	r1, #1
 8024dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8024dc2:	43db      	mvns	r3, r3
 8024dc4:	4013      	ands	r3, r2
 8024dc6:	4a06      	ldr	r2, [pc, #24]	; (8024de0 <E_EEPROM_XMC4_lInitEraseStateMachine+0x7c>)
 8024dc8:	60d3      	str	r3, [r2, #12]
      }
    }
    sector_count++;
 8024dca:	68fb      	ldr	r3, [r7, #12]
 8024dcc:	3301      	adds	r3, #1
 8024dce:	60fb      	str	r3, [r7, #12]
    /* Iterate the erase loop until all 4 sectors are checked. Break and return failure on any sector erase errors.*/
  } while ( sector_count < E_EEPROM_XMC4_MAX_SECTORS );
 8024dd0:	68fb      	ldr	r3, [r7, #12]
 8024dd2:	2b03      	cmp	r3, #3
 8024dd4:	d9cd      	bls.n	8024d72 <E_EEPROM_XMC4_lInitEraseStateMachine+0xe>

  return (status);
 8024dd6:	7afb      	ldrb	r3, [r7, #11]
}
 8024dd8:	4618      	mov	r0, r3
 8024dda:	3710      	adds	r7, #16
 8024ddc:	46bd      	mov	sp, r7
 8024dde:	bd80      	pop	{r7, pc}
 8024de0:	1ffe8a20 	.word	0x1ffe8a20

08024de4 <E_EEPROM_XMC4_lCalculateCRC>:

/* Local function to CRC */
static uint32_t E_EEPROM_XMC4_lCalculateCRC(const uint32_t *data_start_addr)
{
 8024de4:	b580      	push	{r7, lr}
 8024de6:	b084      	sub	sp, #16
 8024de8:	af00      	add	r7, sp, #0
 8024dea:	6078      	str	r0, [r7, #4]
  uint32_t result;

  /* Reset the CRC result register before new CRC calculation */
  XMC_FCE_InitializeSeedValue(&e_eeprom_xmc4_fce, 0U);
 8024dec:	4808      	ldr	r0, [pc, #32]	; (8024e10 <E_EEPROM_XMC4_lCalculateCRC+0x2c>)
 8024dee:	2100      	movs	r1, #0
 8024df0:	f7ff fdee 	bl	80249d0 <XMC_FCE_InitializeSeedValue>

  (void)XMC_FCE_CalculateCRC32(&e_eeprom_xmc4_fce, data_start_addr, E_EEPROM_XMC4_DATA_SIZE_FOR_CRC, &result);
 8024df4:	f107 030c 	add.w	r3, r7, #12
 8024df8:	4805      	ldr	r0, [pc, #20]	; (8024e10 <E_EEPROM_XMC4_lCalculateCRC+0x2c>)
 8024dfa:	6879      	ldr	r1, [r7, #4]
 8024dfc:	f640 72fc 	movw	r2, #4092	; 0xffc
 8024e00:	f7fd fa16 	bl	8022230 <XMC_FCE_CalculateCRC32>

  return (result);
 8024e04:	68fb      	ldr	r3, [r7, #12]
}
 8024e06:	4618      	mov	r0, r3
 8024e08:	3710      	adds	r7, #16
 8024e0a:	46bd      	mov	sp, r7
 8024e0c:	bd80      	pop	{r7, pc}
 8024e0e:	bf00      	nop
 8024e10:	0802a330 	.word	0x0802a330

08024e14 <E_EEPROM_XMC4_lCopyFlashToRam>:



/* Local function to copy data blocks from FLASH to RAM */
static void E_EEPROM_XMC4_lCopyFlashToRam(void)
{
 8024e14:	b480      	push	{r7}
 8024e16:	b085      	sub	sp, #20
 8024e18:	af00      	add	r7, sp, #0
  uint32_t *flash_addr_ptr;
  uint32_t *ram_addr_ptr;
  uint32_t byte_index;

  flash_addr_ptr = (uint32_t*)e_eeprom_xmc4_sector_info.flash_data_addr;
 8024e1a:	4b0f      	ldr	r3, [pc, #60]	; (8024e58 <E_EEPROM_XMC4_lCopyFlashToRam+0x44>)
 8024e1c:	685b      	ldr	r3, [r3, #4]
 8024e1e:	60bb      	str	r3, [r7, #8]
  ram_addr_ptr = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;
 8024e20:	4b0e      	ldr	r3, [pc, #56]	; (8024e5c <E_EEPROM_XMC4_lCopyFlashToRam+0x48>)
 8024e22:	607b      	str	r3, [r7, #4]

  for(byte_index = 0U ; byte_index < E_EEPROM_XMC4_MAX_WORDS; byte_index++)
 8024e24:	2300      	movs	r3, #0
 8024e26:	60fb      	str	r3, [r7, #12]
 8024e28:	e00c      	b.n	8024e44 <E_EEPROM_XMC4_lCopyFlashToRam+0x30>
  {
    *(ram_addr_ptr + byte_index) = *(flash_addr_ptr + byte_index);
 8024e2a:	68fb      	ldr	r3, [r7, #12]
 8024e2c:	009b      	lsls	r3, r3, #2
 8024e2e:	687a      	ldr	r2, [r7, #4]
 8024e30:	4413      	add	r3, r2
 8024e32:	68fa      	ldr	r2, [r7, #12]
 8024e34:	0092      	lsls	r2, r2, #2
 8024e36:	68b9      	ldr	r1, [r7, #8]
 8024e38:	440a      	add	r2, r1
 8024e3a:	6812      	ldr	r2, [r2, #0]
 8024e3c:	601a      	str	r2, [r3, #0]
  uint32_t byte_index;

  flash_addr_ptr = (uint32_t*)e_eeprom_xmc4_sector_info.flash_data_addr;
  ram_addr_ptr = (uint32_t*)(void*)&e_eeprom_xmc4_data_buffer;

  for(byte_index = 0U ; byte_index < E_EEPROM_XMC4_MAX_WORDS; byte_index++)
 8024e3e:	68fb      	ldr	r3, [r7, #12]
 8024e40:	3301      	adds	r3, #1
 8024e42:	60fb      	str	r3, [r7, #12]
 8024e44:	68fb      	ldr	r3, [r7, #12]
 8024e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8024e4a:	d3ee      	bcc.n	8024e2a <E_EEPROM_XMC4_lCopyFlashToRam+0x16>
  {
    *(ram_addr_ptr + byte_index) = *(flash_addr_ptr + byte_index);
  }
}
 8024e4c:	3714      	adds	r7, #20
 8024e4e:	46bd      	mov	sp, r7
 8024e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e54:	4770      	bx	lr
 8024e56:	bf00      	nop
 8024e58:	1ffe8a20 	.word	0x1ffe8a20
 8024e5c:	1ffe8b98 	.word	0x1ffe8b98

08024e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8024e60:	b480      	push	{r7}
 8024e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8024e64:	4b04      	ldr	r3, [pc, #16]	; (8024e78 <__NVIC_GetPriorityGrouping+0x18>)
 8024e66:	68db      	ldr	r3, [r3, #12]
 8024e68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8024e6c:	0a1b      	lsrs	r3, r3, #8
}
 8024e6e:	4618      	mov	r0, r3
 8024e70:	46bd      	mov	sp, r7
 8024e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e76:	4770      	bx	lr
 8024e78:	e000ed00 	.word	0xe000ed00

08024e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8024e7c:	b480      	push	{r7}
 8024e7e:	b083      	sub	sp, #12
 8024e80:	af00      	add	r7, sp, #0
 8024e82:	4603      	mov	r3, r0
 8024e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8024e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024e8a:	2b00      	cmp	r3, #0
 8024e8c:	db0b      	blt.n	8024ea6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8024e8e:	4908      	ldr	r1, [pc, #32]	; (8024eb0 <__NVIC_EnableIRQ+0x34>)
 8024e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024e94:	095b      	lsrs	r3, r3, #5
 8024e96:	79fa      	ldrb	r2, [r7, #7]
 8024e98:	f002 021f 	and.w	r2, r2, #31
 8024e9c:	2001      	movs	r0, #1
 8024e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8024ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8024ea6:	370c      	adds	r7, #12
 8024ea8:	46bd      	mov	sp, r7
 8024eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024eae:	4770      	bx	lr
 8024eb0:	e000e100 	.word	0xe000e100

08024eb4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8024eb4:	b480      	push	{r7}
 8024eb6:	b083      	sub	sp, #12
 8024eb8:	af00      	add	r7, sp, #0
 8024eba:	4603      	mov	r3, r0
 8024ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8024ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024ec2:	2b00      	cmp	r3, #0
 8024ec4:	db10      	blt.n	8024ee8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8024ec6:	490b      	ldr	r1, [pc, #44]	; (8024ef4 <__NVIC_DisableIRQ+0x40>)
 8024ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024ecc:	095b      	lsrs	r3, r3, #5
 8024ece:	79fa      	ldrb	r2, [r7, #7]
 8024ed0:	f002 021f 	and.w	r2, r2, #31
 8024ed4:	2001      	movs	r0, #1
 8024ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8024eda:	3320      	adds	r3, #32
 8024edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8024ee0:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8024ee4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8024ee8:	370c      	adds	r7, #12
 8024eea:	46bd      	mov	sp, r7
 8024eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ef0:	4770      	bx	lr
 8024ef2:	bf00      	nop
 8024ef4:	e000e100 	.word	0xe000e100

08024ef8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8024ef8:	b480      	push	{r7}
 8024efa:	b083      	sub	sp, #12
 8024efc:	af00      	add	r7, sp, #0
 8024efe:	4603      	mov	r3, r0
 8024f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8024f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024f06:	2b00      	cmp	r3, #0
 8024f08:	db0c      	blt.n	8024f24 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8024f0a:	4909      	ldr	r1, [pc, #36]	; (8024f30 <__NVIC_ClearPendingIRQ+0x38>)
 8024f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024f10:	095b      	lsrs	r3, r3, #5
 8024f12:	79fa      	ldrb	r2, [r7, #7]
 8024f14:	f002 021f 	and.w	r2, r2, #31
 8024f18:	2001      	movs	r0, #1
 8024f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8024f1e:	3360      	adds	r3, #96	; 0x60
 8024f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8024f24:	370c      	adds	r7, #12
 8024f26:	46bd      	mov	sp, r7
 8024f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f2c:	4770      	bx	lr
 8024f2e:	bf00      	nop
 8024f30:	e000e100 	.word	0xe000e100

08024f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8024f34:	b480      	push	{r7}
 8024f36:	b083      	sub	sp, #12
 8024f38:	af00      	add	r7, sp, #0
 8024f3a:	4603      	mov	r3, r0
 8024f3c:	6039      	str	r1, [r7, #0]
 8024f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8024f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024f44:	2b00      	cmp	r3, #0
 8024f46:	db0a      	blt.n	8024f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8024f48:	490d      	ldr	r1, [pc, #52]	; (8024f80 <__NVIC_SetPriority+0x4c>)
 8024f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024f4e:	683a      	ldr	r2, [r7, #0]
 8024f50:	b2d2      	uxtb	r2, r2
 8024f52:	0092      	lsls	r2, r2, #2
 8024f54:	b2d2      	uxtb	r2, r2
 8024f56:	440b      	add	r3, r1
 8024f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8024f5c:	e00a      	b.n	8024f74 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8024f5e:	4909      	ldr	r1, [pc, #36]	; (8024f84 <__NVIC_SetPriority+0x50>)
 8024f60:	79fb      	ldrb	r3, [r7, #7]
 8024f62:	f003 030f 	and.w	r3, r3, #15
 8024f66:	3b04      	subs	r3, #4
 8024f68:	683a      	ldr	r2, [r7, #0]
 8024f6a:	b2d2      	uxtb	r2, r2
 8024f6c:	0092      	lsls	r2, r2, #2
 8024f6e:	b2d2      	uxtb	r2, r2
 8024f70:	440b      	add	r3, r1
 8024f72:	761a      	strb	r2, [r3, #24]
  }
}
 8024f74:	370c      	adds	r7, #12
 8024f76:	46bd      	mov	sp, r7
 8024f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f7c:	4770      	bx	lr
 8024f7e:	bf00      	nop
 8024f80:	e000e100 	.word	0xe000e100
 8024f84:	e000ed00 	.word	0xe000ed00

08024f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8024f88:	b480      	push	{r7}
 8024f8a:	b089      	sub	sp, #36	; 0x24
 8024f8c:	af00      	add	r7, sp, #0
 8024f8e:	60f8      	str	r0, [r7, #12]
 8024f90:	60b9      	str	r1, [r7, #8]
 8024f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8024f94:	68fb      	ldr	r3, [r7, #12]
 8024f96:	f003 0307 	and.w	r3, r3, #7
 8024f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8024f9c:	69fb      	ldr	r3, [r7, #28]
 8024f9e:	f1c3 0307 	rsb	r3, r3, #7
 8024fa2:	2b06      	cmp	r3, #6
 8024fa4:	bf28      	it	cs
 8024fa6:	2306      	movcs	r3, #6
 8024fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8024faa:	69fb      	ldr	r3, [r7, #28]
 8024fac:	3306      	adds	r3, #6
 8024fae:	2b06      	cmp	r3, #6
 8024fb0:	d902      	bls.n	8024fb8 <NVIC_EncodePriority+0x30>
 8024fb2:	69fb      	ldr	r3, [r7, #28]
 8024fb4:	3b01      	subs	r3, #1
 8024fb6:	e000      	b.n	8024fba <NVIC_EncodePriority+0x32>
 8024fb8:	2300      	movs	r3, #0
 8024fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8024fbc:	69bb      	ldr	r3, [r7, #24]
 8024fbe:	2201      	movs	r2, #1
 8024fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8024fc4:	1e5a      	subs	r2, r3, #1
 8024fc6:	68bb      	ldr	r3, [r7, #8]
 8024fc8:	401a      	ands	r2, r3
 8024fca:	697b      	ldr	r3, [r7, #20]
 8024fcc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8024fce:	697b      	ldr	r3, [r7, #20]
 8024fd0:	2101      	movs	r1, #1
 8024fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8024fd6:	1e59      	subs	r1, r3, #1
 8024fd8:	687b      	ldr	r3, [r7, #4]
 8024fda:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8024fdc:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8024fde:	4618      	mov	r0, r3
 8024fe0:	3724      	adds	r7, #36	; 0x24
 8024fe2:	46bd      	mov	sp, r7
 8024fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024fe8:	4770      	bx	lr
 8024fea:	bf00      	nop

08024fec <XMC_ETH_MAC_SetPortControl>:
 * - XMC4700 LQFP144 and BGA196 packages
 * - XMC4800 LQFP144 and BGA196 packages
 *
 */
__STATIC_INLINE void XMC_ETH_MAC_SetPortControl(XMC_ETH_MAC_t *const eth_mac, const XMC_ETH_MAC_PORT_CTRL_t port_ctrl)
{
 8024fec:	b480      	push	{r7}
 8024fee:	b083      	sub	sp, #12
 8024ff0:	af00      	add	r7, sp, #0
 8024ff2:	6078      	str	r0, [r7, #4]
 8024ff4:	6039      	str	r1, [r7, #0]
  XMC_UNUSED_ARG(eth_mac);
  ETH0_CON->CON = (uint32_t)port_ctrl.raw;
 8024ff6:	4a04      	ldr	r2, [pc, #16]	; (8025008 <XMC_ETH_MAC_SetPortControl+0x1c>)
 8024ff8:	683b      	ldr	r3, [r7, #0]
 8024ffa:	6013      	str	r3, [r2, #0]
}
 8024ffc:	370c      	adds	r7, #12
 8024ffe:	46bd      	mov	sp, r7
 8025000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025004:	4770      	bx	lr
 8025006:	bf00      	nop
 8025008:	50004040 	.word	0x50004040

0802500c <XMC_ETH_MAC_DisableJumboFrame>:
 *
 * \par
 * The function can be used to disable jumbo frames.
 */
__STATIC_INLINE void XMC_ETH_MAC_DisableJumboFrame(XMC_ETH_MAC_t *const eth_mac)
{
 802500c:	b480      	push	{r7}
 802500e:	b083      	sub	sp, #12
 8025010:	af00      	add	r7, sp, #0
 8025012:	6078      	str	r0, [r7, #4]
  eth_mac->regs->MAC_CONFIGURATION &= (uint32_t)~ETH_MAC_CONFIGURATION_JE_Msk;
 8025014:	687b      	ldr	r3, [r7, #4]
 8025016:	681b      	ldr	r3, [r3, #0]
 8025018:	687a      	ldr	r2, [r7, #4]
 802501a:	6812      	ldr	r2, [r2, #0]
 802501c:	6812      	ldr	r2, [r2, #0]
 802501e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8025022:	601a      	str	r2, [r3, #0]
}
 8025024:	370c      	adds	r7, #12
 8025026:	46bd      	mov	sp, r7
 8025028:	f85d 7b04 	ldr.w	r7, [sp], #4
 802502c:	4770      	bx	lr
 802502e:	bf00      	nop

08025030 <XMC_ETH_MAC_SetLink>:
 * The function sets the link speed and duplex settings.
 */
__STATIC_INLINE void XMC_ETH_MAC_SetLink(XMC_ETH_MAC_t *const eth_mac,
    XMC_ETH_LINK_SPEED_t speed,
    XMC_ETH_LINK_DUPLEX_t duplex)
{
 8025030:	b480      	push	{r7}
 8025032:	b083      	sub	sp, #12
 8025034:	af00      	add	r7, sp, #0
 8025036:	6078      	str	r0, [r7, #4]
 8025038:	460b      	mov	r3, r1
 802503a:	807b      	strh	r3, [r7, #2]
 802503c:	4613      	mov	r3, r2
 802503e:	803b      	strh	r3, [r7, #0]
  eth_mac->regs->MAC_CONFIGURATION = (eth_mac->regs->MAC_CONFIGURATION &
 8025040:	687b      	ldr	r3, [r7, #4]
 8025042:	681b      	ldr	r3, [r3, #0]
 8025044:	687a      	ldr	r2, [r7, #4]
 8025046:	6812      	ldr	r2, [r2, #0]
 8025048:	6812      	ldr	r2, [r2, #0]
 802504a:	f422 4190 	bic.w	r1, r2, #18432	; 0x4800
                                      (uint32_t)~(ETH_MAC_CONFIGURATION_DM_Msk | ETH_MAC_CONFIGURATION_FES_Msk)) |
                                     (uint32_t)speed | (uint32_t)duplex;
 802504e:	887a      	ldrh	r2, [r7, #2]
__STATIC_INLINE void XMC_ETH_MAC_SetLink(XMC_ETH_MAC_t *const eth_mac,
    XMC_ETH_LINK_SPEED_t speed,
    XMC_ETH_LINK_DUPLEX_t duplex)
{
  eth_mac->regs->MAC_CONFIGURATION = (eth_mac->regs->MAC_CONFIGURATION &
                                      (uint32_t)~(ETH_MAC_CONFIGURATION_DM_Msk | ETH_MAC_CONFIGURATION_FES_Msk)) |
 8025050:	4311      	orrs	r1, r2
                                     (uint32_t)speed | (uint32_t)duplex;
 8025052:	883a      	ldrh	r2, [r7, #0]
 8025054:	430a      	orrs	r2, r1
 */
__STATIC_INLINE void XMC_ETH_MAC_SetLink(XMC_ETH_MAC_t *const eth_mac,
    XMC_ETH_LINK_SPEED_t speed,
    XMC_ETH_LINK_DUPLEX_t duplex)
{
  eth_mac->regs->MAC_CONFIGURATION = (eth_mac->regs->MAC_CONFIGURATION &
 8025056:	601a      	str	r2, [r3, #0]
                                      (uint32_t)~(ETH_MAC_CONFIGURATION_DM_Msk | ETH_MAC_CONFIGURATION_FES_Msk)) |
                                     (uint32_t)speed | (uint32_t)duplex;
}
 8025058:	370c      	adds	r7, #12
 802505a:	46bd      	mov	sp, r7
 802505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025060:	4770      	bx	lr
 8025062:	bf00      	nop

08025064 <XMC_ETH_MAC_IsRxDescriptorOwnedByDma>:
 *
 * \par
 * The function checks if the RX descriptor is owned by the DMA.
 */
__STATIC_INLINE bool XMC_ETH_MAC_IsRxDescriptorOwnedByDma(XMC_ETH_MAC_t *const eth_mac)
{
 8025064:	b480      	push	{r7}
 8025066:	b083      	sub	sp, #12
 8025068:	af00      	add	r7, sp, #0
 802506a:	6078      	str	r0, [r7, #4]
  return ((eth_mac->rx_desc[eth_mac->rx_index].status & ETH_MAC_DMA_RDES0_OWN) != 0U);
 802506c:	687b      	ldr	r3, [r7, #4]
 802506e:	691a      	ldr	r2, [r3, #16]
 8025070:	687b      	ldr	r3, [r7, #4]
 8025072:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8025076:	015b      	lsls	r3, r3, #5
 8025078:	4413      	add	r3, r2
 802507a:	681b      	ldr	r3, [r3, #0]
 802507c:	0fdb      	lsrs	r3, r3, #31
 802507e:	b2db      	uxtb	r3, r3
}
 8025080:	4618      	mov	r0, r3
 8025082:	370c      	adds	r7, #12
 8025084:	46bd      	mov	sp, r7
 8025086:	f85d 7b04 	ldr.w	r7, [sp], #4
 802508a:	4770      	bx	lr

0802508c <XMC_ETH_MAC_IsTxDescriptorOwnedByDma>:
 *
 * \par
 * The function checks if the TX descriptor is owned by the DMA.
 */
__STATIC_INLINE bool XMC_ETH_MAC_IsTxDescriptorOwnedByDma(XMC_ETH_MAC_t *const eth_mac)
{
 802508c:	b480      	push	{r7}
 802508e:	b083      	sub	sp, #12
 8025090:	af00      	add	r7, sp, #0
 8025092:	6078      	str	r0, [r7, #4]
  return ((eth_mac->tx_desc[eth_mac->tx_index].status & ETH_MAC_DMA_TDES0_OWN) != 0U);
 8025094:	687b      	ldr	r3, [r7, #4]
 8025096:	695a      	ldr	r2, [r3, #20]
 8025098:	687b      	ldr	r3, [r7, #4]
 802509a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 802509e:	015b      	lsls	r3, r3, #5
 80250a0:	4413      	add	r3, r2
 80250a2:	681b      	ldr	r3, [r3, #0]
 80250a4:	0fdb      	lsrs	r3, r3, #31
 80250a6:	b2db      	uxtb	r3, r3
}
 80250a8:	4618      	mov	r0, r3
 80250aa:	370c      	adds	r7, #12
 80250ac:	46bd      	mov	sp, r7
 80250ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250b2:	4770      	bx	lr

080250b4 <XMC_ETH_MAC_EnableRx>:
 * The function enables the receiver state machine of the MAC and puts the
 * receive process in running state. The DMA then acquires the descriptor
 * from the receive list and processes the received frames.
 */
__STATIC_INLINE void XMC_ETH_MAC_EnableRx(XMC_ETH_MAC_t *const eth_mac)
{
 80250b4:	b480      	push	{r7}
 80250b6:	b083      	sub	sp, #12
 80250b8:	af00      	add	r7, sp, #0
 80250ba:	6078      	str	r0, [r7, #4]
  eth_mac->regs->OPERATION_MODE |= (uint32_t)ETH_OPERATION_MODE_SR_Msk;
 80250bc:	687b      	ldr	r3, [r7, #4]
 80250be:	6819      	ldr	r1, [r3, #0]
 80250c0:	687b      	ldr	r3, [r7, #4]
 80250c2:	681b      	ldr	r3, [r3, #0]
 80250c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80250c8:	3318      	adds	r3, #24
 80250ca:	681b      	ldr	r3, [r3, #0]
 80250cc:	f043 0202 	orr.w	r2, r3, #2
 80250d0:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80250d4:	3318      	adds	r3, #24
 80250d6:	601a      	str	r2, [r3, #0]
  eth_mac->regs->MAC_CONFIGURATION |= (uint32_t)ETH_MAC_CONFIGURATION_RE_Msk;
 80250d8:	687b      	ldr	r3, [r7, #4]
 80250da:	681b      	ldr	r3, [r3, #0]
 80250dc:	687a      	ldr	r2, [r7, #4]
 80250de:	6812      	ldr	r2, [r2, #0]
 80250e0:	6812      	ldr	r2, [r2, #0]
 80250e2:	f042 0204 	orr.w	r2, r2, #4
 80250e6:	601a      	str	r2, [r3, #0]
}
 80250e8:	370c      	adds	r7, #12
 80250ea:	46bd      	mov	sp, r7
 80250ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250f0:	4770      	bx	lr
 80250f2:	bf00      	nop

080250f4 <XMC_ETH_MAC_DisableRx>:
 *
 * \par
 * The function disables the receive process.
 */
__STATIC_INLINE void XMC_ETH_MAC_DisableRx(XMC_ETH_MAC_t *const eth_mac)
{
 80250f4:	b480      	push	{r7}
 80250f6:	b083      	sub	sp, #12
 80250f8:	af00      	add	r7, sp, #0
 80250fa:	6078      	str	r0, [r7, #4]
  eth_mac->regs->MAC_CONFIGURATION &= (uint32_t)~ETH_MAC_CONFIGURATION_RE_Msk;
 80250fc:	687b      	ldr	r3, [r7, #4]
 80250fe:	681b      	ldr	r3, [r3, #0]
 8025100:	687a      	ldr	r2, [r7, #4]
 8025102:	6812      	ldr	r2, [r2, #0]
 8025104:	6812      	ldr	r2, [r2, #0]
 8025106:	f022 0204 	bic.w	r2, r2, #4
 802510a:	601a      	str	r2, [r3, #0]
  eth_mac->regs->OPERATION_MODE &= (uint32_t)~ETH_OPERATION_MODE_SR_Msk;
 802510c:	687b      	ldr	r3, [r7, #4]
 802510e:	6819      	ldr	r1, [r3, #0]
 8025110:	687b      	ldr	r3, [r7, #4]
 8025112:	681b      	ldr	r3, [r3, #0]
 8025114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8025118:	3318      	adds	r3, #24
 802511a:	681b      	ldr	r3, [r3, #0]
 802511c:	f023 0202 	bic.w	r2, r3, #2
 8025120:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8025124:	3318      	adds	r3, #24
 8025126:	601a      	str	r2, [r3, #0]
}
 8025128:	370c      	adds	r7, #12
 802512a:	46bd      	mov	sp, r7
 802512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025130:	4770      	bx	lr
 8025132:	bf00      	nop

08025134 <XMC_ETH_MAC_EnableTx>:
 * The function enables the transmit state machine of the MAC and puts the
 * transmit process in running state. The DMA then checks the TX list at the
 * current position for transmitting a frame.
 */
__STATIC_INLINE void XMC_ETH_MAC_EnableTx(XMC_ETH_MAC_t *const eth_mac)
{
 8025134:	b480      	push	{r7}
 8025136:	b083      	sub	sp, #12
 8025138:	af00      	add	r7, sp, #0
 802513a:	6078      	str	r0, [r7, #4]
  eth_mac->regs->OPERATION_MODE |= (uint32_t)ETH_OPERATION_MODE_ST_Msk;
 802513c:	687b      	ldr	r3, [r7, #4]
 802513e:	6819      	ldr	r1, [r3, #0]
 8025140:	687b      	ldr	r3, [r7, #4]
 8025142:	681b      	ldr	r3, [r3, #0]
 8025144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8025148:	3318      	adds	r3, #24
 802514a:	681b      	ldr	r3, [r3, #0]
 802514c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8025150:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8025154:	3318      	adds	r3, #24
 8025156:	601a      	str	r2, [r3, #0]
  eth_mac->regs->MAC_CONFIGURATION |= (uint32_t)ETH_MAC_CONFIGURATION_TE_Msk;
 8025158:	687b      	ldr	r3, [r7, #4]
 802515a:	681b      	ldr	r3, [r3, #0]
 802515c:	687a      	ldr	r2, [r7, #4]
 802515e:	6812      	ldr	r2, [r2, #0]
 8025160:	6812      	ldr	r2, [r2, #0]
 8025162:	f042 0208 	orr.w	r2, r2, #8
 8025166:	601a      	str	r2, [r3, #0]
}
 8025168:	370c      	adds	r7, #12
 802516a:	46bd      	mov	sp, r7
 802516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025170:	4770      	bx	lr
 8025172:	bf00      	nop

08025174 <XMC_ETH_MAC_DisableTx>:
 *
 * \par
 * The function disables the transmit process.
 */
__STATIC_INLINE void XMC_ETH_MAC_DisableTx(XMC_ETH_MAC_t *const eth_mac)
{
 8025174:	b480      	push	{r7}
 8025176:	b083      	sub	sp, #12
 8025178:	af00      	add	r7, sp, #0
 802517a:	6078      	str	r0, [r7, #4]
  eth_mac->regs->MAC_CONFIGURATION &= (uint32_t)~ETH_MAC_CONFIGURATION_TE_Msk;
 802517c:	687b      	ldr	r3, [r7, #4]
 802517e:	681b      	ldr	r3, [r3, #0]
 8025180:	687a      	ldr	r2, [r7, #4]
 8025182:	6812      	ldr	r2, [r2, #0]
 8025184:	6812      	ldr	r2, [r2, #0]
 8025186:	f022 0208 	bic.w	r2, r2, #8
 802518a:	601a      	str	r2, [r3, #0]
  eth_mac->regs->OPERATION_MODE &= (uint32_t)~ETH_OPERATION_MODE_ST_Msk;
 802518c:	687b      	ldr	r3, [r7, #4]
 802518e:	6819      	ldr	r1, [r3, #0]
 8025190:	687b      	ldr	r3, [r7, #4]
 8025192:	681b      	ldr	r3, [r3, #0]
 8025194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8025198:	3318      	adds	r3, #24
 802519a:	681b      	ldr	r3, [r3, #0]
 802519c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80251a0:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80251a4:	3318      	adds	r3, #24
 80251a6:	601a      	str	r2, [r3, #0]
}
 80251a8:	370c      	adds	r7, #12
 80251aa:	46bd      	mov	sp, r7
 80251ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251b0:	4770      	bx	lr
 80251b2:	bf00      	nop

080251b4 <XMC_ETH_MAC_ResumeTx>:
 * current descriptor pointed to by the "current host transmit descriptor" reg.
 * If that descriptor is not available (owned by the CPU), the transmission
 * returns to the suspend state else the transmission resumes.
 */
__STATIC_INLINE void XMC_ETH_MAC_ResumeTx(XMC_ETH_MAC_t *const eth_mac)
{
 80251b4:	b480      	push	{r7}
 80251b6:	b083      	sub	sp, #12
 80251b8:	af00      	add	r7, sp, #0
 80251ba:	6078      	str	r0, [r7, #4]
  eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_TPS_Msk;
 80251bc:	687b      	ldr	r3, [r7, #4]
 80251be:	681b      	ldr	r3, [r3, #0]
 80251c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80251c4:	3314      	adds	r3, #20
 80251c6:	2202      	movs	r2, #2
 80251c8:	601a      	str	r2, [r3, #0]
  eth_mac->regs->TRANSMIT_POLL_DEMAND = 0U;
 80251ca:	687b      	ldr	r3, [r7, #4]
 80251cc:	681b      	ldr	r3, [r3, #0]
 80251ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80251d2:	3304      	adds	r3, #4
 80251d4:	2200      	movs	r2, #0
 80251d6:	601a      	str	r2, [r3, #0]
}
 80251d8:	370c      	adds	r7, #12
 80251da:	46bd      	mov	sp, r7
 80251dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251e0:	4770      	bx	lr
 80251e2:	bf00      	nop

080251e4 <XMC_ETH_MAC_ResumeRx>:
 * current descriptor pointed to by the "current host transmit descriptor" reg.
 * If that descriptor is not available (owned by the CPU), the transmission
 * returns to the suspend state else the transmission resumes.
 */
__STATIC_INLINE void XMC_ETH_MAC_ResumeRx(XMC_ETH_MAC_t *const eth_mac)
{
 80251e4:	b480      	push	{r7}
 80251e6:	b083      	sub	sp, #12
 80251e8:	af00      	add	r7, sp, #0
 80251ea:	6078      	str	r0, [r7, #4]
  eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_RU_Msk;
 80251ec:	687b      	ldr	r3, [r7, #4]
 80251ee:	681b      	ldr	r3, [r3, #0]
 80251f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80251f4:	3314      	adds	r3, #20
 80251f6:	2280      	movs	r2, #128	; 0x80
 80251f8:	601a      	str	r2, [r3, #0]
  eth_mac->regs->RECEIVE_POLL_DEMAND = 0U;
 80251fa:	687b      	ldr	r3, [r7, #4]
 80251fc:	681b      	ldr	r3, [r3, #0]
 80251fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8025202:	3308      	adds	r3, #8
 8025204:	2200      	movs	r2, #0
 8025206:	601a      	str	r2, [r3, #0]
}
 8025208:	370c      	adds	r7, #12
 802520a:	46bd      	mov	sp, r7
 802520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025210:	4770      	bx	lr
 8025212:	bf00      	nop

08025214 <XMC_ETH_MAC_GetTxBuffer>:
 *
 * \par<b>Description: </b><br>
 * Returns the current TX buffer.
 */
__STATIC_INLINE uint8_t *XMC_ETH_MAC_GetTxBuffer(XMC_ETH_MAC_t *const eth_mac)
{
 8025214:	b480      	push	{r7}
 8025216:	b083      	sub	sp, #12
 8025218:	af00      	add	r7, sp, #0
 802521a:	6078      	str	r0, [r7, #4]
  return (uint8_t *)(eth_mac->tx_desc[eth_mac->tx_index].buffer1);
 802521c:	687b      	ldr	r3, [r7, #4]
 802521e:	695a      	ldr	r2, [r3, #20]
 8025220:	687b      	ldr	r3, [r7, #4]
 8025222:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8025226:	015b      	lsls	r3, r3, #5
 8025228:	4413      	add	r3, r2
 802522a:	689b      	ldr	r3, [r3, #8]
}
 802522c:	4618      	mov	r0, r3
 802522e:	370c      	adds	r7, #12
 8025230:	46bd      	mov	sp, r7
 8025232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025236:	4770      	bx	lr

08025238 <XMC_ETH_MAC_GetRxBuffer>:
 *
 * \par<b>Description: </b><br>
 * Returns the current RX buffer.
 */
__STATIC_INLINE uint8_t *XMC_ETH_MAC_GetRxBuffer(XMC_ETH_MAC_t *const eth_mac)
{
 8025238:	b480      	push	{r7}
 802523a:	b083      	sub	sp, #12
 802523c:	af00      	add	r7, sp, #0
 802523e:	6078      	str	r0, [r7, #4]
  return (uint8_t *)(eth_mac->rx_desc[eth_mac->rx_index].buffer1);
 8025240:	687b      	ldr	r3, [r7, #4]
 8025242:	691a      	ldr	r2, [r3, #16]
 8025244:	687b      	ldr	r3, [r7, #4]
 8025246:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 802524a:	015b      	lsls	r3, r3, #5
 802524c:	4413      	add	r3, r2
 802524e:	689b      	ldr	r3, [r3, #8]
}
 8025250:	4618      	mov	r0, r3
 8025252:	370c      	adds	r7, #12
 8025254:	46bd      	mov	sp, r7
 8025256:	f85d 7b04 	ldr.w	r7, [sp], #4
 802525a:	4770      	bx	lr

0802525c <XMC_ETH_MAC_SetTxBufferSize>:
 *
 * \par<b>Description: </b><br>
 * Sets the current TX buffer size.
 */
__STATIC_INLINE void XMC_ETH_MAC_SetTxBufferSize(XMC_ETH_MAC_t *const eth_mac, uint32_t size)
{
 802525c:	b480      	push	{r7}
 802525e:	b083      	sub	sp, #12
 8025260:	af00      	add	r7, sp, #0
 8025262:	6078      	str	r0, [r7, #4]
 8025264:	6039      	str	r1, [r7, #0]
  eth_mac->tx_desc[eth_mac->tx_index].length = size;
 8025266:	687b      	ldr	r3, [r7, #4]
 8025268:	695a      	ldr	r2, [r3, #20]
 802526a:	687b      	ldr	r3, [r7, #4]
 802526c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8025270:	015b      	lsls	r3, r3, #5
 8025272:	4413      	add	r3, r2
 8025274:	683a      	ldr	r2, [r7, #0]
 8025276:	605a      	str	r2, [r3, #4]
}
 8025278:	370c      	adds	r7, #12
 802527a:	46bd      	mov	sp, r7
 802527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025280:	4770      	bx	lr
 8025282:	bf00      	nop

08025284 <ethernetif_link_callback>:
err_t ethernetif_init(struct netif *netif);
static void ethernetif_link_callback(struct netif *netif);
static void ethernetif_link_status(void *args);

static void ethernetif_link_callback(struct netif *netif)
{
 8025284:	b580      	push	{r7, lr}
 8025286:	b086      	sub	sp, #24
 8025288:	af00      	add	r7, sp, #0
 802528a:	6078      	str	r0, [r7, #4]
  XMC_ETH_LINK_SPEED_t speed;
  XMC_ETH_LINK_DUPLEX_t duplex;
  bool phy_autoneg_state;
  uint32_t retries = 0U;
 802528c:	2300      	movs	r3, #0
 802528e:	617b      	str	r3, [r7, #20]
  int32_t status;

  if (netif_is_link_up(netif))
 8025290:	687b      	ldr	r3, [r7, #4]
 8025292:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8025296:	f003 0310 	and.w	r3, r3, #16
 802529a:	2b00      	cmp	r3, #0
 802529c:	d05d      	beq.n	802535a <ethernetif_link_callback+0xd6>
  {
    if((status = XMC_ETH_PHY_Init(&eth_mac, ETH_LWIP_0_PHY_ADDR, &eth_phy_config)) != XMC_ETH_PHY_STATUS_OK)
 802529e:	4838      	ldr	r0, [pc, #224]	; (8025380 <ethernetif_link_callback+0xfc>)
 80252a0:	2100      	movs	r1, #0
 80252a2:	4a38      	ldr	r2, [pc, #224]	; (8025384 <ethernetif_link_callback+0x100>)
 80252a4:	f003 fcf2 	bl	8028c8c <XMC_ETH_PHY_Init>
 80252a8:	6138      	str	r0, [r7, #16]
 80252aa:	693b      	ldr	r3, [r7, #16]
 80252ac:	2b00      	cmp	r3, #0
 80252ae:	d004      	beq.n	80252ba <ethernetif_link_callback+0x36>
    {
      ETH_LWIP_Error((ETH_LWIP_ERROR_t)status);
 80252b0:	693b      	ldr	r3, [r7, #16]
 80252b2:	b2db      	uxtb	r3, r3
 80252b4:	4618      	mov	r0, r3
 80252b6:	f000 fa63 	bl	8025780 <ETH_LWIP_Error>
    }

    /* If autonegotiation is enabled */
    do {
      phy_autoneg_state = XMC_ETH_PHY_IsAutonegotiationCompleted(&eth_mac, ETH_LWIP_0_PHY_ADDR);
 80252ba:	4831      	ldr	r0, [pc, #196]	; (8025380 <ethernetif_link_callback+0xfc>)
 80252bc:	2100      	movs	r1, #0
 80252be:	f003 fdab 	bl	8028e18 <XMC_ETH_PHY_IsAutonegotiationCompleted>
 80252c2:	4603      	mov	r3, r0
 80252c4:	73fb      	strb	r3, [r7, #15]
      retries++;
 80252c6:	697b      	ldr	r3, [r7, #20]
 80252c8:	3301      	adds	r3, #1
 80252ca:	617b      	str	r3, [r7, #20]
    } while ((phy_autoneg_state == false) && (retries < ETH_LWIP_PHY_MAX_RETRIES));
 80252cc:	7bfb      	ldrb	r3, [r7, #15]
 80252ce:	f083 0301 	eor.w	r3, r3, #1
 80252d2:	b2db      	uxtb	r3, r3
 80252d4:	2b00      	cmp	r3, #0
 80252d6:	d003      	beq.n	80252e0 <ethernetif_link_callback+0x5c>
 80252d8:	697b      	ldr	r3, [r7, #20]
 80252da:	4a2b      	ldr	r2, [pc, #172]	; (8025388 <ethernetif_link_callback+0x104>)
 80252dc:	4293      	cmp	r3, r2
 80252de:	d9ec      	bls.n	80252ba <ethernetif_link_callback+0x36>
    
    if(phy_autoneg_state == false)
 80252e0:	7bfb      	ldrb	r3, [r7, #15]
 80252e2:	f083 0301 	eor.w	r3, r3, #1
 80252e6:	b2db      	uxtb	r3, r3
 80252e8:	2b00      	cmp	r3, #0
 80252ea:	d002      	beq.n	80252f2 <ethernetif_link_callback+0x6e>
    {
      ETH_LWIP_Error(ETH_LWIP_ERROR_PHY_TIMEOUT);
 80252ec:	2004      	movs	r0, #4
 80252ee:	f000 fa47 	bl	8025780 <ETH_LWIP_Error>
    }
	
    speed = XMC_ETH_PHY_GetLinkSpeed(&eth_mac, ETH_LWIP_0_PHY_ADDR);
 80252f2:	4823      	ldr	r0, [pc, #140]	; (8025380 <ethernetif_link_callback+0xfc>)
 80252f4:	2100      	movs	r1, #0
 80252f6:	f003 fd57 	bl	8028da8 <XMC_ETH_PHY_GetLinkSpeed>
 80252fa:	4603      	mov	r3, r0
 80252fc:	81bb      	strh	r3, [r7, #12]
    duplex = XMC_ETH_PHY_GetLinkDuplex(&eth_mac, ETH_LWIP_0_PHY_ADDR);
 80252fe:	4820      	ldr	r0, [pc, #128]	; (8025380 <ethernetif_link_callback+0xfc>)
 8025300:	2100      	movs	r1, #0
 8025302:	f003 fd6d 	bl	8028de0 <XMC_ETH_PHY_GetLinkDuplex>
 8025306:	4603      	mov	r3, r0
 8025308:	817b      	strh	r3, [r7, #10]
	
    XMC_ETH_MAC_SetLink(&eth_mac, speed, duplex);
 802530a:	89ba      	ldrh	r2, [r7, #12]
 802530c:	897b      	ldrh	r3, [r7, #10]
 802530e:	481c      	ldr	r0, [pc, #112]	; (8025380 <ethernetif_link_callback+0xfc>)
 8025310:	4611      	mov	r1, r2
 8025312:	461a      	mov	r2, r3
 8025314:	f7ff fe8c 	bl	8025030 <XMC_ETH_MAC_SetLink>
    /* Enable ethernet interrupts */
    XMC_ETH_MAC_EnableEvent(&eth_mac, (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE);
 8025318:	4819      	ldr	r0, [pc, #100]	; (8025380 <ethernetif_link_callback+0xfc>)
 802531a:	2140      	movs	r1, #64	; 0x40
 802531c:	f7fc fe66 	bl	8021fec <XMC_ETH_MAC_EnableEvent>

    NVIC_SetPriority((IRQn_Type)108, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 63U, 0U));
 8025320:	f7ff fd9e 	bl	8024e60 <__NVIC_GetPriorityGrouping>
 8025324:	4603      	mov	r3, r0
 8025326:	4618      	mov	r0, r3
 8025328:	213f      	movs	r1, #63	; 0x3f
 802532a:	2200      	movs	r2, #0
 802532c:	f7ff fe2c 	bl	8024f88 <NVIC_EncodePriority>
 8025330:	4603      	mov	r3, r0
 8025332:	206c      	movs	r0, #108	; 0x6c
 8025334:	4619      	mov	r1, r3
 8025336:	f7ff fdfd 	bl	8024f34 <__NVIC_SetPriority>
    NVIC_ClearPendingIRQ((IRQn_Type)108);
 802533a:	206c      	movs	r0, #108	; 0x6c
 802533c:	f7ff fddc 	bl	8024ef8 <__NVIC_ClearPendingIRQ>
    NVIC_EnableIRQ((IRQn_Type)108);
 8025340:	206c      	movs	r0, #108	; 0x6c
 8025342:	f7ff fd9b 	bl	8024e7c <__NVIC_EnableIRQ>
    XMC_ETH_MAC_EnableTx(&eth_mac);
 8025346:	480e      	ldr	r0, [pc, #56]	; (8025380 <ethernetif_link_callback+0xfc>)
 8025348:	f7ff fef4 	bl	8025134 <XMC_ETH_MAC_EnableTx>
    XMC_ETH_MAC_EnableRx(&eth_mac);
 802534c:	480c      	ldr	r0, [pc, #48]	; (8025380 <ethernetif_link_callback+0xfc>)
 802534e:	f7ff feb1 	bl	80250b4 <XMC_ETH_MAC_EnableRx>
#elif LWIP_AUTOIP == 1
    /* Start AUTOIP probing */
    autoip_start(&xnetif);
#else
    /* When the netif is fully configured this function must be called. */
    netif_set_up(&xnetif);
 8025352:	480e      	ldr	r0, [pc, #56]	; (802538c <ethernetif_link_callback+0x108>)
 8025354:	f002 fc9c 	bl	8027c90 <netif_set_up>
 8025358:	e00f      	b.n	802537a <ethernetif_link_callback+0xf6>

  }
  else
  {
    /* Enable ethernet interrupts */
    XMC_ETH_MAC_DisableEvent(&eth_mac, (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE);
 802535a:	4809      	ldr	r0, [pc, #36]	; (8025380 <ethernetif_link_callback+0xfc>)
 802535c:	2140      	movs	r1, #64	; 0x40
 802535e:	f7fc fe7d 	bl	802205c <XMC_ETH_MAC_DisableEvent>
    NVIC_DisableIRQ((IRQn_Type)108);
 8025362:	206c      	movs	r0, #108	; 0x6c
 8025364:	f7ff fda6 	bl	8024eb4 <__NVIC_DisableIRQ>

    XMC_ETH_MAC_DisableTx(&eth_mac);
 8025368:	4805      	ldr	r0, [pc, #20]	; (8025380 <ethernetif_link_callback+0xfc>)
 802536a:	f7ff ff03 	bl	8025174 <XMC_ETH_MAC_DisableTx>
    XMC_ETH_MAC_DisableRx(&eth_mac);
 802536e:	4804      	ldr	r0, [pc, #16]	; (8025380 <ethernetif_link_callback+0xfc>)
 8025370:	f7ff fec0 	bl	80250f4 <XMC_ETH_MAC_DisableRx>
#elif LWIP_AUTOIP == 1
    /* Stop AUTOIP probing */
    autoip_stop(&xnetif);
#else
    /* When the netif link is down, set the status down. */
    netif_set_down(&xnetif);
 8025374:	4805      	ldr	r0, [pc, #20]	; (802538c <ethernetif_link_callback+0x108>)
 8025376:	f002 fcc1 	bl	8027cfc <netif_set_down>
#endif

  }
}
 802537a:	3718      	adds	r7, #24
 802537c:	46bd      	mov	sp, r7
 802537e:	bd80      	pop	{r7, pc}
 8025380:	1ffe8a30 	.word	0x1ffe8a30
 8025384:	0802a33c 	.word	0x0802a33c
 8025388:	000ffffe 	.word	0x000ffffe
 802538c:	1ffe8a60 	.word	0x1ffe8a60

08025390 <ethernetif_link_status>:

static void ethernetif_link_status(void *args)
{
 8025390:	b580      	push	{r7, lr}
 8025392:	b082      	sub	sp, #8
 8025394:	af00      	add	r7, sp, #0
 8025396:	6078      	str	r0, [r7, #4]

  if (XMC_ETH_PHY_GetLinkStatus(&eth_mac, ETH_LWIP_0_PHY_ADDR) == XMC_ETH_LINK_STATUS_DOWN)
 8025398:	4812      	ldr	r0, [pc, #72]	; (80253e4 <ethernetif_link_status+0x54>)
 802539a:	2100      	movs	r1, #0
 802539c:	f003 fcea 	bl	8028d74 <XMC_ETH_PHY_GetLinkStatus>
 80253a0:	4603      	mov	r3, r0
 80253a2:	2b00      	cmp	r3, #0
 80253a4:	d10a      	bne.n	80253bc <ethernetif_link_status+0x2c>
  {
    if (netif_is_link_up(&xnetif))
 80253a6:	4b10      	ldr	r3, [pc, #64]	; (80253e8 <ethernetif_link_status+0x58>)
 80253a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80253ac:	f003 0310 	and.w	r3, r3, #16
 80253b0:	2b00      	cmp	r3, #0
 80253b2:	d00d      	beq.n	80253d0 <ethernetif_link_status+0x40>
    {
      netif_set_link_down(&xnetif);
 80253b4:	480c      	ldr	r0, [pc, #48]	; (80253e8 <ethernetif_link_status+0x58>)
 80253b6:	f002 fd01 	bl	8027dbc <netif_set_link_down>
 80253ba:	e009      	b.n	80253d0 <ethernetif_link_status+0x40>
    }
  }
  else
  {
    if (!netif_is_link_up(&xnetif))
 80253bc:	4b0a      	ldr	r3, [pc, #40]	; (80253e8 <ethernetif_link_status+0x58>)
 80253be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80253c2:	f003 0310 	and.w	r3, r3, #16
 80253c6:	2b00      	cmp	r3, #0
 80253c8:	d102      	bne.n	80253d0 <ethernetif_link_status+0x40>
    {
      netif_set_link_up(&xnetif);
 80253ca:	4807      	ldr	r0, [pc, #28]	; (80253e8 <ethernetif_link_status+0x58>)
 80253cc:	f002 fcb8 	bl	8027d40 <netif_set_link_up>
    }
  }

  sys_timeout(1000U, ethernetif_link_status, NULL);
 80253d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80253d4:	4905      	ldr	r1, [pc, #20]	; (80253ec <ethernetif_link_status+0x5c>)
 80253d6:	2200      	movs	r2, #0
 80253d8:	f003 f8a2 	bl	8028520 <sys_timeout>

}
 80253dc:	3708      	adds	r7, #8
 80253de:	46bd      	mov	sp, r7
 80253e0:	bd80      	pop	{r7, pc}
 80253e2:	bf00      	nop
 80253e4:	1ffe8a30 	.word	0x1ffe8a30
 80253e8:	1ffe8a60 	.word	0x1ffe8a60
 80253ec:	08025391 	.word	0x08025391

080253f0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80253f0:	b580      	push	{r7, lr}
 80253f2:	b086      	sub	sp, #24
 80253f4:	af00      	add	r7, sp, #0
 80253f6:	6078      	str	r0, [r7, #4]
  XMC_ETH_MAC_PORT_CTRL_t port_control;
  XMC_GPIO_CONFIG_t gpio_config;
  gpio_config.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 80253f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80253fc:	60fb      	str	r3, [r7, #12]
  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 80253fe:	2300      	movs	r3, #0
 8025400:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_CRS_DV, &gpio_config);
 8025402:	f107 0308 	add.w	r3, r7, #8
 8025406:	4847      	ldr	r0, [pc, #284]	; (8025524 <low_level_init+0x134>)
 8025408:	2109      	movs	r1, #9
 802540a:	461a      	mov	r2, r3
 802540c:	f7fa ff6e 	bl	80202ec <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 8025410:	2300      	movs	r3, #0
 8025412:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_RXER, &gpio_config);
 8025414:	f107 0308 	add.w	r3, r7, #8
 8025418:	4843      	ldr	r0, [pc, #268]	; (8025528 <low_level_init+0x138>)
 802541a:	2104      	movs	r1, #4
 802541c:	461a      	mov	r2, r3
 802541e:	f7fa ff65 	bl	80202ec <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 8025422:	2300      	movs	r3, #0
 8025424:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_RXD0, &gpio_config);
 8025426:	f107 0308 	add.w	r3, r7, #8
 802542a:	483f      	ldr	r0, [pc, #252]	; (8025528 <low_level_init+0x138>)
 802542c:	2102      	movs	r1, #2
 802542e:	461a      	mov	r2, r3
 8025430:	f7fa ff5c 	bl	80202ec <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 8025434:	2300      	movs	r3, #0
 8025436:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_RXD1, &gpio_config);
 8025438:	f107 0308 	add.w	r3, r7, #8
 802543c:	483a      	ldr	r0, [pc, #232]	; (8025528 <low_level_init+0x138>)
 802543e:	2103      	movs	r1, #3
 8025440:	461a      	mov	r2, r3
 8025442:	f7fa ff53 	bl	80202ec <XMC_GPIO_Init>

  gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE;
 8025446:	2300      	movs	r3, #0
 8025448:	743b      	strb	r3, [r7, #16]
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 802544a:	2388      	movs	r3, #136	; 0x88
 802544c:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_TXEN, &gpio_config);
 802544e:	f107 0308 	add.w	r3, r7, #8
 8025452:	4835      	ldr	r0, [pc, #212]	; (8025528 <low_level_init+0x138>)
 8025454:	2105      	movs	r1, #5
 8025456:	461a      	mov	r2, r3
 8025458:	f7fa ff48 	bl	80202ec <XMC_GPIO_Init>

  gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE;
 802545c:	2300      	movs	r3, #0
 802545e:	743b      	strb	r3, [r7, #16]
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8025460:	2388      	movs	r3, #136	; 0x88
 8025462:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_TXD0, &gpio_config);
 8025464:	f107 0308 	add.w	r3, r7, #8
 8025468:	482f      	ldr	r0, [pc, #188]	; (8025528 <low_level_init+0x138>)
 802546a:	2108      	movs	r1, #8
 802546c:	461a      	mov	r2, r3
 802546e:	f7fa ff3d 	bl	80202ec <XMC_GPIO_Init>

  gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE;
 8025472:	2300      	movs	r3, #0
 8025474:	743b      	strb	r3, [r7, #16]
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 8025476:	2388      	movs	r3, #136	; 0x88
 8025478:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_TXD1, &gpio_config);
 802547a:	f107 0308 	add.w	r3, r7, #8
 802547e:	482a      	ldr	r0, [pc, #168]	; (8025528 <low_level_init+0x138>)
 8025480:	2109      	movs	r1, #9
 8025482:	461a      	mov	r2, r3
 8025484:	f7fa ff32 	bl	80202ec <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 8025488:	2300      	movs	r3, #0
 802548a:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_RMII_CLK, &gpio_config);
 802548c:	f107 0308 	add.w	r3, r7, #8
 8025490:	4824      	ldr	r0, [pc, #144]	; (8025524 <low_level_init+0x134>)
 8025492:	2108      	movs	r1, #8
 8025494:	461a      	mov	r2, r3
 8025496:	f7fa ff29 	bl	80202ec <XMC_GPIO_Init>

  gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE;
 802549a:	2300      	movs	r3, #0
 802549c:	743b      	strb	r3, [r7, #16]
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 802549e:	2388      	movs	r3, #136	; 0x88
 80254a0:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_MDC, &gpio_config);
 80254a2:	f107 0308 	add.w	r3, r7, #8
 80254a6:	4820      	ldr	r0, [pc, #128]	; (8025528 <low_level_init+0x138>)
 80254a8:	2107      	movs	r1, #7
 80254aa:	461a      	mov	r2, r3
 80254ac:	f7fa ff1e 	bl	80202ec <XMC_GPIO_Init>

  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 80254b0:	2300      	movs	r3, #0
 80254b2:	723b      	strb	r3, [r7, #8]

  XMC_GPIO_Init(ETH_LWIP_0_MDIO, &gpio_config);
 80254b4:	f107 0308 	add.w	r3, r7, #8
 80254b8:	481b      	ldr	r0, [pc, #108]	; (8025528 <low_level_init+0x138>)
 80254ba:	2100      	movs	r1, #0
 80254bc:	461a      	mov	r2, r3
 80254be:	f7fa ff15 	bl	80202ec <XMC_GPIO_Init>


  XMC_GPIO_SetHardwareControl(ETH_LWIP_0_MDIO, XMC_GPIO_HWCTRL_PERIPHERAL1);
 80254c2:	4819      	ldr	r0, [pc, #100]	; (8025528 <low_level_init+0x138>)
 80254c4:	2100      	movs	r1, #0
 80254c6:	2201      	movs	r2, #1
 80254c8:	f7fc fee2 	bl	8022290 <XMC_GPIO_SetHardwareControl>


  port_control.mode = XMC_ETH_MAC_PORT_CTRL_MODE_RMII;
 80254cc:	7dfb      	ldrb	r3, [r7, #23]
 80254ce:	f043 0304 	orr.w	r3, r3, #4
 80254d2:	75fb      	strb	r3, [r7, #23]
  port_control.rxd0 = (XMC_ETH_MAC_PORT_CTRL_RXD0_t)0U;
 80254d4:	7d3b      	ldrb	r3, [r7, #20]
 80254d6:	f36f 0301 	bfc	r3, #0, #2
 80254da:	753b      	strb	r3, [r7, #20]
  port_control.rxd1 = (XMC_ETH_MAC_PORT_CTRL_RXD1_t)0U;
 80254dc:	7d3b      	ldrb	r3, [r7, #20]
 80254de:	f36f 0383 	bfc	r3, #2, #2
 80254e2:	753b      	strb	r3, [r7, #20]
  port_control.clk_rmii = (XMC_ETH_MAC_PORT_CTRL_CLK_RMII_t)2U;
 80254e4:	7d7b      	ldrb	r3, [r7, #21]
 80254e6:	2202      	movs	r2, #2
 80254e8:	f362 0301 	bfi	r3, r2, #0, #2
 80254ec:	757b      	strb	r3, [r7, #21]
  port_control.crs_dv = (XMC_ETH_MAC_PORT_CTRL_CRS_DV_t)2U;
 80254ee:	7d7b      	ldrb	r3, [r7, #21]
 80254f0:	2202      	movs	r2, #2
 80254f2:	f362 0383 	bfi	r3, r2, #2, #2
 80254f6:	757b      	strb	r3, [r7, #21]
  port_control.rxer = (XMC_ETH_MAC_PORT_CTRL_RXER_t)0U;
 80254f8:	7d7b      	ldrb	r3, [r7, #21]
 80254fa:	f36f 1387 	bfc	r3, #6, #2
 80254fe:	757b      	strb	r3, [r7, #21]
  port_control.mdio = (XMC_ETH_MAC_PORT_CTRL_MDIO_t)1U;
 8025500:	7dbb      	ldrb	r3, [r7, #22]
 8025502:	2201      	movs	r2, #1
 8025504:	f362 1387 	bfi	r3, r2, #6, #2
 8025508:	75bb      	strb	r3, [r7, #22]
  XMC_ETH_MAC_SetPortControl(&eth_mac, port_control);
 802550a:	4808      	ldr	r0, [pc, #32]	; (802552c <low_level_init+0x13c>)
 802550c:	6979      	ldr	r1, [r7, #20]
 802550e:	f7ff fd6d 	bl	8024fec <XMC_ETH_MAC_SetPortControl>

  (void)XMC_ETH_MAC_Init(&eth_mac);
 8025512:	4806      	ldr	r0, [pc, #24]	; (802552c <low_level_init+0x13c>)
 8025514:	f7fc fb80 	bl	8021c18 <XMC_ETH_MAC_Init>

  XMC_ETH_MAC_DisableJumboFrame(&eth_mac);
 8025518:	4804      	ldr	r0, [pc, #16]	; (802552c <low_level_init+0x13c>)
 802551a:	f7ff fd77 	bl	802500c <XMC_ETH_MAC_DisableJumboFrame>


}
 802551e:	3718      	adds	r7, #24
 8025520:	46bd      	mov	sp, r7
 8025522:	bd80      	pop	{r7, pc}
 8025524:	48028f00 	.word	0x48028f00
 8025528:	48028200 	.word	0x48028200
 802552c:	1ffe8a30 	.word	0x1ffe8a30

08025530 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8025530:	b580      	push	{r7, lr}
 8025532:	b086      	sub	sp, #24
 8025534:	af00      	add	r7, sp, #0
 8025536:	6078      	str	r0, [r7, #4]
 8025538:	6039      	str	r1, [r7, #0]
  struct pbuf *q;
  uint32_t framelen = 0U;
 802553a:	2300      	movs	r3, #0
 802553c:	613b      	str	r3, [r7, #16]
  uint8_t *buffer;
  
  if (p->tot_len > (u16_t)XMC_ETH_MAC_BUF_SIZE) {
 802553e:	683b      	ldr	r3, [r7, #0]
 8025540:	891b      	ldrh	r3, [r3, #8]
 8025542:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8025546:	4293      	cmp	r3, r2
 8025548:	d901      	bls.n	802554e <low_level_output+0x1e>
    return ERR_BUF;
 802554a:	23fe      	movs	r3, #254	; 0xfe
 802554c:	e040      	b.n	80255d0 <low_level_output+0xa0>
  }

  if (XMC_ETH_MAC_IsTxDescriptorOwnedByDma(&eth_mac))
 802554e:	4823      	ldr	r0, [pc, #140]	; (80255dc <low_level_output+0xac>)
 8025550:	f7ff fd9c 	bl	802508c <XMC_ETH_MAC_IsTxDescriptorOwnedByDma>
 8025554:	4603      	mov	r3, r0
 8025556:	2b00      	cmp	r3, #0
 8025558:	d004      	beq.n	8025564 <low_level_output+0x34>
  {
    XMC_ETH_MAC_ResumeTx(&eth_mac);
 802555a:	4820      	ldr	r0, [pc, #128]	; (80255dc <low_level_output+0xac>)
 802555c:	f7ff fe2a 	bl	80251b4 <XMC_ETH_MAC_ResumeTx>

    return ERR_BUF;
 8025560:	23fe      	movs	r3, #254	; 0xfe
 8025562:	e035      	b.n	80255d0 <low_level_output+0xa0>
  }
  else
  {
    buffer = XMC_ETH_MAC_GetTxBuffer(&eth_mac);
 8025564:	481d      	ldr	r0, [pc, #116]	; (80255dc <low_level_output+0xac>)
 8025566:	f7ff fe55 	bl	8025214 <XMC_ETH_MAC_GetTxBuffer>
 802556a:	60f8      	str	r0, [r7, #12]

#if ETH_PAD_SIZE
    pbuf_header(p, -ETH_PAD_SIZE);    /* Drop the padding word */
 802556c:	6838      	ldr	r0, [r7, #0]
 802556e:	f06f 0101 	mvn.w	r1, #1
 8025572:	f002 fda5 	bl	80280c0 <pbuf_header>
#endif

    for(q = p; q != NULL; q = q->next)
 8025576:	683b      	ldr	r3, [r7, #0]
 8025578:	617b      	str	r3, [r7, #20]
 802557a:	e017      	b.n	80255ac <low_level_output+0x7c>
    {
      /* Send the data from the pbuf to the interface, one pbuf at a
       time. The size of the data in each pbuf is kept in the ->len
       variable. */
      MEMCPY(buffer, q->payload, q->len);
 802557c:	697b      	ldr	r3, [r7, #20]
 802557e:	685a      	ldr	r2, [r3, #4]
 8025580:	697b      	ldr	r3, [r7, #20]
 8025582:	895b      	ldrh	r3, [r3, #10]
 8025584:	68f8      	ldr	r0, [r7, #12]
 8025586:	4611      	mov	r1, r2
 8025588:	461a      	mov	r2, r3
 802558a:	f000 f90b 	bl	80257a4 <thumb2_memcpy>
      framelen += (uint32_t)q->len;
 802558e:	697b      	ldr	r3, [r7, #20]
 8025590:	895b      	ldrh	r3, [r3, #10]
 8025592:	461a      	mov	r2, r3
 8025594:	693b      	ldr	r3, [r7, #16]
 8025596:	4413      	add	r3, r2
 8025598:	613b      	str	r3, [r7, #16]
      buffer += q->len;
 802559a:	697b      	ldr	r3, [r7, #20]
 802559c:	895b      	ldrh	r3, [r3, #10]
 802559e:	461a      	mov	r2, r3
 80255a0:	68fb      	ldr	r3, [r7, #12]
 80255a2:	4413      	add	r3, r2
 80255a4:	60fb      	str	r3, [r7, #12]

#if ETH_PAD_SIZE
    pbuf_header(p, -ETH_PAD_SIZE);    /* Drop the padding word */
#endif

    for(q = p; q != NULL; q = q->next)
 80255a6:	697b      	ldr	r3, [r7, #20]
 80255a8:	681b      	ldr	r3, [r3, #0]
 80255aa:	617b      	str	r3, [r7, #20]
 80255ac:	697b      	ldr	r3, [r7, #20]
 80255ae:	2b00      	cmp	r3, #0
 80255b0:	d1e4      	bne.n	802557c <low_level_output+0x4c>
      framelen += (uint32_t)q->len;
      buffer += q->len;
    }

#if ETH_PAD_SIZE
    pbuf_header(p, ETH_PAD_SIZE);    /* Reclaim the padding word */
 80255b2:	6838      	ldr	r0, [r7, #0]
 80255b4:	2102      	movs	r1, #2
 80255b6:	f002 fd83 	bl	80280c0 <pbuf_header>
#endif

    XMC_ETH_MAC_SetTxBufferSize(&eth_mac, framelen);
 80255ba:	4808      	ldr	r0, [pc, #32]	; (80255dc <low_level_output+0xac>)
 80255bc:	6939      	ldr	r1, [r7, #16]
 80255be:	f7ff fe4d 	bl	802525c <XMC_ETH_MAC_SetTxBufferSize>

    XMC_ETH_MAC_ReturnTxDescriptor(&eth_mac);
 80255c2:	4806      	ldr	r0, [pc, #24]	; (80255dc <low_level_output+0xac>)
 80255c4:	f7fc fdd0 	bl	8022168 <XMC_ETH_MAC_ReturnTxDescriptor>
    XMC_ETH_MAC_ResumeTx(&eth_mac);
 80255c8:	4804      	ldr	r0, [pc, #16]	; (80255dc <low_level_output+0xac>)
 80255ca:	f7ff fdf3 	bl	80251b4 <XMC_ETH_MAC_ResumeTx>

    return ERR_OK;
 80255ce:	2300      	movs	r3, #0
 80255d0:	b25b      	sxtb	r3, r3
  }
}
 80255d2:	4618      	mov	r0, r3
 80255d4:	3718      	adds	r7, #24
 80255d6:	46bd      	mov	sp, r7
 80255d8:	bd80      	pop	{r7, pc}
 80255da:	bf00      	nop
 80255dc:	1ffe8a30 	.word	0x1ffe8a30

080255e0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
 */
static struct pbuf * low_level_input(void)
{
 80255e0:	b580      	push	{r7, lr}
 80255e2:	b084      	sub	sp, #16
 80255e4:	af00      	add	r7, sp, #0
  struct pbuf *p = NULL;
 80255e6:	2300      	movs	r3, #0
 80255e8:	60fb      	str	r3, [r7, #12]
  struct pbuf *q;
  uint32_t len;
  uint8_t *buffer;

  if (XMC_ETH_MAC_IsRxDescriptorOwnedByDma(&eth_mac) == false)
 80255ea:	482e      	ldr	r0, [pc, #184]	; (80256a4 <low_level_input+0xc4>)
 80255ec:	f7ff fd3a 	bl	8025064 <XMC_ETH_MAC_IsRxDescriptorOwnedByDma>
 80255f0:	4603      	mov	r3, r0
 80255f2:	f083 0301 	eor.w	r3, r3, #1
 80255f6:	b2db      	uxtb	r3, r3
 80255f8:	2b00      	cmp	r3, #0
 80255fa:	d04d      	beq.n	8025698 <low_level_input+0xb8>
  {
    len = XMC_ETH_MAC_GetRxFrameSize(&eth_mac);
 80255fc:	4829      	ldr	r0, [pc, #164]	; (80256a4 <low_level_input+0xc4>)
 80255fe:	f7fc fbe5 	bl	8021dcc <XMC_ETH_MAC_GetRxFrameSize>
 8025602:	6078      	str	r0, [r7, #4]
  
    if ((len > 0U) && (len <= (uint32_t)XMC_ETH_MAC_BUF_SIZE))
 8025604:	687b      	ldr	r3, [r7, #4]
 8025606:	2b00      	cmp	r3, #0
 8025608:	d040      	beq.n	802568c <low_level_input+0xac>
 802560a:	687b      	ldr	r3, [r7, #4]
 802560c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8025610:	4293      	cmp	r3, r2
 8025612:	d83b      	bhi.n	802568c <low_level_input+0xac>
    {
#if ETH_PAD_SIZE
    len += ETH_PAD_SIZE;    /* allow room for Ethernet padding */
 8025614:	687b      	ldr	r3, [r7, #4]
 8025616:	3302      	adds	r3, #2
 8025618:	607b      	str	r3, [r7, #4]
#endif
  
      /* We allocate a pbuf chain of pbufs from the pool. */
      p = pbuf_alloc(PBUF_RAW, (u16_t)len, PBUF_POOL);
 802561a:	687b      	ldr	r3, [r7, #4]
 802561c:	b29b      	uxth	r3, r3
 802561e:	2003      	movs	r0, #3
 8025620:	4619      	mov	r1, r3
 8025622:	2203      	movs	r2, #3
 8025624:	f002 fbfa 	bl	8027e1c <pbuf_alloc>
 8025628:	60f8      	str	r0, [r7, #12]
    
      if (p != NULL)
 802562a:	68fb      	ldr	r3, [r7, #12]
 802562c:	2b00      	cmp	r3, #0
 802562e:	d029      	beq.n	8025684 <low_level_input+0xa4>
      {
#if ETH_PAD_SIZE
        pbuf_header(p, -ETH_PAD_SIZE);  /* drop the padding word */
 8025630:	68f8      	ldr	r0, [r7, #12]
 8025632:	f06f 0101 	mvn.w	r1, #1
 8025636:	f002 fd43 	bl	80280c0 <pbuf_header>
#endif
  
        buffer = XMC_ETH_MAC_GetRxBuffer(&eth_mac);
 802563a:	481a      	ldr	r0, [pc, #104]	; (80256a4 <low_level_input+0xc4>)
 802563c:	f7ff fdfc 	bl	8025238 <XMC_ETH_MAC_GetRxBuffer>
 8025640:	6038      	str	r0, [r7, #0]
  
        len = 0U;
 8025642:	2300      	movs	r3, #0
 8025644:	607b      	str	r3, [r7, #4]
        /* We iterate over the pbuf chain until we have read the entire
         * packet into the pbuf. */
        for (q = p; q != NULL; q = q->next)
 8025646:	68fb      	ldr	r3, [r7, #12]
 8025648:	60bb      	str	r3, [r7, #8]
 802564a:	e014      	b.n	8025676 <low_level_input+0x96>
           * This does not necessarily have to be a memcpy, you can also preallocate
           * pbufs for a DMA-enabled MAC and after receiving truncate it to the
           * actually received size. In this case, ensure the tot_len member of the
           * pbuf is the sum of the chained pbuf len members.
           */
           MEMCPY(q->payload, &buffer[len], q->len);
 802564c:	68bb      	ldr	r3, [r7, #8]
 802564e:	6859      	ldr	r1, [r3, #4]
 8025650:	683a      	ldr	r2, [r7, #0]
 8025652:	687b      	ldr	r3, [r7, #4]
 8025654:	441a      	add	r2, r3
 8025656:	68bb      	ldr	r3, [r7, #8]
 8025658:	895b      	ldrh	r3, [r3, #10]
 802565a:	4608      	mov	r0, r1
 802565c:	4611      	mov	r1, r2
 802565e:	461a      	mov	r2, r3
 8025660:	f000 f8a0 	bl	80257a4 <thumb2_memcpy>
           len += q->len;
 8025664:	68bb      	ldr	r3, [r7, #8]
 8025666:	895b      	ldrh	r3, [r3, #10]
 8025668:	461a      	mov	r2, r3
 802566a:	687b      	ldr	r3, [r7, #4]
 802566c:	4413      	add	r3, r2
 802566e:	607b      	str	r3, [r7, #4]
        buffer = XMC_ETH_MAC_GetRxBuffer(&eth_mac);
  
        len = 0U;
        /* We iterate over the pbuf chain until we have read the entire
         * packet into the pbuf. */
        for (q = p; q != NULL; q = q->next)
 8025670:	68bb      	ldr	r3, [r7, #8]
 8025672:	681b      	ldr	r3, [r3, #0]
 8025674:	60bb      	str	r3, [r7, #8]
 8025676:	68bb      	ldr	r3, [r7, #8]
 8025678:	2b00      	cmp	r3, #0
 802567a:	d1e7      	bne.n	802564c <low_level_input+0x6c>
           */
           MEMCPY(q->payload, &buffer[len], q->len);
           len += q->len;
        }
#if ETH_PAD_SIZE
        pbuf_header(p, ETH_PAD_SIZE);    /* Reclaim the padding word */
 802567c:	68f8      	ldr	r0, [r7, #12]
 802567e:	2102      	movs	r1, #2
 8025680:	f002 fd1e 	bl	80280c0 <pbuf_header>
#endif
  
      }
      XMC_ETH_MAC_ReturnRxDescriptor(&eth_mac);
 8025684:	4807      	ldr	r0, [pc, #28]	; (80256a4 <low_level_input+0xc4>)
 8025686:	f7fc fd3f 	bl	8022108 <XMC_ETH_MAC_ReturnRxDescriptor>
 802568a:	e002      	b.n	8025692 <low_level_input+0xb2>
    }
    else
    {
      /* Discard frame */
      XMC_ETH_MAC_ReturnRxDescriptor(&eth_mac);
 802568c:	4805      	ldr	r0, [pc, #20]	; (80256a4 <low_level_input+0xc4>)
 802568e:	f7fc fd3b 	bl	8022108 <XMC_ETH_MAC_ReturnRxDescriptor>
    }
    XMC_ETH_MAC_ResumeRx(&eth_mac);
 8025692:	4804      	ldr	r0, [pc, #16]	; (80256a4 <low_level_input+0xc4>)
 8025694:	f7ff fda6 	bl	80251e4 <XMC_ETH_MAC_ResumeRx>
  }
  return p;  
 8025698:	68fb      	ldr	r3, [r7, #12]
}
 802569a:	4618      	mov	r0, r3
 802569c:	3710      	adds	r7, #16
 802569e:	46bd      	mov	sp, r7
 80256a0:	bd80      	pop	{r7, pc}
 80256a2:	bf00      	nop
 80256a4:	1ffe8a30 	.word	0x1ffe8a30

080256a8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void *arg)
{
 80256a8:	b580      	push	{r7, lr}
 80256aa:	b086      	sub	sp, #24
 80256ac:	af00      	add	r7, sp, #0
 80256ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80256b0:	2300      	movs	r3, #0
 80256b2:	617b      	str	r3, [r7, #20]
  struct eth_hdr *ethhdr;
  struct netif *netif = (struct netif *)arg;
 80256b4:	687b      	ldr	r3, [r7, #4]
 80256b6:	613b      	str	r3, [r7, #16]


    p = low_level_input();
 80256b8:	f7ff ff92 	bl	80255e0 <low_level_input>
 80256bc:	6178      	str	r0, [r7, #20]

    while (p != NULL)
 80256be:	e024      	b.n	802570a <ethernetif_input+0x62>
    {
   	  ethhdr = p->payload;
 80256c0:	697b      	ldr	r3, [r7, #20]
 80256c2:	685b      	ldr	r3, [r3, #4]
 80256c4:	60fb      	str	r3, [r7, #12]
   	  switch (htons(ethhdr->type))
 80256c6:	68fb      	ldr	r3, [r7, #12]
 80256c8:	89db      	ldrh	r3, [r3, #14]
 80256ca:	b29b      	uxth	r3, r3
 80256cc:	4618      	mov	r0, r3
 80256ce:	f001 ff27 	bl	8027520 <lwip_htons>
 80256d2:	4603      	mov	r3, r0
 80256d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80256d8:	d003      	beq.n	80256e2 <ethernetif_input+0x3a>
 80256da:	f640 0206 	movw	r2, #2054	; 0x806
 80256de:	4293      	cmp	r3, r2
 80256e0:	d10c      	bne.n	80256fc <ethernetif_input+0x54>
   	  {
   	    case ETHTYPE_IP:
   	    case ETHTYPE_ARP:
   	      /* full packet send to tcpip_thread to process */
          if (netif->input( p, netif) != ERR_OK)
 80256e2:	693b      	ldr	r3, [r7, #16]
 80256e4:	691b      	ldr	r3, [r3, #16]
 80256e6:	6978      	ldr	r0, [r7, #20]
 80256e8:	6939      	ldr	r1, [r7, #16]
 80256ea:	4798      	blx	r3
 80256ec:	4603      	mov	r3, r0
 80256ee:	2b00      	cmp	r3, #0
 80256f0:	d003      	beq.n	80256fa <ethernetif_input+0x52>
          {
            pbuf_free(p);
 80256f2:	6978      	ldr	r0, [r7, #20]
 80256f4:	f002 fd56 	bl	80281a4 <pbuf_free>
          }

          break;
 80256f8:	e004      	b.n	8025704 <ethernetif_input+0x5c>
 80256fa:	e003      	b.n	8025704 <ethernetif_input+0x5c>

   	    default:
   	      pbuf_free(p);
 80256fc:	6978      	ldr	r0, [r7, #20]
 80256fe:	f002 fd51 	bl	80281a4 <pbuf_free>
   	      break;
 8025702:	bf00      	nop
   	  }
      
      p = low_level_input();
 8025704:	f7ff ff6c 	bl	80255e0 <low_level_input>
 8025708:	6178      	str	r0, [r7, #20]
  struct netif *netif = (struct netif *)arg;


    p = low_level_input();

    while (p != NULL)
 802570a:	697b      	ldr	r3, [r7, #20]
 802570c:	2b00      	cmp	r3, #0
 802570e:	d1d7      	bne.n	80256c0 <ethernetif_input+0x18>
      
      p = low_level_input();
    }


}
 8025710:	3718      	adds	r7, #24
 8025712:	46bd      	mov	sp, r7
 8025714:	bd80      	pop	{r7, pc}
 8025716:	bf00      	nop

08025718 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif* netif)
{
 8025718:	b580      	push	{r7, lr}
 802571a:	b082      	sub	sp, #8
 802571c:	af00      	add	r7, sp, #0
 802571e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));


  netif->output = etharp_output;
 8025720:	687b      	ldr	r3, [r7, #4]
 8025722:	4a0c      	ldr	r2, [pc, #48]	; (8025754 <ethernetif_init+0x3c>)
 8025724:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 8025726:	687b      	ldr	r3, [r7, #4]
 8025728:	4a0b      	ldr	r2, [pc, #44]	; (8025758 <ethernetif_init+0x40>)
 802572a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 802572c:	6878      	ldr	r0, [r7, #4]
 802572e:	f7ff fe5f 	bl	80253f0 <low_level_init>

  sys_timeout(1000U, ethernetif_link_status, NULL);
 8025732:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8025736:	4909      	ldr	r1, [pc, #36]	; (802575c <ethernetif_init+0x44>)
 8025738:	2200      	movs	r2, #0
 802573a:	f002 fef1 	bl	8028520 <sys_timeout>

  netif_set_link_callback(netif, ethernetif_link_callback);
 802573e:	6878      	ldr	r0, [r7, #4]
 8025740:	4907      	ldr	r1, [pc, #28]	; (8025760 <ethernetif_init+0x48>)
 8025742:	f002 fb5b 	bl	8027dfc <netif_set_link_callback>


  return ERR_OK;
 8025746:	2300      	movs	r3, #0
 8025748:	b25b      	sxtb	r3, r3
}
 802574a:	4618      	mov	r0, r3
 802574c:	3708      	adds	r7, #8
 802574e:	46bd      	mov	sp, r7
 8025750:	bd80      	pop	{r7, pc}
 8025752:	bf00      	nop
 8025754:	08025f21 	.word	0x08025f21
 8025758:	08025531 	.word	0x08025531
 802575c:	08025391 	.word	0x08025391
 8025760:	08025285 	.word	0x08025285

08025764 <ETH0_0_IRQHandler>:

void IRQ_Hdlr_108(void)
{
 8025764:	b580      	push	{r7, lr}
 8025766:	af00      	add	r7, sp, #0
  XMC_ETH_MAC_ClearEventStatus(&eth_mac, XMC_ETH_MAC_EVENT_RECEIVE);
 8025768:	4803      	ldr	r0, [pc, #12]	; (8025778 <ETH0_0_IRQHandler+0x14>)
 802576a:	2140      	movs	r1, #64	; 0x40
 802576c:	f7fc fc9c 	bl	80220a8 <XMC_ETH_MAC_ClearEventStatus>
    ethernetif_input(&xnetif);
 8025770:	4802      	ldr	r0, [pc, #8]	; (802577c <ETH0_0_IRQHandler+0x18>)
 8025772:	f7ff ff99 	bl	80256a8 <ethernetif_input>
}
 8025776:	bd80      	pop	{r7, pc}
 8025778:	1ffe8a30 	.word	0x1ffe8a30
 802577c:	1ffe8a60 	.word	0x1ffe8a60

08025780 <ETH_LWIP_Error>:
    ethernetif_input(&xnetif);
}

/*Weak function to be called incase of error*/
__WEAK void ETH_LWIP_Error (ETH_LWIP_ERROR_t error_code)
{
 8025780:	b480      	push	{r7}
 8025782:	b083      	sub	sp, #12
 8025784:	af00      	add	r7, sp, #0
 8025786:	4603      	mov	r3, r0
 8025788:	71fb      	strb	r3, [r7, #7]
  switch (error_code)
 802578a:	79fb      	ldrb	r3, [r7, #7]
 802578c:	2b03      	cmp	r3, #3
 802578e:	d004      	beq.n	802579a <ETH_LWIP_Error+0x1a>
 8025790:	2b04      	cmp	r3, #4
 8025792:	d003      	beq.n	802579c <ETH_LWIP_Error+0x1c>
 8025794:	2b02      	cmp	r3, #2
 8025796:	d002      	beq.n	802579e <ETH_LWIP_Error+0x1e>
 8025798:	e002      	b.n	80257a0 <ETH_LWIP_Error+0x20>
  {
    case ETH_LWIP_ERROR_PHY_DEVICE_ID:
       /* Wrong PHY address configured in the ETH_LWIP APP Network Interface.
        * Because the connect PHY does not match the configuration or the PHYADR is wrong*/
       break;
 802579a:	e002      	b.n	80257a2 <ETH_LWIP_Error+0x22>

   case ETH_LWIP_ERROR_PHY_TIMEOUT:
      /* PHY did not respond.*/
      break;
 802579c:	e001      	b.n	80257a2 <ETH_LWIP_Error+0x22>

   case ETH_LWIP_ERROR_PHY_ERROR:
     /*PHY register update failed*/
     break;
 802579e:	e000      	b.n	80257a2 <ETH_LWIP_Error+0x22>

   default:
     break;
 80257a0:	bf00      	nop
  }

  for (;;);
 80257a2:	e7fe      	b.n	80257a2 <ETH_LWIP_Error+0x22>

080257a4 <thumb2_memcpy>:
   stack to improve its performance.  It copies 4 bytes at a time and
   unrolls the loop to perform 4 of these copies per loop iteration.
*/
__attribute__((naked)) void thumb2_memcpy(void* pDest, const void* pSource, size_t length)
{
    __asm (
 80257a4:	0913      	lsrs	r3, r2, #4
 80257a6:	d011      	beq.n	80257cc <thumb2_memcpy+0x28>
 80257a8:	f851 cb04 	ldr.w	ip, [r1], #4
 80257ac:	f840 cb04 	str.w	ip, [r0], #4
 80257b0:	f851 cb04 	ldr.w	ip, [r1], #4
 80257b4:	f840 cb04 	str.w	ip, [r0], #4
 80257b8:	f851 cb04 	ldr.w	ip, [r1], #4
 80257bc:	f840 cb04 	str.w	ip, [r0], #4
 80257c0:	f851 cb04 	ldr.w	ip, [r1], #4
 80257c4:	f840 cb04 	str.w	ip, [r0], #4
 80257c8:	3b01      	subs	r3, #1
 80257ca:	d1ed      	bne.n	80257a8 <thumb2_memcpy+0x4>
 80257cc:	f012 030f 	ands.w	r3, r2, #15
 80257d0:	d005      	beq.n	80257de <thumb2_memcpy+0x3a>
 80257d2:	f811 cb01 	ldrb.w	ip, [r1], #1
 80257d6:	f800 cb01 	strb.w	ip, [r0], #1
 80257da:	3b01      	subs	r3, #1
 80257dc:	d1f9      	bne.n	80257d2 <thumb2_memcpy+0x2e>
 80257de:	4770      	bx	lr

080257e0 <sys_now>:
#include "include/arch/cc.h"
#include "../include/lwip/sys.h"


u32_t sys_now(void)
{
 80257e0:	b580      	push	{r7, lr}
 80257e2:	af00      	add	r7, sp, #0
  return (u32_t)(SYSTIMER_GetTickCount() * 0.01F);
 80257e4:	f7fe f862 	bl	80238ac <SYSTIMER_GetTickCount>
 80257e8:	ee07 0a90 	vmov	s15, r0
 80257ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80257f0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8025804 <sys_now+0x24>
 80257f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80257f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80257fc:	ee17 3a90 	vmov	r3, s15

}
 8025800:	4618      	mov	r0, r3
 8025802:	bd80      	pop	{r7, pc}
 8025804:	3c23d70a 	.word	0x3c23d70a

08025808 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8025808:	b580      	push	{r7, lr}
 802580a:	b082      	sub	sp, #8
 802580c:	af00      	add	r7, sp, #0
 802580e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8025810:	4915      	ldr	r1, [pc, #84]	; (8025868 <etharp_free_entry+0x60>)
 8025812:	687a      	ldr	r2, [r7, #4]
 8025814:	4613      	mov	r3, r2
 8025816:	009b      	lsls	r3, r3, #2
 8025818:	4413      	add	r3, r2
 802581a:	009b      	lsls	r3, r3, #2
 802581c:	440b      	add	r3, r1
 802581e:	681b      	ldr	r3, [r3, #0]
 8025820:	2b00      	cmp	r3, #0
 8025822:	d013      	beq.n	802584c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8025824:	4910      	ldr	r1, [pc, #64]	; (8025868 <etharp_free_entry+0x60>)
 8025826:	687a      	ldr	r2, [r7, #4]
 8025828:	4613      	mov	r3, r2
 802582a:	009b      	lsls	r3, r3, #2
 802582c:	4413      	add	r3, r2
 802582e:	009b      	lsls	r3, r3, #2
 8025830:	440b      	add	r3, r1
 8025832:	681b      	ldr	r3, [r3, #0]
 8025834:	4618      	mov	r0, r3
 8025836:	f002 fcb5 	bl	80281a4 <pbuf_free>
    arp_table[i].q = NULL;
 802583a:	490b      	ldr	r1, [pc, #44]	; (8025868 <etharp_free_entry+0x60>)
 802583c:	687a      	ldr	r2, [r7, #4]
 802583e:	4613      	mov	r3, r2
 8025840:	009b      	lsls	r3, r3, #2
 8025842:	4413      	add	r3, r2
 8025844:	009b      	lsls	r3, r3, #2
 8025846:	440b      	add	r3, r1
 8025848:	2200      	movs	r2, #0
 802584a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 802584c:	4906      	ldr	r1, [pc, #24]	; (8025868 <etharp_free_entry+0x60>)
 802584e:	687a      	ldr	r2, [r7, #4]
 8025850:	4613      	mov	r3, r2
 8025852:	009b      	lsls	r3, r3, #2
 8025854:	4413      	add	r3, r2
 8025856:	009b      	lsls	r3, r3, #2
 8025858:	440b      	add	r3, r1
 802585a:	3310      	adds	r3, #16
 802585c:	2200      	movs	r2, #0
 802585e:	709a      	strb	r2, [r3, #2]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8025860:	3708      	adds	r7, #8
 8025862:	46bd      	mov	sp, r7
 8025864:	bd80      	pop	{r7, pc}
 8025866:	bf00      	nop
 8025868:	1ffe9b9c 	.word	0x1ffe9b9c

0802586c <etharp_tmr>:
 * This function should be called every ETHARP_TMR_INTERVAL milliseconds (5 seconds),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 802586c:	b580      	push	{r7, lr}
 802586e:	b082      	sub	sp, #8
 8025870:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8025872:	2300      	movs	r3, #0
 8025874:	71fb      	strb	r3, [r7, #7]
 8025876:	e05e      	b.n	8025936 <etharp_tmr+0xca>
    u8_t state = arp_table[i].state;
 8025878:	79fa      	ldrb	r2, [r7, #7]
 802587a:	4932      	ldr	r1, [pc, #200]	; (8025944 <etharp_tmr+0xd8>)
 802587c:	4613      	mov	r3, r2
 802587e:	009b      	lsls	r3, r3, #2
 8025880:	4413      	add	r3, r2
 8025882:	009b      	lsls	r3, r3, #2
 8025884:	440b      	add	r3, r1
 8025886:	3310      	adds	r3, #16
 8025888:	789b      	ldrb	r3, [r3, #2]
 802588a:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 802588c:	79bb      	ldrb	r3, [r7, #6]
 802588e:	2b00      	cmp	r3, #0
 8025890:	d04e      	beq.n	8025930 <etharp_tmr+0xc4>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8025892:	79fa      	ldrb	r2, [r7, #7]
 8025894:	492b      	ldr	r1, [pc, #172]	; (8025944 <etharp_tmr+0xd8>)
 8025896:	4613      	mov	r3, r2
 8025898:	009b      	lsls	r3, r3, #2
 802589a:	4413      	add	r3, r2
 802589c:	009b      	lsls	r3, r3, #2
 802589e:	440b      	add	r3, r1
 80258a0:	3310      	adds	r3, #16
 80258a2:	78db      	ldrb	r3, [r3, #3]
 80258a4:	3301      	adds	r3, #1
 80258a6:	b2d8      	uxtb	r0, r3
 80258a8:	4926      	ldr	r1, [pc, #152]	; (8025944 <etharp_tmr+0xd8>)
 80258aa:	4613      	mov	r3, r2
 80258ac:	009b      	lsls	r3, r3, #2
 80258ae:	4413      	add	r3, r2
 80258b0:	009b      	lsls	r3, r3, #2
 80258b2:	440b      	add	r3, r1
 80258b4:	3310      	adds	r3, #16
 80258b6:	4602      	mov	r2, r0
 80258b8:	70da      	strb	r2, [r3, #3]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80258ba:	79fa      	ldrb	r2, [r7, #7]
 80258bc:	4921      	ldr	r1, [pc, #132]	; (8025944 <etharp_tmr+0xd8>)
 80258be:	4613      	mov	r3, r2
 80258c0:	009b      	lsls	r3, r3, #2
 80258c2:	4413      	add	r3, r2
 80258c4:	009b      	lsls	r3, r3, #2
 80258c6:	440b      	add	r3, r1
 80258c8:	3310      	adds	r3, #16
 80258ca:	78db      	ldrb	r3, [r3, #3]
 80258cc:	2bef      	cmp	r3, #239	; 0xef
 80258ce:	d815      	bhi.n	80258fc <etharp_tmr+0x90>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80258d0:	79fa      	ldrb	r2, [r7, #7]
 80258d2:	491c      	ldr	r1, [pc, #112]	; (8025944 <etharp_tmr+0xd8>)
 80258d4:	4613      	mov	r3, r2
 80258d6:	009b      	lsls	r3, r3, #2
 80258d8:	4413      	add	r3, r2
 80258da:	009b      	lsls	r3, r3, #2
 80258dc:	440b      	add	r3, r1
 80258de:	3310      	adds	r3, #16
 80258e0:	789b      	ldrb	r3, [r3, #2]
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80258e2:	2b01      	cmp	r3, #1
 80258e4:	d10f      	bne.n	8025906 <etharp_tmr+0x9a>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80258e6:	79fa      	ldrb	r2, [r7, #7]
 80258e8:	4916      	ldr	r1, [pc, #88]	; (8025944 <etharp_tmr+0xd8>)
 80258ea:	4613      	mov	r3, r2
 80258ec:	009b      	lsls	r3, r3, #2
 80258ee:	4413      	add	r3, r2
 80258f0:	009b      	lsls	r3, r3, #2
 80258f2:	440b      	add	r3, r1
 80258f4:	3310      	adds	r3, #16
 80258f6:	78db      	ldrb	r3, [r3, #3]
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80258f8:	2b01      	cmp	r3, #1
 80258fa:	d904      	bls.n	8025906 <etharp_tmr+0x9a>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80258fc:	79fb      	ldrb	r3, [r7, #7]
 80258fe:	4618      	mov	r0, r3
 8025900:	f7ff ff82 	bl	8025808 <etharp_free_entry>
 8025904:	e014      	b.n	8025930 <etharp_tmr+0xc4>
      }
      else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING) {
 8025906:	79fa      	ldrb	r2, [r7, #7]
 8025908:	490e      	ldr	r1, [pc, #56]	; (8025944 <etharp_tmr+0xd8>)
 802590a:	4613      	mov	r3, r2
 802590c:	009b      	lsls	r3, r3, #2
 802590e:	4413      	add	r3, r2
 8025910:	009b      	lsls	r3, r3, #2
 8025912:	440b      	add	r3, r1
 8025914:	3310      	adds	r3, #16
 8025916:	789b      	ldrb	r3, [r3, #2]
 8025918:	2b03      	cmp	r3, #3
 802591a:	d109      	bne.n	8025930 <etharp_tmr+0xc4>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 802591c:	79fa      	ldrb	r2, [r7, #7]
 802591e:	4909      	ldr	r1, [pc, #36]	; (8025944 <etharp_tmr+0xd8>)
 8025920:	4613      	mov	r3, r2
 8025922:	009b      	lsls	r3, r3, #2
 8025924:	4413      	add	r3, r2
 8025926:	009b      	lsls	r3, r3, #2
 8025928:	440b      	add	r3, r1
 802592a:	3310      	adds	r3, #16
 802592c:	2202      	movs	r2, #2
 802592e:	709a      	strb	r2, [r3, #2]
{
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8025930:	79fb      	ldrb	r3, [r7, #7]
 8025932:	3301      	adds	r3, #1
 8025934:	71fb      	strb	r3, [r7, #7]
 8025936:	79fb      	ldrb	r3, [r7, #7]
 8025938:	2b09      	cmp	r3, #9
 802593a:	d99d      	bls.n	8025878 <etharp_tmr+0xc>
        /* resend an ARP query here? */
      }
#endif /* ARP_QUEUEING */
    }
  }
}
 802593c:	3708      	adds	r7, #8
 802593e:	46bd      	mov	sp, r7
 8025940:	bd80      	pop	{r7, pc}
 8025942:	bf00      	nop
 8025944:	1ffe9b9c 	.word	0x1ffe9b9c

08025948 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
 8025948:	b580      	push	{r7, lr}
 802594a:	b086      	sub	sp, #24
 802594c:	af00      	add	r7, sp, #0
 802594e:	6078      	str	r0, [r7, #4]
 8025950:	460b      	mov	r3, r1
 8025952:	70fb      	strb	r3, [r7, #3]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8025954:	230a      	movs	r3, #10
 8025956:	75fb      	strb	r3, [r7, #23]
 8025958:	230a      	movs	r3, #10
 802595a:	75bb      	strb	r3, [r7, #22]
  s8_t empty = ARP_TABLE_SIZE;
 802595c:	230a      	movs	r3, #10
 802595e:	757b      	strb	r3, [r7, #21]
  u8_t i = 0, age_pending = 0, age_stable = 0;
 8025960:	2300      	movs	r3, #0
 8025962:	753b      	strb	r3, [r7, #20]
 8025964:	2300      	movs	r3, #0
 8025966:	74fb      	strb	r3, [r7, #19]
 8025968:	2300      	movs	r3, #0
 802596a:	74bb      	strb	r3, [r7, #18]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 802596c:	230a      	movs	r3, #10
 802596e:	747b      	strb	r3, [r7, #17]
  /* its age */
  u8_t age_queue = 0;
 8025970:	2300      	movs	r3, #0
 8025972:	743b      	strb	r3, [r7, #16]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8025974:	2300      	movs	r3, #0
 8025976:	753b      	strb	r3, [r7, #20]
 8025978:	e084      	b.n	8025a84 <etharp_find_entry+0x13c>
    u8_t state = arp_table[i].state;
 802597a:	7d3a      	ldrb	r2, [r7, #20]
 802597c:	496b      	ldr	r1, [pc, #428]	; (8025b2c <etharp_find_entry+0x1e4>)
 802597e:	4613      	mov	r3, r2
 8025980:	009b      	lsls	r3, r3, #2
 8025982:	4413      	add	r3, r2
 8025984:	009b      	lsls	r3, r3, #2
 8025986:	440b      	add	r3, r1
 8025988:	3310      	adds	r3, #16
 802598a:	789b      	ldrb	r3, [r3, #2]
 802598c:	73fb      	strb	r3, [r7, #15]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 802598e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8025992:	2b0a      	cmp	r3, #10
 8025994:	d105      	bne.n	80259a2 <etharp_find_entry+0x5a>
 8025996:	7bfb      	ldrb	r3, [r7, #15]
 8025998:	2b00      	cmp	r3, #0
 802599a:	d102      	bne.n	80259a2 <etharp_find_entry+0x5a>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 802599c:	7d3b      	ldrb	r3, [r7, #20]
 802599e:	757b      	strb	r3, [r7, #21]
 80259a0:	e06d      	b.n	8025a7e <etharp_find_entry+0x136>
    } else if (state != ETHARP_STATE_EMPTY) {
 80259a2:	7bfb      	ldrb	r3, [r7, #15]
 80259a4:	2b00      	cmp	r3, #0
 80259a6:	d06a      	beq.n	8025a7e <etharp_find_entry+0x136>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
 80259a8:	687b      	ldr	r3, [r7, #4]
 80259aa:	2b00      	cmp	r3, #0
 80259ac:	d00d      	beq.n	80259ca <etharp_find_entry+0x82>
 80259ae:	687b      	ldr	r3, [r7, #4]
 80259b0:	6819      	ldr	r1, [r3, #0]
 80259b2:	7d3a      	ldrb	r2, [r7, #20]
 80259b4:	485d      	ldr	r0, [pc, #372]	; (8025b2c <etharp_find_entry+0x1e4>)
 80259b6:	4613      	mov	r3, r2
 80259b8:	009b      	lsls	r3, r3, #2
 80259ba:	4413      	add	r3, r2
 80259bc:	009b      	lsls	r3, r3, #2
 80259be:	4403      	add	r3, r0
 80259c0:	685b      	ldr	r3, [r3, #4]
 80259c2:	4299      	cmp	r1, r3
 80259c4:	d101      	bne.n	80259ca <etharp_find_entry+0x82>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 80259c6:	7d3b      	ldrb	r3, [r7, #20]
 80259c8:	e0aa      	b.n	8025b20 <etharp_find_entry+0x1d8>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80259ca:	7bfb      	ldrb	r3, [r7, #15]
 80259cc:	2b01      	cmp	r3, #1
 80259ce:	d13b      	bne.n	8025a48 <etharp_find_entry+0x100>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80259d0:	7d3a      	ldrb	r2, [r7, #20]
 80259d2:	4956      	ldr	r1, [pc, #344]	; (8025b2c <etharp_find_entry+0x1e4>)
 80259d4:	4613      	mov	r3, r2
 80259d6:	009b      	lsls	r3, r3, #2
 80259d8:	4413      	add	r3, r2
 80259da:	009b      	lsls	r3, r3, #2
 80259dc:	440b      	add	r3, r1
 80259de:	681b      	ldr	r3, [r3, #0]
 80259e0:	2b00      	cmp	r3, #0
 80259e2:	d018      	beq.n	8025a16 <etharp_find_entry+0xce>
          if (arp_table[i].ctime >= age_queue) {
 80259e4:	7d3a      	ldrb	r2, [r7, #20]
 80259e6:	4951      	ldr	r1, [pc, #324]	; (8025b2c <etharp_find_entry+0x1e4>)
 80259e8:	4613      	mov	r3, r2
 80259ea:	009b      	lsls	r3, r3, #2
 80259ec:	4413      	add	r3, r2
 80259ee:	009b      	lsls	r3, r3, #2
 80259f0:	440b      	add	r3, r1
 80259f2:	3310      	adds	r3, #16
 80259f4:	78db      	ldrb	r3, [r3, #3]
 80259f6:	7c3a      	ldrb	r2, [r7, #16]
 80259f8:	429a      	cmp	r2, r3
 80259fa:	d840      	bhi.n	8025a7e <etharp_find_entry+0x136>
            old_queue = i;
 80259fc:	7d3b      	ldrb	r3, [r7, #20]
 80259fe:	747b      	strb	r3, [r7, #17]
            age_queue = arp_table[i].ctime;
 8025a00:	7d3a      	ldrb	r2, [r7, #20]
 8025a02:	494a      	ldr	r1, [pc, #296]	; (8025b2c <etharp_find_entry+0x1e4>)
 8025a04:	4613      	mov	r3, r2
 8025a06:	009b      	lsls	r3, r3, #2
 8025a08:	4413      	add	r3, r2
 8025a0a:	009b      	lsls	r3, r3, #2
 8025a0c:	440b      	add	r3, r1
 8025a0e:	3310      	adds	r3, #16
 8025a10:	78db      	ldrb	r3, [r3, #3]
 8025a12:	743b      	strb	r3, [r7, #16]
 8025a14:	e033      	b.n	8025a7e <etharp_find_entry+0x136>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8025a16:	7d3a      	ldrb	r2, [r7, #20]
 8025a18:	4944      	ldr	r1, [pc, #272]	; (8025b2c <etharp_find_entry+0x1e4>)
 8025a1a:	4613      	mov	r3, r2
 8025a1c:	009b      	lsls	r3, r3, #2
 8025a1e:	4413      	add	r3, r2
 8025a20:	009b      	lsls	r3, r3, #2
 8025a22:	440b      	add	r3, r1
 8025a24:	3310      	adds	r3, #16
 8025a26:	78db      	ldrb	r3, [r3, #3]
 8025a28:	7cfa      	ldrb	r2, [r7, #19]
 8025a2a:	429a      	cmp	r2, r3
 8025a2c:	d827      	bhi.n	8025a7e <etharp_find_entry+0x136>
            old_pending = i;
 8025a2e:	7d3b      	ldrb	r3, [r7, #20]
 8025a30:	75fb      	strb	r3, [r7, #23]
            age_pending = arp_table[i].ctime;
 8025a32:	7d3a      	ldrb	r2, [r7, #20]
 8025a34:	493d      	ldr	r1, [pc, #244]	; (8025b2c <etharp_find_entry+0x1e4>)
 8025a36:	4613      	mov	r3, r2
 8025a38:	009b      	lsls	r3, r3, #2
 8025a3a:	4413      	add	r3, r2
 8025a3c:	009b      	lsls	r3, r3, #2
 8025a3e:	440b      	add	r3, r1
 8025a40:	3310      	adds	r3, #16
 8025a42:	78db      	ldrb	r3, [r3, #3]
 8025a44:	74fb      	strb	r3, [r7, #19]
 8025a46:	e01a      	b.n	8025a7e <etharp_find_entry+0x136>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8025a48:	7bfb      	ldrb	r3, [r7, #15]
 8025a4a:	2b01      	cmp	r3, #1
 8025a4c:	d917      	bls.n	8025a7e <etharp_find_entry+0x136>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8025a4e:	7d3a      	ldrb	r2, [r7, #20]
 8025a50:	4936      	ldr	r1, [pc, #216]	; (8025b2c <etharp_find_entry+0x1e4>)
 8025a52:	4613      	mov	r3, r2
 8025a54:	009b      	lsls	r3, r3, #2
 8025a56:	4413      	add	r3, r2
 8025a58:	009b      	lsls	r3, r3, #2
 8025a5a:	440b      	add	r3, r1
 8025a5c:	3310      	adds	r3, #16
 8025a5e:	78db      	ldrb	r3, [r3, #3]
 8025a60:	7cba      	ldrb	r2, [r7, #18]
 8025a62:	429a      	cmp	r2, r3
 8025a64:	d80b      	bhi.n	8025a7e <etharp_find_entry+0x136>
            old_stable = i;
 8025a66:	7d3b      	ldrb	r3, [r7, #20]
 8025a68:	75bb      	strb	r3, [r7, #22]
            age_stable = arp_table[i].ctime;
 8025a6a:	7d3a      	ldrb	r2, [r7, #20]
 8025a6c:	492f      	ldr	r1, [pc, #188]	; (8025b2c <etharp_find_entry+0x1e4>)
 8025a6e:	4613      	mov	r3, r2
 8025a70:	009b      	lsls	r3, r3, #2
 8025a72:	4413      	add	r3, r2
 8025a74:	009b      	lsls	r3, r3, #2
 8025a76:	440b      	add	r3, r1
 8025a78:	3310      	adds	r3, #16
 8025a7a:	78db      	ldrb	r3, [r3, #3]
 8025a7c:	74bb      	strb	r3, [r7, #18]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8025a7e:	7d3b      	ldrb	r3, [r7, #20]
 8025a80:	3301      	adds	r3, #1
 8025a82:	753b      	strb	r3, [r7, #20]
 8025a84:	7d3b      	ldrb	r3, [r7, #20]
 8025a86:	2b09      	cmp	r3, #9
 8025a88:	f67f af77 	bls.w	802597a <etharp_find_entry+0x32>
    }
  }
  /* { we have no match } => try to create a new entry */
   
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8025a8c:	78fb      	ldrb	r3, [r7, #3]
 8025a8e:	f003 0302 	and.w	r3, r3, #2
 8025a92:	2b00      	cmp	r3, #0
 8025a94:	d108      	bne.n	8025aa8 <etharp_find_entry+0x160>
 8025a96:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8025a9a:	2b0a      	cmp	r3, #10
 8025a9c:	d106      	bne.n	8025aac <etharp_find_entry+0x164>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8025a9e:	78fb      	ldrb	r3, [r7, #3]
 8025aa0:	f003 0301 	and.w	r3, r3, #1
 8025aa4:	2b00      	cmp	r3, #0
 8025aa6:	d101      	bne.n	8025aac <etharp_find_entry+0x164>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8025aa8:	23ff      	movs	r3, #255	; 0xff
 8025aaa:	e039      	b.n	8025b20 <etharp_find_entry+0x1d8>
   * 
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */ 

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8025aac:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8025ab0:	2b09      	cmp	r3, #9
 8025ab2:	dc02      	bgt.n	8025aba <etharp_find_entry+0x172>
    i = empty;
 8025ab4:	7d7b      	ldrb	r3, [r7, #21]
 8025ab6:	753b      	strb	r3, [r7, #20]
 8025ab8:	e01a      	b.n	8025af0 <etharp_find_entry+0x1a8>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8025aba:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8025abe:	2b09      	cmp	r3, #9
 8025ac0:	dc02      	bgt.n	8025ac8 <etharp_find_entry+0x180>
      /* recycle oldest stable*/
      i = old_stable;
 8025ac2:	7dbb      	ldrb	r3, [r7, #22]
 8025ac4:	753b      	strb	r3, [r7, #20]
 8025ac6:	e00f      	b.n	8025ae8 <etharp_find_entry+0x1a0>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8025ac8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8025acc:	2b09      	cmp	r3, #9
 8025ace:	dc02      	bgt.n	8025ad6 <etharp_find_entry+0x18e>
      /* recycle oldest pending */
      i = old_pending;
 8025ad0:	7dfb      	ldrb	r3, [r7, #23]
 8025ad2:	753b      	strb	r3, [r7, #20]
 8025ad4:	e008      	b.n	8025ae8 <etharp_find_entry+0x1a0>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8025ad6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8025ada:	2b09      	cmp	r3, #9
 8025adc:	dc02      	bgt.n	8025ae4 <etharp_find_entry+0x19c>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8025ade:	7c7b      	ldrb	r3, [r7, #17]
 8025ae0:	753b      	strb	r3, [r7, #20]
 8025ae2:	e001      	b.n	8025ae8 <etharp_find_entry+0x1a0>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8025ae4:	23ff      	movs	r3, #255	; 0xff
 8025ae6:	e01b      	b.n	8025b20 <etharp_find_entry+0x1d8>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 8025ae8:	7d3b      	ldrb	r3, [r7, #20]
 8025aea:	4618      	mov	r0, r3
 8025aec:	f7ff fe8c 	bl	8025808 <etharp_free_entry>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8025af0:	687b      	ldr	r3, [r7, #4]
 8025af2:	2b00      	cmp	r3, #0
 8025af4:	d009      	beq.n	8025b0a <etharp_find_entry+0x1c2>
    /* set IP address */
    ip_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8025af6:	7d3a      	ldrb	r2, [r7, #20]
 8025af8:	687b      	ldr	r3, [r7, #4]
 8025afa:	6819      	ldr	r1, [r3, #0]
 8025afc:	480b      	ldr	r0, [pc, #44]	; (8025b2c <etharp_find_entry+0x1e4>)
 8025afe:	4613      	mov	r3, r2
 8025b00:	009b      	lsls	r3, r3, #2
 8025b02:	4413      	add	r3, r2
 8025b04:	009b      	lsls	r3, r3, #2
 8025b06:	4403      	add	r3, r0
 8025b08:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8025b0a:	7d3a      	ldrb	r2, [r7, #20]
 8025b0c:	4907      	ldr	r1, [pc, #28]	; (8025b2c <etharp_find_entry+0x1e4>)
 8025b0e:	4613      	mov	r3, r2
 8025b10:	009b      	lsls	r3, r3, #2
 8025b12:	4413      	add	r3, r2
 8025b14:	009b      	lsls	r3, r3, #2
 8025b16:	440b      	add	r3, r1
 8025b18:	3310      	adds	r3, #16
 8025b1a:	2200      	movs	r2, #0
 8025b1c:	70da      	strb	r2, [r3, #3]
  return (err_t)i;
 8025b1e:	7d3b      	ldrb	r3, [r7, #20]
 8025b20:	b25b      	sxtb	r3, r3
}
 8025b22:	4618      	mov	r0, r3
 8025b24:	3718      	adds	r7, #24
 8025b26:	46bd      	mov	sp, r7
 8025b28:	bd80      	pop	{r7, pc}
 8025b2a:	bf00      	nop
 8025b2c:	1ffe9b9c 	.word	0x1ffe9b9c

08025b30 <etharp_send_ip>:
 * @params dst the destination MAC address to be copied into the ethernet header
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t
etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
{
 8025b30:	b580      	push	{r7, lr}
 8025b32:	b086      	sub	sp, #24
 8025b34:	af00      	add	r7, sp, #0
 8025b36:	60f8      	str	r0, [r7, #12]
 8025b38:	60b9      	str	r1, [r7, #8]
 8025b3a:	607a      	str	r2, [r7, #4]
 8025b3c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
 8025b3e:	68bb      	ldr	r3, [r7, #8]
 8025b40:	685b      	ldr	r3, [r3, #4]
 8025b42:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETHARP_HWADDR_LEN));
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8025b44:	697b      	ldr	r3, [r7, #20]
 8025b46:	3302      	adds	r3, #2
 8025b48:	4618      	mov	r0, r3
 8025b4a:	6839      	ldr	r1, [r7, #0]
 8025b4c:	2206      	movs	r2, #6
 8025b4e:	f7ff fe29 	bl	80257a4 <thumb2_memcpy>
  ETHADDR16_COPY(&ethhdr->src, src);
 8025b52:	697b      	ldr	r3, [r7, #20]
 8025b54:	3308      	adds	r3, #8
 8025b56:	4618      	mov	r0, r3
 8025b58:	6879      	ldr	r1, [r7, #4]
 8025b5a:	2206      	movs	r2, #6
 8025b5c:	f7ff fe22 	bl	80257a4 <thumb2_memcpy>
  ethhdr->type = PP_HTONS(ETHTYPE_IP);
 8025b60:	697b      	ldr	r3, [r7, #20]
 8025b62:	2200      	movs	r2, #0
 8025b64:	f042 0208 	orr.w	r2, r2, #8
 8025b68:	739a      	strb	r2, [r3, #14]
 8025b6a:	2200      	movs	r2, #0
 8025b6c:	73da      	strb	r2, [r3, #15]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
 8025b6e:	68fb      	ldr	r3, [r7, #12]
 8025b70:	699b      	ldr	r3, [r3, #24]
 8025b72:	68f8      	ldr	r0, [r7, #12]
 8025b74:	68b9      	ldr	r1, [r7, #8]
 8025b76:	4798      	blx	r3
 8025b78:	4603      	mov	r3, r0
}
 8025b7a:	4618      	mov	r0, r3
 8025b7c:	3718      	adds	r7, #24
 8025b7e:	46bd      	mov	sp, r7
 8025b80:	bd80      	pop	{r7, pc}
 8025b82:	bf00      	nop

08025b84 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, ip_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8025b84:	b580      	push	{r7, lr}
 8025b86:	b086      	sub	sp, #24
 8025b88:	af00      	add	r7, sp, #0
 8025b8a:	60f8      	str	r0, [r7, #12]
 8025b8c:	60b9      	str	r1, [r7, #8]
 8025b8e:	607a      	str	r2, [r7, #4]
 8025b90:	70fb      	strb	r3, [r7, #3]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
 8025b92:	68bb      	ldr	r3, [r7, #8]
 8025b94:	2b00      	cmp	r3, #0
 8025b96:	d012      	beq.n	8025bbe <etharp_update_arp_entry+0x3a>
 8025b98:	68bb      	ldr	r3, [r7, #8]
 8025b9a:	681b      	ldr	r3, [r3, #0]
 8025b9c:	2b00      	cmp	r3, #0
 8025b9e:	d00e      	beq.n	8025bbe <etharp_update_arp_entry+0x3a>
      ip_addr_isbroadcast(ipaddr, netif) ||
 8025ba0:	68bb      	ldr	r3, [r7, #8]
 8025ba2:	681b      	ldr	r3, [r3, #0]
 8025ba4:	4618      	mov	r0, r3
 8025ba6:	68f9      	ldr	r1, [r7, #12]
 8025ba8:	f001 fb62 	bl	8027270 <ip4_addr_isbroadcast>
 8025bac:	4603      	mov	r3, r0
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
 8025bae:	2b00      	cmp	r3, #0
 8025bb0:	d105      	bne.n	8025bbe <etharp_update_arp_entry+0x3a>
      ip_addr_isbroadcast(ipaddr, netif) ||
      ip_addr_ismulticast(ipaddr)) {
 8025bb2:	68bb      	ldr	r3, [r7, #8]
 8025bb4:	681b      	ldr	r3, [r3, #0]
 8025bb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
      ip_addr_isbroadcast(ipaddr, netif) ||
 8025bba:	2be0      	cmp	r3, #224	; 0xe0
 8025bbc:	d101      	bne.n	8025bc2 <etharp_update_arp_entry+0x3e>
      ip_addr_ismulticast(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8025bbe:	23f2      	movs	r3, #242	; 0xf2
 8025bc0:	e067      	b.n	8025c92 <etharp_update_arp_entry+0x10e>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags);
 8025bc2:	78fb      	ldrb	r3, [r7, #3]
 8025bc4:	68b8      	ldr	r0, [r7, #8]
 8025bc6:	4619      	mov	r1, r3
 8025bc8:	f7ff febe 	bl	8025948 <etharp_find_entry>
 8025bcc:	4603      	mov	r3, r0
 8025bce:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8025bd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8025bd4:	2b00      	cmp	r3, #0
 8025bd6:	da01      	bge.n	8025bdc <etharp_update_arp_entry+0x58>
    return (err_t)i;
 8025bd8:	7dfb      	ldrb	r3, [r7, #23]
 8025bda:	e05a      	b.n	8025c92 <etharp_update_arp_entry+0x10e>
    arp_table[i].state = ETHARP_STATE_STATIC;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8025bdc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8025be0:	492e      	ldr	r1, [pc, #184]	; (8025c9c <etharp_update_arp_entry+0x118>)
 8025be2:	4613      	mov	r3, r2
 8025be4:	009b      	lsls	r3, r3, #2
 8025be6:	4413      	add	r3, r2
 8025be8:	009b      	lsls	r3, r3, #2
 8025bea:	440b      	add	r3, r1
 8025bec:	3310      	adds	r3, #16
 8025bee:	2202      	movs	r2, #2
 8025bf0:	709a      	strb	r2, [r3, #2]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8025bf2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8025bf6:	4929      	ldr	r1, [pc, #164]	; (8025c9c <etharp_update_arp_entry+0x118>)
 8025bf8:	4613      	mov	r3, r2
 8025bfa:	009b      	lsls	r3, r3, #2
 8025bfc:	4413      	add	r3, r2
 8025bfe:	009b      	lsls	r3, r3, #2
 8025c00:	440b      	add	r3, r1
 8025c02:	3308      	adds	r3, #8
 8025c04:	68fa      	ldr	r2, [r7, #12]
 8025c06:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  snmp_insert_arpidx_tree(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8025c08:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8025c0c:	4613      	mov	r3, r2
 8025c0e:	009b      	lsls	r3, r3, #2
 8025c10:	4413      	add	r3, r2
 8025c12:	009b      	lsls	r3, r3, #2
 8025c14:	3308      	adds	r3, #8
 8025c16:	4a21      	ldr	r2, [pc, #132]	; (8025c9c <etharp_update_arp_entry+0x118>)
 8025c18:	4413      	add	r3, r2
 8025c1a:	3304      	adds	r3, #4
 8025c1c:	4618      	mov	r0, r3
 8025c1e:	6879      	ldr	r1, [r7, #4]
 8025c20:	2206      	movs	r2, #6
 8025c22:	f7ff fdbf 	bl	80257a4 <thumb2_memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8025c26:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8025c2a:	491c      	ldr	r1, [pc, #112]	; (8025c9c <etharp_update_arp_entry+0x118>)
 8025c2c:	4613      	mov	r3, r2
 8025c2e:	009b      	lsls	r3, r3, #2
 8025c30:	4413      	add	r3, r2
 8025c32:	009b      	lsls	r3, r3, #2
 8025c34:	440b      	add	r3, r1
 8025c36:	3310      	adds	r3, #16
 8025c38:	2200      	movs	r2, #0
 8025c3a:	70da      	strb	r2, [r3, #3]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8025c3c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8025c40:	4916      	ldr	r1, [pc, #88]	; (8025c9c <etharp_update_arp_entry+0x118>)
 8025c42:	4613      	mov	r3, r2
 8025c44:	009b      	lsls	r3, r3, #2
 8025c46:	4413      	add	r3, r2
 8025c48:	009b      	lsls	r3, r3, #2
 8025c4a:	440b      	add	r3, r1
 8025c4c:	681b      	ldr	r3, [r3, #0]
 8025c4e:	2b00      	cmp	r3, #0
 8025c50:	d01e      	beq.n	8025c90 <etharp_update_arp_entry+0x10c>
    struct pbuf *p = arp_table[i].q;
 8025c52:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8025c56:	4911      	ldr	r1, [pc, #68]	; (8025c9c <etharp_update_arp_entry+0x118>)
 8025c58:	4613      	mov	r3, r2
 8025c5a:	009b      	lsls	r3, r3, #2
 8025c5c:	4413      	add	r3, r2
 8025c5e:	009b      	lsls	r3, r3, #2
 8025c60:	440b      	add	r3, r1
 8025c62:	681b      	ldr	r3, [r3, #0]
 8025c64:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8025c66:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8025c6a:	490c      	ldr	r1, [pc, #48]	; (8025c9c <etharp_update_arp_entry+0x118>)
 8025c6c:	4613      	mov	r3, r2
 8025c6e:	009b      	lsls	r3, r3, #2
 8025c70:	4413      	add	r3, r2
 8025c72:	009b      	lsls	r3, r3, #2
 8025c74:	440b      	add	r3, r1
 8025c76:	2200      	movs	r2, #0
 8025c78:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
 8025c7a:	68fb      	ldr	r3, [r7, #12]
 8025c7c:	3327      	adds	r3, #39	; 0x27
 8025c7e:	68f8      	ldr	r0, [r7, #12]
 8025c80:	6939      	ldr	r1, [r7, #16]
 8025c82:	461a      	mov	r2, r3
 8025c84:	687b      	ldr	r3, [r7, #4]
 8025c86:	f7ff ff53 	bl	8025b30 <etharp_send_ip>
    /* free the queued IP packet */
    pbuf_free(p);
 8025c8a:	6938      	ldr	r0, [r7, #16]
 8025c8c:	f002 fa8a 	bl	80281a4 <pbuf_free>
  }
  return ERR_OK;
 8025c90:	2300      	movs	r3, #0
 8025c92:	b25b      	sxtb	r3, r3
}
 8025c94:	4618      	mov	r0, r3
 8025c96:	3718      	adds	r7, #24
 8025c98:	46bd      	mov	sp, r7
 8025c9a:	bd80      	pop	{r7, pc}
 8025c9c:	1ffe9b9c 	.word	0x1ffe9b9c

08025ca0 <etharp_cleanup_netif>:
 * Remove all ARP table entries of the specified netif.
 *
 * @param netif points to a network interface
 */
void etharp_cleanup_netif(struct netif *netif)
{
 8025ca0:	b580      	push	{r7, lr}
 8025ca2:	b084      	sub	sp, #16
 8025ca4:	af00      	add	r7, sp, #0
 8025ca6:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8025ca8:	2300      	movs	r3, #0
 8025caa:	73fb      	strb	r3, [r7, #15]
 8025cac:	e01f      	b.n	8025cee <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8025cae:	7bfa      	ldrb	r2, [r7, #15]
 8025cb0:	4912      	ldr	r1, [pc, #72]	; (8025cfc <etharp_cleanup_netif+0x5c>)
 8025cb2:	4613      	mov	r3, r2
 8025cb4:	009b      	lsls	r3, r3, #2
 8025cb6:	4413      	add	r3, r2
 8025cb8:	009b      	lsls	r3, r3, #2
 8025cba:	440b      	add	r3, r1
 8025cbc:	3310      	adds	r3, #16
 8025cbe:	789b      	ldrb	r3, [r3, #2]
 8025cc0:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8025cc2:	7bbb      	ldrb	r3, [r7, #14]
 8025cc4:	2b00      	cmp	r3, #0
 8025cc6:	d00f      	beq.n	8025ce8 <etharp_cleanup_netif+0x48>
 8025cc8:	7bfa      	ldrb	r2, [r7, #15]
 8025cca:	490c      	ldr	r1, [pc, #48]	; (8025cfc <etharp_cleanup_netif+0x5c>)
 8025ccc:	4613      	mov	r3, r2
 8025cce:	009b      	lsls	r3, r3, #2
 8025cd0:	4413      	add	r3, r2
 8025cd2:	009b      	lsls	r3, r3, #2
 8025cd4:	440b      	add	r3, r1
 8025cd6:	3308      	adds	r3, #8
 8025cd8:	681a      	ldr	r2, [r3, #0]
 8025cda:	687b      	ldr	r3, [r7, #4]
 8025cdc:	429a      	cmp	r2, r3
 8025cde:	d103      	bne.n	8025ce8 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8025ce0:	7bfb      	ldrb	r3, [r7, #15]
 8025ce2:	4618      	mov	r0, r3
 8025ce4:	f7ff fd90 	bl	8025808 <etharp_free_entry>
 */
void etharp_cleanup_netif(struct netif *netif)
{
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8025ce8:	7bfb      	ldrb	r3, [r7, #15]
 8025cea:	3301      	adds	r3, #1
 8025cec:	73fb      	strb	r3, [r7, #15]
 8025cee:	7bfb      	ldrb	r3, [r7, #15]
 8025cf0:	2b09      	cmp	r3, #9
 8025cf2:	d9dc      	bls.n	8025cae <etharp_cleanup_netif+0xe>
    u8_t state = arp_table[i].state;
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
      etharp_free_entry(i);
    }
  }
}
 8025cf4:	3710      	adds	r7, #16
 8025cf6:	46bd      	mov	sp, r7
 8025cf8:	bd80      	pop	{r7, pc}
 8025cfa:	bf00      	nop
 8025cfc:	1ffe9b9c 	.word	0x1ffe9b9c

08025d00 <etharp_arp_input>:
 *
 * @see pbuf_free()
 */
static void
etharp_arp_input(struct netif *netif, struct eth_addr *ethaddr, struct pbuf *p)
{
 8025d00:	b580      	push	{r7, lr}
 8025d02:	b08a      	sub	sp, #40	; 0x28
 8025d04:	af00      	add	r7, sp, #0
 8025d06:	60f8      	str	r0, [r7, #12]
 8025d08:	60b9      	str	r1, [r7, #8]
 8025d0a:	607a      	str	r2, [r7, #4]
  u8_t for_us;
#if LWIP_AUTOIP
  const u8_t * ethdst_hwaddr;
#endif /* LWIP_AUTOIP */

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8025d0c:	68fb      	ldr	r3, [r7, #12]
 8025d0e:	2b00      	cmp	r3, #0
 8025d10:	d101      	bne.n	8025d16 <etharp_arp_input+0x16>
 8025d12:	be00      	bkpt	0x0000
 8025d14:	e0b3      	b.n	8025e7e <etharp_arp_input+0x17e>

  /* drop short ARP packets: we have to check for p->len instead of p->tot_len here
     since a struct etharp_hdr is pointed to p->payload, so it musn't be chained! */
  if (p->len < SIZEOF_ETHARP_PACKET) {
 8025d16:	687b      	ldr	r3, [r7, #4]
 8025d18:	895b      	ldrh	r3, [r3, #10]
 8025d1a:	2b2b      	cmp	r3, #43	; 0x2b
 8025d1c:	d803      	bhi.n	8025d26 <etharp_arp_input+0x26>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, too short (%"S16_F"/%"S16_F")\n", p->tot_len,
      (s16_t)SIZEOF_ETHARP_PACKET));
    ETHARP_STATS_INC(etharp.lenerr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8025d1e:	6878      	ldr	r0, [r7, #4]
 8025d20:	f002 fa40 	bl	80281a4 <pbuf_free>
    return;
 8025d24:	e0ab      	b.n	8025e7e <etharp_arp_input+0x17e>
  }

  ethhdr = (struct eth_hdr *)p->payload;
 8025d26:	687b      	ldr	r3, [r7, #4]
 8025d28:	685b      	ldr	r3, [r3, #4]
 8025d2a:	623b      	str	r3, [r7, #32]
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
 8025d2c:	6a3b      	ldr	r3, [r7, #32]
 8025d2e:	3310      	adds	r3, #16
 8025d30:	61fb      	str	r3, [r7, #28]
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8025d32:	69fb      	ldr	r3, [r7, #28]
 8025d34:	881b      	ldrh	r3, [r3, #0]
 8025d36:	b29b      	uxth	r3, r3
 8025d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8025d3c:	d10c      	bne.n	8025d58 <etharp_arp_input+0x58>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
 8025d3e:	69fb      	ldr	r3, [r7, #28]
 8025d40:	791b      	ldrb	r3, [r3, #4]
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8025d42:	2b06      	cmp	r3, #6
 8025d44:	d108      	bne.n	8025d58 <etharp_arp_input+0x58>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
      (hdr->protolen != sizeof(ip_addr_t)) ||
 8025d46:	69fb      	ldr	r3, [r7, #28]
 8025d48:	795b      	ldrb	r3, [r3, #5]
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
 8025d4a:	2b04      	cmp	r3, #4
 8025d4c:	d104      	bne.n	8025d58 <etharp_arp_input+0x58>
      (hdr->protolen != sizeof(ip_addr_t)) ||
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8025d4e:	69fb      	ldr	r3, [r7, #28]
 8025d50:	885b      	ldrh	r3, [r3, #2]
 8025d52:	b29b      	uxth	r3, r3
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
      (hdr->protolen != sizeof(ip_addr_t)) ||
 8025d54:	2b08      	cmp	r3, #8
 8025d56:	d003      	beq.n	8025d60 <etharp_arp_input+0x60>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, hdr->hwlen, hdr->proto, hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8025d58:	6878      	ldr	r0, [r7, #4]
 8025d5a:	f002 fa23 	bl	80281a4 <pbuf_free>
    return;
 8025d5e:	e08e      	b.n	8025e7e <etharp_arp_input+0x17e>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8025d60:	69fb      	ldr	r3, [r7, #28]
 8025d62:	330e      	adds	r3, #14
 8025d64:	f107 0218 	add.w	r2, r7, #24
 8025d68:	4610      	mov	r0, r2
 8025d6a:	4619      	mov	r1, r3
 8025d6c:	2204      	movs	r2, #4
 8025d6e:	f7ff fd19 	bl	80257a4 <thumb2_memcpy>
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8025d72:	69fb      	ldr	r3, [r7, #28]
 8025d74:	3318      	adds	r3, #24
 8025d76:	f107 0214 	add.w	r2, r7, #20
 8025d7a:	4610      	mov	r0, r2
 8025d7c:	4619      	mov	r1, r3
 8025d7e:	2204      	movs	r2, #4
 8025d80:	f7ff fd10 	bl	80257a4 <thumb2_memcpy>

  /* this interface is not configured? */
  if (ip_addr_isany(&netif->ip_addr)) {
 8025d84:	68fb      	ldr	r3, [r7, #12]
 8025d86:	3304      	adds	r3, #4
 8025d88:	2b00      	cmp	r3, #0
 8025d8a:	d003      	beq.n	8025d94 <etharp_arp_input+0x94>
 8025d8c:	68fb      	ldr	r3, [r7, #12]
 8025d8e:	685b      	ldr	r3, [r3, #4]
 8025d90:	2b00      	cmp	r3, #0
 8025d92:	d103      	bne.n	8025d9c <etharp_arp_input+0x9c>
    for_us = 0;
 8025d94:	2300      	movs	r3, #0
 8025d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8025d9a:	e009      	b.n	8025db0 <etharp_arp_input+0xb0>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip_addr_cmp(&dipaddr, &(netif->ip_addr));
 8025d9c:	697a      	ldr	r2, [r7, #20]
 8025d9e:	68fb      	ldr	r3, [r7, #12]
 8025da0:	685b      	ldr	r3, [r3, #4]
 8025da2:	429a      	cmp	r2, r3
 8025da4:	bf0c      	ite	eq
 8025da6:	2301      	moveq	r3, #1
 8025da8:	2300      	movne	r3, #0
 8025daa:	b2db      	uxtb	r3, r3
 8025dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8025db0:	69fb      	ldr	r3, [r7, #28]
 8025db2:	f103 0208 	add.w	r2, r3, #8
 8025db6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8025dba:	2b00      	cmp	r3, #0
 8025dbc:	d001      	beq.n	8025dc2 <etharp_arp_input+0xc2>
 8025dbe:	2301      	movs	r3, #1
 8025dc0:	e000      	b.n	8025dc4 <etharp_arp_input+0xc4>
 8025dc2:	2302      	movs	r3, #2
 8025dc4:	f107 0118 	add.w	r1, r7, #24
 8025dc8:	68f8      	ldr	r0, [r7, #12]
 8025dca:	f7ff fedb 	bl	8025b84 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8025dce:	69fb      	ldr	r3, [r7, #28]
 8025dd0:	88db      	ldrh	r3, [r3, #6]
 8025dd2:	b29b      	uxth	r3, r3
 8025dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8025dd8:	d003      	beq.n	8025de2 <etharp_arp_input+0xe2>
 8025dda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025dde:	d04a      	beq.n	8025e76 <etharp_arp_input+0x176>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP unknown opcode type %"S16_F"\n", htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8025de0:	e04a      	b.n	8025e78 <etharp_arp_input+0x178>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possiby send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
 8025de2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8025de6:	2b00      	cmp	r3, #0
 8025de8:	d041      	beq.n	8025e6e <etharp_arp_input+0x16e>

      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: replying to ARP request for our IP address\n"));
      /* Re-use pbuf to send ARP reply.
         Since we are re-using an existing pbuf, we can't call etharp_raw since
         that would allocate a new pbuf. */
      hdr->opcode = htons(ARP_REPLY);
 8025dea:	2002      	movs	r0, #2
 8025dec:	f001 fb98 	bl	8027520 <lwip_htons>
 8025df0:	4603      	mov	r3, r0
 8025df2:	461a      	mov	r2, r3
 8025df4:	69fb      	ldr	r3, [r7, #28]
 8025df6:	80da      	strh	r2, [r3, #6]

      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
 8025df8:	69fb      	ldr	r3, [r7, #28]
 8025dfa:	f103 0218 	add.w	r2, r3, #24
 8025dfe:	69fb      	ldr	r3, [r7, #28]
 8025e00:	330e      	adds	r3, #14
 8025e02:	4610      	mov	r0, r2
 8025e04:	4619      	mov	r1, r3
 8025e06:	2204      	movs	r2, #4
 8025e08:	f7ff fccc 	bl	80257a4 <thumb2_memcpy>
      IPADDR2_COPY(&hdr->sipaddr, &netif->ip_addr);
 8025e0c:	69fb      	ldr	r3, [r7, #28]
 8025e0e:	f103 020e 	add.w	r2, r3, #14
 8025e12:	68fb      	ldr	r3, [r7, #12]
 8025e14:	3304      	adds	r3, #4
 8025e16:	4610      	mov	r0, r2
 8025e18:	4619      	mov	r1, r3
 8025e1a:	2204      	movs	r2, #4
 8025e1c:	f7ff fcc2 	bl	80257a4 <thumb2_memcpy>
       * 'sender IP address' MUST be sent using link-layer broadcast instead of
       * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
      ethdst_hwaddr = ip_addr_islinklocal(&netif->ip_addr) ? (u8_t*)(ethbroadcast.addr) : hdr->shwaddr.addr;
#endif /* LWIP_AUTOIP */

      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
 8025e20:	69fb      	ldr	r3, [r7, #28]
 8025e22:	f103 0212 	add.w	r2, r3, #18
 8025e26:	69fb      	ldr	r3, [r7, #28]
 8025e28:	3308      	adds	r3, #8
 8025e2a:	4610      	mov	r0, r2
 8025e2c:	4619      	mov	r1, r3
 8025e2e:	2206      	movs	r2, #6
 8025e30:	f7ff fcb8 	bl	80257a4 <thumb2_memcpy>
#if LWIP_AUTOIP
      ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
      ETHADDR16_COPY(&ethhdr->dest, &hdr->shwaddr);
 8025e34:	6a3b      	ldr	r3, [r7, #32]
 8025e36:	1c9a      	adds	r2, r3, #2
 8025e38:	69fb      	ldr	r3, [r7, #28]
 8025e3a:	3308      	adds	r3, #8
 8025e3c:	4610      	mov	r0, r2
 8025e3e:	4619      	mov	r1, r3
 8025e40:	2206      	movs	r2, #6
 8025e42:	f7ff fcaf 	bl	80257a4 <thumb2_memcpy>
#endif /* LWIP_AUTOIP */
      ETHADDR16_COPY(&hdr->shwaddr, ethaddr);
 8025e46:	69fb      	ldr	r3, [r7, #28]
 8025e48:	3308      	adds	r3, #8
 8025e4a:	4618      	mov	r0, r3
 8025e4c:	68b9      	ldr	r1, [r7, #8]
 8025e4e:	2206      	movs	r2, #6
 8025e50:	f7ff fca8 	bl	80257a4 <thumb2_memcpy>
      ETHADDR16_COPY(&ethhdr->src, ethaddr);
 8025e54:	6a3b      	ldr	r3, [r7, #32]
 8025e56:	3308      	adds	r3, #8
 8025e58:	4618      	mov	r0, r3
 8025e5a:	68b9      	ldr	r1, [r7, #8]
 8025e5c:	2206      	movs	r2, #6
 8025e5e:	f7ff fca1 	bl	80257a4 <thumb2_memcpy>

      /* hwtype, hwaddr_len, proto, protolen and the type in the ethernet header
         are already correct, we tested that before */

      /* return ARP reply */
      netif->linkoutput(netif, p);
 8025e62:	68fb      	ldr	r3, [r7, #12]
 8025e64:	699b      	ldr	r3, [r3, #24]
 8025e66:	68f8      	ldr	r0, [r7, #12]
 8025e68:	6879      	ldr	r1, [r7, #4]
 8025e6a:	4798      	blx	r3
 8025e6c:	e002      	b.n	8025e74 <etharp_arp_input+0x174>
    /* we are not configured? */
    } else if (ip_addr_isany(&netif->ip_addr)) {
 8025e6e:	68fb      	ldr	r3, [r7, #12]
 8025e70:	3304      	adds	r3, #4
 8025e72:	2b00      	cmp	r3, #0
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP request was not for us.\n"));
    }
    break;
 8025e74:	e000      	b.n	8025e78 <etharp_arp_input+0x178>
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
 8025e76:	bf00      	nop
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP unknown opcode type %"S16_F"\n", htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
  }
  /* free ARP packet */
  pbuf_free(p);
 8025e78:	6878      	ldr	r0, [r7, #4]
 8025e7a:	f002 f993 	bl	80281a4 <pbuf_free>
}
 8025e7e:	3728      	adds	r7, #40	; 0x28
 8025e80:	46bd      	mov	sp, r7
 8025e82:	bd80      	pop	{r7, pc}

08025e84 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8025e84:	b590      	push	{r4, r7, lr}
 8025e86:	b085      	sub	sp, #20
 8025e88:	af00      	add	r7, sp, #0
 8025e8a:	60f8      	str	r0, [r7, #12]
 8025e8c:	60b9      	str	r1, [r7, #8]
 8025e8e:	4613      	mov	r3, r2
 8025e90:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
 8025e92:	79fa      	ldrb	r2, [r7, #7]
 8025e94:	4921      	ldr	r1, [pc, #132]	; (8025f1c <etharp_output_to_arp_index+0x98>)
 8025e96:	4613      	mov	r3, r2
 8025e98:	009b      	lsls	r3, r3, #2
 8025e9a:	4413      	add	r3, r2
 8025e9c:	009b      	lsls	r3, r3, #2
 8025e9e:	440b      	add	r3, r1
 8025ea0:	3310      	adds	r3, #16
 8025ea2:	789b      	ldrb	r3, [r3, #2]
 8025ea4:	2b02      	cmp	r3, #2
 8025ea6:	d123      	bne.n	8025ef0 <etharp_output_to_arp_index+0x6c>
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
 8025ea8:	79fa      	ldrb	r2, [r7, #7]
 8025eaa:	491c      	ldr	r1, [pc, #112]	; (8025f1c <etharp_output_to_arp_index+0x98>)
 8025eac:	4613      	mov	r3, r2
 8025eae:	009b      	lsls	r3, r3, #2
 8025eb0:	4413      	add	r3, r2
 8025eb2:	009b      	lsls	r3, r3, #2
 8025eb4:	440b      	add	r3, r1
 8025eb6:	3310      	adds	r3, #16
 8025eb8:	78db      	ldrb	r3, [r3, #3]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
 8025eba:	2be3      	cmp	r3, #227	; 0xe3
 8025ebc:	d918      	bls.n	8025ef0 <etharp_output_to_arp_index+0x6c>
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8025ebe:	79fa      	ldrb	r2, [r7, #7]
 8025ec0:	4613      	mov	r3, r2
 8025ec2:	009b      	lsls	r3, r3, #2
 8025ec4:	4413      	add	r3, r2
 8025ec6:	009b      	lsls	r3, r3, #2
 8025ec8:	4a14      	ldr	r2, [pc, #80]	; (8025f1c <etharp_output_to_arp_index+0x98>)
 8025eca:	4413      	add	r3, r2
 8025ecc:	3304      	adds	r3, #4
 8025ece:	68f8      	ldr	r0, [r7, #12]
 8025ed0:	4619      	mov	r1, r3
 8025ed2:	f000 fa63 	bl	802639c <etharp_request>
 8025ed6:	4603      	mov	r3, r0
 8025ed8:	2b00      	cmp	r3, #0
 8025eda:	d109      	bne.n	8025ef0 <etharp_output_to_arp_index+0x6c>
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
 8025edc:	79fa      	ldrb	r2, [r7, #7]
 8025ede:	490f      	ldr	r1, [pc, #60]	; (8025f1c <etharp_output_to_arp_index+0x98>)
 8025ee0:	4613      	mov	r3, r2
 8025ee2:	009b      	lsls	r3, r3, #2
 8025ee4:	4413      	add	r3, r2
 8025ee6:	009b      	lsls	r3, r3, #2
 8025ee8:	440b      	add	r3, r1
 8025eea:	3310      	adds	r3, #16
 8025eec:	2203      	movs	r2, #3
 8025eee:	709a      	strb	r2, [r3, #2]
    }
  }
  
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 8025ef0:	68fb      	ldr	r3, [r7, #12]
 8025ef2:	f103 0427 	add.w	r4, r3, #39	; 0x27
    &arp_table[arp_idx].ethaddr);
 8025ef6:	79fa      	ldrb	r2, [r7, #7]
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
    }
  }
  
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 8025ef8:	4613      	mov	r3, r2
 8025efa:	009b      	lsls	r3, r3, #2
 8025efc:	4413      	add	r3, r2
 8025efe:	009b      	lsls	r3, r3, #2
 8025f00:	3308      	adds	r3, #8
 8025f02:	4a06      	ldr	r2, [pc, #24]	; (8025f1c <etharp_output_to_arp_index+0x98>)
 8025f04:	4413      	add	r3, r2
 8025f06:	3304      	adds	r3, #4
 8025f08:	68f8      	ldr	r0, [r7, #12]
 8025f0a:	68b9      	ldr	r1, [r7, #8]
 8025f0c:	4622      	mov	r2, r4
 8025f0e:	f7ff fe0f 	bl	8025b30 <etharp_send_ip>
 8025f12:	4603      	mov	r3, r0
    &arp_table[arp_idx].ethaddr);
}
 8025f14:	4618      	mov	r0, r3
 8025f16:	3714      	adds	r7, #20
 8025f18:	46bd      	mov	sp, r7
 8025f1a:	bd90      	pop	{r4, r7, pc}
 8025f1c:	1ffe9b9c 	.word	0x1ffe9b9c

08025f20 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, ip_addr_t *ipaddr)
{
 8025f20:	b580      	push	{r7, lr}
 8025f22:	b088      	sub	sp, #32
 8025f24:	af00      	add	r7, sp, #0
 8025f26:	60f8      	str	r0, [r7, #12]
 8025f28:	60b9      	str	r1, [r7, #8]
 8025f2a:	607a      	str	r2, [r7, #4]
  struct eth_addr *dest;
  struct eth_addr mcastaddr;
  ip_addr_t *dst_addr = ipaddr;
 8025f2c:	687b      	ldr	r3, [r7, #4]
 8025f2e:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("netif != NULL", netif != NULL);
  LWIP_ASSERT("q != NULL", q != NULL);
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);

  /* make room for Ethernet header - should not fail */
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
 8025f30:	68b8      	ldr	r0, [r7, #8]
 8025f32:	2110      	movs	r1, #16
 8025f34:	f002 f8c4 	bl	80280c0 <pbuf_header>
 8025f38:	4603      	mov	r3, r0
 8025f3a:	2b00      	cmp	r3, #0
 8025f3c:	d001      	beq.n	8025f42 <etharp_output+0x22>
    /* bail out */
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_output: could not allocate room for header.\n"));
    LINK_STATS_INC(link.lenerr);
    return ERR_BUF;
 8025f3e:	23fe      	movs	r3, #254	; 0xfe
 8025f40:	e0ab      	b.n	802609a <etharp_output+0x17a>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip_addr_isbroadcast(ipaddr, netif)) {
 8025f42:	687b      	ldr	r3, [r7, #4]
 8025f44:	681b      	ldr	r3, [r3, #0]
 8025f46:	4618      	mov	r0, r3
 8025f48:	68f9      	ldr	r1, [r7, #12]
 8025f4a:	f001 f991 	bl	8027270 <ip4_addr_isbroadcast>
 8025f4e:	4603      	mov	r3, r0
 8025f50:	2b00      	cmp	r3, #0
 8025f52:	d002      	beq.n	8025f5a <etharp_output+0x3a>
    /* broadcast on Ethernet also */
    dest = (struct eth_addr *)&ethbroadcast;
 8025f54:	4b53      	ldr	r3, [pc, #332]	; (80260a4 <etharp_output+0x184>)
 8025f56:	61fb      	str	r3, [r7, #28]
 8025f58:	e096      	b.n	8026088 <etharp_output+0x168>
  /* multicast destination IP address? */
  } else if (ip_addr_ismulticast(ipaddr)) {
 8025f5a:	687b      	ldr	r3, [r7, #4]
 8025f5c:	681b      	ldr	r3, [r3, #0]
 8025f5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8025f62:	2be0      	cmp	r3, #224	; 0xe0
 8025f64:	d116      	bne.n	8025f94 <etharp_output+0x74>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
 8025f66:	2301      	movs	r3, #1
 8025f68:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
 8025f6a:	2300      	movs	r3, #0
 8025f6c:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_MULTICAST_ADDR_2;
 8025f6e:	235e      	movs	r3, #94	; 0x5e
 8025f70:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8025f72:	687b      	ldr	r3, [r7, #4]
 8025f74:	3301      	adds	r3, #1
 8025f76:	781b      	ldrb	r3, [r3, #0]
 8025f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8025f7c:	b2db      	uxtb	r3, r3
 8025f7e:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8025f80:	687b      	ldr	r3, [r7, #4]
 8025f82:	789b      	ldrb	r3, [r3, #2]
 8025f84:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8025f86:	687b      	ldr	r3, [r7, #4]
 8025f88:	78db      	ldrb	r3, [r3, #3]
 8025f8a:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8025f8c:	f107 0310 	add.w	r3, r7, #16
 8025f90:	61fb      	str	r3, [r7, #28]
 8025f92:	e079      	b.n	8026088 <etharp_output+0x168>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
 8025f94:	687b      	ldr	r3, [r7, #4]
 8025f96:	681a      	ldr	r2, [r3, #0]
 8025f98:	68fb      	ldr	r3, [r7, #12]
 8025f9a:	685b      	ldr	r3, [r3, #4]
 8025f9c:	405a      	eors	r2, r3
 8025f9e:	68fb      	ldr	r3, [r7, #12]
 8025fa0:	689b      	ldr	r3, [r3, #8]
 8025fa2:	4013      	ands	r3, r2
 8025fa4:	2b00      	cmp	r3, #0
 8025fa6:	d014      	beq.n	8025fd2 <etharp_output+0xb2>
        !ip_addr_islinklocal(ipaddr)) {
 8025fa8:	687b      	ldr	r3, [r7, #4]
 8025faa:	681b      	ldr	r3, [r3, #0]
 8025fac:	b29b      	uxth	r3, r3
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
 8025fae:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8025fb2:	4293      	cmp	r3, r2
 8025fb4:	d00d      	beq.n	8025fd2 <etharp_output+0xb2>
         router for forwarding". */
      if (!ip_addr_islinklocal(&iphdr->src))
#endif /* LWIP_AUTOIP */
      {
        /* interface has default gateway? */
        if (!ip_addr_isany(&netif->gw)) {
 8025fb6:	68fb      	ldr	r3, [r7, #12]
 8025fb8:	330c      	adds	r3, #12
 8025fba:	2b00      	cmp	r3, #0
 8025fbc:	d007      	beq.n	8025fce <etharp_output+0xae>
 8025fbe:	68fb      	ldr	r3, [r7, #12]
 8025fc0:	68db      	ldr	r3, [r3, #12]
 8025fc2:	2b00      	cmp	r3, #0
 8025fc4:	d003      	beq.n	8025fce <etharp_output+0xae>
          /* send to hardware address of default gateway IP address */
          dst_addr = &(netif->gw);
 8025fc6:	68fb      	ldr	r3, [r7, #12]
 8025fc8:	330c      	adds	r3, #12
 8025fca:	61bb      	str	r3, [r7, #24]
 8025fcc:	e001      	b.n	8025fd2 <etharp_output+0xb2>
        /* no default gateway available */
        } else {
          /* no route to destination error (default gateway missing) */
          return ERR_RTE;
 8025fce:	23fc      	movs	r3, #252	; 0xfc
 8025fd0:	e063      	b.n	802609a <etharp_output+0x17a>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8025fd2:	4b35      	ldr	r3, [pc, #212]	; (80260a8 <etharp_output+0x188>)
 8025fd4:	781b      	ldrb	r3, [r3, #0]
 8025fd6:	4619      	mov	r1, r3
 8025fd8:	4a34      	ldr	r2, [pc, #208]	; (80260ac <etharp_output+0x18c>)
 8025fda:	460b      	mov	r3, r1
 8025fdc:	009b      	lsls	r3, r3, #2
 8025fde:	440b      	add	r3, r1
 8025fe0:	009b      	lsls	r3, r3, #2
 8025fe2:	4413      	add	r3, r2
 8025fe4:	3310      	adds	r3, #16
 8025fe6:	789b      	ldrb	r3, [r3, #2]
 8025fe8:	2b01      	cmp	r3, #1
 8025fea:	d916      	bls.n	802601a <etharp_output+0xfa>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8025fec:	69bb      	ldr	r3, [r7, #24]
 8025fee:	681a      	ldr	r2, [r3, #0]
 8025ff0:	4b2d      	ldr	r3, [pc, #180]	; (80260a8 <etharp_output+0x188>)
 8025ff2:	781b      	ldrb	r3, [r3, #0]
 8025ff4:	4618      	mov	r0, r3
 8025ff6:	492d      	ldr	r1, [pc, #180]	; (80260ac <etharp_output+0x18c>)
 8025ff8:	4603      	mov	r3, r0
 8025ffa:	009b      	lsls	r3, r3, #2
 8025ffc:	4403      	add	r3, r0
 8025ffe:	009b      	lsls	r3, r3, #2
 8026000:	440b      	add	r3, r1
 8026002:	685b      	ldr	r3, [r3, #4]
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8026004:	429a      	cmp	r2, r3
 8026006:	d108      	bne.n	802601a <etharp_output+0xfa>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8026008:	4b27      	ldr	r3, [pc, #156]	; (80260a8 <etharp_output+0x188>)
 802600a:	781b      	ldrb	r3, [r3, #0]
 802600c:	68f8      	ldr	r0, [r7, #12]
 802600e:	68b9      	ldr	r1, [r7, #8]
 8026010:	461a      	mov	r2, r3
 8026012:	f7ff ff37 	bl	8025e84 <etharp_output_to_arp_index>
 8026016:	4603      	mov	r3, r0
 8026018:	e03f      	b.n	802609a <etharp_output+0x17a>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 802601a:	2300      	movs	r3, #0
 802601c:	75fb      	strb	r3, [r7, #23]
 802601e:	e028      	b.n	8026072 <etharp_output+0x152>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8026020:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8026024:	4921      	ldr	r1, [pc, #132]	; (80260ac <etharp_output+0x18c>)
 8026026:	4613      	mov	r3, r2
 8026028:	009b      	lsls	r3, r3, #2
 802602a:	4413      	add	r3, r2
 802602c:	009b      	lsls	r3, r3, #2
 802602e:	440b      	add	r3, r1
 8026030:	3310      	adds	r3, #16
 8026032:	789b      	ldrb	r3, [r3, #2]
 8026034:	2b01      	cmp	r3, #1
 8026036:	d917      	bls.n	8026068 <etharp_output+0x148>
          (ip_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8026038:	69bb      	ldr	r3, [r7, #24]
 802603a:	6819      	ldr	r1, [r3, #0]
 802603c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8026040:	481a      	ldr	r0, [pc, #104]	; (80260ac <etharp_output+0x18c>)
 8026042:	4613      	mov	r3, r2
 8026044:	009b      	lsls	r3, r3, #2
 8026046:	4413      	add	r3, r2
 8026048:	009b      	lsls	r3, r3, #2
 802604a:	4403      	add	r3, r0
 802604c:	685b      	ldr	r3, [r3, #4]
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 802604e:	4299      	cmp	r1, r3
 8026050:	d10a      	bne.n	8026068 <etharp_output+0x148>
          (ip_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8026052:	7dfa      	ldrb	r2, [r7, #23]
 8026054:	4b14      	ldr	r3, [pc, #80]	; (80260a8 <etharp_output+0x188>)
 8026056:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8026058:	7dfb      	ldrb	r3, [r7, #23]
 802605a:	68f8      	ldr	r0, [r7, #12]
 802605c:	68b9      	ldr	r1, [r7, #8]
 802605e:	461a      	mov	r2, r3
 8026060:	f7ff ff10 	bl	8025e84 <etharp_output_to_arp_index>
 8026064:	4603      	mov	r3, r0
 8026066:	e018      	b.n	802609a <etharp_output+0x17a>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8026068:	7dfb      	ldrb	r3, [r7, #23]
 802606a:	b2db      	uxtb	r3, r3
 802606c:	3301      	adds	r3, #1
 802606e:	b2db      	uxtb	r3, r3
 8026070:	75fb      	strb	r3, [r7, #23]
 8026072:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8026076:	2b09      	cmp	r3, #9
 8026078:	ddd2      	ble.n	8026020 <etharp_output+0x100>
        return etharp_output_to_arp_index(netif, q, i);
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 802607a:	68f8      	ldr	r0, [r7, #12]
 802607c:	69b9      	ldr	r1, [r7, #24]
 802607e:	68ba      	ldr	r2, [r7, #8]
 8026080:	f000 f816 	bl	80260b0 <etharp_query>
 8026084:	4603      	mov	r3, r0
 8026086:	e008      	b.n	802609a <etharp_output+0x17a>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
 8026088:	68fb      	ldr	r3, [r7, #12]
 802608a:	3327      	adds	r3, #39	; 0x27
 802608c:	68f8      	ldr	r0, [r7, #12]
 802608e:	68b9      	ldr	r1, [r7, #8]
 8026090:	461a      	mov	r2, r3
 8026092:	69fb      	ldr	r3, [r7, #28]
 8026094:	f7ff fd4c 	bl	8025b30 <etharp_send_ip>
 8026098:	4603      	mov	r3, r0
 802609a:	b25b      	sxtb	r3, r3
}
 802609c:	4618      	mov	r0, r3
 802609e:	3720      	adds	r7, #32
 80260a0:	46bd      	mov	sp, r7
 80260a2:	bd80      	pop	{r7, pc}
 80260a4:	0802a344 	.word	0x0802a344
 80260a8:	1ffe9c64 	.word	0x1ffe9c64
 80260ac:	1ffe9b9c 	.word	0x1ffe9b9c

080260b0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, ip_addr_t *ipaddr, struct pbuf *q)
{
 80260b0:	b580      	push	{r7, lr}
 80260b2:	b08a      	sub	sp, #40	; 0x28
 80260b4:	af00      	add	r7, sp, #0
 80260b6:	60f8      	str	r0, [r7, #12]
 80260b8:	60b9      	str	r1, [r7, #8]
 80260ba:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 80260bc:	68fb      	ldr	r3, [r7, #12]
 80260be:	3327      	adds	r3, #39	; 0x27
 80260c0:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_MEM;
 80260c2:	23ff      	movs	r3, #255	; 0xff
 80260c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
 80260c8:	68bb      	ldr	r3, [r7, #8]
 80260ca:	681b      	ldr	r3, [r3, #0]
 80260cc:	4618      	mov	r0, r3
 80260ce:	68f9      	ldr	r1, [r7, #12]
 80260d0:	f001 f8ce 	bl	8027270 <ip4_addr_isbroadcast>
 80260d4:	4603      	mov	r3, r0
 80260d6:	2b00      	cmp	r3, #0
 80260d8:	d10c      	bne.n	80260f4 <etharp_query+0x44>
      ip_addr_ismulticast(ipaddr) ||
 80260da:	68bb      	ldr	r3, [r7, #8]
 80260dc:	681b      	ldr	r3, [r3, #0]
 80260de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
 80260e2:	2be0      	cmp	r3, #224	; 0xe0
 80260e4:	d006      	beq.n	80260f4 <etharp_query+0x44>
      ip_addr_ismulticast(ipaddr) ||
 80260e6:	68bb      	ldr	r3, [r7, #8]
 80260e8:	2b00      	cmp	r3, #0
 80260ea:	d003      	beq.n	80260f4 <etharp_query+0x44>
      ip_addr_isany(ipaddr)) {
 80260ec:	68bb      	ldr	r3, [r7, #8]
 80260ee:	681b      	ldr	r3, [r3, #0]
 80260f0:	2b00      	cmp	r3, #0
 80260f2:	d101      	bne.n	80260f8 <etharp_query+0x48>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80260f4:	23f2      	movs	r3, #242	; 0xf2
 80260f6:	e0cb      	b.n	8026290 <etharp_query+0x1e0>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD);
 80260f8:	68b8      	ldr	r0, [r7, #8]
 80260fa:	2101      	movs	r1, #1
 80260fc:	f7ff fc24 	bl	8025948 <etharp_find_entry>
 8026100:	4603      	mov	r3, r0
 8026102:	75fb      	strb	r3, [r7, #23]

  /* could not find or create entry? */
  if (i < 0) {
 8026104:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8026108:	2b00      	cmp	r3, #0
 802610a:	da01      	bge.n	8026110 <etharp_query+0x60>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 802610c:	7dfb      	ldrb	r3, [r7, #23]
 802610e:	e0bf      	b.n	8026290 <etharp_query+0x1e0>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8026110:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8026114:	4961      	ldr	r1, [pc, #388]	; (802629c <etharp_query+0x1ec>)
 8026116:	4613      	mov	r3, r2
 8026118:	009b      	lsls	r3, r3, #2
 802611a:	4413      	add	r3, r2
 802611c:	009b      	lsls	r3, r3, #2
 802611e:	440b      	add	r3, r1
 8026120:	3310      	adds	r3, #16
 8026122:	789b      	ldrb	r3, [r3, #2]
 8026124:	2b00      	cmp	r3, #0
 8026126:	d10a      	bne.n	802613e <etharp_query+0x8e>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8026128:	f997 2017 	ldrsb.w	r2, [r7, #23]
 802612c:	495b      	ldr	r1, [pc, #364]	; (802629c <etharp_query+0x1ec>)
 802612e:	4613      	mov	r3, r2
 8026130:	009b      	lsls	r3, r3, #2
 8026132:	4413      	add	r3, r2
 8026134:	009b      	lsls	r3, r3, #2
 8026136:	440b      	add	r3, r1
 8026138:	3310      	adds	r3, #16
 802613a:	2201      	movs	r2, #1
 802613c:	709a      	strb	r2, [r3, #2]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a pending entry? or an implicit query request? */
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
 802613e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8026142:	4956      	ldr	r1, [pc, #344]	; (802629c <etharp_query+0x1ec>)
 8026144:	4613      	mov	r3, r2
 8026146:	009b      	lsls	r3, r3, #2
 8026148:	4413      	add	r3, r2
 802614a:	009b      	lsls	r3, r3, #2
 802614c:	440b      	add	r3, r1
 802614e:	3310      	adds	r3, #16
 8026150:	789b      	ldrb	r3, [r3, #2]
 8026152:	2b01      	cmp	r3, #1
 8026154:	d002      	beq.n	802615c <etharp_query+0xac>
 8026156:	687b      	ldr	r3, [r7, #4]
 8026158:	2b00      	cmp	r3, #0
 802615a:	d10c      	bne.n	8026176 <etharp_query+0xc6>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 802615c:	68f8      	ldr	r0, [r7, #12]
 802615e:	68b9      	ldr	r1, [r7, #8]
 8026160:	f000 f91c 	bl	802639c <etharp_request>
 8026164:	4603      	mov	r3, r0
 8026166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 802616a:	687b      	ldr	r3, [r7, #4]
 802616c:	2b00      	cmp	r3, #0
 802616e:	d102      	bne.n	8026176 <etharp_query+0xc6>
      return result;
 8026170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8026174:	e08c      	b.n	8026290 <etharp_query+0x1e0>
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8026176:	f997 2017 	ldrsb.w	r2, [r7, #23]
 802617a:	4948      	ldr	r1, [pc, #288]	; (802629c <etharp_query+0x1ec>)
 802617c:	4613      	mov	r3, r2
 802617e:	009b      	lsls	r3, r3, #2
 8026180:	4413      	add	r3, r2
 8026182:	009b      	lsls	r3, r3, #2
 8026184:	440b      	add	r3, r1
 8026186:	3310      	adds	r3, #16
 8026188:	789b      	ldrb	r3, [r3, #2]
 802618a:	2b01      	cmp	r3, #1
 802618c:	d915      	bls.n	80261ba <etharp_query+0x10a>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 802618e:	7dfa      	ldrb	r2, [r7, #23]
 8026190:	4b43      	ldr	r3, [pc, #268]	; (80262a0 <etharp_query+0x1f0>)
 8026192:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
 8026194:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8026198:	4613      	mov	r3, r2
 802619a:	009b      	lsls	r3, r3, #2
 802619c:	4413      	add	r3, r2
 802619e:	009b      	lsls	r3, r3, #2
 80261a0:	3308      	adds	r3, #8
 80261a2:	4a3e      	ldr	r2, [pc, #248]	; (802629c <etharp_query+0x1ec>)
 80261a4:	4413      	add	r3, r2
 80261a6:	3304      	adds	r3, #4
 80261a8:	68f8      	ldr	r0, [r7, #12]
 80261aa:	6879      	ldr	r1, [r7, #4]
 80261ac:	69ba      	ldr	r2, [r7, #24]
 80261ae:	f7ff fcbf 	bl	8025b30 <etharp_send_ip>
 80261b2:	4603      	mov	r3, r0
 80261b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80261b8:	e068      	b.n	802628c <etharp_query+0x1dc>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80261ba:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80261be:	4937      	ldr	r1, [pc, #220]	; (802629c <etharp_query+0x1ec>)
 80261c0:	4613      	mov	r3, r2
 80261c2:	009b      	lsls	r3, r3, #2
 80261c4:	4413      	add	r3, r2
 80261c6:	009b      	lsls	r3, r3, #2
 80261c8:	440b      	add	r3, r1
 80261ca:	3310      	adds	r3, #16
 80261cc:	789b      	ldrb	r3, [r3, #2]
 80261ce:	2b01      	cmp	r3, #1
 80261d0:	d15c      	bne.n	802628c <etharp_query+0x1dc>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80261d2:	2300      	movs	r3, #0
 80261d4:	61fb      	str	r3, [r7, #28]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 80261d6:	687b      	ldr	r3, [r7, #4]
 80261d8:	623b      	str	r3, [r7, #32]
    while (p) {
 80261da:	e009      	b.n	80261f0 <etharp_query+0x140>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
      if(p->type != PBUF_ROM) {
 80261dc:	6a3b      	ldr	r3, [r7, #32]
 80261de:	7b1b      	ldrb	r3, [r3, #12]
 80261e0:	2b01      	cmp	r3, #1
 80261e2:	d002      	beq.n	80261ea <etharp_query+0x13a>
        copy_needed = 1;
 80261e4:	2301      	movs	r3, #1
 80261e6:	61fb      	str	r3, [r7, #28]
        break;
 80261e8:	e005      	b.n	80261f6 <etharp_query+0x146>
      }
      p = p->next;
 80261ea:	6a3b      	ldr	r3, [r7, #32]
 80261ec:	681b      	ldr	r3, [r3, #0]
 80261ee:	623b      	str	r3, [r7, #32]
    int copy_needed = 0;
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
    while (p) {
 80261f0:	6a3b      	ldr	r3, [r7, #32]
 80261f2:	2b00      	cmp	r3, #0
 80261f4:	d1f2      	bne.n	80261dc <etharp_query+0x12c>
        copy_needed = 1;
        break;
      }
      p = p->next;
    }
    if(copy_needed) {
 80261f6:	69fb      	ldr	r3, [r7, #28]
 80261f8:	2b00      	cmp	r3, #0
 80261fa:	d017      	beq.n	802622c <etharp_query+0x17c>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
 80261fc:	6a3b      	ldr	r3, [r7, #32]
 80261fe:	891b      	ldrh	r3, [r3, #8]
 8026200:	2003      	movs	r0, #3
 8026202:	4619      	mov	r1, r3
 8026204:	2200      	movs	r2, #0
 8026206:	f001 fe09 	bl	8027e1c <pbuf_alloc>
 802620a:	6238      	str	r0, [r7, #32]
      if(p != NULL) {
 802620c:	6a3b      	ldr	r3, [r7, #32]
 802620e:	2b00      	cmp	r3, #0
 8026210:	d011      	beq.n	8026236 <etharp_query+0x186>
        if (pbuf_copy(p, q) != ERR_OK) {
 8026212:	6a38      	ldr	r0, [r7, #32]
 8026214:	6879      	ldr	r1, [r7, #4]
 8026216:	f002 f85b 	bl	80282d0 <pbuf_copy>
 802621a:	4603      	mov	r3, r0
 802621c:	2b00      	cmp	r3, #0
 802621e:	d00a      	beq.n	8026236 <etharp_query+0x186>
          pbuf_free(p);
 8026220:	6a38      	ldr	r0, [r7, #32]
 8026222:	f001 ffbf 	bl	80281a4 <pbuf_free>
          p = NULL;
 8026226:	2300      	movs	r3, #0
 8026228:	623b      	str	r3, [r7, #32]
 802622a:	e004      	b.n	8026236 <etharp_query+0x186>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 802622c:	687b      	ldr	r3, [r7, #4]
 802622e:	623b      	str	r3, [r7, #32]
      pbuf_ref(p);
 8026230:	6a38      	ldr	r0, [r7, #32]
 8026232:	f001 fffb 	bl	802822c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8026236:	6a3b      	ldr	r3, [r7, #32]
 8026238:	2b00      	cmp	r3, #0
 802623a:	d024      	beq.n	8026286 <etharp_query+0x1d6>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 802623c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8026240:	4916      	ldr	r1, [pc, #88]	; (802629c <etharp_query+0x1ec>)
 8026242:	4613      	mov	r3, r2
 8026244:	009b      	lsls	r3, r3, #2
 8026246:	4413      	add	r3, r2
 8026248:	009b      	lsls	r3, r3, #2
 802624a:	440b      	add	r3, r1
 802624c:	681b      	ldr	r3, [r3, #0]
 802624e:	2b00      	cmp	r3, #0
 8026250:	d00b      	beq.n	802626a <etharp_query+0x1ba>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8026252:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8026256:	4911      	ldr	r1, [pc, #68]	; (802629c <etharp_query+0x1ec>)
 8026258:	4613      	mov	r3, r2
 802625a:	009b      	lsls	r3, r3, #2
 802625c:	4413      	add	r3, r2
 802625e:	009b      	lsls	r3, r3, #2
 8026260:	440b      	add	r3, r1
 8026262:	681b      	ldr	r3, [r3, #0]
 8026264:	4618      	mov	r0, r3
 8026266:	f001 ff9d 	bl	80281a4 <pbuf_free>
      }
      arp_table[i].q = p;
 802626a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 802626e:	490b      	ldr	r1, [pc, #44]	; (802629c <etharp_query+0x1ec>)
 8026270:	4613      	mov	r3, r2
 8026272:	009b      	lsls	r3, r3, #2
 8026274:	4413      	add	r3, r2
 8026276:	009b      	lsls	r3, r3, #2
 8026278:	440b      	add	r3, r1
 802627a:	6a3a      	ldr	r2, [r7, #32]
 802627c:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 802627e:	2300      	movs	r3, #0
 8026280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8026284:	e002      	b.n	802628c <etharp_query+0x1dc>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8026286:	23ff      	movs	r3, #255	; 0xff
 8026288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 802628c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8026290:	b25b      	sxtb	r3, r3
}
 8026292:	4618      	mov	r0, r3
 8026294:	3728      	adds	r7, #40	; 0x28
 8026296:	46bd      	mov	sp, r7
 8026298:	bd80      	pop	{r7, pc}
 802629a:	bf00      	nop
 802629c:	1ffe9b9c 	.word	0x1ffe9b9c
 80262a0:	1ffe9c64 	.word	0x1ffe9c64

080262a4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80262a4:	b580      	push	{r7, lr}
 80262a6:	b088      	sub	sp, #32
 80262a8:	af00      	add	r7, sp, #0
 80262aa:	60f8      	str	r0, [r7, #12]
 80262ac:	60b9      	str	r1, [r7, #8]
 80262ae:	607a      	str	r2, [r7, #4]
 80262b0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80262b2:	2300      	movs	r3, #0
 80262b4:	77fb      	strb	r3, [r7, #31]
#endif /* LWIP_AUTOIP */

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
 80262b6:	2003      	movs	r0, #3
 80262b8:	212c      	movs	r1, #44	; 0x2c
 80262ba:	2200      	movs	r2, #0
 80262bc:	f001 fdae 	bl	8027e1c <pbuf_alloc>
 80262c0:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80262c2:	69bb      	ldr	r3, [r7, #24]
 80262c4:	2b00      	cmp	r3, #0
 80262c6:	d101      	bne.n	80262cc <etharp_raw+0x28>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80262c8:	23ff      	movs	r3, #255	; 0xff
 80262ca:	e061      	b.n	8026390 <etharp_raw+0xec>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_PACKET));

  ethhdr = (struct eth_hdr *)p->payload;
 80262cc:	69bb      	ldr	r3, [r7, #24]
 80262ce:	685b      	ldr	r3, [r3, #4]
 80262d0:	617b      	str	r3, [r7, #20]
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
 80262d2:	697b      	ldr	r3, [r7, #20]
 80262d4:	3310      	adds	r3, #16
 80262d6:	613b      	str	r3, [r7, #16]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = htons(opcode);
 80262d8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80262da:	4618      	mov	r0, r3
 80262dc:	f001 f920 	bl	8027520 <lwip_htons>
 80262e0:	4603      	mov	r3, r0
 80262e2:	461a      	mov	r2, r3
 80262e4:	693b      	ldr	r3, [r7, #16]
 80262e6:	80da      	strh	r2, [r3, #6]
   * 'sender IP address' MUST be sent using link-layer broadcast instead of
   * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
  ethdst_hwaddr = ip_addr_islinklocal(ipsrc_addr) ? (u8_t*)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80262e8:	693b      	ldr	r3, [r7, #16]
 80262ea:	3308      	adds	r3, #8
 80262ec:	4618      	mov	r0, r3
 80262ee:	6839      	ldr	r1, [r7, #0]
 80262f0:	2206      	movs	r2, #6
 80262f2:	f7ff fa57 	bl	80257a4 <thumb2_memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80262f6:	693b      	ldr	r3, [r7, #16]
 80262f8:	3312      	adds	r3, #18
 80262fa:	4618      	mov	r0, r3
 80262fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80262fe:	2206      	movs	r2, #6
 8026300:	f7ff fa50 	bl	80257a4 <thumb2_memcpy>
  /* Write the Ethernet MAC-Addresses */
#if LWIP_AUTOIP
  ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
 8026304:	697b      	ldr	r3, [r7, #20]
 8026306:	3302      	adds	r3, #2
 8026308:	4618      	mov	r0, r3
 802630a:	6879      	ldr	r1, [r7, #4]
 802630c:	2206      	movs	r2, #6
 802630e:	f7ff fa49 	bl	80257a4 <thumb2_memcpy>
#endif /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);
 8026312:	697b      	ldr	r3, [r7, #20]
 8026314:	3308      	adds	r3, #8
 8026316:	4618      	mov	r0, r3
 8026318:	68b9      	ldr	r1, [r7, #8]
 802631a:	2206      	movs	r2, #6
 802631c:	f7ff fa42 	bl	80257a4 <thumb2_memcpy>
  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing. */ 
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8026320:	693b      	ldr	r3, [r7, #16]
 8026322:	330e      	adds	r3, #14
 8026324:	4618      	mov	r0, r3
 8026326:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8026328:	2204      	movs	r2, #4
 802632a:	f7ff fa3b 	bl	80257a4 <thumb2_memcpy>
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 802632e:	693b      	ldr	r3, [r7, #16]
 8026330:	3318      	adds	r3, #24
 8026332:	4618      	mov	r0, r3
 8026334:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8026336:	2204      	movs	r2, #4
 8026338:	f7ff fa34 	bl	80257a4 <thumb2_memcpy>

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 802633c:	693b      	ldr	r3, [r7, #16]
 802633e:	2200      	movs	r2, #0
 8026340:	701a      	strb	r2, [r3, #0]
 8026342:	2200      	movs	r2, #0
 8026344:	f042 0201 	orr.w	r2, r2, #1
 8026348:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 802634a:	693b      	ldr	r3, [r7, #16]
 802634c:	2200      	movs	r2, #0
 802634e:	f042 0208 	orr.w	r2, r2, #8
 8026352:	709a      	strb	r2, [r3, #2]
 8026354:	2200      	movs	r2, #0
 8026356:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETHARP_HWADDR_LEN;
 8026358:	693b      	ldr	r3, [r7, #16]
 802635a:	2206      	movs	r2, #6
 802635c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip_addr_t);
 802635e:	693b      	ldr	r3, [r7, #16]
 8026360:	2204      	movs	r2, #4
 8026362:	715a      	strb	r2, [r3, #5]

  ethhdr->type = PP_HTONS(ETHTYPE_ARP);
 8026364:	697b      	ldr	r3, [r7, #20]
 8026366:	2200      	movs	r2, #0
 8026368:	f042 0208 	orr.w	r2, r2, #8
 802636c:	739a      	strb	r2, [r3, #14]
 802636e:	2200      	movs	r2, #0
 8026370:	f042 0206 	orr.w	r2, r2, #6
 8026374:	73da      	strb	r2, [r3, #15]
  /* send ARP query */
  result = netif->linkoutput(netif, p);
 8026376:	68fb      	ldr	r3, [r7, #12]
 8026378:	699b      	ldr	r3, [r3, #24]
 802637a:	68f8      	ldr	r0, [r7, #12]
 802637c:	69b9      	ldr	r1, [r7, #24]
 802637e:	4798      	blx	r3
 8026380:	4603      	mov	r3, r0
 8026382:	77fb      	strb	r3, [r7, #31]
  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8026384:	69b8      	ldr	r0, [r7, #24]
 8026386:	f001 ff0d 	bl	80281a4 <pbuf_free>
  p = NULL;
 802638a:	2300      	movs	r3, #0
 802638c:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 802638e:	7ffb      	ldrb	r3, [r7, #31]
 8026390:	b25b      	sxtb	r3, r3
}
 8026392:	4618      	mov	r0, r3
 8026394:	3720      	adds	r7, #32
 8026396:	46bd      	mov	sp, r7
 8026398:	bd80      	pop	{r7, pc}
 802639a:	bf00      	nop

0802639c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
 802639c:	b590      	push	{r4, r7, lr}
 802639e:	b087      	sub	sp, #28
 80263a0:	af04      	add	r7, sp, #16
 80263a2:	6078      	str	r0, [r7, #4]
 80263a4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
 80263a6:	687b      	ldr	r3, [r7, #4]
 80263a8:	f103 0227 	add.w	r2, r3, #39	; 0x27
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
 80263ac:	687b      	ldr	r3, [r7, #4]
 80263ae:	f103 0427 	add.w	r4, r3, #39	; 0x27
 80263b2:	687b      	ldr	r3, [r7, #4]
 80263b4:	3304      	adds	r3, #4
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
 80263b6:	9300      	str	r3, [sp, #0]
 80263b8:	4b08      	ldr	r3, [pc, #32]	; (80263dc <etharp_request+0x40>)
 80263ba:	9301      	str	r3, [sp, #4]
 80263bc:	683b      	ldr	r3, [r7, #0]
 80263be:	9302      	str	r3, [sp, #8]
 80263c0:	2301      	movs	r3, #1
 80263c2:	9303      	str	r3, [sp, #12]
 80263c4:	6878      	ldr	r0, [r7, #4]
 80263c6:	4611      	mov	r1, r2
 80263c8:	4a05      	ldr	r2, [pc, #20]	; (80263e0 <etharp_request+0x44>)
 80263ca:	4623      	mov	r3, r4
 80263cc:	f7ff ff6a 	bl	80262a4 <etharp_raw>
 80263d0:	4603      	mov	r3, r0
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
                    ipaddr, ARP_REQUEST);
}
 80263d2:	4618      	mov	r0, r3
 80263d4:	370c      	adds	r7, #12
 80263d6:	46bd      	mov	sp, r7
 80263d8:	bd90      	pop	{r4, r7, pc}
 80263da:	bf00      	nop
 80263dc:	0802a34c 	.word	0x0802a34c
 80263e0:	0802a344 	.word	0x0802a344

080263e4 <ethernet_input>:
 * @param p the recevied packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80263e4:	b580      	push	{r7, lr}
 80263e6:	b086      	sub	sp, #24
 80263e8:	af00      	add	r7, sp, #0
 80263ea:	6078      	str	r0, [r7, #4]
 80263ec:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 80263ee:	2310      	movs	r3, #16
 80263f0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 80263f2:	687b      	ldr	r3, [r7, #4]
 80263f4:	895b      	ldrh	r3, [r3, #10]
 80263f6:	2b10      	cmp	r3, #16
 80263f8:	d800      	bhi.n	80263fc <ethernet_input+0x18>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    goto free_and_return;
 80263fa:	e066      	b.n	80264ca <ethernet_input+0xe6>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80263fc:	687b      	ldr	r3, [r7, #4]
 80263fe:	685b      	ldr	r3, [r3, #4]
 8026400:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0], (unsigned)ethhdr->src.addr[1], (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3], (unsigned)ethhdr->src.addr[4], (unsigned)ethhdr->src.addr[5],
     (unsigned)htons(ethhdr->type)));

  type = ethhdr->type;
 8026402:	693b      	ldr	r3, [r7, #16]
 8026404:	7b9a      	ldrb	r2, [r3, #14]
 8026406:	7bdb      	ldrb	r3, [r3, #15]
 8026408:	021b      	lsls	r3, r3, #8
 802640a:	4313      	orrs	r3, r2
 802640c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 802640e:	693b      	ldr	r3, [r7, #16]
 8026410:	789b      	ldrb	r3, [r3, #2]
 8026412:	f003 0301 	and.w	r3, r3, #1
 8026416:	2b00      	cmp	r3, #0
 8026418:	d024      	beq.n	8026464 <ethernet_input+0x80>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
 802641a:	693b      	ldr	r3, [r7, #16]
 802641c:	789b      	ldrb	r3, [r3, #2]
 802641e:	2b01      	cmp	r3, #1
 8026420:	d10f      	bne.n	8026442 <ethernet_input+0x5e>
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
 8026422:	693b      	ldr	r3, [r7, #16]
 8026424:	78db      	ldrb	r3, [r3, #3]
 8026426:	2b00      	cmp	r3, #0
 8026428:	d11c      	bne.n	8026464 <ethernet_input+0x80>
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
 802642a:	693b      	ldr	r3, [r7, #16]
 802642c:	791b      	ldrb	r3, [r3, #4]
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
 802642e:	2b5e      	cmp	r3, #94	; 0x5e
 8026430:	d118      	bne.n	8026464 <ethernet_input+0x80>
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8026432:	687b      	ldr	r3, [r7, #4]
 8026434:	7b5b      	ldrb	r3, [r3, #13]
 8026436:	f043 0310 	orr.w	r3, r3, #16
 802643a:	b2da      	uxtb	r2, r3
 802643c:	687b      	ldr	r3, [r7, #4]
 802643e:	735a      	strb	r2, [r3, #13]
 8026440:	e010      	b.n	8026464 <ethernet_input+0x80>
      }
    } else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8026442:	693b      	ldr	r3, [r7, #16]
 8026444:	3302      	adds	r3, #2
 8026446:	4618      	mov	r0, r3
 8026448:	4924      	ldr	r1, [pc, #144]	; (80264dc <ethernet_input+0xf8>)
 802644a:	2206      	movs	r2, #6
 802644c:	f003 fcae 	bl	8029dac <memcmp>
 8026450:	4603      	mov	r3, r0
 8026452:	2b00      	cmp	r3, #0
 8026454:	d106      	bne.n	8026464 <ethernet_input+0x80>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8026456:	687b      	ldr	r3, [r7, #4]
 8026458:	7b5b      	ldrb	r3, [r3, #13]
 802645a:	f043 0308 	orr.w	r3, r3, #8
 802645e:	b2da      	uxtb	r2, r3
 8026460:	687b      	ldr	r3, [r7, #4]
 8026462:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8026464:	89fb      	ldrh	r3, [r7, #14]
 8026466:	2b08      	cmp	r3, #8
 8026468:	d003      	beq.n	8026472 <ethernet_input+0x8e>
 802646a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 802646e:	d01a      	beq.n	80264a6 <ethernet_input+0xc2>
#endif /* PPPOE_SUPPORT */

    default:
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      goto free_and_return;
 8026470:	e02b      	b.n	80264ca <ethernet_input+0xe6>

  switch (type) {
#if LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8026472:	683b      	ldr	r3, [r7, #0]
 8026474:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8026478:	f003 0320 	and.w	r3, r3, #32
 802647c:	2b00      	cmp	r3, #0
 802647e:	d100      	bne.n	8026482 <ethernet_input+0x9e>
        goto free_and_return;
 8026480:	e023      	b.n	80264ca <ethernet_input+0xe6>
#if ETHARP_TRUST_IP_MAC
      /* update ARP table */
      etharp_ip_input(netif, p);
#endif /* ETHARP_TRUST_IP_MAC */
      /* skip Ethernet header */
      if(pbuf_header(p, -ip_hdr_offset)) {
 8026482:	8afb      	ldrh	r3, [r7, #22]
 8026484:	425b      	negs	r3, r3
 8026486:	b29b      	uxth	r3, r3
 8026488:	b29b      	uxth	r3, r3
 802648a:	b21b      	sxth	r3, r3
 802648c:	6878      	ldr	r0, [r7, #4]
 802648e:	4619      	mov	r1, r3
 8026490:	f001 fe16 	bl	80280c0 <pbuf_header>
 8026494:	4603      	mov	r3, r0
 8026496:	2b00      	cmp	r3, #0
 8026498:	d000      	beq.n	802649c <ethernet_input+0xb8>
        LWIP_ASSERT("Can't move over header in packet", 0);
        goto free_and_return;
 802649a:	e016      	b.n	80264ca <ethernet_input+0xe6>
      } else {
        /* pass to IP layer */
        ip_input(p, netif);
 802649c:	6878      	ldr	r0, [r7, #4]
 802649e:	6839      	ldr	r1, [r7, #0]
 80264a0:	f000 fcce 	bl	8026e40 <ip_input>
      }
      break;
 80264a4:	e00f      	b.n	80264c6 <ethernet_input+0xe2>
      
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80264a6:	683b      	ldr	r3, [r7, #0]
 80264a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80264ac:	f003 0320 	and.w	r3, r3, #32
 80264b0:	2b00      	cmp	r3, #0
 80264b2:	d100      	bne.n	80264b6 <ethernet_input+0xd2>
        goto free_and_return;
 80264b4:	e009      	b.n	80264ca <ethernet_input+0xe6>
      }
      /* pass p to ARP module */
      etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
 80264b6:	683b      	ldr	r3, [r7, #0]
 80264b8:	3327      	adds	r3, #39	; 0x27
 80264ba:	6838      	ldr	r0, [r7, #0]
 80264bc:	4619      	mov	r1, r3
 80264be:	687a      	ldr	r2, [r7, #4]
 80264c0:	f7ff fc1e 	bl	8025d00 <etharp_arp_input>
      break;
 80264c4:	bf00      	nop
      goto free_and_return;
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80264c6:	2300      	movs	r3, #0
 80264c8:	e003      	b.n	80264d2 <ethernet_input+0xee>

free_and_return:
  pbuf_free(p);
 80264ca:	6878      	ldr	r0, [r7, #4]
 80264cc:	f001 fe6a 	bl	80281a4 <pbuf_free>
  return ERR_OK;
 80264d0:	2300      	movs	r3, #0
 80264d2:	b25b      	sxtb	r3, r3
}
 80264d4:	4618      	mov	r0, r3
 80264d6:	3718      	adds	r7, #24
 80264d8:	46bd      	mov	sp, r7
 80264da:	bd80      	pop	{r7, pc}
 80264dc:	0802a344 	.word	0x0802a344

080264e0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the ip header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80264e0:	b580      	push	{r7, lr}
 80264e2:	b08c      	sub	sp, #48	; 0x30
 80264e4:	af04      	add	r7, sp, #16
 80264e6:	6078      	str	r0, [r7, #4]
 80264e8:	6039      	str	r1, [r7, #0]

  ICMP_STATS_INC(icmp.recv);
  snmp_inc_icmpinmsgs();


  iphdr = (struct ip_hdr *)p->payload;
 80264ea:	687b      	ldr	r3, [r7, #4]
 80264ec:	685b      	ldr	r3, [r3, #4]
 80264ee:	61fb      	str	r3, [r7, #28]
  hlen = IPH_HL(iphdr) * 4;
 80264f0:	69fb      	ldr	r3, [r7, #28]
 80264f2:	781b      	ldrb	r3, [r3, #0]
 80264f4:	b29b      	uxth	r3, r3
 80264f6:	f003 030f 	and.w	r3, r3, #15
 80264fa:	b29b      	uxth	r3, r3
 80264fc:	009b      	lsls	r3, r3, #2
 80264fe:	b29b      	uxth	r3, r3
 8026500:	82fb      	strh	r3, [r7, #22]
  if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t)*2)) {
 8026502:	8afb      	ldrh	r3, [r7, #22]
 8026504:	425b      	negs	r3, r3
 8026506:	b29b      	uxth	r3, r3
 8026508:	b29b      	uxth	r3, r3
 802650a:	b21b      	sxth	r3, r3
 802650c:	6878      	ldr	r0, [r7, #4]
 802650e:	4619      	mov	r1, r3
 8026510:	f001 fdd6 	bl	80280c0 <pbuf_header>
 8026514:	4603      	mov	r3, r0
 8026516:	2b00      	cmp	r3, #0
 8026518:	f040 80b7 	bne.w	802668a <icmp_input+0x1aa>
 802651c:	687b      	ldr	r3, [r7, #4]
 802651e:	891b      	ldrh	r3, [r3, #8]
 8026520:	2b03      	cmp	r3, #3
 8026522:	f240 80b2 	bls.w	802668a <icmp_input+0x1aa>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8026526:	687b      	ldr	r3, [r7, #4]
 8026528:	685b      	ldr	r3, [r3, #4]
 802652a:	781b      	ldrb	r3, [r3, #0]
 802652c:	757b      	strb	r3, [r7, #21]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 802652e:	7d7b      	ldrb	r3, [r7, #21]
 8026530:	2b00      	cmp	r3, #0
 8026532:	f000 80a5 	beq.w	8026680 <icmp_input+0x1a0>
 8026536:	2b08      	cmp	r3, #8
 8026538:	f040 80a3 	bne.w	8026682 <icmp_input+0x1a2>
       (as obviously, an echo request has been sent, too). */
    break; 
  case ICMP_ECHO:
#if !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
    {
      int accepted = 1;
 802653c:	2301      	movs	r3, #1
 802653e:	61bb      	str	r3, [r7, #24]
#if !LWIP_MULTICAST_PING
      /* multicast destination address? */
      if (ip_addr_ismulticast(&current_iphdr_dest)) {
 8026540:	4b57      	ldr	r3, [pc, #348]	; (80266a0 <icmp_input+0x1c0>)
 8026542:	681b      	ldr	r3, [r3, #0]
 8026544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8026548:	2be0      	cmp	r3, #224	; 0xe0
 802654a:	d101      	bne.n	8026550 <icmp_input+0x70>
        accepted = 0;
 802654c:	2300      	movs	r3, #0
 802654e:	61bb      	str	r3, [r7, #24]
      }
#endif /* LWIP_MULTICAST_PING */
#if !LWIP_BROADCAST_PING
      /* broadcast destination address? */
      if (ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
 8026550:	4b53      	ldr	r3, [pc, #332]	; (80266a0 <icmp_input+0x1c0>)
 8026552:	681b      	ldr	r3, [r3, #0]
 8026554:	4618      	mov	r0, r3
 8026556:	6839      	ldr	r1, [r7, #0]
 8026558:	f000 fe8a 	bl	8027270 <ip4_addr_isbroadcast>
 802655c:	4603      	mov	r3, r0
 802655e:	2b00      	cmp	r3, #0
 8026560:	d001      	beq.n	8026566 <icmp_input+0x86>
        accepted = 0;
 8026562:	2300      	movs	r3, #0
 8026564:	61bb      	str	r3, [r7, #24]
      }
#endif /* LWIP_BROADCAST_PING */
      /* broadcast or multicast destination address not acceptd? */
      if (!accepted) {
 8026566:	69bb      	ldr	r3, [r7, #24]
 8026568:	2b00      	cmp	r3, #0
 802656a:	d103      	bne.n	8026574 <icmp_input+0x94>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast or broadcast pings\n"));
        ICMP_STATS_INC(icmp.err);
        pbuf_free(p);
 802656c:	6878      	ldr	r0, [r7, #4]
 802656e:	f001 fe19 	bl	80281a4 <pbuf_free>
        return;
 8026572:	e092      	b.n	802669a <icmp_input+0x1ba>
      }
    }
#endif /* !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8026574:	687b      	ldr	r3, [r7, #4]
 8026576:	891b      	ldrh	r3, [r3, #8]
 8026578:	2b07      	cmp	r3, #7
 802657a:	d800      	bhi.n	802657e <icmp_input+0x9e>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
 802657c:	e085      	b.n	802668a <icmp_input+0x1aa>
    }
    if (inet_chksum_pbuf(p) != 0) {
 802657e:	6878      	ldr	r0, [r7, #4]
 8026580:	f000 fbd6 	bl	8026d30 <inet_chksum_pbuf>
 8026584:	4603      	mov	r3, r0
 8026586:	2b00      	cmp	r3, #0
 8026588:	d003      	beq.n	8026592 <icmp_input+0xb2>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
      pbuf_free(p);
 802658a:	6878      	ldr	r0, [r7, #4]
 802658c:	f001 fe0a 	bl	80281a4 <pbuf_free>
      ICMP_STATS_INC(icmp.chkerr);
      snmp_inc_icmpinerrors();
      return;
 8026590:	e083      	b.n	802669a <icmp_input+0x1ba>
    }
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
 8026592:	6878      	ldr	r0, [r7, #4]
 8026594:	2124      	movs	r1, #36	; 0x24
 8026596:	f001 fd93 	bl	80280c0 <pbuf_header>
 802659a:	4603      	mov	r3, r0
 802659c:	2b00      	cmp	r3, #0
 802659e:	d033      	beq.n	8026608 <icmp_input+0x128>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* switch p->payload to ip header */
      if (pbuf_header(p, hlen)) {
 80265a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80265a4:	6878      	ldr	r0, [r7, #4]
 80265a6:	4619      	mov	r1, r3
 80265a8:	f001 fd8a 	bl	80280c0 <pbuf_header>
 80265ac:	4603      	mov	r3, r0
 80265ae:	2b00      	cmp	r3, #0
 80265b0:	d000      	beq.n	80265b4 <icmp_input+0xd4>
        LWIP_ASSERT("icmp_input: moving p->payload to ip header failed\n", 0);
        goto memerr;
 80265b2:	e06e      	b.n	8026692 <icmp_input+0x1b2>
      }
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80265b4:	687b      	ldr	r3, [r7, #4]
 80265b6:	891b      	ldrh	r3, [r3, #8]
 80265b8:	2002      	movs	r0, #2
 80265ba:	4619      	mov	r1, r3
 80265bc:	2200      	movs	r2, #0
 80265be:	f001 fc2d 	bl	8027e1c <pbuf_alloc>
 80265c2:	6138      	str	r0, [r7, #16]
      if (r == NULL) {
 80265c4:	693b      	ldr	r3, [r7, #16]
 80265c6:	2b00      	cmp	r3, #0
 80265c8:	d100      	bne.n	80265cc <icmp_input+0xec>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto memerr;
 80265ca:	e062      	b.n	8026692 <icmp_input+0x1b2>
      }
      LWIP_ASSERT("check that first pbuf can hold struct the ICMP header",
                  (r->len >= hlen + sizeof(struct icmp_echo_hdr)));
      /* copy the whole packet including ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 80265cc:	6938      	ldr	r0, [r7, #16]
 80265ce:	6879      	ldr	r1, [r7, #4]
 80265d0:	f001 fe7e 	bl	80282d0 <pbuf_copy>
 80265d4:	4603      	mov	r3, r0
 80265d6:	2b00      	cmp	r3, #0
 80265d8:	d000      	beq.n	80265dc <icmp_input+0xfc>
        LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
        goto memerr;
 80265da:	e05a      	b.n	8026692 <icmp_input+0x1b2>
      }
      iphdr = (struct ip_hdr *)r->payload;
 80265dc:	693b      	ldr	r3, [r7, #16]
 80265de:	685b      	ldr	r3, [r3, #4]
 80265e0:	61fb      	str	r3, [r7, #28]
      /* switch r->payload back to icmp header */
      if (pbuf_header(r, -hlen)) {
 80265e2:	8afb      	ldrh	r3, [r7, #22]
 80265e4:	425b      	negs	r3, r3
 80265e6:	b29b      	uxth	r3, r3
 80265e8:	b29b      	uxth	r3, r3
 80265ea:	b21b      	sxth	r3, r3
 80265ec:	6938      	ldr	r0, [r7, #16]
 80265ee:	4619      	mov	r1, r3
 80265f0:	f001 fd66 	bl	80280c0 <pbuf_header>
 80265f4:	4603      	mov	r3, r0
 80265f6:	2b00      	cmp	r3, #0
 80265f8:	d000      	beq.n	80265fc <icmp_input+0x11c>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
 80265fa:	e04a      	b.n	8026692 <icmp_input+0x1b2>
      }
      /* free the original p */
      pbuf_free(p);
 80265fc:	6878      	ldr	r0, [r7, #4]
 80265fe:	f001 fdd1 	bl	80281a4 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8026602:	693b      	ldr	r3, [r7, #16]
 8026604:	607b      	str	r3, [r7, #4]
 8026606:	e008      	b.n	802661a <icmp_input+0x13a>
    } else {
      /* restore p->payload to point to icmp header */
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
 8026608:	6878      	ldr	r0, [r7, #4]
 802660a:	f06f 0123 	mvn.w	r1, #35	; 0x23
 802660e:	f001 fd57 	bl	80280c0 <pbuf_header>
 8026612:	4603      	mov	r3, r0
 8026614:	2b00      	cmp	r3, #0
 8026616:	d000      	beq.n	802661a <icmp_input+0x13a>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
 8026618:	e03b      	b.n	8026692 <icmp_input+0x1b2>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 802661a:	687b      	ldr	r3, [r7, #4]
 802661c:	685b      	ldr	r3, [r3, #4]
 802661e:	60fb      	str	r3, [r7, #12]
    ip_addr_copy(iphdr->src, *ip_current_dest_addr());
 8026620:	4b1f      	ldr	r3, [pc, #124]	; (80266a0 <icmp_input+0x1c0>)
 8026622:	681a      	ldr	r2, [r3, #0]
 8026624:	69fb      	ldr	r3, [r7, #28]
 8026626:	60da      	str	r2, [r3, #12]
    ip_addr_copy(iphdr->dest, *ip_current_src_addr());
 8026628:	4b1e      	ldr	r3, [pc, #120]	; (80266a4 <icmp_input+0x1c4>)
 802662a:	681a      	ldr	r2, [r3, #0]
 802662c:	69fb      	ldr	r3, [r7, #28]
 802662e:	611a      	str	r2, [r3, #16]
    ICMPH_TYPE_SET(iecho, ICMP_ER);
 8026630:	68fb      	ldr	r3, [r7, #12]
 8026632:	2200      	movs	r2, #0
 8026634:	701a      	strb	r2, [r3, #0]
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
    } else {
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
    }
#else /* CHECKSUM_GEN_ICMP */
    iecho->chksum = 0;
 8026636:	68fb      	ldr	r3, [r7, #12]
 8026638:	2200      	movs	r2, #0
 802663a:	709a      	strb	r2, [r3, #2]
 802663c:	2200      	movs	r2, #0
 802663e:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

    /* Set the correct TTL and recalculate the header checksum. */
    IPH_TTL_SET(iphdr, ICMP_TTL);
 8026640:	69fb      	ldr	r3, [r7, #28]
 8026642:	22ff      	movs	r2, #255	; 0xff
 8026644:	721a      	strb	r2, [r3, #8]
    IPH_CHKSUM_SET(iphdr, 0);
 8026646:	69fb      	ldr	r3, [r7, #28]
 8026648:	2200      	movs	r2, #0
 802664a:	729a      	strb	r2, [r3, #10]
 802664c:	2200      	movs	r2, #0
 802664e:	72da      	strb	r2, [r3, #11]
    /* increase number of messages attempted to send */
    snmp_inc_icmpoutmsgs();
    /* increase number of echo replies attempted to send */
    snmp_inc_icmpoutechoreps();

    if(pbuf_header(p, hlen)) {
 8026650:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8026654:	6878      	ldr	r0, [r7, #4]
 8026656:	4619      	mov	r1, r3
 8026658:	f001 fd32 	bl	80280c0 <pbuf_header>
 802665c:	4603      	mov	r3, r0
 802665e:	2b00      	cmp	r3, #0
 8026660:	d10d      	bne.n	802667e <icmp_input+0x19e>
      LWIP_ASSERT("Can't move over header in packet", 0);
    } else {
      err_t ret;
      /* send an ICMP packet, src addr is the dest addr of the curren packet */
      ret = ip_output_if(p, ip_current_dest_addr(), IP_HDRINCL,
 8026662:	2300      	movs	r3, #0
 8026664:	9300      	str	r3, [sp, #0]
 8026666:	2301      	movs	r3, #1
 8026668:	9301      	str	r3, [sp, #4]
 802666a:	683b      	ldr	r3, [r7, #0]
 802666c:	9302      	str	r3, [sp, #8]
 802666e:	6878      	ldr	r0, [r7, #4]
 8026670:	490b      	ldr	r1, [pc, #44]	; (80266a0 <icmp_input+0x1c0>)
 8026672:	2200      	movs	r2, #0
 8026674:	23ff      	movs	r3, #255	; 0xff
 8026676:	f000 fd07 	bl	8027088 <ip_output_if>
 802667a:	4603      	mov	r3, r0
 802667c:	72fb      	strb	r3, [r7, #11]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %c.\n", ret));
      }
    }
    break;
 802667e:	e000      	b.n	8026682 <icmp_input+0x1a2>
#endif /* LWIP_DEBUG */
  switch (type) {
  case ICMP_ER:
    /* This is OK, echo reply might have been parsed by a raw PCB
       (as obviously, an echo request has been sent, too). */
    break; 
 8026680:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n", 
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8026682:	6878      	ldr	r0, [r7, #4]
 8026684:	f001 fd8e 	bl	80281a4 <pbuf_free>
  return;
 8026688:	e007      	b.n	802669a <icmp_input+0x1ba>
lenerr:
  pbuf_free(p);
 802668a:	6878      	ldr	r0, [r7, #4]
 802668c:	f001 fd8a 	bl	80281a4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  snmp_inc_icmpinerrors();
  return;
 8026690:	e003      	b.n	802669a <icmp_input+0x1ba>
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
memerr:
  pbuf_free(p);
 8026692:	6878      	ldr	r0, [r7, #4]
 8026694:	f001 fd86 	bl	80281a4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  snmp_inc_icmpinerrors();
  return;
 8026698:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
}
 802669a:	3720      	adds	r7, #32
 802669c:	46bd      	mov	sp, r7
 802669e:	bd80      	pop	{r7, pc}
 80266a0:	1fff014c 	.word	0x1fff014c
 80266a4:	1fff0144 	.word	0x1fff0144

080266a8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80266a8:	b580      	push	{r7, lr}
 80266aa:	b082      	sub	sp, #8
 80266ac:	af00      	add	r7, sp, #0
 80266ae:	6078      	str	r0, [r7, #4]
 80266b0:	460b      	mov	r3, r1
 80266b2:	70fb      	strb	r3, [r7, #3]
  icmp_send_response(p, ICMP_DUR, t);
 80266b4:	78fb      	ldrb	r3, [r7, #3]
 80266b6:	6878      	ldr	r0, [r7, #4]
 80266b8:	2103      	movs	r1, #3
 80266ba:	461a      	mov	r2, r3
 80266bc:	f000 f804 	bl	80266c8 <icmp_send_response>
}
 80266c0:	3708      	adds	r7, #8
 80266c2:	46bd      	mov	sp, r7
 80266c4:	bd80      	pop	{r7, pc}
 80266c6:	bf00      	nop

080266c8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80266c8:	b580      	push	{r7, lr}
 80266ca:	b088      	sub	sp, #32
 80266cc:	af02      	add	r7, sp, #8
 80266ce:	6078      	str	r0, [r7, #4]
 80266d0:	460b      	mov	r3, r1
 80266d2:	70fb      	strb	r3, [r7, #3]
 80266d4:	4613      	mov	r3, r2
 80266d6:	70bb      	strb	r3, [r7, #2]
  /* we can use the echo header here */
  struct icmp_echo_hdr *icmphdr;
  ip_addr_t iphdr_src;

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80266d8:	2001      	movs	r0, #1
 80266da:	2124      	movs	r1, #36	; 0x24
 80266dc:	2200      	movs	r2, #0
 80266de:	f001 fb9d 	bl	8027e1c <pbuf_alloc>
 80266e2:	6178      	str	r0, [r7, #20]
                 PBUF_RAM);
  if (q == NULL) {
 80266e4:	697b      	ldr	r3, [r7, #20]
 80266e6:	2b00      	cmp	r3, #0
 80266e8:	d040      	beq.n	802676c <icmp_send_response+0xa4>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80266ea:	687b      	ldr	r3, [r7, #4]
 80266ec:	685b      	ldr	r3, [r3, #4]
 80266ee:	613b      	str	r3, [r7, #16]
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->src));
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80266f0:	697b      	ldr	r3, [r7, #20]
 80266f2:	685b      	ldr	r3, [r3, #4]
 80266f4:	60fb      	str	r3, [r7, #12]
  icmphdr->type = type;
 80266f6:	68fb      	ldr	r3, [r7, #12]
 80266f8:	78fa      	ldrb	r2, [r7, #3]
 80266fa:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80266fc:	68fb      	ldr	r3, [r7, #12]
 80266fe:	78ba      	ldrb	r2, [r7, #2]
 8026700:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8026702:	68fb      	ldr	r3, [r7, #12]
 8026704:	2200      	movs	r2, #0
 8026706:	711a      	strb	r2, [r3, #4]
 8026708:	2200      	movs	r2, #0
 802670a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 802670c:	68fb      	ldr	r3, [r7, #12]
 802670e:	2200      	movs	r2, #0
 8026710:	719a      	strb	r2, [r3, #6]
 8026712:	2200      	movs	r2, #0
 8026714:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8026716:	697b      	ldr	r3, [r7, #20]
 8026718:	685b      	ldr	r3, [r3, #4]
 802671a:	f103 0208 	add.w	r2, r3, #8
 802671e:	687b      	ldr	r3, [r7, #4]
 8026720:	685b      	ldr	r3, [r3, #4]
 8026722:	4610      	mov	r0, r2
 8026724:	4619      	mov	r1, r3
 8026726:	221c      	movs	r2, #28
 8026728:	f7ff f83c 	bl	80257a4 <thumb2_memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  /* calculate checksum */
  icmphdr->chksum = 0;
 802672c:	68fb      	ldr	r3, [r7, #12]
 802672e:	2200      	movs	r2, #0
 8026730:	709a      	strb	r2, [r3, #2]
 8026732:	2200      	movs	r2, #0
 8026734:	70da      	strb	r2, [r3, #3]
  icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8026736:	697b      	ldr	r3, [r7, #20]
 8026738:	895b      	ldrh	r3, [r3, #10]
 802673a:	68f8      	ldr	r0, [r7, #12]
 802673c:	4619      	mov	r1, r3
 802673e:	f000 fae5 	bl	8026d0c <inet_chksum>
 8026742:	4603      	mov	r3, r0
 8026744:	461a      	mov	r2, r3
 8026746:	68fb      	ldr	r3, [r7, #12]
 8026748:	805a      	strh	r2, [r3, #2]
  ICMP_STATS_INC(icmp.xmit);
  /* increase number of messages attempted to send */
  snmp_inc_icmpoutmsgs();
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
 802674a:	693b      	ldr	r3, [r7, #16]
 802674c:	68db      	ldr	r3, [r3, #12]
 802674e:	60bb      	str	r3, [r7, #8]
  ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
 8026750:	f107 0208 	add.w	r2, r7, #8
 8026754:	2300      	movs	r3, #0
 8026756:	9300      	str	r3, [sp, #0]
 8026758:	2301      	movs	r3, #1
 802675a:	9301      	str	r3, [sp, #4]
 802675c:	6978      	ldr	r0, [r7, #20]
 802675e:	2100      	movs	r1, #0
 8026760:	23ff      	movs	r3, #255	; 0xff
 8026762:	f000 fd5f 	bl	8027224 <ip_output>
  pbuf_free(q);
 8026766:	6978      	ldr	r0, [r7, #20]
 8026768:	f001 fd1c 	bl	80281a4 <pbuf_free>
}
 802676c:	3718      	adds	r7, #24
 802676e:	46bd      	mov	sp, r7
 8026770:	bd80      	pop	{r7, pc}
 8026772:	bf00      	nop

08026774 <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
 8026774:	b480      	push	{r7}
 8026776:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
 8026778:	4b04      	ldr	r3, [pc, #16]	; (802678c <igmp_init+0x18>)
 802677a:	4a05      	ldr	r2, [pc, #20]	; (8026790 <igmp_init+0x1c>)
 802677c:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
 802677e:	4b05      	ldr	r3, [pc, #20]	; (8026794 <igmp_init+0x20>)
 8026780:	4a05      	ldr	r2, [pc, #20]	; (8026798 <igmp_init+0x24>)
 8026782:	601a      	str	r2, [r3, #0]
}
 8026784:	46bd      	mov	sp, r7
 8026786:	f85d 7b04 	ldr.w	r7, [sp], #4
 802678a:	4770      	bx	lr
 802678c:	1ffe9c6c 	.word	0x1ffe9c6c
 8026790:	010000e0 	.word	0x010000e0
 8026794:	1ffe9c70 	.word	0x1ffe9c70
 8026798:	020000e0 	.word	0x020000e0

0802679c <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
 802679c:	b580      	push	{r7, lr}
 802679e:	b084      	sub	sp, #16
 80267a0:	af00      	add	r7, sp, #0
 80267a2:	6078      	str	r0, [r7, #4]
  struct igmp_group* group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", netif));

  group = igmp_lookup_group(netif, &allsystems);
 80267a4:	6878      	ldr	r0, [r7, #4]
 80267a6:	4911      	ldr	r1, [pc, #68]	; (80267ec <igmp_start+0x50>)
 80267a8:	f000 f864 	bl	8026874 <igmp_lookup_group>
 80267ac:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 80267ae:	68fb      	ldr	r3, [r7, #12]
 80267b0:	2b00      	cmp	r3, #0
 80267b2:	d014      	beq.n	80267de <igmp_start+0x42>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 80267b4:	68fb      	ldr	r3, [r7, #12]
 80267b6:	2202      	movs	r2, #2
 80267b8:	735a      	strb	r2, [r3, #13]
    group->use++;
 80267ba:	68fb      	ldr	r3, [r7, #12]
 80267bc:	7c1b      	ldrb	r3, [r3, #16]
 80267be:	3301      	adds	r3, #1
 80267c0:	b2da      	uxtb	r2, r3
 80267c2:	68fb      	ldr	r3, [r7, #12]
 80267c4:	741a      	strb	r2, [r3, #16]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
 80267c6:	687b      	ldr	r3, [r7, #4]
 80267c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80267ca:	2b00      	cmp	r3, #0
 80267cc:	d005      	beq.n	80267da <igmp_start+0x3e>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip_addr_debug_print(IGMP_DEBUG, &allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", netif));
      netif->igmp_mac_filter(netif, &allsystems, IGMP_ADD_MAC_FILTER);
 80267ce:	687b      	ldr	r3, [r7, #4]
 80267d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80267d2:	6878      	ldr	r0, [r7, #4]
 80267d4:	4905      	ldr	r1, [pc, #20]	; (80267ec <igmp_start+0x50>)
 80267d6:	2201      	movs	r2, #1
 80267d8:	4798      	blx	r3
    }

    return ERR_OK;
 80267da:	2300      	movs	r3, #0
 80267dc:	e000      	b.n	80267e0 <igmp_start+0x44>
  }

  return ERR_MEM;
 80267de:	23ff      	movs	r3, #255	; 0xff
 80267e0:	b25b      	sxtb	r3, r3
}
 80267e2:	4618      	mov	r0, r3
 80267e4:	3710      	adds	r7, #16
 80267e6:	46bd      	mov	sp, r7
 80267e8:	bd80      	pop	{r7, pc}
 80267ea:	bf00      	nop
 80267ec:	1ffe9c6c 	.word	0x1ffe9c6c

080267f0 <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
 80267f0:	b580      	push	{r7, lr}
 80267f2:	b084      	sub	sp, #16
 80267f4:	af00      	add	r7, sp, #0
 80267f6:	6078      	str	r0, [r7, #4]
  struct igmp_group *group = igmp_group_list;
 80267f8:	4b0a      	ldr	r3, [pc, #40]	; (8026824 <igmp_report_groups+0x34>)
 80267fa:	681b      	ldr	r3, [r3, #0]
 80267fc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", netif));

  while (group != NULL) {
 80267fe:	e00b      	b.n	8026818 <igmp_report_groups+0x28>
    if (group->netif == netif) {
 8026800:	68fb      	ldr	r3, [r7, #12]
 8026802:	685a      	ldr	r2, [r3, #4]
 8026804:	687b      	ldr	r3, [r7, #4]
 8026806:	429a      	cmp	r2, r3
 8026808:	d103      	bne.n	8026812 <igmp_report_groups+0x22>
      igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 802680a:	68f8      	ldr	r0, [r7, #12]
 802680c:	2105      	movs	r1, #5
 802680e:	f000 f977 	bl	8026b00 <igmp_delaying_member>
    }
    group = group->next;
 8026812:	68fb      	ldr	r3, [r7, #12]
 8026814:	681b      	ldr	r3, [r3, #0]
 8026816:	60fb      	str	r3, [r7, #12]
{
  struct igmp_group *group = igmp_group_list;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", netif));

  while (group != NULL) {
 8026818:	68fb      	ldr	r3, [r7, #12]
 802681a:	2b00      	cmp	r3, #0
 802681c:	d1f0      	bne.n	8026800 <igmp_report_groups+0x10>
    if (group->netif == netif) {
      igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
    }
    group = group->next;
  }
}
 802681e:	3710      	adds	r7, #16
 8026820:	46bd      	mov	sp, r7
 8026822:	bd80      	pop	{r7, pc}
 8026824:	1ffe9c68 	.word	0x1ffe9c68

08026828 <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, ip_addr_t *addr)
{
 8026828:	b480      	push	{r7}
 802682a:	b085      	sub	sp, #20
 802682c:	af00      	add	r7, sp, #0
 802682e:	6078      	str	r0, [r7, #4]
 8026830:	6039      	str	r1, [r7, #0]
  struct igmp_group *group = igmp_group_list;
 8026832:	4b0f      	ldr	r3, [pc, #60]	; (8026870 <igmp_lookfor_group+0x48>)
 8026834:	681b      	ldr	r3, [r3, #0]
 8026836:	60fb      	str	r3, [r7, #12]

  while (group != NULL) {
 8026838:	e00f      	b.n	802685a <igmp_lookfor_group+0x32>
    if ((group->netif == ifp) && (ip_addr_cmp(&(group->group_address), addr))) {
 802683a:	68fb      	ldr	r3, [r7, #12]
 802683c:	685a      	ldr	r2, [r3, #4]
 802683e:	687b      	ldr	r3, [r7, #4]
 8026840:	429a      	cmp	r2, r3
 8026842:	d107      	bne.n	8026854 <igmp_lookfor_group+0x2c>
 8026844:	68fb      	ldr	r3, [r7, #12]
 8026846:	689a      	ldr	r2, [r3, #8]
 8026848:	683b      	ldr	r3, [r7, #0]
 802684a:	681b      	ldr	r3, [r3, #0]
 802684c:	429a      	cmp	r2, r3
 802684e:	d101      	bne.n	8026854 <igmp_lookfor_group+0x2c>
      return group;
 8026850:	68fb      	ldr	r3, [r7, #12]
 8026852:	e006      	b.n	8026862 <igmp_lookfor_group+0x3a>
    }
    group = group->next;
 8026854:	68fb      	ldr	r3, [r7, #12]
 8026856:	681b      	ldr	r3, [r3, #0]
 8026858:	60fb      	str	r3, [r7, #12]
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, ip_addr_t *addr)
{
  struct igmp_group *group = igmp_group_list;

  while (group != NULL) {
 802685a:	68fb      	ldr	r3, [r7, #12]
 802685c:	2b00      	cmp	r3, #0
 802685e:	d1ec      	bne.n	802683a <igmp_lookfor_group+0x12>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
 8026860:	2300      	movs	r3, #0
}
 8026862:	4618      	mov	r0, r3
 8026864:	3714      	adds	r7, #20
 8026866:	46bd      	mov	sp, r7
 8026868:	f85d 7b04 	ldr.w	r7, [sp], #4
 802686c:	4770      	bx	lr
 802686e:	bf00      	nop
 8026870:	1ffe9c68 	.word	0x1ffe9c68

08026874 <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
struct igmp_group *
igmp_lookup_group(struct netif *ifp, ip_addr_t *addr)
{
 8026874:	b580      	push	{r7, lr}
 8026876:	b084      	sub	sp, #16
 8026878:	af00      	add	r7, sp, #0
 802687a:	6078      	str	r0, [r7, #4]
 802687c:	6039      	str	r1, [r7, #0]
  struct igmp_group *group = igmp_group_list;
 802687e:	4b1c      	ldr	r3, [pc, #112]	; (80268f0 <igmp_lookup_group+0x7c>)
 8026880:	681b      	ldr	r3, [r3, #0]
 8026882:	60fb      	str	r3, [r7, #12]
  
  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
 8026884:	6878      	ldr	r0, [r7, #4]
 8026886:	6839      	ldr	r1, [r7, #0]
 8026888:	f7ff ffce 	bl	8026828 <igmp_lookfor_group>
 802688c:	60f8      	str	r0, [r7, #12]
  if (group != NULL) {
 802688e:	68fb      	ldr	r3, [r7, #12]
 8026890:	2b00      	cmp	r3, #0
 8026892:	d001      	beq.n	8026898 <igmp_lookup_group+0x24>
    /* Group already exists. */
    return group;
 8026894:	68fb      	ldr	r3, [r7, #12]
 8026896:	e026      	b.n	80268e6 <igmp_lookup_group+0x72>
  }

  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
 8026898:	2002      	movs	r0, #2
 802689a:	f001 f901 	bl	8027aa0 <memp_malloc>
 802689e:	60f8      	str	r0, [r7, #12]
  if (group != NULL) {
 80268a0:	68fb      	ldr	r3, [r7, #12]
 80268a2:	2b00      	cmp	r3, #0
 80268a4:	d01e      	beq.n	80268e4 <igmp_lookup_group+0x70>
    group->netif              = ifp;
 80268a6:	68fb      	ldr	r3, [r7, #12]
 80268a8:	687a      	ldr	r2, [r7, #4]
 80268aa:	605a      	str	r2, [r3, #4]
    ip_addr_set(&(group->group_address), addr);
 80268ac:	683b      	ldr	r3, [r7, #0]
 80268ae:	2b00      	cmp	r3, #0
 80268b0:	d002      	beq.n	80268b8 <igmp_lookup_group+0x44>
 80268b2:	683b      	ldr	r3, [r7, #0]
 80268b4:	681b      	ldr	r3, [r3, #0]
 80268b6:	e000      	b.n	80268ba <igmp_lookup_group+0x46>
 80268b8:	2300      	movs	r3, #0
 80268ba:	68fa      	ldr	r2, [r7, #12]
 80268bc:	6093      	str	r3, [r2, #8]
    group->timer              = 0; /* Not running */
 80268be:	68fb      	ldr	r3, [r7, #12]
 80268c0:	2200      	movs	r2, #0
 80268c2:	81da      	strh	r2, [r3, #14]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
 80268c4:	68fb      	ldr	r3, [r7, #12]
 80268c6:	2200      	movs	r2, #0
 80268c8:	735a      	strb	r2, [r3, #13]
    group->last_reporter_flag = 0;
 80268ca:	68fb      	ldr	r3, [r7, #12]
 80268cc:	2200      	movs	r2, #0
 80268ce:	731a      	strb	r2, [r3, #12]
    group->use                = 0;
 80268d0:	68fb      	ldr	r3, [r7, #12]
 80268d2:	2200      	movs	r2, #0
 80268d4:	741a      	strb	r2, [r3, #16]
    group->next               = igmp_group_list;
 80268d6:	4b06      	ldr	r3, [pc, #24]	; (80268f0 <igmp_lookup_group+0x7c>)
 80268d8:	681a      	ldr	r2, [r3, #0]
 80268da:	68fb      	ldr	r3, [r7, #12]
 80268dc:	601a      	str	r2, [r3, #0]
    
    igmp_group_list = group;
 80268de:	4a04      	ldr	r2, [pc, #16]	; (80268f0 <igmp_lookup_group+0x7c>)
 80268e0:	68fb      	ldr	r3, [r7, #12]
 80268e2:	6013      	str	r3, [r2, #0]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group?"":"impossible to ")));
  ip_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", ifp));

  return group;
 80268e4:	68fb      	ldr	r3, [r7, #12]
}
 80268e6:	4618      	mov	r0, r3
 80268e8:	3710      	adds	r7, #16
 80268ea:	46bd      	mov	sp, r7
 80268ec:	bd80      	pop	{r7, pc}
 80268ee:	bf00      	nop
 80268f0:	1ffe9c68 	.word	0x1ffe9c68

080268f4 <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, ip_addr_t *dest)
{
 80268f4:	b580      	push	{r7, lr}
 80268f6:	b08a      	sub	sp, #40	; 0x28
 80268f8:	af00      	add	r7, sp, #0
 80268fa:	60f8      	str	r0, [r7, #12]
 80268fc:	60b9      	str	r1, [r7, #8]
 80268fe:	607a      	str	r2, [r7, #4]
  struct igmp_group* groupref;

  IGMP_STATS_INC(igmp.recv);

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */    
  iphdr = (struct ip_hdr *)p->payload;
 8026900:	68fb      	ldr	r3, [r7, #12]
 8026902:	685b      	ldr	r3, [r3, #4]
 8026904:	61fb      	str	r3, [r7, #28]
  if (pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4)) || (p->len < IGMP_MINLEN)) {
 8026906:	69fb      	ldr	r3, [r7, #28]
 8026908:	781b      	ldrb	r3, [r3, #0]
 802690a:	b29b      	uxth	r3, r3
 802690c:	f003 030f 	and.w	r3, r3, #15
 8026910:	b29b      	uxth	r3, r3
 8026912:	009b      	lsls	r3, r3, #2
 8026914:	b29b      	uxth	r3, r3
 8026916:	425b      	negs	r3, r3
 8026918:	b29b      	uxth	r3, r3
 802691a:	b29b      	uxth	r3, r3
 802691c:	b21b      	sxth	r3, r3
 802691e:	68f8      	ldr	r0, [r7, #12]
 8026920:	4619      	mov	r1, r3
 8026922:	f001 fbcd 	bl	80280c0 <pbuf_header>
 8026926:	4603      	mov	r3, r0
 8026928:	2b00      	cmp	r3, #0
 802692a:	d103      	bne.n	8026934 <igmp_input+0x40>
 802692c:	68fb      	ldr	r3, [r7, #12]
 802692e:	895b      	ldrh	r3, [r3, #10]
 8026930:	2b07      	cmp	r3, #7
 8026932:	d803      	bhi.n	802693c <igmp_input+0x48>
    pbuf_free(p);
 8026934:	68f8      	ldr	r0, [r7, #12]
 8026936:	f001 fc35 	bl	80281a4 <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
 802693a:	e088      	b.n	8026a4e <igmp_input+0x15a>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip_addr_debug_print(IGMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
 802693c:	68fb      	ldr	r3, [r7, #12]
 802693e:	685b      	ldr	r3, [r3, #4]
 8026940:	61bb      	str	r3, [r7, #24]
  if (inet_chksum(igmp, p->len)) {
 8026942:	68fb      	ldr	r3, [r7, #12]
 8026944:	895b      	ldrh	r3, [r3, #10]
 8026946:	69b8      	ldr	r0, [r7, #24]
 8026948:	4619      	mov	r1, r3
 802694a:	f000 f9df 	bl	8026d0c <inet_chksum>
 802694e:	4603      	mov	r3, r0
 8026950:	2b00      	cmp	r3, #0
 8026952:	d003      	beq.n	802695c <igmp_input+0x68>
    pbuf_free(p);
 8026954:	68f8      	ldr	r0, [r7, #12]
 8026956:	f001 fc25 	bl	80281a4 <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
 802695a:	e078      	b.n	8026a4e <igmp_input+0x15a>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
 802695c:	68b8      	ldr	r0, [r7, #8]
 802695e:	6879      	ldr	r1, [r7, #4]
 8026960:	f7ff ff62 	bl	8026828 <igmp_lookfor_group>
 8026964:	6278      	str	r0, [r7, #36]	; 0x24
  
  /* If group can be found or create... */
  if (!group) {
 8026966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026968:	2b00      	cmp	r3, #0
 802696a:	d103      	bne.n	8026974 <igmp_input+0x80>
    pbuf_free(p);
 802696c:	68f8      	ldr	r0, [r7, #12]
 802696e:	f001 fc19 	bl	80281a4 <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
 8026972:	e06c      	b.n	8026a4e <igmp_input+0x15a>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
 8026974:	69bb      	ldr	r3, [r7, #24]
 8026976:	781b      	ldrb	r3, [r3, #0]
 8026978:	2b11      	cmp	r3, #17
 802697a:	d002      	beq.n	8026982 <igmp_input+0x8e>
 802697c:	2b16      	cmp	r3, #22
 802697e:	d053      	beq.n	8026a28 <igmp_input+0x134>
   }
   default: {
     LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
       igmp->igmp_msgtype, group->group_state, &group, group->netif));
     IGMP_STATS_INC(igmp.proterr);
     break;
 8026980:	e061      	b.n	8026a46 <igmp_input+0x152>

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
   case IGMP_MEMB_QUERY: {
     /* IGMP_MEMB_QUERY to the "all systems" address ? */
     if ((ip_addr_cmp(dest, &allsystems)) && ip_addr_isany(&igmp->igmp_group_address)) {
 8026982:	687b      	ldr	r3, [r7, #4]
 8026984:	681a      	ldr	r2, [r3, #0]
 8026986:	4b33      	ldr	r3, [pc, #204]	; (8026a54 <igmp_input+0x160>)
 8026988:	681b      	ldr	r3, [r3, #0]
 802698a:	429a      	cmp	r2, r3
 802698c:	d12a      	bne.n	80269e4 <igmp_input+0xf0>
 802698e:	69bb      	ldr	r3, [r7, #24]
 8026990:	3304      	adds	r3, #4
 8026992:	2b00      	cmp	r3, #0
 8026994:	d003      	beq.n	802699e <igmp_input+0xaa>
 8026996:	69bb      	ldr	r3, [r7, #24]
 8026998:	685b      	ldr	r3, [r3, #4]
 802699a:	2b00      	cmp	r3, #0
 802699c:	d122      	bne.n	80269e4 <igmp_input+0xf0>
       /* THIS IS THE GENERAL QUERY */
       LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: General IGMP_MEMB_QUERY on \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));

       if (igmp->igmp_maxresp == 0) {
 802699e:	69bb      	ldr	r3, [r7, #24]
 80269a0:	785b      	ldrb	r3, [r3, #1]
 80269a2:	2b00      	cmp	r3, #0
 80269a4:	d102      	bne.n	80269ac <igmp_input+0xb8>
         IGMP_STATS_INC(igmp.rx_v1);
         LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: got an all hosts query with time== 0 - this is V1 and not implemented - treat as v2\n"));
         igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
 80269a6:	69bb      	ldr	r3, [r7, #24]
 80269a8:	220a      	movs	r2, #10
 80269aa:	705a      	strb	r2, [r3, #1]
       } else {
         IGMP_STATS_INC(igmp.rx_general);
       }

       groupref = igmp_group_list;
 80269ac:	4b2a      	ldr	r3, [pc, #168]	; (8026a58 <igmp_input+0x164>)
 80269ae:	681b      	ldr	r3, [r3, #0]
 80269b0:	623b      	str	r3, [r7, #32]
       while (groupref) {
 80269b2:	e013      	b.n	80269dc <igmp_input+0xe8>
         /* Do not send messages on the all systems group address! */
         if ((groupref->netif == inp) && (!(ip_addr_cmp(&(groupref->group_address), &allsystems)))) {
 80269b4:	6a3b      	ldr	r3, [r7, #32]
 80269b6:	685a      	ldr	r2, [r3, #4]
 80269b8:	68bb      	ldr	r3, [r7, #8]
 80269ba:	429a      	cmp	r2, r3
 80269bc:	d10b      	bne.n	80269d6 <igmp_input+0xe2>
 80269be:	6a3b      	ldr	r3, [r7, #32]
 80269c0:	689a      	ldr	r2, [r3, #8]
 80269c2:	4b24      	ldr	r3, [pc, #144]	; (8026a54 <igmp_input+0x160>)
 80269c4:	681b      	ldr	r3, [r3, #0]
 80269c6:	429a      	cmp	r2, r3
 80269c8:	d005      	beq.n	80269d6 <igmp_input+0xe2>
           igmp_delaying_member(groupref, igmp->igmp_maxresp);
 80269ca:	69bb      	ldr	r3, [r7, #24]
 80269cc:	785b      	ldrb	r3, [r3, #1]
 80269ce:	6a38      	ldr	r0, [r7, #32]
 80269d0:	4619      	mov	r1, r3
 80269d2:	f000 f895 	bl	8026b00 <igmp_delaying_member>
         }
         groupref = groupref->next;
 80269d6:	6a3b      	ldr	r3, [r7, #32]
 80269d8:	681b      	ldr	r3, [r3, #0]
 80269da:	623b      	str	r3, [r7, #32]
       } else {
         IGMP_STATS_INC(igmp.rx_general);
       }

       groupref = igmp_group_list;
       while (groupref) {
 80269dc:	6a3b      	ldr	r3, [r7, #32]
 80269de:	2b00      	cmp	r3, #0
 80269e0:	d1e8      	bne.n	80269b4 <igmp_input+0xc0>

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
   case IGMP_MEMB_QUERY: {
     /* IGMP_MEMB_QUERY to the "all systems" address ? */
     if ((ip_addr_cmp(dest, &allsystems)) && ip_addr_isany(&igmp->igmp_group_address)) {
 80269e2:	e020      	b.n	8026a26 <igmp_input+0x132>
         }
         groupref = groupref->next;
       }
     } else {
       /* IGMP_MEMB_QUERY to a specific group ? */
       if (!ip_addr_isany(&igmp->igmp_group_address)) {
 80269e4:	69bb      	ldr	r3, [r7, #24]
 80269e6:	3304      	adds	r3, #4
 80269e8:	2b00      	cmp	r3, #0
 80269ea:	d01c      	beq.n	8026a26 <igmp_input+0x132>
 80269ec:	69bb      	ldr	r3, [r7, #24]
 80269ee:	685b      	ldr	r3, [r3, #4]
 80269f0:	2b00      	cmp	r3, #0
 80269f2:	d018      	beq.n	8026a26 <igmp_input+0x132>
         LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_MEMB_QUERY to a specific group "));
         ip_addr_debug_print(IGMP_DEBUG, &igmp->igmp_group_address);
         if (ip_addr_cmp(dest, &allsystems)) {
 80269f4:	687b      	ldr	r3, [r7, #4]
 80269f6:	681a      	ldr	r2, [r3, #0]
 80269f8:	4b16      	ldr	r3, [pc, #88]	; (8026a54 <igmp_input+0x160>)
 80269fa:	681b      	ldr	r3, [r3, #0]
 80269fc:	429a      	cmp	r2, r3
 80269fe:	d109      	bne.n	8026a14 <igmp_input+0x120>
           ip_addr_t groupaddr;
           LWIP_DEBUGF(IGMP_DEBUG, (" using \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
           /* we first need to re-look for the group since we used dest last time */
           ip_addr_copy(groupaddr, igmp->igmp_group_address);
 8026a00:	69bb      	ldr	r3, [r7, #24]
 8026a02:	685b      	ldr	r3, [r3, #4]
 8026a04:	617b      	str	r3, [r7, #20]
           group = igmp_lookfor_group(inp, &groupaddr);
 8026a06:	f107 0314 	add.w	r3, r7, #20
 8026a0a:	68b8      	ldr	r0, [r7, #8]
 8026a0c:	4619      	mov	r1, r3
 8026a0e:	f7ff ff0b 	bl	8026828 <igmp_lookfor_group>
 8026a12:	6278      	str	r0, [r7, #36]	; 0x24
         } else {
           LWIP_DEBUGF(IGMP_DEBUG, (" with the group address as destination [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
         }

         if (group != NULL) {
 8026a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026a16:	2b00      	cmp	r3, #0
 8026a18:	d005      	beq.n	8026a26 <igmp_input+0x132>
           IGMP_STATS_INC(igmp.rx_group);
           igmp_delaying_member(group, igmp->igmp_maxresp);
 8026a1a:	69bb      	ldr	r3, [r7, #24]
 8026a1c:	785b      	ldrb	r3, [r3, #1]
 8026a1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8026a20:	4619      	mov	r1, r3
 8026a22:	f000 f86d 	bl	8026b00 <igmp_delaying_member>
         }
       } else {
         IGMP_STATS_INC(igmp.proterr);
       }
     }
     break;
 8026a26:	e00e      	b.n	8026a46 <igmp_input+0x152>
   }
   case IGMP_V2_MEMB_REPORT: {
     LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_V2_MEMB_REPORT\n"));
     IGMP_STATS_INC(igmp.rx_report);
     if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 8026a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026a2a:	7b5b      	ldrb	r3, [r3, #13]
 8026a2c:	2b01      	cmp	r3, #1
 8026a2e:	d109      	bne.n	8026a44 <igmp_input+0x150>
       /* This is on a specific group we have already looked up */
       group->timer = 0; /* stopped */
 8026a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026a32:	2200      	movs	r2, #0
 8026a34:	81da      	strh	r2, [r3, #14]
       group->group_state = IGMP_GROUP_IDLE_MEMBER;
 8026a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026a38:	2202      	movs	r2, #2
 8026a3a:	735a      	strb	r2, [r3, #13]
       group->last_reporter_flag = 0;
 8026a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026a3e:	2200      	movs	r2, #0
 8026a40:	731a      	strb	r2, [r3, #12]
     }
     break;
 8026a42:	e7ff      	b.n	8026a44 <igmp_input+0x150>
 8026a44:	bf00      	nop
     IGMP_STATS_INC(igmp.proterr);
     break;
   }
  }

  pbuf_free(p);
 8026a46:	68f8      	ldr	r0, [r7, #12]
 8026a48:	f001 fbac 	bl	80281a4 <pbuf_free>
  return;
 8026a4c:	bf00      	nop
}
 8026a4e:	3728      	adds	r7, #40	; 0x28
 8026a50:	46bd      	mov	sp, r7
 8026a52:	bd80      	pop	{r7, pc}
 8026a54:	1ffe9c6c 	.word	0x1ffe9c6c
 8026a58:	1ffe9c68 	.word	0x1ffe9c68

08026a5c <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
 8026a5c:	b580      	push	{r7, lr}
 8026a5e:	b082      	sub	sp, #8
 8026a60:	af00      	add	r7, sp, #0
  struct igmp_group *group = igmp_group_list;
 8026a62:	4b0f      	ldr	r3, [pc, #60]	; (8026aa0 <igmp_tmr+0x44>)
 8026a64:	681b      	ldr	r3, [r3, #0]
 8026a66:	607b      	str	r3, [r7, #4]

  while (group != NULL) {
 8026a68:	e013      	b.n	8026a92 <igmp_tmr+0x36>
    if (group->timer > 0) {
 8026a6a:	687b      	ldr	r3, [r7, #4]
 8026a6c:	89db      	ldrh	r3, [r3, #14]
 8026a6e:	2b00      	cmp	r3, #0
 8026a70:	d00c      	beq.n	8026a8c <igmp_tmr+0x30>
      group->timer--;
 8026a72:	687b      	ldr	r3, [r7, #4]
 8026a74:	89db      	ldrh	r3, [r3, #14]
 8026a76:	3b01      	subs	r3, #1
 8026a78:	b29a      	uxth	r2, r3
 8026a7a:	687b      	ldr	r3, [r7, #4]
 8026a7c:	81da      	strh	r2, [r3, #14]
      if (group->timer == 0) {
 8026a7e:	687b      	ldr	r3, [r7, #4]
 8026a80:	89db      	ldrh	r3, [r3, #14]
 8026a82:	2b00      	cmp	r3, #0
 8026a84:	d102      	bne.n	8026a8c <igmp_tmr+0x30>
        igmp_timeout(group);
 8026a86:	6878      	ldr	r0, [r7, #4]
 8026a88:	f000 f80c 	bl	8026aa4 <igmp_timeout>
      }
    }
    group = group->next;
 8026a8c:	687b      	ldr	r3, [r7, #4]
 8026a8e:	681b      	ldr	r3, [r3, #0]
 8026a90:	607b      	str	r3, [r7, #4]
void
igmp_tmr(void)
{
  struct igmp_group *group = igmp_group_list;

  while (group != NULL) {
 8026a92:	687b      	ldr	r3, [r7, #4]
 8026a94:	2b00      	cmp	r3, #0
 8026a96:	d1e8      	bne.n	8026a6a <igmp_tmr+0xe>
        igmp_timeout(group);
      }
    }
    group = group->next;
  }
}
 8026a98:	3708      	adds	r7, #8
 8026a9a:	46bd      	mov	sp, r7
 8026a9c:	bd80      	pop	{r7, pc}
 8026a9e:	bf00      	nop
 8026aa0:	1ffe9c68 	.word	0x1ffe9c68

08026aa4 <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct igmp_group *group)
{
 8026aa4:	b580      	push	{r7, lr}
 8026aa6:	b082      	sub	sp, #8
 8026aa8:	af00      	add	r7, sp, #0
 8026aaa:	6078      	str	r0, [r7, #4]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group */
  if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 8026aac:	687b      	ldr	r3, [r7, #4]
 8026aae:	7b5b      	ldrb	r3, [r3, #13]
 8026ab0:	2b01      	cmp	r3, #1
 8026ab2:	d103      	bne.n	8026abc <igmp_timeout+0x18>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip_addr_debug_print(IGMP_DEBUG, &(group->group_address));
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", group->netif));

    IGMP_STATS_INC(igmp.tx_report);
    igmp_send(group, IGMP_V2_MEMB_REPORT);
 8026ab4:	6878      	ldr	r0, [r7, #4]
 8026ab6:	2116      	movs	r1, #22
 8026ab8:	f000 f868 	bl	8026b8c <igmp_send>
  }
}
 8026abc:	3708      	adds	r7, #8
 8026abe:	46bd      	mov	sp, r7
 8026ac0:	bd80      	pop	{r7, pc}
 8026ac2:	bf00      	nop

08026ac4 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
 8026ac4:	b580      	push	{r7, lr}
 8026ac6:	b082      	sub	sp, #8
 8026ac8:	af00      	add	r7, sp, #0
 8026aca:	6078      	str	r0, [r7, #4]
 8026acc:	460b      	mov	r3, r1
 8026ace:	70fb      	strb	r3, [r7, #3]
  /* ensure the input value is > 0 */
  if (max_time == 0) {
 8026ad0:	78fb      	ldrb	r3, [r7, #3]
 8026ad2:	2b00      	cmp	r3, #0
 8026ad4:	d101      	bne.n	8026ada <igmp_start_timer+0x16>
    max_time = 1;
 8026ad6:	2301      	movs	r3, #1
 8026ad8:	70fb      	strb	r3, [r7, #3]
  }
  /* ensure the random value is > 0 */
  group->timer = (LWIP_RAND() % (max_time - 1)) + 1;
 8026ada:	f003 f98b 	bl	8029df4 <rand>
 8026ade:	4603      	mov	r3, r0
 8026ae0:	78fa      	ldrb	r2, [r7, #3]
 8026ae2:	3a01      	subs	r2, #1
 8026ae4:	fbb3 f1f2 	udiv	r1, r3, r2
 8026ae8:	fb02 f201 	mul.w	r2, r2, r1
 8026aec:	1a9b      	subs	r3, r3, r2
 8026aee:	b29b      	uxth	r3, r3
 8026af0:	3301      	adds	r3, #1
 8026af2:	b29a      	uxth	r2, r3
 8026af4:	687b      	ldr	r3, [r7, #4]
 8026af6:	81da      	strh	r2, [r3, #14]
}
 8026af8:	3708      	adds	r7, #8
 8026afa:	46bd      	mov	sp, r7
 8026afc:	bd80      	pop	{r7, pc}
 8026afe:	bf00      	nop

08026b00 <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
 8026b00:	b580      	push	{r7, lr}
 8026b02:	b082      	sub	sp, #8
 8026b04:	af00      	add	r7, sp, #0
 8026b06:	6078      	str	r0, [r7, #4]
 8026b08:	460b      	mov	r3, r1
 8026b0a:	70fb      	strb	r3, [r7, #3]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8026b0c:	687b      	ldr	r3, [r7, #4]
 8026b0e:	7b5b      	ldrb	r3, [r3, #13]
 8026b10:	2b02      	cmp	r3, #2
 8026b12:	d00d      	beq.n	8026b30 <igmp_delaying_member+0x30>
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8026b14:	687b      	ldr	r3, [r7, #4]
 8026b16:	7b5b      	ldrb	r3, [r3, #13]
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8026b18:	2b01      	cmp	r3, #1
 8026b1a:	d111      	bne.n	8026b40 <igmp_delaying_member+0x40>
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
      ((group->timer == 0) || (maxresp < group->timer)))) {
 8026b1c:	687b      	ldr	r3, [r7, #4]
 8026b1e:	89db      	ldrh	r3, [r3, #14]
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8026b20:	2b00      	cmp	r3, #0
 8026b22:	d005      	beq.n	8026b30 <igmp_delaying_member+0x30>
      ((group->timer == 0) || (maxresp < group->timer)))) {
 8026b24:	78fb      	ldrb	r3, [r7, #3]
 8026b26:	b29a      	uxth	r2, r3
 8026b28:	687b      	ldr	r3, [r7, #4]
 8026b2a:	89db      	ldrh	r3, [r3, #14]
 8026b2c:	429a      	cmp	r2, r3
 8026b2e:	d207      	bcs.n	8026b40 <igmp_delaying_member+0x40>
    igmp_start_timer(group, maxresp);
 8026b30:	78fb      	ldrb	r3, [r7, #3]
 8026b32:	6878      	ldr	r0, [r7, #4]
 8026b34:	4619      	mov	r1, r3
 8026b36:	f7ff ffc5 	bl	8026ac4 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 8026b3a:	687b      	ldr	r3, [r7, #4]
 8026b3c:	2201      	movs	r2, #1
 8026b3e:	735a      	strb	r2, [r3, #13]
  }
}
 8026b40:	3708      	adds	r7, #8
 8026b42:	46bd      	mov	sp, r7
 8026b44:	bd80      	pop	{r7, pc}
 8026b46:	bf00      	nop

08026b48 <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest, struct netif *netif)
{
 8026b48:	b580      	push	{r7, lr}
 8026b4a:	b08c      	sub	sp, #48	; 0x30
 8026b4c:	af06      	add	r7, sp, #24
 8026b4e:	60f8      	str	r0, [r7, #12]
 8026b50:	60b9      	str	r1, [r7, #8]
 8026b52:	607a      	str	r2, [r7, #4]
 8026b54:	603b      	str	r3, [r7, #0]
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
 8026b56:	f240 4394 	movw	r3, #1172	; 0x494
 8026b5a:	82bb      	strh	r3, [r7, #20]
  ra[1] = 0x0000; /* Router shall examine packet */
 8026b5c:	2300      	movs	r3, #0
 8026b5e:	82fb      	strh	r3, [r7, #22]
  IGMP_STATS_INC(igmp.xmit);
  return ip_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
 8026b60:	2300      	movs	r3, #0
 8026b62:	9300      	str	r3, [sp, #0]
 8026b64:	2302      	movs	r3, #2
 8026b66:	9301      	str	r3, [sp, #4]
 8026b68:	683b      	ldr	r3, [r7, #0]
 8026b6a:	9302      	str	r3, [sp, #8]
 8026b6c:	f107 0314 	add.w	r3, r7, #20
 8026b70:	9303      	str	r3, [sp, #12]
 8026b72:	2304      	movs	r3, #4
 8026b74:	9304      	str	r3, [sp, #16]
 8026b76:	68f8      	ldr	r0, [r7, #12]
 8026b78:	68b9      	ldr	r1, [r7, #8]
 8026b7a:	687a      	ldr	r2, [r7, #4]
 8026b7c:	2301      	movs	r3, #1
 8026b7e:	f000 faa3 	bl	80270c8 <ip_output_if_opt>
 8026b82:	4603      	mov	r3, r0
}
 8026b84:	4618      	mov	r0, r3
 8026b86:	3718      	adds	r7, #24
 8026b88:	46bd      	mov	sp, r7
 8026b8a:	bd80      	pop	{r7, pc}

08026b8c <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct igmp_group *group, u8_t type)
{
 8026b8c:	b580      	push	{r7, lr}
 8026b8e:	b086      	sub	sp, #24
 8026b90:	af00      	add	r7, sp, #0
 8026b92:	6078      	str	r0, [r7, #4]
 8026b94:	460b      	mov	r3, r1
 8026b96:	70fb      	strb	r3, [r7, #3]
  struct pbuf*     p    = NULL;
 8026b98:	2300      	movs	r3, #0
 8026b9a:	613b      	str	r3, [r7, #16]
  struct igmp_msg* igmp = NULL;
 8026b9c:	2300      	movs	r3, #0
 8026b9e:	60fb      	str	r3, [r7, #12]
  ip_addr_t   src  = *IP_ADDR_ANY;
 8026ba0:	4b29      	ldr	r3, [pc, #164]	; (8026c48 <igmp_send+0xbc>)
 8026ba2:	681b      	ldr	r3, [r3, #0]
 8026ba4:	60bb      	str	r3, [r7, #8]
  ip_addr_t*  dest = NULL;
 8026ba6:	2300      	movs	r3, #0
 8026ba8:	617b      	str	r3, [r7, #20]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
 8026baa:	2000      	movs	r0, #0
 8026bac:	2108      	movs	r1, #8
 8026bae:	2200      	movs	r2, #0
 8026bb0:	f001 f934 	bl	8027e1c <pbuf_alloc>
 8026bb4:	6138      	str	r0, [r7, #16]
  
  if (p) {
 8026bb6:	693b      	ldr	r3, [r7, #16]
 8026bb8:	2b00      	cmp	r3, #0
 8026bba:	d042      	beq.n	8026c42 <igmp_send+0xb6>
    igmp = (struct igmp_msg *)p->payload;
 8026bbc:	693b      	ldr	r3, [r7, #16]
 8026bbe:	685b      	ldr	r3, [r3, #4]
 8026bc0:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
               (p->len >= sizeof(struct igmp_msg)));
    ip_addr_copy(src, group->netif->ip_addr);
 8026bc2:	687b      	ldr	r3, [r7, #4]
 8026bc4:	685b      	ldr	r3, [r3, #4]
 8026bc6:	685b      	ldr	r3, [r3, #4]
 8026bc8:	60bb      	str	r3, [r7, #8]
     
    if (type == IGMP_V2_MEMB_REPORT) {
 8026bca:	78fb      	ldrb	r3, [r7, #3]
 8026bcc:	2b16      	cmp	r3, #22
 8026bce:	d10a      	bne.n	8026be6 <igmp_send+0x5a>
      dest = &(group->group_address);
 8026bd0:	687b      	ldr	r3, [r7, #4]
 8026bd2:	3308      	adds	r3, #8
 8026bd4:	617b      	str	r3, [r7, #20]
      ip_addr_copy(igmp->igmp_group_address, group->group_address);
 8026bd6:	687b      	ldr	r3, [r7, #4]
 8026bd8:	689a      	ldr	r2, [r3, #8]
 8026bda:	68fb      	ldr	r3, [r7, #12]
 8026bdc:	605a      	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
 8026bde:	687b      	ldr	r3, [r7, #4]
 8026be0:	2201      	movs	r2, #1
 8026be2:	731a      	strb	r2, [r3, #12]
 8026be4:	e008      	b.n	8026bf8 <igmp_send+0x6c>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
 8026be6:	78fb      	ldrb	r3, [r7, #3]
 8026be8:	2b17      	cmp	r3, #23
 8026bea:	d105      	bne.n	8026bf8 <igmp_send+0x6c>
        dest = &allrouters;
 8026bec:	4b17      	ldr	r3, [pc, #92]	; (8026c4c <igmp_send+0xc0>)
 8026bee:	617b      	str	r3, [r7, #20]
        ip_addr_copy(igmp->igmp_group_address, group->group_address);
 8026bf0:	687b      	ldr	r3, [r7, #4]
 8026bf2:	689a      	ldr	r2, [r3, #8]
 8026bf4:	68fb      	ldr	r3, [r7, #12]
 8026bf6:	605a      	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
 8026bf8:	78fb      	ldrb	r3, [r7, #3]
 8026bfa:	2b16      	cmp	r3, #22
 8026bfc:	d002      	beq.n	8026c04 <igmp_send+0x78>
 8026bfe:	78fb      	ldrb	r3, [r7, #3]
 8026c00:	2b17      	cmp	r3, #23
 8026c02:	d11b      	bne.n	8026c3c <igmp_send+0xb0>
      igmp->igmp_msgtype  = type;
 8026c04:	68fb      	ldr	r3, [r7, #12]
 8026c06:	78fa      	ldrb	r2, [r7, #3]
 8026c08:	701a      	strb	r2, [r3, #0]
      igmp->igmp_maxresp  = 0;
 8026c0a:	68fb      	ldr	r3, [r7, #12]
 8026c0c:	2200      	movs	r2, #0
 8026c0e:	705a      	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
 8026c10:	68fb      	ldr	r3, [r7, #12]
 8026c12:	2200      	movs	r2, #0
 8026c14:	709a      	strb	r2, [r3, #2]
 8026c16:	2200      	movs	r2, #0
 8026c18:	70da      	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
 8026c1a:	68f8      	ldr	r0, [r7, #12]
 8026c1c:	2108      	movs	r1, #8
 8026c1e:	f000 f875 	bl	8026d0c <inet_chksum>
 8026c22:	4603      	mov	r3, r0
 8026c24:	461a      	mov	r2, r3
 8026c26:	68fb      	ldr	r3, [r7, #12]
 8026c28:	805a      	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, group->netif);
 8026c2a:	687b      	ldr	r3, [r7, #4]
 8026c2c:	685b      	ldr	r3, [r3, #4]
 8026c2e:	f107 0208 	add.w	r2, r7, #8
 8026c32:	6938      	ldr	r0, [r7, #16]
 8026c34:	4611      	mov	r1, r2
 8026c36:	697a      	ldr	r2, [r7, #20]
 8026c38:	f7ff ff86 	bl	8026b48 <igmp_ip_output_if>
    }

    pbuf_free(p);
 8026c3c:	6938      	ldr	r0, [r7, #16]
 8026c3e:	f001 fab1 	bl	80281a4 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
 8026c42:	3718      	adds	r7, #24
 8026c44:	46bd      	mov	sp, r7
 8026c46:	bd80      	pop	{r7, pc}
 8026c48:	0802a354 	.word	0x0802a354
 8026c4c:	1ffe9c70 	.word	0x1ffe9c70

08026c50 <lwip_standard_chksum>:
 * @return host order (!) lwip checksum (non-inverted Internet sum) 
 */

static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
 8026c50:	b480      	push	{r7}
 8026c52:	b089      	sub	sp, #36	; 0x24
 8026c54:	af00      	add	r7, sp, #0
 8026c56:	6078      	str	r0, [r7, #4]
 8026c58:	6039      	str	r1, [r7, #0]
  u8_t *pb = (u8_t *)dataptr;
 8026c5a:	687b      	ldr	r3, [r7, #4]
 8026c5c:	61fb      	str	r3, [r7, #28]
  u16_t *ps, t = 0;
 8026c5e:	2300      	movs	r3, #0
 8026c60:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8026c62:	2300      	movs	r3, #0
 8026c64:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8026c66:	69fb      	ldr	r3, [r7, #28]
 8026c68:	f003 0301 	and.w	r3, r3, #1
 8026c6c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8026c6e:	693b      	ldr	r3, [r7, #16]
 8026c70:	2b00      	cmp	r3, #0
 8026c72:	d00d      	beq.n	8026c90 <lwip_standard_chksum+0x40>
 8026c74:	683b      	ldr	r3, [r7, #0]
 8026c76:	2b00      	cmp	r3, #0
 8026c78:	dd0a      	ble.n	8026c90 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8026c7a:	f107 030e 	add.w	r3, r7, #14
 8026c7e:	3301      	adds	r3, #1
 8026c80:	69fa      	ldr	r2, [r7, #28]
 8026c82:	1c51      	adds	r1, r2, #1
 8026c84:	61f9      	str	r1, [r7, #28]
 8026c86:	7812      	ldrb	r2, [r2, #0]
 8026c88:	701a      	strb	r2, [r3, #0]
    len--;
 8026c8a:	683b      	ldr	r3, [r7, #0]
 8026c8c:	3b01      	subs	r3, #1
 8026c8e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
 8026c90:	69fb      	ldr	r3, [r7, #28]
 8026c92:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8026c94:	e00a      	b.n	8026cac <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8026c96:	69bb      	ldr	r3, [r7, #24]
 8026c98:	1c9a      	adds	r2, r3, #2
 8026c9a:	61ba      	str	r2, [r7, #24]
 8026c9c:	881b      	ldrh	r3, [r3, #0]
 8026c9e:	461a      	mov	r2, r3
 8026ca0:	697b      	ldr	r3, [r7, #20]
 8026ca2:	4413      	add	r3, r2
 8026ca4:	617b      	str	r3, [r7, #20]
    len -= 2;
 8026ca6:	683b      	ldr	r3, [r7, #0]
 8026ca8:	3b02      	subs	r3, #2
 8026caa:	603b      	str	r3, [r7, #0]
    len--;
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
  while (len > 1) {
 8026cac:	683b      	ldr	r3, [r7, #0]
 8026cae:	2b01      	cmp	r3, #1
 8026cb0:	dcf1      	bgt.n	8026c96 <lwip_standard_chksum+0x46>
    sum += *ps++;
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8026cb2:	683b      	ldr	r3, [r7, #0]
 8026cb4:	2b00      	cmp	r3, #0
 8026cb6:	dd04      	ble.n	8026cc2 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(u8_t *)ps;
 8026cb8:	f107 030e 	add.w	r3, r7, #14
 8026cbc:	69ba      	ldr	r2, [r7, #24]
 8026cbe:	7812      	ldrb	r2, [r2, #0]
 8026cc0:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8026cc2:	89fb      	ldrh	r3, [r7, #14]
 8026cc4:	461a      	mov	r2, r3
 8026cc6:	697b      	ldr	r3, [r7, #20]
 8026cc8:	4413      	add	r3, r2
 8026cca:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  sum = FOLD_U32T(sum);
 8026ccc:	697b      	ldr	r3, [r7, #20]
 8026cce:	0c1a      	lsrs	r2, r3, #16
 8026cd0:	697b      	ldr	r3, [r7, #20]
 8026cd2:	b29b      	uxth	r3, r3
 8026cd4:	4413      	add	r3, r2
 8026cd6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8026cd8:	697b      	ldr	r3, [r7, #20]
 8026cda:	0c1a      	lsrs	r2, r3, #16
 8026cdc:	697b      	ldr	r3, [r7, #20]
 8026cde:	b29b      	uxth	r3, r3
 8026ce0:	4413      	add	r3, r2
 8026ce2:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8026ce4:	693b      	ldr	r3, [r7, #16]
 8026ce6:	2b00      	cmp	r3, #0
 8026ce8:	d008      	beq.n	8026cfc <lwip_standard_chksum+0xac>
    sum = SWAP_BYTES_IN_WORD(sum);
 8026cea:	697b      	ldr	r3, [r7, #20]
 8026cec:	021b      	lsls	r3, r3, #8
 8026cee:	b29a      	uxth	r2, r3
 8026cf0:	697b      	ldr	r3, [r7, #20]
 8026cf2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026cf6:	0a1b      	lsrs	r3, r3, #8
 8026cf8:	4313      	orrs	r3, r2
 8026cfa:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8026cfc:	697b      	ldr	r3, [r7, #20]
 8026cfe:	b29b      	uxth	r3, r3
}
 8026d00:	4618      	mov	r0, r3
 8026d02:	3724      	adds	r7, #36	; 0x24
 8026d04:	46bd      	mov	sp, r7
 8026d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d0a:	4770      	bx	lr

08026d0c <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(void *dataptr, u16_t len)
{
 8026d0c:	b580      	push	{r7, lr}
 8026d0e:	b082      	sub	sp, #8
 8026d10:	af00      	add	r7, sp, #0
 8026d12:	6078      	str	r0, [r7, #4]
 8026d14:	460b      	mov	r3, r1
 8026d16:	807b      	strh	r3, [r7, #2]
  return ~LWIP_CHKSUM(dataptr, len);
 8026d18:	887b      	ldrh	r3, [r7, #2]
 8026d1a:	6878      	ldr	r0, [r7, #4]
 8026d1c:	4619      	mov	r1, r3
 8026d1e:	f7ff ff97 	bl	8026c50 <lwip_standard_chksum>
 8026d22:	4603      	mov	r3, r0
 8026d24:	43db      	mvns	r3, r3
 8026d26:	b29b      	uxth	r3, r3
}
 8026d28:	4618      	mov	r0, r3
 8026d2a:	3708      	adds	r7, #8
 8026d2c:	46bd      	mov	sp, r7
 8026d2e:	bd80      	pop	{r7, pc}

08026d30 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8026d30:	b580      	push	{r7, lr}
 8026d32:	b086      	sub	sp, #24
 8026d34:	af00      	add	r7, sp, #0
 8026d36:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
 8026d38:	2300      	movs	r3, #0
 8026d3a:	617b      	str	r3, [r7, #20]
  swapped = 0;
 8026d3c:	2300      	movs	r3, #0
 8026d3e:	73fb      	strb	r3, [r7, #15]
  for(q = p; q != NULL; q = q->next) {
 8026d40:	687b      	ldr	r3, [r7, #4]
 8026d42:	613b      	str	r3, [r7, #16]
 8026d44:	e029      	b.n	8026d9a <inet_chksum_pbuf+0x6a>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8026d46:	693b      	ldr	r3, [r7, #16]
 8026d48:	685a      	ldr	r2, [r3, #4]
 8026d4a:	693b      	ldr	r3, [r7, #16]
 8026d4c:	895b      	ldrh	r3, [r3, #10]
 8026d4e:	4610      	mov	r0, r2
 8026d50:	4619      	mov	r1, r3
 8026d52:	f7ff ff7d 	bl	8026c50 <lwip_standard_chksum>
 8026d56:	4603      	mov	r3, r0
 8026d58:	461a      	mov	r2, r3
 8026d5a:	697b      	ldr	r3, [r7, #20]
 8026d5c:	4413      	add	r3, r2
 8026d5e:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8026d60:	697b      	ldr	r3, [r7, #20]
 8026d62:	0c1a      	lsrs	r2, r3, #16
 8026d64:	697b      	ldr	r3, [r7, #20]
 8026d66:	b29b      	uxth	r3, r3
 8026d68:	4413      	add	r3, r2
 8026d6a:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8026d6c:	693b      	ldr	r3, [r7, #16]
 8026d6e:	895b      	ldrh	r3, [r3, #10]
 8026d70:	f003 0301 	and.w	r3, r3, #1
 8026d74:	b29b      	uxth	r3, r3
 8026d76:	2b00      	cmp	r3, #0
 8026d78:	d00c      	beq.n	8026d94 <inet_chksum_pbuf+0x64>
      swapped = 1 - swapped;
 8026d7a:	7bfb      	ldrb	r3, [r7, #15]
 8026d7c:	f1c3 0301 	rsb	r3, r3, #1
 8026d80:	73fb      	strb	r3, [r7, #15]
      acc = SWAP_BYTES_IN_WORD(acc);
 8026d82:	697b      	ldr	r3, [r7, #20]
 8026d84:	021b      	lsls	r3, r3, #8
 8026d86:	b29a      	uxth	r2, r3
 8026d88:	697b      	ldr	r3, [r7, #20]
 8026d8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026d8e:	0a1b      	lsrs	r3, r3, #8
 8026d90:	4313      	orrs	r3, r2
 8026d92:	617b      	str	r3, [r7, #20]
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for(q = p; q != NULL; q = q->next) {
 8026d94:	693b      	ldr	r3, [r7, #16]
 8026d96:	681b      	ldr	r3, [r3, #0]
 8026d98:	613b      	str	r3, [r7, #16]
 8026d9a:	693b      	ldr	r3, [r7, #16]
 8026d9c:	2b00      	cmp	r3, #0
 8026d9e:	d1d2      	bne.n	8026d46 <inet_chksum_pbuf+0x16>
      swapped = 1 - swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 8026da0:	7bfb      	ldrb	r3, [r7, #15]
 8026da2:	2b00      	cmp	r3, #0
 8026da4:	d008      	beq.n	8026db8 <inet_chksum_pbuf+0x88>
    acc = SWAP_BYTES_IN_WORD(acc);
 8026da6:	697b      	ldr	r3, [r7, #20]
 8026da8:	021b      	lsls	r3, r3, #8
 8026daa:	b29a      	uxth	r2, r3
 8026dac:	697b      	ldr	r3, [r7, #20]
 8026dae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026db2:	0a1b      	lsrs	r3, r3, #8
 8026db4:	4313      	orrs	r3, r2
 8026db6:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8026db8:	697b      	ldr	r3, [r7, #20]
 8026dba:	b29b      	uxth	r3, r3
 8026dbc:	43db      	mvns	r3, r3
 8026dbe:	b29b      	uxth	r3, r3
}
 8026dc0:	4618      	mov	r0, r3
 8026dc2:	3718      	adds	r7, #24
 8026dc4:	46bd      	mov	sp, r7
 8026dc6:	bd80      	pop	{r7, pc}

08026dc8 <ip_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip_route(ip_addr_t *dest)
{
 8026dc8:	b480      	push	{r7}
 8026dca:	b085      	sub	sp, #20
 8026dcc:	af00      	add	r7, sp, #0
 8026dce:	6078      	str	r0, [r7, #4]
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8026dd0:	4b19      	ldr	r3, [pc, #100]	; (8026e38 <ip_route+0x70>)
 8026dd2:	681b      	ldr	r3, [r3, #0]
 8026dd4:	60fb      	str	r3, [r7, #12]
 8026dd6:	e015      	b.n	8026e04 <ip_route+0x3c>
    /* network mask matches? */
    if (netif_is_up(netif)) {
 8026dd8:	68fb      	ldr	r3, [r7, #12]
 8026dda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8026dde:	f003 0301 	and.w	r3, r3, #1
 8026de2:	2b00      	cmp	r3, #0
 8026de4:	d00b      	beq.n	8026dfe <ip_route+0x36>
      if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
 8026de6:	687b      	ldr	r3, [r7, #4]
 8026de8:	681a      	ldr	r2, [r3, #0]
 8026dea:	68fb      	ldr	r3, [r7, #12]
 8026dec:	685b      	ldr	r3, [r3, #4]
 8026dee:	405a      	eors	r2, r3
 8026df0:	68fb      	ldr	r3, [r7, #12]
 8026df2:	689b      	ldr	r3, [r3, #8]
 8026df4:	4013      	ands	r3, r2
 8026df6:	2b00      	cmp	r3, #0
 8026df8:	d101      	bne.n	8026dfe <ip_route+0x36>
        /* return netif on which to forward IP packet */
        return netif;
 8026dfa:	68fb      	ldr	r3, [r7, #12]
 8026dfc:	e015      	b.n	8026e2a <ip_route+0x62>
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8026dfe:	68fb      	ldr	r3, [r7, #12]
 8026e00:	681b      	ldr	r3, [r3, #0]
 8026e02:	60fb      	str	r3, [r7, #12]
 8026e04:	68fb      	ldr	r3, [r7, #12]
 8026e06:	2b00      	cmp	r3, #0
 8026e08:	d1e6      	bne.n	8026dd8 <ip_route+0x10>
        /* return netif on which to forward IP packet */
        return netif;
      }
    }
  }
  if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
 8026e0a:	4b0c      	ldr	r3, [pc, #48]	; (8026e3c <ip_route+0x74>)
 8026e0c:	681b      	ldr	r3, [r3, #0]
 8026e0e:	2b00      	cmp	r3, #0
 8026e10:	d007      	beq.n	8026e22 <ip_route+0x5a>
 8026e12:	4b0a      	ldr	r3, [pc, #40]	; (8026e3c <ip_route+0x74>)
 8026e14:	681b      	ldr	r3, [r3, #0]
 8026e16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8026e1a:	f003 0301 	and.w	r3, r3, #1
 8026e1e:	2b00      	cmp	r3, #0
 8026e20:	d101      	bne.n	8026e26 <ip_route+0x5e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    snmp_inc_ipoutnoroutes();
    return NULL;
 8026e22:	2300      	movs	r3, #0
 8026e24:	e001      	b.n	8026e2a <ip_route+0x62>
  }
  /* no matching netif found, use default netif */
  return netif_default;
 8026e26:	4b05      	ldr	r3, [pc, #20]	; (8026e3c <ip_route+0x74>)
 8026e28:	681b      	ldr	r3, [r3, #0]
}
 8026e2a:	4618      	mov	r0, r3
 8026e2c:	3714      	adds	r7, #20
 8026e2e:	46bd      	mov	sp, r7
 8026e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e34:	4770      	bx	lr
 8026e36:	bf00      	nop
 8026e38:	1fff07a8 	.word	0x1fff07a8
 8026e3c:	1fff07ac 	.word	0x1fff07ac

08026e40 <ip_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
 8026e40:	b580      	push	{r7, lr}
 8026e42:	b086      	sub	sp, #24
 8026e44:	af00      	add	r7, sp, #0
 8026e46:	6078      	str	r0, [r7, #4]
 8026e48:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  snmp_inc_ipinreceives();

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8026e4a:	687b      	ldr	r3, [r7, #4]
 8026e4c:	685b      	ldr	r3, [r3, #4]
 8026e4e:	60fb      	str	r3, [r7, #12]
  if (IPH_V(iphdr) != 4) {
 8026e50:	68fb      	ldr	r3, [r7, #12]
 8026e52:	781b      	ldrb	r3, [r3, #0]
 8026e54:	091b      	lsrs	r3, r3, #4
 8026e56:	b2db      	uxtb	r3, r3
 8026e58:	2b04      	cmp	r3, #4
 8026e5a:	d004      	beq.n	8026e66 <ip_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
    ip_debug_print(p);
    pbuf_free(p);
 8026e5c:	6878      	ldr	r0, [r7, #4]
 8026e5e:	f001 f9a1 	bl	80281a4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
 8026e62:	2300      	movs	r3, #0
 8026e64:	e100      	b.n	8027068 <ip_input+0x228>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8026e66:	68fb      	ldr	r3, [r7, #12]
 8026e68:	781b      	ldrb	r3, [r3, #0]
 8026e6a:	b29b      	uxth	r3, r3
 8026e6c:	f003 030f 	and.w	r3, r3, #15
 8026e70:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8026e72:	897b      	ldrh	r3, [r7, #10]
 8026e74:	009b      	lsls	r3, r3, #2
 8026e76:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
 8026e78:	68fb      	ldr	r3, [r7, #12]
 8026e7a:	885b      	ldrh	r3, [r3, #2]
 8026e7c:	b29b      	uxth	r3, r3
 8026e7e:	4618      	mov	r0, r3
 8026e80:	f000 fb64 	bl	802754c <lwip_ntohs>
 8026e84:	4603      	mov	r3, r0
 8026e86:	813b      	strh	r3, [r7, #8]

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
 8026e88:	687b      	ldr	r3, [r7, #4]
 8026e8a:	895b      	ldrh	r3, [r3, #10]
 8026e8c:	897a      	ldrh	r2, [r7, #10]
 8026e8e:	429a      	cmp	r2, r3
 8026e90:	d804      	bhi.n	8026e9c <ip_input+0x5c>
 8026e92:	687b      	ldr	r3, [r7, #4]
 8026e94:	891b      	ldrh	r3, [r3, #8]
 8026e96:	893a      	ldrh	r2, [r7, #8]
 8026e98:	429a      	cmp	r2, r3
 8026e9a:	d904      	bls.n	8026ea6 <ip_input+0x66>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8026e9c:	6878      	ldr	r0, [r7, #4]
 8026e9e:	f001 f981 	bl	80281a4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    snmp_inc_ipindiscards();
    return ERR_OK;
 8026ea2:	2300      	movs	r3, #0
 8026ea4:	e0e0      	b.n	8027068 <ip_input+0x228>
  }
#endif

  /* Trim pbuf. This should have been done at the netif layer,
   * but we'll do it anyway just to be sure that its done. */
  pbuf_realloc(p, iphdr_len);
 8026ea6:	893b      	ldrh	r3, [r7, #8]
 8026ea8:	6878      	ldr	r0, [r7, #4]
 8026eaa:	4619      	mov	r1, r3
 8026eac:	f001 f8b0 	bl	8028010 <pbuf_realloc>

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy(current_iphdr_dest, iphdr->dest);
 8026eb0:	68fb      	ldr	r3, [r7, #12]
 8026eb2:	691b      	ldr	r3, [r3, #16]
 8026eb4:	4a6f      	ldr	r2, [pc, #444]	; (8027074 <ip_input+0x234>)
 8026eb6:	6013      	str	r3, [r2, #0]
  ip_addr_copy(current_iphdr_src, iphdr->src);
 8026eb8:	68fb      	ldr	r3, [r7, #12]
 8026eba:	68db      	ldr	r3, [r3, #12]
 8026ebc:	4a6e      	ldr	r2, [pc, #440]	; (8027078 <ip_input+0x238>)
 8026ebe:	6013      	str	r3, [r2, #0]

  /* match packet against an interface, i.e. is this packet for us? */
#if LWIP_IGMP
  if (ip_addr_ismulticast(&current_iphdr_dest)) {
 8026ec0:	4b6c      	ldr	r3, [pc, #432]	; (8027074 <ip_input+0x234>)
 8026ec2:	681b      	ldr	r3, [r3, #0]
 8026ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8026ec8:	2be0      	cmp	r3, #224	; 0xe0
 8026eca:	d113      	bne.n	8026ef4 <ip_input+0xb4>
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, &current_iphdr_dest))) {
 8026ecc:	683b      	ldr	r3, [r7, #0]
 8026ece:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8026ed2:	b2db      	uxtb	r3, r3
 8026ed4:	b25b      	sxtb	r3, r3
 8026ed6:	2b00      	cmp	r3, #0
 8026ed8:	da09      	bge.n	8026eee <ip_input+0xae>
 8026eda:	6838      	ldr	r0, [r7, #0]
 8026edc:	4965      	ldr	r1, [pc, #404]	; (8027074 <ip_input+0x234>)
 8026ede:	f7ff fca3 	bl	8026828 <igmp_lookfor_group>
 8026ee2:	4603      	mov	r3, r0
 8026ee4:	2b00      	cmp	r3, #0
 8026ee6:	d002      	beq.n	8026eee <ip_input+0xae>
      netif = inp;
 8026ee8:	683b      	ldr	r3, [r7, #0]
 8026eea:	617b      	str	r3, [r7, #20]
 8026eec:	e03a      	b.n	8026f64 <ip_input+0x124>
    } else {
      netif = NULL;
 8026eee:	2300      	movs	r3, #0
 8026ef0:	617b      	str	r3, [r7, #20]
 8026ef2:	e037      	b.n	8026f64 <ip_input+0x124>
#endif /* LWIP_IGMP */
  {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8026ef4:	2301      	movs	r3, #1
 8026ef6:	613b      	str	r3, [r7, #16]
    netif = inp;
 8026ef8:	683b      	ldr	r3, [r7, #0]
 8026efa:	617b      	str	r3, [r7, #20]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&netif->ip_addr) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
 8026efc:	697b      	ldr	r3, [r7, #20]
 8026efe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8026f02:	f003 0301 	and.w	r3, r3, #1
 8026f06:	2b00      	cmp	r3, #0
 8026f08:	d016      	beq.n	8026f38 <ip_input+0xf8>
 8026f0a:	697b      	ldr	r3, [r7, #20]
 8026f0c:	3304      	adds	r3, #4
 8026f0e:	2b00      	cmp	r3, #0
 8026f10:	d012      	beq.n	8026f38 <ip_input+0xf8>
 8026f12:	697b      	ldr	r3, [r7, #20]
 8026f14:	685b      	ldr	r3, [r3, #4]
 8026f16:	2b00      	cmp	r3, #0
 8026f18:	d00e      	beq.n	8026f38 <ip_input+0xf8>
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
 8026f1a:	4b56      	ldr	r3, [pc, #344]	; (8027074 <ip_input+0x234>)
 8026f1c:	681a      	ldr	r2, [r3, #0]
 8026f1e:	697b      	ldr	r3, [r7, #20]
 8026f20:	685b      	ldr	r3, [r3, #4]
 8026f22:	429a      	cmp	r2, r3
 8026f24:	d01e      	beq.n	8026f64 <ip_input+0x124>
            /* or broadcast on this interface network address? */
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
 8026f26:	4b53      	ldr	r3, [pc, #332]	; (8027074 <ip_input+0x234>)
 8026f28:	681b      	ldr	r3, [r3, #0]
 8026f2a:	4618      	mov	r0, r3
 8026f2c:	6979      	ldr	r1, [r7, #20]
 8026f2e:	f000 f99f 	bl	8027270 <ip4_addr_isbroadcast>
 8026f32:	4603      	mov	r3, r0
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
 8026f34:	2b00      	cmp	r3, #0
 8026f36:	d115      	bne.n	8026f64 <ip_input+0x124>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8026f38:	693b      	ldr	r3, [r7, #16]
 8026f3a:	2b00      	cmp	r3, #0
 8026f3c:	d005      	beq.n	8026f4a <ip_input+0x10a>
        first = 0;
 8026f3e:	2300      	movs	r3, #0
 8026f40:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 8026f42:	4b4e      	ldr	r3, [pc, #312]	; (802707c <ip_input+0x23c>)
 8026f44:	681b      	ldr	r3, [r3, #0]
 8026f46:	617b      	str	r3, [r7, #20]
 8026f48:	e002      	b.n	8026f50 <ip_input+0x110>
      } else {
        netif = netif->next;
 8026f4a:	697b      	ldr	r3, [r7, #20]
 8026f4c:	681b      	ldr	r3, [r3, #0]
 8026f4e:	617b      	str	r3, [r7, #20]
      }
      if (netif == inp) {
 8026f50:	697a      	ldr	r2, [r7, #20]
 8026f52:	683b      	ldr	r3, [r7, #0]
 8026f54:	429a      	cmp	r2, r3
 8026f56:	d102      	bne.n	8026f5e <ip_input+0x11e>
        netif = netif->next;
 8026f58:	697b      	ldr	r3, [r7, #20]
 8026f5a:	681b      	ldr	r3, [r3, #0]
 8026f5c:	617b      	str	r3, [r7, #20]
      }
    } while(netif != NULL);
 8026f5e:	697b      	ldr	r3, [r7, #20]
 8026f60:	2b00      	cmp	r3, #0
 8026f62:	d1cb      	bne.n	8026efc <ip_input+0xbc>
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
 8026f64:	4b44      	ldr	r3, [pc, #272]	; (8027078 <ip_input+0x238>)
 8026f66:	681b      	ldr	r3, [r3, #0]
 8026f68:	4618      	mov	r0, r3
 8026f6a:	6839      	ldr	r1, [r7, #0]
 8026f6c:	f000 f980 	bl	8027270 <ip4_addr_isbroadcast>
 8026f70:	4603      	mov	r3, r0
 8026f72:	2b00      	cmp	r3, #0
 8026f74:	d105      	bne.n	8026f82 <ip_input+0x142>
         (ip_addr_ismulticast(&current_iphdr_src))) {
 8026f76:	4b40      	ldr	r3, [pc, #256]	; (8027078 <ip_input+0x238>)
 8026f78:	681b      	ldr	r3, [r3, #0]
 8026f7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
 8026f7e:	2be0      	cmp	r3, #224	; 0xe0
 8026f80:	d104      	bne.n	8026f8c <ip_input+0x14c>
         (ip_addr_ismulticast(&current_iphdr_src))) {
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8026f82:	6878      	ldr	r0, [r7, #4]
 8026f84:	f001 f90e 	bl	80281a4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
      return ERR_OK;
 8026f88:	2300      	movs	r3, #0
 8026f8a:	e06d      	b.n	8027068 <ip_input+0x228>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8026f8c:	697b      	ldr	r3, [r7, #20]
 8026f8e:	2b00      	cmp	r3, #0
 8026f90:	d104      	bne.n	8026f9c <ip_input+0x15c>
#endif /* IP_FORWARD */
    {
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
    }
    pbuf_free(p);
 8026f92:	6878      	ldr	r0, [r7, #4]
 8026f94:	f001 f906 	bl	80281a4 <pbuf_free>
    return ERR_OK;
 8026f98:	2300      	movs	r3, #0
 8026f9a:	e065      	b.n	8027068 <ip_input+0x228>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8026f9c:	68fb      	ldr	r3, [r7, #12]
 8026f9e:	88db      	ldrh	r3, [r3, #6]
 8026fa0:	b29b      	uxth	r3, r3
 8026fa2:	461a      	mov	r2, r3
 8026fa4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8026fa8:	4013      	ands	r3, r2
 8026faa:	2b00      	cmp	r3, #0
 8026fac:	d004      	beq.n	8026fb8 <ip_input+0x178>
    if (p == NULL) {
      return ERR_OK;
    }
    iphdr = (struct ip_hdr *)p->payload;
#else /* IP_REASSEMBLY == 0, no packet fragment reassembly code present */
    pbuf_free(p);
 8026fae:	6878      	ldr	r0, [r7, #4]
 8026fb0:	f001 f8f8 	bl	80281a4 <pbuf_free>
      ntohs(IPH_OFFSET(iphdr))));
    IP_STATS_INC(ip.opterr);
    IP_STATS_INC(ip.drop);
    /* unsupported protocol feature */
    snmp_inc_ipinunknownprotos();
    return ERR_OK;
 8026fb4:	2300      	movs	r3, #0
 8026fb6:	e057      	b.n	8027068 <ip_input+0x228>

#if IP_OPTIONS_ALLOWED == 0 /* no support for IP options in the IP header? */

#if LWIP_IGMP
  /* there is an extra "router alert" option in IGMP messages which we allow for but do not police */
  if((iphdr_hlen > IP_HLEN) &&  (IPH_PROTO(iphdr) != IP_PROTO_IGMP)) {
 8026fb8:	897b      	ldrh	r3, [r7, #10]
 8026fba:	2b14      	cmp	r3, #20
 8026fbc:	d908      	bls.n	8026fd0 <ip_input+0x190>
 8026fbe:	68fb      	ldr	r3, [r7, #12]
 8026fc0:	7a5b      	ldrb	r3, [r3, #9]
 8026fc2:	2b02      	cmp	r3, #2
 8026fc4:	d004      	beq.n	8026fd0 <ip_input+0x190>
#else
  if (iphdr_hlen > IP_HLEN) {
#endif /* LWIP_IGMP */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since there were IP options (while IP_OPTIONS_ALLOWED == 0).\n"));
    pbuf_free(p);
 8026fc6:	6878      	ldr	r0, [r7, #4]
 8026fc8:	f001 f8ec 	bl	80281a4 <pbuf_free>
    IP_STATS_INC(ip.opterr);
    IP_STATS_INC(ip.drop);
    /* unsupported protocol feature */
    snmp_inc_ipinunknownprotos();
    return ERR_OK;
 8026fcc:	2300      	movs	r3, #0
 8026fce:	e04b      	b.n	8027068 <ip_input+0x228>
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
  ip_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  current_netif = inp;
 8026fd0:	4a2b      	ldr	r2, [pc, #172]	; (8027080 <ip_input+0x240>)
 8026fd2:	683b      	ldr	r3, [r7, #0]
 8026fd4:	6013      	str	r3, [r2, #0]
  current_header = iphdr;
 8026fd6:	4a2b      	ldr	r2, [pc, #172]	; (8027084 <ip_input+0x244>)
 8026fd8:	68fb      	ldr	r3, [r7, #12]
 8026fda:	6013      	str	r3, [r2, #0]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
 8026fdc:	6878      	ldr	r0, [r7, #4]
 8026fde:	6839      	ldr	r1, [r7, #0]
 8026fe0:	f001 fa02 	bl	80283e8 <raw_input>
 8026fe4:	4603      	mov	r3, r0
 8026fe6:	2b00      	cmp	r3, #0
 8026fe8:	d131      	bne.n	802704e <ip_input+0x20e>
#endif /* LWIP_RAW */
  {
    switch (IPH_PROTO(iphdr)) {
 8026fea:	68fb      	ldr	r3, [r7, #12]
 8026fec:	7a5b      	ldrb	r3, [r3, #9]
 8026fee:	2b02      	cmp	r3, #2
 8026ff0:	d00e      	beq.n	8027010 <ip_input+0x1d0>
 8026ff2:	2b11      	cmp	r3, #17
 8026ff4:	d002      	beq.n	8026ffc <ip_input+0x1bc>
 8026ff6:	2b01      	cmp	r3, #1
 8026ff8:	d005      	beq.n	8027006 <ip_input+0x1c6>
 8026ffa:	e00f      	b.n	802701c <ip_input+0x1dc>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      snmp_inc_ipindelivers();
      udp_input(p, inp);
 8026ffc:	6878      	ldr	r0, [r7, #4]
 8026ffe:	6839      	ldr	r1, [r7, #0]
 8027000:	f001 fb82 	bl	8028708 <udp_input>
      break;
 8027004:	e023      	b.n	802704e <ip_input+0x20e>
      break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      snmp_inc_ipindelivers();
      icmp_input(p, inp);
 8027006:	6878      	ldr	r0, [r7, #4]
 8027008:	6839      	ldr	r1, [r7, #0]
 802700a:	f7ff fa69 	bl	80264e0 <icmp_input>
      break;
 802700e:	e01e      	b.n	802704e <ip_input+0x20e>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
    case IP_PROTO_IGMP:
      igmp_input(p, inp, &current_iphdr_dest);
 8027010:	6878      	ldr	r0, [r7, #4]
 8027012:	6839      	ldr	r1, [r7, #0]
 8027014:	4a17      	ldr	r2, [pc, #92]	; (8027074 <ip_input+0x234>)
 8027016:	f7ff fc6d 	bl	80268f4 <igmp_input>
      break;
 802701a:	e018      	b.n	802704e <ip_input+0x20e>
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
 802701c:	4b15      	ldr	r3, [pc, #84]	; (8027074 <ip_input+0x234>)
 802701e:	681b      	ldr	r3, [r3, #0]
 8027020:	4618      	mov	r0, r3
 8027022:	6839      	ldr	r1, [r7, #0]
 8027024:	f000 f924 	bl	8027270 <ip4_addr_isbroadcast>
 8027028:	4603      	mov	r3, r0
 802702a:	2b00      	cmp	r3, #0
 802702c:	d10c      	bne.n	8027048 <ip_input+0x208>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
 802702e:	4b11      	ldr	r3, [pc, #68]	; (8027074 <ip_input+0x234>)
 8027030:	681b      	ldr	r3, [r3, #0]
 8027032:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
 8027036:	2be0      	cmp	r3, #224	; 0xe0
 8027038:	d006      	beq.n	8027048 <ip_input+0x208>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        p->payload = iphdr;
 802703a:	687b      	ldr	r3, [r7, #4]
 802703c:	68fa      	ldr	r2, [r7, #12]
 802703e:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8027040:	6878      	ldr	r0, [r7, #4]
 8027042:	2102      	movs	r1, #2
 8027044:	f7ff fb30 	bl	80266a8 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8027048:	6878      	ldr	r0, [r7, #4]
 802704a:	f001 f8ab 	bl	80281a4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      snmp_inc_ipinunknownprotos();
    }
  }

  current_netif = NULL;
 802704e:	4b0c      	ldr	r3, [pc, #48]	; (8027080 <ip_input+0x240>)
 8027050:	2200      	movs	r2, #0
 8027052:	601a      	str	r2, [r3, #0]
  current_header = NULL;
 8027054:	4b0b      	ldr	r3, [pc, #44]	; (8027084 <ip_input+0x244>)
 8027056:	2200      	movs	r2, #0
 8027058:	601a      	str	r2, [r3, #0]
  ip_addr_set_any(&current_iphdr_src);
 802705a:	4b07      	ldr	r3, [pc, #28]	; (8027078 <ip_input+0x238>)
 802705c:	2200      	movs	r2, #0
 802705e:	601a      	str	r2, [r3, #0]
  ip_addr_set_any(&current_iphdr_dest);
 8027060:	4b04      	ldr	r3, [pc, #16]	; (8027074 <ip_input+0x234>)
 8027062:	2200      	movs	r2, #0
 8027064:	601a      	str	r2, [r3, #0]

  return ERR_OK;
 8027066:	2300      	movs	r3, #0
 8027068:	b25b      	sxtb	r3, r3
}
 802706a:	4618      	mov	r0, r3
 802706c:	3718      	adds	r7, #24
 802706e:	46bd      	mov	sp, r7
 8027070:	bd80      	pop	{r7, pc}
 8027072:	bf00      	nop
 8027074:	1fff014c 	.word	0x1fff014c
 8027078:	1fff0144 	.word	0x1fff0144
 802707c:	1fff07a8 	.word	0x1fff07a8
 8027080:	1fff0148 	.word	0x1fff0148
 8027084:	1fff0150 	.word	0x1fff0150

08027088 <ip_output_if>:
 */
err_t
ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8027088:	b590      	push	{r4, r7, lr}
 802708a:	b08b      	sub	sp, #44	; 0x2c
 802708c:	af06      	add	r7, sp, #24
 802708e:	60f8      	str	r0, [r7, #12]
 8027090:	60b9      	str	r1, [r7, #8]
 8027092:	607a      	str	r2, [r7, #4]
 8027094:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 8027096:	78fc      	ldrb	r4, [r7, #3]
 8027098:	f897 3020 	ldrb.w	r3, [r7, #32]
 802709c:	9300      	str	r3, [sp, #0]
 802709e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80270a2:	9301      	str	r3, [sp, #4]
 80270a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80270a6:	9302      	str	r3, [sp, #8]
 80270a8:	2300      	movs	r3, #0
 80270aa:	9303      	str	r3, [sp, #12]
 80270ac:	2300      	movs	r3, #0
 80270ae:	9304      	str	r3, [sp, #16]
 80270b0:	68f8      	ldr	r0, [r7, #12]
 80270b2:	68b9      	ldr	r1, [r7, #8]
 80270b4:	687a      	ldr	r2, [r7, #4]
 80270b6:	4623      	mov	r3, r4
 80270b8:	f000 f806 	bl	80270c8 <ip_output_if_opt>
 80270bc:	4603      	mov	r3, r0
}
 80270be:	4618      	mov	r0, r3
 80270c0:	3714      	adds	r7, #20
 80270c2:	46bd      	mov	sp, r7
 80270c4:	bd90      	pop	{r4, r7, pc}
 80270c6:	bf00      	nop

080270c8 <ip_output_if_opt>:
 * @ param optlen length of ip_options
 */
err_t ip_output_if_opt(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
 80270c8:	b580      	push	{r7, lr}
 80270ca:	b088      	sub	sp, #32
 80270cc:	af00      	add	r7, sp, #0
 80270ce:	60f8      	str	r0, [r7, #12]
 80270d0:	60b9      	str	r1, [r7, #8]
 80270d2:	607a      	str	r2, [r7, #4]
 80270d4:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  snmp_inc_ipoutrequests();

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
 80270d6:	687b      	ldr	r3, [r7, #4]
 80270d8:	2b00      	cmp	r3, #0
 80270da:	f000 808b 	beq.w	80271f4 <ip_output_if_opt+0x12c>
    u16_t ip_hlen = IP_HLEN;
 80270de:	2314      	movs	r3, #20
 80270e0:	83fb      	strh	r3, [r7, #30]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
 80270e2:	2300      	movs	r3, #0
 80270e4:	83bb      	strh	r3, [r7, #28]
    if (optlen != 0) {
 80270e6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80270e8:	2b00      	cmp	r3, #0
 80270ea:	d02c      	beq.n	8027146 <ip_output_if_opt+0x7e>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      /* round up to a multiple of 4 */
      optlen_aligned = ((optlen + 3) & ~3);
 80270ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80270ee:	3303      	adds	r3, #3
 80270f0:	b29b      	uxth	r3, r3
 80270f2:	f023 0303 	bic.w	r3, r3, #3
 80270f6:	83bb      	strh	r3, [r7, #28]
      ip_hlen += optlen_aligned;
 80270f8:	8bfa      	ldrh	r2, [r7, #30]
 80270fa:	8bbb      	ldrh	r3, [r7, #28]
 80270fc:	4413      	add	r3, r2
 80270fe:	83fb      	strh	r3, [r7, #30]
      /* First write in the IP options */
      if (pbuf_header(p, optlen_aligned)) {
 8027100:	8bbb      	ldrh	r3, [r7, #28]
 8027102:	b21b      	sxth	r3, r3
 8027104:	68f8      	ldr	r0, [r7, #12]
 8027106:	4619      	mov	r1, r3
 8027108:	f000 ffda 	bl	80280c0 <pbuf_header>
 802710c:	4603      	mov	r3, r0
 802710e:	2b00      	cmp	r3, #0
 8027110:	d001      	beq.n	8027116 <ip_output_if_opt+0x4e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
        snmp_inc_ipoutdiscards();
        return ERR_BUF;
 8027112:	23fe      	movs	r3, #254	; 0xfe
 8027114:	e07e      	b.n	8027214 <ip_output_if_opt+0x14c>
      }
      MEMCPY(p->payload, ip_options, optlen);
 8027116:	68fb      	ldr	r3, [r7, #12]
 8027118:	685a      	ldr	r2, [r3, #4]
 802711a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 802711c:	4610      	mov	r0, r2
 802711e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8027120:	461a      	mov	r2, r3
 8027122:	f7fe fb3f 	bl	80257a4 <thumb2_memcpy>
      if (optlen < optlen_aligned) {
 8027126:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8027128:	8bbb      	ldrh	r3, [r7, #28]
 802712a:	429a      	cmp	r2, r3
 802712c:	d20b      	bcs.n	8027146 <ip_output_if_opt+0x7e>
        /* zero the remaining bytes */
        memset(((char*)p->payload) + optlen, 0, optlen_aligned - optlen);
 802712e:	68fb      	ldr	r3, [r7, #12]
 8027130:	685a      	ldr	r2, [r3, #4]
 8027132:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8027134:	18d1      	adds	r1, r2, r3
 8027136:	8bba      	ldrh	r2, [r7, #28]
 8027138:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 802713a:	1ad3      	subs	r3, r2, r3
 802713c:	4608      	mov	r0, r1
 802713e:	2100      	movs	r1, #0
 8027140:	461a      	mov	r2, r3
 8027142:	f002 fe4e 	bl	8029de2 <memset>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8027146:	68f8      	ldr	r0, [r7, #12]
 8027148:	2114      	movs	r1, #20
 802714a:	f000 ffb9 	bl	80280c0 <pbuf_header>
 802714e:	4603      	mov	r3, r0
 8027150:	2b00      	cmp	r3, #0
 8027152:	d001      	beq.n	8027158 <ip_output_if_opt+0x90>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
 8027154:	23fe      	movs	r3, #254	; 0xfe
 8027156:	e05d      	b.n	8027214 <ip_output_if_opt+0x14c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8027158:	68fb      	ldr	r3, [r7, #12]
 802715a:	685b      	ldr	r3, [r3, #4]
 802715c:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 802715e:	69bb      	ldr	r3, [r7, #24]
 8027160:	78fa      	ldrb	r2, [r7, #3]
 8027162:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8027164:	69bb      	ldr	r3, [r7, #24]
 8027166:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 802716a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip_addr_copy(iphdr->dest, *dest);
 802716c:	687b      	ldr	r3, [r7, #4]
 802716e:	681a      	ldr	r2, [r3, #0]
 8027170:	69bb      	ldr	r3, [r7, #24]
 8027172:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8027174:	8bfb      	ldrh	r3, [r7, #30]
 8027176:	089b      	lsrs	r3, r3, #2
 8027178:	b29b      	uxth	r3, r3
 802717a:	b2db      	uxtb	r3, r3
 802717c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027180:	b2da      	uxtb	r2, r3
 8027182:	69bb      	ldr	r3, [r7, #24]
 8027184:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8027186:	69bb      	ldr	r3, [r7, #24]
 8027188:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 802718c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
 802718e:	68fb      	ldr	r3, [r7, #12]
 8027190:	891b      	ldrh	r3, [r3, #8]
 8027192:	4618      	mov	r0, r3
 8027194:	f000 f9c4 	bl	8027520 <lwip_htons>
 8027198:	4603      	mov	r3, r0
 802719a:	461a      	mov	r2, r3
 802719c:	69bb      	ldr	r3, [r7, #24]
 802719e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80271a0:	69bb      	ldr	r3, [r7, #24]
 80271a2:	2200      	movs	r2, #0
 80271a4:	719a      	strb	r2, [r3, #6]
 80271a6:	2200      	movs	r2, #0
 80271a8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, htons(ip_id));
 80271aa:	4b1d      	ldr	r3, [pc, #116]	; (8027220 <ip_output_if_opt+0x158>)
 80271ac:	881b      	ldrh	r3, [r3, #0]
 80271ae:	4618      	mov	r0, r3
 80271b0:	f000 f9b6 	bl	8027520 <lwip_htons>
 80271b4:	4603      	mov	r3, r0
 80271b6:	461a      	mov	r2, r3
 80271b8:	69bb      	ldr	r3, [r7, #24]
 80271ba:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80271bc:	4b18      	ldr	r3, [pc, #96]	; (8027220 <ip_output_if_opt+0x158>)
 80271be:	881b      	ldrh	r3, [r3, #0]
 80271c0:	3301      	adds	r3, #1
 80271c2:	b29a      	uxth	r2, r3
 80271c4:	4b16      	ldr	r3, [pc, #88]	; (8027220 <ip_output_if_opt+0x158>)
 80271c6:	801a      	strh	r2, [r3, #0]

    if (ip_addr_isany(src)) {
 80271c8:	68bb      	ldr	r3, [r7, #8]
 80271ca:	2b00      	cmp	r3, #0
 80271cc:	d003      	beq.n	80271d6 <ip_output_if_opt+0x10e>
 80271ce:	68bb      	ldr	r3, [r7, #8]
 80271d0:	681b      	ldr	r3, [r3, #0]
 80271d2:	2b00      	cmp	r3, #0
 80271d4:	d104      	bne.n	80271e0 <ip_output_if_opt+0x118>
      ip_addr_copy(iphdr->src, netif->ip_addr);
 80271d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80271d8:	685a      	ldr	r2, [r3, #4]
 80271da:	69bb      	ldr	r3, [r7, #24]
 80271dc:	60da      	str	r2, [r3, #12]
 80271de:	e003      	b.n	80271e8 <ip_output_if_opt+0x120>
    } else {
      /* src cannot be NULL here */
      ip_addr_copy(iphdr->src, *src);
 80271e0:	68bb      	ldr	r3, [r7, #8]
 80271e2:	681a      	ldr	r2, [r3, #0]
 80271e4:	69bb      	ldr	r3, [r7, #24]
 80271e6:	60da      	str	r2, [r3, #12]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
    chk_sum = (chk_sum >> 16) + chk_sum;
    chk_sum = ~chk_sum;
    iphdr->_chksum = chk_sum; /* network order */
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80271e8:	69bb      	ldr	r3, [r7, #24]
 80271ea:	2200      	movs	r2, #0
 80271ec:	729a      	strb	r2, [r3, #10]
 80271ee:	2200      	movs	r2, #0
 80271f0:	72da      	strb	r2, [r3, #11]
 80271f2:	e008      	b.n	8027206 <ip_output_if_opt+0x13e>
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, ip_hlen));
#endif
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 80271f4:	68fb      	ldr	r3, [r7, #12]
 80271f6:	685b      	ldr	r3, [r3, #4]
 80271f8:	61bb      	str	r3, [r7, #24]
    ip_addr_copy(dest_addr, iphdr->dest);
 80271fa:	69bb      	ldr	r3, [r7, #24]
 80271fc:	691b      	ldr	r3, [r3, #16]
 80271fe:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8027200:	f107 0314 	add.w	r3, r7, #20
 8027204:	607b      	str	r3, [r7, #4]
    return ip_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
  return netif->output(netif, p, dest);
 8027206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027208:	695b      	ldr	r3, [r3, #20]
 802720a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802720c:	68f9      	ldr	r1, [r7, #12]
 802720e:	687a      	ldr	r2, [r7, #4]
 8027210:	4798      	blx	r3
 8027212:	4603      	mov	r3, r0
 8027214:	b25b      	sxtb	r3, r3
}
 8027216:	4618      	mov	r0, r3
 8027218:	3720      	adds	r7, #32
 802721a:	46bd      	mov	sp, r7
 802721c:	bd80      	pop	{r7, pc}
 802721e:	bf00      	nop
 8027220:	1ffe9c74 	.word	0x1ffe9c74

08027224 <ip_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
 8027224:	b590      	push	{r4, r7, lr}
 8027226:	b08b      	sub	sp, #44	; 0x2c
 8027228:	af04      	add	r7, sp, #16
 802722a:	60f8      	str	r0, [r7, #12]
 802722c:	60b9      	str	r1, [r7, #8]
 802722e:	607a      	str	r2, [r7, #4]
 8027230:	70fb      	strb	r3, [r7, #3]

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  if ((netif = ip_route(dest)) == NULL) {
 8027232:	6878      	ldr	r0, [r7, #4]
 8027234:	f7ff fdc8 	bl	8026dc8 <ip_route>
 8027238:	6178      	str	r0, [r7, #20]
 802723a:	697b      	ldr	r3, [r7, #20]
 802723c:	2b00      	cmp	r3, #0
 802723e:	d101      	bne.n	8027244 <ip_output+0x20>
    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    return ERR_RTE;
 8027240:	23fc      	movs	r3, #252	; 0xfc
 8027242:	e00f      	b.n	8027264 <ip_output+0x40>
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
 8027244:	78fc      	ldrb	r4, [r7, #3]
 8027246:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802724a:	9300      	str	r3, [sp, #0]
 802724c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8027250:	9301      	str	r3, [sp, #4]
 8027252:	697b      	ldr	r3, [r7, #20]
 8027254:	9302      	str	r3, [sp, #8]
 8027256:	68f8      	ldr	r0, [r7, #12]
 8027258:	68b9      	ldr	r1, [r7, #8]
 802725a:	687a      	ldr	r2, [r7, #4]
 802725c:	4623      	mov	r3, r4
 802725e:	f7ff ff13 	bl	8027088 <ip_output_if>
 8027262:	4603      	mov	r3, r0
 8027264:	b25b      	sxtb	r3, r3
}
 8027266:	4618      	mov	r0, r3
 8027268:	371c      	adds	r7, #28
 802726a:	46bd      	mov	sp, r7
 802726c:	bd90      	pop	{r4, r7, pc}
 802726e:	bf00      	nop

08027270 <ip4_addr_isbroadcast>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast(u32_t addr, const struct netif *netif)
{
 8027270:	b480      	push	{r7}
 8027272:	b085      	sub	sp, #20
 8027274:	af00      	add	r7, sp, #0
 8027276:	6078      	str	r0, [r7, #4]
 8027278:	6039      	str	r1, [r7, #0]
  ip_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 802727a:	687b      	ldr	r3, [r7, #4]
 802727c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 802727e:	687b      	ldr	r3, [r7, #4]
 8027280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027284:	d002      	beq.n	802728c <ip4_addr_isbroadcast+0x1c>
 8027286:	687b      	ldr	r3, [r7, #4]
 8027288:	2b00      	cmp	r3, #0
 802728a:	d101      	bne.n	8027290 <ip4_addr_isbroadcast+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 802728c:	2301      	movs	r3, #1
 802728e:	e025      	b.n	80272dc <ip4_addr_isbroadcast+0x6c>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8027290:	683b      	ldr	r3, [r7, #0]
 8027292:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8027296:	f003 0302 	and.w	r3, r3, #2
 802729a:	2b00      	cmp	r3, #0
 802729c:	d101      	bne.n	80272a2 <ip4_addr_isbroadcast+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 802729e:	2300      	movs	r3, #0
 80272a0:	e01c      	b.n	80272dc <ip4_addr_isbroadcast+0x6c>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
 80272a2:	683b      	ldr	r3, [r7, #0]
 80272a4:	685a      	ldr	r2, [r3, #4]
 80272a6:	687b      	ldr	r3, [r7, #4]
 80272a8:	429a      	cmp	r2, r3
 80272aa:	d101      	bne.n	80272b0 <ip4_addr_isbroadcast+0x40>
    return 0;
 80272ac:	2300      	movs	r3, #0
 80272ae:	e015      	b.n	80272dc <ip4_addr_isbroadcast+0x6c>
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
 80272b0:	68fa      	ldr	r2, [r7, #12]
 80272b2:	683b      	ldr	r3, [r7, #0]
 80272b4:	685b      	ldr	r3, [r3, #4]
 80272b6:	405a      	eors	r2, r3
 80272b8:	683b      	ldr	r3, [r7, #0]
 80272ba:	689b      	ldr	r3, [r3, #8]
 80272bc:	4013      	ands	r3, r2
 80272be:	2b00      	cmp	r3, #0
 80272c0:	d10b      	bne.n	80272da <ip4_addr_isbroadcast+0x6a>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
 80272c2:	683b      	ldr	r3, [r7, #0]
 80272c4:	689b      	ldr	r3, [r3, #8]
 80272c6:	43da      	mvns	r2, r3
 80272c8:	687b      	ldr	r3, [r7, #4]
 80272ca:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
 80272cc:	683b      	ldr	r3, [r7, #0]
 80272ce:	689b      	ldr	r3, [r3, #8]
 80272d0:	43db      	mvns	r3, r3
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
    return 0;
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
 80272d2:	429a      	cmp	r2, r3
 80272d4:	d101      	bne.n	80272da <ip4_addr_isbroadcast+0x6a>
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
    /* => network broadcast address */
    return 1;
 80272d6:	2301      	movs	r3, #1
 80272d8:	e000      	b.n	80272dc <ip4_addr_isbroadcast+0x6c>
  } else {
    return 0;
 80272da:	2300      	movs	r3, #0
  }
}
 80272dc:	4618      	mov	r0, r3
 80272de:	3714      	adds	r7, #20
 80272e0:	46bd      	mov	sp, r7
 80272e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80272e6:	4770      	bx	lr

080272e8 <ipaddr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ipaddr_aton(const char *cp, ip_addr_t *addr)
{
 80272e8:	b580      	push	{r7, lr}
 80272ea:	b08a      	sub	sp, #40	; 0x28
 80272ec:	af00      	add	r7, sp, #0
 80272ee:	6078      	str	r0, [r7, #4]
 80272f0:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 80272f2:	f107 030c 	add.w	r3, r7, #12
 80272f6:	61fb      	str	r3, [r7, #28]

  c = *cp;
 80272f8:	687b      	ldr	r3, [r7, #4]
 80272fa:	781b      	ldrb	r3, [r3, #0]
 80272fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c))
 8027300:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8027304:	2b2f      	cmp	r3, #47	; 0x2f
 8027306:	d903      	bls.n	8027310 <ipaddr_aton+0x28>
 8027308:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 802730c:	2b39      	cmp	r3, #57	; 0x39
 802730e:	d901      	bls.n	8027314 <ipaddr_aton+0x2c>
      return (0);
 8027310:	2300      	movs	r3, #0
 8027312:	e100      	b.n	8027516 <ipaddr_aton+0x22e>
    val = 0;
 8027314:	2300      	movs	r3, #0
 8027316:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8027318:	230a      	movs	r3, #10
 802731a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 802731e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8027322:	2b30      	cmp	r3, #48	; 0x30
 8027324:	d11c      	bne.n	8027360 <ipaddr_aton+0x78>
      c = *++cp;
 8027326:	687b      	ldr	r3, [r7, #4]
 8027328:	3301      	adds	r3, #1
 802732a:	607b      	str	r3, [r7, #4]
 802732c:	687b      	ldr	r3, [r7, #4]
 802732e:	781b      	ldrb	r3, [r3, #0]
 8027330:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8027334:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8027338:	2b78      	cmp	r3, #120	; 0x78
 802733a:	d003      	beq.n	8027344 <ipaddr_aton+0x5c>
 802733c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8027340:	2b58      	cmp	r3, #88	; 0x58
 8027342:	d10a      	bne.n	802735a <ipaddr_aton+0x72>
        base = 16;
 8027344:	2310      	movs	r3, #16
 8027346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 802734a:	687b      	ldr	r3, [r7, #4]
 802734c:	3301      	adds	r3, #1
 802734e:	607b      	str	r3, [r7, #4]
 8027350:	687b      	ldr	r3, [r7, #4]
 8027352:	781b      	ldrb	r3, [r3, #0]
 8027354:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8027358:	e002      	b.n	8027360 <ipaddr_aton+0x78>
      } else
        base = 8;
 802735a:	2308      	movs	r3, #8
 802735c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    for (;;) {
      if (isdigit(c)) {
 8027360:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8027364:	2b2f      	cmp	r3, #47	; 0x2f
 8027366:	d915      	bls.n	8027394 <ipaddr_aton+0xac>
 8027368:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 802736c:	2b39      	cmp	r3, #57	; 0x39
 802736e:	d811      	bhi.n	8027394 <ipaddr_aton+0xac>
        val = (val * base) + (int)(c - '0');
 8027370:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8027374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027376:	fb02 f203 	mul.w	r2, r2, r3
 802737a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 802737e:	4413      	add	r3, r2
 8027380:	3b30      	subs	r3, #48	; 0x30
 8027382:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8027384:	687b      	ldr	r3, [r7, #4]
 8027386:	3301      	adds	r3, #1
 8027388:	607b      	str	r3, [r7, #4]
 802738a:	687b      	ldr	r3, [r7, #4]
 802738c:	781b      	ldrb	r3, [r3, #0]
 802738e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8027392:	e036      	b.n	8027402 <ipaddr_aton+0x11a>
      } else if (base == 16 && isxdigit(c)) {
 8027394:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8027398:	2b10      	cmp	r3, #16
 802739a:	d133      	bne.n	8027404 <ipaddr_aton+0x11c>
 802739c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80273a0:	2b2f      	cmp	r3, #47	; 0x2f
 80273a2:	d903      	bls.n	80273ac <ipaddr_aton+0xc4>
 80273a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80273a8:	2b39      	cmp	r3, #57	; 0x39
 80273aa:	d90f      	bls.n	80273cc <ipaddr_aton+0xe4>
 80273ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80273b0:	2b60      	cmp	r3, #96	; 0x60
 80273b2:	d903      	bls.n	80273bc <ipaddr_aton+0xd4>
 80273b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80273b8:	2b66      	cmp	r3, #102	; 0x66
 80273ba:	d907      	bls.n	80273cc <ipaddr_aton+0xe4>
 80273bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80273c0:	2b40      	cmp	r3, #64	; 0x40
 80273c2:	d91f      	bls.n	8027404 <ipaddr_aton+0x11c>
 80273c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80273c8:	2b46      	cmp	r3, #70	; 0x46
 80273ca:	d81b      	bhi.n	8027404 <ipaddr_aton+0x11c>
        val = (val << 4) | (int)(c + 10 - (islower(c) ? 'a' : 'A'));
 80273cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80273ce:	011b      	lsls	r3, r3, #4
 80273d0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80273d4:	f102 010a 	add.w	r1, r2, #10
 80273d8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80273dc:	2a60      	cmp	r2, #96	; 0x60
 80273de:	d905      	bls.n	80273ec <ipaddr_aton+0x104>
 80273e0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80273e4:	2a7a      	cmp	r2, #122	; 0x7a
 80273e6:	d801      	bhi.n	80273ec <ipaddr_aton+0x104>
 80273e8:	2261      	movs	r2, #97	; 0x61
 80273ea:	e000      	b.n	80273ee <ipaddr_aton+0x106>
 80273ec:	2241      	movs	r2, #65	; 0x41
 80273ee:	1a8a      	subs	r2, r1, r2
 80273f0:	4313      	orrs	r3, r2
 80273f2:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 80273f4:	687b      	ldr	r3, [r7, #4]
 80273f6:	3301      	adds	r3, #1
 80273f8:	607b      	str	r3, [r7, #4]
 80273fa:	687b      	ldr	r3, [r7, #4]
 80273fc:	781b      	ldrb	r3, [r3, #0]
 80273fe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      } else
        break;
    }
 8027402:	e7ad      	b.n	8027360 <ipaddr_aton+0x78>
    if (c == '.') {
 8027404:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8027408:	2b2e      	cmp	r3, #46	; 0x2e
 802740a:	d114      	bne.n	8027436 <ipaddr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 802740c:	f107 030c 	add.w	r3, r7, #12
 8027410:	330c      	adds	r3, #12
 8027412:	69fa      	ldr	r2, [r7, #28]
 8027414:	429a      	cmp	r2, r3
 8027416:	d301      	bcc.n	802741c <ipaddr_aton+0x134>
        return (0);
 8027418:	2300      	movs	r3, #0
 802741a:	e07c      	b.n	8027516 <ipaddr_aton+0x22e>
      }
      *pp++ = val;
 802741c:	69fb      	ldr	r3, [r7, #28]
 802741e:	1d1a      	adds	r2, r3, #4
 8027420:	61fa      	str	r2, [r7, #28]
 8027422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027424:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8027426:	687b      	ldr	r3, [r7, #4]
 8027428:	3301      	adds	r3, #1
 802742a:	607b      	str	r3, [r7, #4]
 802742c:	687b      	ldr	r3, [r7, #4]
 802742e:	781b      	ldrb	r3, [r3, #0]
 8027430:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8027434:	e005      	b.n	8027442 <ipaddr_aton+0x15a>
    } else
      break;
 8027436:	bf00      	nop
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 8027438:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 802743c:	2b00      	cmp	r3, #0
 802743e:	d01b      	beq.n	8027478 <ipaddr_aton+0x190>
 8027440:	e000      	b.n	8027444 <ipaddr_aton+0x15c>
      }
      *pp++ = val;
      c = *++cp;
    } else
      break;
  }
 8027442:	e75d      	b.n	8027300 <ipaddr_aton+0x18>
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 8027444:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8027448:	2b20      	cmp	r3, #32
 802744a:	d015      	beq.n	8027478 <ipaddr_aton+0x190>
 802744c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8027450:	2b0c      	cmp	r3, #12
 8027452:	d011      	beq.n	8027478 <ipaddr_aton+0x190>
 8027454:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8027458:	2b0a      	cmp	r3, #10
 802745a:	d00d      	beq.n	8027478 <ipaddr_aton+0x190>
 802745c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8027460:	2b0d      	cmp	r3, #13
 8027462:	d009      	beq.n	8027478 <ipaddr_aton+0x190>
 8027464:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8027468:	2b09      	cmp	r3, #9
 802746a:	d005      	beq.n	8027478 <ipaddr_aton+0x190>
 802746c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8027470:	2b0b      	cmp	r3, #11
 8027472:	d001      	beq.n	8027478 <ipaddr_aton+0x190>
    return (0);
 8027474:	2300      	movs	r3, #0
 8027476:	e04e      	b.n	8027516 <ipaddr_aton+0x22e>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8027478:	69fa      	ldr	r2, [r7, #28]
 802747a:	f107 030c 	add.w	r3, r7, #12
 802747e:	1ad3      	subs	r3, r2, r3
 8027480:	109b      	asrs	r3, r3, #2
 8027482:	3301      	adds	r3, #1
 8027484:	2b04      	cmp	r3, #4
 8027486:	d83b      	bhi.n	8027500 <ipaddr_aton+0x218>
 8027488:	a201      	add	r2, pc, #4	; (adr r2, 8027490 <ipaddr_aton+0x1a8>)
 802748a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802748e:	bf00      	nop
 8027490:	080274a5 	.word	0x080274a5
 8027494:	08027501 	.word	0x08027501
 8027498:	080274a9 	.word	0x080274a9
 802749c:	080274c1 	.word	0x080274c1
 80274a0:	080274df 	.word	0x080274df

  case 0:
    return (0);       /* initial nondigit */
 80274a4:	2300      	movs	r3, #0
 80274a6:	e036      	b.n	8027516 <ipaddr_aton+0x22e>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 80274a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80274aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80274ae:	d301      	bcc.n	80274b4 <ipaddr_aton+0x1cc>
      return (0);
 80274b0:	2300      	movs	r3, #0
 80274b2:	e030      	b.n	8027516 <ipaddr_aton+0x22e>
    }
    val |= parts[0] << 24;
 80274b4:	68fb      	ldr	r3, [r7, #12]
 80274b6:	061b      	lsls	r3, r3, #24
 80274b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80274ba:	4313      	orrs	r3, r2
 80274bc:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80274be:	e020      	b.n	8027502 <ipaddr_aton+0x21a>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 80274c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80274c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80274c6:	d301      	bcc.n	80274cc <ipaddr_aton+0x1e4>
      return (0);
 80274c8:	2300      	movs	r3, #0
 80274ca:	e024      	b.n	8027516 <ipaddr_aton+0x22e>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 80274cc:	68fb      	ldr	r3, [r7, #12]
 80274ce:	061a      	lsls	r2, r3, #24
 80274d0:	693b      	ldr	r3, [r7, #16]
 80274d2:	041b      	lsls	r3, r3, #16
 80274d4:	4313      	orrs	r3, r2
 80274d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80274d8:	4313      	orrs	r3, r2
 80274da:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80274dc:	e011      	b.n	8027502 <ipaddr_aton+0x21a>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 80274de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80274e0:	2bff      	cmp	r3, #255	; 0xff
 80274e2:	d901      	bls.n	80274e8 <ipaddr_aton+0x200>
      return (0);
 80274e4:	2300      	movs	r3, #0
 80274e6:	e016      	b.n	8027516 <ipaddr_aton+0x22e>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 80274e8:	68fb      	ldr	r3, [r7, #12]
 80274ea:	061a      	lsls	r2, r3, #24
 80274ec:	693b      	ldr	r3, [r7, #16]
 80274ee:	041b      	lsls	r3, r3, #16
 80274f0:	431a      	orrs	r2, r3
 80274f2:	697b      	ldr	r3, [r7, #20]
 80274f4:	021b      	lsls	r3, r3, #8
 80274f6:	4313      	orrs	r3, r2
 80274f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80274fa:	4313      	orrs	r3, r2
 80274fc:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80274fe:	e000      	b.n	8027502 <ipaddr_aton+0x21a>
  default:
    LWIP_ASSERT("unhandled", 0);
    break;
 8027500:	bf00      	nop
  }
  if (addr) {
 8027502:	683b      	ldr	r3, [r7, #0]
 8027504:	2b00      	cmp	r3, #0
 8027506:	d005      	beq.n	8027514 <ipaddr_aton+0x22c>
    ip4_addr_set_u32(addr, htonl(val));
 8027508:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802750a:	f000 f82d 	bl	8027568 <lwip_htonl>
 802750e:	4602      	mov	r2, r0
 8027510:	683b      	ldr	r3, [r7, #0]
 8027512:	601a      	str	r2, [r3, #0]
  }
  return (1);
 8027514:	2301      	movs	r3, #1
}
 8027516:	4618      	mov	r0, r3
 8027518:	3728      	adds	r7, #40	; 0x28
 802751a:	46bd      	mov	sp, r7
 802751c:	bd80      	pop	{r7, pc}
 802751e:	bf00      	nop

08027520 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8027520:	b480      	push	{r7}
 8027522:	b083      	sub	sp, #12
 8027524:	af00      	add	r7, sp, #0
 8027526:	4603      	mov	r3, r0
 8027528:	80fb      	strh	r3, [r7, #6]
  return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
 802752a:	88fb      	ldrh	r3, [r7, #6]
 802752c:	021b      	lsls	r3, r3, #8
 802752e:	b29a      	uxth	r2, r3
 8027530:	88fb      	ldrh	r3, [r7, #6]
 8027532:	0a1b      	lsrs	r3, r3, #8
 8027534:	b29b      	uxth	r3, r3
 8027536:	b29b      	uxth	r3, r3
 8027538:	4313      	orrs	r3, r2
 802753a:	b29b      	uxth	r3, r3
 802753c:	b29b      	uxth	r3, r3
}
 802753e:	4618      	mov	r0, r3
 8027540:	370c      	adds	r7, #12
 8027542:	46bd      	mov	sp, r7
 8027544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027548:	4770      	bx	lr
 802754a:	bf00      	nop

0802754c <lwip_ntohs>:
 * @param n u16_t in network byte order
 * @return n in host byte order
 */
u16_t
lwip_ntohs(u16_t n)
{
 802754c:	b580      	push	{r7, lr}
 802754e:	b082      	sub	sp, #8
 8027550:	af00      	add	r7, sp, #0
 8027552:	4603      	mov	r3, r0
 8027554:	80fb      	strh	r3, [r7, #6]
  return lwip_htons(n);
 8027556:	88fb      	ldrh	r3, [r7, #6]
 8027558:	4618      	mov	r0, r3
 802755a:	f7ff ffe1 	bl	8027520 <lwip_htons>
 802755e:	4603      	mov	r3, r0
}
 8027560:	4618      	mov	r0, r3
 8027562:	3708      	adds	r7, #8
 8027564:	46bd      	mov	sp, r7
 8027566:	bd80      	pop	{r7, pc}

08027568 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8027568:	b480      	push	{r7}
 802756a:	b083      	sub	sp, #12
 802756c:	af00      	add	r7, sp, #0
 802756e:	6078      	str	r0, [r7, #4]
  return ((n & 0xff) << 24) |
 8027570:	687b      	ldr	r3, [r7, #4]
 8027572:	061a      	lsls	r2, r3, #24
    ((n & 0xff00) << 8) |
 8027574:	687b      	ldr	r3, [r7, #4]
 8027576:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802757a:	021b      	lsls	r3, r3, #8
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return ((n & 0xff) << 24) |
 802757c:	431a      	orrs	r2, r3
    ((n & 0xff00) << 8) |
    ((n & 0xff0000UL) >> 8) |
 802757e:	687b      	ldr	r3, [r7, #4]
 8027580:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8027584:	0a1b      	lsrs	r3, r3, #8
 */
u32_t
lwip_htonl(u32_t n)
{
  return ((n & 0xff) << 24) |
    ((n & 0xff00) << 8) |
 8027586:	431a      	orrs	r2, r3
    ((n & 0xff0000UL) >> 8) |
    ((n & 0xff000000UL) >> 24);
 8027588:	687b      	ldr	r3, [r7, #4]
 802758a:	0e1b      	lsrs	r3, r3, #24
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return ((n & 0xff) << 24) |
 802758c:	4313      	orrs	r3, r2
    ((n & 0xff00) << 8) |
    ((n & 0xff0000UL) >> 8) |
    ((n & 0xff000000UL) >> 24);
}
 802758e:	4618      	mov	r0, r3
 8027590:	370c      	adds	r7, #12
 8027592:	46bd      	mov	sp, r7
 8027594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027598:	4770      	bx	lr
 802759a:	bf00      	nop

0802759c <lwip_init>:
/**
 * Perform Sanity check of user-configurable values, and initialize all modules.
 */
void
lwip_init(void)
{
 802759c:	b580      	push	{r7, lr}
 802759e:	af00      	add	r7, sp, #0
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80275a0:	f000 f86a 	bl	8027678 <mem_init>
  memp_init();
 80275a4:	f000 fa30 	bl	8027a08 <memp_init>
  pbuf_init();
  netif_init();
 80275a8:	f000 faba 	bl	8027b20 <netif_init>
#endif /* LWIP_ARP */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80275ac:	f001 f86c 	bl	8028688 <udp_init>
#endif /* LWIP_SNMP */
#if LWIP_AUTOIP
  autoip_init();
#endif /* LWIP_AUTOIP */
#if LWIP_IGMP
  igmp_init();
 80275b0:	f7ff f8e0 	bl	8026774 <igmp_init>
#if LWIP_DNS
  dns_init();
#endif /* LWIP_DNS */

#if LWIP_TIMERS
  sys_timeouts_init();
 80275b4:	f000 ff9a 	bl	80284ec <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80275b8:	bd80      	pop	{r7, pc}
 80275ba:	bf00      	nop

080275bc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80275bc:	b480      	push	{r7}
 80275be:	b085      	sub	sp, #20
 80275c0:	af00      	add	r7, sp, #0
 80275c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

  nmem = (struct mem *)(void *)&ram[mem->next];
 80275c4:	4b29      	ldr	r3, [pc, #164]	; (802766c <plug_holes+0xb0>)
 80275c6:	681b      	ldr	r3, [r3, #0]
 80275c8:	687a      	ldr	r2, [r7, #4]
 80275ca:	8812      	ldrh	r2, [r2, #0]
 80275cc:	4413      	add	r3, r2
 80275ce:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80275d0:	687a      	ldr	r2, [r7, #4]
 80275d2:	68fb      	ldr	r3, [r7, #12]
 80275d4:	429a      	cmp	r2, r3
 80275d6:	d01f      	beq.n	8027618 <plug_holes+0x5c>
 80275d8:	68fb      	ldr	r3, [r7, #12]
 80275da:	791b      	ldrb	r3, [r3, #4]
 80275dc:	2b00      	cmp	r3, #0
 80275de:	d11b      	bne.n	8027618 <plug_holes+0x5c>
 80275e0:	4b23      	ldr	r3, [pc, #140]	; (8027670 <plug_holes+0xb4>)
 80275e2:	681b      	ldr	r3, [r3, #0]
 80275e4:	68fa      	ldr	r2, [r7, #12]
 80275e6:	429a      	cmp	r2, r3
 80275e8:	d016      	beq.n	8027618 <plug_holes+0x5c>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80275ea:	4b22      	ldr	r3, [pc, #136]	; (8027674 <plug_holes+0xb8>)
 80275ec:	681a      	ldr	r2, [r3, #0]
 80275ee:	68fb      	ldr	r3, [r7, #12]
 80275f0:	429a      	cmp	r2, r3
 80275f2:	d102      	bne.n	80275fa <plug_holes+0x3e>
      lfree = mem;
 80275f4:	4a1f      	ldr	r2, [pc, #124]	; (8027674 <plug_holes+0xb8>)
 80275f6:	687b      	ldr	r3, [r7, #4]
 80275f8:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80275fa:	68fb      	ldr	r3, [r7, #12]
 80275fc:	881a      	ldrh	r2, [r3, #0]
 80275fe:	687b      	ldr	r3, [r7, #4]
 8027600:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8027602:	4b1a      	ldr	r3, [pc, #104]	; (802766c <plug_holes+0xb0>)
 8027604:	681b      	ldr	r3, [r3, #0]
 8027606:	68fa      	ldr	r2, [r7, #12]
 8027608:	8812      	ldrh	r2, [r2, #0]
 802760a:	4413      	add	r3, r2
 802760c:	687a      	ldr	r2, [r7, #4]
 802760e:	4917      	ldr	r1, [pc, #92]	; (802766c <plug_holes+0xb0>)
 8027610:	6809      	ldr	r1, [r1, #0]
 8027612:	1a52      	subs	r2, r2, r1
 8027614:	b292      	uxth	r2, r2
 8027616:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8027618:	4b14      	ldr	r3, [pc, #80]	; (802766c <plug_holes+0xb0>)
 802761a:	681b      	ldr	r3, [r3, #0]
 802761c:	687a      	ldr	r2, [r7, #4]
 802761e:	8852      	ldrh	r2, [r2, #2]
 8027620:	4413      	add	r3, r2
 8027622:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8027624:	68ba      	ldr	r2, [r7, #8]
 8027626:	687b      	ldr	r3, [r7, #4]
 8027628:	429a      	cmp	r2, r3
 802762a:	d01a      	beq.n	8027662 <plug_holes+0xa6>
 802762c:	68bb      	ldr	r3, [r7, #8]
 802762e:	791b      	ldrb	r3, [r3, #4]
 8027630:	2b00      	cmp	r3, #0
 8027632:	d116      	bne.n	8027662 <plug_holes+0xa6>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8027634:	4b0f      	ldr	r3, [pc, #60]	; (8027674 <plug_holes+0xb8>)
 8027636:	681a      	ldr	r2, [r3, #0]
 8027638:	687b      	ldr	r3, [r7, #4]
 802763a:	429a      	cmp	r2, r3
 802763c:	d102      	bne.n	8027644 <plug_holes+0x88>
      lfree = pmem;
 802763e:	4a0d      	ldr	r2, [pc, #52]	; (8027674 <plug_holes+0xb8>)
 8027640:	68bb      	ldr	r3, [r7, #8]
 8027642:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8027644:	687b      	ldr	r3, [r7, #4]
 8027646:	881a      	ldrh	r2, [r3, #0]
 8027648:	68bb      	ldr	r3, [r7, #8]
 802764a:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 802764c:	4b07      	ldr	r3, [pc, #28]	; (802766c <plug_holes+0xb0>)
 802764e:	681b      	ldr	r3, [r3, #0]
 8027650:	687a      	ldr	r2, [r7, #4]
 8027652:	8812      	ldrh	r2, [r2, #0]
 8027654:	4413      	add	r3, r2
 8027656:	68ba      	ldr	r2, [r7, #8]
 8027658:	4904      	ldr	r1, [pc, #16]	; (802766c <plug_holes+0xb0>)
 802765a:	6809      	ldr	r1, [r1, #0]
 802765c:	1a52      	subs	r2, r2, r1
 802765e:	b292      	uxth	r2, r2
 8027660:	805a      	strh	r2, [r3, #2]
  }
}
 8027662:	3714      	adds	r7, #20
 8027664:	46bd      	mov	sp, r7
 8027666:	f85d 7b04 	ldr.w	r7, [sp], #4
 802766a:	4770      	bx	lr
 802766c:	1ffe9c78 	.word	0x1ffe9c78
 8027670:	1ffe9c7c 	.word	0x1ffe9c7c
 8027674:	1ffe9c80 	.word	0x1ffe9c80

08027678 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8027678:	b480      	push	{r7}
 802767a:	b083      	sub	sp, #12
 802767c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 802767e:	4b18      	ldr	r3, [pc, #96]	; (80276e0 <mem_init+0x68>)
 8027680:	3303      	adds	r3, #3
 8027682:	f023 0303 	bic.w	r3, r3, #3
 8027686:	461a      	mov	r2, r3
 8027688:	4b16      	ldr	r3, [pc, #88]	; (80276e4 <mem_init+0x6c>)
 802768a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 802768c:	4b15      	ldr	r3, [pc, #84]	; (80276e4 <mem_init+0x6c>)
 802768e:	681b      	ldr	r3, [r3, #0]
 8027690:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8027692:	687b      	ldr	r3, [r7, #4]
 8027694:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8027698:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 802769a:	687b      	ldr	r3, [r7, #4]
 802769c:	2200      	movs	r2, #0
 802769e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80276a0:	687b      	ldr	r3, [r7, #4]
 80276a2:	2200      	movs	r2, #0
 80276a4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80276a6:	4b0f      	ldr	r3, [pc, #60]	; (80276e4 <mem_init+0x6c>)
 80276a8:	681b      	ldr	r3, [r3, #0]
 80276aa:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80276ae:	4a0e      	ldr	r2, [pc, #56]	; (80276e8 <mem_init+0x70>)
 80276b0:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80276b2:	4b0d      	ldr	r3, [pc, #52]	; (80276e8 <mem_init+0x70>)
 80276b4:	681b      	ldr	r3, [r3, #0]
 80276b6:	2201      	movs	r2, #1
 80276b8:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80276ba:	4b0b      	ldr	r3, [pc, #44]	; (80276e8 <mem_init+0x70>)
 80276bc:	681b      	ldr	r3, [r3, #0]
 80276be:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80276c2:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80276c4:	4b08      	ldr	r3, [pc, #32]	; (80276e8 <mem_init+0x70>)
 80276c6:	681b      	ldr	r3, [r3, #0]
 80276c8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80276cc:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80276ce:	4b05      	ldr	r3, [pc, #20]	; (80276e4 <mem_init+0x6c>)
 80276d0:	681b      	ldr	r3, [r3, #0]
 80276d2:	4a06      	ldr	r2, [pc, #24]	; (80276ec <mem_init+0x74>)
 80276d4:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if(sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80276d6:	370c      	adds	r7, #12
 80276d8:	46bd      	mov	sp, r7
 80276da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80276de:	4770      	bx	lr
 80276e0:	1fff0154 	.word	0x1fff0154
 80276e4:	1ffe9c78 	.word	0x1ffe9c78
 80276e8:	1ffe9c7c 	.word	0x1ffe9c7c
 80276ec:	1ffe9c80 	.word	0x1ffe9c80

080276f0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80276f0:	b580      	push	{r7, lr}
 80276f2:	b084      	sub	sp, #16
 80276f4:	af00      	add	r7, sp, #0
 80276f6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80276f8:	687b      	ldr	r3, [r7, #4]
 80276fa:	2b00      	cmp	r3, #0
 80276fc:	d100      	bne.n	8027700 <mem_free+0x10>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
 80276fe:	e01b      	b.n	8027738 <mem_free+0x48>
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8027700:	4b0f      	ldr	r3, [pc, #60]	; (8027740 <mem_free+0x50>)
 8027702:	681b      	ldr	r3, [r3, #0]
 8027704:	687a      	ldr	r2, [r7, #4]
 8027706:	429a      	cmp	r2, r3
 8027708:	d304      	bcc.n	8027714 <mem_free+0x24>
 802770a:	4b0e      	ldr	r3, [pc, #56]	; (8027744 <mem_free+0x54>)
 802770c:	681b      	ldr	r3, [r3, #0]
 802770e:	687a      	ldr	r2, [r7, #4]
 8027710:	429a      	cmp	r2, r3
 8027712:	d300      	bcc.n	8027716 <mem_free+0x26>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return;
 8027714:	e010      	b.n	8027738 <mem_free+0x48>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8027716:	687b      	ldr	r3, [r7, #4]
 8027718:	3b08      	subs	r3, #8
 802771a:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
 802771c:	68fb      	ldr	r3, [r7, #12]
 802771e:	2200      	movs	r2, #0
 8027720:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8027722:	4b09      	ldr	r3, [pc, #36]	; (8027748 <mem_free+0x58>)
 8027724:	681b      	ldr	r3, [r3, #0]
 8027726:	68fa      	ldr	r2, [r7, #12]
 8027728:	429a      	cmp	r2, r3
 802772a:	d202      	bcs.n	8027732 <mem_free+0x42>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 802772c:	4a06      	ldr	r2, [pc, #24]	; (8027748 <mem_free+0x58>)
 802772e:	68fb      	ldr	r3, [r7, #12]
 8027730:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8027732:	68f8      	ldr	r0, [r7, #12]
 8027734:	f7ff ff42 	bl	80275bc <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8027738:	3710      	adds	r7, #16
 802773a:	46bd      	mov	sp, r7
 802773c:	bd80      	pop	{r7, pc}
 802773e:	bf00      	nop
 8027740:	1ffe9c78 	.word	0x1ffe9c78
 8027744:	1ffe9c7c 	.word	0x1ffe9c7c
 8027748:	1ffe9c80 	.word	0x1ffe9c80

0802774c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 802774c:	b480      	push	{r7}
 802774e:	b087      	sub	sp, #28
 8027750:	af00      	add	r7, sp, #0
 8027752:	6078      	str	r0, [r7, #4]
 8027754:	460b      	mov	r3, r1
 8027756:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8027758:	887b      	ldrh	r3, [r7, #2]
 802775a:	3303      	adds	r3, #3
 802775c:	b29b      	uxth	r3, r3
 802775e:	f023 0303 	bic.w	r3, r3, #3
 8027762:	807b      	strh	r3, [r7, #2]

  if(newsize < MIN_SIZE_ALIGNED) {
 8027764:	887b      	ldrh	r3, [r7, #2]
 8027766:	2b0b      	cmp	r3, #11
 8027768:	d801      	bhi.n	802776e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 802776a:	230c      	movs	r3, #12
 802776c:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 802776e:	887b      	ldrh	r3, [r7, #2]
 8027770:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8027774:	d901      	bls.n	802777a <mem_trim+0x2e>
    return NULL;
 8027776:	2300      	movs	r3, #0
 8027778:	e096      	b.n	80278a8 <mem_trim+0x15c>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 802777a:	4b4e      	ldr	r3, [pc, #312]	; (80278b4 <mem_trim+0x168>)
 802777c:	681b      	ldr	r3, [r3, #0]
 802777e:	687a      	ldr	r2, [r7, #4]
 8027780:	429a      	cmp	r2, r3
 8027782:	d304      	bcc.n	802778e <mem_trim+0x42>
 8027784:	4b4c      	ldr	r3, [pc, #304]	; (80278b8 <mem_trim+0x16c>)
 8027786:	681b      	ldr	r3, [r3, #0]
 8027788:	687a      	ldr	r2, [r7, #4]
 802778a:	429a      	cmp	r2, r3
 802778c:	d301      	bcc.n	8027792 <mem_trim+0x46>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 802778e:	687b      	ldr	r3, [r7, #4]
 8027790:	e08a      	b.n	80278a8 <mem_trim+0x15c>
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8027792:	687b      	ldr	r3, [r7, #4]
 8027794:	3b08      	subs	r3, #8
 8027796:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8027798:	697b      	ldr	r3, [r7, #20]
 802779a:	4a46      	ldr	r2, [pc, #280]	; (80278b4 <mem_trim+0x168>)
 802779c:	6812      	ldr	r2, [r2, #0]
 802779e:	1a9b      	subs	r3, r3, r2
 80277a0:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80277a2:	697b      	ldr	r3, [r7, #20]
 80277a4:	881a      	ldrh	r2, [r3, #0]
 80277a6:	8a7b      	ldrh	r3, [r7, #18]
 80277a8:	1ad3      	subs	r3, r2, r3
 80277aa:	b29b      	uxth	r3, r3
 80277ac:	3b08      	subs	r3, #8
 80277ae:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
 80277b0:	887a      	ldrh	r2, [r7, #2]
 80277b2:	8a3b      	ldrh	r3, [r7, #16]
 80277b4:	429a      	cmp	r2, r3
 80277b6:	d901      	bls.n	80277bc <mem_trim+0x70>
    /* not supported */
    return NULL;
 80277b8:	2300      	movs	r3, #0
 80277ba:	e075      	b.n	80278a8 <mem_trim+0x15c>
  }
  if (newsize == size) {
 80277bc:	887a      	ldrh	r2, [r7, #2]
 80277be:	8a3b      	ldrh	r3, [r7, #16]
 80277c0:	429a      	cmp	r2, r3
 80277c2:	d101      	bne.n	80277c8 <mem_trim+0x7c>
    /* No change in size, simply return */
    return rmem;
 80277c4:	687b      	ldr	r3, [r7, #4]
 80277c6:	e06f      	b.n	80278a8 <mem_trim+0x15c>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 80277c8:	4b3a      	ldr	r3, [pc, #232]	; (80278b4 <mem_trim+0x168>)
 80277ca:	681b      	ldr	r3, [r3, #0]
 80277cc:	697a      	ldr	r2, [r7, #20]
 80277ce:	8812      	ldrh	r2, [r2, #0]
 80277d0:	4413      	add	r3, r2
 80277d2:	60fb      	str	r3, [r7, #12]
  if(mem2->used == 0) {
 80277d4:	68fb      	ldr	r3, [r7, #12]
 80277d6:	791b      	ldrb	r3, [r3, #4]
 80277d8:	2b00      	cmp	r3, #0
 80277da:	d132      	bne.n	8027842 <mem_trim+0xf6>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 80277dc:	68fb      	ldr	r3, [r7, #12]
 80277de:	881b      	ldrh	r3, [r3, #0]
 80277e0:	817b      	strh	r3, [r7, #10]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80277e2:	8a7a      	ldrh	r2, [r7, #18]
 80277e4:	887b      	ldrh	r3, [r7, #2]
 80277e6:	4413      	add	r3, r2
 80277e8:	b29b      	uxth	r3, r3
 80277ea:	3308      	adds	r3, #8
 80277ec:	813b      	strh	r3, [r7, #8]
    if (lfree == mem2) {
 80277ee:	4b33      	ldr	r3, [pc, #204]	; (80278bc <mem_trim+0x170>)
 80277f0:	681a      	ldr	r2, [r3, #0]
 80277f2:	68fb      	ldr	r3, [r7, #12]
 80277f4:	429a      	cmp	r2, r3
 80277f6:	d105      	bne.n	8027804 <mem_trim+0xb8>
      lfree = (struct mem *)(void *)&ram[ptr2];
 80277f8:	4b2e      	ldr	r3, [pc, #184]	; (80278b4 <mem_trim+0x168>)
 80277fa:	681a      	ldr	r2, [r3, #0]
 80277fc:	893b      	ldrh	r3, [r7, #8]
 80277fe:	4413      	add	r3, r2
 8027800:	4a2e      	ldr	r2, [pc, #184]	; (80278bc <mem_trim+0x170>)
 8027802:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8027804:	4b2b      	ldr	r3, [pc, #172]	; (80278b4 <mem_trim+0x168>)
 8027806:	681a      	ldr	r2, [r3, #0]
 8027808:	893b      	ldrh	r3, [r7, #8]
 802780a:	4413      	add	r3, r2
 802780c:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 802780e:	68fb      	ldr	r3, [r7, #12]
 8027810:	2200      	movs	r2, #0
 8027812:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8027814:	68fb      	ldr	r3, [r7, #12]
 8027816:	897a      	ldrh	r2, [r7, #10]
 8027818:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 802781a:	68fb      	ldr	r3, [r7, #12]
 802781c:	8a7a      	ldrh	r2, [r7, #18]
 802781e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8027820:	697b      	ldr	r3, [r7, #20]
 8027822:	893a      	ldrh	r2, [r7, #8]
 8027824:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8027826:	68fb      	ldr	r3, [r7, #12]
 8027828:	881b      	ldrh	r3, [r3, #0]
 802782a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802782e:	d007      	beq.n	8027840 <mem_trim+0xf4>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8027830:	4b20      	ldr	r3, [pc, #128]	; (80278b4 <mem_trim+0x168>)
 8027832:	681b      	ldr	r3, [r3, #0]
 8027834:	68fa      	ldr	r2, [r7, #12]
 8027836:	8812      	ldrh	r2, [r2, #0]
 8027838:	4413      	add	r3, r2
 802783a:	893a      	ldrh	r2, [r7, #8]
 802783c:	805a      	strh	r2, [r3, #2]
 802783e:	e032      	b.n	80278a6 <mem_trim+0x15a>
 8027840:	e031      	b.n	80278a6 <mem_trim+0x15a>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8027842:	887b      	ldrh	r3, [r7, #2]
 8027844:	f103 0214 	add.w	r2, r3, #20
 8027848:	8a3b      	ldrh	r3, [r7, #16]
 802784a:	429a      	cmp	r2, r3
 802784c:	d82b      	bhi.n	80278a6 <mem_trim+0x15a>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 802784e:	8a7a      	ldrh	r2, [r7, #18]
 8027850:	887b      	ldrh	r3, [r7, #2]
 8027852:	4413      	add	r3, r2
 8027854:	b29b      	uxth	r3, r3
 8027856:	3308      	adds	r3, #8
 8027858:	813b      	strh	r3, [r7, #8]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 802785a:	4b16      	ldr	r3, [pc, #88]	; (80278b4 <mem_trim+0x168>)
 802785c:	681a      	ldr	r2, [r3, #0]
 802785e:	893b      	ldrh	r3, [r7, #8]
 8027860:	4413      	add	r3, r2
 8027862:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8027864:	4b15      	ldr	r3, [pc, #84]	; (80278bc <mem_trim+0x170>)
 8027866:	681b      	ldr	r3, [r3, #0]
 8027868:	68fa      	ldr	r2, [r7, #12]
 802786a:	429a      	cmp	r2, r3
 802786c:	d202      	bcs.n	8027874 <mem_trim+0x128>
      lfree = mem2;
 802786e:	4a13      	ldr	r2, [pc, #76]	; (80278bc <mem_trim+0x170>)
 8027870:	68fb      	ldr	r3, [r7, #12]
 8027872:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8027874:	68fb      	ldr	r3, [r7, #12]
 8027876:	2200      	movs	r2, #0
 8027878:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 802787a:	697b      	ldr	r3, [r7, #20]
 802787c:	881a      	ldrh	r2, [r3, #0]
 802787e:	68fb      	ldr	r3, [r7, #12]
 8027880:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8027882:	68fb      	ldr	r3, [r7, #12]
 8027884:	8a7a      	ldrh	r2, [r7, #18]
 8027886:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8027888:	697b      	ldr	r3, [r7, #20]
 802788a:	893a      	ldrh	r2, [r7, #8]
 802788c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 802788e:	68fb      	ldr	r3, [r7, #12]
 8027890:	881b      	ldrh	r3, [r3, #0]
 8027892:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8027896:	d006      	beq.n	80278a6 <mem_trim+0x15a>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8027898:	4b06      	ldr	r3, [pc, #24]	; (80278b4 <mem_trim+0x168>)
 802789a:	681b      	ldr	r3, [r3, #0]
 802789c:	68fa      	ldr	r2, [r7, #12]
 802789e:	8812      	ldrh	r2, [r2, #0]
 80278a0:	4413      	add	r3, r2
 80278a2:	893a      	ldrh	r2, [r7, #8]
 80278a4:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80278a6:	687b      	ldr	r3, [r7, #4]
}
 80278a8:	4618      	mov	r0, r3
 80278aa:	371c      	adds	r7, #28
 80278ac:	46bd      	mov	sp, r7
 80278ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80278b2:	4770      	bx	lr
 80278b4:	1ffe9c78 	.word	0x1ffe9c78
 80278b8:	1ffe9c7c 	.word	0x1ffe9c7c
 80278bc:	1ffe9c80 	.word	0x1ffe9c80

080278c0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 80278c0:	b480      	push	{r7}
 80278c2:	b089      	sub	sp, #36	; 0x24
 80278c4:	af00      	add	r7, sp, #0
 80278c6:	4603      	mov	r3, r0
 80278c8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80278ca:	88fb      	ldrh	r3, [r7, #6]
 80278cc:	2b00      	cmp	r3, #0
 80278ce:	d101      	bne.n	80278d4 <mem_malloc+0x14>
    return NULL;
 80278d0:	2300      	movs	r3, #0
 80278d2:	e08c      	b.n	80279ee <mem_malloc+0x12e>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80278d4:	88fb      	ldrh	r3, [r7, #6]
 80278d6:	3303      	adds	r3, #3
 80278d8:	b29b      	uxth	r3, r3
 80278da:	f023 0303 	bic.w	r3, r3, #3
 80278de:	80fb      	strh	r3, [r7, #6]

  if(size < MIN_SIZE_ALIGNED) {
 80278e0:	88fb      	ldrh	r3, [r7, #6]
 80278e2:	2b0b      	cmp	r3, #11
 80278e4:	d801      	bhi.n	80278ea <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80278e6:	230c      	movs	r3, #12
 80278e8:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 80278ea:	88fb      	ldrh	r3, [r7, #6]
 80278ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80278f0:	d901      	bls.n	80278f6 <mem_malloc+0x36>
    return NULL;
 80278f2:	2300      	movs	r3, #0
 80278f4:	e07b      	b.n	80279ee <mem_malloc+0x12e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80278f6:	4b41      	ldr	r3, [pc, #260]	; (80279fc <mem_malloc+0x13c>)
 80278f8:	681b      	ldr	r3, [r3, #0]
 80278fa:	461a      	mov	r2, r3
 80278fc:	4b40      	ldr	r3, [pc, #256]	; (8027a00 <mem_malloc+0x140>)
 80278fe:	681b      	ldr	r3, [r3, #0]
 8027900:	1ad3      	subs	r3, r2, r3
 8027902:	83fb      	strh	r3, [r7, #30]
 8027904:	e06c      	b.n	80279e0 <mem_malloc+0x120>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8027906:	4b3e      	ldr	r3, [pc, #248]	; (8027a00 <mem_malloc+0x140>)
 8027908:	681a      	ldr	r2, [r3, #0]
 802790a:	8bfb      	ldrh	r3, [r7, #30]
 802790c:	4413      	add	r3, r2
 802790e:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8027910:	697b      	ldr	r3, [r7, #20]
 8027912:	791b      	ldrb	r3, [r3, #4]
 8027914:	2b00      	cmp	r3, #0
 8027916:	d15d      	bne.n	80279d4 <mem_malloc+0x114>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8027918:	697b      	ldr	r3, [r7, #20]
 802791a:	881b      	ldrh	r3, [r3, #0]
 802791c:	461a      	mov	r2, r3
 802791e:	8bfb      	ldrh	r3, [r7, #30]
 8027920:	1ad3      	subs	r3, r2, r3
 8027922:	f1a3 0208 	sub.w	r2, r3, #8
 8027926:	88fb      	ldrh	r3, [r7, #6]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8027928:	429a      	cmp	r2, r3
 802792a:	d353      	bcc.n	80279d4 <mem_malloc+0x114>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 802792c:	697b      	ldr	r3, [r7, #20]
 802792e:	881b      	ldrh	r3, [r3, #0]
 8027930:	461a      	mov	r2, r3
 8027932:	8bfb      	ldrh	r3, [r7, #30]
 8027934:	1ad3      	subs	r3, r2, r3
 8027936:	f1a3 0208 	sub.w	r2, r3, #8
 802793a:	88fb      	ldrh	r3, [r7, #6]
 802793c:	3314      	adds	r3, #20
 802793e:	429a      	cmp	r2, r3
 8027940:	d327      	bcc.n	8027992 <mem_malloc+0xd2>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8027942:	8bfa      	ldrh	r2, [r7, #30]
 8027944:	88fb      	ldrh	r3, [r7, #6]
 8027946:	4413      	add	r3, r2
 8027948:	b29b      	uxth	r3, r3
 802794a:	3308      	adds	r3, #8
 802794c:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 802794e:	4b2c      	ldr	r3, [pc, #176]	; (8027a00 <mem_malloc+0x140>)
 8027950:	681a      	ldr	r2, [r3, #0]
 8027952:	8a7b      	ldrh	r3, [r7, #18]
 8027954:	4413      	add	r3, r2
 8027956:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8027958:	68fb      	ldr	r3, [r7, #12]
 802795a:	2200      	movs	r2, #0
 802795c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 802795e:	697b      	ldr	r3, [r7, #20]
 8027960:	881a      	ldrh	r2, [r3, #0]
 8027962:	68fb      	ldr	r3, [r7, #12]
 8027964:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8027966:	68fb      	ldr	r3, [r7, #12]
 8027968:	8bfa      	ldrh	r2, [r7, #30]
 802796a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 802796c:	697b      	ldr	r3, [r7, #20]
 802796e:	8a7a      	ldrh	r2, [r7, #18]
 8027970:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8027972:	697b      	ldr	r3, [r7, #20]
 8027974:	2201      	movs	r2, #1
 8027976:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8027978:	68fb      	ldr	r3, [r7, #12]
 802797a:	881b      	ldrh	r3, [r3, #0]
 802797c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8027980:	d00a      	beq.n	8027998 <mem_malloc+0xd8>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8027982:	4b1f      	ldr	r3, [pc, #124]	; (8027a00 <mem_malloc+0x140>)
 8027984:	681b      	ldr	r3, [r3, #0]
 8027986:	68fa      	ldr	r2, [r7, #12]
 8027988:	8812      	ldrh	r2, [r2, #0]
 802798a:	4413      	add	r3, r2
 802798c:	8a7a      	ldrh	r2, [r7, #18]
 802798e:	805a      	strh	r2, [r3, #2]
 8027990:	e002      	b.n	8027998 <mem_malloc+0xd8>
           * take care of this).
           * -> near fit or excact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8027992:	697b      	ldr	r3, [r7, #20]
 8027994:	2201      	movs	r2, #1
 8027996:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8027998:	4b18      	ldr	r3, [pc, #96]	; (80279fc <mem_malloc+0x13c>)
 802799a:	681b      	ldr	r3, [r3, #0]
 802799c:	697a      	ldr	r2, [r7, #20]
 802799e:	429a      	cmp	r2, r3
 80279a0:	d115      	bne.n	80279ce <mem_malloc+0x10e>
          struct mem *cur = lfree;
 80279a2:	4b16      	ldr	r3, [pc, #88]	; (80279fc <mem_malloc+0x13c>)
 80279a4:	681b      	ldr	r3, [r3, #0]
 80279a6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80279a8:	e005      	b.n	80279b6 <mem_malloc+0xf6>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 80279aa:	4b15      	ldr	r3, [pc, #84]	; (8027a00 <mem_malloc+0x140>)
 80279ac:	681b      	ldr	r3, [r3, #0]
 80279ae:	69ba      	ldr	r2, [r7, #24]
 80279b0:	8812      	ldrh	r2, [r2, #0]
 80279b2:	4413      	add	r3, r2
 80279b4:	61bb      	str	r3, [r7, #24]
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80279b6:	69bb      	ldr	r3, [r7, #24]
 80279b8:	791b      	ldrb	r3, [r3, #4]
 80279ba:	2b00      	cmp	r3, #0
 80279bc:	d004      	beq.n	80279c8 <mem_malloc+0x108>
 80279be:	4b11      	ldr	r3, [pc, #68]	; (8027a04 <mem_malloc+0x144>)
 80279c0:	681b      	ldr	r3, [r3, #0]
 80279c2:	69ba      	ldr	r2, [r7, #24]
 80279c4:	429a      	cmp	r2, r3
 80279c6:	d1f0      	bne.n	80279aa <mem_malloc+0xea>
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
          }
          lfree = cur;
 80279c8:	4a0c      	ldr	r2, [pc, #48]	; (80279fc <mem_malloc+0x13c>)
 80279ca:	69bb      	ldr	r3, [r7, #24]
 80279cc:	6013      	str	r3, [r2, #0]
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80279ce:	697b      	ldr	r3, [r7, #20]
 80279d0:	3308      	adds	r3, #8
 80279d2:	e00c      	b.n	80279ee <mem_malloc+0x12e>

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 80279d4:	4b0a      	ldr	r3, [pc, #40]	; (8027a00 <mem_malloc+0x140>)
 80279d6:	681a      	ldr	r2, [r3, #0]
 80279d8:	8bfb      	ldrh	r3, [r7, #30]
 80279da:	4413      	add	r3, r2
 80279dc:	881b      	ldrh	r3, [r3, #0]
 80279de:	83fb      	strh	r3, [r7, #30]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80279e0:	8bfa      	ldrh	r2, [r7, #30]
 80279e2:	88fb      	ldrh	r3, [r7, #6]
 80279e4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80279e8:	429a      	cmp	r2, r3
 80279ea:	db8c      	blt.n	8027906 <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 80279ec:	2300      	movs	r3, #0
}
 80279ee:	4618      	mov	r0, r3
 80279f0:	3724      	adds	r7, #36	; 0x24
 80279f2:	46bd      	mov	sp, r7
 80279f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80279f8:	4770      	bx	lr
 80279fa:	bf00      	nop
 80279fc:	1ffe9c80 	.word	0x1ffe9c80
 8027a00:	1ffe9c78 	.word	0x1ffe9c78
 8027a04:	1ffe9c7c 	.word	0x1ffe9c7c

08027a08 <memp_init>:
 * 
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8027a08:	b480      	push	{r7}
 8027a0a:	b083      	sub	sp, #12
 8027a0c:	af00      	add	r7, sp, #0
  struct memp *memp;
  u16_t i, j;

  for (i = 0; i < MEMP_MAX; ++i) {
 8027a0e:	2300      	movs	r3, #0
 8027a10:	807b      	strh	r3, [r7, #2]
 8027a12:	e002      	b.n	8027a1a <memp_init+0x12>
 8027a14:	887b      	ldrh	r3, [r7, #2]
 8027a16:	3301      	adds	r3, #1
 8027a18:	807b      	strh	r3, [r7, #2]
 8027a1a:	887b      	ldrh	r3, [r7, #2]
 8027a1c:	2b05      	cmp	r3, #5
 8027a1e:	d9f9      	bls.n	8027a14 <memp_init+0xc>
    MEMP_STATS_AVAIL(err, i, 0);
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
  }

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
 8027a20:	4b1b      	ldr	r3, [pc, #108]	; (8027a90 <memp_init+0x88>)
 8027a22:	3303      	adds	r3, #3
 8027a24:	f023 0303 	bic.w	r3, r3, #3
 8027a28:	607b      	str	r3, [r7, #4]
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
 8027a2a:	2300      	movs	r3, #0
 8027a2c:	807b      	strh	r3, [r7, #2]
 8027a2e:	e027      	b.n	8027a80 <memp_init+0x78>
    memp_tab[i] = NULL;
 8027a30:	887b      	ldrh	r3, [r7, #2]
 8027a32:	4a18      	ldr	r2, [pc, #96]	; (8027a94 <memp_init+0x8c>)
 8027a34:	2100      	movs	r1, #0
 8027a36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
 8027a3a:	2300      	movs	r3, #0
 8027a3c:	803b      	strh	r3, [r7, #0]
 8027a3e:	e015      	b.n	8027a6c <memp_init+0x64>
      memp->next = memp_tab[i];
 8027a40:	887b      	ldrh	r3, [r7, #2]
 8027a42:	4a14      	ldr	r2, [pc, #80]	; (8027a94 <memp_init+0x8c>)
 8027a44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8027a48:	687b      	ldr	r3, [r7, #4]
 8027a4a:	601a      	str	r2, [r3, #0]
      memp_tab[i] = memp;
 8027a4c:	887b      	ldrh	r3, [r7, #2]
 8027a4e:	4911      	ldr	r1, [pc, #68]	; (8027a94 <memp_init+0x8c>)
 8027a50:	687a      	ldr	r2, [r7, #4]
 8027a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
 8027a56:	887b      	ldrh	r3, [r7, #2]
 8027a58:	4a0f      	ldr	r2, [pc, #60]	; (8027a98 <memp_init+0x90>)
 8027a5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8027a5e:	461a      	mov	r2, r3
 8027a60:	687b      	ldr	r3, [r7, #4]
 8027a62:	4413      	add	r3, r2
 8027a64:	607b      	str	r3, [r7, #4]
    memp_tab[i] = NULL;
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
 8027a66:	883b      	ldrh	r3, [r7, #0]
 8027a68:	3301      	adds	r3, #1
 8027a6a:	803b      	strh	r3, [r7, #0]
 8027a6c:	887b      	ldrh	r3, [r7, #2]
 8027a6e:	4a0b      	ldr	r2, [pc, #44]	; (8027a9c <memp_init+0x94>)
 8027a70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8027a74:	883a      	ldrh	r2, [r7, #0]
 8027a76:	429a      	cmp	r2, r3
 8027a78:	d3e2      	bcc.n	8027a40 <memp_init+0x38>

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
 8027a7a:	887b      	ldrh	r3, [r7, #2]
 8027a7c:	3301      	adds	r3, #1
 8027a7e:	807b      	strh	r3, [r7, #2]
 8027a80:	887b      	ldrh	r3, [r7, #2]
 8027a82:	2b05      	cmp	r3, #5
 8027a84:	d9d4      	bls.n	8027a30 <memp_init+0x28>
#if MEMP_OVERFLOW_CHECK
  memp_overflow_init();
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK */
}
 8027a86:	370c      	adds	r7, #12
 8027a88:	46bd      	mov	sp, r7
 8027a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a8e:	4770      	bx	lr
 8027a90:	1ffe9c9c 	.word	0x1ffe9c9c
 8027a94:	1ffe9c84 	.word	0x1ffe9c84
 8027a98:	0802a358 	.word	0x0802a358
 8027a9c:	0802a364 	.word	0x0802a364

08027aa0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8027aa0:	b480      	push	{r7}
 8027aa2:	b085      	sub	sp, #20
 8027aa4:	af00      	add	r7, sp, #0
 8027aa6:	4603      	mov	r3, r0
 8027aa8:	71fb      	strb	r3, [r7, #7]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);
 
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8027aaa:	79fb      	ldrb	r3, [r7, #7]
 8027aac:	2b05      	cmp	r3, #5
 8027aae:	d902      	bls.n	8027ab6 <memp_malloc+0x16>
 8027ab0:	be00      	bkpt	0x0000
 8027ab2:	2300      	movs	r3, #0
 8027ab4:	e00e      	b.n	8027ad4 <memp_malloc+0x34>
  SYS_ARCH_PROTECT(old_level);
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

  memp = memp_tab[type];
 8027ab6:	79fb      	ldrb	r3, [r7, #7]
 8027ab8:	4a09      	ldr	r2, [pc, #36]	; (8027ae0 <memp_malloc+0x40>)
 8027aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027abe:	60fb      	str	r3, [r7, #12]
  
  if (memp != NULL) {
 8027ac0:	68fb      	ldr	r3, [r7, #12]
 8027ac2:	2b00      	cmp	r3, #0
 8027ac4:	d005      	beq.n	8027ad2 <memp_malloc+0x32>
    memp_tab[type] = memp->next;
 8027ac6:	79fb      	ldrb	r3, [r7, #7]
 8027ac8:	68fa      	ldr	r2, [r7, #12]
 8027aca:	6812      	ldr	r2, [r2, #0]
 8027acc:	4904      	ldr	r1, [pc, #16]	; (8027ae0 <memp_malloc+0x40>)
 8027ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    MEMP_STATS_INC(err, type);
  }

  SYS_ARCH_UNPROTECT(old_level);

  return memp;
 8027ad2:	68fb      	ldr	r3, [r7, #12]
}
 8027ad4:	4618      	mov	r0, r3
 8027ad6:	3714      	adds	r7, #20
 8027ad8:	46bd      	mov	sp, r7
 8027ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ade:	4770      	bx	lr
 8027ae0:	1ffe9c84 	.word	0x1ffe9c84

08027ae4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8027ae4:	b480      	push	{r7}
 8027ae6:	b085      	sub	sp, #20
 8027ae8:	af00      	add	r7, sp, #0
 8027aea:	4603      	mov	r3, r0
 8027aec:	6039      	str	r1, [r7, #0]
 8027aee:	71fb      	strb	r3, [r7, #7]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
 8027af0:	683b      	ldr	r3, [r7, #0]
 8027af2:	2b00      	cmp	r3, #0
 8027af4:	d100      	bne.n	8027af8 <memp_free+0x14>
    return;
 8027af6:	e00c      	b.n	8027b12 <memp_free+0x2e>
  }
  LWIP_ASSERT("memp_free: mem properly aligned",
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8027af8:	683b      	ldr	r3, [r7, #0]
 8027afa:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
#endif /* MEMP_OVERFLOW_CHECK */

  MEMP_STATS_DEC(used, type); 
  
  memp->next = memp_tab[type]; 
 8027afc:	79fb      	ldrb	r3, [r7, #7]
 8027afe:	4a07      	ldr	r2, [pc, #28]	; (8027b1c <memp_free+0x38>)
 8027b00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8027b04:	68fb      	ldr	r3, [r7, #12]
 8027b06:	601a      	str	r2, [r3, #0]
  memp_tab[type] = memp;
 8027b08:	79fb      	ldrb	r3, [r7, #7]
 8027b0a:	4904      	ldr	r1, [pc, #16]	; (8027b1c <memp_free+0x38>)
 8027b0c:	68fa      	ldr	r2, [r7, #12]
 8027b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity());
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
}
 8027b12:	3714      	adds	r7, #20
 8027b14:	46bd      	mov	sp, r7
 8027b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b1a:	4770      	bx	lr
 8027b1c:	1ffe9c84 	.word	0x1ffe9c84

08027b20 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8027b20:	b480      	push	{r7}
 8027b22:	af00      	add	r7, sp, #0
  netif_add(&loop_netif, &loop_ipaddr, &loop_netmask, &loop_gw, NULL, netif_loopif_init, tcpip_input);
#endif /* NO_SYS */
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8027b24:	46bd      	mov	sp, r7
 8027b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b2a:	4770      	bx	lr

08027b2c <netif_add>:
 * @return netif, or NULL if failed.
 */
struct netif *
netif_add(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
  ip_addr_t *gw, void *state, netif_init_fn init, netif_input_fn input)
{
 8027b2c:	b580      	push	{r7, lr}
 8027b2e:	b084      	sub	sp, #16
 8027b30:	af00      	add	r7, sp, #0
 8027b32:	60f8      	str	r0, [r7, #12]
 8027b34:	60b9      	str	r1, [r7, #8]
 8027b36:	607a      	str	r2, [r7, #4]
 8027b38:	603b      	str	r3, [r7, #0]

  LWIP_ASSERT("No init function given", init != NULL);

  /* reset new interface configuration state */
  ip_addr_set_zero(&netif->ip_addr);
 8027b3a:	68fb      	ldr	r3, [r7, #12]
 8027b3c:	2200      	movs	r2, #0
 8027b3e:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero(&netif->netmask);
 8027b40:	68fb      	ldr	r3, [r7, #12]
 8027b42:	2200      	movs	r2, #0
 8027b44:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero(&netif->gw);
 8027b46:	68fb      	ldr	r3, [r7, #12]
 8027b48:	2200      	movs	r2, #0
 8027b4a:	60da      	str	r2, [r3, #12]
  netif->flags = 0;
 8027b4c:	68fb      	ldr	r3, [r7, #12]
 8027b4e:	2200      	movs	r2, #0
 8027b50:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_AUTOIP */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8027b54:	68fb      	ldr	r3, [r7, #12]
 8027b56:	2200      	movs	r2, #0
 8027b58:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
 8027b5a:	68fb      	ldr	r3, [r7, #12]
 8027b5c:	2200      	movs	r2, #0
 8027b5e:	635a      	str	r2, [r3, #52]	; 0x34
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8027b60:	68fb      	ldr	r3, [r7, #12]
 8027b62:	69ba      	ldr	r2, [r7, #24]
 8027b64:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 8027b66:	4b18      	ldr	r3, [pc, #96]	; (8027bc8 <netif_add+0x9c>)
 8027b68:	781b      	ldrb	r3, [r3, #0]
 8027b6a:	1c5a      	adds	r2, r3, #1
 8027b6c:	b2d1      	uxtb	r1, r2
 8027b6e:	4a16      	ldr	r2, [pc, #88]	; (8027bc8 <netif_add+0x9c>)
 8027b70:	7011      	strb	r1, [r2, #0]
 8027b72:	68fa      	ldr	r2, [r7, #12]
 8027b74:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
  netif->input = input;
 8027b78:	68fb      	ldr	r3, [r7, #12]
 8027b7a:	6a3a      	ldr	r2, [r7, #32]
 8027b7c:	611a      	str	r2, [r3, #16]
  NETIF_SET_HWADDRHINT(netif, NULL);
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

  netif_set_addr(netif, ipaddr, netmask, gw);
 8027b7e:	68f8      	ldr	r0, [r7, #12]
 8027b80:	68b9      	ldr	r1, [r7, #8]
 8027b82:	687a      	ldr	r2, [r7, #4]
 8027b84:	683b      	ldr	r3, [r7, #0]
 8027b86:	f000 f823 	bl	8027bd0 <netif_set_addr>

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8027b8a:	69fb      	ldr	r3, [r7, #28]
 8027b8c:	68f8      	ldr	r0, [r7, #12]
 8027b8e:	4798      	blx	r3
 8027b90:	4603      	mov	r3, r0
 8027b92:	2b00      	cmp	r3, #0
 8027b94:	d001      	beq.n	8027b9a <netif_add+0x6e>
    return NULL;
 8027b96:	2300      	movs	r3, #0
 8027b98:	e011      	b.n	8027bbe <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8027b9a:	4b0c      	ldr	r3, [pc, #48]	; (8027bcc <netif_add+0xa0>)
 8027b9c:	681a      	ldr	r2, [r3, #0]
 8027b9e:	68fb      	ldr	r3, [r7, #12]
 8027ba0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8027ba2:	4a0a      	ldr	r2, [pc, #40]	; (8027bcc <netif_add+0xa0>)
 8027ba4:	68fb      	ldr	r3, [r7, #12]
 8027ba6:	6013      	str	r3, [r2, #0]
  snmp_inc_iflist();

#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
 8027ba8:	68fb      	ldr	r3, [r7, #12]
 8027baa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8027bae:	b2db      	uxtb	r3, r3
 8027bb0:	b25b      	sxtb	r3, r3
 8027bb2:	2b00      	cmp	r3, #0
 8027bb4:	da02      	bge.n	8027bbc <netif_add+0x90>
    igmp_start(netif);
 8027bb6:	68f8      	ldr	r0, [r7, #12]
 8027bb8:	f7fe fdf0 	bl	802679c <igmp_start>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
  ip_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip_addr_debug_print(NETIF_DEBUG, gw);
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8027bbc:	68fb      	ldr	r3, [r7, #12]
}
 8027bbe:	4618      	mov	r0, r3
 8027bc0:	3710      	adds	r7, #16
 8027bc2:	46bd      	mov	sp, r7
 8027bc4:	bd80      	pop	{r7, pc}
 8027bc6:	bf00      	nop
 8027bc8:	1fff00b0 	.word	0x1fff00b0
 8027bcc:	1fff07a8 	.word	0x1fff07a8

08027bd0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
    ip_addr_t *gw)
{
 8027bd0:	b580      	push	{r7, lr}
 8027bd2:	b084      	sub	sp, #16
 8027bd4:	af00      	add	r7, sp, #0
 8027bd6:	60f8      	str	r0, [r7, #12]
 8027bd8:	60b9      	str	r1, [r7, #8]
 8027bda:	607a      	str	r2, [r7, #4]
 8027bdc:	603b      	str	r3, [r7, #0]
  netif_set_ipaddr(netif, ipaddr);
 8027bde:	68f8      	ldr	r0, [r7, #12]
 8027be0:	68b9      	ldr	r1, [r7, #8]
 8027be2:	f000 f80b 	bl	8027bfc <netif_set_ipaddr>
  netif_set_netmask(netif, netmask);
 8027be6:	68f8      	ldr	r0, [r7, #12]
 8027be8:	6879      	ldr	r1, [r7, #4]
 8027bea:	f000 f82f 	bl	8027c4c <netif_set_netmask>
  netif_set_gw(netif, gw);
 8027bee:	68f8      	ldr	r0, [r7, #12]
 8027bf0:	6839      	ldr	r1, [r7, #0]
 8027bf2:	f000 f817 	bl	8027c24 <netif_set_gw>
}
 8027bf6:	3710      	adds	r7, #16
 8027bf8:	46bd      	mov	sp, r7
 8027bfa:	bd80      	pop	{r7, pc}

08027bfc <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)
{
 8027bfc:	b480      	push	{r7}
 8027bfe:	b083      	sub	sp, #12
 8027c00:	af00      	add	r7, sp, #0
 8027c02:	6078      	str	r0, [r7, #4]
 8027c04:	6039      	str	r1, [r7, #0]
  }
#endif
  snmp_delete_ipaddridx_tree(netif);
  snmp_delete_iprteidx_tree(0,netif);
  /* set new IP address to netif */
  ip_addr_set(&(netif->ip_addr), ipaddr);
 8027c06:	683b      	ldr	r3, [r7, #0]
 8027c08:	2b00      	cmp	r3, #0
 8027c0a:	d002      	beq.n	8027c12 <netif_set_ipaddr+0x16>
 8027c0c:	683b      	ldr	r3, [r7, #0]
 8027c0e:	681b      	ldr	r3, [r3, #0]
 8027c10:	e000      	b.n	8027c14 <netif_set_ipaddr+0x18>
 8027c12:	2300      	movs	r3, #0
 8027c14:	687a      	ldr	r2, [r7, #4]
 8027c16:	6053      	str	r3, [r2, #4]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->ip_addr),
    ip4_addr2_16(&netif->ip_addr),
    ip4_addr3_16(&netif->ip_addr),
    ip4_addr4_16(&netif->ip_addr)));
}
 8027c18:	370c      	adds	r7, #12
 8027c1a:	46bd      	mov	sp, r7
 8027c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c20:	4770      	bx	lr
 8027c22:	bf00      	nop

08027c24 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, ip_addr_t *gw)
{
 8027c24:	b480      	push	{r7}
 8027c26:	b083      	sub	sp, #12
 8027c28:	af00      	add	r7, sp, #0
 8027c2a:	6078      	str	r0, [r7, #4]
 8027c2c:	6039      	str	r1, [r7, #0]
  ip_addr_set(&(netif->gw), gw);
 8027c2e:	683b      	ldr	r3, [r7, #0]
 8027c30:	2b00      	cmp	r3, #0
 8027c32:	d002      	beq.n	8027c3a <netif_set_gw+0x16>
 8027c34:	683b      	ldr	r3, [r7, #0]
 8027c36:	681b      	ldr	r3, [r3, #0]
 8027c38:	e000      	b.n	8027c3c <netif_set_gw+0x18>
 8027c3a:	2300      	movs	r3, #0
 8027c3c:	687a      	ldr	r2, [r7, #4]
 8027c3e:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->gw),
    ip4_addr2_16(&netif->gw),
    ip4_addr3_16(&netif->gw),
    ip4_addr4_16(&netif->gw)));
}
 8027c40:	370c      	adds	r7, #12
 8027c42:	46bd      	mov	sp, r7
 8027c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c48:	4770      	bx	lr
 8027c4a:	bf00      	nop

08027c4c <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
{
 8027c4c:	b480      	push	{r7}
 8027c4e:	b083      	sub	sp, #12
 8027c50:	af00      	add	r7, sp, #0
 8027c52:	6078      	str	r0, [r7, #4]
 8027c54:	6039      	str	r1, [r7, #0]
  snmp_delete_iprteidx_tree(0, netif);
  /* set new netmask to netif */
  ip_addr_set(&(netif->netmask), netmask);
 8027c56:	683b      	ldr	r3, [r7, #0]
 8027c58:	2b00      	cmp	r3, #0
 8027c5a:	d002      	beq.n	8027c62 <netif_set_netmask+0x16>
 8027c5c:	683b      	ldr	r3, [r7, #0]
 8027c5e:	681b      	ldr	r3, [r3, #0]
 8027c60:	e000      	b.n	8027c64 <netif_set_netmask+0x18>
 8027c62:	2300      	movs	r3, #0
 8027c64:	687a      	ldr	r2, [r7, #4]
 8027c66:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->netmask),
    ip4_addr2_16(&netif->netmask),
    ip4_addr3_16(&netif->netmask),
    ip4_addr4_16(&netif->netmask)));
}
 8027c68:	370c      	adds	r7, #12
 8027c6a:	46bd      	mov	sp, r7
 8027c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c70:	4770      	bx	lr
 8027c72:	bf00      	nop

08027c74 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8027c74:	b480      	push	{r7}
 8027c76:	b083      	sub	sp, #12
 8027c78:	af00      	add	r7, sp, #0
 8027c7a:	6078      	str	r0, [r7, #4]
    snmp_delete_iprteidx_tree(1, netif);
  } else {
    /* install default route */
    snmp_insert_iprteidx_tree(1, netif);
  }
  netif_default = netif;
 8027c7c:	4a03      	ldr	r2, [pc, #12]	; (8027c8c <netif_set_default+0x18>)
 8027c7e:	687b      	ldr	r3, [r7, #4]
 8027c80:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8027c82:	370c      	adds	r7, #12
 8027c84:	46bd      	mov	sp, r7
 8027c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c8a:	4770      	bx	lr
 8027c8c:	1fff07ac 	.word	0x1fff07ac

08027c90 <netif_set_up>:
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_up(struct netif *netif)
{
 8027c90:	b580      	push	{r7, lr}
 8027c92:	b082      	sub	sp, #8
 8027c94:	af00      	add	r7, sp, #0
 8027c96:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8027c98:	687b      	ldr	r3, [r7, #4]
 8027c9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8027c9e:	f003 0301 	and.w	r3, r3, #1
 8027ca2:	2b00      	cmp	r3, #0
 8027ca4:	d126      	bne.n	8027cf4 <netif_set_up+0x64>
    netif->flags |= NETIF_FLAG_UP;
 8027ca6:	687b      	ldr	r3, [r7, #4]
 8027ca8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8027cac:	f043 0301 	orr.w	r3, r3, #1
 8027cb0:	b2da      	uxtb	r2, r3
 8027cb2:	687b      	ldr	r3, [r7, #4]
 8027cb4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    snmp_get_sysuptime(&netif->ts);
#endif /* LWIP_SNMP */

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8027cb8:	687b      	ldr	r3, [r7, #4]
 8027cba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8027cbe:	f003 0310 	and.w	r3, r3, #16
 8027cc2:	2b00      	cmp	r3, #0
 8027cc4:	d016      	beq.n	8027cf4 <netif_set_up+0x64>
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8027cc6:	687b      	ldr	r3, [r7, #4]
 8027cc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8027ccc:	f003 0320 	and.w	r3, r3, #32
 8027cd0:	2b00      	cmp	r3, #0
 8027cd2:	d005      	beq.n	8027ce0 <netif_set_up+0x50>
        etharp_gratuitous(netif);
 8027cd4:	687b      	ldr	r3, [r7, #4]
 8027cd6:	3304      	adds	r3, #4
 8027cd8:	6878      	ldr	r0, [r7, #4]
 8027cda:	4619      	mov	r1, r3
 8027cdc:	f7fe fb5e 	bl	802639c <etharp_request>
      }
#endif /* LWIP_ARP */

#if LWIP_IGMP
      /* resend IGMP memberships */
      if (netif->flags & NETIF_FLAG_IGMP) {
 8027ce0:	687b      	ldr	r3, [r7, #4]
 8027ce2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8027ce6:	b2db      	uxtb	r3, r3
 8027ce8:	b25b      	sxtb	r3, r3
 8027cea:	2b00      	cmp	r3, #0
 8027cec:	da02      	bge.n	8027cf4 <netif_set_up+0x64>
        igmp_report_groups( netif);
 8027cee:	6878      	ldr	r0, [r7, #4]
 8027cf0:	f7fe fd7e 	bl	80267f0 <igmp_report_groups>
      }
#endif /* LWIP_IGMP */
    }
  }
}
 8027cf4:	3708      	adds	r7, #8
 8027cf6:	46bd      	mov	sp, r7
 8027cf8:	bd80      	pop	{r7, pc}
 8027cfa:	bf00      	nop

08027cfc <netif_set_down>:
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_down(struct netif *netif)
{
 8027cfc:	b580      	push	{r7, lr}
 8027cfe:	b082      	sub	sp, #8
 8027d00:	af00      	add	r7, sp, #0
 8027d02:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8027d04:	687b      	ldr	r3, [r7, #4]
 8027d06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8027d0a:	f003 0301 	and.w	r3, r3, #1
 8027d0e:	2b00      	cmp	r3, #0
 8027d10:	d012      	beq.n	8027d38 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 8027d12:	687b      	ldr	r3, [r7, #4]
 8027d14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8027d18:	f023 0301 	bic.w	r3, r3, #1
 8027d1c:	b2da      	uxtb	r2, r3
 8027d1e:	687b      	ldr	r3, [r7, #4]
 8027d20:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#if LWIP_SNMP
    snmp_get_sysuptime(&netif->ts);
#endif

#if LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8027d24:	687b      	ldr	r3, [r7, #4]
 8027d26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8027d2a:	f003 0320 	and.w	r3, r3, #32
 8027d2e:	2b00      	cmp	r3, #0
 8027d30:	d002      	beq.n	8027d38 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8027d32:	6878      	ldr	r0, [r7, #4]
 8027d34:	f7fd ffb4 	bl	8025ca0 <etharp_cleanup_netif>
    }
#endif /* LWIP_ARP */
    NETIF_STATUS_CALLBACK(netif);
  }
}
 8027d38:	3708      	adds	r7, #8
 8027d3a:	46bd      	mov	sp, r7
 8027d3c:	bd80      	pop	{r7, pc}
 8027d3e:	bf00      	nop

08027d40 <netif_set_link_up>:

/**
 * Called by a driver when its link goes up
 */
void netif_set_link_up(struct netif *netif )
{
 8027d40:	b580      	push	{r7, lr}
 8027d42:	b082      	sub	sp, #8
 8027d44:	af00      	add	r7, sp, #0
 8027d46:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8027d48:	687b      	ldr	r3, [r7, #4]
 8027d4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8027d4e:	f003 0310 	and.w	r3, r3, #16
 8027d52:	2b00      	cmp	r3, #0
 8027d54:	d12e      	bne.n	8027db4 <netif_set_link_up+0x74>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8027d56:	687b      	ldr	r3, [r7, #4]
 8027d58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8027d5c:	f043 0310 	orr.w	r3, r3, #16
 8027d60:	b2da      	uxtb	r2, r3
 8027d62:	687b      	ldr	r3, [r7, #4]
 8027d64:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    if (netif->autoip) {
      autoip_network_changed(netif);
    }
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 8027d68:	687b      	ldr	r3, [r7, #4]
 8027d6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8027d6e:	f003 0301 	and.w	r3, r3, #1
 8027d72:	2b00      	cmp	r3, #0
 8027d74:	d016      	beq.n	8027da4 <netif_set_link_up+0x64>
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & NETIF_FLAG_ETHARP) {
 8027d76:	687b      	ldr	r3, [r7, #4]
 8027d78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8027d7c:	f003 0320 	and.w	r3, r3, #32
 8027d80:	2b00      	cmp	r3, #0
 8027d82:	d005      	beq.n	8027d90 <netif_set_link_up+0x50>
        etharp_gratuitous(netif);
 8027d84:	687b      	ldr	r3, [r7, #4]
 8027d86:	3304      	adds	r3, #4
 8027d88:	6878      	ldr	r0, [r7, #4]
 8027d8a:	4619      	mov	r1, r3
 8027d8c:	f7fe fb06 	bl	802639c <etharp_request>
      }
#endif /* LWIP_ARP */

#if LWIP_IGMP
      /* resend IGMP memberships */
      if (netif->flags & NETIF_FLAG_IGMP) {
 8027d90:	687b      	ldr	r3, [r7, #4]
 8027d92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8027d96:	b2db      	uxtb	r3, r3
 8027d98:	b25b      	sxtb	r3, r3
 8027d9a:	2b00      	cmp	r3, #0
 8027d9c:	da02      	bge.n	8027da4 <netif_set_link_up+0x64>
        igmp_report_groups( netif);
 8027d9e:	6878      	ldr	r0, [r7, #4]
 8027da0:	f7fe fd26 	bl	80267f0 <igmp_report_groups>
      }
#endif /* LWIP_IGMP */
    }
    NETIF_LINK_CALLBACK(netif);
 8027da4:	687b      	ldr	r3, [r7, #4]
 8027da6:	69db      	ldr	r3, [r3, #28]
 8027da8:	2b00      	cmp	r3, #0
 8027daa:	d003      	beq.n	8027db4 <netif_set_link_up+0x74>
 8027dac:	687b      	ldr	r3, [r7, #4]
 8027dae:	69db      	ldr	r3, [r3, #28]
 8027db0:	6878      	ldr	r0, [r7, #4]
 8027db2:	4798      	blx	r3
  }
}
 8027db4:	3708      	adds	r7, #8
 8027db6:	46bd      	mov	sp, r7
 8027db8:	bd80      	pop	{r7, pc}
 8027dba:	bf00      	nop

08027dbc <netif_set_link_down>:

/**
 * Called by a driver when its link goes down
 */
void netif_set_link_down(struct netif *netif )
{
 8027dbc:	b580      	push	{r7, lr}
 8027dbe:	b082      	sub	sp, #8
 8027dc0:	af00      	add	r7, sp, #0
 8027dc2:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8027dc4:	687b      	ldr	r3, [r7, #4]
 8027dc6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8027dca:	f003 0310 	and.w	r3, r3, #16
 8027dce:	2b00      	cmp	r3, #0
 8027dd0:	d010      	beq.n	8027df4 <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 8027dd2:	687b      	ldr	r3, [r7, #4]
 8027dd4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8027dd8:	f023 0310 	bic.w	r3, r3, #16
 8027ddc:	b2da      	uxtb	r2, r3
 8027dde:	687b      	ldr	r3, [r7, #4]
 8027de0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8027de4:	687b      	ldr	r3, [r7, #4]
 8027de6:	69db      	ldr	r3, [r3, #28]
 8027de8:	2b00      	cmp	r3, #0
 8027dea:	d003      	beq.n	8027df4 <netif_set_link_down+0x38>
 8027dec:	687b      	ldr	r3, [r7, #4]
 8027dee:	69db      	ldr	r3, [r3, #28]
 8027df0:	6878      	ldr	r0, [r7, #4]
 8027df2:	4798      	blx	r3
  }
}
 8027df4:	3708      	adds	r7, #8
 8027df6:	46bd      	mov	sp, r7
 8027df8:	bd80      	pop	{r7, pc}
 8027dfa:	bf00      	nop

08027dfc <netif_set_link_callback>:
#if LWIP_NETIF_LINK_CALLBACK
/**
 * Set callback to be called when link is brought up/down
 */
void netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8027dfc:	b480      	push	{r7}
 8027dfe:	b083      	sub	sp, #12
 8027e00:	af00      	add	r7, sp, #0
 8027e02:	6078      	str	r0, [r7, #4]
 8027e04:	6039      	str	r1, [r7, #0]
  if (netif) {
 8027e06:	687b      	ldr	r3, [r7, #4]
 8027e08:	2b00      	cmp	r3, #0
 8027e0a:	d002      	beq.n	8027e12 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8027e0c:	687b      	ldr	r3, [r7, #4]
 8027e0e:	683a      	ldr	r2, [r7, #0]
 8027e10:	61da      	str	r2, [r3, #28]
  }
}
 8027e12:	370c      	adds	r7, #12
 8027e14:	46bd      	mov	sp, r7
 8027e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e1a:	4770      	bx	lr

08027e1c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8027e1c:	b580      	push	{r7, lr}
 8027e1e:	b088      	sub	sp, #32
 8027e20:	af00      	add	r7, sp, #0
 8027e22:	4603      	mov	r3, r0
 8027e24:	71fb      	strb	r3, [r7, #7]
 8027e26:	460b      	mov	r3, r1
 8027e28:	80bb      	strh	r3, [r7, #4]
 8027e2a:	4613      	mov	r3, r2
 8027e2c:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8027e2e:	79fb      	ldrb	r3, [r7, #7]
 8027e30:	2b03      	cmp	r3, #3
 8027e32:	d817      	bhi.n	8027e64 <pbuf_alloc+0x48>
 8027e34:	a201      	add	r2, pc, #4	; (adr r2, 8027e3c <pbuf_alloc+0x20>)
 8027e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027e3a:	bf00      	nop
 8027e3c:	08027e4d 	.word	0x08027e4d
 8027e40:	08027e53 	.word	0x08027e53
 8027e44:	08027e59 	.word	0x08027e59
 8027e48:	08027e5f 	.word	0x08027e5f
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8027e4c:	2338      	movs	r3, #56	; 0x38
 8027e4e:	82fb      	strh	r3, [r7, #22]
    break;
 8027e50:	e00a      	b.n	8027e68 <pbuf_alloc+0x4c>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8027e52:	2324      	movs	r3, #36	; 0x24
 8027e54:	82fb      	strh	r3, [r7, #22]
    break;
 8027e56:	e007      	b.n	8027e68 <pbuf_alloc+0x4c>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_HLEN;
 8027e58:	2310      	movs	r3, #16
 8027e5a:	82fb      	strh	r3, [r7, #22]
    break;
 8027e5c:	e004      	b.n	8027e68 <pbuf_alloc+0x4c>
  case PBUF_RAW:
    offset = 0;
 8027e5e:	2300      	movs	r3, #0
 8027e60:	82fb      	strh	r3, [r7, #22]
    break;
 8027e62:	e001      	b.n	8027e68 <pbuf_alloc+0x4c>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
    return NULL;
 8027e64:	2300      	movs	r3, #0
 8027e66:	e0cf      	b.n	8028008 <pbuf_alloc+0x1ec>
  }

  switch (type) {
 8027e68:	79bb      	ldrb	r3, [r7, #6]
 8027e6a:	2b03      	cmp	r3, #3
 8027e6c:	f200 80c3 	bhi.w	8027ff6 <pbuf_alloc+0x1da>
 8027e70:	a201      	add	r2, pc, #4	; (adr r2, 8027e78 <pbuf_alloc+0x5c>)
 8027e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027e76:	bf00      	nop
 8027e78:	08027f65 	.word	0x08027f65
 8027e7c:	08027fc3 	.word	0x08027fc3
 8027e80:	08027fc3 	.word	0x08027fc3
 8027e84:	08027e89 	.word	0x08027e89
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8027e88:	2005      	movs	r0, #5
 8027e8a:	f7ff fe09 	bl	8027aa0 <memp_malloc>
 8027e8e:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8027e90:	69fb      	ldr	r3, [r7, #28]
 8027e92:	2b00      	cmp	r3, #0
 8027e94:	d101      	bne.n	8027e9a <pbuf_alloc+0x7e>
      PBUF_POOL_IS_EMPTY();
      return NULL;
 8027e96:	2300      	movs	r3, #0
 8027e98:	e0b6      	b.n	8028008 <pbuf_alloc+0x1ec>
    }
    p->type = type;
 8027e9a:	69fb      	ldr	r3, [r7, #28]
 8027e9c:	79ba      	ldrb	r2, [r7, #6]
 8027e9e:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8027ea0:	69fb      	ldr	r3, [r7, #28]
 8027ea2:	2200      	movs	r2, #0
 8027ea4:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8027ea6:	8afb      	ldrh	r3, [r7, #22]
 8027ea8:	3310      	adds	r3, #16
 8027eaa:	69fa      	ldr	r2, [r7, #28]
 8027eac:	4413      	add	r3, r2
 8027eae:	3303      	adds	r3, #3
 8027eb0:	f023 0303 	bic.w	r3, r3, #3
 8027eb4:	461a      	mov	r2, r3
 8027eb6:	69fb      	ldr	r3, [r7, #28]
 8027eb8:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8027eba:	69fb      	ldr	r3, [r7, #28]
 8027ebc:	88ba      	ldrh	r2, [r7, #4]
 8027ebe:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8027ec0:	8afb      	ldrh	r3, [r7, #22]
 8027ec2:	3303      	adds	r3, #3
 8027ec4:	f023 0303 	bic.w	r3, r3, #3
 8027ec8:	f5c3 62c0 	rsb	r2, r3, #1536	; 0x600
 8027ecc:	88bb      	ldrh	r3, [r7, #4]
 8027ece:	4293      	cmp	r3, r2
 8027ed0:	bfa8      	it	ge
 8027ed2:	4613      	movge	r3, r2
 8027ed4:	b29a      	uxth	r2, r3
 8027ed6:	69fb      	ldr	r3, [r7, #28]
 8027ed8:	815a      	strh	r2, [r3, #10]
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8027eda:	69fb      	ldr	r3, [r7, #28]
 8027edc:	2201      	movs	r2, #1
 8027ede:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8027ee0:	69fb      	ldr	r3, [r7, #28]
 8027ee2:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8027ee4:	88bb      	ldrh	r3, [r7, #4]
 8027ee6:	69fa      	ldr	r2, [r7, #28]
 8027ee8:	8952      	ldrh	r2, [r2, #10]
 8027eea:	1a9b      	subs	r3, r3, r2
 8027eec:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8027eee:	e035      	b.n	8027f5c <pbuf_alloc+0x140>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8027ef0:	2005      	movs	r0, #5
 8027ef2:	f7ff fdd5 	bl	8027aa0 <memp_malloc>
 8027ef6:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8027ef8:	68fb      	ldr	r3, [r7, #12]
 8027efa:	2b00      	cmp	r3, #0
 8027efc:	d104      	bne.n	8027f08 <pbuf_alloc+0xec>
        PBUF_POOL_IS_EMPTY();
        /* free chain so far allocated */
        pbuf_free(p);
 8027efe:	69f8      	ldr	r0, [r7, #28]
 8027f00:	f000 f950 	bl	80281a4 <pbuf_free>
        /* bail out unsuccesfully */
        return NULL;
 8027f04:	2300      	movs	r3, #0
 8027f06:	e07f      	b.n	8028008 <pbuf_alloc+0x1ec>
      }
      q->type = type;
 8027f08:	68fb      	ldr	r3, [r7, #12]
 8027f0a:	79ba      	ldrb	r2, [r7, #6]
 8027f0c:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8027f0e:	68fb      	ldr	r3, [r7, #12]
 8027f10:	2200      	movs	r2, #0
 8027f12:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8027f14:	68fb      	ldr	r3, [r7, #12]
 8027f16:	2200      	movs	r2, #0
 8027f18:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8027f1a:	69bb      	ldr	r3, [r7, #24]
 8027f1c:	68fa      	ldr	r2, [r7, #12]
 8027f1e:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
 8027f20:	693b      	ldr	r3, [r7, #16]
 8027f22:	b29a      	uxth	r2, r3
 8027f24:	68fb      	ldr	r3, [r7, #12]
 8027f26:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8027f28:	693b      	ldr	r3, [r7, #16]
 8027f2a:	b29b      	uxth	r3, r3
 8027f2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8027f30:	bf28      	it	cs
 8027f32:	f44f 63c0 	movcs.w	r3, #1536	; 0x600
 8027f36:	b29a      	uxth	r2, r3
 8027f38:	68fb      	ldr	r3, [r7, #12]
 8027f3a:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8027f3c:	68fb      	ldr	r3, [r7, #12]
 8027f3e:	f103 0210 	add.w	r2, r3, #16
 8027f42:	68fb      	ldr	r3, [r7, #12]
 8027f44:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8027f46:	68fb      	ldr	r3, [r7, #12]
 8027f48:	2201      	movs	r2, #1
 8027f4a:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8027f4c:	68fb      	ldr	r3, [r7, #12]
 8027f4e:	895b      	ldrh	r3, [r3, #10]
 8027f50:	461a      	mov	r2, r3
 8027f52:	693b      	ldr	r3, [r7, #16]
 8027f54:	1a9b      	subs	r3, r3, r2
 8027f56:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8027f58:	68fb      	ldr	r3, [r7, #12]
 8027f5a:	61bb      	str	r3, [r7, #24]
    /* remember first pbuf for linkage in next iteration */
    r = p;
    /* remaining length to be allocated */
    rem_len = length - p->len;
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8027f5c:	693b      	ldr	r3, [r7, #16]
 8027f5e:	2b00      	cmp	r3, #0
 8027f60:	dcc6      	bgt.n	8027ef0 <pbuf_alloc+0xd4>
      r = q;
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8027f62:	e04a      	b.n	8027ffa <pbuf_alloc+0x1de>
  case PBUF_RAM:
    /* If pbuf is to be allocated in RAM, allocate memory for it. */
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
 8027f64:	8afb      	ldrh	r3, [r7, #22]
 8027f66:	3313      	adds	r3, #19
 8027f68:	b29b      	uxth	r3, r3
 8027f6a:	f023 0303 	bic.w	r3, r3, #3
 8027f6e:	b29a      	uxth	r2, r3
 8027f70:	88bb      	ldrh	r3, [r7, #4]
 8027f72:	3303      	adds	r3, #3
 8027f74:	b29b      	uxth	r3, r3
 8027f76:	f023 0303 	bic.w	r3, r3, #3
 8027f7a:	b29b      	uxth	r3, r3
 8027f7c:	4413      	add	r3, r2
 8027f7e:	b29b      	uxth	r3, r3
 8027f80:	4618      	mov	r0, r3
 8027f82:	f7ff fc9d 	bl	80278c0 <mem_malloc>
 8027f86:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8027f88:	69fb      	ldr	r3, [r7, #28]
 8027f8a:	2b00      	cmp	r3, #0
 8027f8c:	d101      	bne.n	8027f92 <pbuf_alloc+0x176>
      return NULL;
 8027f8e:	2300      	movs	r3, #0
 8027f90:	e03a      	b.n	8028008 <pbuf_alloc+0x1ec>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8027f92:	8afb      	ldrh	r3, [r7, #22]
 8027f94:	3310      	adds	r3, #16
 8027f96:	69fa      	ldr	r2, [r7, #28]
 8027f98:	4413      	add	r3, r2
 8027f9a:	3303      	adds	r3, #3
 8027f9c:	f023 0303 	bic.w	r3, r3, #3
 8027fa0:	461a      	mov	r2, r3
 8027fa2:	69fb      	ldr	r3, [r7, #28]
 8027fa4:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8027fa6:	69fb      	ldr	r3, [r7, #28]
 8027fa8:	88ba      	ldrh	r2, [r7, #4]
 8027faa:	811a      	strh	r2, [r3, #8]
 8027fac:	69fb      	ldr	r3, [r7, #28]
 8027fae:	891a      	ldrh	r2, [r3, #8]
 8027fb0:	69fb      	ldr	r3, [r7, #28]
 8027fb2:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8027fb4:	69fb      	ldr	r3, [r7, #28]
 8027fb6:	2200      	movs	r2, #0
 8027fb8:	601a      	str	r2, [r3, #0]
    p->type = type;
 8027fba:	69fb      	ldr	r3, [r7, #28]
 8027fbc:	79ba      	ldrb	r2, [r7, #6]
 8027fbe:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8027fc0:	e01b      	b.n	8027ffa <pbuf_alloc+0x1de>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8027fc2:	2004      	movs	r0, #4
 8027fc4:	f7ff fd6c 	bl	8027aa0 <memp_malloc>
 8027fc8:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8027fca:	69fb      	ldr	r3, [r7, #28]
 8027fcc:	2b00      	cmp	r3, #0
 8027fce:	d101      	bne.n	8027fd4 <pbuf_alloc+0x1b8>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8027fd0:	2300      	movs	r3, #0
 8027fd2:	e019      	b.n	8028008 <pbuf_alloc+0x1ec>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8027fd4:	69fb      	ldr	r3, [r7, #28]
 8027fd6:	2200      	movs	r2, #0
 8027fd8:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8027fda:	69fb      	ldr	r3, [r7, #28]
 8027fdc:	88ba      	ldrh	r2, [r7, #4]
 8027fde:	811a      	strh	r2, [r3, #8]
 8027fe0:	69fb      	ldr	r3, [r7, #28]
 8027fe2:	891a      	ldrh	r2, [r3, #8]
 8027fe4:	69fb      	ldr	r3, [r7, #28]
 8027fe6:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8027fe8:	69fb      	ldr	r3, [r7, #28]
 8027fea:	2200      	movs	r2, #0
 8027fec:	601a      	str	r2, [r3, #0]
    p->type = type;
 8027fee:	69fb      	ldr	r3, [r7, #28]
 8027ff0:	79ba      	ldrb	r2, [r7, #6]
 8027ff2:	731a      	strb	r2, [r3, #12]
    break;
 8027ff4:	e001      	b.n	8027ffa <pbuf_alloc+0x1de>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
 8027ff6:	2300      	movs	r3, #0
 8027ff8:	e006      	b.n	8028008 <pbuf_alloc+0x1ec>
  }
  /* set reference count */
  p->ref = 1;
 8027ffa:	69fb      	ldr	r3, [r7, #28]
 8027ffc:	2201      	movs	r2, #1
 8027ffe:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8028000:	69fb      	ldr	r3, [r7, #28]
 8028002:	2200      	movs	r2, #0
 8028004:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8028006:	69fb      	ldr	r3, [r7, #28]
}
 8028008:	4618      	mov	r0, r3
 802800a:	3720      	adds	r7, #32
 802800c:	46bd      	mov	sp, r7
 802800e:	bd80      	pop	{r7, pc}

08028010 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8028010:	b580      	push	{r7, lr}
 8028012:	b086      	sub	sp, #24
 8028014:	af00      	add	r7, sp, #0
 8028016:	6078      	str	r0, [r7, #4]
 8028018:	460b      	mov	r3, r1
 802801a:	807b      	strh	r3, [r7, #2]
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 802801c:	687b      	ldr	r3, [r7, #4]
 802801e:	891b      	ldrh	r3, [r3, #8]
 8028020:	887a      	ldrh	r2, [r7, #2]
 8028022:	429a      	cmp	r2, r3
 8028024:	d300      	bcc.n	8028028 <pbuf_realloc+0x18>
    /* enlarging not yet supported */
    return;
 8028026:	e048      	b.n	80280ba <pbuf_realloc+0xaa>
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8028028:	887b      	ldrh	r3, [r7, #2]
 802802a:	687a      	ldr	r2, [r7, #4]
 802802c:	8912      	ldrh	r2, [r2, #8]
 802802e:	1a9b      	subs	r3, r3, r2
 8028030:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8028032:	887b      	ldrh	r3, [r7, #2]
 8028034:	827b      	strh	r3, [r7, #18]
  q = p;
 8028036:	687b      	ldr	r3, [r7, #4]
 8028038:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 802803a:	e00f      	b.n	802805c <pbuf_realloc+0x4c>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 802803c:	697b      	ldr	r3, [r7, #20]
 802803e:	895b      	ldrh	r3, [r3, #10]
 8028040:	8a7a      	ldrh	r2, [r7, #18]
 8028042:	1ad3      	subs	r3, r2, r3
 8028044:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
    q->tot_len += (u16_t)grow;
 8028046:	697b      	ldr	r3, [r7, #20]
 8028048:	891a      	ldrh	r2, [r3, #8]
 802804a:	68fb      	ldr	r3, [r7, #12]
 802804c:	b29b      	uxth	r3, r3
 802804e:	4413      	add	r3, r2
 8028050:	b29a      	uxth	r2, r3
 8028052:	697b      	ldr	r3, [r7, #20]
 8028054:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8028056:	697b      	ldr	r3, [r7, #20]
 8028058:	681b      	ldr	r3, [r3, #0]
 802805a:	617b      	str	r3, [r7, #20]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  q = p;
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 802805c:	697b      	ldr	r3, [r7, #20]
 802805e:	895b      	ldrh	r3, [r3, #10]
 8028060:	8a7a      	ldrh	r2, [r7, #18]
 8028062:	429a      	cmp	r2, r3
 8028064:	d8ea      	bhi.n	802803c <pbuf_realloc+0x2c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)) {
 8028066:	697b      	ldr	r3, [r7, #20]
 8028068:	7b1b      	ldrb	r3, [r3, #12]
 802806a:	2b00      	cmp	r3, #0
 802806c:	d112      	bne.n	8028094 <pbuf_realloc+0x84>
 802806e:	697b      	ldr	r3, [r7, #20]
 8028070:	895b      	ldrh	r3, [r3, #10]
 8028072:	8a7a      	ldrh	r2, [r7, #18]
 8028074:	429a      	cmp	r2, r3
 8028076:	d00d      	beq.n	8028094 <pbuf_realloc+0x84>
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8028078:	697b      	ldr	r3, [r7, #20]
 802807a:	685b      	ldr	r3, [r3, #4]
 802807c:	461a      	mov	r2, r3
 802807e:	697b      	ldr	r3, [r7, #20]
 8028080:	1ad3      	subs	r3, r2, r3
 8028082:	b29a      	uxth	r2, r3
 8028084:	8a7b      	ldrh	r3, [r7, #18]
 8028086:	4413      	add	r3, r2
 8028088:	b29b      	uxth	r3, r3
 802808a:	6978      	ldr	r0, [r7, #20]
 802808c:	4619      	mov	r1, r3
 802808e:	f7ff fb5d 	bl	802774c <mem_trim>
 8028092:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8028094:	697b      	ldr	r3, [r7, #20]
 8028096:	8a7a      	ldrh	r2, [r7, #18]
 8028098:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 802809a:	697b      	ldr	r3, [r7, #20]
 802809c:	895a      	ldrh	r2, [r3, #10]
 802809e:	697b      	ldr	r3, [r7, #20]
 80280a0:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80280a2:	697b      	ldr	r3, [r7, #20]
 80280a4:	681b      	ldr	r3, [r3, #0]
 80280a6:	2b00      	cmp	r3, #0
 80280a8:	d004      	beq.n	80280b4 <pbuf_realloc+0xa4>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80280aa:	697b      	ldr	r3, [r7, #20]
 80280ac:	681b      	ldr	r3, [r3, #0]
 80280ae:	4618      	mov	r0, r3
 80280b0:	f000 f878 	bl	80281a4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80280b4:	697b      	ldr	r3, [r7, #20]
 80280b6:	2200      	movs	r2, #0
 80280b8:	601a      	str	r2, [r3, #0]

}
 80280ba:	3718      	adds	r7, #24
 80280bc:	46bd      	mov	sp, r7
 80280be:	bd80      	pop	{r7, pc}

080280c0 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 80280c0:	b480      	push	{r7}
 80280c2:	b085      	sub	sp, #20
 80280c4:	af00      	add	r7, sp, #0
 80280c6:	6078      	str	r0, [r7, #4]
 80280c8:	460b      	mov	r3, r1
 80280ca:	807b      	strh	r3, [r7, #2]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
 80280cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80280d0:	2b00      	cmp	r3, #0
 80280d2:	d002      	beq.n	80280da <pbuf_header+0x1a>
 80280d4:	687b      	ldr	r3, [r7, #4]
 80280d6:	2b00      	cmp	r3, #0
 80280d8:	d101      	bne.n	80280de <pbuf_header+0x1e>
    return 0;
 80280da:	2300      	movs	r3, #0
 80280dc:	e05b      	b.n	8028196 <pbuf_header+0xd6>
  }
 
  if (header_size_increment < 0){
 80280de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80280e2:	2b00      	cmp	r3, #0
 80280e4:	da0a      	bge.n	80280fc <pbuf_header+0x3c>
    increment_magnitude = -header_size_increment;
 80280e6:	887b      	ldrh	r3, [r7, #2]
 80280e8:	425b      	negs	r3, r3
 80280ea:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80280ec:	687b      	ldr	r3, [r7, #4]
 80280ee:	895b      	ldrh	r3, [r3, #10]
 80280f0:	89fa      	ldrh	r2, [r7, #14]
 80280f2:	429a      	cmp	r2, r3
 80280f4:	d904      	bls.n	8028100 <pbuf_header+0x40>
 80280f6:	be00      	bkpt	0x0000
 80280f8:	2301      	movs	r3, #1
 80280fa:	e04c      	b.n	8028196 <pbuf_header+0xd6>
  } else {
    increment_magnitude = header_size_increment;
 80280fc:	887b      	ldrh	r3, [r7, #2]
 80280fe:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8028100:	687b      	ldr	r3, [r7, #4]
 8028102:	7b1b      	ldrb	r3, [r3, #12]
 8028104:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8028106:	687b      	ldr	r3, [r7, #4]
 8028108:	685b      	ldr	r3, [r3, #4]
 802810a:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 802810c:	89bb      	ldrh	r3, [r7, #12]
 802810e:	2b00      	cmp	r3, #0
 8028110:	d002      	beq.n	8028118 <pbuf_header+0x58>
 8028112:	89bb      	ldrh	r3, [r7, #12]
 8028114:	2b03      	cmp	r3, #3
 8028116:	d113      	bne.n	8028140 <pbuf_header+0x80>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8028118:	687b      	ldr	r3, [r7, #4]
 802811a:	685a      	ldr	r2, [r3, #4]
 802811c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8028120:	425b      	negs	r3, r3
 8028122:	441a      	add	r2, r3
 8028124:	687b      	ldr	r3, [r7, #4]
 8028126:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8028128:	687b      	ldr	r3, [r7, #4]
 802812a:	685a      	ldr	r2, [r3, #4]
 802812c:	687b      	ldr	r3, [r7, #4]
 802812e:	3310      	adds	r3, #16
 8028130:	429a      	cmp	r2, r3
 8028132:	d204      	bcs.n	802813e <pbuf_header+0x7e>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)(p + 1)));
      /* restore old payload pointer */
      p->payload = payload;
 8028134:	687b      	ldr	r3, [r7, #4]
 8028136:	68ba      	ldr	r2, [r7, #8]
 8028138:	605a      	str	r2, [r3, #4]
      /* bail out unsuccesfully */
      return 1;
 802813a:	2301      	movs	r3, #1
 802813c:	e02b      	b.n	8028196 <pbuf_header+0xd6>
  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 802813e:	e01b      	b.n	8028178 <pbuf_header+0xb8>
      p->payload = payload;
      /* bail out unsuccesfully */
      return 1;
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8028140:	89bb      	ldrh	r3, [r7, #12]
 8028142:	2b02      	cmp	r3, #2
 8028144:	d002      	beq.n	802814c <pbuf_header+0x8c>
 8028146:	89bb      	ldrh	r3, [r7, #12]
 8028148:	2b01      	cmp	r3, #1
 802814a:	d113      	bne.n	8028174 <pbuf_header+0xb4>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 802814c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8028150:	2b00      	cmp	r3, #0
 8028152:	da0d      	bge.n	8028170 <pbuf_header+0xb0>
 8028154:	687b      	ldr	r3, [r7, #4]
 8028156:	895b      	ldrh	r3, [r3, #10]
 8028158:	89fa      	ldrh	r2, [r7, #14]
 802815a:	429a      	cmp	r2, r3
 802815c:	d808      	bhi.n	8028170 <pbuf_header+0xb0>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 802815e:	687b      	ldr	r3, [r7, #4]
 8028160:	685a      	ldr	r2, [r3, #4]
 8028162:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8028166:	425b      	negs	r3, r3
 8028168:	441a      	add	r2, r3
 802816a:	687b      	ldr	r3, [r7, #4]
 802816c:	605a      	str	r2, [r3, #4]
      return 1;
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 802816e:	e003      	b.n	8028178 <pbuf_header+0xb8>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccesfully */
      return 1;
 8028170:	2301      	movs	r3, #1
 8028172:	e010      	b.n	8028196 <pbuf_header+0xd6>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
 8028174:	2301      	movs	r3, #1
 8028176:	e00e      	b.n	8028196 <pbuf_header+0xd6>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8028178:	687b      	ldr	r3, [r7, #4]
 802817a:	895a      	ldrh	r2, [r3, #10]
 802817c:	887b      	ldrh	r3, [r7, #2]
 802817e:	4413      	add	r3, r2
 8028180:	b29a      	uxth	r2, r3
 8028182:	687b      	ldr	r3, [r7, #4]
 8028184:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8028186:	687b      	ldr	r3, [r7, #4]
 8028188:	891a      	ldrh	r2, [r3, #8]
 802818a:	887b      	ldrh	r3, [r7, #2]
 802818c:	4413      	add	r3, r2
 802818e:	b29a      	uxth	r2, r3
 8028190:	687b      	ldr	r3, [r7, #4]
 8028192:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8028194:	2300      	movs	r3, #0
}
 8028196:	4618      	mov	r0, r3
 8028198:	3714      	adds	r7, #20
 802819a:	46bd      	mov	sp, r7
 802819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80281a0:	4770      	bx	lr
 80281a2:	bf00      	nop

080281a4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80281a4:	b580      	push	{r7, lr}
 80281a6:	b086      	sub	sp, #24
 80281a8:	af00      	add	r7, sp, #0
 80281aa:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80281ac:	687b      	ldr	r3, [r7, #4]
 80281ae:	2b00      	cmp	r3, #0
 80281b0:	d101      	bne.n	80281b6 <pbuf_free+0x12>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80281b2:	2300      	movs	r3, #0
 80281b4:	e036      	b.n	8028224 <pbuf_free+0x80>

  LWIP_ASSERT("pbuf_free: sane type",
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 80281b6:	2300      	movs	r3, #0
 80281b8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80281ba:	e02f      	b.n	802821c <pbuf_free+0x78>
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80281bc:	687b      	ldr	r3, [r7, #4]
 80281be:	89db      	ldrh	r3, [r3, #14]
 80281c0:	3b01      	subs	r3, #1
 80281c2:	b29a      	uxth	r2, r3
 80281c4:	687b      	ldr	r3, [r7, #4]
 80281c6:	81da      	strh	r2, [r3, #14]
 80281c8:	687b      	ldr	r3, [r7, #4]
 80281ca:	89db      	ldrh	r3, [r3, #14]
 80281cc:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80281ce:	8abb      	ldrh	r3, [r7, #20]
 80281d0:	2b00      	cmp	r3, #0
 80281d2:	d121      	bne.n	8028218 <pbuf_free+0x74>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80281d4:	687b      	ldr	r3, [r7, #4]
 80281d6:	681b      	ldr	r3, [r3, #0]
 80281d8:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 80281da:	687b      	ldr	r3, [r7, #4]
 80281dc:	7b1b      	ldrb	r3, [r3, #12]
 80281de:	81fb      	strh	r3, [r7, #14]
        pc->custom_free_function(p);
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 80281e0:	89fb      	ldrh	r3, [r7, #14]
 80281e2:	2b03      	cmp	r3, #3
 80281e4:	d104      	bne.n	80281f0 <pbuf_free+0x4c>
          memp_free(MEMP_PBUF_POOL, p);
 80281e6:	2005      	movs	r0, #5
 80281e8:	6879      	ldr	r1, [r7, #4]
 80281ea:	f7ff fc7b 	bl	8027ae4 <memp_free>
 80281ee:	e00d      	b.n	802820c <pbuf_free+0x68>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80281f0:	89fb      	ldrh	r3, [r7, #14]
 80281f2:	2b01      	cmp	r3, #1
 80281f4:	d002      	beq.n	80281fc <pbuf_free+0x58>
 80281f6:	89fb      	ldrh	r3, [r7, #14]
 80281f8:	2b02      	cmp	r3, #2
 80281fa:	d104      	bne.n	8028206 <pbuf_free+0x62>
          memp_free(MEMP_PBUF, p);
 80281fc:	2004      	movs	r0, #4
 80281fe:	6879      	ldr	r1, [r7, #4]
 8028200:	f7ff fc70 	bl	8027ae4 <memp_free>
 8028204:	e002      	b.n	802820c <pbuf_free+0x68>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8028206:	6878      	ldr	r0, [r7, #4]
 8028208:	f7ff fa72 	bl	80276f0 <mem_free>
        }
      }
      count++;
 802820c:	7dfb      	ldrb	r3, [r7, #23]
 802820e:	3301      	adds	r3, #1
 8028210:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8028212:	693b      	ldr	r3, [r7, #16]
 8028214:	607b      	str	r3, [r7, #4]
 8028216:	e001      	b.n	802821c <pbuf_free+0x78>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8028218:	2300      	movs	r3, #0
 802821a:	607b      	str	r3, [r7, #4]
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 802821c:	687b      	ldr	r3, [r7, #4]
 802821e:	2b00      	cmp	r3, #0
 8028220:	d1cc      	bne.n	80281bc <pbuf_free+0x18>
      p = NULL;
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8028222:	7dfb      	ldrb	r3, [r7, #23]
}
 8028224:	4618      	mov	r0, r3
 8028226:	3718      	adds	r7, #24
 8028228:	46bd      	mov	sp, r7
 802822a:	bd80      	pop	{r7, pc}

0802822c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 802822c:	b480      	push	{r7}
 802822e:	b083      	sub	sp, #12
 8028230:	af00      	add	r7, sp, #0
 8028232:	6078      	str	r0, [r7, #4]
  SYS_ARCH_DECL_PROTECT(old_level);
  /* pbuf given? */
  if (p != NULL) {
 8028234:	687b      	ldr	r3, [r7, #4]
 8028236:	2b00      	cmp	r3, #0
 8028238:	d005      	beq.n	8028246 <pbuf_ref+0x1a>
    SYS_ARCH_PROTECT(old_level);
    ++(p->ref);
 802823a:	687b      	ldr	r3, [r7, #4]
 802823c:	89db      	ldrh	r3, [r3, #14]
 802823e:	3301      	adds	r3, #1
 8028240:	b29a      	uxth	r2, r3
 8028242:	687b      	ldr	r3, [r7, #4]
 8028244:	81da      	strh	r2, [r3, #14]
    SYS_ARCH_UNPROTECT(old_level);
  }
}
 8028246:	370c      	adds	r7, #12
 8028248:	46bd      	mov	sp, r7
 802824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802824e:	4770      	bx	lr

08028250 <pbuf_cat>:
 * @see pbuf_chain()
 */

void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8028250:	b480      	push	{r7}
 8028252:	b085      	sub	sp, #20
 8028254:	af00      	add	r7, sp, #0
 8028256:	6078      	str	r0, [r7, #4]
 8028258:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 802825a:	687b      	ldr	r3, [r7, #4]
 802825c:	2b00      	cmp	r3, #0
 802825e:	d002      	beq.n	8028266 <pbuf_cat+0x16>
 8028260:	683b      	ldr	r3, [r7, #0]
 8028262:	2b00      	cmp	r3, #0
 8028264:	d101      	bne.n	802826a <pbuf_cat+0x1a>
 8028266:	be00      	bkpt	0x0000
 8028268:	e01c      	b.n	80282a4 <pbuf_cat+0x54>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 802826a:	687b      	ldr	r3, [r7, #4]
 802826c:	60fb      	str	r3, [r7, #12]
 802826e:	e00a      	b.n	8028286 <pbuf_cat+0x36>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8028270:	68fb      	ldr	r3, [r7, #12]
 8028272:	891a      	ldrh	r2, [r3, #8]
 8028274:	683b      	ldr	r3, [r7, #0]
 8028276:	891b      	ldrh	r3, [r3, #8]
 8028278:	4413      	add	r3, r2
 802827a:	b29a      	uxth	r2, r3
 802827c:	68fb      	ldr	r3, [r7, #12]
 802827e:	811a      	strh	r2, [r3, #8]

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8028280:	68fb      	ldr	r3, [r7, #12]
 8028282:	681b      	ldr	r3, [r3, #0]
 8028284:	60fb      	str	r3, [r7, #12]
 8028286:	68fb      	ldr	r3, [r7, #12]
 8028288:	681b      	ldr	r3, [r3, #0]
 802828a:	2b00      	cmp	r3, #0
 802828c:	d1f0      	bne.n	8028270 <pbuf_cat+0x20>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 802828e:	68fb      	ldr	r3, [r7, #12]
 8028290:	891a      	ldrh	r2, [r3, #8]
 8028292:	683b      	ldr	r3, [r7, #0]
 8028294:	891b      	ldrh	r3, [r3, #8]
 8028296:	4413      	add	r3, r2
 8028298:	b29a      	uxth	r2, r3
 802829a:	68fb      	ldr	r3, [r7, #12]
 802829c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 802829e:	68fb      	ldr	r3, [r7, #12]
 80282a0:	683a      	ldr	r2, [r7, #0]
 80282a2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80282a4:	3714      	adds	r7, #20
 80282a6:	46bd      	mov	sp, r7
 80282a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80282ac:	4770      	bx	lr
 80282ae:	bf00      	nop

080282b0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80282b0:	b580      	push	{r7, lr}
 80282b2:	b082      	sub	sp, #8
 80282b4:	af00      	add	r7, sp, #0
 80282b6:	6078      	str	r0, [r7, #4]
 80282b8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80282ba:	6878      	ldr	r0, [r7, #4]
 80282bc:	6839      	ldr	r1, [r7, #0]
 80282be:	f7ff ffc7 	bl	8028250 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80282c2:	6838      	ldr	r0, [r7, #0]
 80282c4:	f7ff ffb2 	bl	802822c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80282c8:	3708      	adds	r7, #8
 80282ca:	46bd      	mov	sp, r7
 80282cc:	bd80      	pop	{r7, pc}
 80282ce:	bf00      	nop

080282d0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, struct pbuf *p_from)
{
 80282d0:	b580      	push	{r7, lr}
 80282d2:	b084      	sub	sp, #16
 80282d4:	af00      	add	r7, sp, #0
 80282d6:	6078      	str	r0, [r7, #4]
 80282d8:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 80282da:	2300      	movs	r3, #0
 80282dc:	81fb      	strh	r3, [r7, #14]
 80282de:	2300      	movs	r3, #0
 80282e0:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (void*)p_to, (void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80282e2:	687b      	ldr	r3, [r7, #4]
 80282e4:	2b00      	cmp	r3, #0
 80282e6:	d008      	beq.n	80282fa <pbuf_copy+0x2a>
 80282e8:	683b      	ldr	r3, [r7, #0]
 80282ea:	2b00      	cmp	r3, #0
 80282ec:	d005      	beq.n	80282fa <pbuf_copy+0x2a>
 80282ee:	687b      	ldr	r3, [r7, #4]
 80282f0:	891a      	ldrh	r2, [r3, #8]
 80282f2:	683b      	ldr	r3, [r7, #0]
 80282f4:	891b      	ldrh	r3, [r3, #8]
 80282f6:	429a      	cmp	r2, r3
 80282f8:	d202      	bcs.n	8028300 <pbuf_copy+0x30>
 80282fa:	be00      	bkpt	0x0000
 80282fc:	23f2      	movs	r3, #242	; 0xf2
 80282fe:	e06d      	b.n	80283dc <pbuf_copy+0x10c>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8028300:	687b      	ldr	r3, [r7, #4]
 8028302:	895b      	ldrh	r3, [r3, #10]
 8028304:	461a      	mov	r2, r3
 8028306:	89fb      	ldrh	r3, [r7, #14]
 8028308:	1ad2      	subs	r2, r2, r3
 802830a:	683b      	ldr	r3, [r7, #0]
 802830c:	895b      	ldrh	r3, [r3, #10]
 802830e:	4619      	mov	r1, r3
 8028310:	89bb      	ldrh	r3, [r7, #12]
 8028312:	1acb      	subs	r3, r1, r3
 8028314:	429a      	cmp	r2, r3
 8028316:	db05      	blt.n	8028324 <pbuf_copy+0x54>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8028318:	683b      	ldr	r3, [r7, #0]
 802831a:	895a      	ldrh	r2, [r3, #10]
 802831c:	89bb      	ldrh	r3, [r7, #12]
 802831e:	1ad3      	subs	r3, r2, r3
 8028320:	817b      	strh	r3, [r7, #10]
 8028322:	e004      	b.n	802832e <pbuf_copy+0x5e>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8028324:	687b      	ldr	r3, [r7, #4]
 8028326:	895a      	ldrh	r2, [r3, #10]
 8028328:	89fb      	ldrh	r3, [r7, #14]
 802832a:	1ad3      	subs	r3, r2, r3
 802832c:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 802832e:	687b      	ldr	r3, [r7, #4]
 8028330:	685a      	ldr	r2, [r3, #4]
 8028332:	89fb      	ldrh	r3, [r7, #14]
 8028334:	18d1      	adds	r1, r2, r3
 8028336:	683b      	ldr	r3, [r7, #0]
 8028338:	685a      	ldr	r2, [r3, #4]
 802833a:	89bb      	ldrh	r3, [r7, #12]
 802833c:	441a      	add	r2, r3
 802833e:	897b      	ldrh	r3, [r7, #10]
 8028340:	4608      	mov	r0, r1
 8028342:	4611      	mov	r1, r2
 8028344:	461a      	mov	r2, r3
 8028346:	f7fd fa2d 	bl	80257a4 <thumb2_memcpy>
    offset_to += len;
 802834a:	89fa      	ldrh	r2, [r7, #14]
 802834c:	897b      	ldrh	r3, [r7, #10]
 802834e:	4413      	add	r3, r2
 8028350:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8028352:	89ba      	ldrh	r2, [r7, #12]
 8028354:	897b      	ldrh	r3, [r7, #10]
 8028356:	4413      	add	r3, r2
 8028358:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
 802835a:	683b      	ldr	r3, [r7, #0]
 802835c:	895b      	ldrh	r3, [r3, #10]
 802835e:	89ba      	ldrh	r2, [r7, #12]
 8028360:	429a      	cmp	r2, r3
 8028362:	d304      	bcc.n	802836e <pbuf_copy+0x9e>
      /* on to next p_from (if any) */
      offset_from = 0;
 8028364:	2300      	movs	r3, #0
 8028366:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8028368:	683b      	ldr	r3, [r7, #0]
 802836a:	681b      	ldr	r3, [r3, #0]
 802836c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 802836e:	687b      	ldr	r3, [r7, #4]
 8028370:	895b      	ldrh	r3, [r3, #10]
 8028372:	89fa      	ldrh	r2, [r7, #14]
 8028374:	429a      	cmp	r2, r3
 8028376:	d10d      	bne.n	8028394 <pbuf_copy+0xc4>
      /* on to next p_to (if any) */
      offset_to = 0;
 8028378:	2300      	movs	r3, #0
 802837a:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 802837c:	687b      	ldr	r3, [r7, #4]
 802837e:	681b      	ldr	r3, [r3, #0]
 8028380:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8028382:	687b      	ldr	r3, [r7, #4]
 8028384:	2b00      	cmp	r3, #0
 8028386:	d105      	bne.n	8028394 <pbuf_copy+0xc4>
 8028388:	683b      	ldr	r3, [r7, #0]
 802838a:	2b00      	cmp	r3, #0
 802838c:	d002      	beq.n	8028394 <pbuf_copy+0xc4>
 802838e:	be00      	bkpt	0x0000
 8028390:	23f2      	movs	r3, #242	; 0xf2
 8028392:	e023      	b.n	80283dc <pbuf_copy+0x10c>
    }

    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8028394:	683b      	ldr	r3, [r7, #0]
 8028396:	2b00      	cmp	r3, #0
 8028398:	d00c      	beq.n	80283b4 <pbuf_copy+0xe4>
 802839a:	683b      	ldr	r3, [r7, #0]
 802839c:	895a      	ldrh	r2, [r3, #10]
 802839e:	683b      	ldr	r3, [r7, #0]
 80283a0:	891b      	ldrh	r3, [r3, #8]
 80283a2:	429a      	cmp	r2, r3
 80283a4:	d106      	bne.n	80283b4 <pbuf_copy+0xe4>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
 80283a6:	683b      	ldr	r3, [r7, #0]
 80283a8:	681b      	ldr	r3, [r3, #0]
 80283aa:	2b00      	cmp	r3, #0
 80283ac:	d002      	beq.n	80283b4 <pbuf_copy+0xe4>
 80283ae:	be00      	bkpt	0x0000
 80283b0:	23fa      	movs	r3, #250	; 0xfa
 80283b2:	e013      	b.n	80283dc <pbuf_copy+0x10c>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80283b4:	687b      	ldr	r3, [r7, #4]
 80283b6:	2b00      	cmp	r3, #0
 80283b8:	d00c      	beq.n	80283d4 <pbuf_copy+0x104>
 80283ba:	687b      	ldr	r3, [r7, #4]
 80283bc:	895a      	ldrh	r2, [r3, #10]
 80283be:	687b      	ldr	r3, [r7, #4]
 80283c0:	891b      	ldrh	r3, [r3, #8]
 80283c2:	429a      	cmp	r2, r3
 80283c4:	d106      	bne.n	80283d4 <pbuf_copy+0x104>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
 80283c6:	687b      	ldr	r3, [r7, #4]
 80283c8:	681b      	ldr	r3, [r3, #0]
 80283ca:	2b00      	cmp	r3, #0
 80283cc:	d002      	beq.n	80283d4 <pbuf_copy+0x104>
 80283ce:	be00      	bkpt	0x0000
 80283d0:	23fa      	movs	r3, #250	; 0xfa
 80283d2:	e003      	b.n	80283dc <pbuf_copy+0x10c>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80283d4:	683b      	ldr	r3, [r7, #0]
 80283d6:	2b00      	cmp	r3, #0
 80283d8:	d192      	bne.n	8028300 <pbuf_copy+0x30>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80283da:	2300      	movs	r3, #0
 80283dc:	b25b      	sxtb	r3, r3
}
 80283de:	4618      	mov	r0, r3
 80283e0:	3710      	adds	r7, #16
 80283e2:	46bd      	mov	sp, r7
 80283e4:	bd80      	pop	{r7, pc}
 80283e6:	bf00      	nop

080283e8 <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
 80283e8:	b590      	push	{r4, r7, lr}
 80283ea:	b089      	sub	sp, #36	; 0x24
 80283ec:	af00      	add	r7, sp, #0
 80283ee:	6078      	str	r0, [r7, #4]
 80283f0:	6039      	str	r1, [r7, #0]
  struct raw_pcb *pcb, *prev;
  struct ip_hdr *iphdr;
  s16_t proto;
  u8_t eaten = 0;
 80283f2:	2300      	movs	r3, #0
 80283f4:	75fb      	strb	r3, [r7, #23]

  LWIP_UNUSED_ARG(inp);

  iphdr = (struct ip_hdr *)p->payload;
 80283f6:	687b      	ldr	r3, [r7, #4]
 80283f8:	685b      	ldr	r3, [r3, #4]
 80283fa:	613b      	str	r3, [r7, #16]
  proto = IPH_PROTO(iphdr);
 80283fc:	693b      	ldr	r3, [r7, #16]
 80283fe:	7a5b      	ldrb	r3, [r3, #9]
 8028400:	81fb      	strh	r3, [r7, #14]

  prev = NULL;
 8028402:	2300      	movs	r3, #0
 8028404:	61bb      	str	r3, [r7, #24]
  pcb = raw_pcbs;
 8028406:	4b25      	ldr	r3, [pc, #148]	; (802849c <raw_input+0xb4>)
 8028408:	681b      	ldr	r3, [r3, #0]
 802840a:	61fb      	str	r3, [r7, #28]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
 802840c:	e03a      	b.n	8028484 <raw_input+0x9c>
    if ((pcb->protocol == proto) &&
 802840e:	69fb      	ldr	r3, [r7, #28]
 8028410:	7c1b      	ldrb	r3, [r3, #16]
 8028412:	461a      	mov	r2, r3
 8028414:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8028418:	429a      	cmp	r2, r3
 802841a:	d12e      	bne.n	802847a <raw_input+0x92>
        (ip_addr_isany(&pcb->local_ip) ||
 802841c:	69fb      	ldr	r3, [r7, #28]
  prev = NULL;
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
    if ((pcb->protocol == proto) &&
 802841e:	2b00      	cmp	r3, #0
 8028420:	d009      	beq.n	8028436 <raw_input+0x4e>
        (ip_addr_isany(&pcb->local_ip) ||
 8028422:	69fb      	ldr	r3, [r7, #28]
 8028424:	681b      	ldr	r3, [r3, #0]
 8028426:	2b00      	cmp	r3, #0
 8028428:	d005      	beq.n	8028436 <raw_input+0x4e>
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest))) {
 802842a:	69fb      	ldr	r3, [r7, #28]
 802842c:	681a      	ldr	r2, [r3, #0]
 802842e:	4b1c      	ldr	r3, [pc, #112]	; (80284a0 <raw_input+0xb8>)
 8028430:	681b      	ldr	r3, [r3, #0]
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
    if ((pcb->protocol == proto) &&
        (ip_addr_isany(&pcb->local_ip) ||
 8028432:	429a      	cmp	r2, r3
 8028434:	d121      	bne.n	802847a <raw_input+0x92>
      /* broadcast filter? */
      if (ip_get_option(pcb, SOF_BROADCAST) || !ip_addr_isbroadcast(&current_iphdr_dest, inp))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        /* receive callback function available? */
        if (pcb->recv != NULL) {
 8028436:	69fb      	ldr	r3, [r7, #28]
 8028438:	695b      	ldr	r3, [r3, #20]
 802843a:	2b00      	cmp	r3, #0
 802843c:	d01d      	beq.n	802847a <raw_input+0x92>
          /* the receive callback function did not eat the packet? */
          if (pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr()) != 0) {
 802843e:	69fb      	ldr	r3, [r7, #28]
 8028440:	695c      	ldr	r4, [r3, #20]
 8028442:	69fb      	ldr	r3, [r7, #28]
 8028444:	699b      	ldr	r3, [r3, #24]
 8028446:	4618      	mov	r0, r3
 8028448:	69f9      	ldr	r1, [r7, #28]
 802844a:	687a      	ldr	r2, [r7, #4]
 802844c:	4b15      	ldr	r3, [pc, #84]	; (80284a4 <raw_input+0xbc>)
 802844e:	47a0      	blx	r4
 8028450:	4603      	mov	r3, r0
 8028452:	2b00      	cmp	r3, #0
 8028454:	d011      	beq.n	802847a <raw_input+0x92>
            /* receive function ate the packet */
            p = NULL;
 8028456:	2300      	movs	r3, #0
 8028458:	607b      	str	r3, [r7, #4]
            eaten = 1;
 802845a:	2301      	movs	r3, #1
 802845c:	75fb      	strb	r3, [r7, #23]
            if (prev != NULL) {
 802845e:	69bb      	ldr	r3, [r7, #24]
 8028460:	2b00      	cmp	r3, #0
 8028462:	d00a      	beq.n	802847a <raw_input+0x92>
            /* move the pcb to the front of raw_pcbs so that is
               found faster next time */
              prev->next = pcb->next;
 8028464:	69fb      	ldr	r3, [r7, #28]
 8028466:	68da      	ldr	r2, [r3, #12]
 8028468:	69bb      	ldr	r3, [r7, #24]
 802846a:	60da      	str	r2, [r3, #12]
              pcb->next = raw_pcbs;
 802846c:	4b0b      	ldr	r3, [pc, #44]	; (802849c <raw_input+0xb4>)
 802846e:	681a      	ldr	r2, [r3, #0]
 8028470:	69fb      	ldr	r3, [r7, #28]
 8028472:	60da      	str	r2, [r3, #12]
              raw_pcbs = pcb;
 8028474:	4a09      	ldr	r2, [pc, #36]	; (802849c <raw_input+0xb4>)
 8028476:	69fb      	ldr	r3, [r7, #28]
 8028478:	6013      	str	r3, [r2, #0]
        }
        /* no receive callback function was set for this raw PCB */
      }
      /* drop the packet */
    }
    prev = pcb;
 802847a:	69fb      	ldr	r3, [r7, #28]
 802847c:	61bb      	str	r3, [r7, #24]
    pcb = pcb->next;
 802847e:	69fb      	ldr	r3, [r7, #28]
 8028480:	68db      	ldr	r3, [r3, #12]
 8028482:	61fb      	str	r3, [r7, #28]

  prev = NULL;
  pcb = raw_pcbs;
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
 8028484:	7dfb      	ldrb	r3, [r7, #23]
 8028486:	2b00      	cmp	r3, #0
 8028488:	d102      	bne.n	8028490 <raw_input+0xa8>
 802848a:	69fb      	ldr	r3, [r7, #28]
 802848c:	2b00      	cmp	r3, #0
 802848e:	d1be      	bne.n	802840e <raw_input+0x26>
      /* drop the packet */
    }
    prev = pcb;
    pcb = pcb->next;
  }
  return eaten;
 8028490:	7dfb      	ldrb	r3, [r7, #23]
}
 8028492:	4618      	mov	r0, r3
 8028494:	3724      	adds	r7, #36	; 0x24
 8028496:	46bd      	mov	sp, r7
 8028498:	bd90      	pop	{r4, r7, pc}
 802849a:	bf00      	nop
 802849c:	1fff00b4 	.word	0x1fff00b4
 80284a0:	1fff014c 	.word	0x1fff014c
 80284a4:	1fff0144 	.word	0x1fff0144

080284a8 <arp_timer>:
 *
 * @param arg unused argument
 */
static void
arp_timer(void *arg)
{
 80284a8:	b580      	push	{r7, lr}
 80284aa:	b082      	sub	sp, #8
 80284ac:	af00      	add	r7, sp, #0
 80284ae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: etharp_tmr()\n"));
  etharp_tmr();
 80284b0:	f7fd f9dc 	bl	802586c <etharp_tmr>
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 80284b4:	f241 3088 	movw	r0, #5000	; 0x1388
 80284b8:	4903      	ldr	r1, [pc, #12]	; (80284c8 <arp_timer+0x20>)
 80284ba:	2200      	movs	r2, #0
 80284bc:	f000 f830 	bl	8028520 <sys_timeout>
}
 80284c0:	3708      	adds	r7, #8
 80284c2:	46bd      	mov	sp, r7
 80284c4:	bd80      	pop	{r7, pc}
 80284c6:	bf00      	nop
 80284c8:	080284a9 	.word	0x080284a9

080284cc <igmp_timer>:
 *
 * @param arg unused argument
 */
static void
igmp_timer(void *arg)
{
 80284cc:	b580      	push	{r7, lr}
 80284ce:	b082      	sub	sp, #8
 80284d0:	af00      	add	r7, sp, #0
 80284d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: igmp_tmr()\n"));
  igmp_tmr();
 80284d4:	f7fe fac2 	bl	8026a5c <igmp_tmr>
  sys_timeout(IGMP_TMR_INTERVAL, igmp_timer, NULL);
 80284d8:	2064      	movs	r0, #100	; 0x64
 80284da:	4903      	ldr	r1, [pc, #12]	; (80284e8 <igmp_timer+0x1c>)
 80284dc:	2200      	movs	r2, #0
 80284de:	f000 f81f 	bl	8028520 <sys_timeout>
}
 80284e2:	3708      	adds	r7, #8
 80284e4:	46bd      	mov	sp, r7
 80284e6:	bd80      	pop	{r7, pc}
 80284e8:	080284cd 	.word	0x080284cd

080284ec <sys_timeouts_init>:
}
#endif /* LWIP_DNS */

/** Initialize this module */
void sys_timeouts_init(void)
{
 80284ec:	b580      	push	{r7, lr}
 80284ee:	af00      	add	r7, sp, #0
#if IP_REASSEMBLY
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
#endif /* IP_REASSEMBLY */
#if LWIP_ARP
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 80284f0:	f241 3088 	movw	r0, #5000	; 0x1388
 80284f4:	4907      	ldr	r1, [pc, #28]	; (8028514 <sys_timeouts_init+0x28>)
 80284f6:	2200      	movs	r2, #0
 80284f8:	f000 f812 	bl	8028520 <sys_timeout>
#endif /* LWIP_DHCP */
#if LWIP_AUTOIP
  sys_timeout(AUTOIP_TMR_INTERVAL, autoip_timer, NULL);
#endif /* LWIP_AUTOIP */
#if LWIP_IGMP
  sys_timeout(IGMP_TMR_INTERVAL, igmp_timer, NULL);
 80284fc:	2064      	movs	r0, #100	; 0x64
 80284fe:	4906      	ldr	r1, [pc, #24]	; (8028518 <sys_timeouts_init+0x2c>)
 8028500:	2200      	movs	r2, #0
 8028502:	f000 f80d 	bl	8028520 <sys_timeout>
  sys_timeout(DNS_TMR_INTERVAL, dns_timer, NULL);
#endif /* LWIP_DNS */

#if NO_SYS
  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = (u16_t)sys_now();
 8028506:	f7fd f96b 	bl	80257e0 <sys_now>
 802850a:	4603      	mov	r3, r0
 802850c:	b29a      	uxth	r2, r3
 802850e:	4b03      	ldr	r3, [pc, #12]	; (802851c <sys_timeouts_init+0x30>)
 8028510:	801a      	strh	r2, [r3, #0]
#endif
}
 8028512:	bd80      	pop	{r7, pc}
 8028514:	080284a9 	.word	0x080284a9
 8028518:	080284cd 	.word	0x080284cd
 802851c:	1fff00bc 	.word	0x1fff00bc

08028520 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8028520:	b580      	push	{r7, lr}
 8028522:	b086      	sub	sp, #24
 8028524:	af00      	add	r7, sp, #0
 8028526:	60f8      	str	r0, [r7, #12]
 8028528:	60b9      	str	r1, [r7, #8]
 802852a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 802852c:	2003      	movs	r0, #3
 802852e:	f7ff fab7 	bl	8027aa0 <memp_malloc>
 8028532:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8028534:	693b      	ldr	r3, [r7, #16]
 8028536:	2b00      	cmp	r3, #0
 8028538:	d100      	bne.n	802853c <sys_timeout+0x1c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
 802853a:	e05a      	b.n	80285f2 <sys_timeout+0xd2>
  }
  timeout->next = NULL;
 802853c:	693b      	ldr	r3, [r7, #16]
 802853e:	2200      	movs	r2, #0
 8028540:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8028542:	693b      	ldr	r3, [r7, #16]
 8028544:	68ba      	ldr	r2, [r7, #8]
 8028546:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8028548:	693b      	ldr	r3, [r7, #16]
 802854a:	687a      	ldr	r2, [r7, #4]
 802854c:	60da      	str	r2, [r3, #12]
  timeout->time = msecs;
 802854e:	693b      	ldr	r3, [r7, #16]
 8028550:	68fa      	ldr	r2, [r7, #12]
 8028552:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8028554:	4b28      	ldr	r3, [pc, #160]	; (80285f8 <sys_timeout+0xd8>)
 8028556:	681b      	ldr	r3, [r3, #0]
 8028558:	2b00      	cmp	r3, #0
 802855a:	d103      	bne.n	8028564 <sys_timeout+0x44>
    next_timeout = timeout;
 802855c:	4a26      	ldr	r2, [pc, #152]	; (80285f8 <sys_timeout+0xd8>)
 802855e:	693b      	ldr	r3, [r7, #16]
 8028560:	6013      	str	r3, [r2, #0]
    return;
 8028562:	e046      	b.n	80285f2 <sys_timeout+0xd2>
  }

  if (next_timeout->time > msecs) {
 8028564:	4b24      	ldr	r3, [pc, #144]	; (80285f8 <sys_timeout+0xd8>)
 8028566:	681b      	ldr	r3, [r3, #0]
 8028568:	685a      	ldr	r2, [r3, #4]
 802856a:	68fb      	ldr	r3, [r7, #12]
 802856c:	429a      	cmp	r2, r3
 802856e:	d90f      	bls.n	8028590 <sys_timeout+0x70>
    next_timeout->time -= msecs;
 8028570:	4b21      	ldr	r3, [pc, #132]	; (80285f8 <sys_timeout+0xd8>)
 8028572:	681b      	ldr	r3, [r3, #0]
 8028574:	4a20      	ldr	r2, [pc, #128]	; (80285f8 <sys_timeout+0xd8>)
 8028576:	6812      	ldr	r2, [r2, #0]
 8028578:	6851      	ldr	r1, [r2, #4]
 802857a:	68fa      	ldr	r2, [r7, #12]
 802857c:	1a8a      	subs	r2, r1, r2
 802857e:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8028580:	4b1d      	ldr	r3, [pc, #116]	; (80285f8 <sys_timeout+0xd8>)
 8028582:	681a      	ldr	r2, [r3, #0]
 8028584:	693b      	ldr	r3, [r7, #16]
 8028586:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8028588:	4a1b      	ldr	r2, [pc, #108]	; (80285f8 <sys_timeout+0xd8>)
 802858a:	693b      	ldr	r3, [r7, #16]
 802858c:	6013      	str	r3, [r2, #0]
 802858e:	e030      	b.n	80285f2 <sys_timeout+0xd2>
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
 8028590:	4b19      	ldr	r3, [pc, #100]	; (80285f8 <sys_timeout+0xd8>)
 8028592:	681b      	ldr	r3, [r3, #0]
 8028594:	617b      	str	r3, [r7, #20]
 8028596:	e029      	b.n	80285ec <sys_timeout+0xcc>
      timeout->time -= t->time;
 8028598:	693b      	ldr	r3, [r7, #16]
 802859a:	685a      	ldr	r2, [r3, #4]
 802859c:	697b      	ldr	r3, [r7, #20]
 802859e:	685b      	ldr	r3, [r3, #4]
 80285a0:	1ad2      	subs	r2, r2, r3
 80285a2:	693b      	ldr	r3, [r7, #16]
 80285a4:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 80285a6:	697b      	ldr	r3, [r7, #20]
 80285a8:	681b      	ldr	r3, [r3, #0]
 80285aa:	2b00      	cmp	r3, #0
 80285ac:	d006      	beq.n	80285bc <sys_timeout+0x9c>
 80285ae:	697b      	ldr	r3, [r7, #20]
 80285b0:	681b      	ldr	r3, [r3, #0]
 80285b2:	685a      	ldr	r2, [r3, #4]
 80285b4:	693b      	ldr	r3, [r7, #16]
 80285b6:	685b      	ldr	r3, [r3, #4]
 80285b8:	429a      	cmp	r2, r3
 80285ba:	d914      	bls.n	80285e6 <sys_timeout+0xc6>
        if (t->next != NULL) {
 80285bc:	697b      	ldr	r3, [r7, #20]
 80285be:	681b      	ldr	r3, [r3, #0]
 80285c0:	2b00      	cmp	r3, #0
 80285c2:	d008      	beq.n	80285d6 <sys_timeout+0xb6>
          t->next->time -= timeout->time;
 80285c4:	697b      	ldr	r3, [r7, #20]
 80285c6:	681b      	ldr	r3, [r3, #0]
 80285c8:	697a      	ldr	r2, [r7, #20]
 80285ca:	6812      	ldr	r2, [r2, #0]
 80285cc:	6851      	ldr	r1, [r2, #4]
 80285ce:	693a      	ldr	r2, [r7, #16]
 80285d0:	6852      	ldr	r2, [r2, #4]
 80285d2:	1a8a      	subs	r2, r1, r2
 80285d4:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 80285d6:	697b      	ldr	r3, [r7, #20]
 80285d8:	681a      	ldr	r2, [r3, #0]
 80285da:	693b      	ldr	r3, [r7, #16]
 80285dc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80285de:	697b      	ldr	r3, [r7, #20]
 80285e0:	693a      	ldr	r2, [r7, #16]
 80285e2:	601a      	str	r2, [r3, #0]
        break;
 80285e4:	e005      	b.n	80285f2 <sys_timeout+0xd2>
  if (next_timeout->time > msecs) {
    next_timeout->time -= msecs;
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
 80285e6:	697b      	ldr	r3, [r7, #20]
 80285e8:	681b      	ldr	r3, [r3, #0]
 80285ea:	617b      	str	r3, [r7, #20]
 80285ec:	697b      	ldr	r3, [r7, #20]
 80285ee:	2b00      	cmp	r3, #0
 80285f0:	d1d2      	bne.n	8028598 <sys_timeout+0x78>
        t->next = timeout;
        break;
      }
    }
  }
}
 80285f2:	3718      	adds	r7, #24
 80285f4:	46bd      	mov	sp, r7
 80285f6:	bd80      	pop	{r7, pc}
 80285f8:	1fff00b8 	.word	0x1fff00b8

080285fc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80285fc:	b580      	push	{r7, lr}
 80285fe:	b086      	sub	sp, #24
 8028600:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8028602:	4b1f      	ldr	r3, [pc, #124]	; (8028680 <sys_check_timeouts+0x84>)
 8028604:	681b      	ldr	r3, [r3, #0]
 8028606:	2b00      	cmp	r3, #0
 8028608:	d037      	beq.n	802867a <sys_check_timeouts+0x7e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u16_t now;

    now = (u16_t)sys_now();
 802860a:	f7fd f8e9 	bl	80257e0 <sys_now>
 802860e:	4603      	mov	r3, r0
 8028610:	827b      	strh	r3, [r7, #18]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8028612:	4b1c      	ldr	r3, [pc, #112]	; (8028684 <sys_check_timeouts+0x88>)
 8028614:	881b      	ldrh	r3, [r3, #0]
 8028616:	8a7a      	ldrh	r2, [r7, #18]
 8028618:	1ad3      	subs	r3, r2, r3
 802861a:	82fb      	strh	r3, [r7, #22]
    do
    {
#if PBUF_POOL_FREE_OOSEQ
      PBUF_CHECK_FREE_OOSEQ();
#endif /* PBUF_POOL_FREE_OOSEQ */
      had_one = 0;
 802861c:	2300      	movs	r3, #0
 802861e:	757b      	strb	r3, [r7, #21]
      tmptimeout = next_timeout;
 8028620:	4b17      	ldr	r3, [pc, #92]	; (8028680 <sys_check_timeouts+0x84>)
 8028622:	681b      	ldr	r3, [r3, #0]
 8028624:	60fb      	str	r3, [r7, #12]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8028626:	68fb      	ldr	r3, [r7, #12]
 8028628:	2b00      	cmp	r3, #0
 802862a:	d023      	beq.n	8028674 <sys_check_timeouts+0x78>
 802862c:	68fb      	ldr	r3, [r7, #12]
 802862e:	685a      	ldr	r2, [r3, #4]
 8028630:	8afb      	ldrh	r3, [r7, #22]
 8028632:	429a      	cmp	r2, r3
 8028634:	d81e      	bhi.n	8028674 <sys_check_timeouts+0x78>
        /* timeout has expired */
        had_one = 1;
 8028636:	2301      	movs	r3, #1
 8028638:	757b      	strb	r3, [r7, #21]
        timeouts_last_time = now;
 802863a:	4a12      	ldr	r2, [pc, #72]	; (8028684 <sys_check_timeouts+0x88>)
 802863c:	8a7b      	ldrh	r3, [r7, #18]
 802863e:	8013      	strh	r3, [r2, #0]
        diff -= tmptimeout->time;
 8028640:	68fb      	ldr	r3, [r7, #12]
 8028642:	685b      	ldr	r3, [r3, #4]
 8028644:	b29b      	uxth	r3, r3
 8028646:	8afa      	ldrh	r2, [r7, #22]
 8028648:	1ad3      	subs	r3, r2, r3
 802864a:	82fb      	strh	r3, [r7, #22]
        next_timeout = tmptimeout->next;
 802864c:	68fb      	ldr	r3, [r7, #12]
 802864e:	681b      	ldr	r3, [r3, #0]
 8028650:	4a0b      	ldr	r2, [pc, #44]	; (8028680 <sys_check_timeouts+0x84>)
 8028652:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8028654:	68fb      	ldr	r3, [r7, #12]
 8028656:	689b      	ldr	r3, [r3, #8]
 8028658:	60bb      	str	r3, [r7, #8]
        arg = tmptimeout->arg;
 802865a:	68fb      	ldr	r3, [r7, #12]
 802865c:	68db      	ldr	r3, [r3, #12]
 802865e:	607b      	str	r3, [r7, #4]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8028660:	2003      	movs	r0, #3
 8028662:	68f9      	ldr	r1, [r7, #12]
 8028664:	f7ff fa3e 	bl	8027ae4 <memp_free>
        if (handler != NULL) {
 8028668:	68bb      	ldr	r3, [r7, #8]
 802866a:	2b00      	cmp	r3, #0
 802866c:	d002      	beq.n	8028674 <sys_check_timeouts+0x78>
          handler(arg);
 802866e:	68bb      	ldr	r3, [r7, #8]
 8028670:	6878      	ldr	r0, [r7, #4]
 8028672:	4798      	blx	r3
        }
      }
    /* repeat until all expired timers have been called */
    }while(had_one);
 8028674:	7d7b      	ldrb	r3, [r7, #21]
 8028676:	2b00      	cmp	r3, #0
 8028678:	d1d0      	bne.n	802861c <sys_check_timeouts+0x20>
  }
}
 802867a:	3718      	adds	r7, #24
 802867c:	46bd      	mov	sp, r7
 802867e:	bd80      	pop	{r7, pc}
 8028680:	1fff00b8 	.word	0x1fff00b8
 8028684:	1fff00bc 	.word	0x1fff00bc

08028688 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8028688:	b480      	push	{r7}
 802868a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 802868c:	46bd      	mov	sp, r7
 802868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028692:	4770      	bx	lr

08028694 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8028694:	b480      	push	{r7}
 8028696:	b083      	sub	sp, #12
 8028698:	af00      	add	r7, sp, #0
  u16_t n = 0;
 802869a:	2300      	movs	r3, #0
 802869c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;
  
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 802869e:	4b18      	ldr	r3, [pc, #96]	; (8028700 <udp_new_port+0x6c>)
 80286a0:	881b      	ldrh	r3, [r3, #0]
 80286a2:	1c5a      	adds	r2, r3, #1
 80286a4:	b291      	uxth	r1, r2
 80286a6:	4a16      	ldr	r2, [pc, #88]	; (8028700 <udp_new_port+0x6c>)
 80286a8:	8011      	strh	r1, [r2, #0]
 80286aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80286ae:	4293      	cmp	r3, r2
 80286b0:	d103      	bne.n	80286ba <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80286b2:	4b13      	ldr	r3, [pc, #76]	; (8028700 <udp_new_port+0x6c>)
 80286b4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80286b8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80286ba:	4b12      	ldr	r3, [pc, #72]	; (8028704 <udp_new_port+0x70>)
 80286bc:	681b      	ldr	r3, [r3, #0]
 80286be:	603b      	str	r3, [r7, #0]
 80286c0:	e012      	b.n	80286e8 <udp_new_port+0x54>
    if (pcb->local_port == udp_port) {
 80286c2:	683b      	ldr	r3, [r7, #0]
 80286c4:	8a5a      	ldrh	r2, [r3, #18]
 80286c6:	4b0e      	ldr	r3, [pc, #56]	; (8028700 <udp_new_port+0x6c>)
 80286c8:	881b      	ldrh	r3, [r3, #0]
 80286ca:	429a      	cmp	r2, r3
 80286cc:	d109      	bne.n	80286e2 <udp_new_port+0x4e>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80286ce:	88fb      	ldrh	r3, [r7, #6]
 80286d0:	3301      	adds	r3, #1
 80286d2:	80fb      	strh	r3, [r7, #6]
 80286d4:	88fb      	ldrh	r3, [r7, #6]
 80286d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80286da:	d301      	bcc.n	80286e0 <udp_new_port+0x4c>
        return 0;
 80286dc:	2300      	movs	r3, #0
 80286de:	e008      	b.n	80286f2 <udp_new_port+0x5e>
      }
      goto again;
 80286e0:	e7dd      	b.n	802869e <udp_new_port+0xa>
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80286e2:	683b      	ldr	r3, [r7, #0]
 80286e4:	68db      	ldr	r3, [r3, #12]
 80286e6:	603b      	str	r3, [r7, #0]
 80286e8:	683b      	ldr	r3, [r7, #0]
 80286ea:	2b00      	cmp	r3, #0
 80286ec:	d1e9      	bne.n	80286c2 <udp_new_port+0x2e>
        return 0;
      }
      goto again;
    }
  }
  return udp_port;
 80286ee:	4b04      	ldr	r3, [pc, #16]	; (8028700 <udp_new_port+0x6c>)
 80286f0:	881b      	ldrh	r3, [r3, #0]
  if (ipcb != NULL) {
    return 0;
  }
  return udp_port;
#endif
}
 80286f2:	4618      	mov	r0, r3
 80286f4:	370c      	adds	r7, #12
 80286f6:	46bd      	mov	sp, r7
 80286f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80286fc:	4770      	bx	lr
 80286fe:	bf00      	nop
 8028700:	1ffe8a98 	.word	0x1ffe8a98
 8028704:	1fff07b0 	.word	0x1fff07b0

08028708 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8028708:	b590      	push	{r4, r7, lr}
 802870a:	b08d      	sub	sp, #52	; 0x34
 802870c:	af02      	add	r7, sp, #8
 802870e:	6078      	str	r0, [r7, #4]
 8028710:	6039      	str	r1, [r7, #0]

  PERF_START;

  UDP_STATS_INC(udp.recv);

  iphdr = (struct ip_hdr *)p->payload;
 8028712:	687b      	ldr	r3, [r7, #4]
 8028714:	685b      	ldr	r3, [r3, #4]
 8028716:	617b      	str	r3, [r7, #20]

  /* Check minimum length (IP header + UDP header)
   * and move payload pointer to UDP header */
  if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
 8028718:	687b      	ldr	r3, [r7, #4]
 802871a:	891b      	ldrh	r3, [r3, #8]
 802871c:	461a      	mov	r2, r3
 802871e:	697b      	ldr	r3, [r7, #20]
 8028720:	781b      	ldrb	r3, [r3, #0]
 8028722:	f003 030f 	and.w	r3, r3, #15
 8028726:	3302      	adds	r3, #2
 8028728:	009b      	lsls	r3, r3, #2
 802872a:	429a      	cmp	r2, r3
 802872c:	db12      	blt.n	8028754 <udp_input+0x4c>
 802872e:	697b      	ldr	r3, [r7, #20]
 8028730:	781b      	ldrb	r3, [r3, #0]
 8028732:	b29b      	uxth	r3, r3
 8028734:	f003 030f 	and.w	r3, r3, #15
 8028738:	b29b      	uxth	r3, r3
 802873a:	009b      	lsls	r3, r3, #2
 802873c:	b29b      	uxth	r3, r3
 802873e:	425b      	negs	r3, r3
 8028740:	b29b      	uxth	r3, r3
 8028742:	b29b      	uxth	r3, r3
 8028744:	b21b      	sxth	r3, r3
 8028746:	6878      	ldr	r0, [r7, #4]
 8028748:	4619      	mov	r1, r3
 802874a:	f7ff fcb9 	bl	80280c0 <pbuf_header>
 802874e:	4603      	mov	r3, r0
 8028750:	2b00      	cmp	r3, #0
 8028752:	d003      	beq.n	802875c <udp_input+0x54>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    snmp_inc_udpinerrors();
    pbuf_free(p);
 8028754:	6878      	ldr	r0, [r7, #4]
 8028756:	f7ff fd25 	bl	80281a4 <pbuf_free>
    goto end;
 802875a:	e0e2      	b.n	8028922 <udp_input+0x21a>
  }

  udphdr = (struct udp_hdr *)p->payload;
 802875c:	687b      	ldr	r3, [r7, #4]
 802875e:	685b      	ldr	r3, [r3, #4]
 8028760:	613b      	str	r3, [r7, #16]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
 8028762:	4b71      	ldr	r3, [pc, #452]	; (8028928 <udp_input+0x220>)
 8028764:	681b      	ldr	r3, [r3, #0]
 8028766:	4618      	mov	r0, r3
 8028768:	6839      	ldr	r1, [r7, #0]
 802876a:	f7fe fd81 	bl	8027270 <ip4_addr_isbroadcast>
 802876e:	4603      	mov	r3, r0
 8028770:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = ntohs(udphdr->src);
 8028772:	693b      	ldr	r3, [r7, #16]
 8028774:	881b      	ldrh	r3, [r3, #0]
 8028776:	b29b      	uxth	r3, r3
 8028778:	4618      	mov	r0, r3
 802877a:	f7fe fee7 	bl	802754c <lwip_ntohs>
 802877e:	4603      	mov	r3, r0
 8028780:	81bb      	strh	r3, [r7, #12]
  dest = ntohs(udphdr->dest);
 8028782:	693b      	ldr	r3, [r7, #16]
 8028784:	885b      	ldrh	r3, [r3, #2]
 8028786:	b29b      	uxth	r3, r3
 8028788:	4618      	mov	r0, r3
 802878a:	f7fe fedf 	bl	802754c <lwip_ntohs>
 802878e:	4603      	mov	r3, r0
 8028790:	817b      	strh	r3, [r7, #10]
      }
    }
  } else
#endif /* LWIP_DHCP */
  {
    prev = NULL;
 8028792:	2300      	movs	r3, #0
 8028794:	623b      	str	r3, [r7, #32]
    local_match = 0;
 8028796:	2300      	movs	r3, #0
 8028798:	76fb      	strb	r3, [r7, #27]
    uncon_pcb = NULL;
 802879a:	2300      	movs	r3, #0
 802879c:	61fb      	str	r3, [r7, #28]
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 802879e:	4b63      	ldr	r3, [pc, #396]	; (802892c <udp_input+0x224>)
 80287a0:	681b      	ldr	r3, [r3, #0]
 80287a2:	627b      	str	r3, [r7, #36]	; 0x24
 80287a4:	e067      	b.n	8028876 <udp_input+0x16e>
      local_match = 0;
 80287a6:	2300      	movs	r3, #0
 80287a8:	76fb      	strb	r3, [r7, #27]
                   ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip), pcb->local_port,
                   ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
 80287aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80287ac:	8a5b      	ldrh	r3, [r3, #18]
 80287ae:	897a      	ldrh	r2, [r7, #10]
 80287b0:	429a      	cmp	r2, r3
 80287b2:	d136      	bne.n	8028822 <udp_input+0x11a>
        if (
 80287b4:	7bfb      	ldrb	r3, [r7, #15]
 80287b6:	2b00      	cmp	r3, #0
 80287b8:	d106      	bne.n	80287c8 <udp_input+0xc0>
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
 80287ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80287bc:	2b00      	cmp	r3, #0
 80287be:	d023      	beq.n	8028808 <udp_input+0x100>
 80287c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80287c2:	681b      	ldr	r3, [r3, #0]
 80287c4:	2b00      	cmp	r3, #0
 80287c6:	d01f      	beq.n	8028808 <udp_input+0x100>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
 80287c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80287ca:	681a      	ldr	r2, [r3, #0]
 80287cc:	4b56      	ldr	r3, [pc, #344]	; (8028928 <udp_input+0x220>)
 80287ce:	681b      	ldr	r3, [r3, #0]
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
        if (
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
 80287d0:	429a      	cmp	r2, r3
 80287d2:	d019      	beq.n	8028808 <udp_input+0x100>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
#if LWIP_IGMP
           ip_addr_ismulticast(&current_iphdr_dest) ||
 80287d4:	4b54      	ldr	r3, [pc, #336]	; (8028928 <udp_input+0x220>)
 80287d6:	681b      	ldr	r3, [r3, #0]
 80287d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
        if (
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
 80287dc:	2be0      	cmp	r3, #224	; 0xe0
 80287de:	d013      	beq.n	8028808 <udp_input+0x100>
#if LWIP_IGMP
           ip_addr_ismulticast(&current_iphdr_dest) ||
 80287e0:	7bfb      	ldrb	r3, [r7, #15]
 80287e2:	2b00      	cmp	r3, #0
 80287e4:	d01d      	beq.n	8028822 <udp_input+0x11a>
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
             (ip_addr_isany(&pcb->local_ip) ||
 80287e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
#if IP_SOF_BROADCAST_RECV
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
 80287e8:	2b00      	cmp	r3, #0
 80287ea:	d00d      	beq.n	8028808 <udp_input+0x100>
             (ip_addr_isany(&pcb->local_ip) ||
 80287ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80287ee:	681b      	ldr	r3, [r3, #0]
 80287f0:	2b00      	cmp	r3, #0
 80287f2:	d009      	beq.n	8028808 <udp_input+0x100>
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
 80287f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80287f6:	681a      	ldr	r2, [r3, #0]
 80287f8:	4b4b      	ldr	r3, [pc, #300]	; (8028928 <udp_input+0x220>)
 80287fa:	681b      	ldr	r3, [r3, #0]
 80287fc:	405a      	eors	r2, r3
 80287fe:	683b      	ldr	r3, [r7, #0]
 8028800:	689b      	ldr	r3, [r3, #8]
 8028802:	4013      	ands	r3, r2
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
             (ip_addr_isany(&pcb->local_ip) ||
 8028804:	2b00      	cmp	r3, #0
 8028806:	d10c      	bne.n	8028822 <udp_input+0x11a>
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#endif /* IP_SOF_BROADCAST_RECV */ 
          local_match = 1;
 8028808:	2301      	movs	r3, #1
 802880a:	76fb      	strb	r3, [r7, #27]
          if ((uncon_pcb == NULL) && 
 802880c:	69fb      	ldr	r3, [r7, #28]
 802880e:	2b00      	cmp	r3, #0
 8028810:	d107      	bne.n	8028822 <udp_input+0x11a>
              ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
 8028812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028814:	7c1b      	ldrb	r3, [r3, #16]
 8028816:	f003 0304 	and.w	r3, r3, #4
            (broadcast &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#endif /* IP_SOF_BROADCAST_RECV */ 
          local_match = 1;
          if ((uncon_pcb == NULL) && 
 802881a:	2b00      	cmp	r3, #0
 802881c:	d101      	bne.n	8028822 <udp_input+0x11a>
              ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
            /* the first unconnected matching PCB */
            uncon_pcb = pcb;
 802881e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028820:	61fb      	str	r3, [r7, #28]
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
 8028822:	7efb      	ldrb	r3, [r7, #27]
 8028824:	2b00      	cmp	r3, #0
 8028826:	d021      	beq.n	802886c <udp_input+0x164>
          (pcb->remote_port == src) &&
 8028828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802882a:	8a9b      	ldrh	r3, [r3, #20]
            uncon_pcb = pcb;
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
 802882c:	89ba      	ldrh	r2, [r7, #12]
 802882e:	429a      	cmp	r2, r3
 8028830:	d11c      	bne.n	802886c <udp_input+0x164>
          (pcb->remote_port == src) &&
          (ip_addr_isany(&pcb->remote_ip) ||
 8028832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028834:	3304      	adds	r3, #4
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
 8028836:	2b00      	cmp	r3, #0
 8028838:	d009      	beq.n	802884e <udp_input+0x146>
          (ip_addr_isany(&pcb->remote_ip) ||
 802883a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802883c:	685b      	ldr	r3, [r3, #4]
 802883e:	2b00      	cmp	r3, #0
 8028840:	d005      	beq.n	802884e <udp_input+0x146>
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
 8028842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028844:	685a      	ldr	r2, [r3, #4]
 8028846:	4b3a      	ldr	r3, [pc, #232]	; (8028930 <udp_input+0x228>)
 8028848:	681b      	ldr	r3, [r3, #0]
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) &&
          (ip_addr_isany(&pcb->remote_ip) ||
 802884a:	429a      	cmp	r2, r3
 802884c:	d10e      	bne.n	802886c <udp_input+0x164>
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 802884e:	6a3b      	ldr	r3, [r7, #32]
 8028850:	2b00      	cmp	r3, #0
 8028852:	d00a      	beq.n	802886a <udp_input+0x162>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8028854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028856:	68da      	ldr	r2, [r3, #12]
 8028858:	6a3b      	ldr	r3, [r7, #32]
 802885a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 802885c:	4b33      	ldr	r3, [pc, #204]	; (802892c <udp_input+0x224>)
 802885e:	681a      	ldr	r2, [r3, #0]
 8028860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028862:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8028864:	4a31      	ldr	r2, [pc, #196]	; (802892c <udp_input+0x224>)
 8028866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028868:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 802886a:	e007      	b.n	802887c <udp_input+0x174>
      }
      prev = pcb;
 802886c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802886e:	623b      	str	r3, [r7, #32]
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8028870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028872:	68db      	ldr	r3, [r3, #12]
 8028874:	627b      	str	r3, [r7, #36]	; 0x24
 8028876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028878:	2b00      	cmp	r3, #0
 802887a:	d194      	bne.n	80287a6 <udp_input+0x9e>
        break;
      }
      prev = pcb;
    }
    /* no fully matching pcb found? then look for an unconnected pcb */
    if (pcb == NULL) {
 802887c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802887e:	2b00      	cmp	r3, #0
 8028880:	d101      	bne.n	8028886 <udp_input+0x17e>
      pcb = uncon_pcb;
 8028882:	69fb      	ldr	r3, [r7, #28]
 8028884:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
 8028886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028888:	2b00      	cmp	r3, #0
 802888a:	d105      	bne.n	8028898 <udp_input+0x190>
 802888c:	683b      	ldr	r3, [r7, #0]
 802888e:	685a      	ldr	r2, [r3, #4]
 8028890:	4b25      	ldr	r3, [pc, #148]	; (8028928 <udp_input+0x220>)
 8028892:	681b      	ldr	r3, [r3, #0]
 8028894:	429a      	cmp	r2, r3
 8028896:	d141      	bne.n	802891c <udp_input+0x214>
          goto end;
        }
      }
#endif /* CHECKSUM_CHECK_UDP */
    }
    if(pbuf_header(p, -UDP_HLEN)) {
 8028898:	6878      	ldr	r0, [r7, #4]
 802889a:	f06f 0107 	mvn.w	r1, #7
 802889e:	f7ff fc0f 	bl	80280c0 <pbuf_header>
 80288a2:	4603      	mov	r3, r0
 80288a4:	2b00      	cmp	r3, #0
 80288a6:	d003      	beq.n	80288b0 <udp_input+0x1a8>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
 80288a8:	6878      	ldr	r0, [r7, #4]
 80288aa:	f7ff fc7b 	bl	80281a4 <pbuf_free>
      goto end;
 80288ae:	e038      	b.n	8028922 <udp_input+0x21a>
    }
    if (pcb != NULL) {
 80288b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80288b2:	2b00      	cmp	r3, #0
 80288b4:	d013      	beq.n	80288de <udp_input+0x1d6>
          pbuf_header(p, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80288b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80288b8:	69db      	ldr	r3, [r3, #28]
 80288ba:	2b00      	cmp	r3, #0
 80288bc:	d00b      	beq.n	80288d6 <udp_input+0x1ce>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80288be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80288c0:	69dc      	ldr	r4, [r3, #28]
 80288c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80288c4:	6a1a      	ldr	r2, [r3, #32]
 80288c6:	89bb      	ldrh	r3, [r7, #12]
 80288c8:	9300      	str	r3, [sp, #0]
 80288ca:	4610      	mov	r0, r2
 80288cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80288ce:	687a      	ldr	r2, [r7, #4]
 80288d0:	4b17      	ldr	r3, [pc, #92]	; (8028930 <udp_input+0x228>)
 80288d2:	47a0      	blx	r4
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
      goto end;
    }
    if (pcb != NULL) {
 80288d4:	e025      	b.n	8028922 <udp_input+0x21a>
      if (pcb->recv != NULL) {
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
      } else {
        /* no recv function registered? then we have to free the pbuf! */
        pbuf_free(p);
 80288d6:	6878      	ldr	r0, [r7, #4]
 80288d8:	f7ff fc64 	bl	80281a4 <pbuf_free>
        goto end;
 80288dc:	e021      	b.n	8028922 <udp_input+0x21a>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
 80288de:	7bfb      	ldrb	r3, [r7, #15]
 80288e0:	2b00      	cmp	r3, #0
 80288e2:	d117      	bne.n	8028914 <udp_input+0x20c>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
 80288e4:	4b10      	ldr	r3, [pc, #64]	; (8028928 <udp_input+0x220>)
 80288e6:	681b      	ldr	r3, [r3, #0]
 80288e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
 80288ec:	2be0      	cmp	r3, #224	; 0xe0
 80288ee:	d011      	beq.n	8028914 <udp_input+0x20c>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
        /* move payload pointer back to ip header */
        pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
 80288f0:	697b      	ldr	r3, [r7, #20]
 80288f2:	781b      	ldrb	r3, [r3, #0]
 80288f4:	f003 030f 	and.w	r3, r3, #15
 80288f8:	3302      	adds	r3, #2
 80288fa:	b29b      	uxth	r3, r3
 80288fc:	009b      	lsls	r3, r3, #2
 80288fe:	b29b      	uxth	r3, r3
 8028900:	b29b      	uxth	r3, r3
 8028902:	b21b      	sxth	r3, r3
 8028904:	6878      	ldr	r0, [r7, #4]
 8028906:	4619      	mov	r1, r3
 8028908:	f7ff fbda 	bl	80280c0 <pbuf_header>
        LWIP_ASSERT("p->payload == iphdr", (p->payload == iphdr));
        icmp_dest_unreach(p, ICMP_DUR_PORT);
 802890c:	6878      	ldr	r0, [r7, #4]
 802890e:	2103      	movs	r1, #3
 8028910:	f7fd feca 	bl	80266a8 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      UDP_STATS_INC(udp.proterr);
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpnoports();
      pbuf_free(p);
 8028914:	6878      	ldr	r0, [r7, #4]
 8028916:	f7ff fc45 	bl	80281a4 <pbuf_free>
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
      goto end;
    }
    if (pcb != NULL) {
 802891a:	e002      	b.n	8028922 <udp_input+0x21a>
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpnoports();
      pbuf_free(p);
    }
  } else {
    pbuf_free(p);
 802891c:	6878      	ldr	r0, [r7, #4]
 802891e:	f7ff fc41 	bl	80281a4 <pbuf_free>
  }
end:
  PERF_STOP("udp_input");
}
 8028922:	372c      	adds	r7, #44	; 0x2c
 8028924:	46bd      	mov	sp, r7
 8028926:	bd90      	pop	{r4, r7, pc}
 8028928:	1fff014c 	.word	0x1fff014c
 802892c:	1fff07b0 	.word	0x1fff07b0
 8028930:	1fff0144 	.word	0x1fff0144

08028934 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8028934:	b590      	push	{r4, r7, lr}
 8028936:	b08d      	sub	sp, #52	; 0x34
 8028938:	af04      	add	r7, sp, #16
 802893a:	60f8      	str	r0, [r7, #12]
 802893c:	60b9      	str	r1, [r7, #8]
 802893e:	607a      	str	r2, [r7, #4]
 8028940:	807b      	strh	r3, [r7, #2]
    return ERR_VAL;
  }
#endif /* IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8028942:	68fb      	ldr	r3, [r7, #12]
 8028944:	8a5b      	ldrh	r3, [r3, #18]
 8028946:	2b00      	cmp	r3, #0
 8028948:	d10f      	bne.n	802896a <udp_sendto_if+0x36>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 802894a:	68fa      	ldr	r2, [r7, #12]
 802894c:	68fb      	ldr	r3, [r7, #12]
 802894e:	8a5b      	ldrh	r3, [r3, #18]
 8028950:	68f8      	ldr	r0, [r7, #12]
 8028952:	4611      	mov	r1, r2
 8028954:	461a      	mov	r2, r3
 8028956:	f000 f899 	bl	8028a8c <udp_bind>
 802895a:	4603      	mov	r3, r0
 802895c:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 802895e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028962:	2b00      	cmp	r3, #0
 8028964:	d001      	beq.n	802896a <udp_sendto_if+0x36>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8028966:	7dfb      	ldrb	r3, [r7, #23]
 8028968:	e08a      	b.n	8028a80 <udp_sendto_if+0x14c>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 802896a:	68b8      	ldr	r0, [r7, #8]
 802896c:	2108      	movs	r1, #8
 802896e:	f7ff fba7 	bl	80280c0 <pbuf_header>
 8028972:	4603      	mov	r3, r0
 8028974:	2b00      	cmp	r3, #0
 8028976:	d013      	beq.n	80289a0 <udp_sendto_if+0x6c>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8028978:	2001      	movs	r0, #1
 802897a:	2108      	movs	r1, #8
 802897c:	2200      	movs	r2, #0
 802897e:	f7ff fa4d 	bl	8027e1c <pbuf_alloc>
 8028982:	61b8      	str	r0, [r7, #24]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8028984:	69bb      	ldr	r3, [r7, #24]
 8028986:	2b00      	cmp	r3, #0
 8028988:	d101      	bne.n	802898e <udp_sendto_if+0x5a>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 802898a:	23ff      	movs	r3, #255	; 0xff
 802898c:	e078      	b.n	8028a80 <udp_sendto_if+0x14c>
    }
    if (p->tot_len != 0) {
 802898e:	68bb      	ldr	r3, [r7, #8]
 8028990:	891b      	ldrh	r3, [r3, #8]
 8028992:	2b00      	cmp	r3, #0
 8028994:	d006      	beq.n	80289a4 <udp_sendto_if+0x70>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8028996:	69b8      	ldr	r0, [r7, #24]
 8028998:	68b9      	ldr	r1, [r7, #8]
 802899a:	f7ff fc89 	bl	80282b0 <pbuf_chain>
 802899e:	e001      	b.n	80289a4 <udp_sendto_if+0x70>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80289a0:	68bb      	ldr	r3, [r7, #8]
 80289a2:	61bb      	str	r3, [r7, #24]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80289a4:	69bb      	ldr	r3, [r7, #24]
 80289a6:	685b      	ldr	r3, [r3, #4]
 80289a8:	613b      	str	r3, [r7, #16]
  udphdr->src = htons(pcb->local_port);
 80289aa:	68fb      	ldr	r3, [r7, #12]
 80289ac:	8a5b      	ldrh	r3, [r3, #18]
 80289ae:	4618      	mov	r0, r3
 80289b0:	f7fe fdb6 	bl	8027520 <lwip_htons>
 80289b4:	4603      	mov	r3, r0
 80289b6:	461a      	mov	r2, r3
 80289b8:	693b      	ldr	r3, [r7, #16]
 80289ba:	801a      	strh	r2, [r3, #0]
  udphdr->dest = htons(dst_port);
 80289bc:	887b      	ldrh	r3, [r7, #2]
 80289be:	4618      	mov	r0, r3
 80289c0:	f7fe fdae 	bl	8027520 <lwip_htons>
 80289c4:	4603      	mov	r3, r0
 80289c6:	461a      	mov	r2, r3
 80289c8:	693b      	ldr	r3, [r7, #16]
 80289ca:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000; 
 80289cc:	693b      	ldr	r3, [r7, #16]
 80289ce:	2200      	movs	r2, #0
 80289d0:	719a      	strb	r2, [r3, #6]
 80289d2:	2200      	movs	r2, #0
 80289d4:	71da      	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if LWIP_IGMP
  if (ip_addr_ismulticast(dst_ip) && ((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0)) {
 80289d6:	687b      	ldr	r3, [r7, #4]
 80289d8:	681b      	ldr	r3, [r3, #0]
 80289da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80289de:	2be0      	cmp	r3, #224	; 0xe0
 80289e0:	d10c      	bne.n	80289fc <udp_sendto_if+0xc8>
 80289e2:	68fb      	ldr	r3, [r7, #12]
 80289e4:	7c1b      	ldrb	r3, [r3, #16]
 80289e6:	f003 0308 	and.w	r3, r3, #8
 80289ea:	2b00      	cmp	r3, #0
 80289ec:	d006      	beq.n	80289fc <udp_sendto_if+0xc8>
    q->flags |= PBUF_FLAG_MCASTLOOP;
 80289ee:	69bb      	ldr	r3, [r7, #24]
 80289f0:	7b5b      	ldrb	r3, [r3, #13]
 80289f2:	f043 0304 	orr.w	r3, r3, #4
 80289f6:	b2da      	uxtb	r2, r3
 80289f8:	69bb      	ldr	r3, [r7, #24]
 80289fa:	735a      	strb	r2, [r3, #13]
  }
#endif /* LWIP_IGMP */


  /* PCB local address is IP_ANY_ADDR? */
  if (ip_addr_isany(&pcb->local_ip)) {
 80289fc:	68fb      	ldr	r3, [r7, #12]
 80289fe:	2b00      	cmp	r3, #0
 8028a00:	d003      	beq.n	8028a0a <udp_sendto_if+0xd6>
 8028a02:	68fb      	ldr	r3, [r7, #12]
 8028a04:	681b      	ldr	r3, [r3, #0]
 8028a06:	2b00      	cmp	r3, #0
 8028a08:	d103      	bne.n	8028a12 <udp_sendto_if+0xde>
    /* use outgoing network interface IP address as source address */
    src_ip = &(netif->ip_addr);
 8028a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028a0c:	3304      	adds	r3, #4
 8028a0e:	61fb      	str	r3, [r7, #28]
 8028a10:	e012      	b.n	8028a38 <udp_sendto_if+0x104>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
 8028a12:	68fb      	ldr	r3, [r7, #12]
 8028a14:	681a      	ldr	r2, [r3, #0]
 8028a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028a18:	685b      	ldr	r3, [r3, #4]
 8028a1a:	429a      	cmp	r2, r3
 8028a1c:	d00a      	beq.n	8028a34 <udp_sendto_if+0x100>
      /* local_ip doesn't match, drop the packet */
      if (q != p) {
 8028a1e:	69ba      	ldr	r2, [r7, #24]
 8028a20:	68bb      	ldr	r3, [r7, #8]
 8028a22:	429a      	cmp	r2, r3
 8028a24:	d004      	beq.n	8028a30 <udp_sendto_if+0xfc>
        /* free the header pbuf */
        pbuf_free(q);
 8028a26:	69b8      	ldr	r0, [r7, #24]
 8028a28:	f7ff fbbc 	bl	80281a4 <pbuf_free>
        q = NULL;
 8028a2c:	2300      	movs	r3, #0
 8028a2e:	61bb      	str	r3, [r7, #24]
        /* p is still referenced by the caller, and will live on */
      }
      return ERR_VAL;
 8028a30:	23fa      	movs	r3, #250	; 0xfa
 8028a32:	e025      	b.n	8028a80 <udp_sendto_if+0x14c>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &(pcb->local_ip);
 8028a34:	68fb      	ldr	r3, [r7, #12]
 8028a36:	61fb      	str	r3, [r7, #28]
    NETIF_SET_HWADDRHINT(netif, NULL);
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = htons(q->tot_len);
 8028a38:	69bb      	ldr	r3, [r7, #24]
 8028a3a:	891b      	ldrh	r3, [r3, #8]
 8028a3c:	4618      	mov	r0, r3
 8028a3e:	f7fe fd6f 	bl	8027520 <lwip_htons>
 8028a42:	4603      	mov	r3, r0
 8028a44:	461a      	mov	r2, r3
 8028a46:	693b      	ldr	r3, [r7, #16]
 8028a48:	809a      	strh	r2, [r3, #4]
#endif /* CHECKSUM_GEN_UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));
    /* output to IP */
    NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
    err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
 8028a4a:	68fb      	ldr	r3, [r7, #12]
 8028a4c:	7a9c      	ldrb	r4, [r3, #10]
 8028a4e:	68fb      	ldr	r3, [r7, #12]
 8028a50:	7a5b      	ldrb	r3, [r3, #9]
 8028a52:	9300      	str	r3, [sp, #0]
 8028a54:	2311      	movs	r3, #17
 8028a56:	9301      	str	r3, [sp, #4]
 8028a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028a5a:	9302      	str	r3, [sp, #8]
 8028a5c:	69b8      	ldr	r0, [r7, #24]
 8028a5e:	69f9      	ldr	r1, [r7, #28]
 8028a60:	687a      	ldr	r2, [r7, #4]
 8028a62:	4623      	mov	r3, r4
 8028a64:	f7fe fb10 	bl	8027088 <ip_output_if>
 8028a68:	4603      	mov	r3, r0
 8028a6a:	75fb      	strb	r3, [r7, #23]
  }
  /* TODO: must this be increased even if error occured? */
  snmp_inc_udpoutdatagrams();

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8028a6c:	69ba      	ldr	r2, [r7, #24]
 8028a6e:	68bb      	ldr	r3, [r7, #8]
 8028a70:	429a      	cmp	r2, r3
 8028a72:	d004      	beq.n	8028a7e <udp_sendto_if+0x14a>
    /* free the header pbuf */
    pbuf_free(q);
 8028a74:	69b8      	ldr	r0, [r7, #24]
 8028a76:	f7ff fb95 	bl	80281a4 <pbuf_free>
    q = NULL;
 8028a7a:	2300      	movs	r3, #0
 8028a7c:	61bb      	str	r3, [r7, #24]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8028a7e:	7dfb      	ldrb	r3, [r7, #23]
 8028a80:	b25b      	sxtb	r3, r3
}
 8028a82:	4618      	mov	r0, r3
 8028a84:	3724      	adds	r7, #36	; 0x24
 8028a86:	46bd      	mov	sp, r7
 8028a88:	bd90      	pop	{r4, r7, pc}
 8028a8a:	bf00      	nop

08028a8c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
 8028a8c:	b580      	push	{r7, lr}
 8028a8e:	b086      	sub	sp, #24
 8028a90:	af00      	add	r7, sp, #0
 8028a92:	60f8      	str	r0, [r7, #12]
 8028a94:	60b9      	str	r1, [r7, #8]
 8028a96:	4613      	mov	r3, r2
 8028a98:	80fb      	strh	r3, [r7, #6]

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8028a9a:	2300      	movs	r3, #0
 8028a9c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8028a9e:	4b2a      	ldr	r3, [pc, #168]	; (8028b48 <udp_bind+0xbc>)
 8028aa0:	681b      	ldr	r3, [r3, #0]
 8028aa2:	617b      	str	r3, [r7, #20]
 8028aa4:	e024      	b.n	8028af0 <udp_bind+0x64>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8028aa6:	68fa      	ldr	r2, [r7, #12]
 8028aa8:	697b      	ldr	r3, [r7, #20]
 8028aaa:	429a      	cmp	r2, r3
 8028aac:	d102      	bne.n	8028ab4 <udp_bind+0x28>
      /* pcb may occur at most once in active list */
      LWIP_ASSERT("rebind == 0", rebind == 0);
      /* pcb already in list, just rebind */
      rebind = 1;
 8028aae:	2301      	movs	r3, #1
 8028ab0:	74fb      	strb	r3, [r7, #19]
 8028ab2:	e01a      	b.n	8028aea <udp_bind+0x5e>
             !ip_get_option(ipcb, SOF_REUSEADDR)) {
#else /* SO_REUSE */
    /* port matches that of PCB in list and REUSEADDR not set -> reject */
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
 8028ab4:	697b      	ldr	r3, [r7, #20]
 8028ab6:	8a5b      	ldrh	r3, [r3, #18]
 8028ab8:	88fa      	ldrh	r2, [r7, #6]
 8028aba:	429a      	cmp	r2, r3
 8028abc:	d115      	bne.n	8028aea <udp_bind+0x5e>
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
 8028abe:	697b      	ldr	r3, [r7, #20]
             !ip_get_option(ipcb, SOF_REUSEADDR)) {
#else /* SO_REUSE */
    /* port matches that of PCB in list and REUSEADDR not set -> reject */
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
 8028ac0:	2b00      	cmp	r3, #0
 8028ac2:	d010      	beq.n	8028ae6 <udp_bind+0x5a>
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
 8028ac4:	697b      	ldr	r3, [r7, #20]
 8028ac6:	681b      	ldr	r3, [r3, #0]
 8028ac8:	2b00      	cmp	r3, #0
 8028aca:	d00c      	beq.n	8028ae6 <udp_bind+0x5a>
 8028acc:	68bb      	ldr	r3, [r7, #8]
 8028ace:	2b00      	cmp	r3, #0
 8028ad0:	d009      	beq.n	8028ae6 <udp_bind+0x5a>
           ip_addr_isany(ipaddr) ||
 8028ad2:	68bb      	ldr	r3, [r7, #8]
 8028ad4:	681b      	ldr	r3, [r3, #0]
 8028ad6:	2b00      	cmp	r3, #0
 8028ad8:	d005      	beq.n	8028ae6 <udp_bind+0x5a>
           ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
 8028ada:	697b      	ldr	r3, [r7, #20]
 8028adc:	681a      	ldr	r2, [r3, #0]
 8028ade:	68bb      	ldr	r3, [r7, #8]
 8028ae0:	681b      	ldr	r3, [r3, #0]
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
           ip_addr_isany(ipaddr) ||
 8028ae2:	429a      	cmp	r2, r3
 8028ae4:	d101      	bne.n	8028aea <udp_bind+0x5e>
           ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
        /* other PCB already binds to this local IP and port */
        LWIP_DEBUGF(UDP_DEBUG,
                    ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
        return ERR_USE;
 8028ae6:	23f8      	movs	r3, #248	; 0xf8
 8028ae8:	e028      	b.n	8028b3c <udp_bind+0xb0>
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8028aea:	697b      	ldr	r3, [r7, #20]
 8028aec:	68db      	ldr	r3, [r3, #12]
 8028aee:	617b      	str	r3, [r7, #20]
 8028af0:	697b      	ldr	r3, [r7, #20]
 8028af2:	2b00      	cmp	r3, #0
 8028af4:	d1d7      	bne.n	8028aa6 <udp_bind+0x1a>
        return ERR_USE;
      }
    }
  }

  ip_addr_set(&pcb->local_ip, ipaddr);
 8028af6:	68bb      	ldr	r3, [r7, #8]
 8028af8:	2b00      	cmp	r3, #0
 8028afa:	d002      	beq.n	8028b02 <udp_bind+0x76>
 8028afc:	68bb      	ldr	r3, [r7, #8]
 8028afe:	681b      	ldr	r3, [r3, #0]
 8028b00:	e000      	b.n	8028b04 <udp_bind+0x78>
 8028b02:	2300      	movs	r3, #0
 8028b04:	68fa      	ldr	r2, [r7, #12]
 8028b06:	6013      	str	r3, [r2, #0]

  /* no port specified? */
  if (port == 0) {
 8028b08:	88fb      	ldrh	r3, [r7, #6]
 8028b0a:	2b00      	cmp	r3, #0
 8028b0c:	d108      	bne.n	8028b20 <udp_bind+0x94>
    port = udp_new_port();
 8028b0e:	f7ff fdc1 	bl	8028694 <udp_new_port>
 8028b12:	4603      	mov	r3, r0
 8028b14:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8028b16:	88fb      	ldrh	r3, [r7, #6]
 8028b18:	2b00      	cmp	r3, #0
 8028b1a:	d101      	bne.n	8028b20 <udp_bind+0x94>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8028b1c:	23f8      	movs	r3, #248	; 0xf8
 8028b1e:	e00d      	b.n	8028b3c <udp_bind+0xb0>
    }
  }
  pcb->local_port = port;
 8028b20:	68fb      	ldr	r3, [r7, #12]
 8028b22:	88fa      	ldrh	r2, [r7, #6]
 8028b24:	825a      	strh	r2, [r3, #18]
  snmp_insert_udpidx_tree(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8028b26:	7cfb      	ldrb	r3, [r7, #19]
 8028b28:	2b00      	cmp	r3, #0
 8028b2a:	d106      	bne.n	8028b3a <udp_bind+0xae>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8028b2c:	4b06      	ldr	r3, [pc, #24]	; (8028b48 <udp_bind+0xbc>)
 8028b2e:	681a      	ldr	r2, [r3, #0]
 8028b30:	68fb      	ldr	r3, [r7, #12]
 8028b32:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8028b34:	4a04      	ldr	r2, [pc, #16]	; (8028b48 <udp_bind+0xbc>)
 8028b36:	68fb      	ldr	r3, [r7, #12]
 8028b38:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
              ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));
  return ERR_OK;
 8028b3a:	2300      	movs	r3, #0
 8028b3c:	b25b      	sxtb	r3, r3
}
 8028b3e:	4618      	mov	r0, r3
 8028b40:	3718      	adds	r7, #24
 8028b42:	46bd      	mov	sp, r7
 8028b44:	bd80      	pop	{r7, pc}
 8028b46:	bf00      	nop
 8028b48:	1fff07b0 	.word	0x1fff07b0

08028b4c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8028b4c:	b580      	push	{r7, lr}
 8028b4e:	b082      	sub	sp, #8
 8028b50:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8028b52:	2001      	movs	r0, #1
 8028b54:	f7fe ffa4 	bl	8027aa0 <memp_malloc>
 8028b58:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8028b5a:	687b      	ldr	r3, [r7, #4]
 8028b5c:	2b00      	cmp	r3, #0
 8028b5e:	d007      	beq.n	8028b70 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8028b60:	6878      	ldr	r0, [r7, #4]
 8028b62:	2100      	movs	r1, #0
 8028b64:	2224      	movs	r2, #36	; 0x24
 8028b66:	f001 f93c 	bl	8029de2 <memset>
    pcb->ttl = UDP_TTL;
 8028b6a:	687b      	ldr	r3, [r7, #4]
 8028b6c:	22ff      	movs	r2, #255	; 0xff
 8028b6e:	729a      	strb	r2, [r3, #10]
  }
  return pcb;
 8028b70:	687b      	ldr	r3, [r7, #4]
}
 8028b72:	4618      	mov	r0, r3
 8028b74:	3708      	adds	r7, #8
 8028b76:	46bd      	mov	sp, r7
 8028b78:	bd80      	pop	{r7, pc}
 8028b7a:	bf00      	nop

08028b7c <ETH_LWIP_Init>:
  }
  return status;
}
#else
ETH_LWIP_STATUS_t ETH_LWIP_Init(ETH_LWIP_t* handle)
{
 8028b7c:	b590      	push	{r4, r7, lr}
 8028b7e:	b08b      	sub	sp, #44	; 0x2c
 8028b80:	af04      	add	r7, sp, #16
 8028b82:	6078      	str	r0, [r7, #4]
  ETH_LWIP_STATUS_t status = ETH_LWIP_STATUS_SUCCESS;
 8028b84:	2300      	movs	r3, #0
 8028b86:	75fb      	strb	r3, [r7, #23]

  struct ip_addr ipaddr;
  struct ip_addr netmask;
  struct ip_addr gw;

  if (handle->initialized == false)
 8028b88:	687b      	ldr	r3, [r7, #4]
 8028b8a:	7a1b      	ldrb	r3, [r3, #8]
 8028b8c:	f083 0301 	eor.w	r3, r3, #1
 8028b90:	b2db      	uxtb	r3, r3
 8028b92:	2b00      	cmp	r3, #0
 8028b94:	d032      	beq.n	8028bfc <ETH_LWIP_Init+0x80>
#if ((LWIP_DHCP == 1) || (LWIP_AUTOIP == 1))
    ipaddr.addr = 0;
    netmask.addr = 0;
    gw.addr = 0;
#else
    IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 8028b96:	4b1c      	ldr	r3, [pc, #112]	; (8028c08 <ETH_LWIP_Init+0x8c>)
 8028b98:	613b      	str	r3, [r7, #16]
    IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1 , NETMASK_ADDR2, NETMASK_ADDR3);
 8028b9a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8028b9e:	60fb      	str	r3, [r7, #12]
    IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 8028ba0:	4b1a      	ldr	r3, [pc, #104]	; (8028c0c <ETH_LWIP_Init+0x90>)
 8028ba2:	60bb      	str	r3, [r7, #8]
#endif
    /*Initialize SYSTIMER APP*/
    status = (ETH_LWIP_STATUS_t)SYSTIMER_Init(&ETH_SYSTIMER_NAME);
 8028ba4:	481a      	ldr	r0, [pc, #104]	; (8028c10 <ETH_LWIP_Init+0x94>)
 8028ba6:	f7fa fd6b 	bl	8023680 <SYSTIMER_Init>
 8028baa:	4603      	mov	r3, r0
 8028bac:	75fb      	strb	r3, [r7, #23]

    lwip_init();
 8028bae:	f7fe fcf5 	bl	802759c <lwip_init>

    /* Adds network interface to the netif_list */
    (void)netif_add(&xnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8028bb2:	f107 0110 	add.w	r1, r7, #16
 8028bb6:	f107 020c 	add.w	r2, r7, #12
 8028bba:	f107 0408 	add.w	r4, r7, #8
 8028bbe:	2300      	movs	r3, #0
 8028bc0:	9300      	str	r3, [sp, #0]
 8028bc2:	4b14      	ldr	r3, [pc, #80]	; (8028c14 <ETH_LWIP_Init+0x98>)
 8028bc4:	9301      	str	r3, [sp, #4]
 8028bc6:	4b14      	ldr	r3, [pc, #80]	; (8028c18 <ETH_LWIP_Init+0x9c>)
 8028bc8:	9302      	str	r3, [sp, #8]
 8028bca:	4814      	ldr	r0, [pc, #80]	; (8028c1c <ETH_LWIP_Init+0xa0>)
 8028bcc:	4623      	mov	r3, r4
 8028bce:	f7fe ffad 	bl	8027b2c <netif_add>

    /*  Registers the default network interface.*/
    netif_set_default(&xnetif);
 8028bd2:	4812      	ldr	r0, [pc, #72]	; (8028c1c <ETH_LWIP_Init+0xa0>)
 8028bd4:	f7ff f84e 	bl	8027c74 <netif_set_default>
    /* Initialize interface status change callback */
    netif_set_status_callback(&xnetif, ETH_NETIF_STATUS_CB_FUNCTION);
#endif

    /* device capabilities */
    xnetif.flags |= NETIF_FLAG_ETHARP;
 8028bd8:	4b10      	ldr	r3, [pc, #64]	; (8028c1c <ETH_LWIP_Init+0xa0>)
 8028bda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8028bde:	f043 0320 	orr.w	r3, r3, #32
 8028be2:	b2da      	uxtb	r2, r3
 8028be4:	4b0d      	ldr	r3, [pc, #52]	; (8028c1c <ETH_LWIP_Init+0xa0>)
 8028be6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#if LWIP_DHCP == 1
    /* Enable DHCP flag if DHCP is configured*/
    xnetif.flags |= NETIF_FLAG_DHCP;
#endif

    handle->initialized = true;
 8028bea:	687b      	ldr	r3, [r7, #4]
 8028bec:	2201      	movs	r2, #1
 8028bee:	721a      	strb	r2, [r3, #8]
    handle->eth_mac = &eth_mac;
 8028bf0:	687b      	ldr	r3, [r7, #4]
 8028bf2:	4a0b      	ldr	r2, [pc, #44]	; (8028c20 <ETH_LWIP_Init+0xa4>)
 8028bf4:	601a      	str	r2, [r3, #0]
    handle->xnetif = &xnetif;
 8028bf6:	687b      	ldr	r3, [r7, #4]
 8028bf8:	4a08      	ldr	r2, [pc, #32]	; (8028c1c <ETH_LWIP_Init+0xa0>)
 8028bfa:	605a      	str	r2, [r3, #4]
  }
  return status;
 8028bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8028bfe:	4618      	mov	r0, r3
 8028c00:	371c      	adds	r7, #28
 8028c02:	46bd      	mov	sp, r7
 8028c04:	bd90      	pop	{r4, r7, pc}
 8028c06:	bf00      	nop
 8028c08:	190a0a0a 	.word	0x190a0a0a
 8028c0c:	4b0a0a0a 	.word	0x4b0a0a0a
 8028c10:	1ffe8b6c 	.word	0x1ffe8b6c
 8028c14:	08025719 	.word	0x08025719
 8028c18:	080263e5 	.word	0x080263e5
 8028c1c:	1ffe8a60 	.word	0x1ffe8a60
 8028c20:	1ffe8a30 	.word	0x1ffe8a30

08028c24 <XMC_ETH_PHY_IsDeviceIdValid>:
 * API IMPLEMENTATION
 *******************************************************************************/

 /* Check if the device identifier is valid */
static int32_t XMC_ETH_PHY_IsDeviceIdValid(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 8028c24:	b580      	push	{r7, lr}
 8028c26:	b084      	sub	sp, #16
 8028c28:	af00      	add	r7, sp, #0
 8028c2a:	6078      	str	r0, [r7, #4]
 8028c2c:	460b      	mov	r3, r1
 8028c2e:	70fb      	strb	r3, [r7, #3]
  uint16_t phy_id1;
  uint16_t phy_id2;
  XMC_ETH_PHY_STATUS_t status;

  /* Check Device Identification. */
  if ((XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR1, &phy_id1) == XMC_ETH_MAC_STATUS_OK) &&
 8028c30:	78fa      	ldrb	r2, [r7, #3]
 8028c32:	f107 030c 	add.w	r3, r7, #12
 8028c36:	6878      	ldr	r0, [r7, #4]
 8028c38:	4611      	mov	r1, r2
 8028c3a:	2202      	movs	r2, #2
 8028c3c:	f7f9 f960 	bl	8021f00 <XMC_ETH_MAC_ReadPhy>
 8028c40:	4603      	mov	r3, r0
 8028c42:	2b00      	cmp	r3, #0
 8028c44:	d11b      	bne.n	8028c7e <XMC_ETH_PHY_IsDeviceIdValid+0x5a>
      (XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR2, &phy_id2) == XMC_ETH_MAC_STATUS_OK))
 8028c46:	78fa      	ldrb	r2, [r7, #3]
 8028c48:	f107 030a 	add.w	r3, r7, #10
 8028c4c:	6878      	ldr	r0, [r7, #4]
 8028c4e:	4611      	mov	r1, r2
 8028c50:	2203      	movs	r2, #3
 8028c52:	f7f9 f955 	bl	8021f00 <XMC_ETH_MAC_ReadPhy>
 8028c56:	4603      	mov	r3, r0
  uint16_t phy_id1;
  uint16_t phy_id2;
  XMC_ETH_PHY_STATUS_t status;

  /* Check Device Identification. */
  if ((XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR1, &phy_id1) == XMC_ETH_MAC_STATUS_OK) &&
 8028c58:	2b00      	cmp	r3, #0
 8028c5a:	d110      	bne.n	8028c7e <XMC_ETH_PHY_IsDeviceIdValid+0x5a>
      (XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR2, &phy_id2) == XMC_ETH_MAC_STATUS_OK))
  {
    if ((phy_id1 == PHY_ID1) && ((phy_id2 & (uint16_t)0xfff0) == PHY_ID2))
 8028c5c:	89bb      	ldrh	r3, [r7, #12]
 8028c5e:	2b22      	cmp	r3, #34	; 0x22
 8028c60:	d10a      	bne.n	8028c78 <XMC_ETH_PHY_IsDeviceIdValid+0x54>
 8028c62:	897b      	ldrh	r3, [r7, #10]
 8028c64:	461a      	mov	r2, r3
 8028c66:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8028c6a:	4013      	ands	r3, r2
 8028c6c:	f5b3 5fab 	cmp.w	r3, #5472	; 0x1560
 8028c70:	d102      	bne.n	8028c78 <XMC_ETH_PHY_IsDeviceIdValid+0x54>
    {
      status = XMC_ETH_PHY_STATUS_OK;
 8028c72:	2300      	movs	r3, #0
 8028c74:	73fb      	strb	r3, [r7, #15]

  /* Check Device Identification. */
  if ((XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR1, &phy_id1) == XMC_ETH_MAC_STATUS_OK) &&
      (XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR2, &phy_id2) == XMC_ETH_MAC_STATUS_OK))
  {
    if ((phy_id1 == PHY_ID1) && ((phy_id2 & (uint16_t)0xfff0) == PHY_ID2))
 8028c76:	e004      	b.n	8028c82 <XMC_ETH_PHY_IsDeviceIdValid+0x5e>
    {
      status = XMC_ETH_PHY_STATUS_OK;
    }
    else
    {
      status = XMC_ETH_PHY_STATUS_ERROR_DEVICE_ID;
 8028c78:	2303      	movs	r3, #3
 8028c7a:	73fb      	strb	r3, [r7, #15]

  /* Check Device Identification. */
  if ((XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR1, &phy_id1) == XMC_ETH_MAC_STATUS_OK) &&
      (XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR2, &phy_id2) == XMC_ETH_MAC_STATUS_OK))
  {
    if ((phy_id1 == PHY_ID1) && ((phy_id2 & (uint16_t)0xfff0) == PHY_ID2))
 8028c7c:	e001      	b.n	8028c82 <XMC_ETH_PHY_IsDeviceIdValid+0x5e>
      status = XMC_ETH_PHY_STATUS_ERROR_DEVICE_ID;
    }
  }
  else
  {
    status = XMC_ETH_PHY_STATUS_ERROR_TIMEOUT;
 8028c7e:	2304      	movs	r3, #4
 8028c80:	73fb      	strb	r3, [r7, #15]
  }

  return (int32_t)status;
 8028c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8028c84:	4618      	mov	r0, r3
 8028c86:	3710      	adds	r7, #16
 8028c88:	46bd      	mov	sp, r7
 8028c8a:	bd80      	pop	{r7, pc}

08028c8c <XMC_ETH_PHY_Init>:

/* PHY initialize */
int32_t XMC_ETH_PHY_Init(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr, const XMC_ETH_PHY_CONFIG_t *const config)
{
 8028c8c:	b580      	push	{r7, lr}
 8028c8e:	b086      	sub	sp, #24
 8028c90:	af00      	add	r7, sp, #0
 8028c92:	60f8      	str	r0, [r7, #12]
 8028c94:	460b      	mov	r3, r1
 8028c96:	607a      	str	r2, [r7, #4]
 8028c98:	72fb      	strb	r3, [r7, #11]
  int32_t status;
  uint16_t reg_bmcr;

  status = XMC_ETH_PHY_IsDeviceIdValid(eth_mac, phy_addr);
 8028c9a:	7afb      	ldrb	r3, [r7, #11]
 8028c9c:	68f8      	ldr	r0, [r7, #12]
 8028c9e:	4619      	mov	r1, r3
 8028ca0:	f7ff ffc0 	bl	8028c24 <XMC_ETH_PHY_IsDeviceIdValid>
 8028ca4:	6178      	str	r0, [r7, #20]

  if (status == (int32_t)XMC_ETH_PHY_STATUS_OK)
 8028ca6:	697b      	ldr	r3, [r7, #20]
 8028ca8:	2b00      	cmp	r3, #0
 8028caa:	d135      	bne.n	8028d18 <XMC_ETH_PHY_Init+0x8c>
  {
    status = XMC_ETH_PHY_Reset(eth_mac, phy_addr);
 8028cac:	7afb      	ldrb	r3, [r7, #11]
 8028cae:	68f8      	ldr	r0, [r7, #12]
 8028cb0:	4619      	mov	r1, r3
 8028cb2:	f000 f837 	bl	8028d24 <XMC_ETH_PHY_Reset>
 8028cb6:	6178      	str	r0, [r7, #20]
    
    if (status == (int32_t)XMC_ETH_PHY_STATUS_OK)
 8028cb8:	697b      	ldr	r3, [r7, #20]
 8028cba:	2b00      	cmp	r3, #0
 8028cbc:	d12c      	bne.n	8028d18 <XMC_ETH_PHY_Init+0x8c>
    {
      reg_bmcr = 0U;
 8028cbe:	2300      	movs	r3, #0
 8028cc0:	827b      	strh	r3, [r7, #18]
      if (config->speed == XMC_ETH_LINK_SPEED_100M)
 8028cc2:	687b      	ldr	r3, [r7, #4]
 8028cc4:	885b      	ldrh	r3, [r3, #2]
 8028cc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8028cca:	d103      	bne.n	8028cd4 <XMC_ETH_PHY_Init+0x48>
      {
        reg_bmcr |= BMCR_SPEED_SEL;
 8028ccc:	8a7b      	ldrh	r3, [r7, #18]
 8028cce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8028cd2:	827b      	strh	r3, [r7, #18]
      }

      if (config->duplex == XMC_ETH_LINK_DUPLEX_FULL)
 8028cd4:	687b      	ldr	r3, [r7, #4]
 8028cd6:	889b      	ldrh	r3, [r3, #4]
 8028cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8028cdc:	d103      	bne.n	8028ce6 <XMC_ETH_PHY_Init+0x5a>
      {
        reg_bmcr |= BMCR_DUPLEX;
 8028cde:	8a7b      	ldrh	r3, [r7, #18]
 8028ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8028ce4:	827b      	strh	r3, [r7, #18]
      }

      if (config->enable_auto_negotiate == true)
 8028ce6:	687b      	ldr	r3, [r7, #4]
 8028ce8:	799b      	ldrb	r3, [r3, #6]
 8028cea:	2b00      	cmp	r3, #0
 8028cec:	d003      	beq.n	8028cf6 <XMC_ETH_PHY_Init+0x6a>
      {
        reg_bmcr |= BMCR_ANEG_EN;
 8028cee:	8a7b      	ldrh	r3, [r7, #18]
 8028cf0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8028cf4:	827b      	strh	r3, [r7, #18]
      }

      if (config->enable_loop_back == true)
 8028cf6:	687b      	ldr	r3, [r7, #4]
 8028cf8:	79db      	ldrb	r3, [r3, #7]
 8028cfa:	2b00      	cmp	r3, #0
 8028cfc:	d003      	beq.n	8028d06 <XMC_ETH_PHY_Init+0x7a>
      {
        reg_bmcr |= BMCR_LOOPBACK;
 8028cfe:	8a7b      	ldrh	r3, [r7, #18]
 8028d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8028d04:	827b      	strh	r3, [r7, #18]
      }

      status = (int32_t)XMC_ETH_MAC_WritePhy(eth_mac, phy_addr, REG_BMCR, reg_bmcr);
 8028d06:	7afa      	ldrb	r2, [r7, #11]
 8028d08:	8a7b      	ldrh	r3, [r7, #18]
 8028d0a:	68f8      	ldr	r0, [r7, #12]
 8028d0c:	4611      	mov	r1, r2
 8028d0e:	2200      	movs	r2, #0
 8028d10:	f7f9 f930 	bl	8021f74 <XMC_ETH_MAC_WritePhy>
 8028d14:	4603      	mov	r3, r0
 8028d16:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8028d18:	697b      	ldr	r3, [r7, #20]
}
 8028d1a:	4618      	mov	r0, r3
 8028d1c:	3718      	adds	r7, #24
 8028d1e:	46bd      	mov	sp, r7
 8028d20:	bd80      	pop	{r7, pc}
 8028d22:	bf00      	nop

08028d24 <XMC_ETH_PHY_Reset>:

/* Reset */
int32_t XMC_ETH_PHY_Reset(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 8028d24:	b580      	push	{r7, lr}
 8028d26:	b084      	sub	sp, #16
 8028d28:	af00      	add	r7, sp, #0
 8028d2a:	6078      	str	r0, [r7, #4]
 8028d2c:	460b      	mov	r3, r1
 8028d2e:	70fb      	strb	r3, [r7, #3]
  int32_t status;
  uint16_t reg_bmcr;

  /* Reset PHY*/
  status = (int32_t)XMC_ETH_MAC_WritePhy(eth_mac, phy_addr, REG_BMCR, BMCR_RESET);
 8028d30:	78fb      	ldrb	r3, [r7, #3]
 8028d32:	6878      	ldr	r0, [r7, #4]
 8028d34:	4619      	mov	r1, r3
 8028d36:	2200      	movs	r2, #0
 8028d38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8028d3c:	f7f9 f91a 	bl	8021f74 <XMC_ETH_MAC_WritePhy>
 8028d40:	4603      	mov	r3, r0
 8028d42:	60fb      	str	r3, [r7, #12]
  if (status == (int32_t)XMC_ETH_PHY_STATUS_OK)
 8028d44:	68fb      	ldr	r3, [r7, #12]
 8028d46:	2b00      	cmp	r3, #0
 8028d48:	d10e      	bne.n	8028d68 <XMC_ETH_PHY_Reset+0x44>
  {      
    /* Wait for the reset to complete */
    do 
    {
      status = XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_BMCR, &reg_bmcr);
 8028d4a:	78fa      	ldrb	r2, [r7, #3]
 8028d4c:	f107 030a 	add.w	r3, r7, #10
 8028d50:	6878      	ldr	r0, [r7, #4]
 8028d52:	4611      	mov	r1, r2
 8028d54:	2200      	movs	r2, #0
 8028d56:	f7f9 f8d3 	bl	8021f00 <XMC_ETH_MAC_ReadPhy>
 8028d5a:	4603      	mov	r3, r0
 8028d5c:	60fb      	str	r3, [r7, #12]
    } while ((reg_bmcr & BMCR_RESET) != 0);
 8028d5e:	897b      	ldrh	r3, [r7, #10]
 8028d60:	b29b      	uxth	r3, r3
 8028d62:	b21b      	sxth	r3, r3
 8028d64:	2b00      	cmp	r3, #0
 8028d66:	dbf0      	blt.n	8028d4a <XMC_ETH_PHY_Reset+0x26>
  }
    
  return status;
 8028d68:	68fb      	ldr	r3, [r7, #12]
}
 8028d6a:	4618      	mov	r0, r3
 8028d6c:	3710      	adds	r7, #16
 8028d6e:	46bd      	mov	sp, r7
 8028d70:	bd80      	pop	{r7, pc}
 8028d72:	bf00      	nop

08028d74 <XMC_ETH_PHY_GetLinkStatus>:
  return status;
}

/* Get link status */
XMC_ETH_LINK_STATUS_t XMC_ETH_PHY_GetLinkStatus(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 8028d74:	b580      	push	{r7, lr}
 8028d76:	b084      	sub	sp, #16
 8028d78:	af00      	add	r7, sp, #0
 8028d7a:	6078      	str	r0, [r7, #4]
 8028d7c:	460b      	mov	r3, r1
 8028d7e:	70fb      	strb	r3, [r7, #3]
  uint16_t val;

  XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_BMSR, &val);
 8028d80:	78fa      	ldrb	r2, [r7, #3]
 8028d82:	f107 030e 	add.w	r3, r7, #14
 8028d86:	6878      	ldr	r0, [r7, #4]
 8028d88:	4611      	mov	r1, r2
 8028d8a:	2201      	movs	r2, #1
 8028d8c:	f7f9 f8b8 	bl	8021f00 <XMC_ETH_MAC_ReadPhy>

  return (XMC_ETH_LINK_STATUS_t)((val & BMSR_LINK_STAT) ? XMC_ETH_LINK_STATUS_UP : XMC_ETH_LINK_STATUS_DOWN);
 8028d90:	89fb      	ldrh	r3, [r7, #14]
 8028d92:	f003 0304 	and.w	r3, r3, #4
 8028d96:	2b00      	cmp	r3, #0
 8028d98:	d001      	beq.n	8028d9e <XMC_ETH_PHY_GetLinkStatus+0x2a>
 8028d9a:	2301      	movs	r3, #1
 8028d9c:	e000      	b.n	8028da0 <XMC_ETH_PHY_GetLinkStatus+0x2c>
 8028d9e:	2300      	movs	r3, #0
}
 8028da0:	4618      	mov	r0, r3
 8028da2:	3710      	adds	r7, #16
 8028da4:	46bd      	mov	sp, r7
 8028da6:	bd80      	pop	{r7, pc}

08028da8 <XMC_ETH_PHY_GetLinkSpeed>:

/* Get link speed */
XMC_ETH_LINK_SPEED_t XMC_ETH_PHY_GetLinkSpeed(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 8028da8:	b580      	push	{r7, lr}
 8028daa:	b084      	sub	sp, #16
 8028dac:	af00      	add	r7, sp, #0
 8028dae:	6078      	str	r0, [r7, #4]
 8028db0:	460b      	mov	r3, r1
 8028db2:	70fb      	strb	r3, [r7, #3]
  uint16_t val;

  XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYCTRL1, &val);
 8028db4:	78fa      	ldrb	r2, [r7, #3]
 8028db6:	f107 030e 	add.w	r3, r7, #14
 8028dba:	6878      	ldr	r0, [r7, #4]
 8028dbc:	4611      	mov	r1, r2
 8028dbe:	221e      	movs	r2, #30
 8028dc0:	f7f9 f89e 	bl	8021f00 <XMC_ETH_MAC_ReadPhy>

  return (XMC_ETH_LINK_SPEED_t)(((val & PHYCTRL1_OPMODE_SPEED) - 1U) ? XMC_ETH_LINK_SPEED_100M : XMC_ETH_LINK_SPEED_10M);
 8028dc4:	89fb      	ldrh	r3, [r7, #14]
 8028dc6:	f003 0303 	and.w	r3, r3, #3
 8028dca:	2b01      	cmp	r3, #1
 8028dcc:	d002      	beq.n	8028dd4 <XMC_ETH_PHY_GetLinkSpeed+0x2c>
 8028dce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8028dd2:	e000      	b.n	8028dd6 <XMC_ETH_PHY_GetLinkSpeed+0x2e>
 8028dd4:	2300      	movs	r3, #0
}
 8028dd6:	4618      	mov	r0, r3
 8028dd8:	3710      	adds	r7, #16
 8028dda:	46bd      	mov	sp, r7
 8028ddc:	bd80      	pop	{r7, pc}
 8028dde:	bf00      	nop

08028de0 <XMC_ETH_PHY_GetLinkDuplex>:

/* Get link duplex settings */
XMC_ETH_LINK_DUPLEX_t XMC_ETH_PHY_GetLinkDuplex(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 8028de0:	b580      	push	{r7, lr}
 8028de2:	b084      	sub	sp, #16
 8028de4:	af00      	add	r7, sp, #0
 8028de6:	6078      	str	r0, [r7, #4]
 8028de8:	460b      	mov	r3, r1
 8028dea:	70fb      	strb	r3, [r7, #3]
  uint16_t val;

  XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYCTRL1, &val);
 8028dec:	78fa      	ldrb	r2, [r7, #3]
 8028dee:	f107 030e 	add.w	r3, r7, #14
 8028df2:	6878      	ldr	r0, [r7, #4]
 8028df4:	4611      	mov	r1, r2
 8028df6:	221e      	movs	r2, #30
 8028df8:	f7f9 f882 	bl	8021f00 <XMC_ETH_MAC_ReadPhy>

  return (XMC_ETH_LINK_DUPLEX_t)((val & PHYCTRL1_OPMODE_DUPLEX) ? XMC_ETH_LINK_DUPLEX_FULL : XMC_ETH_LINK_DUPLEX_HALF);
 8028dfc:	89fb      	ldrh	r3, [r7, #14]
 8028dfe:	f003 0304 	and.w	r3, r3, #4
 8028e02:	2b00      	cmp	r3, #0
 8028e04:	d002      	beq.n	8028e0c <XMC_ETH_PHY_GetLinkDuplex+0x2c>
 8028e06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8028e0a:	e000      	b.n	8028e0e <XMC_ETH_PHY_GetLinkDuplex+0x2e>
 8028e0c:	2300      	movs	r3, #0
}
 8028e0e:	4618      	mov	r0, r3
 8028e10:	3710      	adds	r7, #16
 8028e12:	46bd      	mov	sp, r7
 8028e14:	bd80      	pop	{r7, pc}
 8028e16:	bf00      	nop

08028e18 <XMC_ETH_PHY_IsAutonegotiationCompleted>:

bool XMC_ETH_PHY_IsAutonegotiationCompleted(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 8028e18:	b580      	push	{r7, lr}
 8028e1a:	b084      	sub	sp, #16
 8028e1c:	af00      	add	r7, sp, #0
 8028e1e:	6078      	str	r0, [r7, #4]
 8028e20:	460b      	mov	r3, r1
 8028e22:	70fb      	strb	r3, [r7, #3]
  uint16_t val;

  XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_BMSR, &val);
 8028e24:	78fa      	ldrb	r2, [r7, #3]
 8028e26:	f107 030e 	add.w	r3, r7, #14
 8028e2a:	6878      	ldr	r0, [r7, #4]
 8028e2c:	4611      	mov	r1, r2
 8028e2e:	2201      	movs	r2, #1
 8028e30:	f7f9 f866 	bl	8021f00 <XMC_ETH_MAC_ReadPhy>
  return ((val & BMSR_ANEG_COMPL) == BMSR_ANEG_COMPL);
 8028e34:	89fb      	ldrh	r3, [r7, #14]
 8028e36:	f003 0320 	and.w	r3, r3, #32
 8028e3a:	2b00      	cmp	r3, #0
 8028e3c:	bf14      	ite	ne
 8028e3e:	2301      	movne	r3, #1
 8028e40:	2300      	moveq	r3, #0
 8028e42:	b2db      	uxtb	r3, r3
}
 8028e44:	4618      	mov	r0, r3
 8028e46:	3710      	adds	r7, #16
 8028e48:	46bd      	mov	sp, r7
 8028e4a:	bd80      	pop	{r7, pc}

08028e4c <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8028e4c:	b580      	push	{r7, lr}
 8028e4e:	b082      	sub	sp, #8
 8028e50:	af00      	add	r7, sp, #0
 8028e52:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8028e54:	687b      	ldr	r3, [r7, #4]
 8028e56:	6819      	ldr	r1, [r3, #0]
 8028e58:	687b      	ldr	r3, [r7, #4]
 8028e5a:	7c1a      	ldrb	r2, [r3, #16]
 8028e5c:	687b      	ldr	r3, [r7, #4]
 8028e5e:	3304      	adds	r3, #4
 8028e60:	4608      	mov	r0, r1
 8028e62:	4611      	mov	r1, r2
 8028e64:	461a      	mov	r2, r3
 8028e66:	f7f7 fa41 	bl	80202ec <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8028e6a:	687b      	ldr	r3, [r7, #4]
 8028e6c:	6819      	ldr	r1, [r3, #0]
 8028e6e:	687b      	ldr	r3, [r7, #4]
 8028e70:	7c1a      	ldrb	r2, [r3, #16]
 8028e72:	687b      	ldr	r3, [r7, #4]
 8028e74:	7c5b      	ldrb	r3, [r3, #17]
 8028e76:	4608      	mov	r0, r1
 8028e78:	4611      	mov	r1, r2
 8028e7a:	461a      	mov	r2, r3
 8028e7c:	f7f9 fa08 	bl	8022290 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8028e80:	2300      	movs	r3, #0
}
 8028e82:	4618      	mov	r0, r3
 8028e84:	3708      	adds	r7, #8
 8028e86:	46bd      	mov	sp, r7
 8028e88:	bd80      	pop	{r7, pc}
 8028e8a:	bf00      	nop

08028e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8028e8c:	b480      	push	{r7}
 8028e8e:	b085      	sub	sp, #20
 8028e90:	af00      	add	r7, sp, #0
 8028e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8028e94:	687b      	ldr	r3, [r7, #4]
 8028e96:	f003 0307 	and.w	r3, r3, #7
 8028e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8028e9c:	4b0c      	ldr	r3, [pc, #48]	; (8028ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8028e9e:	68db      	ldr	r3, [r3, #12]
 8028ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8028ea2:	68ba      	ldr	r2, [r7, #8]
 8028ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8028ea8:	4013      	ands	r3, r2
 8028eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8028eac:	68fb      	ldr	r3, [r7, #12]
 8028eae:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8028eb0:	68bb      	ldr	r3, [r7, #8]
 8028eb2:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8028eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8028eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8028ebc:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8028ebe:	4a04      	ldr	r2, [pc, #16]	; (8028ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8028ec0:	68bb      	ldr	r3, [r7, #8]
 8028ec2:	60d3      	str	r3, [r2, #12]
}
 8028ec4:	3714      	adds	r7, #20
 8028ec6:	46bd      	mov	sp, r7
 8028ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028ecc:	4770      	bx	lr
 8028ece:	bf00      	nop
 8028ed0:	e000ed00 	.word	0xe000ed00

08028ed4 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8028ed4:	b580      	push	{r7, lr}
 8028ed6:	b082      	sub	sp, #8
 8028ed8:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8028eda:	2001      	movs	r0, #1
 8028edc:	f7ff ffd6 	bl	8028e8c <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8028ee0:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8028ee2:	4b21      	ldr	r3, [pc, #132]	; (8028f68 <SystemCoreSetup+0x94>)
 8028ee4:	4a21      	ldr	r2, [pc, #132]	; (8028f6c <SystemCoreSetup+0x98>)
 8028ee6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8028ee8:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8028eec:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8028eee:	4a1e      	ldr	r2, [pc, #120]	; (8028f68 <SystemCoreSetup+0x94>)
 8028ef0:	4b1d      	ldr	r3, [pc, #116]	; (8028f68 <SystemCoreSetup+0x94>)
 8028ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8028ef6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8028efa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8028efe:	4b1c      	ldr	r3, [pc, #112]	; (8028f70 <SystemCoreSetup+0x9c>)
 8028f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8028f04:	3314      	adds	r3, #20
 8028f06:	681b      	ldr	r3, [r3, #0]
 8028f08:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8028f0a:	687b      	ldr	r3, [r7, #4]
 8028f0c:	f023 030f 	bic.w	r3, r3, #15
 8028f10:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8028f12:	687b      	ldr	r3, [r7, #4]
 8028f14:	f043 0304 	orr.w	r3, r3, #4
 8028f18:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8028f1a:	4b15      	ldr	r3, [pc, #84]	; (8028f70 <SystemCoreSetup+0x9c>)
 8028f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8028f20:	3314      	adds	r3, #20
 8028f22:	687a      	ldr	r2, [r7, #4]
 8028f24:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8028f26:	4a10      	ldr	r2, [pc, #64]	; (8028f68 <SystemCoreSetup+0x94>)
 8028f28:	4b0f      	ldr	r3, [pc, #60]	; (8028f68 <SystemCoreSetup+0x94>)
 8028f2a:	695b      	ldr	r3, [r3, #20]
 8028f2c:	f023 0310 	bic.w	r3, r3, #16
 8028f30:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8028f32:	4a0d      	ldr	r2, [pc, #52]	; (8028f68 <SystemCoreSetup+0x94>)
 8028f34:	4b0c      	ldr	r3, [pc, #48]	; (8028f68 <SystemCoreSetup+0x94>)
 8028f36:	695b      	ldr	r3, [r3, #20]
 8028f38:	f023 0308 	bic.w	r3, r3, #8
 8028f3c:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8028f3e:	4a0a      	ldr	r2, [pc, #40]	; (8028f68 <SystemCoreSetup+0x94>)
 8028f40:	4b09      	ldr	r3, [pc, #36]	; (8028f68 <SystemCoreSetup+0x94>)
 8028f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8028f48:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8028f4a:	4a07      	ldr	r2, [pc, #28]	; (8028f68 <SystemCoreSetup+0x94>)
 8028f4c:	4b06      	ldr	r3, [pc, #24]	; (8028f68 <SystemCoreSetup+0x94>)
 8028f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028f50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8028f54:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8028f56:	4a04      	ldr	r2, [pc, #16]	; (8028f68 <SystemCoreSetup+0x94>)
 8028f58:	4b03      	ldr	r3, [pc, #12]	; (8028f68 <SystemCoreSetup+0x94>)
 8028f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028f5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8028f60:	6253      	str	r3, [r2, #36]	; 0x24
}
 8028f62:	3708      	adds	r7, #8
 8028f64:	46bd      	mov	sp, r7
 8028f66:	bd80      	pop	{r7, pc}
 8028f68:	e000ed00 	.word	0xe000ed00
 8028f6c:	08000000 	.word	0x08000000
 8028f70:	58001000 	.word	0x58001000

08028f74 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8028f74:	b480      	push	{r7}
 8028f76:	b085      	sub	sp, #20
 8028f78:	af00      	add	r7, sp, #0
 8028f7a:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8028f7c:	2300      	movs	r3, #0
 8028f7e:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8028f80:	687b      	ldr	r3, [r7, #4]
 8028f82:	2201      	movs	r2, #1
 8028f84:	701a      	strb	r2, [r3, #0]

  return (status);
 8028f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8028f88:	4618      	mov	r0, r3
 8028f8a:	3714      	adds	r7, #20
 8028f8c:	46bd      	mov	sp, r7
 8028f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028f92:	4770      	bx	lr

08028f94 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8028f94:	b480      	push	{r7}
 8028f96:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8028f98:	4b02      	ldr	r3, [pc, #8]	; (8028fa4 <OSCHP_GetFrequency+0x10>)
}
 8028f9a:	4618      	mov	r0, r3
 8028f9c:	46bd      	mov	sp, r7
 8028f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028fa2:	4770      	bx	lr
 8028fa4:	00b71b00 	.word	0x00b71b00

08028fa8 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8028fa8:	b5b0      	push	{r4, r5, r7, lr}
 8028faa:	b086      	sub	sp, #24
 8028fac:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8028fae:	4b12      	ldr	r3, [pc, #72]	; (8028ff8 <SystemCoreClockSetup+0x50>)
 8028fb0:	1d3c      	adds	r4, r7, #4
 8028fb2:	461d      	mov	r5, r3
 8028fb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8028fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8028fb8:	682b      	ldr	r3, [r5, #0]
 8028fba:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8028fbc:	1d3b      	adds	r3, r7, #4
 8028fbe:	4618      	mov	r0, r3
 8028fc0:	f7f7 fa8e 	bl	80204e0 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8028fc4:	2000      	movs	r0, #0
 8028fc6:	f7f7 fbb3 	bl	8020730 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8028fca:	2000      	movs	r0, #0
 8028fcc:	f7f7 fb68 	bl	80206a0 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8028fd0:	2004      	movs	r0, #4
 8028fd2:	f7f7 fc39 	bl	8020848 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8028fd6:	2001      	movs	r0, #1
 8028fd8:	2120      	movs	r1, #32
 8028fda:	f7f7 fcc1 	bl	8020960 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8028fde:	2000      	movs	r0, #0
 8028fe0:	f7f7 fb72 	bl	80206c8 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8028fe4:	2001      	movs	r0, #1
 8028fe6:	f7f7 fc57 	bl	8020898 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8028fea:	2001      	movs	r0, #1
 8028fec:	f7f7 fc40 	bl	8020870 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8028ff0:	3718      	adds	r7, #24
 8028ff2:	46bd      	mov	sp, r7
 8028ff4:	bdb0      	pop	{r4, r5, r7, pc}
 8028ff6:	bf00      	nop
 8028ff8:	0802a384 	.word	0x0802a384

08028ffc <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 8028ffc:	b580      	push	{r7, lr}
 8028ffe:	b082      	sub	sp, #8
 8029000:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8029002:	2300      	movs	r3, #0
 8029004:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8029006:	4839      	ldr	r0, [pc, #228]	; (80290ec <DAVE_Init+0xf0>)
 8029008:	f7ff ffb4 	bl	8028f74 <CLOCK_XMC4_Init>
 802900c:	4603      	mov	r3, r0
 802900e:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8029010:	79fb      	ldrb	r3, [r7, #7]
 8029012:	2b00      	cmp	r3, #0
 8029014:	d104      	bne.n	8029020 <DAVE_Init+0x24>
  {
	 /**  Initialization of ETH_LWIP APP instance ETH_LWIP_0 */
	 init_status = (DAVE_STATUS_t)ETH_LWIP_Init(&ETH_LWIP_0); 
 8029016:	4836      	ldr	r0, [pc, #216]	; (80290f0 <DAVE_Init+0xf4>)
 8029018:	f7ff fdb0 	bl	8028b7c <ETH_LWIP_Init>
 802901c:	4603      	mov	r3, r0
 802901e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8029020:	79fb      	ldrb	r3, [r7, #7]
 8029022:	2b00      	cmp	r3, #0
 8029024:	d104      	bne.n	8029030 <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED_INDICATOR */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_INDICATOR); 
 8029026:	4833      	ldr	r0, [pc, #204]	; (80290f4 <DAVE_Init+0xf8>)
 8029028:	f7ff ff10 	bl	8028e4c <DIGITAL_IO_Init>
 802902c:	4603      	mov	r3, r0
 802902e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8029030:	79fb      	ldrb	r3, [r7, #7]
 8029032:	2b00      	cmp	r3, #0
 8029034:	d104      	bne.n	8029040 <DAVE_Init+0x44>
  {
	 /**  Initialization of SPI_MASTER APP instance SPI_MASTER_ADC */
	 init_status = (DAVE_STATUS_t)SPI_MASTER_Init(&SPI_MASTER_ADC); 
 8029036:	4830      	ldr	r0, [pc, #192]	; (80290f8 <DAVE_Init+0xfc>)
 8029038:	f7fa fcac 	bl	8023994 <SPI_MASTER_Init>
 802903c:	4603      	mov	r3, r0
 802903e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8029040:	79fb      	ldrb	r3, [r7, #7]
 8029042:	2b00      	cmp	r3, #0
 8029044:	d104      	bne.n	8029050 <DAVE_Init+0x54>
  {
	 /**  Initialization of TIMER APP instance TIMER_TC */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_TC); 
 8029046:	482d      	ldr	r0, [pc, #180]	; (80290fc <DAVE_Init+0x100>)
 8029048:	f7f9 ffe4 	bl	8023014 <TIMER_Init>
 802904c:	4603      	mov	r3, r0
 802904e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8029050:	79fb      	ldrb	r3, [r7, #7]
 8029052:	2b00      	cmp	r3, #0
 8029054:	d104      	bne.n	8029060 <DAVE_Init+0x64>
  {
	 /**  Initialization of TIMER APP instance TIMER_TIMESTAMP */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_TIMESTAMP); 
 8029056:	482a      	ldr	r0, [pc, #168]	; (8029100 <DAVE_Init+0x104>)
 8029058:	f7f9 ffdc 	bl	8023014 <TIMER_Init>
 802905c:	4603      	mov	r3, r0
 802905e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8029060:	79fb      	ldrb	r3, [r7, #7]
 8029062:	2b00      	cmp	r3, #0
 8029064:	d104      	bne.n	8029070 <DAVE_Init+0x74>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance PIN_INTERRUPT_ADC0 */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&PIN_INTERRUPT_ADC0); 
 8029066:	4827      	ldr	r0, [pc, #156]	; (8029104 <DAVE_Init+0x108>)
 8029068:	f7fb fa6c 	bl	8024544 <PIN_INTERRUPT_Init>
 802906c:	4603      	mov	r3, r0
 802906e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8029070:	79fb      	ldrb	r3, [r7, #7]
 8029072:	2b00      	cmp	r3, #0
 8029074:	d104      	bne.n	8029080 <DAVE_Init+0x84>
  {
	 /**  Initialization of PIN_INTERRUPT APP instance PIN_INTERRUPT_ADC1 */
	 init_status = (DAVE_STATUS_t)PIN_INTERRUPT_Init(&PIN_INTERRUPT_ADC1); 
 8029076:	4824      	ldr	r0, [pc, #144]	; (8029108 <DAVE_Init+0x10c>)
 8029078:	f7fb fa64 	bl	8024544 <PIN_INTERRUPT_Init>
 802907c:	4603      	mov	r3, r0
 802907e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8029080:	79fb      	ldrb	r3, [r7, #7]
 8029082:	2b00      	cmp	r3, #0
 8029084:	d104      	bne.n	8029090 <DAVE_Init+0x94>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_TC */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_TC); 
 8029086:	4821      	ldr	r0, [pc, #132]	; (802910c <DAVE_Init+0x110>)
 8029088:	f7fb fb40 	bl	802470c <INTERRUPT_Init>
 802908c:	4603      	mov	r3, r0
 802908e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8029090:	79fb      	ldrb	r3, [r7, #7]
 8029092:	2b00      	cmp	r3, #0
 8029094:	d104      	bne.n	80290a0 <DAVE_Init+0xa4>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_TIMESTAMP */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_TIMESTAMP); 
 8029096:	481e      	ldr	r0, [pc, #120]	; (8029110 <DAVE_Init+0x114>)
 8029098:	f7fb fb38 	bl	802470c <INTERRUPT_Init>
 802909c:	4603      	mov	r3, r0
 802909e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80290a0:	79fb      	ldrb	r3, [r7, #7]
 80290a2:	2b00      	cmp	r3, #0
 80290a4:	d104      	bne.n	80290b0 <DAVE_Init+0xb4>
  {
	 /**  Initialization of SPI_MASTER APP instance SPI_MASTER_TC */
	 init_status = (DAVE_STATUS_t)SPI_MASTER_Init(&SPI_MASTER_TC); 
 80290a6:	481b      	ldr	r0, [pc, #108]	; (8029114 <DAVE_Init+0x118>)
 80290a8:	f7fa fc74 	bl	8023994 <SPI_MASTER_Init>
 80290ac:	4603      	mov	r3, r0
 80290ae:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80290b0:	79fb      	ldrb	r3, [r7, #7]
 80290b2:	2b00      	cmp	r3, #0
 80290b4:	d104      	bne.n	80290c0 <DAVE_Init+0xc4>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_ETH */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_ETH); 
 80290b6:	4818      	ldr	r0, [pc, #96]	; (8029118 <DAVE_Init+0x11c>)
 80290b8:	f7fb fb28 	bl	802470c <INTERRUPT_Init>
 80290bc:	4603      	mov	r3, r0
 80290be:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80290c0:	79fb      	ldrb	r3, [r7, #7]
 80290c2:	2b00      	cmp	r3, #0
 80290c4:	d104      	bne.n	80290d0 <DAVE_Init+0xd4>
  {
	 /**  Initialization of E_EEPROM_XMC4 APP instance E_EEPROM_XMC4_0 */
	 init_status = (DAVE_STATUS_t)E_EEPROM_XMC4_Init(&E_EEPROM_XMC4_0); 
 80290c6:	4815      	ldr	r0, [pc, #84]	; (802911c <DAVE_Init+0x120>)
 80290c8:	f7fb fc90 	bl	80249ec <E_EEPROM_XMC4_Init>
 80290cc:	4603      	mov	r3, r0
 80290ce:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80290d0:	79fb      	ldrb	r3, [r7, #7]
 80290d2:	2b00      	cmp	r3, #0
 80290d4:	d104      	bne.n	80290e0 <DAVE_Init+0xe4>
  {
	 /**  Initialization of UART APP instance UART_0 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_0); 
 80290d6:	4812      	ldr	r0, [pc, #72]	; (8029120 <DAVE_Init+0x124>)
 80290d8:	f7f9 fd26 	bl	8022b28 <UART_Init>
 80290dc:	4603      	mov	r3, r0
 80290de:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 80290e0:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80290e2:	4618      	mov	r0, r3
 80290e4:	3708      	adds	r7, #8
 80290e6:	46bd      	mov	sp, r7
 80290e8:	bd80      	pop	{r7, pc}
 80290ea:	bf00      	nop
 80290ec:	1fff00cc 	.word	0x1fff00cc
 80290f0:	1fff00c0 	.word	0x1fff00c0
 80290f4:	0802a370 	.word	0x0802a370
 80290f8:	1ffe8910 	.word	0x1ffe8910
 80290fc:	1ffe8814 	.word	0x1ffe8814
 8029100:	1ffe8844 	.word	0x1ffe8844
 8029104:	0802a2dc 	.word	0x0802a2dc
 8029108:	0802a300 	.word	0x0802a300
 802910c:	0802a324 	.word	0x0802a324
 8029110:	0802a328 	.word	0x0802a328
 8029114:	1ffe89d0 	.word	0x1ffe89d0
 8029118:	0802a32c 	.word	0x0802a32c
 802911c:	1ffe9b98 	.word	0x1ffe9b98
 8029120:	1ffe8800 	.word	0x1ffe8800

08029124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8029124:	b480      	push	{r7}
 8029126:	b083      	sub	sp, #12
 8029128:	af00      	add	r7, sp, #0
 802912a:	4603      	mov	r3, r0
 802912c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802912e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8029132:	2b00      	cmp	r3, #0
 8029134:	db0b      	blt.n	802914e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8029136:	4908      	ldr	r1, [pc, #32]	; (8029158 <__NVIC_EnableIRQ+0x34>)
 8029138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802913c:	095b      	lsrs	r3, r3, #5
 802913e:	79fa      	ldrb	r2, [r7, #7]
 8029140:	f002 021f 	and.w	r2, r2, #31
 8029144:	2001      	movs	r0, #1
 8029146:	fa00 f202 	lsl.w	r2, r0, r2
 802914a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 802914e:	370c      	adds	r7, #12
 8029150:	46bd      	mov	sp, r7
 8029152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029156:	4770      	bx	lr
 8029158:	e000e100 	.word	0xe000e100

0802915c <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 802915c:	b480      	push	{r7}
 802915e:	b083      	sub	sp, #12
 8029160:	af00      	add	r7, sp, #0
 8029162:	6078      	str	r0, [r7, #4]
 8029164:	460b      	mov	r3, r1
 8029166:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 8029168:	687b      	ldr	r3, [r7, #4]
 802916a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802916c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
 8029170:	78fb      	ldrb	r3, [r7, #3]
 8029172:	3b01      	subs	r3, #1
 8029174:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 8029176:	431a      	orrs	r2, r3
 8029178:	687b      	ldr	r3, [r7, #4]
 802917a:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
 802917c:	370c      	adds	r7, #12
 802917e:	46bd      	mov	sp, r7
 8029180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029184:	4770      	bx	lr
 8029186:	bf00      	nop

08029188 <XMC_SPI_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSelect()
 */
__STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8029188:	b580      	push	{r7, lr}
 802918a:	b082      	sub	sp, #8
 802918c:	af00      	add	r7, sp, #0
 802918e:	6078      	str	r0, [r7, #4]
 8029190:	460b      	mov	r3, r1
 8029192:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetFrameLength(channel, frame_length);
 8029194:	78fb      	ldrb	r3, [r7, #3]
 8029196:	6878      	ldr	r0, [r7, #4]
 8029198:	4619      	mov	r1, r3
 802919a:	f7ff ffdf 	bl	802915c <XMC_USIC_CH_SetFrameLength>
}
 802919e:	3708      	adds	r7, #8
 80291a0:	46bd      	mov	sp, r7
 80291a2:	bd80      	pop	{r7, pc}

080291a4 <SPI_MASTER_IsRxBusy>:
 *    return 1U;
 * }
 * @endcode<BR>
 */
__STATIC_INLINE bool SPI_MASTER_IsRxBusy(const SPI_MASTER_t* const handle)
{
 80291a4:	b480      	push	{r7}
 80291a6:	b083      	sub	sp, #12
 80291a8:	af00      	add	r7, sp, #0
 80291aa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("SPI_MASTER_IsTxBusy:handle NULL", (handle != NULL))
  return (handle->runtime->rx_busy);
 80291ac:	687b      	ldr	r3, [r7, #4]
 80291ae:	689b      	ldr	r3, [r3, #8]
 80291b0:	7fdb      	ldrb	r3, [r3, #31]
 80291b2:	b2db      	uxtb	r3, r3
}
 80291b4:	4618      	mov	r0, r3
 80291b6:	370c      	adds	r7, #12
 80291b8:	46bd      	mov	sp, r7
 80291ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80291be:	4770      	bx	lr

080291c0 <SPI_MASTER_EnableSlaveSelectSignal>:
 * }
 * @endcode<BR>
 *
 */
__STATIC_INLINE void SPI_MASTER_EnableSlaveSelectSignal(const SPI_MASTER_t* handle, const SPI_MASTER_SS_SIGNAL_t slave)
{
 80291c0:	b580      	push	{r7, lr}
 80291c2:	b082      	sub	sp, #8
 80291c4:	af00      	add	r7, sp, #0
 80291c6:	6078      	str	r0, [r7, #4]
 80291c8:	460b      	mov	r3, r1
 80291ca:	70fb      	strb	r3, [r7, #3]
                                                                               (slave == SPI_MASTER_SS_SIGNAL_4) ||
                                                                               (slave == SPI_MASTER_SS_SIGNAL_5) ||
                                                                               (slave == SPI_MASTER_SS_SIGNAL_6) ||
                                                                               (slave == SPI_MASTER_SS_SIGNAL_7))
                                                                              );
    XMC_SPI_CH_EnableSlaveSelect(handle->channel, handle->config->slave_select_pin_config[slave]->slave_select_ch);
 80291cc:	687b      	ldr	r3, [r7, #4]
 80291ce:	6819      	ldr	r1, [r3, #0]
 80291d0:	687b      	ldr	r3, [r7, #4]
 80291d2:	685b      	ldr	r3, [r3, #4]
 80291d4:	78fa      	ldrb	r2, [r7, #3]
 80291d6:	3214      	adds	r2, #20
 80291d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80291dc:	691b      	ldr	r3, [r3, #16]
 80291de:	4608      	mov	r0, r1
 80291e0:	4619      	mov	r1, r3
 80291e2:	f7f9 f8bd 	bl	8022360 <XMC_SPI_CH_EnableSlaveSelect>
}
 80291e6:	3708      	adds	r7, #8
 80291e8:	46bd      	mov	sp, r7
 80291ea:	bd80      	pop	{r7, pc}

080291ec <PIN_INTERRUPT_Enable>:
 *    return (1);
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void PIN_INTERRUPT_Enable(const PIN_INTERRUPT_t *const handle)
{
 80291ec:	b580      	push	{r7, lr}
 80291ee:	b082      	sub	sp, #8
 80291f0:	af00      	add	r7, sp, #0
 80291f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("PIN_INTERRUPT_Enable: Handler null pointer", handle != NULL);
  NVIC_EnableIRQ(handle->IRQn);
 80291f4:	687b      	ldr	r3, [r7, #4]
 80291f6:	7f1b      	ldrb	r3, [r3, #28]
 80291f8:	b25b      	sxtb	r3, r3
 80291fa:	4618      	mov	r0, r3
 80291fc:	f7ff ff92 	bl	8029124 <__NVIC_EnableIRQ>
}
 8029200:	3708      	adds	r7, #8
 8029202:	46bd      	mov	sp, r7
 8029204:	bd80      	pop	{r7, pc}
 8029206:	bf00      	nop

08029208 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8029208:	b580      	push	{r7, lr}
 802920a:	b082      	sub	sp, #8
 802920c:	af00      	add	r7, sp, #0
 802920e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8029210:	687b      	ldr	r3, [r7, #4]
 8029212:	781b      	ldrb	r3, [r3, #0]
 8029214:	b25b      	sxtb	r3, r3
 8029216:	4618      	mov	r0, r3
 8029218:	f7ff ff84 	bl	8029124 <__NVIC_EnableIRQ>
}
 802921c:	3708      	adds	r7, #8
 802921e:	46bd      	mov	sp, r7
 8029220:	bd80      	pop	{r7, pc}
 8029222:	bf00      	nop

08029224 <load_flash_config>:
struct netif* netif;

// loads network configuration from persistent flash memory into 'flash' variable
// if there is no configuration in flash (e.g. after re-flashing), writes defaults to flash
// returns: 1 on success, -1 on error
int load_flash_config() {
 8029224:	b580      	push	{r7, lr}
 8029226:	af00      	add	r7, sp, #0
	if(E_EEPROM_XMC4_IsFlashEmpty()) {
 8029228:	f7fb fcf4 	bl	8024c14 <E_EEPROM_XMC4_IsFlashEmpty>
 802922c:	4603      	mov	r3, r0
 802922e:	2b00      	cmp	r3, #0
 8029230:	d04a      	beq.n	80292c8 <load_flash_config+0xa4>
		// nothing in flash, set the defaults and save them to flash
		if(!ipaddr_aton(DEF_SRC_IP, &flash.src_ip)) {
 8029232:	4829      	ldr	r0, [pc, #164]	; (80292d8 <load_flash_config+0xb4>)
 8029234:	4929      	ldr	r1, [pc, #164]	; (80292dc <load_flash_config+0xb8>)
 8029236:	f7fe f857 	bl	80272e8 <ipaddr_aton>
 802923a:	4603      	mov	r3, r0
 802923c:	2b00      	cmp	r3, #0
 802923e:	d102      	bne.n	8029246 <load_flash_config+0x22>
			// bad address
			return -1;
 8029240:	f04f 33ff 	mov.w	r3, #4294967295
 8029244:	e046      	b.n	80292d4 <load_flash_config+0xb0>
		}

		if(!ipaddr_aton(DEF_DST_IP, &flash.dst_ip)) {
 8029246:	4826      	ldr	r0, [pc, #152]	; (80292e0 <load_flash_config+0xbc>)
 8029248:	4926      	ldr	r1, [pc, #152]	; (80292e4 <load_flash_config+0xc0>)
 802924a:	f7fe f84d 	bl	80272e8 <ipaddr_aton>
 802924e:	4603      	mov	r3, r0
 8029250:	2b00      	cmp	r3, #0
 8029252:	d102      	bne.n	802925a <load_flash_config+0x36>
			// bad address
			return -1;
 8029254:	f04f 33ff 	mov.w	r3, #4294967295
 8029258:	e03c      	b.n	80292d4 <load_flash_config+0xb0>
		}

		if(!ipaddr_aton(DEF_DEF_GW, &flash.default_gw)) {
 802925a:	4821      	ldr	r0, [pc, #132]	; (80292e0 <load_flash_config+0xbc>)
 802925c:	4922      	ldr	r1, [pc, #136]	; (80292e8 <load_flash_config+0xc4>)
 802925e:	f7fe f843 	bl	80272e8 <ipaddr_aton>
 8029262:	4603      	mov	r3, r0
 8029264:	2b00      	cmp	r3, #0
 8029266:	d102      	bne.n	802926e <load_flash_config+0x4a>
			// bad address
			return -1;
 8029268:	f04f 33ff 	mov.w	r3, #4294967295
 802926c:	e032      	b.n	80292d4 <load_flash_config+0xb0>
		}

		if(!ipaddr_aton(DEF_SUBNET, &flash.subnet)) {
 802926e:	481f      	ldr	r0, [pc, #124]	; (80292ec <load_flash_config+0xc8>)
 8029270:	491f      	ldr	r1, [pc, #124]	; (80292f0 <load_flash_config+0xcc>)
 8029272:	f7fe f839 	bl	80272e8 <ipaddr_aton>
 8029276:	4603      	mov	r3, r0
 8029278:	2b00      	cmp	r3, #0
 802927a:	d102      	bne.n	8029282 <load_flash_config+0x5e>
			// bad address
			return -1;
 802927c:	f04f 33ff 	mov.w	r3, #4294967295
 8029280:	e028      	b.n	80292d4 <load_flash_config+0xb0>
		}

		flash.src_port = DEF_SRC_PORT;
 8029282:	4b16      	ldr	r3, [pc, #88]	; (80292dc <load_flash_config+0xb8>)
 8029284:	f641 7290 	movw	r2, #8080	; 0x1f90
 8029288:	821a      	strh	r2, [r3, #16]
		flash.adc0_port = DEF_ADC0_PORT;
 802928a:	4b14      	ldr	r3, [pc, #80]	; (80292dc <load_flash_config+0xb8>)
 802928c:	f641 7290 	movw	r2, #8080	; 0x1f90
 8029290:	825a      	strh	r2, [r3, #18]
		flash.adc1_port = DEF_ADC1_PORT;
 8029292:	4b12      	ldr	r3, [pc, #72]	; (80292dc <load_flash_config+0xb8>)
 8029294:	f641 7291 	movw	r2, #8081	; 0x1f91
 8029298:	829a      	strh	r2, [r3, #20]
		flash.tc_port = DEF_TC_PORT;
 802929a:	4b10      	ldr	r3, [pc, #64]	; (80292dc <load_flash_config+0xb8>)
 802929c:	f641 7292 	movw	r2, #8082	; 0x1f92
 80292a0:	82da      	strh	r2, [r3, #22]

		// write out the default configuration to flash
		if(E_EEPROM_XMC4_WriteArray(0x0, (unsigned char*)&flash, sizeof(flash))) {
 80292a2:	2000      	movs	r0, #0
 80292a4:	490d      	ldr	r1, [pc, #52]	; (80292dc <load_flash_config+0xb8>)
 80292a6:	2218      	movs	r2, #24
 80292a8:	f7fb fc0a 	bl	8024ac0 <E_EEPROM_XMC4_WriteArray>
 80292ac:	4603      	mov	r3, r0
 80292ae:	2b00      	cmp	r3, #0
 80292b0:	d007      	beq.n	80292c2 <load_flash_config+0x9e>
			if(E_EEPROM_XMC4_STATUS_OK != E_EEPROM_XMC4_UpdateFlashContents()) {
 80292b2:	f7fb fc5d 	bl	8024b70 <E_EEPROM_XMC4_UpdateFlashContents>
 80292b6:	4603      	mov	r3, r0
 80292b8:	2b00      	cmp	r3, #0
 80292ba:	d00a      	beq.n	80292d2 <load_flash_config+0xae>
				return -1;
 80292bc:	f04f 33ff 	mov.w	r3, #4294967295
 80292c0:	e008      	b.n	80292d4 <load_flash_config+0xb0>
			}
		} else {
			return -1;
 80292c2:	f04f 33ff 	mov.w	r3, #4294967295
 80292c6:	e005      	b.n	80292d4 <load_flash_config+0xb0>
		}
	} else {
		// we have a previously set configuration to load
		E_EEPROM_XMC4_ReadArray(0, (unsigned char*)&flash, sizeof(config_t));
 80292c8:	2000      	movs	r0, #0
 80292ca:	4904      	ldr	r1, [pc, #16]	; (80292dc <load_flash_config+0xb8>)
 80292cc:	2218      	movs	r2, #24
 80292ce:	f7fb fc29 	bl	8024b24 <E_EEPROM_XMC4_ReadArray>
	}

	return 1;
 80292d2:	2301      	movs	r3, #1
}
 80292d4:	4618      	mov	r0, r3
 80292d6:	bd80      	pop	{r7, pc}
 80292d8:	0802a398 	.word	0x0802a398
 80292dc:	1fff08f8 	.word	0x1fff08f8
 80292e0:	0802a3a4 	.word	0x0802a3a4
 80292e4:	1fff08fc 	.word	0x1fff08fc
 80292e8:	1fff0900 	.word	0x1fff0900
 80292ec:	0802a3b0 	.word	0x0802a3b0
 80292f0:	1fff0904 	.word	0x1fff0904

080292f4 <local_udp_reset>:

// reset UDP configuration
// assumes 'local_udp_init' has been called but one of the addresses/ports in 'flash' has changed
void local_udp_reset() {
 80292f4:	b580      	push	{r7, lr}
 80292f6:	af00      	add	r7, sp, #0
	// bind to the source port
	udp_bind(pcb, IP_ADDR_ANY, flash.src_port);
 80292f8:	4b08      	ldr	r3, [pc, #32]	; (802931c <local_udp_reset+0x28>)
 80292fa:	681a      	ldr	r2, [r3, #0]
 80292fc:	4b08      	ldr	r3, [pc, #32]	; (8029320 <local_udp_reset+0x2c>)
 80292fe:	8a1b      	ldrh	r3, [r3, #16]
 8029300:	4610      	mov	r0, r2
 8029302:	4908      	ldr	r1, [pc, #32]	; (8029324 <local_udp_reset+0x30>)
 8029304:	461a      	mov	r2, r3
 8029306:	f7ff fbc1 	bl	8028a8c <udp_bind>

	// set IP addresses
	netif_set_addr(netif, &flash.src_ip, &flash.subnet, &flash.default_gw);
 802930a:	4b07      	ldr	r3, [pc, #28]	; (8029328 <local_udp_reset+0x34>)
 802930c:	681b      	ldr	r3, [r3, #0]
 802930e:	4618      	mov	r0, r3
 8029310:	4903      	ldr	r1, [pc, #12]	; (8029320 <local_udp_reset+0x2c>)
 8029312:	4a06      	ldr	r2, [pc, #24]	; (802932c <local_udp_reset+0x38>)
 8029314:	4b06      	ldr	r3, [pc, #24]	; (8029330 <local_udp_reset+0x3c>)
 8029316:	f7fe fc5b 	bl	8027bd0 <netif_set_addr>
}
 802931a:	bd80      	pop	{r7, pc}
 802931c:	1fff0930 	.word	0x1fff0930
 8029320:	1fff08f8 	.word	0x1fff08f8
 8029324:	0802a354 	.word	0x0802a354
 8029328:	1fff07b4 	.word	0x1fff07b4
 802932c:	1fff0904 	.word	0x1fff0904
 8029330:	1fff0900 	.word	0x1fff0900

08029334 <local_udp_init>:

// initialize UDP interface
// should only be called once, if network configuration changes call 'local_udp_reset'
void local_udp_init() {
 8029334:	b580      	push	{r7, lr}
 8029336:	af00      	add	r7, sp, #0
	pcb = udp_new();
 8029338:	f7ff fc08 	bl	8028b4c <udp_new>
 802933c:	4602      	mov	r2, r0
 802933e:	4b08      	ldr	r3, [pc, #32]	; (8029360 <local_udp_init+0x2c>)
 8029340:	601a      	str	r2, [r3, #0]

	// allocate buffer at least the size of the largest packet we'll send
	if(sizeof(ADC_data_t) + sizeof(header_t) > sizeof(thermocouple_packet_t)) {
		p = pbuf_alloc(PBUF_TRANSPORT, sizeof(ADC_data_t) + sizeof(header_t), PBUF_RAM);
	} else {
		p = pbuf_alloc(PBUF_TRANSPORT, sizeof(thermocouple_packet_t), PBUF_RAM);
 8029342:	2000      	movs	r0, #0
 8029344:	211c      	movs	r1, #28
 8029346:	2200      	movs	r2, #0
 8029348:	f7fe fd68 	bl	8027e1c <pbuf_alloc>
 802934c:	4602      	mov	r2, r0
 802934e:	4b05      	ldr	r3, [pc, #20]	; (8029364 <local_udp_init+0x30>)
 8029350:	601a      	str	r2, [r3, #0]
	}

	// set the interface to send on
	netif = ETH_LWIP_0.xnetif;
 8029352:	4b05      	ldr	r3, [pc, #20]	; (8029368 <local_udp_init+0x34>)
 8029354:	685b      	ldr	r3, [r3, #4]
 8029356:	4a05      	ldr	r2, [pc, #20]	; (802936c <local_udp_init+0x38>)
 8029358:	6013      	str	r3, [r2, #0]

	// set addresses and things
	local_udp_reset();
 802935a:	f7ff ffcb 	bl	80292f4 <local_udp_reset>
}
 802935e:	bd80      	pop	{r7, pc}
 8029360:	1fff0930 	.word	0x1fff0930
 8029364:	1fff07b8 	.word	0x1fff07b8
 8029368:	1fff00c0 	.word	0x1fff00c0
 802936c:	1fff07b4 	.word	0x1fff07b4

08029370 <send_data>:

// send data over the Ethernet
void send_data(void* data, uint16_t size, uint16_t port) {
 8029370:	b590      	push	{r4, r7, lr}
 8029372:	b085      	sub	sp, #20
 8029374:	af02      	add	r7, sp, #8
 8029376:	6078      	str	r0, [r7, #4]
 8029378:	460b      	mov	r3, r1
 802937a:	807b      	strh	r3, [r7, #2]
 802937c:	4613      	mov	r3, r2
 802937e:	803b      	strh	r3, [r7, #0]
	memcpy(p->payload, data, size);
 8029380:	4b10      	ldr	r3, [pc, #64]	; (80293c4 <send_data+0x54>)
 8029382:	681b      	ldr	r3, [r3, #0]
 8029384:	685a      	ldr	r2, [r3, #4]
 8029386:	887b      	ldrh	r3, [r7, #2]
 8029388:	4610      	mov	r0, r2
 802938a:	6879      	ldr	r1, [r7, #4]
 802938c:	461a      	mov	r2, r3
 802938e:	f000 fd1d 	bl	8029dcc <memcpy>
	p->len = p->tot_len = size;
 8029392:	4b0c      	ldr	r3, [pc, #48]	; (80293c4 <send_data+0x54>)
 8029394:	681a      	ldr	r2, [r3, #0]
 8029396:	4b0b      	ldr	r3, [pc, #44]	; (80293c4 <send_data+0x54>)
 8029398:	681b      	ldr	r3, [r3, #0]
 802939a:	8879      	ldrh	r1, [r7, #2]
 802939c:	8119      	strh	r1, [r3, #8]
 802939e:	891b      	ldrh	r3, [r3, #8]
 80293a0:	8153      	strh	r3, [r2, #10]

	udp_sendto_if(pcb, p, &flash.dst_ip, port, netif);
 80293a2:	4b09      	ldr	r3, [pc, #36]	; (80293c8 <send_data+0x58>)
 80293a4:	6819      	ldr	r1, [r3, #0]
 80293a6:	4b07      	ldr	r3, [pc, #28]	; (80293c4 <send_data+0x54>)
 80293a8:	681a      	ldr	r2, [r3, #0]
 80293aa:	4b08      	ldr	r3, [pc, #32]	; (80293cc <send_data+0x5c>)
 80293ac:	681b      	ldr	r3, [r3, #0]
 80293ae:	883c      	ldrh	r4, [r7, #0]
 80293b0:	9300      	str	r3, [sp, #0]
 80293b2:	4608      	mov	r0, r1
 80293b4:	4611      	mov	r1, r2
 80293b6:	4a06      	ldr	r2, [pc, #24]	; (80293d0 <send_data+0x60>)
 80293b8:	4623      	mov	r3, r4
 80293ba:	f7ff fabb 	bl	8028934 <udp_sendto_if>
}
 80293be:	370c      	adds	r7, #12
 80293c0:	46bd      	mov	sp, r7
 80293c2:	bd90      	pop	{r4, r7, pc}
 80293c4:	1fff07b8 	.word	0x1fff07b8
 80293c8:	1fff0930 	.word	0x1fff0930
 80293cc:	1fff07b4 	.word	0x1fff07b4
 80293d0:	1fff08fc 	.word	0x1fff08fc

080293d4 <send_err_msg>:
						"    udp.tc=[destination port for thermocouple packets]\n";

const char* err_msg  = 	"error\n";
const char* okay_msg = 	"okay\n";

static inline void send_err_msg() {
 80293d4:	b580      	push	{r7, lr}
 80293d6:	b082      	sub	sp, #8
 80293d8:	af00      	add	r7, sp, #0
	// send error message
	for(size_t i = 0; i < strlen(err_msg); i++) {
 80293da:	2300      	movs	r3, #0
 80293dc:	607b      	str	r3, [r7, #4]
 80293de:	e00e      	b.n	80293fe <send_err_msg+0x2a>
		XMC_UART_CH_Transmit(UART_0.channel, (uint16_t)err_msg[i]);
 80293e0:	4b0d      	ldr	r3, [pc, #52]	; (8029418 <send_err_msg+0x44>)
 80293e2:	6819      	ldr	r1, [r3, #0]
 80293e4:	4b0d      	ldr	r3, [pc, #52]	; (802941c <send_err_msg+0x48>)
 80293e6:	681a      	ldr	r2, [r3, #0]
 80293e8:	687b      	ldr	r3, [r7, #4]
 80293ea:	4413      	add	r3, r2
 80293ec:	781b      	ldrb	r3, [r3, #0]
 80293ee:	b29b      	uxth	r3, r3
 80293f0:	4608      	mov	r0, r1
 80293f2:	4619      	mov	r1, r3
 80293f4:	f7f9 f8a2 	bl	802253c <XMC_UART_CH_Transmit>
const char* err_msg  = 	"error\n";
const char* okay_msg = 	"okay\n";

static inline void send_err_msg() {
	// send error message
	for(size_t i = 0; i < strlen(err_msg); i++) {
 80293f8:	687b      	ldr	r3, [r7, #4]
 80293fa:	3301      	adds	r3, #1
 80293fc:	607b      	str	r3, [r7, #4]
 80293fe:	4b07      	ldr	r3, [pc, #28]	; (802941c <send_err_msg+0x48>)
 8029400:	681b      	ldr	r3, [r3, #0]
 8029402:	4618      	mov	r0, r3
 8029404:	f000 fd3a 	bl	8029e7c <strlen>
 8029408:	4602      	mov	r2, r0
 802940a:	687b      	ldr	r3, [r7, #4]
 802940c:	429a      	cmp	r2, r3
 802940e:	d8e7      	bhi.n	80293e0 <send_err_msg+0xc>
		XMC_UART_CH_Transmit(UART_0.channel, (uint16_t)err_msg[i]);
	}
}
 8029410:	3708      	adds	r7, #8
 8029412:	46bd      	mov	sp, r7
 8029414:	bd80      	pop	{r7, pc}
 8029416:	bf00      	nop
 8029418:	1ffe8800 	.word	0x1ffe8800
 802941c:	1ffe8aa0 	.word	0x1ffe8aa0

08029420 <parse_command>:

// parse the current UART command
void parse_command() {
 8029420:	b580      	push	{r7, lr}
 8029422:	b08a      	sub	sp, #40	; 0x28
 8029424:	af00      	add	r7, sp, #0
	char* str = (char*)uart_buff;
 8029426:	4b7f      	ldr	r3, [pc, #508]	; (8029624 <parse_command+0x204>)
 8029428:	617b      	str	r3, [r7, #20]

	if(strcmp(str, "help") == 0) {
 802942a:	6978      	ldr	r0, [r7, #20]
 802942c:	497e      	ldr	r1, [pc, #504]	; (8029628 <parse_command+0x208>)
 802942e:	f000 fd1b 	bl	8029e68 <strcmp>
 8029432:	4603      	mov	r3, r0
 8029434:	2b00      	cmp	r3, #0
 8029436:	d11b      	bne.n	8029470 <parse_command+0x50>
		// help option
		for(size_t i = 0; i < strlen(help_msg); i++) {
 8029438:	2300      	movs	r3, #0
 802943a:	627b      	str	r3, [r7, #36]	; 0x24
 802943c:	e00e      	b.n	802945c <parse_command+0x3c>
			XMC_UART_CH_Transmit(UART_0.channel, (uint16_t)help_msg[i]);
 802943e:	4b7b      	ldr	r3, [pc, #492]	; (802962c <parse_command+0x20c>)
 8029440:	6819      	ldr	r1, [r3, #0]
 8029442:	4b7b      	ldr	r3, [pc, #492]	; (8029630 <parse_command+0x210>)
 8029444:	681a      	ldr	r2, [r3, #0]
 8029446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029448:	4413      	add	r3, r2
 802944a:	781b      	ldrb	r3, [r3, #0]
 802944c:	b29b      	uxth	r3, r3
 802944e:	4608      	mov	r0, r1
 8029450:	4619      	mov	r1, r3
 8029452:	f7f9 f873 	bl	802253c <XMC_UART_CH_Transmit>
void parse_command() {
	char* str = (char*)uart_buff;

	if(strcmp(str, "help") == 0) {
		// help option
		for(size_t i = 0; i < strlen(help_msg); i++) {
 8029456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029458:	3301      	adds	r3, #1
 802945a:	627b      	str	r3, [r7, #36]	; 0x24
 802945c:	4b74      	ldr	r3, [pc, #464]	; (8029630 <parse_command+0x210>)
 802945e:	681b      	ldr	r3, [r3, #0]
 8029460:	4618      	mov	r0, r3
 8029462:	f000 fd0b 	bl	8029e7c <strlen>
 8029466:	4602      	mov	r2, r0
 8029468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802946a:	429a      	cmp	r2, r3
 802946c:	d8e7      	bhi.n	802943e <parse_command+0x1e>
			XMC_UART_CH_Transmit(UART_0.channel, (uint16_t)help_msg[i]);
		}

		return;
 802946e:	e0d6      	b.n	802961e <parse_command+0x1fe>
	}

	char* val = NULL;
 8029470:	2300      	movs	r3, #0
 8029472:	623b      	str	r3, [r7, #32]
	for(size_t i = 0; i < strlen(str); i++) {
 8029474:	2300      	movs	r3, #0
 8029476:	61fb      	str	r3, [r7, #28]
 8029478:	e00f      	b.n	802949a <parse_command+0x7a>
		if(i == '=') {
 802947a:	69fb      	ldr	r3, [r7, #28]
 802947c:	2b3d      	cmp	r3, #61	; 0x3d
 802947e:	d109      	bne.n	8029494 <parse_command+0x74>
			str[i] = '\0';
 8029480:	697a      	ldr	r2, [r7, #20]
 8029482:	69fb      	ldr	r3, [r7, #28]
 8029484:	4413      	add	r3, r2
 8029486:	2200      	movs	r2, #0
 8029488:	701a      	strb	r2, [r3, #0]
			val = &str[i + 1];
 802948a:	69fb      	ldr	r3, [r7, #28]
 802948c:	3301      	adds	r3, #1
 802948e:	697a      	ldr	r2, [r7, #20]
 8029490:	4413      	add	r3, r2
 8029492:	623b      	str	r3, [r7, #32]

		return;
	}

	char* val = NULL;
	for(size_t i = 0; i < strlen(str); i++) {
 8029494:	69fb      	ldr	r3, [r7, #28]
 8029496:	3301      	adds	r3, #1
 8029498:	61fb      	str	r3, [r7, #28]
 802949a:	6978      	ldr	r0, [r7, #20]
 802949c:	f000 fcee 	bl	8029e7c <strlen>
 80294a0:	4602      	mov	r2, r0
 80294a2:	69fb      	ldr	r3, [r7, #28]
 80294a4:	429a      	cmp	r2, r3
 80294a6:	d8e8      	bhi.n	802947a <parse_command+0x5a>
			str[i] = '\0';
			val = &str[i + 1];
		}
	}

	if(val == NULL) {
 80294a8:	6a3b      	ldr	r3, [r7, #32]
 80294aa:	2b00      	cmp	r3, #0
 80294ac:	d102      	bne.n	80294b4 <parse_command+0x94>
		send_err_msg();
 80294ae:	f7ff ff91 	bl	80293d4 <send_err_msg>
		return;
 80294b2:	e0b4      	b.n	802961e <parse_command+0x1fe>
	}

	if(strcmp(str, "ip.src") == 0) {
 80294b4:	6978      	ldr	r0, [r7, #20]
 80294b6:	495f      	ldr	r1, [pc, #380]	; (8029634 <parse_command+0x214>)
 80294b8:	f000 fcd6 	bl	8029e68 <strcmp>
 80294bc:	4603      	mov	r3, r0
 80294be:	2b00      	cmp	r3, #0
 80294c0:	d10e      	bne.n	80294e0 <parse_command+0xc0>
		ip_addr_t ip;
		if(!ipaddr_aton(val, &ip)) {
 80294c2:	f107 0310 	add.w	r3, r7, #16
 80294c6:	6a38      	ldr	r0, [r7, #32]
 80294c8:	4619      	mov	r1, r3
 80294ca:	f7fd ff0d 	bl	80272e8 <ipaddr_aton>
 80294ce:	4603      	mov	r3, r0
 80294d0:	2b00      	cmp	r3, #0
 80294d2:	d101      	bne.n	80294d8 <parse_command+0xb8>
			send_err_msg();
 80294d4:	f7ff ff7e 	bl	80293d4 <send_err_msg>
		}

		flash.src_ip = ip;
 80294d8:	4a57      	ldr	r2, [pc, #348]	; (8029638 <parse_command+0x218>)
 80294da:	693b      	ldr	r3, [r7, #16]
 80294dc:	6013      	str	r3, [r2, #0]
 80294de:	e07f      	b.n	80295e0 <parse_command+0x1c0>
	} else if(strcmp(str, "ip.dst") == 0) {
 80294e0:	6978      	ldr	r0, [r7, #20]
 80294e2:	4956      	ldr	r1, [pc, #344]	; (802963c <parse_command+0x21c>)
 80294e4:	f000 fcc0 	bl	8029e68 <strcmp>
 80294e8:	4603      	mov	r3, r0
 80294ea:	2b00      	cmp	r3, #0
 80294ec:	d10e      	bne.n	802950c <parse_command+0xec>
		ip_addr_t ip;
		if(!ipaddr_aton(val, &ip)) {
 80294ee:	f107 030c 	add.w	r3, r7, #12
 80294f2:	6a38      	ldr	r0, [r7, #32]
 80294f4:	4619      	mov	r1, r3
 80294f6:	f7fd fef7 	bl	80272e8 <ipaddr_aton>
 80294fa:	4603      	mov	r3, r0
 80294fc:	2b00      	cmp	r3, #0
 80294fe:	d101      	bne.n	8029504 <parse_command+0xe4>
			send_err_msg();
 8029500:	f7ff ff68 	bl	80293d4 <send_err_msg>
		}

		flash.dst_ip = ip;
 8029504:	4a4c      	ldr	r2, [pc, #304]	; (8029638 <parse_command+0x218>)
 8029506:	68fb      	ldr	r3, [r7, #12]
 8029508:	6053      	str	r3, [r2, #4]
 802950a:	e069      	b.n	80295e0 <parse_command+0x1c0>
	} else if(strcmp(str, "ip.gw") == 0) {
 802950c:	6978      	ldr	r0, [r7, #20]
 802950e:	494c      	ldr	r1, [pc, #304]	; (8029640 <parse_command+0x220>)
 8029510:	f000 fcaa 	bl	8029e68 <strcmp>
 8029514:	4603      	mov	r3, r0
 8029516:	2b00      	cmp	r3, #0
 8029518:	d10e      	bne.n	8029538 <parse_command+0x118>
		ip_addr_t ip;
		if(!ipaddr_aton(val, &ip)) {
 802951a:	f107 0308 	add.w	r3, r7, #8
 802951e:	6a38      	ldr	r0, [r7, #32]
 8029520:	4619      	mov	r1, r3
 8029522:	f7fd fee1 	bl	80272e8 <ipaddr_aton>
 8029526:	4603      	mov	r3, r0
 8029528:	2b00      	cmp	r3, #0
 802952a:	d101      	bne.n	8029530 <parse_command+0x110>
			send_err_msg();
 802952c:	f7ff ff52 	bl	80293d4 <send_err_msg>
		}

		flash.default_gw = ip;
 8029530:	4a41      	ldr	r2, [pc, #260]	; (8029638 <parse_command+0x218>)
 8029532:	68bb      	ldr	r3, [r7, #8]
 8029534:	6093      	str	r3, [r2, #8]
 8029536:	e053      	b.n	80295e0 <parse_command+0x1c0>
	} else if(strcmp(str, "ip.subnet") == 0) {
 8029538:	6978      	ldr	r0, [r7, #20]
 802953a:	4942      	ldr	r1, [pc, #264]	; (8029644 <parse_command+0x224>)
 802953c:	f000 fc94 	bl	8029e68 <strcmp>
 8029540:	4603      	mov	r3, r0
 8029542:	2b00      	cmp	r3, #0
 8029544:	d10d      	bne.n	8029562 <parse_command+0x142>
		ip_addr_t ip;
		if(!ipaddr_aton(val, &ip)) {
 8029546:	1d3b      	adds	r3, r7, #4
 8029548:	6a38      	ldr	r0, [r7, #32]
 802954a:	4619      	mov	r1, r3
 802954c:	f7fd fecc 	bl	80272e8 <ipaddr_aton>
 8029550:	4603      	mov	r3, r0
 8029552:	2b00      	cmp	r3, #0
 8029554:	d101      	bne.n	802955a <parse_command+0x13a>
			send_err_msg();
 8029556:	f7ff ff3d 	bl	80293d4 <send_err_msg>
		}

		flash.subnet = ip;
 802955a:	4a37      	ldr	r2, [pc, #220]	; (8029638 <parse_command+0x218>)
 802955c:	687b      	ldr	r3, [r7, #4]
 802955e:	60d3      	str	r3, [r2, #12]
 8029560:	e03e      	b.n	80295e0 <parse_command+0x1c0>
	} else if(strcmp(str, "udp.src") == 0) {
 8029562:	6978      	ldr	r0, [r7, #20]
 8029564:	4938      	ldr	r1, [pc, #224]	; (8029648 <parse_command+0x228>)
 8029566:	f000 fc7f 	bl	8029e68 <strcmp>
 802956a:	4603      	mov	r3, r0
 802956c:	2b00      	cmp	r3, #0
 802956e:	d107      	bne.n	8029580 <parse_command+0x160>
		flash.src_port = (uint16_t)atoi(val);
 8029570:	6a38      	ldr	r0, [r7, #32]
 8029572:	f000 fbeb 	bl	8029d4c <atoi>
 8029576:	4603      	mov	r3, r0
 8029578:	b29a      	uxth	r2, r3
 802957a:	4b2f      	ldr	r3, [pc, #188]	; (8029638 <parse_command+0x218>)
 802957c:	821a      	strh	r2, [r3, #16]
 802957e:	e02f      	b.n	80295e0 <parse_command+0x1c0>
	} else if(strcmp(str, "udp.adc0") == 0) {
 8029580:	6978      	ldr	r0, [r7, #20]
 8029582:	4932      	ldr	r1, [pc, #200]	; (802964c <parse_command+0x22c>)
 8029584:	f000 fc70 	bl	8029e68 <strcmp>
 8029588:	4603      	mov	r3, r0
 802958a:	2b00      	cmp	r3, #0
 802958c:	d107      	bne.n	802959e <parse_command+0x17e>
		flash.adc0_port = (uint16_t)atoi(val);
 802958e:	6a38      	ldr	r0, [r7, #32]
 8029590:	f000 fbdc 	bl	8029d4c <atoi>
 8029594:	4603      	mov	r3, r0
 8029596:	b29a      	uxth	r2, r3
 8029598:	4b27      	ldr	r3, [pc, #156]	; (8029638 <parse_command+0x218>)
 802959a:	825a      	strh	r2, [r3, #18]
 802959c:	e020      	b.n	80295e0 <parse_command+0x1c0>
	} else if(strcmp(str, "udp.adc1") == 0) {
 802959e:	6978      	ldr	r0, [r7, #20]
 80295a0:	492b      	ldr	r1, [pc, #172]	; (8029650 <parse_command+0x230>)
 80295a2:	f000 fc61 	bl	8029e68 <strcmp>
 80295a6:	4603      	mov	r3, r0
 80295a8:	2b00      	cmp	r3, #0
 80295aa:	d107      	bne.n	80295bc <parse_command+0x19c>
		flash.adc1_port = (uint16_t)atoi(val);
 80295ac:	6a38      	ldr	r0, [r7, #32]
 80295ae:	f000 fbcd 	bl	8029d4c <atoi>
 80295b2:	4603      	mov	r3, r0
 80295b4:	b29a      	uxth	r2, r3
 80295b6:	4b20      	ldr	r3, [pc, #128]	; (8029638 <parse_command+0x218>)
 80295b8:	829a      	strh	r2, [r3, #20]
 80295ba:	e011      	b.n	80295e0 <parse_command+0x1c0>
	} else if(strcmp(str, "udp.tc") == 0) {
 80295bc:	6978      	ldr	r0, [r7, #20]
 80295be:	4925      	ldr	r1, [pc, #148]	; (8029654 <parse_command+0x234>)
 80295c0:	f000 fc52 	bl	8029e68 <strcmp>
 80295c4:	4603      	mov	r3, r0
 80295c6:	2b00      	cmp	r3, #0
 80295c8:	d107      	bne.n	80295da <parse_command+0x1ba>
		flash.tc_port = (uint16_t)atoi(val);
 80295ca:	6a38      	ldr	r0, [r7, #32]
 80295cc:	f000 fbbe 	bl	8029d4c <atoi>
 80295d0:	4603      	mov	r3, r0
 80295d2:	b29a      	uxth	r2, r3
 80295d4:	4b18      	ldr	r3, [pc, #96]	; (8029638 <parse_command+0x218>)
 80295d6:	82da      	strh	r2, [r3, #22]
 80295d8:	e002      	b.n	80295e0 <parse_command+0x1c0>
	} else {
		send_err_msg();
 80295da:	f7ff fefb 	bl	80293d4 <send_err_msg>
		return;
 80295de:	e01e      	b.n	802961e <parse_command+0x1fe>
	}

	for(size_t i = 0; i < strlen(okay_msg); i++) {
 80295e0:	2300      	movs	r3, #0
 80295e2:	61bb      	str	r3, [r7, #24]
 80295e4:	e00e      	b.n	8029604 <parse_command+0x1e4>
		XMC_UART_CH_Transmit(UART_0.channel, (uint16_t)okay_msg[i]);
 80295e6:	4b11      	ldr	r3, [pc, #68]	; (802962c <parse_command+0x20c>)
 80295e8:	6819      	ldr	r1, [r3, #0]
 80295ea:	4b1b      	ldr	r3, [pc, #108]	; (8029658 <parse_command+0x238>)
 80295ec:	681a      	ldr	r2, [r3, #0]
 80295ee:	69bb      	ldr	r3, [r7, #24]
 80295f0:	4413      	add	r3, r2
 80295f2:	781b      	ldrb	r3, [r3, #0]
 80295f4:	b29b      	uxth	r3, r3
 80295f6:	4608      	mov	r0, r1
 80295f8:	4619      	mov	r1, r3
 80295fa:	f7f8 ff9f 	bl	802253c <XMC_UART_CH_Transmit>
	} else {
		send_err_msg();
		return;
	}

	for(size_t i = 0; i < strlen(okay_msg); i++) {
 80295fe:	69bb      	ldr	r3, [r7, #24]
 8029600:	3301      	adds	r3, #1
 8029602:	61bb      	str	r3, [r7, #24]
 8029604:	4b14      	ldr	r3, [pc, #80]	; (8029658 <parse_command+0x238>)
 8029606:	681b      	ldr	r3, [r3, #0]
 8029608:	4618      	mov	r0, r3
 802960a:	f000 fc37 	bl	8029e7c <strlen>
 802960e:	4602      	mov	r2, r0
 8029610:	69bb      	ldr	r3, [r7, #24]
 8029612:	429a      	cmp	r2, r3
 8029614:	d8e7      	bhi.n	80295e6 <parse_command+0x1c6>
		XMC_UART_CH_Transmit(UART_0.channel, (uint16_t)okay_msg[i]);
	}

	local_udp_reset();
 8029616:	f7ff fe6d 	bl	80292f4 <local_udp_reset>
	load_flash_config();
 802961a:	f7ff fe03 	bl	8029224 <load_flash_config>
}
 802961e:	3728      	adds	r7, #40	; 0x28
 8029620:	46bd      	mov	sp, r7
 8029622:	bd80      	pop	{r7, pc}
 8029624:	1fff07f8 	.word	0x1fff07f8
 8029628:	0802a580 	.word	0x0802a580
 802962c:	1ffe8800 	.word	0x1ffe8800
 8029630:	1ffe8a9c 	.word	0x1ffe8a9c
 8029634:	0802a588 	.word	0x0802a588
 8029638:	1fff08f8 	.word	0x1fff08f8
 802963c:	0802a590 	.word	0x0802a590
 8029640:	0802a598 	.word	0x0802a598
 8029644:	0802a5a0 	.word	0x0802a5a0
 8029648:	0802a5ac 	.word	0x0802a5ac
 802964c:	0802a5b4 	.word	0x0802a5b4
 8029650:	0802a5c0 	.word	0x0802a5c0
 8029654:	0802a5cc 	.word	0x0802a5cc
 8029658:	1ffe8aa4 	.word	0x1ffe8aa4

0802965c <main>:
* <b>Details of function</b><br>
* This routine is the application entry point. It is invoked by the device startup code. It is responsible for
* invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder for user application
* code.
*/
int main(void) {
 802965c:	b590      	push	{r4, r7, lr}
 802965e:	b091      	sub	sp, #68	; 0x44
 8029660:	af00      	add	r7, sp, #0
	DAVE_STATUS_t status;
	uint32_t timer_systimer_lwip; 				// Timer for Ethernet Checkouts???
	uint8_t null[18] = {0x00}; 					// Null packet to "send" during ADC Transfers
 8029662:	f107 0310 	add.w	r3, r7, #16
 8029666:	2200      	movs	r2, #0
 8029668:	601a      	str	r2, [r3, #0]
 802966a:	3304      	adds	r3, #4
 802966c:	2200      	movs	r2, #0
 802966e:	601a      	str	r2, [r3, #0]
 8029670:	3304      	adds	r3, #4
 8029672:	2200      	movs	r2, #0
 8029674:	601a      	str	r2, [r3, #0]
 8029676:	3304      	adds	r3, #4
 8029678:	2200      	movs	r2, #0
 802967a:	601a      	str	r2, [r3, #0]
 802967c:	3304      	adds	r3, #4
 802967e:	2200      	movs	r2, #0
 8029680:	801a      	strh	r2, [r3, #0]
 8029682:	3302      	adds	r3, #2

	// DAVE STARTUP
	status = DAVE_Init(); /* Initialization of DAVE APPs  */
 8029684:	f7ff fcba 	bl	8028ffc <DAVE_Init>
 8029688:	4603      	mov	r3, r0
 802968a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	if(status != DAVE_STATUS_SUCCESS) {
 802968e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8029692:	2b00      	cmp	r3, #0
 8029694:	d000      	beq.n	8029698 <main+0x3c>
		/* Placeholder for error handler code.
		* The while loop below can be replaced with an user error handler. */
		XMC_DEBUG("DAVE APPs initialization failed\n");
		while(1) {};
 8029696:	e7fe      	b.n	8029696 <main+0x3a>
	}

	// load config from flash
	load_flash_config();
 8029698:	f7ff fdc4 	bl	8029224 <load_flash_config>

	// Initialize UDP interface
	local_udp_init();
 802969c:	f7ff fe4a 	bl	8029334 <local_udp_init>

	//Initialize ADCs
	//Unlock / Config
	// ADC0
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_ADC,  SPI_MASTER_SS_SIGNAL_0); // Change slave
 80296a0:	488c      	ldr	r0, [pc, #560]	; (80298d4 <main+0x278>)
 80296a2:	2100      	movs	r1, #0
 80296a4:	f7ff fd8c 	bl	80291c0 <SPI_MASTER_EnableSlaveSelectSignal>
	for(int i = 0; i < 9000; i++) {}; // Dumb Delay (Remove?)
 80296a8:	2300      	movs	r3, #0
 80296aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80296ac:	e002      	b.n	80296b4 <main+0x58>
 80296ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80296b0:	3301      	adds	r3, #1
 80296b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80296b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80296b6:	f242 3227 	movw	r2, #8999	; 0x2327
 80296ba:	4293      	cmp	r3, r2
 80296bc:	ddf7      	ble.n	80296ae <main+0x52>
	adc_register_config();
 80296be:	f000 f9c7 	bl	8029a50 <adc_register_config>

	// ADC 1
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_ADC,  SPI_MASTER_SS_SIGNAL_1); // Change slave
 80296c2:	4884      	ldr	r0, [pc, #528]	; (80298d4 <main+0x278>)
 80296c4:	2101      	movs	r1, #1
 80296c6:	f7ff fd7b 	bl	80291c0 <SPI_MASTER_EnableSlaveSelectSignal>
	for(int i = 0; i < 9000; i++) {}; // Dumb Delay (Remove?)
 80296ca:	2300      	movs	r3, #0
 80296cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80296ce:	e002      	b.n	80296d6 <main+0x7a>
 80296d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80296d2:	3301      	adds	r3, #1
 80296d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80296d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80296d8:	f242 3227 	movw	r2, #8999	; 0x2327
 80296dc:	4293      	cmp	r3, r2
 80296de:	ddf7      	ble.n	80296d0 <main+0x74>
	adc_register_config();
 80296e0:	f000 f9b6 	bl	8029a50 <adc_register_config>

	// Turn on ADCs
	// ADC0
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_ADC,  SPI_MASTER_SS_SIGNAL_0); // Change slave
 80296e4:	487b      	ldr	r0, [pc, #492]	; (80298d4 <main+0x278>)
 80296e6:	2100      	movs	r1, #0
 80296e8:	f7ff fd6a 	bl	80291c0 <SPI_MASTER_EnableSlaveSelectSignal>
	for(int i = 0; i < 9000; i++) {}; // Dumb Delay (Remove?)
 80296ec:	2300      	movs	r3, #0
 80296ee:	637b      	str	r3, [r7, #52]	; 0x34
 80296f0:	e002      	b.n	80296f8 <main+0x9c>
 80296f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80296f4:	3301      	adds	r3, #1
 80296f6:	637b      	str	r3, [r7, #52]	; 0x34
 80296f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80296fa:	f242 3227 	movw	r2, #8999	; 0x2327
 80296fe:	4293      	cmp	r3, r2
 8029700:	ddf7      	ble.n	80296f2 <main+0x96>
	xmc_ADC_setup();
 8029702:	f000 fab3 	bl	8029c6c <xmc_ADC_setup>

	// ADC 1
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_ADC,  SPI_MASTER_SS_SIGNAL_1); // Change slave
 8029706:	4873      	ldr	r0, [pc, #460]	; (80298d4 <main+0x278>)
 8029708:	2101      	movs	r1, #1
 802970a:	f7ff fd59 	bl	80291c0 <SPI_MASTER_EnableSlaveSelectSignal>
	for (int i = 0; i < 9000; i++) {}; // Dumb Delay (Remove?)
 802970e:	2300      	movs	r3, #0
 8029710:	633b      	str	r3, [r7, #48]	; 0x30
 8029712:	e002      	b.n	802971a <main+0xbe>
 8029714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029716:	3301      	adds	r3, #1
 8029718:	633b      	str	r3, [r7, #48]	; 0x30
 802971a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802971c:	f242 3227 	movw	r2, #8999	; 0x2327
 8029720:	4293      	cmp	r3, r2
 8029722:	ddf7      	ble.n	8029714 <main+0xb8>
	xmc_ADC_setup();
 8029724:	f000 faa2 	bl	8029c6c <xmc_ADC_setup>

	// RETURN TO ADC0
	SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_ADC,  SPI_MASTER_SS_SIGNAL_0); // Change slave
 8029728:	486a      	ldr	r0, [pc, #424]	; (80298d4 <main+0x278>)
 802972a:	2100      	movs	r1, #0
 802972c:	f7ff fd48 	bl	80291c0 <SPI_MASTER_EnableSlaveSelectSignal>
	for(int i = 0; i < 9000; i++) {}; // Dumb Delay (Remove?)
 8029730:	2300      	movs	r3, #0
 8029732:	62fb      	str	r3, [r7, #44]	; 0x2c
 8029734:	e002      	b.n	802973c <main+0xe0>
 8029736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029738:	3301      	adds	r3, #1
 802973a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802973c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802973e:	f242 3227 	movw	r2, #8999	; 0x2327
 8029742:	4293      	cmp	r3, r2
 8029744:	ddf7      	ble.n	8029736 <main+0xda>


	// Initialize and start lwip system timer
	// don't need for UDP (no packets timeout, don't need to ask lwip to check)
	timer_systimer_lwip = SYSTIMER_CreateTimer(10000, SYSTIMER_MODE_PERIODIC, (SYSTIMER_CALLBACK_t)sys_check_timeouts, 0); // WAS  //1000000
 8029746:	f242 7010 	movw	r0, #10000	; 0x2710
 802974a:	2101      	movs	r1, #1
 802974c:	4a62      	ldr	r2, [pc, #392]	; (80298d8 <main+0x27c>)
 802974e:	2300      	movs	r3, #0
 8029750:	f7f9 ffce 	bl	80236f0 <SYSTIMER_CreateTimer>
 8029754:	6278      	str	r0, [r7, #36]	; 0x24
	SYSTIMER_StartTimer(timer_systimer_lwip);
 8029756:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8029758:	f7fa f868 	bl	802382c <SYSTIMER_StartTimer>

	// Enable interrupts once configuration complete
	PIN_INTERRUPT_Enable(&PIN_INTERRUPT_ADC0); 	// ADC0 DRDY Interrupt
 802975c:	485f      	ldr	r0, [pc, #380]	; (80298dc <main+0x280>)
 802975e:	f7ff fd45 	bl	80291ec <PIN_INTERRUPT_Enable>
	PIN_INTERRUPT_Enable(&PIN_INTERRUPT_ADC1); 	// ADC1 DRDY Interrupt
 8029762:	485f      	ldr	r0, [pc, #380]	; (80298e0 <main+0x284>)
 8029764:	f7ff fd42 	bl	80291ec <PIN_INTERRUPT_Enable>
	INTERRUPT_Enable(&INTERRUPT_TC);			// Thermocouple Timer Interrupt
 8029768:	485e      	ldr	r0, [pc, #376]	; (80298e4 <main+0x288>)
 802976a:	f7ff fd4d 	bl	8029208 <INTERRUPT_Enable>
	INTERRUPT_Enable(&INTERRUPT_TIMESTAMP);		// Millisecond Timestamping Interrupt Enabled
 802976e:	485e      	ldr	r0, [pc, #376]	; (80298e8 <main+0x28c>)
 8029770:	f7ff fd4a 	bl	8029208 <INTERRUPT_Enable>

	enum XMC_SPI_CH_SLAVE_SELECT slave_select[NUM_TC] = {SPI_MASTER_SS_SIGNAL_0, SPI_MASTER_SS_SIGNAL_1, SPI_MASTER_SS_SIGNAL_2, SPI_MASTER_SS_SIGNAL_3};
 8029774:	4b5d      	ldr	r3, [pc, #372]	; (80298ec <main+0x290>)
 8029776:	463c      	mov	r4, r7
 8029778:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802977a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t tc_index = 0;
 802977e:	2300      	movs	r3, #0
 8029780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	while(1) {
		// Thermocouple SPI Transfers
		if(read_tc == 1){ // Does timer say we should transfer?
 8029784:	4b5a      	ldr	r3, [pc, #360]	; (80298f0 <main+0x294>)
 8029786:	781b      	ldrb	r3, [r3, #0]
 8029788:	2b01      	cmp	r3, #1
 802978a:	d140      	bne.n	802980e <main+0x1b2>
			if (!SPI_MASTER_IsRxBusy(&SPI_MASTER_TC)) { // Check if SPI is not busy
 802978c:	4859      	ldr	r0, [pc, #356]	; (80298f4 <main+0x298>)
 802978e:	f7ff fd09 	bl	80291a4 <SPI_MASTER_IsRxBusy>
 8029792:	4603      	mov	r3, r0
 8029794:	f083 0301 	eor.w	r3, r3, #1
 8029798:	b2db      	uxtb	r3, r3
 802979a:	2b00      	cmp	r3, #0
 802979c:	d037      	beq.n	802980e <main+0x1b2>
				SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_TC, slave_select[tc_index]);
 802979e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80297a2:	009b      	lsls	r3, r3, #2
 80297a4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80297a8:	4413      	add	r3, r2
 80297aa:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80297ae:	b2db      	uxtb	r3, r3
 80297b0:	4850      	ldr	r0, [pc, #320]	; (80298f4 <main+0x298>)
 80297b2:	4619      	mov	r1, r3
 80297b4:	f7ff fd04 	bl	80291c0 <SPI_MASTER_EnableSlaveSelectSignal>
				SPI_MASTER_Receive(&SPI_MASTER_TC, (uint8_t*)&(TC_buff.data[tc_index]), sizeof(uint32_t));
 80297b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80297bc:	3302      	adds	r3, #2
 80297be:	009b      	lsls	r3, r3, #2
 80297c0:	4a4d      	ldr	r2, [pc, #308]	; (80298f8 <main+0x29c>)
 80297c2:	4413      	add	r3, r2
 80297c4:	3304      	adds	r3, #4
 80297c6:	484b      	ldr	r0, [pc, #300]	; (80298f4 <main+0x298>)
 80297c8:	4619      	mov	r1, r3
 80297ca:	2204      	movs	r2, #4
 80297cc:	f7fa f90c 	bl	80239e8 <SPI_MASTER_Receive>

				tc_index++;
 80297d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80297d4:	3301      	adds	r3, #1
 80297d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

				if(tc_index == NUM_TC) {
 80297da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80297de:	2b04      	cmp	r3, #4
 80297e0:	d115      	bne.n	802980e <main+0x1b2>
					tc_index = 0;
 80297e2:	2300      	movs	r3, #0
 80297e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					read_tc = 0;
 80297e8:	4b41      	ldr	r3, [pc, #260]	; (80298f0 <main+0x294>)
 80297ea:	2200      	movs	r2, #0
 80297ec:	701a      	strb	r2, [r3, #0]

					// Send out TC packet
					TC_buff.header.seq_num = sequence_number;
 80297ee:	4b43      	ldr	r3, [pc, #268]	; (80298fc <main+0x2a0>)
 80297f0:	681b      	ldr	r3, [r3, #0]
 80297f2:	4a41      	ldr	r2, [pc, #260]	; (80298f8 <main+0x29c>)
 80297f4:	6093      	str	r3, [r2, #8]
					sequence_number++;
 80297f6:	4b41      	ldr	r3, [pc, #260]	; (80298fc <main+0x2a0>)
 80297f8:	681b      	ldr	r3, [r3, #0]
 80297fa:	3301      	adds	r3, #1
 80297fc:	4a3f      	ldr	r2, [pc, #252]	; (80298fc <main+0x2a0>)
 80297fe:	6013      	str	r3, [r2, #0]
					send_data((void*)&TC_buff, sizeof(thermocouple_packet_t), flash.tc_port);
 8029800:	4b3f      	ldr	r3, [pc, #252]	; (8029900 <main+0x2a4>)
 8029802:	8adb      	ldrh	r3, [r3, #22]
 8029804:	483c      	ldr	r0, [pc, #240]	; (80298f8 <main+0x29c>)
 8029806:	211c      	movs	r1, #28
 8029808:	461a      	mov	r2, r3
 802980a:	f7ff fdb1 	bl	8029370 <send_data>
		// ADC SPI Transfers
		// NEED TO SET SOME SORT OF PRIORITY HERE, WHERE WE NEED TO HAVE ADC1 HAPPEN, EVEN IF ADC1 IS READY -- NOT SURE IF THIS IS A REAL PROBLEM ONCE WE ACTUALLY HAVE INTERRUPTS INSTEAD OF READ0 and READ1 AUTO-SET TO 1 AT BEGINNING OF LOOP
		// NOTE: I HAD TO MAKE THE FIFO IN THE DAVE APP 32, NOT 16, BECAUSE 16 WOULD NOT HOLD ENOUGH DATA AND THE SPI TRANSFER WOULD SPLIT

		// ADC0 SPI Transfers
		if (read_adc0) { // Flag set
 802980e:	4b3d      	ldr	r3, [pc, #244]	; (8029904 <main+0x2a8>)
 8029810:	781b      	ldrb	r3, [r3, #0]
 8029812:	2b00      	cmp	r3, #0
 8029814:	d027      	beq.n	8029866 <main+0x20a>
			if (!SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)) { // SPI not already in transaction
 8029816:	482f      	ldr	r0, [pc, #188]	; (80298d4 <main+0x278>)
 8029818:	f7ff fcc4 	bl	80291a4 <SPI_MASTER_IsRxBusy>
 802981c:	4603      	mov	r3, r0
 802981e:	f083 0301 	eor.w	r3, r3, #1
 8029822:	b2db      	uxtb	r3, r3
 8029824:	2b00      	cmp	r3, #0
 8029826:	d01e      	beq.n	8029866 <main+0x20a>
				SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_ADC, SPI_MASTER_SS_SIGNAL_0); // Change to ADC0
 8029828:	482a      	ldr	r0, [pc, #168]	; (80298d4 <main+0x278>)
 802982a:	2100      	movs	r1, #0
 802982c:	f7ff fcc8 	bl	80291c0 <SPI_MASTER_EnableSlaveSelectSignal>
				SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, (uint8_t*)&ADC0_buff.data, sizeof(ADC_data_t) + 3);
 8029830:	f107 0310 	add.w	r3, r7, #16
 8029834:	4827      	ldr	r0, [pc, #156]	; (80298d4 <main+0x278>)
 8029836:	4619      	mov	r1, r3
 8029838:	4a33      	ldr	r2, [pc, #204]	; (8029908 <main+0x2ac>)
 802983a:	2312      	movs	r3, #18
 802983c:	f7fa fa18 	bl	8023c70 <SPI_MASTER_Transfer>
				read_adc0 = 0; // Reset Flag
 8029840:	4b30      	ldr	r3, [pc, #192]	; (8029904 <main+0x2a8>)
 8029842:	2200      	movs	r2, #0
 8029844:	701a      	strb	r2, [r3, #0]

				// send out ADC0 packet
				ADC0_buff.header.seq_num = sequence_number;
 8029846:	4b2d      	ldr	r3, [pc, #180]	; (80298fc <main+0x2a0>)
 8029848:	681b      	ldr	r3, [r3, #0]
 802984a:	4a30      	ldr	r2, [pc, #192]	; (802990c <main+0x2b0>)
 802984c:	6093      	str	r3, [r2, #8]
				sequence_number++;
 802984e:	4b2b      	ldr	r3, [pc, #172]	; (80298fc <main+0x2a0>)
 8029850:	681b      	ldr	r3, [r3, #0]
 8029852:	3301      	adds	r3, #1
 8029854:	4a29      	ldr	r2, [pc, #164]	; (80298fc <main+0x2a0>)
 8029856:	6013      	str	r3, [r2, #0]
				// be careful not to send zeros
				send_data((void*)&ADC0_buff, sizeof(ADC_data_t) + sizeof(header_t), flash.adc0_port);
 8029858:	4b29      	ldr	r3, [pc, #164]	; (8029900 <main+0x2a4>)
 802985a:	8a5b      	ldrh	r3, [r3, #18]
 802985c:	482b      	ldr	r0, [pc, #172]	; (802990c <main+0x2b0>)
 802985e:	211b      	movs	r1, #27
 8029860:	461a      	mov	r2, r3
 8029862:	f7ff fd85 	bl	8029370 <send_data>
			}
		}

		// ADC1 SPI Transfers
		if (read_adc1) {
 8029866:	4b2a      	ldr	r3, [pc, #168]	; (8029910 <main+0x2b4>)
 8029868:	781b      	ldrb	r3, [r3, #0]
 802986a:	2b00      	cmp	r3, #0
 802986c:	d027      	beq.n	80298be <main+0x262>
			if (!SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)) { // SPI not already in transaction
 802986e:	4819      	ldr	r0, [pc, #100]	; (80298d4 <main+0x278>)
 8029870:	f7ff fc98 	bl	80291a4 <SPI_MASTER_IsRxBusy>
 8029874:	4603      	mov	r3, r0
 8029876:	f083 0301 	eor.w	r3, r3, #1
 802987a:	b2db      	uxtb	r3, r3
 802987c:	2b00      	cmp	r3, #0
 802987e:	d01e      	beq.n	80298be <main+0x262>
				SPI_MASTER_EnableSlaveSelectSignal(&SPI_MASTER_ADC, SPI_MASTER_SS_SIGNAL_1); // Change to ADC1
 8029880:	4814      	ldr	r0, [pc, #80]	; (80298d4 <main+0x278>)
 8029882:	2101      	movs	r1, #1
 8029884:	f7ff fc9c 	bl	80291c0 <SPI_MASTER_EnableSlaveSelectSignal>
				SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, (uint8_t*)&ADC0_buff.data, sizeof(ADC_data_t) + 3);
 8029888:	f107 0310 	add.w	r3, r7, #16
 802988c:	4811      	ldr	r0, [pc, #68]	; (80298d4 <main+0x278>)
 802988e:	4619      	mov	r1, r3
 8029890:	4a1d      	ldr	r2, [pc, #116]	; (8029908 <main+0x2ac>)
 8029892:	2312      	movs	r3, #18
 8029894:	f7fa f9ec 	bl	8023c70 <SPI_MASTER_Transfer>
				read_adc1 = 0; // Reset Flag
 8029898:	4b1d      	ldr	r3, [pc, #116]	; (8029910 <main+0x2b4>)
 802989a:	2200      	movs	r2, #0
 802989c:	701a      	strb	r2, [r3, #0]

				// send out ADC0 packet
				ADC1_buff.header.seq_num = sequence_number;
 802989e:	4b17      	ldr	r3, [pc, #92]	; (80298fc <main+0x2a0>)
 80298a0:	681b      	ldr	r3, [r3, #0]
 80298a2:	4a1c      	ldr	r2, [pc, #112]	; (8029914 <main+0x2b8>)
 80298a4:	6093      	str	r3, [r2, #8]
				sequence_number++;
 80298a6:	4b15      	ldr	r3, [pc, #84]	; (80298fc <main+0x2a0>)
 80298a8:	681b      	ldr	r3, [r3, #0]
 80298aa:	3301      	adds	r3, #1
 80298ac:	4a13      	ldr	r2, [pc, #76]	; (80298fc <main+0x2a0>)
 80298ae:	6013      	str	r3, [r2, #0]
				// be careful not to send zeros
				send_data((void*)&ADC1_buff, sizeof(ADC_data_t) + sizeof(header_t), flash.adc1_port);
 80298b0:	4b13      	ldr	r3, [pc, #76]	; (8029900 <main+0x2a4>)
 80298b2:	8a9b      	ldrh	r3, [r3, #20]
 80298b4:	4817      	ldr	r0, [pc, #92]	; (8029914 <main+0x2b8>)
 80298b6:	211b      	movs	r1, #27
 80298b8:	461a      	mov	r2, r3
 80298ba:	f7ff fd59 	bl	8029370 <send_data>
			}
		}

		// parse UART command
		if(parse_uart) {
 80298be:	4b16      	ldr	r3, [pc, #88]	; (8029918 <main+0x2bc>)
 80298c0:	781b      	ldrb	r3, [r3, #0]
 80298c2:	2b00      	cmp	r3, #0
 80298c4:	d004      	beq.n	80298d0 <main+0x274>
			parse_command();
 80298c6:	f7ff fdab 	bl	8029420 <parse_command>
			parse_uart = 0;
 80298ca:	4b13      	ldr	r3, [pc, #76]	; (8029918 <main+0x2bc>)
 80298cc:	2200      	movs	r2, #0
 80298ce:	701a      	strb	r2, [r3, #0]
		}
	} // End While Loop
 80298d0:	e758      	b.n	8029784 <main+0x128>
 80298d2:	bf00      	nop
 80298d4:	1ffe8910 	.word	0x1ffe8910
 80298d8:	080285fd 	.word	0x080285fd
 80298dc:	0802a2dc 	.word	0x0802a2dc
 80298e0:	0802a300 	.word	0x0802a300
 80298e4:	0802a324 	.word	0x0802a324
 80298e8:	0802a328 	.word	0x0802a328
 80298ec:	0802a5d4 	.word	0x0802a5d4
 80298f0:	1fff00d8 	.word	0x1fff00d8
 80298f4:	1ffe89d0 	.word	0x1ffe89d0
 80298f8:	1fff07dc 	.word	0x1fff07dc
 80298fc:	1fff00d0 	.word	0x1fff00d0
 8029900:	1fff08f8 	.word	0x1fff08f8
 8029904:	1fff00d9 	.word	0x1fff00d9
 8029908:	1fff091c 	.word	0x1fff091c
 802990c:	1fff0910 	.word	0x1fff0910
 8029910:	1fff00da 	.word	0x1fff00da
 8029914:	1fff07bc 	.word	0x1fff07bc
 8029918:	1fff0114 	.word	0x1fff0114

0802991c <UART_Recv_Callback>:


// INTERRUPTS /////////////////////////////////////////////////////////////////////////////////////

	// Called when UART receives data
	void UART_Recv_Callback() {
 802991c:	b580      	push	{r7, lr}
 802991e:	b082      	sub	sp, #8
 8029920:	af00      	add	r7, sp, #0
		uint8_t read = (uint8_t)XMC_UART_CH_GetReceivedData(UART_0.channel);
 8029922:	4b0f      	ldr	r3, [pc, #60]	; (8029960 <UART_Recv_Callback+0x44>)
 8029924:	681b      	ldr	r3, [r3, #0]
 8029926:	4618      	mov	r0, r3
 8029928:	f7f8 fe2e 	bl	8022588 <XMC_UART_CH_GetReceivedData>
 802992c:	4603      	mov	r3, r0
 802992e:	71fb      	strb	r3, [r7, #7]

		if(read == '\n') {
 8029930:	79fb      	ldrb	r3, [r7, #7]
 8029932:	2b0a      	cmp	r3, #10
 8029934:	d109      	bne.n	802994a <UART_Recv_Callback+0x2e>
			// end of command
			uart_buff[uart_buff_i] = '\0';
 8029936:	4b0b      	ldr	r3, [pc, #44]	; (8029964 <UART_Recv_Callback+0x48>)
 8029938:	781b      	ldrb	r3, [r3, #0]
 802993a:	461a      	mov	r2, r3
 802993c:	4b0a      	ldr	r3, [pc, #40]	; (8029968 <UART_Recv_Callback+0x4c>)
 802993e:	2100      	movs	r1, #0
 8029940:	5499      	strb	r1, [r3, r2]

			parse_uart = 1;
 8029942:	4b0a      	ldr	r3, [pc, #40]	; (802996c <UART_Recv_Callback+0x50>)
 8029944:	2201      	movs	r2, #1
 8029946:	701a      	strb	r2, [r3, #0]
 8029948:	e006      	b.n	8029958 <UART_Recv_Callback+0x3c>
		} else {
			if(uart_buff_i > 254) {
 802994a:	4b06      	ldr	r3, [pc, #24]	; (8029964 <UART_Recv_Callback+0x48>)
 802994c:	781b      	ldrb	r3, [r3, #0]
 802994e:	2bff      	cmp	r3, #255	; 0xff
 8029950:	d102      	bne.n	8029958 <UART_Recv_Callback+0x3c>
				// quietly ignore this command
				// TODO could send an error message over UART
				uart_buff_i = 0;
 8029952:	4b04      	ldr	r3, [pc, #16]	; (8029964 <UART_Recv_Callback+0x48>)
 8029954:	2200      	movs	r2, #0
 8029956:	701a      	strb	r2, [r3, #0]
			}
		}
	}
 8029958:	3708      	adds	r7, #8
 802995a:	46bd      	mov	sp, r7
 802995c:	bd80      	pop	{r7, pc}
 802995e:	bf00      	nop
 8029960:	1ffe8800 	.word	0x1ffe8800
 8029964:	1fff0115 	.word	0x1fff0115
 8029968:	1fff07f8 	.word	0x1fff07f8
 802996c:	1fff0114 	.word	0x1fff0114

08029970 <CCU43_1_IRQHandler>:

	// Timer configured with 1000us period = 1ms
		void TimeStampIRQ(void) {
 8029970:	b580      	push	{r7, lr}
 8029972:	af00      	add	r7, sp, #0
			TIMER_ClearEvent(&TIMER_TIMESTAMP); // Clear Event Flag
 8029974:	4804      	ldr	r0, [pc, #16]	; (8029988 <CCU43_1_IRQHandler+0x18>)
 8029976:	f7f9 fb6b 	bl	8023050 <TIMER_ClearEvent>
			millisec++; 						// New device uptime
 802997a:	4b04      	ldr	r3, [pc, #16]	; (802998c <CCU43_1_IRQHandler+0x1c>)
 802997c:	681b      	ldr	r3, [r3, #0]
 802997e:	3301      	adds	r3, #1
 8029980:	4a02      	ldr	r2, [pc, #8]	; (802998c <CCU43_1_IRQHandler+0x1c>)
 8029982:	6013      	str	r3, [r2, #0]
			return;
 8029984:	bf00      	nop
		}
 8029986:	bd80      	pop	{r7, pc}
 8029988:	1ffe8844 	.word	0x1ffe8844
 802998c:	1fff00d4 	.word	0x1fff00d4

08029990 <CCU43_0_IRQHandler>:

	// Thermocouple trigger -- Timer configured with 100000us period = 100ms = 10Hz
		void TCIRQ(void) {
 8029990:	b580      	push	{r7, lr}
 8029992:	af00      	add	r7, sp, #0
			TIMER_ClearEvent(&TIMER_TC);		// Clear Event Flag
 8029994:	480a      	ldr	r0, [pc, #40]	; (80299c0 <CCU43_0_IRQHandler+0x30>)
 8029996:	f7f9 fb5b 	bl	8023050 <TIMER_ClearEvent>
			TC_buff.header.ms = millisec;
 802999a:	4b0a      	ldr	r3, [pc, #40]	; (80299c4 <CCU43_0_IRQHandler+0x34>)
 802999c:	681b      	ldr	r3, [r3, #0]
 802999e:	4a0a      	ldr	r2, [pc, #40]	; (80299c8 <CCU43_0_IRQHandler+0x38>)
 80299a0:	6013      	str	r3, [r2, #0]
			TC_buff.header.us = TIMER_GetTime(&TIMER_TIMESTAMP) / 100;
 80299a2:	480a      	ldr	r0, [pc, #40]	; (80299cc <CCU43_0_IRQHandler+0x3c>)
 80299a4:	f7f9 fb66 	bl	8023074 <TIMER_GetTime>
 80299a8:	4602      	mov	r2, r0
 80299aa:	4b09      	ldr	r3, [pc, #36]	; (80299d0 <CCU43_0_IRQHandler+0x40>)
 80299ac:	fba3 2302 	umull	r2, r3, r3, r2
 80299b0:	095b      	lsrs	r3, r3, #5
 80299b2:	4a05      	ldr	r2, [pc, #20]	; (80299c8 <CCU43_0_IRQHandler+0x38>)
 80299b4:	6053      	str	r3, [r2, #4]
			read_tc = 1;		// Set flag to read Thermocouples
 80299b6:	4b07      	ldr	r3, [pc, #28]	; (80299d4 <CCU43_0_IRQHandler+0x44>)
 80299b8:	2201      	movs	r2, #1
 80299ba:	701a      	strb	r2, [r3, #0]
		}
 80299bc:	bd80      	pop	{r7, pc}
 80299be:	bf00      	nop
 80299c0:	1ffe8814 	.word	0x1ffe8814
 80299c4:	1fff00d4 	.word	0x1fff00d4
 80299c8:	1fff07dc 	.word	0x1fff07dc
 80299cc:	1ffe8844 	.word	0x1ffe8844
 80299d0:	51eb851f 	.word	0x51eb851f
 80299d4:	1fff00d8 	.word	0x1fff00d8

080299d8 <ERU0_3_IRQHandler>:


	// Data Ready Interrupt for ADC0
		void ADC0_DRDY_INT(){
 80299d8:	b580      	push	{r7, lr}
 80299da:	af00      	add	r7, sp, #0
			ADC0_buff.header.ms = millisec;
 80299dc:	4b08      	ldr	r3, [pc, #32]	; (8029a00 <ERU0_3_IRQHandler+0x28>)
 80299de:	681b      	ldr	r3, [r3, #0]
 80299e0:	4a08      	ldr	r2, [pc, #32]	; (8029a04 <ERU0_3_IRQHandler+0x2c>)
 80299e2:	6013      	str	r3, [r2, #0]
			ADC0_buff.header.us = TIMER_GetTime(&TIMER_TIMESTAMP) / 100;
 80299e4:	4808      	ldr	r0, [pc, #32]	; (8029a08 <ERU0_3_IRQHandler+0x30>)
 80299e6:	f7f9 fb45 	bl	8023074 <TIMER_GetTime>
 80299ea:	4602      	mov	r2, r0
 80299ec:	4b07      	ldr	r3, [pc, #28]	; (8029a0c <ERU0_3_IRQHandler+0x34>)
 80299ee:	fba3 2302 	umull	r2, r3, r3, r2
 80299f2:	095b      	lsrs	r3, r3, #5
 80299f4:	4a03      	ldr	r2, [pc, #12]	; (8029a04 <ERU0_3_IRQHandler+0x2c>)
 80299f6:	6053      	str	r3, [r2, #4]
			read_adc0 = 1; // Set flag to read ADC0
 80299f8:	4b05      	ldr	r3, [pc, #20]	; (8029a10 <ERU0_3_IRQHandler+0x38>)
 80299fa:	2201      	movs	r2, #1
 80299fc:	701a      	strb	r2, [r3, #0]
		}
 80299fe:	bd80      	pop	{r7, pc}
 8029a00:	1fff00d4 	.word	0x1fff00d4
 8029a04:	1fff0910 	.word	0x1fff0910
 8029a08:	1ffe8844 	.word	0x1ffe8844
 8029a0c:	51eb851f 	.word	0x51eb851f
 8029a10:	1fff00d9 	.word	0x1fff00d9

08029a14 <ERU0_2_IRQHandler>:

	// Data Ready Interrupt for ADC1
		void ADC1_DRDY_INT(){
 8029a14:	b580      	push	{r7, lr}
 8029a16:	af00      	add	r7, sp, #0
			ADC1_buff.header.ms = millisec;
 8029a18:	4b08      	ldr	r3, [pc, #32]	; (8029a3c <ERU0_2_IRQHandler+0x28>)
 8029a1a:	681b      	ldr	r3, [r3, #0]
 8029a1c:	4a08      	ldr	r2, [pc, #32]	; (8029a40 <ERU0_2_IRQHandler+0x2c>)
 8029a1e:	6013      	str	r3, [r2, #0]
			ADC1_buff.header.us = TIMER_GetTime(&TIMER_TIMESTAMP) / 100;
 8029a20:	4808      	ldr	r0, [pc, #32]	; (8029a44 <ERU0_2_IRQHandler+0x30>)
 8029a22:	f7f9 fb27 	bl	8023074 <TIMER_GetTime>
 8029a26:	4602      	mov	r2, r0
 8029a28:	4b07      	ldr	r3, [pc, #28]	; (8029a48 <ERU0_2_IRQHandler+0x34>)
 8029a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8029a2e:	095b      	lsrs	r3, r3, #5
 8029a30:	4a03      	ldr	r2, [pc, #12]	; (8029a40 <ERU0_2_IRQHandler+0x2c>)
 8029a32:	6053      	str	r3, [r2, #4]
			read_adc1 = 1; // Set flag to read ADC1
 8029a34:	4b05      	ldr	r3, [pc, #20]	; (8029a4c <ERU0_2_IRQHandler+0x38>)
 8029a36:	2201      	movs	r2, #1
 8029a38:	701a      	strb	r2, [r3, #0]
		}
 8029a3a:	bd80      	pop	{r7, pc}
 8029a3c:	1fff00d4 	.word	0x1fff00d4
 8029a40:	1fff07bc 	.word	0x1fff07bc
 8029a44:	1ffe8844 	.word	0x1ffe8844
 8029a48:	51eb851f 	.word	0x51eb851f
 8029a4c:	1fff00da 	.word	0x1fff00da

08029a50 <adc_register_config>:


// FUNCIONS ///////////////////////////////////////////////////////////////////////////////////////

void adc_register_config() {
 8029a50:	b580      	push	{r7, lr}
 8029a52:	b08a      	sub	sp, #40	; 0x28
 8029a54:	af00      	add	r7, sp, #0
	// Register Configurations
		uint8_t unlock[3] = {0x06, 0x55, 0x0}; 				// Unlocks ADC
 8029a56:	4a75      	ldr	r2, [pc, #468]	; (8029c2c <adc_register_config+0x1dc>)
 8029a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8029a5c:	8811      	ldrh	r1, [r2, #0]
 8029a5e:	7892      	ldrb	r2, [r2, #2]
 8029a60:	8019      	strh	r1, [r3, #0]
 8029a62:	709a      	strb	r2, [r3, #2]
		uint8_t null[18] = {0x00};							// Sends null for reads
 8029a64:	f107 0310 	add.w	r3, r7, #16
 8029a68:	2200      	movs	r2, #0
 8029a6a:	601a      	str	r2, [r3, #0]
 8029a6c:	3304      	adds	r3, #4
 8029a6e:	2200      	movs	r2, #0
 8029a70:	601a      	str	r2, [r3, #0]
 8029a72:	3304      	adds	r3, #4
 8029a74:	2200      	movs	r2, #0
 8029a76:	601a      	str	r2, [r3, #0]
 8029a78:	3304      	adds	r3, #4
 8029a7a:	2200      	movs	r2, #0
 8029a7c:	601a      	str	r2, [r3, #0]
 8029a7e:	3304      	adds	r3, #4
 8029a80:	2200      	movs	r2, #0
 8029a82:	801a      	strh	r2, [r3, #0]
 8029a84:	3302      	adds	r3, #2
		uint8_t write_A_SYS_CFG[3] = {0x4B, 0x68, 0x00};	// b(01101000) -- Neg Charge Pump Powered Down | High-Res | 2.442 Internal Reference | Internal Voltage Enabled | 5/95% Comparator Threshold
 8029a86:	4a6a      	ldr	r2, [pc, #424]	; (8029c30 <adc_register_config+0x1e0>)
 8029a88:	f107 030c 	add.w	r3, r7, #12
 8029a8c:	8811      	ldrh	r1, [r2, #0]
 8029a8e:	7892      	ldrb	r2, [r2, #2]
 8029a90:	8019      	strh	r1, [r3, #0]
 8029a92:	709a      	strb	r2, [r3, #2]
		uint8_t write_D_SYS_CFG[3] = {0x4C, 0x3C, 0x00};	// b(00111100) -- Watchdog Disabled | No CRC | 12ns delay for DONE (not used) | 12ns delay for Hi-Z on DOUT | Fixed Frame Size (6 frames) | CRC disabled
 8029a94:	4a67      	ldr	r2, [pc, #412]	; (8029c34 <adc_register_config+0x1e4>)
 8029a96:	f107 0308 	add.w	r3, r7, #8
 8029a9a:	8811      	ldrh	r1, [r2, #0]
 8029a9c:	7892      	ldrb	r2, [r2, #2]
 8029a9e:	8019      	strh	r1, [r3, #0]
 8029aa0:	709a      	strb	r2, [r3, #2]
		uint8_t write_CLK1[3] = {0x4D, 0x02, 0x00};			// b(00000010) -- XTAL CLK Source | CLKIN /2
 8029aa2:	4a65      	ldr	r2, [pc, #404]	; (8029c38 <adc_register_config+0x1e8>)
 8029aa4:	1d3b      	adds	r3, r7, #4
 8029aa6:	8811      	ldrh	r1, [r2, #0]
 8029aa8:	7892      	ldrb	r2, [r2, #2]
 8029aaa:	8019      	strh	r1, [r3, #0]
 8029aac:	709a      	strb	r2, [r3, #2]
		uint8_t write_CLK2_43kHz[3] = {0x4E, 0x4E, 0x00};	// b(01001110) -- ICLK / 4 | OSR = fMOD / 48
 8029aae:	4a63      	ldr	r2, [pc, #396]	; (8029c3c <adc_register_config+0x1ec>)
 8029ab0:	463b      	mov	r3, r7
 8029ab2:	8811      	ldrh	r1, [r2, #0]
 8029ab4:	7892      	ldrb	r2, [r2, #2]
 8029ab6:	8019      	strh	r1, [r3, #0]
 8029ab8:	709a      	strb	r2, [r3, #2]
		// NOTE -- write_CLK2_43kHz gives a final sample rate of 42.667kHz
		// NOTE -- write_CLK2_8kHz gives a final sample rate of 8kHz


	// Clear configArray for debug
		for (uint8_t i = 0; i<  56; i++){
 8029aba:	2300      	movs	r3, #0
 8029abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8029ac0:	e009      	b.n	8029ad6 <adc_register_config+0x86>
			configArray[i] = 0x00;
 8029ac2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8029ac6:	4a5e      	ldr	r2, [pc, #376]	; (8029c40 <adc_register_config+0x1f0>)
 8029ac8:	2100      	movs	r1, #0
 8029aca:	54d1      	strb	r1, [r2, r3]
		// NOTE -- write_CLK2_43kHz gives a final sample rate of 42.667kHz
		// NOTE -- write_CLK2_8kHz gives a final sample rate of 8kHz


	// Clear configArray for debug
		for (uint8_t i = 0; i<  56; i++){
 8029acc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8029ad0:	3301      	adds	r3, #1
 8029ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8029ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8029ada:	2b37      	cmp	r3, #55	; 0x37
 8029adc:	d9f1      	bls.n	8029ac2 <adc_register_config+0x72>
			configArray[i] = 0x00;
		}

	// Transfer Null
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, configArray, 3U);
 8029ade:	f107 0310 	add.w	r3, r7, #16
 8029ae2:	4858      	ldr	r0, [pc, #352]	; (8029c44 <adc_register_config+0x1f4>)
 8029ae4:	4619      	mov	r1, r3
 8029ae6:	4a56      	ldr	r2, [pc, #344]	; (8029c40 <adc_register_config+0x1f0>)
 8029ae8:	2303      	movs	r3, #3
 8029aea:	f7fa f8c1 	bl	8023c70 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8029aee:	bf00      	nop
 8029af0:	4854      	ldr	r0, [pc, #336]	; (8029c44 <adc_register_config+0x1f4>)
 8029af2:	f7ff fb57 	bl	80291a4 <SPI_MASTER_IsRxBusy>
 8029af6:	4603      	mov	r3, r0
 8029af8:	2b00      	cmp	r3, #0
 8029afa:	d1f9      	bne.n	8029af0 <adc_register_config+0xa0>

	//  Unlock ADC for configuration
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, unlock, configArray, 3U);
 8029afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8029b00:	4850      	ldr	r0, [pc, #320]	; (8029c44 <adc_register_config+0x1f4>)
 8029b02:	4619      	mov	r1, r3
 8029b04:	4a4e      	ldr	r2, [pc, #312]	; (8029c40 <adc_register_config+0x1f0>)
 8029b06:	2303      	movs	r3, #3
 8029b08:	f7fa f8b2 	bl	8023c70 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8029b0c:	bf00      	nop
 8029b0e:	484d      	ldr	r0, [pc, #308]	; (8029c44 <adc_register_config+0x1f4>)
 8029b10:	f7ff fb48 	bl	80291a4 <SPI_MASTER_IsRxBusy>
 8029b14:	4603      	mov	r3, r0
 8029b16:	2b00      	cmp	r3, #0
 8029b18:	d1f9      	bne.n	8029b0e <adc_register_config+0xbe>

	// Transfer Null
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, configArray+3, 3U);
 8029b1a:	f107 0310 	add.w	r3, r7, #16
 8029b1e:	4849      	ldr	r0, [pc, #292]	; (8029c44 <adc_register_config+0x1f4>)
 8029b20:	4619      	mov	r1, r3
 8029b22:	4a49      	ldr	r2, [pc, #292]	; (8029c48 <adc_register_config+0x1f8>)
 8029b24:	2303      	movs	r3, #3
 8029b26:	f7fa f8a3 	bl	8023c70 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8029b2a:	bf00      	nop
 8029b2c:	4845      	ldr	r0, [pc, #276]	; (8029c44 <adc_register_config+0x1f4>)
 8029b2e:	f7ff fb39 	bl	80291a4 <SPI_MASTER_IsRxBusy>
 8029b32:	4603      	mov	r3, r0
 8029b34:	2b00      	cmp	r3, #0
 8029b36:	d1f9      	bne.n	8029b2c <adc_register_config+0xdc>

	// Write to A_SYS_CFG (See Above)
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, write_A_SYS_CFG, configArray+6, 3U);
 8029b38:	f107 030c 	add.w	r3, r7, #12
 8029b3c:	4841      	ldr	r0, [pc, #260]	; (8029c44 <adc_register_config+0x1f4>)
 8029b3e:	4619      	mov	r1, r3
 8029b40:	4a42      	ldr	r2, [pc, #264]	; (8029c4c <adc_register_config+0x1fc>)
 8029b42:	2303      	movs	r3, #3
 8029b44:	f7fa f894 	bl	8023c70 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8029b48:	bf00      	nop
 8029b4a:	483e      	ldr	r0, [pc, #248]	; (8029c44 <adc_register_config+0x1f4>)
 8029b4c:	f7ff fb2a 	bl	80291a4 <SPI_MASTER_IsRxBusy>
 8029b50:	4603      	mov	r3, r0
 8029b52:	2b00      	cmp	r3, #0
 8029b54:	d1f9      	bne.n	8029b4a <adc_register_config+0xfa>
		// Transfer Null
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, configArray+9, 3U);
 8029b56:	f107 0310 	add.w	r3, r7, #16
 8029b5a:	483a      	ldr	r0, [pc, #232]	; (8029c44 <adc_register_config+0x1f4>)
 8029b5c:	4619      	mov	r1, r3
 8029b5e:	4a3c      	ldr	r2, [pc, #240]	; (8029c50 <adc_register_config+0x200>)
 8029b60:	2303      	movs	r3, #3
 8029b62:	f7fa f885 	bl	8023c70 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8029b66:	bf00      	nop
 8029b68:	4836      	ldr	r0, [pc, #216]	; (8029c44 <adc_register_config+0x1f4>)
 8029b6a:	f7ff fb1b 	bl	80291a4 <SPI_MASTER_IsRxBusy>
 8029b6e:	4603      	mov	r3, r0
 8029b70:	2b00      	cmp	r3, #0
 8029b72:	d1f9      	bne.n	8029b68 <adc_register_config+0x118>

	// Write to D_SYS_CFG (See Above)
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, write_D_SYS_CFG, configArray+12, 3U);
 8029b74:	f107 0308 	add.w	r3, r7, #8
 8029b78:	4832      	ldr	r0, [pc, #200]	; (8029c44 <adc_register_config+0x1f4>)
 8029b7a:	4619      	mov	r1, r3
 8029b7c:	4a35      	ldr	r2, [pc, #212]	; (8029c54 <adc_register_config+0x204>)
 8029b7e:	2303      	movs	r3, #3
 8029b80:	f7fa f876 	bl	8023c70 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8029b84:	bf00      	nop
 8029b86:	482f      	ldr	r0, [pc, #188]	; (8029c44 <adc_register_config+0x1f4>)
 8029b88:	f7ff fb0c 	bl	80291a4 <SPI_MASTER_IsRxBusy>
 8029b8c:	4603      	mov	r3, r0
 8029b8e:	2b00      	cmp	r3, #0
 8029b90:	d1f9      	bne.n	8029b86 <adc_register_config+0x136>

	// Transfer Null
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, configArray+15, 3U);
 8029b92:	f107 0310 	add.w	r3, r7, #16
 8029b96:	482b      	ldr	r0, [pc, #172]	; (8029c44 <adc_register_config+0x1f4>)
 8029b98:	4619      	mov	r1, r3
 8029b9a:	4a2f      	ldr	r2, [pc, #188]	; (8029c58 <adc_register_config+0x208>)
 8029b9c:	2303      	movs	r3, #3
 8029b9e:	f7fa f867 	bl	8023c70 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8029ba2:	bf00      	nop
 8029ba4:	4827      	ldr	r0, [pc, #156]	; (8029c44 <adc_register_config+0x1f4>)
 8029ba6:	f7ff fafd 	bl	80291a4 <SPI_MASTER_IsRxBusy>
 8029baa:	4603      	mov	r3, r0
 8029bac:	2b00      	cmp	r3, #0
 8029bae:	d1f9      	bne.n	8029ba4 <adc_register_config+0x154>

	// Write to CLK1 (See Above)
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, write_CLK1, configArray+18, 3U);
 8029bb0:	1d3b      	adds	r3, r7, #4
 8029bb2:	4824      	ldr	r0, [pc, #144]	; (8029c44 <adc_register_config+0x1f4>)
 8029bb4:	4619      	mov	r1, r3
 8029bb6:	4a29      	ldr	r2, [pc, #164]	; (8029c5c <adc_register_config+0x20c>)
 8029bb8:	2303      	movs	r3, #3
 8029bba:	f7fa f859 	bl	8023c70 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8029bbe:	bf00      	nop
 8029bc0:	4820      	ldr	r0, [pc, #128]	; (8029c44 <adc_register_config+0x1f4>)
 8029bc2:	f7ff faef 	bl	80291a4 <SPI_MASTER_IsRxBusy>
 8029bc6:	4603      	mov	r3, r0
 8029bc8:	2b00      	cmp	r3, #0
 8029bca:	d1f9      	bne.n	8029bc0 <adc_register_config+0x170>

	// Transfer Null
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, configArray+21, 3U);
 8029bcc:	f107 0310 	add.w	r3, r7, #16
 8029bd0:	481c      	ldr	r0, [pc, #112]	; (8029c44 <adc_register_config+0x1f4>)
 8029bd2:	4619      	mov	r1, r3
 8029bd4:	4a22      	ldr	r2, [pc, #136]	; (8029c60 <adc_register_config+0x210>)
 8029bd6:	2303      	movs	r3, #3
 8029bd8:	f7fa f84a 	bl	8023c70 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8029bdc:	bf00      	nop
 8029bde:	4819      	ldr	r0, [pc, #100]	; (8029c44 <adc_register_config+0x1f4>)
 8029be0:	f7ff fae0 	bl	80291a4 <SPI_MASTER_IsRxBusy>
 8029be4:	4603      	mov	r3, r0
 8029be6:	2b00      	cmp	r3, #0
 8029be8:	d1f9      	bne.n	8029bde <adc_register_config+0x18e>

	// Write to CLK2 (See Above)
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, write_CLK2_43kHz, configArray+24, 3U);
 8029bea:	463b      	mov	r3, r7
 8029bec:	4815      	ldr	r0, [pc, #84]	; (8029c44 <adc_register_config+0x1f4>)
 8029bee:	4619      	mov	r1, r3
 8029bf0:	4a1c      	ldr	r2, [pc, #112]	; (8029c64 <adc_register_config+0x214>)
 8029bf2:	2303      	movs	r3, #3
 8029bf4:	f7fa f83c 	bl	8023c70 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8029bf8:	bf00      	nop
 8029bfa:	4812      	ldr	r0, [pc, #72]	; (8029c44 <adc_register_config+0x1f4>)
 8029bfc:	f7ff fad2 	bl	80291a4 <SPI_MASTER_IsRxBusy>
 8029c00:	4603      	mov	r3, r0
 8029c02:	2b00      	cmp	r3, #0
 8029c04:	d1f9      	bne.n	8029bfa <adc_register_config+0x1aa>

	// Transfer Null
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, configArray+27, 3U);
 8029c06:	f107 0310 	add.w	r3, r7, #16
 8029c0a:	480e      	ldr	r0, [pc, #56]	; (8029c44 <adc_register_config+0x1f4>)
 8029c0c:	4619      	mov	r1, r3
 8029c0e:	4a16      	ldr	r2, [pc, #88]	; (8029c68 <adc_register_config+0x218>)
 8029c10:	2303      	movs	r3, #3
 8029c12:	f7fa f82d 	bl	8023c70 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8029c16:	bf00      	nop
 8029c18:	480a      	ldr	r0, [pc, #40]	; (8029c44 <adc_register_config+0x1f4>)
 8029c1a:	f7ff fac3 	bl	80291a4 <SPI_MASTER_IsRxBusy>
 8029c1e:	4603      	mov	r3, r0
 8029c20:	2b00      	cmp	r3, #0
 8029c22:	d1f9      	bne.n	8029c18 <adc_register_config+0x1c8>

}
 8029c24:	3728      	adds	r7, #40	; 0x28
 8029c26:	46bd      	mov	sp, r7
 8029c28:	bd80      	pop	{r7, pc}
 8029c2a:	bf00      	nop
 8029c2c:	0802a5e4 	.word	0x0802a5e4
 8029c30:	0802a5e8 	.word	0x0802a5e8
 8029c34:	0802a5ec 	.word	0x0802a5ec
 8029c38:	0802a5f0 	.word	0x0802a5f0
 8029c3c:	0802a5f4 	.word	0x0802a5f4
 8029c40:	1fff00dc 	.word	0x1fff00dc
 8029c44:	1ffe8910 	.word	0x1ffe8910
 8029c48:	1fff00df 	.word	0x1fff00df
 8029c4c:	1fff00e2 	.word	0x1fff00e2
 8029c50:	1fff00e5 	.word	0x1fff00e5
 8029c54:	1fff00e8 	.word	0x1fff00e8
 8029c58:	1fff00eb 	.word	0x1fff00eb
 8029c5c:	1fff00ee 	.word	0x1fff00ee
 8029c60:	1fff00f1 	.word	0x1fff00f1
 8029c64:	1fff00f4 	.word	0x1fff00f4
 8029c68:	1fff00f7 	.word	0x1fff00f7

08029c6c <xmc_ADC_setup>:

void xmc_ADC_setup(){
 8029c6c:	b580      	push	{r7, lr}
 8029c6e:	b088      	sub	sp, #32
 8029c70:	af00      	add	r7, sp, #0
	uint8_t null[18] = {0x00};						// Sends null for reads
 8029c72:	f107 030c 	add.w	r3, r7, #12
 8029c76:	2200      	movs	r2, #0
 8029c78:	601a      	str	r2, [r3, #0]
 8029c7a:	3304      	adds	r3, #4
 8029c7c:	2200      	movs	r2, #0
 8029c7e:	601a      	str	r2, [r3, #0]
 8029c80:	3304      	adds	r3, #4
 8029c82:	2200      	movs	r2, #0
 8029c84:	601a      	str	r2, [r3, #0]
 8029c86:	3304      	adds	r3, #4
 8029c88:	2200      	movs	r2, #0
 8029c8a:	601a      	str	r2, [r3, #0]
 8029c8c:	3304      	adds	r3, #4
 8029c8e:	2200      	movs	r2, #0
 8029c90:	801a      	strh	r2, [r3, #0]
 8029c92:	3302      	adds	r3, #2
	uint8_t write_ADC_ENA[3] = {0x4F, 0x0F, 0x00};	// b(00001111) -- Enables all ADC channels (note: no option to enable certain channels, all or nothing)
 8029c94:	4a27      	ldr	r2, [pc, #156]	; (8029d34 <xmc_ADC_setup+0xc8>)
 8029c96:	f107 0308 	add.w	r3, r7, #8
 8029c9a:	8811      	ldrh	r1, [r2, #0]
 8029c9c:	7892      	ldrb	r2, [r2, #2]
 8029c9e:	8019      	strh	r1, [r3, #0]
 8029ca0:	709a      	strb	r2, [r3, #2]
	uint8_t wakeup[3] = {0x00, 0x33, 0x00};			// b(00110011) -- Bring ADC out of standby (start collection)
 8029ca2:	2300      	movs	r3, #0
 8029ca4:	713b      	strb	r3, [r7, #4]
 8029ca6:	2333      	movs	r3, #51	; 0x33
 8029ca8:	717b      	strb	r3, [r7, #5]
 8029caa:	2300      	movs	r3, #0
 8029cac:	71bb      	strb	r3, [r7, #6]

	// Write to ADC_ENA (See Above)
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, write_ADC_ENA, configArray, 3U);
 8029cae:	f107 0308 	add.w	r3, r7, #8
 8029cb2:	4821      	ldr	r0, [pc, #132]	; (8029d38 <xmc_ADC_setup+0xcc>)
 8029cb4:	4619      	mov	r1, r3
 8029cb6:	4a21      	ldr	r2, [pc, #132]	; (8029d3c <xmc_ADC_setup+0xd0>)
 8029cb8:	2303      	movs	r3, #3
 8029cba:	f7f9 ffd9 	bl	8023c70 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8029cbe:	bf00      	nop
 8029cc0:	481d      	ldr	r0, [pc, #116]	; (8029d38 <xmc_ADC_setup+0xcc>)
 8029cc2:	f7ff fa6f 	bl	80291a4 <SPI_MASTER_IsRxBusy>
 8029cc6:	4603      	mov	r3, r0
 8029cc8:	2b00      	cmp	r3, #0
 8029cca:	d1f9      	bne.n	8029cc0 <xmc_ADC_setup+0x54>

	// Transfer Null
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, configArray+30, 3U);
 8029ccc:	f107 030c 	add.w	r3, r7, #12
 8029cd0:	4819      	ldr	r0, [pc, #100]	; (8029d38 <xmc_ADC_setup+0xcc>)
 8029cd2:	4619      	mov	r1, r3
 8029cd4:	4a1a      	ldr	r2, [pc, #104]	; (8029d40 <xmc_ADC_setup+0xd4>)
 8029cd6:	2303      	movs	r3, #3
 8029cd8:	f7f9 ffca 	bl	8023c70 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8029cdc:	bf00      	nop
 8029cde:	4816      	ldr	r0, [pc, #88]	; (8029d38 <xmc_ADC_setup+0xcc>)
 8029ce0:	f7ff fa60 	bl	80291a4 <SPI_MASTER_IsRxBusy>
 8029ce4:	4603      	mov	r3, r0
 8029ce6:	2b00      	cmp	r3, #0
 8029ce8:	d1f9      	bne.n	8029cde <xmc_ADC_setup+0x72>

	// Wakeup ADC and start conversions
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, wakeup, configArray, 3U);
 8029cea:	1d3b      	adds	r3, r7, #4
 8029cec:	4812      	ldr	r0, [pc, #72]	; (8029d38 <xmc_ADC_setup+0xcc>)
 8029cee:	4619      	mov	r1, r3
 8029cf0:	4a12      	ldr	r2, [pc, #72]	; (8029d3c <xmc_ADC_setup+0xd0>)
 8029cf2:	2303      	movs	r3, #3
 8029cf4:	f7f9 ffbc 	bl	8023c70 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8029cf8:	bf00      	nop
 8029cfa:	480f      	ldr	r0, [pc, #60]	; (8029d38 <xmc_ADC_setup+0xcc>)
 8029cfc:	f7ff fa52 	bl	80291a4 <SPI_MASTER_IsRxBusy>
 8029d00:	4603      	mov	r3, r0
 8029d02:	2b00      	cmp	r3, #0
 8029d04:	d1f9      	bne.n	8029cfa <xmc_ADC_setup+0x8e>

	// Transfer Null
		SPI_MASTER_Transfer(&SPI_MASTER_ADC, null, configArray+33, 3U);
 8029d06:	f107 030c 	add.w	r3, r7, #12
 8029d0a:	480b      	ldr	r0, [pc, #44]	; (8029d38 <xmc_ADC_setup+0xcc>)
 8029d0c:	4619      	mov	r1, r3
 8029d0e:	4a0d      	ldr	r2, [pc, #52]	; (8029d44 <xmc_ADC_setup+0xd8>)
 8029d10:	2303      	movs	r3, #3
 8029d12:	f7f9 ffad 	bl	8023c70 <SPI_MASTER_Transfer>
		while(SPI_MASTER_IsRxBusy(&SPI_MASTER_ADC)){} // Wait for completion
 8029d16:	bf00      	nop
 8029d18:	4807      	ldr	r0, [pc, #28]	; (8029d38 <xmc_ADC_setup+0xcc>)
 8029d1a:	f7ff fa43 	bl	80291a4 <SPI_MASTER_IsRxBusy>
 8029d1e:	4603      	mov	r3, r0
 8029d20:	2b00      	cmp	r3, #0
 8029d22:	d1f9      	bne.n	8029d18 <xmc_ADC_setup+0xac>

	// Set to "infinite" frame length
		XMC_SPI_CH_SetFrameLength(XMC_SPI2_CH0, 64); // When set to 64, frame does not end based on DAVE App Configuration -- this allows us to grab all 144 bits of data out of the ADC during data collection
 8029d24:	4808      	ldr	r0, [pc, #32]	; (8029d48 <xmc_ADC_setup+0xdc>)
 8029d26:	2140      	movs	r1, #64	; 0x40
 8029d28:	f7ff fa2e 	bl	8029188 <XMC_SPI_CH_SetFrameLength>

}
 8029d2c:	3720      	adds	r7, #32
 8029d2e:	46bd      	mov	sp, r7
 8029d30:	bd80      	pop	{r7, pc}
 8029d32:	bf00      	nop
 8029d34:	0802a5f8 	.word	0x0802a5f8
 8029d38:	1ffe8910 	.word	0x1ffe8910
 8029d3c:	1fff00dc 	.word	0x1fff00dc
 8029d40:	1fff00fa 	.word	0x1fff00fa
 8029d44:	1fff00fd 	.word	0x1fff00fd
 8029d48:	48024000 	.word	0x48024000

08029d4c <atoi>:
 8029d4c:	2100      	movs	r1, #0
 8029d4e:	220a      	movs	r2, #10
 8029d50:	f000 b922 	b.w	8029f98 <strtol>

08029d54 <__errno>:
 8029d54:	4b01      	ldr	r3, [pc, #4]	; (8029d5c <__errno+0x8>)
 8029d56:	6818      	ldr	r0, [r3, #0]
 8029d58:	4770      	bx	lr
 8029d5a:	bf00      	nop
 8029d5c:	1ffe8b08 	.word	0x1ffe8b08

08029d60 <__libc_init_array>:
 8029d60:	b570      	push	{r4, r5, r6, lr}
 8029d62:	4b0e      	ldr	r3, [pc, #56]	; (8029d9c <__libc_init_array+0x3c>)
 8029d64:	4c0e      	ldr	r4, [pc, #56]	; (8029da0 <__libc_init_array+0x40>)
 8029d66:	1ae4      	subs	r4, r4, r3
 8029d68:	10a4      	asrs	r4, r4, #2
 8029d6a:	2500      	movs	r5, #0
 8029d6c:	461e      	mov	r6, r3
 8029d6e:	42a5      	cmp	r5, r4
 8029d70:	d004      	beq.n	8029d7c <__libc_init_array+0x1c>
 8029d72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8029d76:	4798      	blx	r3
 8029d78:	3501      	adds	r5, #1
 8029d7a:	e7f8      	b.n	8029d6e <__libc_init_array+0xe>
 8029d7c:	f7f8 fe94 	bl	8022aa8 <_init>
 8029d80:	4c08      	ldr	r4, [pc, #32]	; (8029da4 <__libc_init_array+0x44>)
 8029d82:	4b09      	ldr	r3, [pc, #36]	; (8029da8 <__libc_init_array+0x48>)
 8029d84:	1ae4      	subs	r4, r4, r3
 8029d86:	10a4      	asrs	r4, r4, #2
 8029d88:	2500      	movs	r5, #0
 8029d8a:	461e      	mov	r6, r3
 8029d8c:	42a5      	cmp	r5, r4
 8029d8e:	d004      	beq.n	8029d9a <__libc_init_array+0x3a>
 8029d90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8029d94:	4798      	blx	r3
 8029d96:	3501      	adds	r5, #1
 8029d98:	e7f8      	b.n	8029d8c <__libc_init_array+0x2c>
 8029d9a:	bd70      	pop	{r4, r5, r6, pc}
 8029d9c:	1ffe8b10 	.word	0x1ffe8b10
 8029da0:	1ffe8b10 	.word	0x1ffe8b10
 8029da4:	1ffe8b10 	.word	0x1ffe8b10
 8029da8:	1ffe8b10 	.word	0x1ffe8b10

08029dac <memcmp>:
 8029dac:	b510      	push	{r4, lr}
 8029dae:	440a      	add	r2, r1
 8029db0:	1e44      	subs	r4, r0, #1
 8029db2:	4291      	cmp	r1, r2
 8029db4:	d008      	beq.n	8029dc8 <memcmp+0x1c>
 8029db6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8029dba:	7808      	ldrb	r0, [r1, #0]
 8029dbc:	4283      	cmp	r3, r0
 8029dbe:	d001      	beq.n	8029dc4 <memcmp+0x18>
 8029dc0:	1a18      	subs	r0, r3, r0
 8029dc2:	bd10      	pop	{r4, pc}
 8029dc4:	3101      	adds	r1, #1
 8029dc6:	e7f4      	b.n	8029db2 <memcmp+0x6>
 8029dc8:	2000      	movs	r0, #0
 8029dca:	bd10      	pop	{r4, pc}

08029dcc <memcpy>:
 8029dcc:	b510      	push	{r4, lr}
 8029dce:	1e43      	subs	r3, r0, #1
 8029dd0:	440a      	add	r2, r1
 8029dd2:	4291      	cmp	r1, r2
 8029dd4:	d004      	beq.n	8029de0 <memcpy+0x14>
 8029dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029dda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8029dde:	e7f8      	b.n	8029dd2 <memcpy+0x6>
 8029de0:	bd10      	pop	{r4, pc}

08029de2 <memset>:
 8029de2:	4402      	add	r2, r0
 8029de4:	4603      	mov	r3, r0
 8029de6:	4293      	cmp	r3, r2
 8029de8:	d002      	beq.n	8029df0 <memset+0xe>
 8029dea:	f803 1b01 	strb.w	r1, [r3], #1
 8029dee:	e7fa      	b.n	8029de6 <memset+0x4>
 8029df0:	4770      	bx	lr
	...

08029df4 <rand>:
 8029df4:	4b19      	ldr	r3, [pc, #100]	; (8029e5c <rand+0x68>)
 8029df6:	b510      	push	{r4, lr}
 8029df8:	681c      	ldr	r4, [r3, #0]
 8029dfa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8029dfc:	b9d3      	cbnz	r3, 8029e34 <rand+0x40>
 8029dfe:	2018      	movs	r0, #24
 8029e00:	f000 f8d8 	bl	8029fb4 <malloc>
 8029e04:	f243 330e 	movw	r3, #13070	; 0x330e
 8029e08:	63a0      	str	r0, [r4, #56]	; 0x38
 8029e0a:	8003      	strh	r3, [r0, #0]
 8029e0c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8029e10:	8043      	strh	r3, [r0, #2]
 8029e12:	f241 2334 	movw	r3, #4660	; 0x1234
 8029e16:	8083      	strh	r3, [r0, #4]
 8029e18:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8029e1c:	80c3      	strh	r3, [r0, #6]
 8029e1e:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8029e22:	8103      	strh	r3, [r0, #8]
 8029e24:	2305      	movs	r3, #5
 8029e26:	8143      	strh	r3, [r0, #10]
 8029e28:	230b      	movs	r3, #11
 8029e2a:	8183      	strh	r3, [r0, #12]
 8029e2c:	2201      	movs	r2, #1
 8029e2e:	2300      	movs	r3, #0
 8029e30:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8029e34:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8029e36:	4c0a      	ldr	r4, [pc, #40]	; (8029e60 <rand+0x6c>)
 8029e38:	690b      	ldr	r3, [r1, #16]
 8029e3a:	6948      	ldr	r0, [r1, #20]
 8029e3c:	4a09      	ldr	r2, [pc, #36]	; (8029e64 <rand+0x70>)
 8029e3e:	435c      	muls	r4, r3
 8029e40:	fb02 4000 	mla	r0, r2, r0, r4
 8029e44:	fba3 2302 	umull	r2, r3, r3, r2
 8029e48:	3201      	adds	r2, #1
 8029e4a:	4403      	add	r3, r0
 8029e4c:	f143 0300 	adc.w	r3, r3, #0
 8029e50:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8029e54:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8029e58:	bd10      	pop	{r4, pc}
 8029e5a:	bf00      	nop
 8029e5c:	1ffe8b08 	.word	0x1ffe8b08
 8029e60:	5851f42d 	.word	0x5851f42d
 8029e64:	4c957f2d 	.word	0x4c957f2d

08029e68 <strcmp>:
 8029e68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029e6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029e70:	2a01      	cmp	r2, #1
 8029e72:	bf28      	it	cs
 8029e74:	429a      	cmpcs	r2, r3
 8029e76:	d0f7      	beq.n	8029e68 <strcmp>
 8029e78:	1ad0      	subs	r0, r2, r3
 8029e7a:	4770      	bx	lr

08029e7c <strlen>:
 8029e7c:	4603      	mov	r3, r0
 8029e7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029e82:	2a00      	cmp	r2, #0
 8029e84:	d1fb      	bne.n	8029e7e <strlen+0x2>
 8029e86:	1a18      	subs	r0, r3, r0
 8029e88:	3801      	subs	r0, #1
 8029e8a:	4770      	bx	lr

08029e8c <_strtol_r>:
 8029e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029e90:	4c40      	ldr	r4, [pc, #256]	; (8029f94 <_strtol_r+0x108>)
 8029e92:	f8d4 9000 	ldr.w	r9, [r4]
 8029e96:	460f      	mov	r7, r1
 8029e98:	463d      	mov	r5, r7
 8029e9a:	f815 eb01 	ldrb.w	lr, [r5], #1
 8029e9e:	eb09 040e 	add.w	r4, r9, lr
 8029ea2:	7866      	ldrb	r6, [r4, #1]
 8029ea4:	f006 0408 	and.w	r4, r6, #8
 8029ea8:	f004 06ff 	and.w	r6, r4, #255	; 0xff
 8029eac:	b10c      	cbz	r4, 8029eb2 <_strtol_r+0x26>
 8029eae:	462f      	mov	r7, r5
 8029eb0:	e7f2      	b.n	8029e98 <_strtol_r+0xc>
 8029eb2:	4674      	mov	r4, lr
 8029eb4:	2c2d      	cmp	r4, #45	; 0x2d
 8029eb6:	d103      	bne.n	8029ec0 <_strtol_r+0x34>
 8029eb8:	1cbd      	adds	r5, r7, #2
 8029eba:	787c      	ldrb	r4, [r7, #1]
 8029ebc:	2601      	movs	r6, #1
 8029ebe:	e003      	b.n	8029ec8 <_strtol_r+0x3c>
 8029ec0:	2c2b      	cmp	r4, #43	; 0x2b
 8029ec2:	bf04      	itt	eq
 8029ec4:	787c      	ldrbeq	r4, [r7, #1]
 8029ec6:	1cbd      	addeq	r5, r7, #2
 8029ec8:	b113      	cbz	r3, 8029ed0 <_strtol_r+0x44>
 8029eca:	2b10      	cmp	r3, #16
 8029ecc:	d10a      	bne.n	8029ee4 <_strtol_r+0x58>
 8029ece:	e05a      	b.n	8029f86 <_strtol_r+0xfa>
 8029ed0:	2c30      	cmp	r4, #48	; 0x30
 8029ed2:	d156      	bne.n	8029f82 <_strtol_r+0xf6>
 8029ed4:	782c      	ldrb	r4, [r5, #0]
 8029ed6:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8029eda:	2c58      	cmp	r4, #88	; 0x58
 8029edc:	d14c      	bne.n	8029f78 <_strtol_r+0xec>
 8029ede:	786c      	ldrb	r4, [r5, #1]
 8029ee0:	2310      	movs	r3, #16
 8029ee2:	3502      	adds	r5, #2
 8029ee4:	2e00      	cmp	r6, #0
 8029ee6:	bf14      	ite	ne
 8029ee8:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
 8029eec:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
 8029ef0:	2700      	movs	r7, #0
 8029ef2:	fbb8 faf3 	udiv	sl, r8, r3
 8029ef6:	46be      	mov	lr, r7
 8029ef8:	fb03 881a 	mls	r8, r3, sl, r8
 8029efc:	eb09 0c04 	add.w	ip, r9, r4
 8029f00:	f89c c001 	ldrb.w	ip, [ip, #1]
 8029f04:	f01c 0f04 	tst.w	ip, #4
 8029f08:	d001      	beq.n	8029f0e <_strtol_r+0x82>
 8029f0a:	3c30      	subs	r4, #48	; 0x30
 8029f0c:	e00b      	b.n	8029f26 <_strtol_r+0x9a>
 8029f0e:	f01c 0c03 	ands.w	ip, ip, #3
 8029f12:	d01b      	beq.n	8029f4c <_strtol_r+0xc0>
 8029f14:	f1bc 0f01 	cmp.w	ip, #1
 8029f18:	bf0c      	ite	eq
 8029f1a:	f04f 0c37 	moveq.w	ip, #55	; 0x37
 8029f1e:	f04f 0c57 	movne.w	ip, #87	; 0x57
 8029f22:	ebcc 0404 	rsb	r4, ip, r4
 8029f26:	429c      	cmp	r4, r3
 8029f28:	da10      	bge.n	8029f4c <_strtol_r+0xc0>
 8029f2a:	f1b7 3fff 	cmp.w	r7, #4294967295
 8029f2e:	d00a      	beq.n	8029f46 <_strtol_r+0xba>
 8029f30:	45d6      	cmp	lr, sl
 8029f32:	d806      	bhi.n	8029f42 <_strtol_r+0xb6>
 8029f34:	d101      	bne.n	8029f3a <_strtol_r+0xae>
 8029f36:	4544      	cmp	r4, r8
 8029f38:	dc03      	bgt.n	8029f42 <_strtol_r+0xb6>
 8029f3a:	fb03 4e0e 	mla	lr, r3, lr, r4
 8029f3e:	2701      	movs	r7, #1
 8029f40:	e001      	b.n	8029f46 <_strtol_r+0xba>
 8029f42:	f04f 37ff 	mov.w	r7, #4294967295
 8029f46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8029f4a:	e7d7      	b.n	8029efc <_strtol_r+0x70>
 8029f4c:	1c7c      	adds	r4, r7, #1
 8029f4e:	4673      	mov	r3, lr
 8029f50:	d10a      	bne.n	8029f68 <_strtol_r+0xdc>
 8029f52:	2e00      	cmp	r6, #0
 8029f54:	f04f 0122 	mov.w	r1, #34	; 0x22
 8029f58:	bf14      	ite	ne
 8029f5a:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
 8029f5e:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
 8029f62:	6001      	str	r1, [r0, #0]
 8029f64:	b92a      	cbnz	r2, 8029f72 <_strtol_r+0xe6>
 8029f66:	e011      	b.n	8029f8c <_strtol_r+0x100>
 8029f68:	b10e      	cbz	r6, 8029f6e <_strtol_r+0xe2>
 8029f6a:	f1ce 0300 	rsb	r3, lr, #0
 8029f6e:	b16a      	cbz	r2, 8029f8c <_strtol_r+0x100>
 8029f70:	b107      	cbz	r7, 8029f74 <_strtol_r+0xe8>
 8029f72:	1e69      	subs	r1, r5, #1
 8029f74:	6011      	str	r1, [r2, #0]
 8029f76:	e009      	b.n	8029f8c <_strtol_r+0x100>
 8029f78:	2430      	movs	r4, #48	; 0x30
 8029f7a:	2b00      	cmp	r3, #0
 8029f7c:	d1b2      	bne.n	8029ee4 <_strtol_r+0x58>
 8029f7e:	2308      	movs	r3, #8
 8029f80:	e7b0      	b.n	8029ee4 <_strtol_r+0x58>
 8029f82:	230a      	movs	r3, #10
 8029f84:	e7ae      	b.n	8029ee4 <_strtol_r+0x58>
 8029f86:	2c30      	cmp	r4, #48	; 0x30
 8029f88:	d1ac      	bne.n	8029ee4 <_strtol_r+0x58>
 8029f8a:	e7a3      	b.n	8029ed4 <_strtol_r+0x48>
 8029f8c:	4618      	mov	r0, r3
 8029f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029f92:	bf00      	nop
 8029f94:	1ffe8b0c 	.word	0x1ffe8b0c

08029f98 <strtol>:
 8029f98:	b530      	push	{r4, r5, lr}
 8029f9a:	4613      	mov	r3, r2
 8029f9c:	4a04      	ldr	r2, [pc, #16]	; (8029fb0 <strtol+0x18>)
 8029f9e:	4605      	mov	r5, r0
 8029fa0:	460c      	mov	r4, r1
 8029fa2:	6810      	ldr	r0, [r2, #0]
 8029fa4:	4629      	mov	r1, r5
 8029fa6:	4622      	mov	r2, r4
 8029fa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029fac:	f7ff bf6e 	b.w	8029e8c <_strtol_r>
 8029fb0:	1ffe8b08 	.word	0x1ffe8b08

08029fb4 <malloc>:
 8029fb4:	4b02      	ldr	r3, [pc, #8]	; (8029fc0 <malloc+0xc>)
 8029fb6:	4601      	mov	r1, r0
 8029fb8:	6818      	ldr	r0, [r3, #0]
 8029fba:	f000 b803 	b.w	8029fc4 <_malloc_r>
 8029fbe:	bf00      	nop
 8029fc0:	1ffe8b08 	.word	0x1ffe8b08

08029fc4 <_malloc_r>:
 8029fc4:	b570      	push	{r4, r5, r6, lr}
 8029fc6:	1ccc      	adds	r4, r1, #3
 8029fc8:	f024 0403 	bic.w	r4, r4, #3
 8029fcc:	3408      	adds	r4, #8
 8029fce:	2c0c      	cmp	r4, #12
 8029fd0:	bf38      	it	cc
 8029fd2:	240c      	movcc	r4, #12
 8029fd4:	2c00      	cmp	r4, #0
 8029fd6:	4606      	mov	r6, r0
 8029fd8:	da03      	bge.n	8029fe2 <_malloc_r+0x1e>
 8029fda:	230c      	movs	r3, #12
 8029fdc:	6033      	str	r3, [r6, #0]
 8029fde:	2000      	movs	r0, #0
 8029fe0:	bd70      	pop	{r4, r5, r6, pc}
 8029fe2:	428c      	cmp	r4, r1
 8029fe4:	d3f9      	bcc.n	8029fda <_malloc_r+0x16>
 8029fe6:	4a20      	ldr	r2, [pc, #128]	; (802a068 <_malloc_r+0xa4>)
 8029fe8:	6813      	ldr	r3, [r2, #0]
 8029fea:	4610      	mov	r0, r2
 8029fec:	4619      	mov	r1, r3
 8029fee:	b1a1      	cbz	r1, 802a01a <_malloc_r+0x56>
 8029ff0:	680a      	ldr	r2, [r1, #0]
 8029ff2:	1b12      	subs	r2, r2, r4
 8029ff4:	d40e      	bmi.n	802a014 <_malloc_r+0x50>
 8029ff6:	2a0b      	cmp	r2, #11
 8029ff8:	d903      	bls.n	802a002 <_malloc_r+0x3e>
 8029ffa:	600a      	str	r2, [r1, #0]
 8029ffc:	188b      	adds	r3, r1, r2
 8029ffe:	508c      	str	r4, [r1, r2]
 802a000:	e01f      	b.n	802a042 <_malloc_r+0x7e>
 802a002:	428b      	cmp	r3, r1
 802a004:	bf0d      	iteet	eq
 802a006:	685a      	ldreq	r2, [r3, #4]
 802a008:	684a      	ldrne	r2, [r1, #4]
 802a00a:	605a      	strne	r2, [r3, #4]
 802a00c:	6002      	streq	r2, [r0, #0]
 802a00e:	bf18      	it	ne
 802a010:	460b      	movne	r3, r1
 802a012:	e016      	b.n	802a042 <_malloc_r+0x7e>
 802a014:	460b      	mov	r3, r1
 802a016:	6849      	ldr	r1, [r1, #4]
 802a018:	e7e9      	b.n	8029fee <_malloc_r+0x2a>
 802a01a:	4d14      	ldr	r5, [pc, #80]	; (802a06c <_malloc_r+0xa8>)
 802a01c:	682b      	ldr	r3, [r5, #0]
 802a01e:	b91b      	cbnz	r3, 802a028 <_malloc_r+0x64>
 802a020:	4630      	mov	r0, r6
 802a022:	f000 f825 	bl	802a070 <_sbrk_r>
 802a026:	6028      	str	r0, [r5, #0]
 802a028:	4630      	mov	r0, r6
 802a02a:	4621      	mov	r1, r4
 802a02c:	f000 f820 	bl	802a070 <_sbrk_r>
 802a030:	1c42      	adds	r2, r0, #1
 802a032:	4603      	mov	r3, r0
 802a034:	d0d1      	beq.n	8029fda <_malloc_r+0x16>
 802a036:	1cc5      	adds	r5, r0, #3
 802a038:	f025 0503 	bic.w	r5, r5, #3
 802a03c:	4285      	cmp	r5, r0
 802a03e:	d10a      	bne.n	802a056 <_malloc_r+0x92>
 802a040:	601c      	str	r4, [r3, #0]
 802a042:	f103 000b 	add.w	r0, r3, #11
 802a046:	1d1a      	adds	r2, r3, #4
 802a048:	f020 0007 	bic.w	r0, r0, #7
 802a04c:	1a82      	subs	r2, r0, r2
 802a04e:	d00a      	beq.n	802a066 <_malloc_r+0xa2>
 802a050:	4251      	negs	r1, r2
 802a052:	5099      	str	r1, [r3, r2]
 802a054:	bd70      	pop	{r4, r5, r6, pc}
 802a056:	4630      	mov	r0, r6
 802a058:	1ae9      	subs	r1, r5, r3
 802a05a:	f000 f809 	bl	802a070 <_sbrk_r>
 802a05e:	3001      	adds	r0, #1
 802a060:	d0bb      	beq.n	8029fda <_malloc_r+0x16>
 802a062:	462b      	mov	r3, r5
 802a064:	e7ec      	b.n	802a040 <_malloc_r+0x7c>
 802a066:	bd70      	pop	{r4, r5, r6, pc}
 802a068:	1fff011c 	.word	0x1fff011c
 802a06c:	1fff0118 	.word	0x1fff0118

0802a070 <_sbrk_r>:
 802a070:	b538      	push	{r3, r4, r5, lr}
 802a072:	4c06      	ldr	r4, [pc, #24]	; (802a08c <_sbrk_r+0x1c>)
 802a074:	2300      	movs	r3, #0
 802a076:	4605      	mov	r5, r0
 802a078:	4608      	mov	r0, r1
 802a07a:	6023      	str	r3, [r4, #0]
 802a07c:	f7f8 fce0 	bl	8022a40 <_sbrk>
 802a080:	1c43      	adds	r3, r0, #1
 802a082:	d102      	bne.n	802a08a <_sbrk_r+0x1a>
 802a084:	6823      	ldr	r3, [r4, #0]
 802a086:	b103      	cbz	r3, 802a08a <_sbrk_r+0x1a>
 802a088:	602b      	str	r3, [r5, #0]
 802a08a:	bd38      	pop	{r3, r4, r5, pc}
 802a08c:	1fff0934 	.word	0x1fff0934

0802a090 <UART_0_channel_config>:
 802a090:	00002580 01080800 00000010              .%..........

0802a09c <UART_0_tx_pin_config>:
 802a09c:	000000a0 00000001 00000002              ............

0802a0a8 <UART_0_tx_pin>:
 802a0a8:	48028100 00000009 0802a09c              ...H........

0802a0b4 <UART_0_config>:
 802a0b4:	0802a090 08022e45 0802991d 00000000     ....E...........
	...
 802a0d4:	0802a0a8 04000200 00000004              ............

0802a0e0 <UART_0_rx_pin_config>:
 802a0e0:	00000000 00000001 00000002              ............

0802a0ec <SPI_MASTER_ADC_MOSI>:
 802a0ec:	48028300 00000008                       ...H....

0802a0f4 <SPI_MASTER_ADC_MISO>:
 802a0f4:	48028300 00000007                       ...H....

0802a0fc <SPI_MASTER_ADC_SCLKOUT>:
 802a0fc:	48028300 00000009                       ...H....

0802a104 <SPI_MASTER_ADC_SCLKOUT_Config>:
 802a104:	00000088 00000001 00000001 00000000     ................
 802a114:	00000000                                ....

0802a118 <SPI_MASTER_ADC_SS_0>:
 802a118:	48028500 00000003                       ...H....

0802a120 <SPI_MASTER_ADC_SS_0_Config>:
 802a120:	00000088 00000001 00000001 00000000     ................
 802a130:	00010000                                ....

0802a134 <SPI_MASTER_ADC_SS_1>:
 802a134:	48028500 00000004                       ...H....

0802a13c <SPI_MASTER_ADC_Config>:
 802a13c:	1ffe8898 08024051 0802a0ec 1ffe8870     ....Q@......p...
 802a14c:	0802a0f4 1ffe8b70 00000000 00000000     ....p...........
	...
 802a164:	0802a0fc 0802a104 0802a118 0802a134     ............4...
	...
 802a18c:	0802a120 1ffe8884 00000000 00000000      ...............
	...
 802a1c0:	02000101 00000102                       ........

0802a1c8 <SPI_MASTER_TC_MOSI>:
 802a1c8:	48028000 00000005                       ...H....

0802a1d0 <SPI_MASTER_TC_MISO>:
 802a1d0:	48028000 00000004                       ...H....

0802a1d8 <SPI_MASTER_TC_SCLKOUT>:
 802a1d8:	48028000 0000000b                       ...H....

0802a1e0 <SPI_MASTER_TC_SCLKOUT_Config>:
 802a1e0:	00000090 00000001 00000001 00000000     ................
 802a1f0:	00000000                                ....

0802a1f4 <SPI_MASTER_TC_SS_0>:
 802a1f4:	48028000 00000006                       ...H....

0802a1fc <SPI_MASTER_TC_SS_0_Config>:
 802a1fc:	00000090 00000001 00000001 00000000     ................
 802a20c:	00010000                                ....

0802a210 <SPI_MASTER_TC_SS_1>:
 802a210:	48028000 0000000e                       ...H....

0802a218 <SPI_MASTER_TC_SS_2>:
 802a218:	48028000 0000000f                       ...H....

0802a220 <SPI_MASTER_TC_SS_2_Config>:
 802a220:	00000090 00000001 00000001 00000000     ................
 802a230:	00040000                                ....

0802a234 <SPI_MASTER_TC_SS_3>:
 802a234:	48028300 0000000e                       ...H....

0802a23c <SPI_MASTER_TC_SS_3_Config>:
 802a23c:	00000090 00000001 00000001 00000000     ................
 802a24c:	00080000                                ....

0802a250 <SPI_MASTER_TC_Config>:
 802a250:	1ffe8958 0802421d 0802a1c8 1ffe8930     X....B......0...
 802a260:	0802a1d0 1ffe8b84 00000000 00000000     ................
	...
 802a278:	0802a1d8 0802a1e0 0802a1f4 0802a210     ................
 802a288:	0802a218 0802a234 00000000 00000000     ....4...........
	...
 802a2a0:	0802a1fc 1ffe8944 0802a220 0802a23c     ....D... ...<...
	...
 802a2d4:	04000101 00010002                       ........

0802a2dc <PIN_INTERRUPT_ADC0>:
 802a2dc:	50004800 48028300 00000000 00000000     .H.P...H........
 802a2ec:	00000000 00000004 00000139 00003f04     ........9....?..
 802a2fc:	00000103                                ....

0802a300 <PIN_INTERRUPT_ADC1>:
 802a300:	50004800 48028000 00000000 00000000     .H.P...H........
	...
 802a318:	00000029 01003e03 00000a02              )....>......

0802a324 <INTERRUPT_TC>:
 802a324:	00003d38                                8=..

0802a328 <INTERRUPT_TIMESTAMP>:
 802a328:	00003f39                                9?..

0802a32c <INTERRUPT_ETH>:
 802a32c:	00003e40                                @>..

0802a330 <e_eeprom_xmc4_fce>:
 802a330:	50020020 00000700 00000000               ..P........

0802a33c <eth_phy_config>:
 802a33c:	00000001 00010000                       ........

0802a344 <ethbroadcast>:
 802a344:	ffffffff 0000ffff                       ........

0802a34c <ethzero>:
	...

0802a354 <ip_addr_any>:
 802a354:	00000000                                ....

0802a358 <memp_sizes>:
 802a358:	0024001c 00100014 06100010              ..$.........

0802a364 <memp_num>:
 802a364:	00040004 00070008 00100010              ............

0802a370 <LED_INDICATOR>:
 802a370:	48028500 00000080 00010000 00000000     ...H............
 802a380:	00000008 01010230 00010000 00000000     ....0...........
 802a390:	00010000 01010102 312e3031 30312e30     ........10.10.10
 802a3a0:	0035372e 312e3031 30312e30 0035322e     .75.10.10.10.25.
 802a3b0:	2e353532 2e353532 2e353532 00000030     255.255.255.0...
 802a3c0:	65746e65 6f632072 6e616d6d 6f662064     enter command fo
 802a3d0:	776f6c6c 62206465 656e2079 6e696c77     llowed by newlin
 802a3e0:	70202c65 6973736f 20656c62 6d6d6f63     e, possible comm
 802a3f0:	73646e61 20090a3a 706c6568 202d2d20     ands:.. help -- 
 802a400:	70736964 7379616c 69687420 656d2073     displays this me
 802a410:	2020756e 70692020 6372732e 6f735b3d     nu    ip.src=[so
 802a420:	65637275 20504920 72646461 2c737365     urce IP address,
 802a430:	672e6520 3031202e 2e30312e 322e3031      e.g. 10.10.10.2
 802a440:	200a5d35 69202020 73642e70 645b3d74     5].    ip.dst=[d
 802a450:	69747365 6974616e 49206e6f 64612050     estination IP ad
 802a460:	73657264 200a5d73 69202020 77672e70     dress].    ip.gw
 802a470:	65645b3d 6c756166 61672074 61776574     =[default gatewa
 802a480:	50492079 64646120 73736572 20200a5d     y IP address].  
 802a490:	70692020 6275732e 3d74656e 6275735b       ip.subnet=[sub
 802a4a0:	2074656e 6b73616d 20504920 72646461     net mask IP addr
 802a4b0:	5d737365 2020200a 70647520 6372732e     ess].    udp.src
 802a4c0:	6f735b3d 65637275 50445520 726f7020     =[source UDP por
 802a4d0:	200a5d74 75202020 612e7064 3d306364     t].    udp.adc0=
 802a4e0:	7365645b 616e6974 6e6f6974 726f7020     [destination por
 802a4f0:	6f662074 44412072 70203043 656b6361     t for ADC0 packe
 802a500:	0a5d7374 20202020 2e706475 31636461     ts].    udp.adc1
 802a510:	65645b3d 6e697473 6f697461 6f70206e     =[destination po
 802a520:	66207472 4120726f 20314344 6b636170     rt for ADC1 pack
 802a530:	5d737465 2020200a 70647520 3d63742e     ets].    udp.tc=
 802a540:	7365645b 616e6974 6e6f6974 726f7020     [destination por
 802a550:	6f662074 68742072 6f6d7265 70756f63     t for thermocoup
 802a560:	7020656c 656b6361 0a5d7374 00000000     le packets].....
 802a570:	6f727265 00000a72 79616b6f 0000000a     error...okay....
 802a580:	706c6568 00000000 732e7069 00006372     help....ip.src..
 802a590:	642e7069 00007473 672e7069 00000077     ip.dst..ip.gw...
 802a5a0:	732e7069 656e6275 00000074 2e706475     ip.subnet...udp.
 802a5b0:	00637273 2e706475 30636461 00000000     src.udp.adc0....
 802a5c0:	2e706475 31636461 00000000 2e706475     udp.adc1....udp.
 802a5d0:	00006374 00000000 00000001 00000002     tc..............
 802a5e0:	00000003 00005506 0000684b 00003c4c     .....U..Kh..L<..
 802a5f0:	0000024d 00004e4e 00000f4f 20000043              M...NN..O...C.

0802a5fe <_ctype_>:
 802a5fe:	20202000 20202020 28282020 20282828     .         ((((( 
 802a60e:	20202020 20202020 20202020 20202020                     
 802a61e:	10108820 10101010 10101010 10101010      ...............
 802a62e:	04040410 04040404 10040404 10101010     ................
 802a63e:	41411010 41414141 01010101 01010101     ..AAAAAA........
 802a64e:	01010101 01010101 01010101 10101010     ................
 802a65e:	42421010 42424242 02020202 02020202     ..BBBBBB........
 802a66e:	02020202 02020202 02020202 10101010     ................
 802a67e:	00000020 00000000 00000000 00000000      ...............
	...
